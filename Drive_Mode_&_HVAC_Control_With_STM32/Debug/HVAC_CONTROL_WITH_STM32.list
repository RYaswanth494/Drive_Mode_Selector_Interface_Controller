
HVAC_CONTROL_WITH_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e10  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb4  08009f20  08009f20  0000af20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aed4  0800aed4  0000c1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aed4  0800aed4  0000bed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aedc  0800aedc  0000c1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aedc  0800aedc  0000bedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aee0  0800aee0  0000bee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800aee4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000550  200001f8  0800b0d8  0000c1f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  0800b0d8  0000c748  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000baef  00000000  00000000  0000c21d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b85  00000000  00000000  00017d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0001a898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e1  00000000  00000000  0001b450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019784  00000000  00000000  0001bd31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c74  00000000  00000000  000354b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085c4e  00000000  00000000  00048129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdd77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fa8  00000000  00000000  000cddbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  000d1d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009f08 	.word	0x08009f08

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08009f08 	.word	0x08009f08

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_ldivmod>:
 8001030:	b97b      	cbnz	r3, 8001052 <__aeabi_ldivmod+0x22>
 8001032:	b972      	cbnz	r2, 8001052 <__aeabi_ldivmod+0x22>
 8001034:	2900      	cmp	r1, #0
 8001036:	bfbe      	ittt	lt
 8001038:	2000      	movlt	r0, #0
 800103a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800103e:	e006      	blt.n	800104e <__aeabi_ldivmod+0x1e>
 8001040:	bf08      	it	eq
 8001042:	2800      	cmpeq	r0, #0
 8001044:	bf1c      	itt	ne
 8001046:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800104a:	f04f 30ff 	movne.w	r0, #4294967295
 800104e:	f000 b9f5 	b.w	800143c <__aeabi_idiv0>
 8001052:	f1ad 0c08 	sub.w	ip, sp, #8
 8001056:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800105a:	2900      	cmp	r1, #0
 800105c:	db09      	blt.n	8001072 <__aeabi_ldivmod+0x42>
 800105e:	2b00      	cmp	r3, #0
 8001060:	db1a      	blt.n	8001098 <__aeabi_ldivmod+0x68>
 8001062:	f000 f86b 	bl	800113c <__udivmoddi4>
 8001066:	f8dd e004 	ldr.w	lr, [sp, #4]
 800106a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800106e:	b004      	add	sp, #16
 8001070:	4770      	bx	lr
 8001072:	4240      	negs	r0, r0
 8001074:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	db1b      	blt.n	80010b4 <__aeabi_ldivmod+0x84>
 800107c:	f000 f85e 	bl	800113c <__udivmoddi4>
 8001080:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001088:	b004      	add	sp, #16
 800108a:	4240      	negs	r0, r0
 800108c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001090:	4252      	negs	r2, r2
 8001092:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001096:	4770      	bx	lr
 8001098:	4252      	negs	r2, r2
 800109a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800109e:	f000 f84d 	bl	800113c <__udivmoddi4>
 80010a2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010aa:	b004      	add	sp, #16
 80010ac:	4240      	negs	r0, r0
 80010ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b2:	4770      	bx	lr
 80010b4:	4252      	negs	r2, r2
 80010b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ba:	f000 f83f 	bl	800113c <__udivmoddi4>
 80010be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c6:	b004      	add	sp, #16
 80010c8:	4252      	negs	r2, r2
 80010ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ce:	4770      	bx	lr

080010d0 <__aeabi_d2lz>:
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	2200      	movs	r2, #0
 80010d4:	2300      	movs	r3, #0
 80010d6:	4604      	mov	r4, r0
 80010d8:	460d      	mov	r5, r1
 80010da:	f7ff fc6f 	bl	80009bc <__aeabi_dcmplt>
 80010de:	b928      	cbnz	r0, 80010ec <__aeabi_d2lz+0x1c>
 80010e0:	4620      	mov	r0, r4
 80010e2:	4629      	mov	r1, r5
 80010e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010e8:	f000 b80a 	b.w	8001100 <__aeabi_d2ulz>
 80010ec:	4620      	mov	r0, r4
 80010ee:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80010f2:	f000 f805 	bl	8001100 <__aeabi_d2ulz>
 80010f6:	4240      	negs	r0, r0
 80010f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010fc:	bd38      	pop	{r3, r4, r5, pc}
 80010fe:	bf00      	nop

08001100 <__aeabi_d2ulz>:
 8001100:	b5d0      	push	{r4, r6, r7, lr}
 8001102:	2200      	movs	r2, #0
 8001104:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <__aeabi_d2ulz+0x34>)
 8001106:	4606      	mov	r6, r0
 8001108:	460f      	mov	r7, r1
 800110a:	f7ff f9e5 	bl	80004d8 <__aeabi_dmul>
 800110e:	f000 f997 	bl	8001440 <__aeabi_d2uiz>
 8001112:	4604      	mov	r4, r0
 8001114:	f7ff f966 	bl	80003e4 <__aeabi_ui2d>
 8001118:	2200      	movs	r2, #0
 800111a:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <__aeabi_d2ulz+0x38>)
 800111c:	f7ff f9dc 	bl	80004d8 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4630      	mov	r0, r6
 8001126:	4639      	mov	r1, r7
 8001128:	f7ff f81e 	bl	8000168 <__aeabi_dsub>
 800112c:	f000 f988 	bl	8001440 <__aeabi_d2uiz>
 8001130:	4621      	mov	r1, r4
 8001132:	bdd0      	pop	{r4, r6, r7, pc}
 8001134:	3df00000 	.word	0x3df00000
 8001138:	41f00000 	.word	0x41f00000

0800113c <__udivmoddi4>:
 800113c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001140:	9d08      	ldr	r5, [sp, #32]
 8001142:	468e      	mov	lr, r1
 8001144:	4604      	mov	r4, r0
 8001146:	4688      	mov	r8, r1
 8001148:	2b00      	cmp	r3, #0
 800114a:	d14a      	bne.n	80011e2 <__udivmoddi4+0xa6>
 800114c:	428a      	cmp	r2, r1
 800114e:	4617      	mov	r7, r2
 8001150:	d962      	bls.n	8001218 <__udivmoddi4+0xdc>
 8001152:	fab2 f682 	clz	r6, r2
 8001156:	b14e      	cbz	r6, 800116c <__udivmoddi4+0x30>
 8001158:	f1c6 0320 	rsb	r3, r6, #32
 800115c:	fa01 f806 	lsl.w	r8, r1, r6
 8001160:	fa20 f303 	lsr.w	r3, r0, r3
 8001164:	40b7      	lsls	r7, r6
 8001166:	ea43 0808 	orr.w	r8, r3, r8
 800116a:	40b4      	lsls	r4, r6
 800116c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001170:	fbb8 f1fe 	udiv	r1, r8, lr
 8001174:	fa1f fc87 	uxth.w	ip, r7
 8001178:	fb0e 8811 	mls	r8, lr, r1, r8
 800117c:	fb01 f20c 	mul.w	r2, r1, ip
 8001180:	0c23      	lsrs	r3, r4, #16
 8001182:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001186:	429a      	cmp	r2, r3
 8001188:	d909      	bls.n	800119e <__udivmoddi4+0x62>
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	f101 30ff 	add.w	r0, r1, #4294967295
 8001190:	f080 80eb 	bcs.w	800136a <__udivmoddi4+0x22e>
 8001194:	429a      	cmp	r2, r3
 8001196:	f240 80e8 	bls.w	800136a <__udivmoddi4+0x22e>
 800119a:	3902      	subs	r1, #2
 800119c:	443b      	add	r3, r7
 800119e:	1a9a      	subs	r2, r3, r2
 80011a0:	fbb2 f0fe 	udiv	r0, r2, lr
 80011a4:	fb0e 2210 	mls	r2, lr, r0, r2
 80011a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80011ac:	b2a3      	uxth	r3, r4
 80011ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011b2:	459c      	cmp	ip, r3
 80011b4:	d909      	bls.n	80011ca <__udivmoddi4+0x8e>
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80011bc:	f080 80d7 	bcs.w	800136e <__udivmoddi4+0x232>
 80011c0:	459c      	cmp	ip, r3
 80011c2:	f240 80d4 	bls.w	800136e <__udivmoddi4+0x232>
 80011c6:	443b      	add	r3, r7
 80011c8:	3802      	subs	r0, #2
 80011ca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80011ce:	2100      	movs	r1, #0
 80011d0:	eba3 030c 	sub.w	r3, r3, ip
 80011d4:	b11d      	cbz	r5, 80011de <__udivmoddi4+0xa2>
 80011d6:	2200      	movs	r2, #0
 80011d8:	40f3      	lsrs	r3, r6
 80011da:	e9c5 3200 	strd	r3, r2, [r5]
 80011de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011e2:	428b      	cmp	r3, r1
 80011e4:	d905      	bls.n	80011f2 <__udivmoddi4+0xb6>
 80011e6:	b10d      	cbz	r5, 80011ec <__udivmoddi4+0xb0>
 80011e8:	e9c5 0100 	strd	r0, r1, [r5]
 80011ec:	2100      	movs	r1, #0
 80011ee:	4608      	mov	r0, r1
 80011f0:	e7f5      	b.n	80011de <__udivmoddi4+0xa2>
 80011f2:	fab3 f183 	clz	r1, r3
 80011f6:	2900      	cmp	r1, #0
 80011f8:	d146      	bne.n	8001288 <__udivmoddi4+0x14c>
 80011fa:	4573      	cmp	r3, lr
 80011fc:	d302      	bcc.n	8001204 <__udivmoddi4+0xc8>
 80011fe:	4282      	cmp	r2, r0
 8001200:	f200 8108 	bhi.w	8001414 <__udivmoddi4+0x2d8>
 8001204:	1a84      	subs	r4, r0, r2
 8001206:	eb6e 0203 	sbc.w	r2, lr, r3
 800120a:	2001      	movs	r0, #1
 800120c:	4690      	mov	r8, r2
 800120e:	2d00      	cmp	r5, #0
 8001210:	d0e5      	beq.n	80011de <__udivmoddi4+0xa2>
 8001212:	e9c5 4800 	strd	r4, r8, [r5]
 8001216:	e7e2      	b.n	80011de <__udivmoddi4+0xa2>
 8001218:	2a00      	cmp	r2, #0
 800121a:	f000 8091 	beq.w	8001340 <__udivmoddi4+0x204>
 800121e:	fab2 f682 	clz	r6, r2
 8001222:	2e00      	cmp	r6, #0
 8001224:	f040 80a5 	bne.w	8001372 <__udivmoddi4+0x236>
 8001228:	1a8a      	subs	r2, r1, r2
 800122a:	2101      	movs	r1, #1
 800122c:	0c03      	lsrs	r3, r0, #16
 800122e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001232:	b280      	uxth	r0, r0
 8001234:	b2bc      	uxth	r4, r7
 8001236:	fbb2 fcfe 	udiv	ip, r2, lr
 800123a:	fb0e 221c 	mls	r2, lr, ip, r2
 800123e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001242:	fb04 f20c 	mul.w	r2, r4, ip
 8001246:	429a      	cmp	r2, r3
 8001248:	d907      	bls.n	800125a <__udivmoddi4+0x11e>
 800124a:	18fb      	adds	r3, r7, r3
 800124c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001250:	d202      	bcs.n	8001258 <__udivmoddi4+0x11c>
 8001252:	429a      	cmp	r2, r3
 8001254:	f200 80e3 	bhi.w	800141e <__udivmoddi4+0x2e2>
 8001258:	46c4      	mov	ip, r8
 800125a:	1a9b      	subs	r3, r3, r2
 800125c:	fbb3 f2fe 	udiv	r2, r3, lr
 8001260:	fb0e 3312 	mls	r3, lr, r2, r3
 8001264:	fb02 f404 	mul.w	r4, r2, r4
 8001268:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800126c:	429c      	cmp	r4, r3
 800126e:	d907      	bls.n	8001280 <__udivmoddi4+0x144>
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	f102 30ff 	add.w	r0, r2, #4294967295
 8001276:	d202      	bcs.n	800127e <__udivmoddi4+0x142>
 8001278:	429c      	cmp	r4, r3
 800127a:	f200 80cd 	bhi.w	8001418 <__udivmoddi4+0x2dc>
 800127e:	4602      	mov	r2, r0
 8001280:	1b1b      	subs	r3, r3, r4
 8001282:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001286:	e7a5      	b.n	80011d4 <__udivmoddi4+0x98>
 8001288:	f1c1 0620 	rsb	r6, r1, #32
 800128c:	408b      	lsls	r3, r1
 800128e:	fa22 f706 	lsr.w	r7, r2, r6
 8001292:	431f      	orrs	r7, r3
 8001294:	fa2e fa06 	lsr.w	sl, lr, r6
 8001298:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800129c:	fbba f8f9 	udiv	r8, sl, r9
 80012a0:	fa0e fe01 	lsl.w	lr, lr, r1
 80012a4:	fa20 f306 	lsr.w	r3, r0, r6
 80012a8:	fb09 aa18 	mls	sl, r9, r8, sl
 80012ac:	fa1f fc87 	uxth.w	ip, r7
 80012b0:	ea43 030e 	orr.w	r3, r3, lr
 80012b4:	fa00 fe01 	lsl.w	lr, r0, r1
 80012b8:	fb08 f00c 	mul.w	r0, r8, ip
 80012bc:	0c1c      	lsrs	r4, r3, #16
 80012be:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80012c2:	42a0      	cmp	r0, r4
 80012c4:	fa02 f201 	lsl.w	r2, r2, r1
 80012c8:	d90a      	bls.n	80012e0 <__udivmoddi4+0x1a4>
 80012ca:	193c      	adds	r4, r7, r4
 80012cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80012d0:	f080 809e 	bcs.w	8001410 <__udivmoddi4+0x2d4>
 80012d4:	42a0      	cmp	r0, r4
 80012d6:	f240 809b 	bls.w	8001410 <__udivmoddi4+0x2d4>
 80012da:	f1a8 0802 	sub.w	r8, r8, #2
 80012de:	443c      	add	r4, r7
 80012e0:	1a24      	subs	r4, r4, r0
 80012e2:	b298      	uxth	r0, r3
 80012e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80012e8:	fb09 4413 	mls	r4, r9, r3, r4
 80012ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80012f0:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80012f4:	45a4      	cmp	ip, r4
 80012f6:	d909      	bls.n	800130c <__udivmoddi4+0x1d0>
 80012f8:	193c      	adds	r4, r7, r4
 80012fa:	f103 30ff 	add.w	r0, r3, #4294967295
 80012fe:	f080 8085 	bcs.w	800140c <__udivmoddi4+0x2d0>
 8001302:	45a4      	cmp	ip, r4
 8001304:	f240 8082 	bls.w	800140c <__udivmoddi4+0x2d0>
 8001308:	3b02      	subs	r3, #2
 800130a:	443c      	add	r4, r7
 800130c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001310:	eba4 040c 	sub.w	r4, r4, ip
 8001314:	fba0 8c02 	umull	r8, ip, r0, r2
 8001318:	4564      	cmp	r4, ip
 800131a:	4643      	mov	r3, r8
 800131c:	46e1      	mov	r9, ip
 800131e:	d364      	bcc.n	80013ea <__udivmoddi4+0x2ae>
 8001320:	d061      	beq.n	80013e6 <__udivmoddi4+0x2aa>
 8001322:	b15d      	cbz	r5, 800133c <__udivmoddi4+0x200>
 8001324:	ebbe 0203 	subs.w	r2, lr, r3
 8001328:	eb64 0409 	sbc.w	r4, r4, r9
 800132c:	fa04 f606 	lsl.w	r6, r4, r6
 8001330:	fa22 f301 	lsr.w	r3, r2, r1
 8001334:	431e      	orrs	r6, r3
 8001336:	40cc      	lsrs	r4, r1
 8001338:	e9c5 6400 	strd	r6, r4, [r5]
 800133c:	2100      	movs	r1, #0
 800133e:	e74e      	b.n	80011de <__udivmoddi4+0xa2>
 8001340:	fbb1 fcf2 	udiv	ip, r1, r2
 8001344:	0c01      	lsrs	r1, r0, #16
 8001346:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800134a:	b280      	uxth	r0, r0
 800134c:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001350:	463b      	mov	r3, r7
 8001352:	fbb1 f1f7 	udiv	r1, r1, r7
 8001356:	4638      	mov	r0, r7
 8001358:	463c      	mov	r4, r7
 800135a:	46b8      	mov	r8, r7
 800135c:	46be      	mov	lr, r7
 800135e:	2620      	movs	r6, #32
 8001360:	eba2 0208 	sub.w	r2, r2, r8
 8001364:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001368:	e765      	b.n	8001236 <__udivmoddi4+0xfa>
 800136a:	4601      	mov	r1, r0
 800136c:	e717      	b.n	800119e <__udivmoddi4+0x62>
 800136e:	4610      	mov	r0, r2
 8001370:	e72b      	b.n	80011ca <__udivmoddi4+0x8e>
 8001372:	f1c6 0120 	rsb	r1, r6, #32
 8001376:	fa2e fc01 	lsr.w	ip, lr, r1
 800137a:	40b7      	lsls	r7, r6
 800137c:	fa0e fe06 	lsl.w	lr, lr, r6
 8001380:	fa20 f101 	lsr.w	r1, r0, r1
 8001384:	ea41 010e 	orr.w	r1, r1, lr
 8001388:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800138c:	fbbc f8fe 	udiv	r8, ip, lr
 8001390:	b2bc      	uxth	r4, r7
 8001392:	fb0e cc18 	mls	ip, lr, r8, ip
 8001396:	fb08 f904 	mul.w	r9, r8, r4
 800139a:	0c0a      	lsrs	r2, r1, #16
 800139c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80013a0:	40b0      	lsls	r0, r6
 80013a2:	4591      	cmp	r9, r2
 80013a4:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80013a8:	b280      	uxth	r0, r0
 80013aa:	d93e      	bls.n	800142a <__udivmoddi4+0x2ee>
 80013ac:	18ba      	adds	r2, r7, r2
 80013ae:	f108 3cff 	add.w	ip, r8, #4294967295
 80013b2:	d201      	bcs.n	80013b8 <__udivmoddi4+0x27c>
 80013b4:	4591      	cmp	r9, r2
 80013b6:	d81f      	bhi.n	80013f8 <__udivmoddi4+0x2bc>
 80013b8:	eba2 0209 	sub.w	r2, r2, r9
 80013bc:	fbb2 f9fe 	udiv	r9, r2, lr
 80013c0:	fb09 f804 	mul.w	r8, r9, r4
 80013c4:	fb0e 2a19 	mls	sl, lr, r9, r2
 80013c8:	b28a      	uxth	r2, r1
 80013ca:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80013ce:	4542      	cmp	r2, r8
 80013d0:	d229      	bcs.n	8001426 <__udivmoddi4+0x2ea>
 80013d2:	18ba      	adds	r2, r7, r2
 80013d4:	f109 31ff 	add.w	r1, r9, #4294967295
 80013d8:	d2c2      	bcs.n	8001360 <__udivmoddi4+0x224>
 80013da:	4542      	cmp	r2, r8
 80013dc:	d2c0      	bcs.n	8001360 <__udivmoddi4+0x224>
 80013de:	f1a9 0102 	sub.w	r1, r9, #2
 80013e2:	443a      	add	r2, r7
 80013e4:	e7bc      	b.n	8001360 <__udivmoddi4+0x224>
 80013e6:	45c6      	cmp	lr, r8
 80013e8:	d29b      	bcs.n	8001322 <__udivmoddi4+0x1e6>
 80013ea:	ebb8 0302 	subs.w	r3, r8, r2
 80013ee:	eb6c 0c07 	sbc.w	ip, ip, r7
 80013f2:	3801      	subs	r0, #1
 80013f4:	46e1      	mov	r9, ip
 80013f6:	e794      	b.n	8001322 <__udivmoddi4+0x1e6>
 80013f8:	eba7 0909 	sub.w	r9, r7, r9
 80013fc:	444a      	add	r2, r9
 80013fe:	fbb2 f9fe 	udiv	r9, r2, lr
 8001402:	f1a8 0c02 	sub.w	ip, r8, #2
 8001406:	fb09 f804 	mul.w	r8, r9, r4
 800140a:	e7db      	b.n	80013c4 <__udivmoddi4+0x288>
 800140c:	4603      	mov	r3, r0
 800140e:	e77d      	b.n	800130c <__udivmoddi4+0x1d0>
 8001410:	46d0      	mov	r8, sl
 8001412:	e765      	b.n	80012e0 <__udivmoddi4+0x1a4>
 8001414:	4608      	mov	r0, r1
 8001416:	e6fa      	b.n	800120e <__udivmoddi4+0xd2>
 8001418:	443b      	add	r3, r7
 800141a:	3a02      	subs	r2, #2
 800141c:	e730      	b.n	8001280 <__udivmoddi4+0x144>
 800141e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001422:	443b      	add	r3, r7
 8001424:	e719      	b.n	800125a <__udivmoddi4+0x11e>
 8001426:	4649      	mov	r1, r9
 8001428:	e79a      	b.n	8001360 <__udivmoddi4+0x224>
 800142a:	eba2 0209 	sub.w	r2, r2, r9
 800142e:	fbb2 f9fe 	udiv	r9, r2, lr
 8001432:	46c4      	mov	ip, r8
 8001434:	fb09 f804 	mul.w	r8, r9, r4
 8001438:	e7c4      	b.n	80013c4 <__udivmoddi4+0x288>
 800143a:	bf00      	nop

0800143c <__aeabi_idiv0>:
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop

08001440 <__aeabi_d2uiz>:
 8001440:	004a      	lsls	r2, r1, #1
 8001442:	d211      	bcs.n	8001468 <__aeabi_d2uiz+0x28>
 8001444:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8001448:	d211      	bcs.n	800146e <__aeabi_d2uiz+0x2e>
 800144a:	d50d      	bpl.n	8001468 <__aeabi_d2uiz+0x28>
 800144c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8001450:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001454:	d40e      	bmi.n	8001474 <__aeabi_d2uiz+0x34>
 8001456:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800145a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800145e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001462:	fa23 f002 	lsr.w	r0, r3, r2
 8001466:	4770      	bx	lr
 8001468:	f04f 0000 	mov.w	r0, #0
 800146c:	4770      	bx	lr
 800146e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001472:	d102      	bne.n	800147a <__aeabi_d2uiz+0x3a>
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	4770      	bx	lr
 800147a:	f04f 0000 	mov.w	r0, #0
 800147e:	4770      	bx	lr

08001480 <Blower_Relay_Pins_Init>:

#define PB12_LOW_SPEED_BLOWER    12
#define PB13_MEDIUM_SPEED_BLOWER 13
#define PB14_HIGH_SPEED_BLOWER   14

void Blower_Relay_Pins_Init(){
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <Blower_Relay_Pins_Init+0x44>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a0e      	ldr	r2, [pc, #56]	@ (80014c4 <Blower_Relay_Pins_Init+0x44>)
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	6193      	str	r3, [r2, #24]
    GPIOB->CRH&=~((0xF<<16)|(0XF<<20)|(0XF<<24));
 8001490:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <Blower_Relay_Pins_Init+0x48>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4a0c      	ldr	r2, [pc, #48]	@ (80014c8 <Blower_Relay_Pins_Init+0x48>)
 8001496:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 800149a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800149e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=((0x3<<16)|(0X3<<20)|(0X3<<24));
 80014a0:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <Blower_Relay_Pins_Init+0x48>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4a08      	ldr	r2, [pc, #32]	@ (80014c8 <Blower_Relay_Pins_Init+0x48>)
 80014a6:	f043 734c 	orr.w	r3, r3, #53477376	@ 0x3300000
 80014aa:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80014ae:	6053      	str	r3, [r2, #4]
    GPIOB->ODR|=((1<<PB12_LOW_SPEED_BLOWER)|(1<<PB13_MEDIUM_SPEED_BLOWER)|(1<<PB14_HIGH_SPEED_BLOWER));
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <Blower_Relay_Pins_Init+0x48>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <Blower_Relay_Pins_Init+0x48>)
 80014b6:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010c00 	.word	0x40010c00

080014cc <Switch_Pins_int>:
extern uint32_t milli_sec_tick;
uint32_t LastDebounceTime = 0;  // The Last Time The Output Pin Was Toggled
uint32_t DebounceDelay = 50;    // The Ddebounce Time; increase it if the output still flickers
switch_state_t BtnState=SW_STATE_NEUTRAL;               // The Current Reading From The Input Pin
switch_state_t LastBtnState = SW_STATE_NEUTRAL;       // The previous reading from The Input Pin
void Switch_Pins_int(){
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80014d0:	4b16      	ldr	r3, [pc, #88]	@ (800152c <Switch_Pins_int+0x60>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a15      	ldr	r2, [pc, #84]	@ (800152c <Switch_Pins_int+0x60>)
 80014d6:	f043 0308 	orr.w	r3, r3, #8
 80014da:	6193      	str	r3, [r2, #24]
    GPIOB->CRL&=~(0xf<<28);//PB7 as input//FORWARD
 80014dc:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <Switch_Pins_int+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a13      	ldr	r2, [pc, #76]	@ (8001530 <Switch_Pins_int+0x64>)
 80014e2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80014e6:	6013      	str	r3, [r2, #0]
    GPIOB->CRL|=(0b10<<30);
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <Switch_Pins_int+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a10      	ldr	r2, [pc, #64]	@ (8001530 <Switch_Pins_int+0x64>)
 80014ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80014f2:	6013      	str	r3, [r2, #0]
    GPIOB->ODR|=(1<<7);
 80014f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <Switch_Pins_int+0x64>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001530 <Switch_Pins_int+0x64>)
 80014fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014fe:	60d3      	str	r3, [r2, #12]
    GPIOB->CRL&=~(0XF<<24);// PB6 REVERSE
 8001500:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <Switch_Pins_int+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <Switch_Pins_int+0x64>)
 8001506:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800150a:	6013      	str	r3, [r2, #0]
    GPIOB->CRL|=(0b10<<26);
 800150c:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <Switch_Pins_int+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a07      	ldr	r2, [pc, #28]	@ (8001530 <Switch_Pins_int+0x64>)
 8001512:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001516:	6013      	str	r3, [r2, #0]
    GPIOB->ODR|=(1<<6);
 8001518:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <Switch_Pins_int+0x64>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	4a04      	ldr	r2, [pc, #16]	@ (8001530 <Switch_Pins_int+0x64>)
 800151e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001522:	60d3      	str	r3, [r2, #12]
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	40021000 	.word	0x40021000
 8001530:	40010c00 	.word	0x40010c00

08001534 <read_switch_raw>:
switch_state_t read_switch_raw(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
    uint8_t fwd =!(GPIOB->IDR>>7&1);
 800153a:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <read_switch_raw+0x6c>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	09db      	lsrs	r3, r3, #7
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	bf0c      	ite	eq
 8001548:	2301      	moveq	r3, #1
 800154a:	2300      	movne	r3, #0
 800154c:	b2db      	uxtb	r3, r3
 800154e:	71fb      	strb	r3, [r7, #7]
    uint8_t rev =!(GPIOB->IDR>>6&1);
 8001550:	4b13      	ldr	r3, [pc, #76]	@ (80015a0 <read_switch_raw+0x6c>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	099b      	lsrs	r3, r3, #6
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	bf0c      	ite	eq
 800155e:	2301      	moveq	r3, #1
 8001560:	2300      	movne	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	71bb      	strb	r3, [r7, #6]

    if (fwd && !rev) return SW_STATE_FORWARD;
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d004      	beq.n	8001576 <read_switch_raw+0x42>
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <read_switch_raw+0x42>
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <read_switch_raw+0x62>
    if (!fwd && rev) return SW_STATE_REVERSE;
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d104      	bne.n	8001586 <read_switch_raw+0x52>
 800157c:	79bb      	ldrb	r3, [r7, #6]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <read_switch_raw+0x52>
 8001582:	2302      	movs	r3, #2
 8001584:	e007      	b.n	8001596 <read_switch_raw+0x62>
    if (!fwd && !rev) return SW_STATE_NEUTRAL;
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d104      	bne.n	8001596 <read_switch_raw+0x62>
 800158c:	79bb      	ldrb	r3, [r7, #6]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <read_switch_raw+0x62>
 8001592:	2300      	movs	r3, #0
 8001594:	e7ff      	b.n	8001596 <read_switch_raw+0x62>
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	40010c00 	.word	0x40010c00

080015a4 <Switch_update>:
// Debounce state machine (call periodically from main loop)
switch_state_t Switch_update(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
    uint8_t TempBtnReading;
    TempBtnReading =read_switch_raw();// R_BIT(GPIOC->IDR,13); // read the state of the switch into a local variable:
 80015aa:	f7ff ffc3 	bl	8001534 <read_switch_raw>
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
    if(TempBtnReading != LastBtnState) // If the switch changed, due to noise or pressing:
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <Switch_update+0x54>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	79fa      	ldrb	r2, [r7, #7]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d003      	beq.n	80015c4 <Switch_update+0x20>
    {
        LastDebounceTime = milli_sec_tick; // reset the debouncing timer
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <Switch_update+0x58>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001600 <Switch_update+0x5c>)
 80015c2:	6013      	str	r3, [r2, #0]
    }
    if((milli_sec_tick - LastDebounceTime) > DebounceDelay)
 80015c4:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <Switch_update+0x58>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001600 <Switch_update+0x5c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	1ad2      	subs	r2, r2, r3
 80015ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <Switch_update+0x60>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d907      	bls.n	80015e6 <Switch_update+0x42>
    {
        if(TempBtnReading != BtnState)
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <Switch_update+0x64>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	79fa      	ldrb	r2, [r7, #7]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d002      	beq.n	80015e6 <Switch_update+0x42>
        {
            BtnState = TempBtnReading;
 80015e0:	4a09      	ldr	r2, [pc, #36]	@ (8001608 <Switch_update+0x64>)
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	7013      	strb	r3, [r2, #0]
        }
    }
    LastBtnState = TempBtnReading;
 80015e6:	4a04      	ldr	r2, [pc, #16]	@ (80015f8 <Switch_update+0x54>)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	7013      	strb	r3, [r2, #0]
    return BtnState;
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <Switch_update+0x64>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000219 	.word	0x20000219
 80015fc:	20000550 	.word	0x20000550
 8001600:	20000214 	.word	0x20000214
 8001604:	20000000 	.word	0x20000000
 8001608:	20000218 	.word	0x20000218

0800160c <MX_I2C1_Init>:
 */

#include"extern_file_declarations.h"
uint8_t I2C_RX_FLAG=0,data[2];
 void MX_I2C1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001610:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <MX_I2C1_Init+0x5c>)
 8001612:	4a16      	ldr	r2, [pc, #88]	@ (800166c <MX_I2C1_Init+0x60>)
 8001614:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001616:	4b14      	ldr	r3, [pc, #80]	@ (8001668 <MX_I2C1_Init+0x5c>)
 8001618:	4a15      	ldr	r2, [pc, #84]	@ (8001670 <MX_I2C1_Init+0x64>)
 800161a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800161c:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <MX_I2C1_Init+0x5c>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 170;
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <MX_I2C1_Init+0x5c>)
 8001624:	22aa      	movs	r2, #170	@ 0xaa
 8001626:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001628:	4b0f      	ldr	r3, [pc, #60]	@ (8001668 <MX_I2C1_Init+0x5c>)
 800162a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800162e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001630:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <MX_I2C1_Init+0x5c>)
 8001632:	2200      	movs	r2, #0
 8001634:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001636:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <MX_I2C1_Init+0x5c>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <MX_I2C1_Init+0x5c>)
 800163e:	2200      	movs	r2, #0
 8001640:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001642:	4b09      	ldr	r3, [pc, #36]	@ (8001668 <MX_I2C1_Init+0x5c>)
 8001644:	2200      	movs	r2, #0
 8001646:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001648:	4807      	ldr	r0, [pc, #28]	@ (8001668 <MX_I2C1_Init+0x5c>)
 800164a:	f003 ff1f 	bl	800548c <HAL_I2C_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001654:	f002 fc9c 	bl	8003f90 <Error_Handler>
  }
  HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 8001658:	2202      	movs	r2, #2
 800165a:	4906      	ldr	r1, [pc, #24]	@ (8001674 <MX_I2C1_Init+0x68>)
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <MX_I2C1_Init+0x5c>)
 800165e:	f004 f86d 	bl	800573c <HAL_I2C_Slave_Receive_IT>
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200004f8 	.word	0x200004f8
 800166c:	40005400 	.word	0x40005400
 8001670:	00061a80 	.word	0x00061a80
 8001674:	2000021c 	.word	0x2000021c

08001678 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	I2C_RX_FLAG=1;
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 8001686:	2202      	movs	r2, #2
 8001688:	4904      	ldr	r1, [pc, #16]	@ (800169c <HAL_I2C_SlaveRxCpltCallback+0x24>)
 800168a:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 800168c:	f004 f856 	bl	800573c <HAL_I2C_Slave_Receive_IT>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	2000021a 	.word	0x2000021a
 800169c:	2000021c 	.word	0x2000021c
 80016a0:	200004f8 	.word	0x200004f8

080016a4 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0c      	ldr	r2, [pc, #48]	@ (80016e4 <HAL_I2C_ErrorCallback+0x40>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d112      	bne.n	80016dc <HAL_I2C_ErrorCallback+0x38>
        // Reset I2C if it’s stuck
        __HAL_RCC_I2C1_FORCE_RESET();
 80016b6:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <HAL_I2C_ErrorCallback+0x44>)
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	4a0b      	ldr	r2, [pc, #44]	@ (80016e8 <HAL_I2C_ErrorCallback+0x44>)
 80016bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016c0:	6113      	str	r3, [r2, #16]
        __HAL_RCC_I2C1_RELEASE_RESET();
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <HAL_I2C_ErrorCallback+0x44>)
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	4a08      	ldr	r2, [pc, #32]	@ (80016e8 <HAL_I2C_ErrorCallback+0x44>)
 80016c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016cc:	6113      	str	r3, [r2, #16]

        MX_I2C1_Init();  // Re-init peripheral
 80016ce:	f7ff ff9d 	bl	800160c <MX_I2C1_Init>
        HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 80016d2:	2202      	movs	r2, #2
 80016d4:	4905      	ldr	r1, [pc, #20]	@ (80016ec <HAL_I2C_ErrorCallback+0x48>)
 80016d6:	4806      	ldr	r0, [pc, #24]	@ (80016f0 <HAL_I2C_ErrorCallback+0x4c>)
 80016d8:	f004 f830 	bl	800573c <HAL_I2C_Slave_Receive_IT>
    }
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40005400 	.word	0x40005400
 80016e8:	40021000 	.word	0x40021000
 80016ec:	2000021c 	.word	0x2000021c
 80016f0:	200004f8 	.word	0x200004f8

080016f4 <Process_Jbd_Bms_Messages>:
#include"JBD_BMS.h"
#include"can.h"
JBD_BMS_MSG_t Bms_Frames;


void Process_Jbd_Bms_Messages(can_frame_t *frame){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 switch(frame->id){
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001704:	2b0c      	cmp	r3, #12
 8001706:	d878      	bhi.n	80017fa <Process_Jbd_Bms_Messages+0x106>
 8001708:	a201      	add	r2, pc, #4	@ (adr r2, 8001710 <Process_Jbd_Bms_Messages+0x1c>)
 800170a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170e:	bf00      	nop
 8001710:	08001745 	.word	0x08001745
 8001714:	08001753 	.word	0x08001753
 8001718:	08001761 	.word	0x08001761
 800171c:	0800176f 	.word	0x0800176f
 8001720:	0800177d 	.word	0x0800177d
 8001724:	0800178b 	.word	0x0800178b
 8001728:	08001799 	.word	0x08001799
 800172c:	080017a7 	.word	0x080017a7
 8001730:	080017b5 	.word	0x080017b5
 8001734:	080017c3 	.word	0x080017c3
 8001738:	080017d1 	.word	0x080017d1
 800173c:	080017df 	.word	0x080017df
 8001740:	080017ed 	.word	0x080017ed
 case 0x100:decode_CAN_0x100(frame->data,&Bms_Frames.Id_0x100);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3307      	adds	r3, #7
 8001748:	492e      	ldr	r1, [pc, #184]	@ (8001804 <Process_Jbd_Bms_Messages+0x110>)
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f874 	bl	8001838 <decode_CAN_0x100>
	 	 	 break;
 8001750:	e054      	b.n	80017fc <Process_Jbd_Bms_Messages+0x108>
 case 0x101:decode_CAN_0x101(frame->data,&Bms_Frames.Id_0x101);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3307      	adds	r3, #7
 8001756:	492c      	ldr	r1, [pc, #176]	@ (8001808 <Process_Jbd_Bms_Messages+0x114>)
 8001758:	4618      	mov	r0, r3
 800175a:	f000 f8eb 	bl	8001934 <decode_CAN_0x101>
	 	 	 break;
 800175e:	e04d      	b.n	80017fc <Process_Jbd_Bms_Messages+0x108>
 case 0x102:decode_CAN_0x102(frame->data,&Bms_Frames.Id_0x102);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3307      	adds	r3, #7
 8001764:	4929      	ldr	r1, [pc, #164]	@ (800180c <Process_Jbd_Bms_Messages+0x118>)
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f97a 	bl	8001a60 <decode_CAN_0x102>
	 	 	 break;
 800176c:	e046      	b.n	80017fc <Process_Jbd_Bms_Messages+0x108>
 case 0x103:decode_CAN_0x103(frame->data,&Bms_Frames.Id_0x103);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3307      	adds	r3, #7
 8001772:	4927      	ldr	r1, [pc, #156]	@ (8001810 <Process_Jbd_Bms_Messages+0x11c>)
 8001774:	4618      	mov	r0, r3
 8001776:	f000 f92f 	bl	80019d8 <decode_CAN_0x103>
	 	 	 break;
 800177a:	e03f      	b.n	80017fc <Process_Jbd_Bms_Messages+0x108>
 case 0x104:decode_CAN_0x104(frame->data,&Bms_Frames.Id_0x104);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3307      	adds	r3, #7
 8001780:	4924      	ldr	r1, [pc, #144]	@ (8001814 <Process_Jbd_Bms_Messages+0x120>)
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f9de 	bl	8001b44 <decode_CAN_0x104>
	 	 	 break;
 8001788:	e038      	b.n	80017fc <Process_Jbd_Bms_Messages+0x108>
 case 0x105:decode_CAN_0x105(frame->data,&Bms_Frames.Id_0x105);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3307      	adds	r3, #7
 800178e:	4922      	ldr	r1, [pc, #136]	@ (8001818 <Process_Jbd_Bms_Messages+0x124>)
 8001790:	4618      	mov	r0, r3
 8001792:	f000 f9f9 	bl	8001b88 <decode_CAN_0x105>
	 	 	 break;
 8001796:	e031      	b.n	80017fc <Process_Jbd_Bms_Messages+0x108>
 case 0x106:decode_CAN_0x106(frame->data,&Bms_Frames.Id_0x106);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3307      	adds	r3, #7
 800179c:	491f      	ldr	r1, [pc, #124]	@ (800181c <Process_Jbd_Bms_Messages+0x128>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fa6a 	bl	8001c78 <decode_CAN_0x106>
	 	 	 break;
 80017a4:	e02a      	b.n	80017fc <Process_Jbd_Bms_Messages+0x108>
 case 0x107:decode_CAN_0x107(frame->data,&Bms_Frames.Id_0x107);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3307      	adds	r3, #7
 80017aa:	491d      	ldr	r1, [pc, #116]	@ (8001820 <Process_Jbd_Bms_Messages+0x12c>)
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fadb 	bl	8001d68 <decode_CAN_0x107>
	 	 	 break;
 80017b2:	e023      	b.n	80017fc <Process_Jbd_Bms_Messages+0x108>
 case 0x108:decode_CAN_0x108(frame->data,&Bms_Frames.Id_0x108);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3307      	adds	r3, #7
 80017b8:	491a      	ldr	r1, [pc, #104]	@ (8001824 <Process_Jbd_Bms_Messages+0x130>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 fb4c 	bl	8001e58 <decode_CAN_0x108>
	 	 	 break;
 80017c0:	e01c      	b.n	80017fc <Process_Jbd_Bms_Messages+0x108>
 case 0x109:decode_CAN_0x109(frame->data,&Bms_Frames.Id_0x109);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3307      	adds	r3, #7
 80017c6:	4918      	ldr	r1, [pc, #96]	@ (8001828 <Process_Jbd_Bms_Messages+0x134>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fbbd 	bl	8001f48 <decode_CAN_0x109>
	 	 	 break;
 80017ce:	e015      	b.n	80017fc <Process_Jbd_Bms_Messages+0x108>
 case 0x10A:decode_CAN_0x10A(frame->data,&Bms_Frames.Id_0x10A);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3307      	adds	r3, #7
 80017d4:	4915      	ldr	r1, [pc, #84]	@ (800182c <Process_Jbd_Bms_Messages+0x138>)
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fc2e 	bl	8002038 <decode_CAN_0x10A>
	 	 	 break;
 80017dc:	e00e      	b.n	80017fc <Process_Jbd_Bms_Messages+0x108>
 case 0X10B:decode_CAN_0x10B(frame->data,&Bms_Frames.Id_0x10B);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3307      	adds	r3, #7
 80017e2:	4913      	ldr	r1, [pc, #76]	@ (8001830 <Process_Jbd_Bms_Messages+0x13c>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 fc9f 	bl	8002128 <decode_CAN_0x10B>
	 	 	 break;
 80017ea:	e007      	b.n	80017fc <Process_Jbd_Bms_Messages+0x108>
 case 0X10C:decode_CAN_0x10C(frame->data,&Bms_Frames.Id_0x10C);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3307      	adds	r3, #7
 80017f0:	4910      	ldr	r1, [pc, #64]	@ (8001834 <Process_Jbd_Bms_Messages+0x140>)
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fd10 	bl	8002218 <decode_CAN_0x10C>
	 	 	 break;
 80017f8:	e000      	b.n	80017fc <Process_Jbd_Bms_Messages+0x108>
 default :break;
 80017fa:	bf00      	nop
 }
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000220 	.word	0x20000220
 8001808:	20000230 	.word	0x20000230
 800180c:	2000023c 	.word	0x2000023c
 8001810:	20000262 	.word	0x20000262
 8001814:	2000026a 	.word	0x2000026a
 8001818:	20000270 	.word	0x20000270
 800181c:	20000280 	.word	0x20000280
 8001820:	20000290 	.word	0x20000290
 8001824:	200002a0 	.word	0x200002a0
 8001828:	200002b0 	.word	0x200002b0
 800182c:	200002c0 	.word	0x200002c0
 8001830:	200002d0 	.word	0x200002d0
 8001834:	200002e0 	.word	0x200002e0

08001838 <decode_CAN_0x100>:
 */


#include"JBD_BMS_MESSAGES.h"
#include"uart.h"
void decode_CAN_0x100(const uint8_t *data, CAN_BMS_0x100_t *msg) {
 8001838:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af04      	add	r7, sp, #16
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
    msg->Total_Voltage = ((data[0] << 8) | data[1]) * 0.01f;   // 10 mV → V
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	3201      	adds	r2, #1
 800184e:	7812      	ldrb	r2, [r2, #0]
 8001850:	4313      	orrs	r3, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff f9d2 	bl	8000bfc <__aeabi_i2f>
 8001858:	4603      	mov	r3, r0
 800185a:	4934      	ldr	r1, [pc, #208]	@ (800192c <decode_CAN_0x100+0xf4>)
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fa21 	bl	8000ca4 <__aeabi_fmul>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	601a      	str	r2, [r3, #0]
    msg->Charge_and_Discharge_Current =(float)((int16_t)((data[2] << 8) | data[3])) * 0.01f;  // 10 mA → A
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3302      	adds	r3, #2
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b21b      	sxth	r3, r3
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	b21a      	sxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3303      	adds	r3, #3
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b21b      	sxth	r3, r3
 800187e:	4313      	orrs	r3, r2
 8001880:	b21b      	sxth	r3, r3
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff f9ba 	bl	8000bfc <__aeabi_i2f>
 8001888:	4603      	mov	r3, r0
 800188a:	4928      	ldr	r1, [pc, #160]	@ (800192c <decode_CAN_0x100+0xf4>)
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fa09 	bl	8000ca4 <__aeabi_fmul>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	605a      	str	r2, [r3, #4]
    msg->Remaining_Capacity= (float)(((int16_t)(data[4] << 8) | data[5])) * 0.01f; // 10 mAh → Ah
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3304      	adds	r3, #4
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	461a      	mov	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3305      	adds	r3, #5
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff f9a3 	bl	8000bfc <__aeabi_i2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	491c      	ldr	r1, [pc, #112]	@ (800192c <decode_CAN_0x100+0xf4>)
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff f9f2 	bl	8000ca4 <__aeabi_fmul>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	609a      	str	r2, [r3, #8]
    msg->CRC_Check   = (data[6] << 8) | data[7];
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3306      	adds	r3, #6
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	021b      	lsls	r3, r3, #8
 80018d2:	b21a      	sxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3307      	adds	r3, #7
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	b21b      	sxth	r3, r3
 80018dc:	4313      	orrs	r3, r2
 80018de:	b21b      	sxth	r3, r3
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	819a      	strh	r2, [r3, #12]
    uart_printf("Total_Voltage=%.2f Vol Charge_and_Discharge_Current=%.2f A Remaining_Capacity=%.2f Ah\n\r",msg->Total_Voltage,msg->Charge_and_Discharge_Current,msg->Remaining_Capacity);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fd9c 	bl	8000428 <__aeabi_f2d>
 80018f0:	4680      	mov	r8, r0
 80018f2:	4689      	mov	r9, r1
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fd95 	bl	8000428 <__aeabi_f2d>
 80018fe:	4604      	mov	r4, r0
 8001900:	460d      	mov	r5, r1
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fd8e 	bl	8000428 <__aeabi_f2d>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001914:	e9cd 4500 	strd	r4, r5, [sp]
 8001918:	4642      	mov	r2, r8
 800191a:	464b      	mov	r3, r9
 800191c:	4804      	ldr	r0, [pc, #16]	@ (8001930 <decode_CAN_0x100+0xf8>)
 800191e:	f003 f9e9 	bl	8004cf4 <uart_printf>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800192c:	3c23d70a 	.word	0x3c23d70a
 8001930:	08009f20 	.word	0x08009f20

08001934 <decode_CAN_0x101>:
void decode_CAN_0x101(const uint8_t *data, CAN_BMS_0x101_t *msg) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af02      	add	r7, sp, #8
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
    msg->Full_Capacity = ((data[0] << 8) | data[1]) * 0.01f;  // 10 mAh → Ah
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	3201      	adds	r2, #1
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	4313      	orrs	r3, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff f955 	bl	8000bfc <__aeabi_i2f>
 8001952:	4603      	mov	r3, r0
 8001954:	491e      	ldr	r1, [pc, #120]	@ (80019d0 <decode_CAN_0x101+0x9c>)
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f9a4 	bl	8000ca4 <__aeabi_fmul>
 800195c:	4603      	mov	r3, r0
 800195e:	461a      	mov	r2, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	601a      	str	r2, [r3, #0]
    msg->No_Cycles        = (data[2] << 8) | data[3];
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3302      	adds	r3, #2
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b21b      	sxth	r3, r3
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	b21a      	sxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3303      	adds	r3, #3
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	b21b      	sxth	r3, r3
 8001978:	4313      	orrs	r3, r2
 800197a:	b21b      	sxth	r3, r3
 800197c:	b29a      	uxth	r2, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	809a      	strh	r2, [r3, #4]
    msg->RSOC          = (uint8_t)(((data[4] << 8) | data[5]) & 0xFF); // RSOC in %
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3305      	adds	r3, #5
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	80da      	strh	r2, [r3, #6]
    msg->CRC_Check        = (data[6] << 8) | data[7];
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3306      	adds	r3, #6
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b21b      	sxth	r3, r3
 8001996:	021b      	lsls	r3, r3, #8
 8001998:	b21a      	sxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	3307      	adds	r3, #7
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	4313      	orrs	r3, r2
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	811a      	strh	r2, [r3, #8]
    uart_printf("Full_Capacity=%.2f Ah RSOC=%d %\n\r",msg->Full_Capacity,(int)msg->RSOC);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fd39 	bl	8000428 <__aeabi_f2d>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	6839      	ldr	r1, [r7, #0]
 80019bc:	88c9      	ldrh	r1, [r1, #6]
 80019be:	9100      	str	r1, [sp, #0]
 80019c0:	4804      	ldr	r0, [pc, #16]	@ (80019d4 <decode_CAN_0x101+0xa0>)
 80019c2:	f003 f997 	bl	8004cf4 <uart_printf>

}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	3c23d70a 	.word	0x3c23d70a
 80019d4:	08009f78 	.word	0x08009f78

080019d8 <decode_CAN_0x103>:
    msg->cell_voltage[start_cell - 1] = (data[0] << 8) | data[1];
    msg->cell_voltage[start_cell] = (data[2] << 8) | data[3];
    msg->cell_voltage[start_cell + 1] = (data[4] << 8) | data[5];
    msg->crc_check = (data[6] << 8) | data[7];
}
void decode_CAN_0x103(const uint8_t *data, CAN_BMS_0x103_t *msg) {
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
    // Decode MOS tube status (Bytes 0-1)
    msg->FET_Control_Status = (data[0] << 8) | data[1];
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b21b      	sxth	r3, r3
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	b21a      	sxth	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3301      	adds	r3, #1
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b21b      	sxth	r3, r3
 80019f4:	4313      	orrs	r3, r2
 80019f6:	b21b      	sxth	r3, r3
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	801a      	strh	r2, [r3, #0]
    // Decode Production date (Bytes 2-3)
    msg->Production_Date = (data[2] << 8) | data[3];
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3302      	adds	r3, #2
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	b21b      	sxth	r3, r3
 8001a06:	021b      	lsls	r3, r3, #8
 8001a08:	b21a      	sxth	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3303      	adds	r3, #3
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	4313      	orrs	r3, r2
 8001a14:	b21a      	sxth	r2, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	805a      	strh	r2, [r3, #2]
    // Decode Software version (Bytes 4-5)
    msg->Software_Version = (data[4] << 8) | data[5];
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	b21b      	sxth	r3, r3
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	b21a      	sxth	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3305      	adds	r3, #5
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	b21b      	sxth	r3, r3
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	809a      	strh	r2, [r3, #4]
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3306      	adds	r3, #6
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	021b      	lsls	r3, r3, #8
 8001a42:	b21a      	sxth	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3307      	adds	r3, #7
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	80da      	strh	r2, [r3, #6]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <decode_CAN_0x102>:
void decode_CAN_0x102(const uint8_t *data, CAN_BMS_0x102_t *msg) {
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
    // Decode equalization status for cells 1-16 (BYTE0 - BYTE1)
    uint16_t status_low_byte = (data[0] << 8) | data[1];
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3301      	adds	r3, #1
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 16; ++i) {
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e012      	b.n	8001aae <decode_CAN_0x102+0x4e>
        msg->Equlization_Low_byte[i] = (status_low_byte >> i) & 1;
 8001a88:	89fa      	ldrh	r2, [r7, #14]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	fa42 f303 	asr.w	r3, r2, r3
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf14      	ite	ne
 8001a98:	2301      	movne	r3, #1
 8001a9a:	2300      	moveq	r3, #0
 8001a9c:	b2d9      	uxtb	r1, r3
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 16; ++i) {
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b0f      	cmp	r3, #15
 8001ab2:	dde9      	ble.n	8001a88 <decode_CAN_0x102+0x28>
    }
    // Decode equalization status for cells 17-33 (BYTE2 - BYTE3)
    uint16_t status_high_byte = (data[2] << 8) | data[3];
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	b21a      	sxth	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3303      	adds	r3, #3
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	b21b      	sxth	r3, r3
 8001acc:	81bb      	strh	r3, [r7, #12]
    for (int i = 0; i < 17; ++i) {
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	e011      	b.n	8001af8 <decode_CAN_0x102+0x98>
        msg->Equlization_Low_byte[16 + i] = (status_high_byte >> i) & 1;
 8001ad4:	89ba      	ldrh	r2, [r7, #12]
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	fa42 f303 	asr.w	r3, r2, r3
 8001adc:	f003 0201 	and.w	r2, r3, #1
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	3310      	adds	r3, #16
 8001ae4:	2a00      	cmp	r2, #0
 8001ae6:	bf14      	ite	ne
 8001ae8:	2201      	movne	r2, #1
 8001aea:	2200      	moveq	r2, #0
 8001aec:	b2d1      	uxtb	r1, r2
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < 17; ++i) {
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	3301      	adds	r3, #1
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	2b10      	cmp	r3, #16
 8001afc:	ddea      	ble.n	8001ad4 <decode_CAN_0x102+0x74>
    }
    // Decode protection status (BYTE4 - BYTE5)
    msg->Protection_Status = (data[4] << 8) | data[5];
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3304      	adds	r3, #4
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3305      	adds	r3, #5
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	4313      	orrs	r3, r2
 8001b14:	b21b      	sxth	r3, r3
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	845a      	strh	r2, [r3, #34]	@ 0x22
    // Decode CRC_16 check value (BYTE6 - BYTE7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3306      	adds	r3, #6
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b21b      	sxth	r3, r3
 8001b24:	021b      	lsls	r3, r3, #8
 8001b26:	b21a      	sxth	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3307      	adds	r3, #7
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 8001b3a:	bf00      	nop
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <decode_CAN_0x104>:
void decode_CAN_0x104(const uint8_t *data, CAN_BMS_0x104_t *msg) {
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
    // Decode Number of battery strings (BYTE0)
    msg->Number_Of_Battery_Strings = data[0];
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	781a      	ldrb	r2, [r3, #0]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	701a      	strb	r2, [r3, #0]
    // Decode Number of NTC probes (BYTE1)
    msg->NTC_Number_Probes = data[1];
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	781a      	ldrb	r2, [r3, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	705a      	strb	r2, [r3, #1]
    // Decode CRC_16 check value (Bytes 2-3)
    // Assuming a 16-bit CRC value from bytes 2 and 3
    msg->CRC_Check = (data[2] << 8) | data[3];
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3302      	adds	r3, #2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b21b      	sxth	r3, r3
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	b21a      	sxth	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3303      	adds	r3, #3
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	805a      	strh	r2, [r3, #2]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <decode_CAN_0x105>:
void decode_CAN_0x105(const uint8_t *data, CAN_BMS_0x105_t *msg) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
    // Decode temperature value of NTC1 (Bytes 0-1)
    // The raw value is in 0.1K.
    // Convert to Celsius: (Value * 0.1) - 273.15
    uint16_t raw_ntc1_temp = (data[0] << 8) | data[1];
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b21b      	sxth	r3, r3
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	b21a      	sxth	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b21b      	sxth	r3, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	81fb      	strh	r3, [r7, #14]
    msg->NTC1 = (raw_ntc1_temp * 0.1f) - 273.15f;
 8001baa:	89fb      	ldrh	r3, [r7, #14]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f825 	bl	8000bfc <__aeabi_i2f>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	492e      	ldr	r1, [pc, #184]	@ (8001c70 <decode_CAN_0x105+0xe8>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f874 	bl	8000ca4 <__aeabi_fmul>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	492d      	ldr	r1, [pc, #180]	@ (8001c74 <decode_CAN_0x105+0xec>)
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe ff65 	bl	8000a90 <__aeabi_fsub>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	461a      	mov	r2, r3
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	601a      	str	r2, [r3, #0]
    // Decode temperature value of NTC2 (Bytes 2-3)
    uint16_t raw_ntc2_temp = (data[2] << 8) | data[3];
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3303      	adds	r3, #3
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	4313      	orrs	r3, r2
 8001be4:	b21b      	sxth	r3, r3
 8001be6:	81bb      	strh	r3, [r7, #12]
    msg->NTC2 = (raw_ntc2_temp * 0.1f) - 273.15f;
 8001be8:	89bb      	ldrh	r3, [r7, #12]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f806 	bl	8000bfc <__aeabi_i2f>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	491f      	ldr	r1, [pc, #124]	@ (8001c70 <decode_CAN_0x105+0xe8>)
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff f855 	bl	8000ca4 <__aeabi_fmul>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	491d      	ldr	r1, [pc, #116]	@ (8001c74 <decode_CAN_0x105+0xec>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe ff46 	bl	8000a90 <__aeabi_fsub>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461a      	mov	r2, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
    // Decode temperature value of NTC3 (Bytes 4-5)
    uint16_t raw_ntc3_temp = (data[4] << 8) | data[5];
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3304      	adds	r3, #4
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b21b      	sxth	r3, r3
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	b21a      	sxth	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3305      	adds	r3, #5
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	4313      	orrs	r3, r2
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	817b      	strh	r3, [r7, #10]
    msg->NTC3 = (raw_ntc3_temp * 0.1f) - 273.15f;
 8001c26:	897b      	ldrh	r3, [r7, #10]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe ffe7 	bl	8000bfc <__aeabi_i2f>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	490f      	ldr	r1, [pc, #60]	@ (8001c70 <decode_CAN_0x105+0xe8>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f836 	bl	8000ca4 <__aeabi_fmul>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	490e      	ldr	r1, [pc, #56]	@ (8001c74 <decode_CAN_0x105+0xec>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe ff27 	bl	8000a90 <__aeabi_fsub>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	609a      	str	r2, [r3, #8]
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3306      	adds	r3, #6
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b21b      	sxth	r3, r3
 8001c52:	021b      	lsls	r3, r3, #8
 8001c54:	b21a      	sxth	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3307      	adds	r3, #7
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	819a      	strh	r2, [r3, #12]
}
 8001c68:	bf00      	nop
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	3dcccccd 	.word	0x3dcccccd
 8001c74:	43889333 	.word	0x43889333

08001c78 <decode_CAN_0x106>:
void decode_CAN_0x106(const uint8_t *data, CAN_BMS_0x106_t *msg) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
    // Decode temperature value of NTC4 (Bytes 0-1)
    // The raw value is in 0.1K.
    // Convert to Celsius: (Value * 0.1) - 273.15
    uint16_t raw_ntc4_temp = (data[0] << 8) | data[1];
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	b21b      	sxth	r3, r3
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4313      	orrs	r3, r2
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	81fb      	strh	r3, [r7, #14]
    msg->NTC4 = (raw_ntc4_temp * 0.1f) - 273.15f;
 8001c9a:	89fb      	ldrh	r3, [r7, #14]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe ffad 	bl	8000bfc <__aeabi_i2f>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	492e      	ldr	r1, [pc, #184]	@ (8001d60 <decode_CAN_0x106+0xe8>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fffc 	bl	8000ca4 <__aeabi_fmul>
 8001cac:	4603      	mov	r3, r0
 8001cae:	492d      	ldr	r1, [pc, #180]	@ (8001d64 <decode_CAN_0x106+0xec>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe feed 	bl	8000a90 <__aeabi_fsub>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	461a      	mov	r2, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	601a      	str	r2, [r3, #0]
    // Decode temperature value of NTC5 (Bytes 2-3)
    uint16_t raw_ntc5_temp = (data[2] << 8) | data[3];
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3303      	adds	r3, #3
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	81bb      	strh	r3, [r7, #12]
    msg->NTC5 = (raw_ntc5_temp * 0.1f) - 273.15f;
 8001cd8:	89bb      	ldrh	r3, [r7, #12]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe ff8e 	bl	8000bfc <__aeabi_i2f>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	491f      	ldr	r1, [pc, #124]	@ (8001d60 <decode_CAN_0x106+0xe8>)
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe ffdd 	bl	8000ca4 <__aeabi_fmul>
 8001cea:	4603      	mov	r3, r0
 8001cec:	491d      	ldr	r1, [pc, #116]	@ (8001d64 <decode_CAN_0x106+0xec>)
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fece 	bl	8000a90 <__aeabi_fsub>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
    // Decode temperature value of NTC6 (Bytes 4-5)
    uint16_t raw_ntc6_temp = (data[4] << 8) | data[5];
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	b21b      	sxth	r3, r3
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	b21a      	sxth	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3305      	adds	r3, #5
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	4313      	orrs	r3, r2
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	817b      	strh	r3, [r7, #10]
    msg->NTC6 = (raw_ntc6_temp * 0.1f) - 273.15f;
 8001d16:	897b      	ldrh	r3, [r7, #10]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe ff6f 	bl	8000bfc <__aeabi_i2f>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	490f      	ldr	r1, [pc, #60]	@ (8001d60 <decode_CAN_0x106+0xe8>)
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe ffbe 	bl	8000ca4 <__aeabi_fmul>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	490e      	ldr	r1, [pc, #56]	@ (8001d64 <decode_CAN_0x106+0xec>)
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe feaf 	bl	8000a90 <__aeabi_fsub>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	609a      	str	r2, [r3, #8]
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3306      	adds	r3, #6
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	021b      	lsls	r3, r3, #8
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3307      	adds	r3, #7
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	819a      	strh	r2, [r3, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	3dcccccd 	.word	0x3dcccccd
 8001d64:	43889333 	.word	0x43889333

08001d68 <decode_CAN_0x107>:
void decode_CAN_0x107(const uint8_t *data, CAN_BMS_0x107_t *msg) {
 8001d68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af04      	add	r7, sp, #16
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
    // Decode Cell1 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
    msg->CELL1 = (float)((data[0] << 8) | data[1])/1000.f;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	3201      	adds	r2, #1
 8001d7e:	7812      	ldrb	r2, [r2, #0]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe ff3a 	bl	8000bfc <__aeabi_i2f>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4931      	ldr	r1, [pc, #196]	@ (8001e50 <decode_CAN_0x107+0xe8>)
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff f83d 	bl	8000e0c <__aeabi_fdiv>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	601a      	str	r2, [r3, #0]
    // Decode Cell2 voltage (Bytes 2-3)
    msg->CELL2 = (float)((data[2] << 8) | data[3])/1000.0f;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	021b      	lsls	r3, r3, #8
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	3203      	adds	r2, #3
 8001da6:	7812      	ldrb	r2, [r2, #0]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe ff26 	bl	8000bfc <__aeabi_i2f>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4927      	ldr	r1, [pc, #156]	@ (8001e50 <decode_CAN_0x107+0xe8>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff f829 	bl	8000e0c <__aeabi_fdiv>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
    // Decode Cell3 voltage (Bytes 4-5)
    msg->CELL3 = (float)((data[4] << 8) | data[5])/1000.0f;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	021b      	lsls	r3, r3, #8
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	3205      	adds	r2, #5
 8001dce:	7812      	ldrb	r2, [r2, #0]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe ff12 	bl	8000bfc <__aeabi_i2f>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	491d      	ldr	r1, [pc, #116]	@ (8001e50 <decode_CAN_0x107+0xe8>)
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff f815 	bl	8000e0c <__aeabi_fdiv>
 8001de2:	4603      	mov	r3, r0
 8001de4:	461a      	mov	r2, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	609a      	str	r2, [r3, #8]
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3306      	adds	r3, #6
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	021b      	lsls	r3, r3, #8
 8001df4:	b21a      	sxth	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3307      	adds	r3, #7
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	819a      	strh	r2, [r3, #12]
    uart_printf("CELL1=%.2f v CELL2=%.2f v CELL3=%.2f v \n\r",msg->CELL1,msg->CELL2,msg->CELL3);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fb0b 	bl	8000428 <__aeabi_f2d>
 8001e12:	4680      	mov	r8, r0
 8001e14:	4689      	mov	r9, r1
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fb04 	bl	8000428 <__aeabi_f2d>
 8001e20:	4604      	mov	r4, r0
 8001e22:	460d      	mov	r5, r1
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fafd 	bl	8000428 <__aeabi_f2d>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e36:	e9cd 4500 	strd	r4, r5, [sp]
 8001e3a:	4642      	mov	r2, r8
 8001e3c:	464b      	mov	r3, r9
 8001e3e:	4805      	ldr	r0, [pc, #20]	@ (8001e54 <decode_CAN_0x107+0xec>)
 8001e40:	f002 ff58 	bl	8004cf4 <uart_printf>
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e4e:	bf00      	nop
 8001e50:	447a0000 	.word	0x447a0000
 8001e54:	08009f9c 	.word	0x08009f9c

08001e58 <decode_CAN_0x108>:

void decode_CAN_0x108(const uint8_t *data, CAN_BMS_0x108_t *msg) {
 8001e58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e5c:	b086      	sub	sp, #24
 8001e5e:	af04      	add	r7, sp, #16
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
    // Decode Cell4 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
    msg->CELL4 =  (float)((data[0] << 8) | data[1])/1000.f;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	3201      	adds	r2, #1
 8001e6e:	7812      	ldrb	r2, [r2, #0]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fec2 	bl	8000bfc <__aeabi_i2f>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4931      	ldr	r1, [pc, #196]	@ (8001f40 <decode_CAN_0x108+0xe8>)
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe ffc5 	bl	8000e0c <__aeabi_fdiv>
 8001e82:	4603      	mov	r3, r0
 8001e84:	461a      	mov	r2, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	601a      	str	r2, [r3, #0]

    // Decode Cell5 voltage (Bytes 2-3)
    msg->CELL5 =(float)((data[2] << 8) | data[3])/1000.0f;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	3203      	adds	r2, #3
 8001e96:	7812      	ldrb	r2, [r2, #0]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe feae 	bl	8000bfc <__aeabi_i2f>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	4927      	ldr	r1, [pc, #156]	@ (8001f40 <decode_CAN_0x108+0xe8>)
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe ffb1 	bl	8000e0c <__aeabi_fdiv>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	461a      	mov	r2, r3
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
    // Decode Cell6 voltage (Bytes 4-5)
    msg->CELL6 = (float)((data[4] << 8) | data[5])/1000.0f;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	3205      	adds	r2, #5
 8001ebe:	7812      	ldrb	r2, [r2, #0]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fe9a 	bl	8000bfc <__aeabi_i2f>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	491d      	ldr	r1, [pc, #116]	@ (8001f40 <decode_CAN_0x108+0xe8>)
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe ff9d 	bl	8000e0c <__aeabi_fdiv>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	609a      	str	r2, [r3, #8]

    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3306      	adds	r3, #6
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	b21b      	sxth	r3, r3
 8001ee2:	021b      	lsls	r3, r3, #8
 8001ee4:	b21a      	sxth	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3307      	adds	r3, #7
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b21b      	sxth	r3, r3
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	819a      	strh	r2, [r3, #12]
    uart_printf("CELL4=%.2f v CELL5=%.2f v CELL6=%.2f v \n\r",msg->CELL4,msg->CELL5,msg->CELL6);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fa93 	bl	8000428 <__aeabi_f2d>
 8001f02:	4680      	mov	r8, r0
 8001f04:	4689      	mov	r9, r1
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fa8c 	bl	8000428 <__aeabi_f2d>
 8001f10:	4604      	mov	r4, r0
 8001f12:	460d      	mov	r5, r1
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fa85 	bl	8000428 <__aeabi_f2d>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f26:	e9cd 4500 	strd	r4, r5, [sp]
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	464b      	mov	r3, r9
 8001f2e:	4805      	ldr	r0, [pc, #20]	@ (8001f44 <decode_CAN_0x108+0xec>)
 8001f30:	f002 fee0 	bl	8004cf4 <uart_printf>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f3e:	bf00      	nop
 8001f40:	447a0000 	.word	0x447a0000
 8001f44:	08009fc8 	.word	0x08009fc8

08001f48 <decode_CAN_0x109>:
void decode_CAN_0x109(const uint8_t *data, CAN_BMS_0x109_t *msg) {
 8001f48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af04      	add	r7, sp, #16
 8001f50:	6078      	str	r0, [r7, #4]
 8001f52:	6039      	str	r1, [r7, #0]
    // Decode Cell6 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
    msg->CELL7 = (float)((data[0] << 8) | data[1])/1000.f;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	3201      	adds	r2, #1
 8001f5e:	7812      	ldrb	r2, [r2, #0]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fe4a 	bl	8000bfc <__aeabi_i2f>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4931      	ldr	r1, [pc, #196]	@ (8002030 <decode_CAN_0x109+0xe8>)
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe ff4d 	bl	8000e0c <__aeabi_fdiv>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	601a      	str	r2, [r3, #0]
    // Decode Cell7 voltage (Bytes 2-3)
    msg->CELL8 = (float)((data[2] << 8) | data[3])/1000.0f;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	3203      	adds	r2, #3
 8001f86:	7812      	ldrb	r2, [r2, #0]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fe36 	bl	8000bfc <__aeabi_i2f>
 8001f90:	4603      	mov	r3, r0
 8001f92:	4927      	ldr	r1, [pc, #156]	@ (8002030 <decode_CAN_0x109+0xe8>)
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe ff39 	bl	8000e0c <__aeabi_fdiv>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	605a      	str	r2, [r3, #4]

    // Decode Cell8 voltage (Bytes 4-5)
    msg->CELL9 = (float)((data[4] << 8) | data[5])/1000.0f;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	3205      	adds	r2, #5
 8001fae:	7812      	ldrb	r2, [r2, #0]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fe22 	bl	8000bfc <__aeabi_i2f>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	491d      	ldr	r1, [pc, #116]	@ (8002030 <decode_CAN_0x109+0xe8>)
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe ff25 	bl	8000e0c <__aeabi_fdiv>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	609a      	str	r2, [r3, #8]

    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3306      	adds	r3, #6
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3307      	adds	r3, #7
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	819a      	strh	r2, [r3, #12]
    uart_printf("CELL7=%.2f v CELL8=%.2f v CELL9=%.2f v \n\r",msg->CELL7,msg->CELL8,msg->CELL9);
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fa1b 	bl	8000428 <__aeabi_f2d>
 8001ff2:	4680      	mov	r8, r0
 8001ff4:	4689      	mov	r9, r1
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fa14 	bl	8000428 <__aeabi_f2d>
 8002000:	4604      	mov	r4, r0
 8002002:	460d      	mov	r5, r1
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fa0d 	bl	8000428 <__aeabi_f2d>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002016:	e9cd 4500 	strd	r4, r5, [sp]
 800201a:	4642      	mov	r2, r8
 800201c:	464b      	mov	r3, r9
 800201e:	4805      	ldr	r0, [pc, #20]	@ (8002034 <decode_CAN_0x109+0xec>)
 8002020:	f002 fe68 	bl	8004cf4 <uart_printf>
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800202e:	bf00      	nop
 8002030:	447a0000 	.word	0x447a0000
 8002034:	08009ff4 	.word	0x08009ff4

08002038 <decode_CAN_0x10A>:
void decode_CAN_0x10A(const uint8_t *data, CAN_BMS_0x10A_t *msg) {
 8002038:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af04      	add	r7, sp, #16
 8002040:	6078      	str	r0, [r7, #4]
 8002042:	6039      	str	r1, [r7, #0]
    // Decode Cell10 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
    msg->CELL10 =  (float)((data[0] << 8) | data[1])/1000.f;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	021b      	lsls	r3, r3, #8
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	3201      	adds	r2, #1
 800204e:	7812      	ldrb	r2, [r2, #0]
 8002050:	4313      	orrs	r3, r2
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fdd2 	bl	8000bfc <__aeabi_i2f>
 8002058:	4603      	mov	r3, r0
 800205a:	4931      	ldr	r1, [pc, #196]	@ (8002120 <decode_CAN_0x10A+0xe8>)
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fed5 	bl	8000e0c <__aeabi_fdiv>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	601a      	str	r2, [r3, #0]

    // Decode Cell11 voltage (Bytes 2-3)
    msg->CELL11 = (float)((data[2] << 8) | data[3])/1000.0f;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3302      	adds	r3, #2
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	3203      	adds	r2, #3
 8002076:	7812      	ldrb	r2, [r2, #0]
 8002078:	4313      	orrs	r3, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fdbe 	bl	8000bfc <__aeabi_i2f>
 8002080:	4603      	mov	r3, r0
 8002082:	4927      	ldr	r1, [pc, #156]	@ (8002120 <decode_CAN_0x10A+0xe8>)
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fec1 	bl	8000e0c <__aeabi_fdiv>
 800208a:	4603      	mov	r3, r0
 800208c:	461a      	mov	r2, r3
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	605a      	str	r2, [r3, #4]

    // Decode Cell12 voltage (Bytes 4-5)
    msg->CELL12 = (float)((data[4] << 8) | data[5])/1000.0f;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3304      	adds	r3, #4
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	021b      	lsls	r3, r3, #8
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	3205      	adds	r2, #5
 800209e:	7812      	ldrb	r2, [r2, #0]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fdaa 	bl	8000bfc <__aeabi_i2f>
 80020a8:	4603      	mov	r3, r0
 80020aa:	491d      	ldr	r1, [pc, #116]	@ (8002120 <decode_CAN_0x10A+0xe8>)
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fead 	bl	8000e0c <__aeabi_fdiv>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461a      	mov	r2, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	609a      	str	r2, [r3, #8]

    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3306      	adds	r3, #6
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	b21a      	sxth	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3307      	adds	r3, #7
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	4313      	orrs	r3, r2
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	819a      	strh	r2, [r3, #12]
    uart_printf("CELL10=%.2f v CELL11=%.2f v CELL12=%.2f v \n\r",msg->CELL10,msg->CELL11,msg->CELL12);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe f9a3 	bl	8000428 <__aeabi_f2d>
 80020e2:	4680      	mov	r8, r0
 80020e4:	4689      	mov	r9, r1
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe f99c 	bl	8000428 <__aeabi_f2d>
 80020f0:	4604      	mov	r4, r0
 80020f2:	460d      	mov	r5, r1
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe f995 	bl	8000428 <__aeabi_f2d>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002106:	e9cd 4500 	strd	r4, r5, [sp]
 800210a:	4642      	mov	r2, r8
 800210c:	464b      	mov	r3, r9
 800210e:	4805      	ldr	r0, [pc, #20]	@ (8002124 <decode_CAN_0x10A+0xec>)
 8002110:	f002 fdf0 	bl	8004cf4 <uart_printf>
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800211e:	bf00      	nop
 8002120:	447a0000 	.word	0x447a0000
 8002124:	0800a020 	.word	0x0800a020

08002128 <decode_CAN_0x10B>:
void decode_CAN_0x10B(const uint8_t *data, CAN_BMS_0x10B_t *msg) {
 8002128:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800212c:	b086      	sub	sp, #24
 800212e:	af04      	add	r7, sp, #16
 8002130:	6078      	str	r0, [r7, #4]
 8002132:	6039      	str	r1, [r7, #0]
    // Decode Cell13 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
    msg->CELL13 =  (float)((data[0] << 8) | data[1])/1000.f;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	3201      	adds	r2, #1
 800213e:	7812      	ldrb	r2, [r2, #0]
 8002140:	4313      	orrs	r3, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fd5a 	bl	8000bfc <__aeabi_i2f>
 8002148:	4603      	mov	r3, r0
 800214a:	4931      	ldr	r1, [pc, #196]	@ (8002210 <decode_CAN_0x10B+0xe8>)
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fe5d 	bl	8000e0c <__aeabi_fdiv>
 8002152:	4603      	mov	r3, r0
 8002154:	461a      	mov	r2, r3
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	601a      	str	r2, [r3, #0]
    // Decode Cell14 voltage (Bytes 2-3)
    msg->CELL14 = (float)((data[2] << 8) | data[3])/1000.0f;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3302      	adds	r3, #2
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	3203      	adds	r2, #3
 8002166:	7812      	ldrb	r2, [r2, #0]
 8002168:	4313      	orrs	r3, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fd46 	bl	8000bfc <__aeabi_i2f>
 8002170:	4603      	mov	r3, r0
 8002172:	4927      	ldr	r1, [pc, #156]	@ (8002210 <decode_CAN_0x10B+0xe8>)
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fe49 	bl	8000e0c <__aeabi_fdiv>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	605a      	str	r2, [r3, #4]
    // Decode Cell15 voltage (Bytes 4-5)
    msg->CELL15 = (float)((data[4] << 8) | data[5])/1000.0f;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3304      	adds	r3, #4
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	3205      	adds	r2, #5
 800218e:	7812      	ldrb	r2, [r2, #0]
 8002190:	4313      	orrs	r3, r2
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fd32 	bl	8000bfc <__aeabi_i2f>
 8002198:	4603      	mov	r3, r0
 800219a:	491d      	ldr	r1, [pc, #116]	@ (8002210 <decode_CAN_0x10B+0xe8>)
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fe35 	bl	8000e0c <__aeabi_fdiv>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461a      	mov	r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	609a      	str	r2, [r3, #8]
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3306      	adds	r3, #6
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	b21a      	sxth	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3307      	adds	r3, #7
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	b21b      	sxth	r3, r3
 80021be:	4313      	orrs	r3, r2
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	819a      	strh	r2, [r3, #12]
    uart_printf("CELL13=%.2f v CELL14=%.2f v CELL15=%.2f v \n\r",msg->CELL13,msg->CELL14,msg->CELL15);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f92b 	bl	8000428 <__aeabi_f2d>
 80021d2:	4680      	mov	r8, r0
 80021d4:	4689      	mov	r9, r1
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe f924 	bl	8000428 <__aeabi_f2d>
 80021e0:	4604      	mov	r4, r0
 80021e2:	460d      	mov	r5, r1
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7fe f91d 	bl	8000428 <__aeabi_f2d>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80021f6:	e9cd 4500 	strd	r4, r5, [sp]
 80021fa:	4642      	mov	r2, r8
 80021fc:	464b      	mov	r3, r9
 80021fe:	4805      	ldr	r0, [pc, #20]	@ (8002214 <decode_CAN_0x10B+0xec>)
 8002200:	f002 fd78 	bl	8004cf4 <uart_printf>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800220e:	bf00      	nop
 8002210:	447a0000 	.word	0x447a0000
 8002214:	0800a050 	.word	0x0800a050

08002218 <decode_CAN_0x10C>:
void decode_CAN_0x10C(const uint8_t *data, CAN_BMS_0x10C_t *msg) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
    // Decode Cell16 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
    msg->CELL16 =  (float)((data[0] << 8) | data[1])/1000.f;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	021b      	lsls	r3, r3, #8
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	3201      	adds	r2, #1
 800222c:	7812      	ldrb	r2, [r2, #0]
 800222e:	4313      	orrs	r3, r2
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe fce3 	bl	8000bfc <__aeabi_i2f>
 8002236:	4603      	mov	r3, r0
 8002238:	4926      	ldr	r1, [pc, #152]	@ (80022d4 <decode_CAN_0x10C+0xbc>)
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fde6 	bl	8000e0c <__aeabi_fdiv>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	601a      	str	r2, [r3, #0]

    // Decode Cell17 voltage (Bytes 2-3)
    msg->CELL17 = (float)((data[2] << 8) | data[3])/1000.0f;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3302      	adds	r3, #2
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	3203      	adds	r2, #3
 8002254:	7812      	ldrb	r2, [r2, #0]
 8002256:	4313      	orrs	r3, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe fccf 	bl	8000bfc <__aeabi_i2f>
 800225e:	4603      	mov	r3, r0
 8002260:	491c      	ldr	r1, [pc, #112]	@ (80022d4 <decode_CAN_0x10C+0xbc>)
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fdd2 	bl	8000e0c <__aeabi_fdiv>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	605a      	str	r2, [r3, #4]

    // Decode Cell3 voltage (Bytes 4-5)
    msg->CELL18 = (float)((data[4] << 8) | data[5])/1000.0f;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	3205      	adds	r2, #5
 800227c:	7812      	ldrb	r2, [r2, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe fcbb 	bl	8000bfc <__aeabi_i2f>
 8002286:	4603      	mov	r3, r0
 8002288:	4912      	ldr	r1, [pc, #72]	@ (80022d4 <decode_CAN_0x10C+0xbc>)
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fdbe 	bl	8000e0c <__aeabi_fdiv>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	609a      	str	r2, [r3, #8]

    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3306      	adds	r3, #6
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b21b      	sxth	r3, r3
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	b21a      	sxth	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3307      	adds	r3, #7
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b21b      	sxth	r3, r3
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	819a      	strh	r2, [r3, #12]
    uart_printf("CELL16=%.2f v \n\r",msg->CELL16);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe f8b4 	bl	8000428 <__aeabi_f2d>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4804      	ldr	r0, [pc, #16]	@ (80022d8 <decode_CAN_0x10C+0xc0>)
 80022c6:	f002 fd15 	bl	8004cf4 <uart_printf>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	447a0000 	.word	0x447a0000
 80022d8:	0800a080 	.word	0x0800a080

080022dc <matel_mcu_process_can_frame>:
#include"MCU_ELECTROCATLYST.h"
#include"can.h"
#include"uart.h"

DBC_AllMessages_t msg;
void matel_mcu_process_can_frame(can_frame_t *frame){
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	switch(frame->id){
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80022ec:	d073      	beq.n	80023d6 <matel_mcu_process_can_frame+0xfa>
 80022ee:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80022f2:	d871      	bhi.n	80023d8 <matel_mcu_process_can_frame+0xfc>
 80022f4:	4a3a      	ldr	r2, [pc, #232]	@ (80023e0 <matel_mcu_process_can_frame+0x104>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d066      	beq.n	80023c8 <matel_mcu_process_can_frame+0xec>
 80022fa:	4a39      	ldr	r2, [pc, #228]	@ (80023e0 <matel_mcu_process_can_frame+0x104>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d86b      	bhi.n	80023d8 <matel_mcu_process_can_frame+0xfc>
 8002300:	4a38      	ldr	r2, [pc, #224]	@ (80023e4 <matel_mcu_process_can_frame+0x108>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d059      	beq.n	80023ba <matel_mcu_process_can_frame+0xde>
 8002306:	4a37      	ldr	r2, [pc, #220]	@ (80023e4 <matel_mcu_process_can_frame+0x108>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d865      	bhi.n	80023d8 <matel_mcu_process_can_frame+0xfc>
 800230c:	2bb3      	cmp	r3, #179	@ 0xb3
 800230e:	d82d      	bhi.n	800236c <matel_mcu_process_can_frame+0x90>
 8002310:	2ba1      	cmp	r3, #161	@ 0xa1
 8002312:	d361      	bcc.n	80023d8 <matel_mcu_process_can_frame+0xfc>
 8002314:	3ba1      	subs	r3, #161	@ 0xa1
 8002316:	2b12      	cmp	r3, #18
 8002318:	d85e      	bhi.n	80023d8 <matel_mcu_process_can_frame+0xfc>
 800231a:	a201      	add	r2, pc, #4	@ (adr r2, 8002320 <matel_mcu_process_can_frame+0x44>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	08002375 	.word	0x08002375
 8002324:	080023d9 	.word	0x080023d9
 8002328:	080023d9 	.word	0x080023d9
 800232c:	080023d9 	.word	0x080023d9
 8002330:	080023d9 	.word	0x080023d9
 8002334:	080023d9 	.word	0x080023d9
 8002338:	080023d9 	.word	0x080023d9
 800233c:	080023d9 	.word	0x080023d9
 8002340:	080023d9 	.word	0x080023d9
 8002344:	080023d9 	.word	0x080023d9
 8002348:	080023d9 	.word	0x080023d9
 800234c:	080023d9 	.word	0x080023d9
 8002350:	080023d9 	.word	0x080023d9
 8002354:	08002383 	.word	0x08002383
 8002358:	08002391 	.word	0x08002391
 800235c:	080023d9 	.word	0x080023d9
 8002360:	080023d9 	.word	0x080023d9
 8002364:	080023d9 	.word	0x080023d9
 8002368:	0800239f 	.word	0x0800239f
 800236c:	4a1e      	ldr	r2, [pc, #120]	@ (80023e8 <matel_mcu_process_can_frame+0x10c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d01c      	beq.n	80023ac <matel_mcu_process_can_frame+0xd0>
	                                             break;
	case Matel_VECTOR__INDEPENDENT_SIG_MSG_0xC0000000:
		                                       break;
	}

}
 8002372:	e031      	b.n	80023d8 <matel_mcu_process_can_frame+0xfc>
	case Matel_MCU_POWER_CAN_STD_ID_A1:decode_MCU_POWER_One(frame->data,&msg.MCU_POWER_One);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3307      	adds	r3, #7
 8002378:	491c      	ldr	r1, [pc, #112]	@ (80023ec <matel_mcu_process_can_frame+0x110>)
 800237a:	4618      	mov	r0, r3
 800237c:	f000 ffac 	bl	80032d8 <decode_MCU_POWER_One>
		                                break;
 8002380:	e02a      	b.n	80023d8 <matel_mcu_process_can_frame+0xfc>
	case Matel_MCU_FAULT_one_CAN_STD_ID_AE:decode_MCU_FAULT_One(frame->data, &msg.MCU_FAULT_One);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3307      	adds	r3, #7
 8002386:	491a      	ldr	r1, [pc, #104]	@ (80023f0 <matel_mcu_process_can_frame+0x114>)
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fb7d 	bl	8002a88 <decode_MCU_FAULT_One>
		                                  break;
 800238e:	e023      	b.n	80023d8 <matel_mcu_process_can_frame+0xfc>
	case Matel_MCU_FAULT_two_CAN_STD_ID_AF:decode_MCU_FAULT_two(frame->data,&msg.MCU_FAULT_two);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3307      	adds	r3, #7
 8002394:	4917      	ldr	r1, [pc, #92]	@ (80023f4 <matel_mcu_process_can_frame+0x118>)
 8002396:	4618      	mov	r0, r3
 8002398:	f000 fcce 	bl	8002d38 <decode_MCU_FAULT_two>
		                                  break;
 800239c:	e01c      	b.n	80023d8 <matel_mcu_process_can_frame+0xfc>
	case Matel_MCU_Fault_Code_CAN_STD_ID_B3:decode_MCU_Fault_Code(frame->data, &msg.MCU_Fault_Code);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3307      	adds	r3, #7
 80023a2:	4915      	ldr	r1, [pc, #84]	@ (80023f8 <matel_mcu_process_can_frame+0x11c>)
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 f989 	bl	80026bc <decode_MCU_Fault_Code>
		                                   break;
 80023aa:	e015      	b.n	80023d8 <matel_mcu_process_can_frame+0xfc>
	case Matel_MCU_Stat_One_CAN_EXTD_ID_18265040:decode_MCU_Stat_One(frame->data, &msg.MCU_Stat_One);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3307      	adds	r3, #7
 80023b0:	4912      	ldr	r1, [pc, #72]	@ (80023fc <matel_mcu_process_can_frame+0x120>)
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 fed4 	bl	8003160 <decode_MCU_Stat_One>
		                                  break;
 80023b8:	e00e      	b.n	80023d8 <matel_mcu_process_can_frame+0xfc>
	case Matel_MCU_Stat_Two_CAN_EXTD_ID_18275040:decode_MCU_Stat_Two(frame->data, &msg.MCU_Stat_Two);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3307      	adds	r3, #7
 80023be:	4910      	ldr	r1, [pc, #64]	@ (8002400 <matel_mcu_process_can_frame+0x124>)
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f8fd 	bl	80025c0 <decode_MCU_Stat_Two>
		                                       break;
 80023c6:	e007      	b.n	80023d8 <matel_mcu_process_can_frame+0xfc>
	case Matel_MCU_HearthBeat_CAN_EXTD_ID_18963257:decode_HearthBeat(frame->data, &msg.HearthBeat);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3307      	adds	r3, #7
 80023cc:	490d      	ldr	r1, [pc, #52]	@ (8002404 <matel_mcu_process_can_frame+0x128>)
 80023ce:	4618      	mov	r0, r3
 80023d0:	f000 fdf6 	bl	8002fc0 <decode_HearthBeat>
	                                             break;
 80023d4:	e000      	b.n	80023d8 <matel_mcu_process_can_frame+0xfc>
		                                       break;
 80023d6:	bf00      	nop
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	18963257 	.word	0x18963257
 80023e4:	18275040 	.word	0x18275040
 80023e8:	18265040 	.word	0x18265040
 80023ec:	200004d0 	.word	0x200004d0
 80023f0:	2000048c 	.word	0x2000048c
 80023f4:	20000450 	.word	0x20000450
 80023f8:	20000348 	.word	0x20000348
 80023fc:	20000430 	.word	0x20000430
 8002400:	20000330 	.word	0x20000330
 8002404:	200003a8 	.word	0x200003a8

08002408 <extract_motorola_u64>:
	uint64_t mask = (~0ULL) << len;
	return (int64_t)(v | mask);
	}
	return (int64_t)v;
}
static uint64_t extract_motorola_u64(const uint8_t *data, int start, int len) {
 8002408:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800240c:	b08b      	sub	sp, #44	@ 0x2c
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
	if (len <= 0 || len > 64) return 0;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	dd02      	ble.n	8002422 <extract_motorola_u64+0x1a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b40      	cmp	r3, #64	@ 0x40
 8002420:	dd04      	ble.n	800242c <extract_motorola_u64+0x24>
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	e051      	b.n	80024d0 <extract_motorola_u64+0xc8>
	uint64_t value = 0;
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int cur_byte = start / 8;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	da00      	bge.n	8002440 <extract_motorola_u64+0x38>
 800243e:	3307      	adds	r3, #7
 8002440:	10db      	asrs	r3, r3, #3
 8002442:	61fb      	str	r3, [r7, #28]
	int cur_bit = start % 8; // 7 = MSB of byte
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	425a      	negs	r2, r3
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	f002 0207 	and.w	r2, r2, #7
 8002450:	bf58      	it	pl
 8002452:	4253      	negpl	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < len; i++) {
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e033      	b.n	80024c4 <extract_motorola_u64+0xbc>
	uint8_t bit = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	74fb      	strb	r3, [r7, #19]
	if (cur_byte >= 0 && cur_byte < 8) bit = (data[cur_byte] >> cur_bit) & 1U;
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b00      	cmp	r3, #0
 8002464:	db0e      	blt.n	8002484 <extract_motorola_u64+0x7c>
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	2b07      	cmp	r3, #7
 800246a:	dc0b      	bgt.n	8002484 <extract_motorola_u64+0x7c>
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4413      	add	r3, r2
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	fa42 f303 	asr.w	r3, r2, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	74fb      	strb	r3, [r7, #19]
	value = (value << 1) | (uint64_t)bit;
 8002484:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002488:	eb12 0a02 	adds.w	sl, r2, r2
 800248c:	eb43 0b03 	adc.w	fp, r3, r3
 8002490:	4652      	mov	r2, sl
 8002492:	465b      	mov	r3, fp
 8002494:	7cf9      	ldrb	r1, [r7, #19]
 8002496:	2000      	movs	r0, #0
 8002498:	460c      	mov	r4, r1
 800249a:	4605      	mov	r5, r0
 800249c:	ea42 0804 	orr.w	r8, r2, r4
 80024a0:	ea43 0905 	orr.w	r9, r3, r5
 80024a4:	e9c7 8908 	strd	r8, r9, [r7, #32]
	cur_bit--;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	61bb      	str	r3, [r7, #24]
	if (cur_bit < 0) { cur_byte++; cur_bit = 7; }
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	da04      	bge.n	80024be <extract_motorola_u64+0xb6>
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	3301      	adds	r3, #1
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	2307      	movs	r3, #7
 80024bc:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < len; i++) {
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3301      	adds	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	dbc7      	blt.n	800245c <extract_motorola_u64+0x54>
	}
	return value;
 80024cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	372c      	adds	r7, #44	@ 0x2c
 80024d6:	46bd      	mov	sp, r7
 80024d8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024dc:	4770      	bx	lr

080024de <extract_little_endian_u64>:
    uint64_t shifted = v >> start_bit;
    uint64_t mask = (length == 64) ? ~0ULL : ((1ULL << length) - 1ULL);
    return shifted & mask;
}*/

static uint64_t extract_little_endian_u64(const uint8_t *data, int start, int len) {
 80024de:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024e2:	b08d      	sub	sp, #52	@ 0x34
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
if (len <= 0 || len > 64) return 0;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	dd02      	ble.n	80024f8 <extract_little_endian_u64+0x1a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b40      	cmp	r3, #64	@ 0x40
 80024f6:	dd04      	ble.n	8002502 <extract_little_endian_u64+0x24>
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e056      	b.n	80025b0 <extract_little_endian_u64+0xd2>
uint64_t value = 0;
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
for (int i = 0; i < len; i++) {
 800250e:	2300      	movs	r3, #0
 8002510:	627b      	str	r3, [r7, #36]	@ 0x24
 8002512:	e047      	b.n	80025a4 <extract_little_endian_u64+0xc6>
int bit_index = start + i;
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	4413      	add	r3, r2
 800251a:	61fb      	str	r3, [r7, #28]
int byte_index = bit_index / 8;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b00      	cmp	r3, #0
 8002520:	da00      	bge.n	8002524 <extract_little_endian_u64+0x46>
 8002522:	3307      	adds	r3, #7
 8002524:	10db      	asrs	r3, r3, #3
 8002526:	61bb      	str	r3, [r7, #24]
int bit_in_byte = bit_index % 8;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	425a      	negs	r2, r3
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	f002 0207 	and.w	r2, r2, #7
 8002534:	bf58      	it	pl
 8002536:	4253      	negpl	r3, r2
 8002538:	617b      	str	r3, [r7, #20]
uint8_t bit = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
if (byte_index >= 0 && byte_index < 8) bit = (data[byte_index] >> bit_in_byte) & 1U;
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	db0f      	blt.n	8002566 <extract_little_endian_u64+0x88>
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b07      	cmp	r3, #7
 800254a:	dc0c      	bgt.n	8002566 <extract_little_endian_u64+0x88>
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	fa42 f303 	asr.w	r3, r2, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
value |= ((uint64_t)bit << i);
 8002566:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800256a:	2200      	movs	r2, #0
 800256c:	4698      	mov	r8, r3
 800256e:	4691      	mov	r9, r2
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	f1a3 0120 	sub.w	r1, r3, #32
 8002576:	f1c3 0220 	rsb	r2, r3, #32
 800257a:	fa09 f503 	lsl.w	r5, r9, r3
 800257e:	fa08 f101 	lsl.w	r1, r8, r1
 8002582:	430d      	orrs	r5, r1
 8002584:	fa28 f202 	lsr.w	r2, r8, r2
 8002588:	4315      	orrs	r5, r2
 800258a:	fa08 f403 	lsl.w	r4, r8, r3
 800258e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002592:	ea42 0a04 	orr.w	sl, r2, r4
 8002596:	ea43 0b05 	orr.w	fp, r3, r5
 800259a:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
for (int i = 0; i < len; i++) {
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	3301      	adds	r3, #1
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	dbb3      	blt.n	8002514 <extract_little_endian_u64+0x36>
}
return value;
 80025ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
}
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	3734      	adds	r7, #52	@ 0x34
 80025b6:	46bd      	mov	sp, r7
 80025b8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80025bc:	4770      	bx	lr
	...

080025c0 <decode_MCU_Stat_Two>:

// Implementations of decode functions follow (using extract helpers)


void decode_MCU_Stat_Two(const uint8_t *data, MCU_Stat_Two_t *out) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
	if (!out) return;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d062      	beq.n	8002696 <decode_MCU_Stat_Two+0xd6>
	uint64_t raw0 = extract_little_endian_u64(data, 32, 32);
 80025d0:	2220      	movs	r2, #32
 80025d2:	2120      	movs	r1, #32
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff82 	bl	80024de <extract_little_endian_u64>
 80025da:	e9c7 0106 	strd	r0, r1, [r7, #24]
	out->MCU_Odometer_Val = (double)raw0 * 0.1 + 0.0;
 80025de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025e2:	f7fd ff43 	bl	800046c <__aeabi_ul2d>
 80025e6:	a32e      	add	r3, pc, #184	@ (adr r3, 80026a0 <decode_MCU_Stat_Two+0xe0>)
 80025e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ec:	f7fd ff74 	bl	80004d8 <__aeabi_dmul>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	f7fd fdb4 	bl	800016c <__adddf3>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	6839      	ldr	r1, [r7, #0]
 800260a:	e9c1 2300 	strd	r2, r3, [r1]
	uint64_t raw1 = extract_little_endian_u64(data, 16, 16);
 800260e:	2210      	movs	r2, #16
 8002610:	2110      	movs	r1, #16
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ff63 	bl	80024de <extract_little_endian_u64>
 8002618:	e9c7 0104 	strd	r0, r1, [r7, #16]
	out->MCU_VCU_State = (double)raw1;
 800261c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002620:	f7fd ff24 	bl	800046c <__aeabi_ul2d>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	6839      	ldr	r1, [r7, #0]
 800262a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	uint64_t raw2 = extract_little_endian_u64(data, 0, 16);
 800262e:	2210      	movs	r2, #16
 8002630:	2100      	movs	r1, #0
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ff53 	bl	80024de <extract_little_endian_u64>
 8002638:	e9c7 0102 	strd	r0, r1, [r7, #8]
	out->MCU_Motor_RPM = (double)raw2  -16384.0;
 800263c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002640:	f7fd ff14 	bl	800046c <__aeabi_ul2d>
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	4b17      	ldr	r3, [pc, #92]	@ (80026a8 <decode_MCU_Stat_Two+0xe8>)
 800264a:	f7fd fd8d 	bl	8000168 <__aeabi_dsub>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	6839      	ldr	r1, [r7, #0]
 8002654:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uart_print_str("\n Odometer: ");
 8002658:	4814      	ldr	r0, [pc, #80]	@ (80026ac <decode_MCU_Stat_Two+0xec>)
 800265a:	f002 f9dd 	bl	8004a18 <uart_print_str>
	uart_send_double(out->MCU_Odometer_Val,3);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002664:	2203      	movs	r2, #3
 8002666:	f002 f9ed 	bl	8004a44 <uart_send_double>
	uart_print_str("\n MCU_VCU_State: ");
 800266a:	4811      	ldr	r0, [pc, #68]	@ (80026b0 <decode_MCU_Stat_Two+0xf0>)
 800266c:	f002 f9d4 	bl	8004a18 <uart_print_str>
	uart_send_double(out->MCU_VCU_State,3);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002676:	2203      	movs	r2, #3
 8002678:	f002 f9e4 	bl	8004a44 <uart_send_double>
	uart_print_str("\n MCU_Motor_RPM :");
 800267c:	480d      	ldr	r0, [pc, #52]	@ (80026b4 <decode_MCU_Stat_Two+0xf4>)
 800267e:	f002 f9cb 	bl	8004a18 <uart_print_str>
	uart_send_double(out->MCU_Motor_RPM,3);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002688:	2203      	movs	r2, #3
 800268a:	f002 f9db 	bl	8004a44 <uart_send_double>
	uart_print_str("\n============================================\n");
 800268e:	480a      	ldr	r0, [pc, #40]	@ (80026b8 <decode_MCU_Stat_Two+0xf8>)
 8002690:	f002 f9c2 	bl	8004a18 <uart_print_str>
 8002694:	e000      	b.n	8002698 <decode_MCU_Stat_Two+0xd8>
	if (!out) return;
 8002696:	bf00      	nop
}
 8002698:	3720      	adds	r7, #32
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	9999999a 	.word	0x9999999a
 80026a4:	3fb99999 	.word	0x3fb99999
 80026a8:	40d00000 	.word	0x40d00000
 80026ac:	0800a094 	.word	0x0800a094
 80026b0:	0800a0a4 	.word	0x0800a0a4
 80026b4:	0800a0b8 	.word	0x0800a0b8
 80026b8:	0800a0cc 	.word	0x0800a0cc

080026bc <decode_MCU_Fault_Code>:


void decode_MCU_Fault_Code(const uint8_t *data, MCU_Fault_Code_t *out) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
	if (!out) return;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 81a2 	beq.w	8002a12 <decode_MCU_Fault_Code+0x356>
	// sequential 8-bit little-endian signals
	out->MCU_Fault_Code_0 = (int)extract_motorola_u64(data, 30, 1);
 80026ce:	2201      	movs	r2, #1
 80026d0:	211e      	movs	r1, #30
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff fe98 	bl	8002408 <extract_motorola_u64>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	601a      	str	r2, [r3, #0]
	out->MCU_Fault_Code_1 = (int)extract_motorola_u64(data, 31, 1);
 80026e0:	2201      	movs	r2, #1
 80026e2:	211f      	movs	r1, #31
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff fe8f 	bl	8002408 <extract_motorola_u64>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	605a      	str	r2, [r3, #4]
	out->MCU_Fault_Code_2 = (int)extract_motorola_u64(data, 16,1);
 80026f2:	2201      	movs	r2, #1
 80026f4:	2110      	movs	r1, #16
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff fe86 	bl	8002408 <extract_motorola_u64>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	609a      	str	r2, [r3, #8]
	out->MCU_Fault_Code_3 = (int)extract_motorola_u64(data, 17, 1);
 8002704:	2201      	movs	r2, #1
 8002706:	2111      	movs	r1, #17
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff fe7d 	bl	8002408 <extract_motorola_u64>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	60da      	str	r2, [r3, #12]
	out->MCU_Fault_Code_4 = (int)extract_motorola_u64(data, 18, 1);
 8002716:	2201      	movs	r2, #1
 8002718:	2112      	movs	r1, #18
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff fe74 	bl	8002408 <extract_motorola_u64>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	611a      	str	r2, [r3, #16]
	out->MCU_Fault_Code_5 = (int)extract_motorola_u64(data, 19, 1);
 8002728:	2201      	movs	r2, #1
 800272a:	2113      	movs	r1, #19
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff fe6b 	bl	8002408 <extract_motorola_u64>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	615a      	str	r2, [r3, #20]
	out->MCU_Fault_Code_6 = (int)extract_motorola_u64(data, 20, 1);
 800273a:	2201      	movs	r2, #1
 800273c:	2114      	movs	r1, #20
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff fe62 	bl	8002408 <extract_motorola_u64>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	619a      	str	r2, [r3, #24]
	out->MCU_Fault_Code_7 = (int)extract_motorola_u64(data, 21, 1);
 800274c:	2201      	movs	r2, #1
 800274e:	2115      	movs	r1, #21
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff fe59 	bl	8002408 <extract_motorola_u64>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	61da      	str	r2, [r3, #28]
	out->MCU_Fault_Code_8 = (int)extract_motorola_u64(data, 22, 1);
 800275e:	2201      	movs	r2, #1
 8002760:	2116      	movs	r1, #22
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff fe50 	bl	8002408 <extract_motorola_u64>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	621a      	str	r2, [r3, #32]
	out->MCU_Fault_Code_9 = (int)extract_motorola_u64(data,23, 1);
 8002770:	2201      	movs	r2, #1
 8002772:	2117      	movs	r1, #23
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff fe47 	bl	8002408 <extract_motorola_u64>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	625a      	str	r2, [r3, #36]	@ 0x24
	out->MCU_Fault_Code_10 = (int)extract_motorola_u64(data, 8, 1);
 8002782:	2201      	movs	r2, #1
 8002784:	2108      	movs	r1, #8
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff fe3e 	bl	8002408 <extract_motorola_u64>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	629a      	str	r2, [r3, #40]	@ 0x28
	out->MCU_Fault_Code_11 = (int)extract_motorola_u64(data, 9, 1);
 8002794:	2201      	movs	r2, #1
 8002796:	2109      	movs	r1, #9
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff fe35 	bl	8002408 <extract_motorola_u64>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	out->MCU_Fault_Code_12 = (int)extract_motorola_u64(data, 10, 1);
 80027a6:	2201      	movs	r2, #1
 80027a8:	210a      	movs	r1, #10
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fe2c 	bl	8002408 <extract_motorola_u64>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	631a      	str	r2, [r3, #48]	@ 0x30
	out->MCU_Fault_Code_13 = (int)extract_motorola_u64(data, 11, 1);
 80027b8:	2201      	movs	r2, #1
 80027ba:	210b      	movs	r1, #11
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff fe23 	bl	8002408 <extract_motorola_u64>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	635a      	str	r2, [r3, #52]	@ 0x34
	out->MCU_Fault_Code_14 = (int)extract_motorola_u64(data, 12, 1);
 80027ca:	2201      	movs	r2, #1
 80027cc:	210c      	movs	r1, #12
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff fe1a 	bl	8002408 <extract_motorola_u64>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	639a      	str	r2, [r3, #56]	@ 0x38
	out->MCU_Fault_Code_15 = (int)extract_motorola_u64(data, 13, 1);
 80027dc:	2201      	movs	r2, #1
 80027de:	210d      	movs	r1, #13
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff fe11 	bl	8002408 <extract_motorola_u64>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	63da      	str	r2, [r3, #60]	@ 0x3c
	out->MCU_Fault_Code_16 = (int)extract_motorola_u64(data, 14, 1);
 80027ee:	2201      	movs	r2, #1
 80027f0:	210e      	movs	r1, #14
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff fe08 	bl	8002408 <extract_motorola_u64>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	641a      	str	r2, [r3, #64]	@ 0x40
	out->MCU_Fault_Code_17 = (int)extract_motorola_u64(data, 15, 1);
 8002800:	2201      	movs	r2, #1
 8002802:	210f      	movs	r1, #15
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff fdff 	bl	8002408 <extract_motorola_u64>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	645a      	str	r2, [r3, #68]	@ 0x44
	out->MCU_Fault_Code_18 = (int)extract_motorola_u64(data, 0, 1);
 8002812:	2201      	movs	r2, #1
 8002814:	2100      	movs	r1, #0
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff fdf6 	bl	8002408 <extract_motorola_u64>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	649a      	str	r2, [r3, #72]	@ 0x48
	out->MCU_Fault_Code_19 = (int)extract_motorola_u64(data, 7, 3);
 8002824:	2203      	movs	r2, #3
 8002826:	2107      	movs	r1, #7
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fded 	bl	8002408 <extract_motorola_u64>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	64da      	str	r2, [r3, #76]	@ 0x4c
	out->MCU_Fault_Code_20 = (int)extract_motorola_u64(data, 1, 1);
 8002836:	2201      	movs	r2, #1
 8002838:	2101      	movs	r1, #1
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fde4 	bl	8002408 <extract_motorola_u64>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	651a      	str	r2, [r3, #80]	@ 0x50
	out->MCU_Fault_Code_21 = (int)extract_motorola_u64(data, 2,1);
 8002848:	2201      	movs	r2, #1
 800284a:	2102      	movs	r1, #2
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff fddb 	bl	8002408 <extract_motorola_u64>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	655a      	str	r2, [r3, #84]	@ 0x54
	out->MCU_Fault_Code_22 = (int)extract_motorola_u64(data, 4, 3);
 800285a:	2203      	movs	r2, #3
 800285c:	2104      	movs	r1, #4
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff fdd2 	bl	8002408 <extract_motorola_u64>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	659a      	str	r2, [r3, #88]	@ 0x58
	uart_print_str("\n MCU_temp_cutoff: ");
 800286c:	486b      	ldr	r0, [pc, #428]	@ (8002a1c <decode_MCU_Fault_Code+0x360>)
 800286e:	f002 f8d3 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_0);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4619      	mov	r1, r3
 8002878:	4869      	ldr	r0, [pc, #420]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 800287a:	f002 fa3b 	bl	8004cf4 <uart_printf>
	uart_print_str("\n motor_temp_cutoff_fault: ");
 800287e:	4869      	ldr	r0, [pc, #420]	@ (8002a24 <decode_MCU_Fault_Code+0x368>)
 8002880:	f002 f8ca 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_1);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4619      	mov	r1, r3
 800288a:	4865      	ldr	r0, [pc, #404]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 800288c:	f002 fa32 	bl	8004cf4 <uart_printf>
	uart_print_str("\n Motor_temp_warning");
 8002890:	4865      	ldr	r0, [pc, #404]	@ (8002a28 <decode_MCU_Fault_Code+0x36c>)
 8002892:	f002 f8c1 	bl	8004a18 <uart_print_str>
	uart_printf("%d",out->MCU_Fault_Code_2);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	4619      	mov	r1, r3
 800289c:	4863      	ldr	r0, [pc, #396]	@ (8002a2c <decode_MCU_Fault_Code+0x370>)
 800289e:	f002 fa29 	bl	8004cf4 <uart_printf>
	uart_print_str("\n Motor_temp_sensor_fault: ");
 80028a2:	4863      	ldr	r0, [pc, #396]	@ (8002a30 <decode_MCU_Fault_Code+0x374>)
 80028a4:	f002 f8b8 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_3);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4619      	mov	r1, r3
 80028ae:	485c      	ldr	r0, [pc, #368]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 80028b0:	f002 fa20 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_Brake_STG_Fault: ");
 80028b4:	485f      	ldr	r0, [pc, #380]	@ (8002a34 <decode_MCU_Fault_Code+0x378>)
 80028b6:	f002 f8af 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_4);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	4619      	mov	r1, r3
 80028c0:	4857      	ldr	r0, [pc, #348]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 80028c2:	f002 fa17 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_Brake_STB_Fault: ");
 80028c6:	485c      	ldr	r0, [pc, #368]	@ (8002a38 <decode_MCU_Fault_Code+0x37c>)
 80028c8:	f002 f8a6 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_5);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	4619      	mov	r1, r3
 80028d2:	4853      	ldr	r0, [pc, #332]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 80028d4:	f002 fa0e 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_Throttle2_STG_Fault: ");
 80028d8:	4858      	ldr	r0, [pc, #352]	@ (8002a3c <decode_MCU_Fault_Code+0x380>)
 80028da:	f002 f89d 	bl	8004a18 <uart_print_str>
	uart_printf("%d \n ",out->MCU_Fault_Code_6);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	4619      	mov	r1, r3
 80028e4:	4856      	ldr	r0, [pc, #344]	@ (8002a40 <decode_MCU_Fault_Code+0x384>)
 80028e6:	f002 fa05 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_Throttle2_STB_Fault: ");
 80028ea:	4856      	ldr	r0, [pc, #344]	@ (8002a44 <decode_MCU_Fault_Code+0x388>)
 80028ec:	f002 f894 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_7);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	4619      	mov	r1, r3
 80028f6:	484a      	ldr	r0, [pc, #296]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 80028f8:	f002 f9fc 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_Throttle1_STB_Fault: ");
 80028fc:	4852      	ldr	r0, [pc, #328]	@ (8002a48 <decode_MCU_Fault_Code+0x38c>)
 80028fe:	f002 f88b 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_8);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	4619      	mov	r1, r3
 8002908:	4845      	ldr	r0, [pc, #276]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 800290a:	f002 f9f3 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_Throttle1_STG_Fault");
 800290e:	484f      	ldr	r0, [pc, #316]	@ (8002a4c <decode_MCU_Fault_Code+0x390>)
 8002910:	f002 f882 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_9);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002918:	4619      	mov	r1, r3
 800291a:	4841      	ldr	r0, [pc, #260]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 800291c:	f002 f9ea 	bl	8004cf4 <uart_printf>
	uart_print_str("\n MCU_temp_warning: ");
 8002920:	484b      	ldr	r0, [pc, #300]	@ (8002a50 <decode_MCU_Fault_Code+0x394>)
 8002922:	f002 f879 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_10);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292a:	4619      	mov	r1, r3
 800292c:	483c      	ldr	r0, [pc, #240]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 800292e:	f002 f9e1 	bl	8004cf4 <uart_printf>
	uart_print_str("\n MCU_temp_sensor_fault: ");
 8002932:	4848      	ldr	r0, [pc, #288]	@ (8002a54 <decode_MCU_Fault_Code+0x398>)
 8002934:	f002 f870 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_11);
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	4619      	mov	r1, r3
 800293e:	4838      	ldr	r0, [pc, #224]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 8002940:	f002 f9d8 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_LowSOC_Fault: ");
 8002944:	4844      	ldr	r0, [pc, #272]	@ (8002a58 <decode_MCU_Fault_Code+0x39c>)
 8002946:	f002 f867 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_12);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4619      	mov	r1, r3
 8002950:	4833      	ldr	r0, [pc, #204]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 8002952:	f002 f9cf 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_AuxVoltage_cutoff: ");
 8002956:	4841      	ldr	r0, [pc, #260]	@ (8002a5c <decode_MCU_Fault_Code+0x3a0>)
 8002958:	f002 f85e 	bl	8004a18 <uart_print_str>
	uart_printf("%d \n ",out->MCU_Fault_Code_13);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002960:	4619      	mov	r1, r3
 8002962:	4837      	ldr	r0, [pc, #220]	@ (8002a40 <decode_MCU_Fault_Code+0x384>)
 8002964:	f002 f9c6 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_AuxVoltage_Warning: ");
 8002968:	483d      	ldr	r0, [pc, #244]	@ (8002a60 <decode_MCU_Fault_Code+0x3a4>)
 800296a:	f002 f855 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_14);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002972:	4619      	mov	r1, r3
 8002974:	482a      	ldr	r0, [pc, #168]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 8002976:	f002 f9bd 	bl	8004cf4 <uart_printf>
	uart_print_str("\n MCU_Encoder_Fault: ");
 800297a:	483a      	ldr	r0, [pc, #232]	@ (8002a64 <decode_MCU_Fault_Code+0x3a8>)
 800297c:	f002 f84c 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_15);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002984:	4619      	mov	r1, r3
 8002986:	4826      	ldr	r0, [pc, #152]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 8002988:	f002 f9b4 	bl	8004cf4 <uart_printf>
	uart_print_str("\n MCU_FET_OPEN_FAULT: ");
 800298c:	4836      	ldr	r0, [pc, #216]	@ (8002a68 <decode_MCU_Fault_Code+0x3ac>)
 800298e:	f002 f843 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_16);
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	4619      	mov	r1, r3
 8002998:	4821      	ldr	r0, [pc, #132]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 800299a:	f002 f9ab 	bl	8004cf4 <uart_printf>
	uart_print_str("\n MCU_WheelLock_Fault");
 800299e:	4833      	ldr	r0, [pc, #204]	@ (8002a6c <decode_MCU_Fault_Code+0x3b0>)
 80029a0:	f002 f83a 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_17);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a8:	4619      	mov	r1, r3
 80029aa:	481d      	ldr	r0, [pc, #116]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 80029ac:	f002 f9a2 	bl	8004cf4 <uart_printf>
	uart_print_str("\n MCU_SensorSupply_Fault: ");
 80029b0:	482f      	ldr	r0, [pc, #188]	@ (8002a70 <decode_MCU_Fault_Code+0x3b4>)
 80029b2:	f002 f831 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_18);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ba:	4619      	mov	r1, r3
 80029bc:	4818      	ldr	r0, [pc, #96]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 80029be:	f002 f999 	bl	8004cf4 <uart_printf>
	uart_print_str("\n MCU_OverCurrent_Fault: ");
 80029c2:	482c      	ldr	r0, [pc, #176]	@ (8002a74 <decode_MCU_Fault_Code+0x3b8>)
 80029c4:	f002 f828 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_19);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029cc:	4619      	mov	r1, r3
 80029ce:	4814      	ldr	r0, [pc, #80]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 80029d0:	f002 f990 	bl	8004cf4 <uart_printf>
	uart_print_str("\n MCU_DC_CurrSensor_Fault: ");
 80029d4:	4828      	ldr	r0, [pc, #160]	@ (8002a78 <decode_MCU_Fault_Code+0x3bc>)
 80029d6:	f002 f81f 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_20);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029de:	4619      	mov	r1, r3
 80029e0:	480f      	ldr	r0, [pc, #60]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 80029e2:	f002 f987 	bl	8004cf4 <uart_printf>
	uart_print_str("\n MCU_Foc_Fault: ");
 80029e6:	4825      	ldr	r0, [pc, #148]	@ (8002a7c <decode_MCU_Fault_Code+0x3c0>)
 80029e8:	f002 f816 	bl	8004a18 <uart_print_str>
	uart_printf("%d \n ",out->MCU_Fault_Code_21);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f0:	4619      	mov	r1, r3
 80029f2:	4813      	ldr	r0, [pc, #76]	@ (8002a40 <decode_MCU_Fault_Code+0x384>)
 80029f4:	f002 f97e 	bl	8004cf4 <uart_printf>
	uart_print_str("\n MCU_PH_Sensor_Fault: ");
 80029f8:	4821      	ldr	r0, [pc, #132]	@ (8002a80 <decode_MCU_Fault_Code+0x3c4>)
 80029fa:	f002 f80d 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_22);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a02:	4619      	mov	r1, r3
 8002a04:	4806      	ldr	r0, [pc, #24]	@ (8002a20 <decode_MCU_Fault_Code+0x364>)
 8002a06:	f002 f975 	bl	8004cf4 <uart_printf>
	uart_print_str("\n============================================\n");
 8002a0a:	481e      	ldr	r0, [pc, #120]	@ (8002a84 <decode_MCU_Fault_Code+0x3c8>)
 8002a0c:	f002 f804 	bl	8004a18 <uart_print_str>
 8002a10:	e000      	b.n	8002a14 <decode_MCU_Fault_Code+0x358>
	if (!out) return;
 8002a12:	bf00      	nop
}
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	0800a0fc 	.word	0x0800a0fc
 8002a20:	0800a110 	.word	0x0800a110
 8002a24:	0800a114 	.word	0x0800a114
 8002a28:	0800a130 	.word	0x0800a130
 8002a2c:	0800a148 	.word	0x0800a148
 8002a30:	0800a14c 	.word	0x0800a14c
 8002a34:	0800a168 	.word	0x0800a168
 8002a38:	0800a180 	.word	0x0800a180
 8002a3c:	0800a198 	.word	0x0800a198
 8002a40:	0800a1b4 	.word	0x0800a1b4
 8002a44:	0800a1bc 	.word	0x0800a1bc
 8002a48:	0800a1d8 	.word	0x0800a1d8
 8002a4c:	0800a1f4 	.word	0x0800a1f4
 8002a50:	0800a210 	.word	0x0800a210
 8002a54:	0800a228 	.word	0x0800a228
 8002a58:	0800a244 	.word	0x0800a244
 8002a5c:	0800a25c 	.word	0x0800a25c
 8002a60:	0800a278 	.word	0x0800a278
 8002a64:	0800a294 	.word	0x0800a294
 8002a68:	0800a2ac 	.word	0x0800a2ac
 8002a6c:	0800a2c4 	.word	0x0800a2c4
 8002a70:	0800a2dc 	.word	0x0800a2dc
 8002a74:	0800a2f8 	.word	0x0800a2f8
 8002a78:	0800a314 	.word	0x0800a314
 8002a7c:	0800a330 	.word	0x0800a330
 8002a80:	0800a344 	.word	0x0800a344
 8002a84:	0800a0cc 	.word	0x0800a0cc

08002a88 <decode_MCU_FAULT_One>:
void decode_MCU_FAULT_One(const uint8_t *data, MCU_FAULT_One_t *out) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
if (!out) return;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8124 	beq.w	8002ce2 <decode_MCU_FAULT_One+0x25a>
out->MCU_FAULT_One_sig0 = (int)extract_motorola_u64(data, 27, 1);
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	211b      	movs	r1, #27
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff fcb2 	bl	8002408 <extract_motorola_u64>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	601a      	str	r2, [r3, #0]
out->MCU_FAULT_One_sig1 = (int)extract_motorola_u64(data, 28, 1);
 8002aac:	2201      	movs	r2, #1
 8002aae:	211c      	movs	r1, #28
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff fca9 	bl	8002408 <extract_motorola_u64>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	605a      	str	r2, [r3, #4]
out->MCU_FAULT_One_sig2 = (int)extract_motorola_u64(data, 39, 1);
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2127      	movs	r1, #39	@ 0x27
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff fca0 	bl	8002408 <extract_motorola_u64>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	609a      	str	r2, [r3, #8]
out->MCU_FAULT_One_sig3 = (int)extract_motorola_u64(data, 4, 1);
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	2104      	movs	r1, #4
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fc97 	bl	8002408 <extract_motorola_u64>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	60da      	str	r2, [r3, #12]
out->MCU_FAULT_One_sig4 = (int)extract_motorola_u64(data, 2, 1);
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff fc8e 	bl	8002408 <extract_motorola_u64>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	611a      	str	r2, [r3, #16]
out->MCU_FAULT_One_sig5 = (int)extract_motorola_u64(data, 18, 6);
 8002af4:	2206      	movs	r2, #6
 8002af6:	2112      	movs	r1, #18
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff fc85 	bl	8002408 <extract_motorola_u64>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	615a      	str	r2, [r3, #20]
out->MCU_FAULT_One_sig6 = (int)extract_motorola_u64(data, 6, 1);
 8002b06:	2201      	movs	r2, #1
 8002b08:	2106      	movs	r1, #6
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff fc7c 	bl	8002408 <extract_motorola_u64>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	619a      	str	r2, [r3, #24]
out->MCU_FAULT_One_sig7 = (int)extract_motorola_u64(data, 9, 2);
 8002b18:	2202      	movs	r2, #2
 8002b1a:	2109      	movs	r1, #9
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff fc73 	bl	8002408 <extract_motorola_u64>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	61da      	str	r2, [r3, #28]
out->MCU_FAULT_One_sig8 = (int)extract_motorola_u64(data, 11, 2);
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	210b      	movs	r1, #11
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff fc6a 	bl	8002408 <extract_motorola_u64>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	621a      	str	r2, [r3, #32]
out->MCU_FAULT_One_sig9 = (int)extract_motorola_u64(data, 1, 1);
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	2101      	movs	r1, #1
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff fc61 	bl	8002408 <extract_motorola_u64>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	625a      	str	r2, [r3, #36]	@ 0x24
out->MCU_FAULT_One_sig10 = (int)extract_motorola_u64(data, 21, 1);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	2115      	movs	r1, #21
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff fc58 	bl	8002408 <extract_motorola_u64>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	629a      	str	r2, [r3, #40]	@ 0x28
out->MCU_FAULT_One_sig11 = (int)extract_motorola_u64(data, 7, 1);
 8002b60:	2201      	movs	r2, #1
 8002b62:	2107      	movs	r1, #7
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff fc4f 	bl	8002408 <extract_motorola_u64>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	62da      	str	r2, [r3, #44]	@ 0x2c
out->MCU_FAULT_One_sig12 = (int)extract_motorola_u64(data, 15, 4);
 8002b72:	2204      	movs	r2, #4
 8002b74:	210f      	movs	r1, #15
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff fc46 	bl	8002408 <extract_motorola_u64>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	631a      	str	r2, [r3, #48]	@ 0x30
out->MCU_FAULT_One_sig13 = (int)extract_motorola_u64(data, 23, 2);
 8002b84:	2202      	movs	r2, #2
 8002b86:	2117      	movs	r1, #23
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff fc3d 	bl	8002408 <extract_motorola_u64>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	635a      	str	r2, [r3, #52]	@ 0x34
out->MCU_FAULT_One_sig14 = (int)extract_motorola_u64(data, 3, 1);
 8002b96:	2201      	movs	r2, #1
 8002b98:	2103      	movs	r1, #3
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff fc34 	bl	8002408 <extract_motorola_u64>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	639a      	str	r2, [r3, #56]	@ 0x38
out->MCU_FAULT_One_sig15 = (int)extract_motorola_u64(data, 5, 1);
 8002ba8:	2201      	movs	r2, #1
 8002baa:	2105      	movs	r1, #5
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff fc2b 	bl	8002408 <extract_motorola_u64>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	63da      	str	r2, [r3, #60]	@ 0x3c
uart_print_str("\n HW_ASC_st_b: ");
 8002bba:	484c      	ldr	r0, [pc, #304]	@ (8002cec <decode_MCU_FAULT_One+0x264>)
 8002bbc:	f001 ff2c 	bl	8004a18 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig0);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	484a      	ldr	r0, [pc, #296]	@ (8002cf0 <decode_MCU_FAULT_One+0x268>)
 8002bc8:	f002 f894 	bl	8004cf4 <uart_printf>
uart_print_str("\n MCU_FET_OPEN_FAULT: ");
 8002bcc:	4849      	ldr	r0, [pc, #292]	@ (8002cf4 <decode_MCU_FAULT_One+0x26c>)
 8002bce:	f001 ff23 	bl	8004a18 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig1);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4845      	ldr	r0, [pc, #276]	@ (8002cf0 <decode_MCU_FAULT_One+0x268>)
 8002bda:	f002 f88b 	bl	8004cf4 <uart_printf>
uart_print_str("\n MCU_DCDCCONV_Fault_St_B");
 8002bde:	4846      	ldr	r0, [pc, #280]	@ (8002cf8 <decode_MCU_FAULT_One+0x270>)
 8002be0:	f001 ff1a 	bl	8004a18 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig2);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	4619      	mov	r1, r3
 8002bea:	4841      	ldr	r0, [pc, #260]	@ (8002cf0 <decode_MCU_FAULT_One+0x268>)
 8002bec:	f002 f882 	bl	8004cf4 <uart_printf>
uart_print_str("\n MCU_BatteryUV_St_B: ");
 8002bf0:	4842      	ldr	r0, [pc, #264]	@ (8002cfc <decode_MCU_FAULT_One+0x274>)
 8002bf2:	f001 ff11 	bl	8004a18 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig3);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	483c      	ldr	r0, [pc, #240]	@ (8002cf0 <decode_MCU_FAULT_One+0x268>)
 8002bfe:	f002 f879 	bl	8004cf4 <uart_printf>
uart_print_str("\n MCU_VCUFault_St_B: ");
 8002c02:	483f      	ldr	r0, [pc, #252]	@ (8002d00 <decode_MCU_FAULT_One+0x278>)
 8002c04:	f001 ff08 	bl	8004a18 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig4);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4838      	ldr	r0, [pc, #224]	@ (8002cf0 <decode_MCU_FAULT_One+0x268>)
 8002c10:	f002 f870 	bl	8004cf4 <uart_printf>
uart_print_str("\n MCU_PhaseISensorFault_enum: ");
 8002c14:	483b      	ldr	r0, [pc, #236]	@ (8002d04 <decode_MCU_FAULT_One+0x27c>)
 8002c16:	f001 feff 	bl	8004a18 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig5);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4833      	ldr	r0, [pc, #204]	@ (8002cf0 <decode_MCU_FAULT_One+0x268>)
 8002c22:	f002 f867 	bl	8004cf4 <uart_printf>
uart_print_str("\n MCU_SpeedFault_St_B: ");
 8002c26:	4838      	ldr	r0, [pc, #224]	@ (8002d08 <decode_MCU_FAULT_One+0x280>)
 8002c28:	f001 fef6 	bl	8004a18 <uart_print_str>
uart_printf("%d \n ",out->MCU_FAULT_One_sig6);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	4619      	mov	r1, r3
 8002c32:	4836      	ldr	r0, [pc, #216]	@ (8002d0c <decode_MCU_FAULT_One+0x284>)
 8002c34:	f002 f85e 	bl	8004cf4 <uart_printf>
uart_print_str("\n MCU_SensorSupplyFault_enum: ");
 8002c38:	4835      	ldr	r0, [pc, #212]	@ (8002d10 <decode_MCU_FAULT_One+0x288>)
 8002c3a:	f001 feed 	bl	8004a18 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig7);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	4619      	mov	r1, r3
 8002c44:	482a      	ldr	r0, [pc, #168]	@ (8002cf0 <decode_MCU_FAULT_One+0x268>)
 8002c46:	f002 f855 	bl	8004cf4 <uart_printf>
uart_print_str("\n MCU_PhFault_enum: ");
 8002c4a:	4832      	ldr	r0, [pc, #200]	@ (8002d14 <decode_MCU_FAULT_One+0x28c>)
 8002c4c:	f001 fee4 	bl	8004a18 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig8);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	4619      	mov	r1, r3
 8002c56:	4826      	ldr	r0, [pc, #152]	@ (8002cf0 <decode_MCU_FAULT_One+0x268>)
 8002c58:	f002 f84c 	bl	8004cf4 <uart_printf>
uart_print_str("\n MCU_PhaseSensorFault_enum");
 8002c5c:	482e      	ldr	r0, [pc, #184]	@ (8002d18 <decode_MCU_FAULT_One+0x290>)
 8002c5e:	f001 fedb 	bl	8004a18 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig9);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	4619      	mov	r1, r3
 8002c68:	4821      	ldr	r0, [pc, #132]	@ (8002cf0 <decode_MCU_FAULT_One+0x268>)
 8002c6a:	f002 f843 	bl	8004cf4 <uart_printf>
uart_print_str("\n MCU_OverCurrentFault_enum: ");
 8002c6e:	482b      	ldr	r0, [pc, #172]	@ (8002d1c <decode_MCU_FAULT_One+0x294>)
 8002c70:	f001 fed2 	bl	8004a18 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig10);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c78:	4619      	mov	r1, r3
 8002c7a:	481d      	ldr	r0, [pc, #116]	@ (8002cf0 <decode_MCU_FAULT_One+0x268>)
 8002c7c:	f002 f83a 	bl	8004cf4 <uart_printf>
uart_print_str("\n MCU_FOCFault_St_B: ");
 8002c80:	4827      	ldr	r0, [pc, #156]	@ (8002d20 <decode_MCU_FAULT_One+0x298>)
 8002c82:	f001 fec9 	bl	8004a18 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig11);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4818      	ldr	r0, [pc, #96]	@ (8002cf0 <decode_MCU_FAULT_One+0x268>)
 8002c8e:	f002 f831 	bl	8004cf4 <uart_printf>
uart_print_str("\n MCU_EncoderFault_enum: ");
 8002c92:	4824      	ldr	r0, [pc, #144]	@ (8002d24 <decode_MCU_FAULT_One+0x29c>)
 8002c94:	f001 fec0 	bl	8004a18 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig12);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4814      	ldr	r0, [pc, #80]	@ (8002cf0 <decode_MCU_FAULT_One+0x268>)
 8002ca0:	f002 f828 	bl	8004cf4 <uart_printf>
uart_print_str("\n MCU_DC_ISensorFault_St_B: ");
 8002ca4:	4820      	ldr	r0, [pc, #128]	@ (8002d28 <decode_MCU_FAULT_One+0x2a0>)
 8002ca6:	f001 feb7 	bl	8004a18 <uart_print_str>
uart_printf("%d \n ",out->MCU_FAULT_One_sig13);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4816      	ldr	r0, [pc, #88]	@ (8002d0c <decode_MCU_FAULT_One+0x284>)
 8002cb2:	f002 f81f 	bl	8004cf4 <uart_printf>
uart_print_str("\n MCU_ChargerFault_St_B: ");
 8002cb6:	481d      	ldr	r0, [pc, #116]	@ (8002d2c <decode_MCU_FAULT_One+0x2a4>)
 8002cb8:	f001 feae 	bl	8004a18 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig14);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	480b      	ldr	r0, [pc, #44]	@ (8002cf0 <decode_MCU_FAULT_One+0x268>)
 8002cc4:	f002 f816 	bl	8004cf4 <uart_printf>
uart_print_str("\n MCU_BatOVFault_St_B: ");
 8002cc8:	4819      	ldr	r0, [pc, #100]	@ (8002d30 <decode_MCU_FAULT_One+0x2a8>)
 8002cca:	f001 fea5 	bl	8004a18 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig15);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4806      	ldr	r0, [pc, #24]	@ (8002cf0 <decode_MCU_FAULT_One+0x268>)
 8002cd6:	f002 f80d 	bl	8004cf4 <uart_printf>
uart_print_str("\n============================================\n");
 8002cda:	4816      	ldr	r0, [pc, #88]	@ (8002d34 <decode_MCU_FAULT_One+0x2ac>)
 8002cdc:	f001 fe9c 	bl	8004a18 <uart_print_str>
 8002ce0:	e000      	b.n	8002ce4 <decode_MCU_FAULT_One+0x25c>
if (!out) return;
 8002ce2:	bf00      	nop
}
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	0800a35c 	.word	0x0800a35c
 8002cf0:	0800a110 	.word	0x0800a110
 8002cf4:	0800a2ac 	.word	0x0800a2ac
 8002cf8:	0800a36c 	.word	0x0800a36c
 8002cfc:	0800a388 	.word	0x0800a388
 8002d00:	0800a3a0 	.word	0x0800a3a0
 8002d04:	0800a3b8 	.word	0x0800a3b8
 8002d08:	0800a3d8 	.word	0x0800a3d8
 8002d0c:	0800a1b4 	.word	0x0800a1b4
 8002d10:	0800a3f0 	.word	0x0800a3f0
 8002d14:	0800a410 	.word	0x0800a410
 8002d18:	0800a428 	.word	0x0800a428
 8002d1c:	0800a444 	.word	0x0800a444
 8002d20:	0800a464 	.word	0x0800a464
 8002d24:	0800a47c 	.word	0x0800a47c
 8002d28:	0800a498 	.word	0x0800a498
 8002d2c:	0800a4b8 	.word	0x0800a4b8
 8002d30:	0800a4d4 	.word	0x0800a4d4
 8002d34:	0800a0cc 	.word	0x0800a0cc

08002d38 <decode_MCU_FAULT_two>:
void decode_MCU_FAULT_two(const uint8_t *data, MCU_FAULT_two_t *out) {
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
if (!out) return;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8112 	beq.w	8002f6e <decode_MCU_FAULT_two+0x236>
	out->MCU_FAULT_two_sig0 = (int)extract_motorola_u64(data, 9, 3);
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	2109      	movs	r1, #9
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff fb5a 	bl	8002408 <extract_motorola_u64>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	601a      	str	r2, [r3, #0]
	out->MCU_FAULT_two_sig1 = (int)extract_motorola_u64(data, 10, 1);
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	210a      	movs	r1, #10
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff fb51 	bl	8002408 <extract_motorola_u64>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	605a      	str	r2, [r3, #4]
	out->MCU_FAULT_two_sig2 = (int)extract_motorola_u64(data, 11, 1);
 8002d6e:	2201      	movs	r2, #1
 8002d70:	210b      	movs	r1, #11
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff fb48 	bl	8002408 <extract_motorola_u64>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	609a      	str	r2, [r3, #8]
	out->MCU_FAULT_two_sig3 = (int)extract_motorola_u64(data, 12, 1);
 8002d80:	2201      	movs	r2, #1
 8002d82:	210c      	movs	r1, #12
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff fb3f 	bl	8002408 <extract_motorola_u64>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	60da      	str	r2, [r3, #12]
	out->MCU_FAULT_two_sig4 = (int)extract_motorola_u64(data, 13, 1);
 8002d92:	2201      	movs	r2, #1
 8002d94:	210d      	movs	r1, #13
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff fb36 	bl	8002408 <extract_motorola_u64>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	611a      	str	r2, [r3, #16]
	out->MCU_FAULT_two_sig5 = (int)extract_motorola_u64(data, 14, 1);
 8002da4:	2201      	movs	r2, #1
 8002da6:	210e      	movs	r1, #14
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fb2d 	bl	8002408 <extract_motorola_u64>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	615a      	str	r2, [r3, #20]
	out->MCU_FAULT_two_sig6 = (int)extract_motorola_u64(data, 15, 1);
 8002db6:	2201      	movs	r2, #1
 8002db8:	210f      	movs	r1, #15
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff fb24 	bl	8002408 <extract_motorola_u64>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	619a      	str	r2, [r3, #24]
	out->MCU_FAULT_two_sig7 = (int)extract_motorola_u64(data, 0, 1);
 8002dc8:	2201      	movs	r2, #1
 8002dca:	2100      	movs	r1, #0
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff fb1b 	bl	8002408 <extract_motorola_u64>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	61da      	str	r2, [r3, #28]
	out->MCU_FAULT_two_sig8 = (int)extract_motorola_u64(data, 1, 1);
 8002dda:	2201      	movs	r2, #1
 8002ddc:	2101      	movs	r1, #1
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff fb12 	bl	8002408 <extract_motorola_u64>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	621a      	str	r2, [r3, #32]
	out->MCU_FAULT_two_sig9 = (int)extract_motorola_u64(data, 2, 1);
 8002dec:	2201      	movs	r2, #1
 8002dee:	2102      	movs	r1, #2
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7ff fb09 	bl	8002408 <extract_motorola_u64>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	625a      	str	r2, [r3, #36]	@ 0x24
	out->MCU_FAULT_two_sig10 = (int)extract_motorola_u64(data, 3, 1);
 8002dfe:	2201      	movs	r2, #1
 8002e00:	2103      	movs	r1, #3
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff fb00 	bl	8002408 <extract_motorola_u64>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	629a      	str	r2, [r3, #40]	@ 0x28
	out->MCU_FAULT_two_sig11 = (int)extract_motorola_u64(data, 4, 1);
 8002e10:	2201      	movs	r2, #1
 8002e12:	2104      	movs	r1, #4
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff faf7 	bl	8002408 <extract_motorola_u64>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	62da      	str	r2, [r3, #44]	@ 0x2c
	out->MCU_FAULT_two_sig12 = (int)extract_motorola_u64(data, 5, 1);
 8002e22:	2201      	movs	r2, #1
 8002e24:	2105      	movs	r1, #5
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff faee 	bl	8002408 <extract_motorola_u64>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	631a      	str	r2, [r3, #48]	@ 0x30
	out->MCU_FAULT_two_sig13 = (int)extract_motorola_u64(data, 6, 1);
 8002e34:	2201      	movs	r2, #1
 8002e36:	2106      	movs	r1, #6
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff fae5 	bl	8002408 <extract_motorola_u64>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	635a      	str	r2, [r3, #52]	@ 0x34
	out->MCU_FAULT_two_sig14 = (int)extract_motorola_u64(data, 7, 1);
 8002e46:	2201      	movs	r2, #1
 8002e48:	2107      	movs	r1, #7
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff fadc 	bl	8002408 <extract_motorola_u64>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	639a      	str	r2, [r3, #56]	@ 0x38
	uart_print_str("\n VCU_BFNRFault_St_B: ");
 8002e58:	4847      	ldr	r0, [pc, #284]	@ (8002f78 <decode_MCU_FAULT_two+0x240>)
 8002e5a:	f001 fddd 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig0);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4619      	mov	r1, r3
 8002e64:	4845      	ldr	r0, [pc, #276]	@ (8002f7c <decode_MCU_FAULT_two+0x244>)
 8002e66:	f001 ff45 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_DCDCEnableFault_St_B: ");
 8002e6a:	4845      	ldr	r0, [pc, #276]	@ (8002f80 <decode_MCU_FAULT_two+0x248>)
 8002e6c:	f001 fdd4 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig1);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4619      	mov	r1, r3
 8002e76:	4841      	ldr	r0, [pc, #260]	@ (8002f7c <decode_MCU_FAULT_two+0x244>)
 8002e78:	f001 ff3c 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_ThrottleMismatch_St_B");
 8002e7c:	4841      	ldr	r0, [pc, #260]	@ (8002f84 <decode_MCU_FAULT_two+0x24c>)
 8002e7e:	f001 fdcb 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig2);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	4619      	mov	r1, r3
 8002e88:	483c      	ldr	r0, [pc, #240]	@ (8002f7c <decode_MCU_FAULT_two+0x244>)
 8002e8a:	f001 ff33 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_LowSOC_Fault_St_B: ");
 8002e8e:	483e      	ldr	r0, [pc, #248]	@ (8002f88 <decode_MCU_FAULT_two+0x250>)
 8002e90:	f001 fdc2 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig3);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4838      	ldr	r0, [pc, #224]	@ (8002f7c <decode_MCU_FAULT_two+0x244>)
 8002e9c:	f001 ff2a 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_LowSOC_Warning_St_B: ");
 8002ea0:	483a      	ldr	r0, [pc, #232]	@ (8002f8c <decode_MCU_FAULT_two+0x254>)
 8002ea2:	f001 fdb9 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig4);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4833      	ldr	r0, [pc, #204]	@ (8002f7c <decode_MCU_FAULT_two+0x244>)
 8002eae:	f001 ff21 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_AuxBatteryUV_Fault_St_B: ");
 8002eb2:	4837      	ldr	r0, [pc, #220]	@ (8002f90 <decode_MCU_FAULT_two+0x258>)
 8002eb4:	f001 fdb0 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig5);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	482f      	ldr	r0, [pc, #188]	@ (8002f7c <decode_MCU_FAULT_two+0x244>)
 8002ec0:	f001 ff18 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_AuxVoltageUV_Warning_St_B: ");
 8002ec4:	4833      	ldr	r0, [pc, #204]	@ (8002f94 <decode_MCU_FAULT_two+0x25c>)
 8002ec6:	f001 fda7 	bl	8004a18 <uart_print_str>
	uart_printf("%d \n ",out->MCU_FAULT_two_sig6);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4831      	ldr	r0, [pc, #196]	@ (8002f98 <decode_MCU_FAULT_two+0x260>)
 8002ed2:	f001 ff0f 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_OverSpeed_Fault_St_B: ");
 8002ed6:	4831      	ldr	r0, [pc, #196]	@ (8002f9c <decode_MCU_FAULT_two+0x264>)
 8002ed8:	f001 fd9e 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig7);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4826      	ldr	r0, [pc, #152]	@ (8002f7c <decode_MCU_FAULT_two+0x244>)
 8002ee4:	f001 ff06 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_OverSpeed_Warning_St_B: ");
 8002ee8:	482d      	ldr	r0, [pc, #180]	@ (8002fa0 <decode_MCU_FAULT_two+0x268>)
 8002eea:	f001 fd95 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig8);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4821      	ldr	r0, [pc, #132]	@ (8002f7c <decode_MCU_FAULT_two+0x244>)
 8002ef6:	f001 fefd 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_Brake_STB_St_B");
 8002efa:	482a      	ldr	r0, [pc, #168]	@ (8002fa4 <decode_MCU_FAULT_two+0x26c>)
 8002efc:	f001 fd8c 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig9);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	4619      	mov	r1, r3
 8002f06:	481d      	ldr	r0, [pc, #116]	@ (8002f7c <decode_MCU_FAULT_two+0x244>)
 8002f08:	f001 fef4 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_Brake_STG_St_B: ");
 8002f0c:	4826      	ldr	r0, [pc, #152]	@ (8002fa8 <decode_MCU_FAULT_two+0x270>)
 8002f0e:	f001 fd83 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig10);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f16:	4619      	mov	r1, r3
 8002f18:	4818      	ldr	r0, [pc, #96]	@ (8002f7c <decode_MCU_FAULT_two+0x244>)
 8002f1a:	f001 feeb 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_Throttle2_STB_St_B: ");
 8002f1e:	4823      	ldr	r0, [pc, #140]	@ (8002fac <decode_MCU_FAULT_two+0x274>)
 8002f20:	f001 fd7a 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig11);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4814      	ldr	r0, [pc, #80]	@ (8002f7c <decode_MCU_FAULT_two+0x244>)
 8002f2c:	f001 fee2 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_Throttle2_STG_St_B: ");
 8002f30:	481f      	ldr	r0, [pc, #124]	@ (8002fb0 <decode_MCU_FAULT_two+0x278>)
 8002f32:	f001 fd71 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig12);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	480f      	ldr	r0, [pc, #60]	@ (8002f7c <decode_MCU_FAULT_two+0x244>)
 8002f3e:	f001 fed9 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_Throttle1_STB_St_B: ");
 8002f42:	481c      	ldr	r0, [pc, #112]	@ (8002fb4 <decode_MCU_FAULT_two+0x27c>)
 8002f44:	f001 fd68 	bl	8004a18 <uart_print_str>
	uart_printf("%d \n ",out->MCU_FAULT_two_sig13);
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4812      	ldr	r0, [pc, #72]	@ (8002f98 <decode_MCU_FAULT_two+0x260>)
 8002f50:	f001 fed0 	bl	8004cf4 <uart_printf>
	uart_print_str("\n VCU_Throttle1_STG_St_B: ");
 8002f54:	4818      	ldr	r0, [pc, #96]	@ (8002fb8 <decode_MCU_FAULT_two+0x280>)
 8002f56:	f001 fd5f 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig14);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4806      	ldr	r0, [pc, #24]	@ (8002f7c <decode_MCU_FAULT_two+0x244>)
 8002f62:	f001 fec7 	bl	8004cf4 <uart_printf>
	uart_print_str("\n============================================\n");
 8002f66:	4815      	ldr	r0, [pc, #84]	@ (8002fbc <decode_MCU_FAULT_two+0x284>)
 8002f68:	f001 fd56 	bl	8004a18 <uart_print_str>
 8002f6c:	e000      	b.n	8002f70 <decode_MCU_FAULT_two+0x238>
if (!out) return;
 8002f6e:	bf00      	nop
}
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	0800a4ec 	.word	0x0800a4ec
 8002f7c:	0800a110 	.word	0x0800a110
 8002f80:	0800a504 	.word	0x0800a504
 8002f84:	0800a524 	.word	0x0800a524
 8002f88:	0800a540 	.word	0x0800a540
 8002f8c:	0800a55c 	.word	0x0800a55c
 8002f90:	0800a578 	.word	0x0800a578
 8002f94:	0800a598 	.word	0x0800a598
 8002f98:	0800a1b4 	.word	0x0800a1b4
 8002f9c:	0800a5bc 	.word	0x0800a5bc
 8002fa0:	0800a5dc 	.word	0x0800a5dc
 8002fa4:	0800a5fc 	.word	0x0800a5fc
 8002fa8:	0800a614 	.word	0x0800a614
 8002fac:	0800a62c 	.word	0x0800a62c
 8002fb0:	0800a648 	.word	0x0800a648
 8002fb4:	0800a664 	.word	0x0800a664
 8002fb8:	0800a680 	.word	0x0800a680
 8002fbc:	0800a0cc 	.word	0x0800a0cc

08002fc0 <decode_HearthBeat>:
void decode_HearthBeat(const uint8_t *data, HearthBeat_t *out) {
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
if (!out) return;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 80c1 	beq.w	8003154 <decode_HearthBeat+0x194>
out->HeartBeat_Stat0 = (double)extract_little_endian_u64(data, 0, 1);
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fa81 	bl	80024de <extract_little_endian_u64>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f7fd fa42 	bl	800046c <__aeabi_ul2d>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	6839      	ldr	r1, [r7, #0]
 8002fee:	e9c1 2300 	strd	r2, r3, [r1]
out->HeartBeat_Stat1 = (double)extract_little_endian_u64(data, 1, 1);
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff fa71 	bl	80024de <extract_little_endian_u64>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	460b      	mov	r3, r1
 8003000:	4610      	mov	r0, r2
 8003002:	4619      	mov	r1, r3
 8003004:	f7fd fa32 	bl	800046c <__aeabi_ul2d>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	6839      	ldr	r1, [r7, #0]
 800300e:	e9c1 2302 	strd	r2, r3, [r1, #8]
out->HeartBeat_Stat2 = (double)extract_little_endian_u64(data, 2, 1);
 8003012:	2201      	movs	r2, #1
 8003014:	2102      	movs	r1, #2
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff fa61 	bl	80024de <extract_little_endian_u64>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	f7fd fa22 	bl	800046c <__aeabi_ul2d>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	6839      	ldr	r1, [r7, #0]
 800302e:	e9c1 2304 	strd	r2, r3, [r1, #16]
out->HeartBeat_Stat3 = (double)extract_little_endian_u64(data, 3, 1);
 8003032:	2201      	movs	r2, #1
 8003034:	2103      	movs	r1, #3
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff fa51 	bl	80024de <extract_little_endian_u64>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f7fd fa12 	bl	800046c <__aeabi_ul2d>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	6839      	ldr	r1, [r7, #0]
 800304e:	e9c1 2306 	strd	r2, r3, [r1, #24]
out->HeartBeat_Stat4 = (double)extract_little_endian_u64(data, 4, 1);
 8003052:	2201      	movs	r2, #1
 8003054:	2104      	movs	r1, #4
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff fa41 	bl	80024de <extract_little_endian_u64>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	f7fd fa02 	bl	800046c <__aeabi_ul2d>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	6839      	ldr	r1, [r7, #0]
 800306e:	e9c1 2308 	strd	r2, r3, [r1, #32]
out->HeartBeat_Stat5 = (double)extract_little_endian_u64(data, 5, 1);
 8003072:	2201      	movs	r2, #1
 8003074:	2105      	movs	r1, #5
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fa31 	bl	80024de <extract_little_endian_u64>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4610      	mov	r0, r2
 8003082:	4619      	mov	r1, r3
 8003084:	f7fd f9f2 	bl	800046c <__aeabi_ul2d>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	6839      	ldr	r1, [r7, #0]
 800308e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
out->HeartBeat_Stat6 = (double)extract_little_endian_u64(data, 6, 1);
 8003092:	2201      	movs	r2, #1
 8003094:	2106      	movs	r1, #6
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7ff fa21 	bl	80024de <extract_little_endian_u64>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f7fd f9e2 	bl	800046c <__aeabi_ul2d>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	6839      	ldr	r1, [r7, #0]
 80030ae:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
out->HeartBeat_Stat7 = (double)extract_little_endian_u64(data, 7, 1);
 80030b2:	2201      	movs	r2, #1
 80030b4:	2107      	movs	r1, #7
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff fa11 	bl	80024de <extract_little_endian_u64>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4610      	mov	r0, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	f7fd f9d2 	bl	800046c <__aeabi_ul2d>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	6839      	ldr	r1, [r7, #0]
 80030ce:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
out->HeartBeat_Stat8 = (double)extract_little_endian_u64(data, 8, 1);
 80030d2:	2201      	movs	r2, #1
 80030d4:	2108      	movs	r1, #8
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff fa01 	bl	80024de <extract_little_endian_u64>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4610      	mov	r0, r2
 80030e2:	4619      	mov	r1, r3
 80030e4:	f7fd f9c2 	bl	800046c <__aeabi_ul2d>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	6839      	ldr	r1, [r7, #0]
 80030ee:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
out->HeartBeat_Stat9 = (double)extract_little_endian_u64(data, 9, 1);
 80030f2:	2201      	movs	r2, #1
 80030f4:	2109      	movs	r1, #9
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff f9f1 	bl	80024de <extract_little_endian_u64>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	f7fd f9b2 	bl	800046c <__aeabi_ul2d>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	6839      	ldr	r1, [r7, #0]
 800310e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
out->HeartBeat_Stat10 = (double)extract_little_endian_u64(data, 10, 1);
 8003112:	2201      	movs	r2, #1
 8003114:	210a      	movs	r1, #10
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff f9e1 	bl	80024de <extract_little_endian_u64>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4610      	mov	r0, r2
 8003122:	4619      	mov	r1, r3
 8003124:	f7fd f9a2 	bl	800046c <__aeabi_ul2d>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	6839      	ldr	r1, [r7, #0]
 800312e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
out->HeartBeat_Stat11 = (double)extract_little_endian_u64(data, 11, 1);
 8003132:	2201      	movs	r2, #1
 8003134:	210b      	movs	r1, #11
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff f9d1 	bl	80024de <extract_little_endian_u64>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	f7fd f992 	bl	800046c <__aeabi_ul2d>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	6839      	ldr	r1, [r7, #0]
 800314e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8003152:	e000      	b.n	8003156 <decode_HearthBeat+0x196>
if (!out) return;
 8003154:	bf00      	nop
}
 8003156:	3708      	adds	r7, #8
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	0000      	movs	r0, r0
	...

08003160 <decode_MCU_Stat_One>:
//uart_print_str("done \n\r");
//
//}


void decode_MCU_Stat_One(const uint8_t *data, MCU_Stat_One_t *out) {
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
	if (!out) return;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8094 	beq.w	800329a <decode_MCU_Stat_One+0x13a>
	out->MCU_Stat_One_sig0 = (int)extract_little_endian_u64(data, 8, 8)-40;
 8003172:	2208      	movs	r2, #8
 8003174:	2108      	movs	r1, #8
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f7ff f9b1 	bl	80024de <extract_little_endian_u64>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4613      	mov	r3, r2
 8003182:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	601a      	str	r2, [r3, #0]
	out->MCU_Stat_One_sig1 = (int)extract_little_endian_u64(data, 0, 8)-40;
 800318a:	2208      	movs	r2, #8
 800318c:	2100      	movs	r1, #0
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff f9a5 	bl	80024de <extract_little_endian_u64>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4613      	mov	r3, r2
 800319a:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	605a      	str	r2, [r3, #4]
	out->MCU_Stat_One_sig2 = (double)extract_little_endian_u64(data, 16, 16)*0.1;
 80031a2:	2210      	movs	r2, #16
 80031a4:	2110      	movs	r1, #16
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff f999 	bl	80024de <extract_little_endian_u64>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	4610      	mov	r0, r2
 80031b2:	4619      	mov	r1, r3
 80031b4:	f7fd f95a 	bl	800046c <__aeabi_ul2d>
 80031b8:	a33b      	add	r3, pc, #236	@ (adr r3, 80032a8 <decode_MCU_Stat_One+0x148>)
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	f7fd f98b 	bl	80004d8 <__aeabi_dmul>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	6839      	ldr	r1, [r7, #0]
 80031c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	out->MCU_Stat_One_sig3 = (int)extract_little_endian_u64(data, 56, 3);
 80031cc:	2203      	movs	r2, #3
 80031ce:	2138      	movs	r1, #56	@ 0x38
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff f984 	bl	80024de <extract_little_endian_u64>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	611a      	str	r2, [r3, #16]
	out->MCU_Stat_One_sig4 = (int)extract_little_endian_u64(data, 48, 8);
 80031de:	2208      	movs	r2, #8
 80031e0:	2130      	movs	r1, #48	@ 0x30
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff f97b 	bl	80024de <extract_little_endian_u64>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	615a      	str	r2, [r3, #20]
	out->MCU_Stat_One_sig5 = (int)extract_little_endian_u64(data, 40, 8);
 80031f0:	2208      	movs	r2, #8
 80031f2:	2128      	movs	r1, #40	@ 0x28
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff f972 	bl	80024de <extract_little_endian_u64>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	619a      	str	r2, [r3, #24]
	out->MCU_Stat_One_sig6 = (int)extract_little_endian_u64(data, 32, 8);
 8003202:	2208      	movs	r2, #8
 8003204:	2120      	movs	r1, #32
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff f969 	bl	80024de <extract_little_endian_u64>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	61da      	str	r2, [r3, #28]
	uart_print_str("\n MCU_Motor_Temp: ");
 8003214:	4826      	ldr	r0, [pc, #152]	@ (80032b0 <decode_MCU_Stat_One+0x150>)
 8003216:	f001 fbff 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Stat_One_sig0);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4619      	mov	r1, r3
 8003220:	4824      	ldr	r0, [pc, #144]	@ (80032b4 <decode_MCU_Stat_One+0x154>)
 8003222:	f001 fd67 	bl	8004cf4 <uart_printf>
	uart_print_str("\n MCU_PCB_Temp: ");
 8003226:	4824      	ldr	r0, [pc, #144]	@ (80032b8 <decode_MCU_Stat_One+0x158>)
 8003228:	f001 fbf6 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Stat_One_sig1);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4619      	mov	r1, r3
 8003232:	4820      	ldr	r0, [pc, #128]	@ (80032b4 <decode_MCU_Stat_One+0x154>)
 8003234:	f001 fd5e 	bl	8004cf4 <uart_printf>
	uart_print_str("\n MCU_RMS_Current");
 8003238:	4820      	ldr	r0, [pc, #128]	@ (80032bc <decode_MCU_Stat_One+0x15c>)
 800323a:	f001 fbed 	bl	8004a18 <uart_print_str>
	uart_send_double(out->MCU_Stat_One_sig2,3);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8003244:	2203      	movs	r2, #3
 8003246:	f001 fbfd 	bl	8004a44 <uart_send_double>
	uart_print_str("\n MCU_Drive_Mode: ");
 800324a:	481d      	ldr	r0, [pc, #116]	@ (80032c0 <decode_MCU_Stat_One+0x160>)
 800324c:	f001 fbe4 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Stat_One_sig3);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	4619      	mov	r1, r3
 8003256:	4817      	ldr	r0, [pc, #92]	@ (80032b4 <decode_MCU_Stat_One+0x154>)
 8003258:	f001 fd4c 	bl	8004cf4 <uart_printf>
	uart_print_str("\n MCU_Speed_Kmph: ");
 800325c:	4819      	ldr	r0, [pc, #100]	@ (80032c4 <decode_MCU_Stat_One+0x164>)
 800325e:	f001 fbdb 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Stat_One_sig4);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	4619      	mov	r1, r3
 8003268:	4812      	ldr	r0, [pc, #72]	@ (80032b4 <decode_MCU_Stat_One+0x154>)
 800326a:	f001 fd43 	bl	8004cf4 <uart_printf>
	uart_print_str("\n MCU_Brake_perc: ");
 800326e:	4816      	ldr	r0, [pc, #88]	@ (80032c8 <decode_MCU_Stat_One+0x168>)
 8003270:	f001 fbd2 	bl	8004a18 <uart_print_str>
	uart_printf("%d ",out->MCU_Stat_One_sig5);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	4619      	mov	r1, r3
 800327a:	480e      	ldr	r0, [pc, #56]	@ (80032b4 <decode_MCU_Stat_One+0x154>)
 800327c:	f001 fd3a 	bl	8004cf4 <uart_printf>
	uart_print_str("\n MCU_Throttle_perc: ");
 8003280:	4812      	ldr	r0, [pc, #72]	@ (80032cc <decode_MCU_Stat_One+0x16c>)
 8003282:	f001 fbc9 	bl	8004a18 <uart_print_str>
	uart_printf("%d \n ",out->MCU_Stat_One_sig6);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	4619      	mov	r1, r3
 800328c:	4810      	ldr	r0, [pc, #64]	@ (80032d0 <decode_MCU_Stat_One+0x170>)
 800328e:	f001 fd31 	bl	8004cf4 <uart_printf>
	uart_print_str("\n============================================\n");
 8003292:	4810      	ldr	r0, [pc, #64]	@ (80032d4 <decode_MCU_Stat_One+0x174>)
 8003294:	f001 fbc0 	bl	8004a18 <uart_print_str>
 8003298:	e000      	b.n	800329c <decode_MCU_Stat_One+0x13c>
	if (!out) return;
 800329a:	bf00      	nop
}
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	f3af 8000 	nop.w
 80032a8:	9999999a 	.word	0x9999999a
 80032ac:	3fb99999 	.word	0x3fb99999
 80032b0:	0800a69c 	.word	0x0800a69c
 80032b4:	0800a110 	.word	0x0800a110
 80032b8:	0800a6b0 	.word	0x0800a6b0
 80032bc:	0800a6c4 	.word	0x0800a6c4
 80032c0:	0800a6d8 	.word	0x0800a6d8
 80032c4:	0800a6ec 	.word	0x0800a6ec
 80032c8:	0800a700 	.word	0x0800a700
 80032cc:	0800a714 	.word	0x0800a714
 80032d0:	0800a1b4 	.word	0x0800a1b4
 80032d4:	0800a0cc 	.word	0x0800a0cc

080032d8 <decode_MCU_POWER_One>:





void decode_MCU_POWER_One(const uint8_t *data, MCU_POWER_One_t *out) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
//if (!out) return;

out->power_sig0 = (double)extract_motorola_u64(data, 38, 10)*0.1-37.3;
 80032e2:	220a      	movs	r2, #10
 80032e4:	2126      	movs	r1, #38	@ 0x26
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff f88e 	bl	8002408 <extract_motorola_u64>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	f7fd f8ba 	bl	800046c <__aeabi_ul2d>
 80032f8:	a353      	add	r3, pc, #332	@ (adr r3, 8003448 <decode_MCU_POWER_One+0x170>)
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	f7fd f8eb 	bl	80004d8 <__aeabi_dmul>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4610      	mov	r0, r2
 8003308:	4619      	mov	r1, r3
 800330a:	a351      	add	r3, pc, #324	@ (adr r3, 8003450 <decode_MCU_POWER_One+0x178>)
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f7fc ff2a 	bl	8000168 <__aeabi_dsub>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	6839      	ldr	r1, [r7, #0]
 800331a:	e9c1 2300 	strd	r2, r3, [r1]
out->power_sig1 = (double)extract_motorola_u64(data, 7, 10)*0.1;
 800331e:	220a      	movs	r2, #10
 8003320:	2107      	movs	r1, #7
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff f870 	bl	8002408 <extract_motorola_u64>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4610      	mov	r0, r2
 800332e:	4619      	mov	r1, r3
 8003330:	f7fd f89c 	bl	800046c <__aeabi_ul2d>
 8003334:	a344      	add	r3, pc, #272	@ (adr r3, 8003448 <decode_MCU_POWER_One+0x170>)
 8003336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333a:	f7fd f8cd 	bl	80004d8 <__aeabi_dmul>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	6839      	ldr	r1, [r7, #0]
 8003344:	e9c1 2302 	strd	r2, r3, [r1, #8]
out->power_sig2 = (double)extract_motorola_u64(data, 16, 10)*0.1-65;
 8003348:	220a      	movs	r2, #10
 800334a:	2110      	movs	r1, #16
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff f85b 	bl	8002408 <extract_motorola_u64>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4610      	mov	r0, r2
 8003358:	4619      	mov	r1, r3
 800335a:	f7fd f887 	bl	800046c <__aeabi_ul2d>
 800335e:	a33a      	add	r3, pc, #232	@ (adr r3, 8003448 <decode_MCU_POWER_One+0x170>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	f7fd f8b8 	bl	80004d8 <__aeabi_dmul>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4610      	mov	r0, r2
 800336e:	4619      	mov	r1, r3
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	4b3a      	ldr	r3, [pc, #232]	@ (8003460 <decode_MCU_POWER_One+0x188>)
 8003376:	f7fc fef7 	bl	8000168 <__aeabi_dsub>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	6839      	ldr	r1, [r7, #0]
 8003380:	e9c1 2304 	strd	r2, r3, [r1, #16]
out->power_sig3 = (uint64_t)extract_motorola_u64(data, 44, 15)-16384;
 8003384:	220f      	movs	r2, #15
 8003386:	212c      	movs	r1, #44	@ 0x2c
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff f83d 	bl	8002408 <extract_motorola_u64>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4613      	mov	r3, r2
 8003394:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8003398:	461a      	mov	r2, r3
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	619a      	str	r2, [r3, #24]
out->power_sig4 = (double)extract_motorola_u64(data, 13, 13)*0.1-409.6;
 800339e:	220d      	movs	r2, #13
 80033a0:	210d      	movs	r1, #13
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff f830 	bl	8002408 <extract_motorola_u64>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	f7fd f85c 	bl	800046c <__aeabi_ul2d>
 80033b4:	a324      	add	r3, pc, #144	@ (adr r3, 8003448 <decode_MCU_POWER_One+0x170>)
 80033b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ba:	f7fd f88d 	bl	80004d8 <__aeabi_dmul>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4610      	mov	r0, r2
 80033c4:	4619      	mov	r1, r3
 80033c6:	a324      	add	r3, pc, #144	@ (adr r3, 8003458 <decode_MCU_POWER_One+0x180>)
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	f7fc fecc 	bl	8000168 <__aeabi_dsub>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	6839      	ldr	r1, [r7, #0]
 80033d6:	e9c1 2308 	strd	r2, r3, [r1, #32]
uart_print_str("\n torque_requested: ");
 80033da:	4822      	ldr	r0, [pc, #136]	@ (8003464 <decode_MCU_POWER_One+0x18c>)
 80033dc:	f001 fb1c 	bl	8004a18 <uart_print_str>
uart_send_double(out->power_sig0,3);
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033e6:	2203      	movs	r2, #3
 80033e8:	f001 fb2c 	bl	8004a44 <uart_send_double>
uart_print_str("\n DC V0L: ");
 80033ec:	481e      	ldr	r0, [pc, #120]	@ (8003468 <decode_MCU_POWER_One+0x190>)
 80033ee:	f001 fb13 	bl	8004a18 <uart_print_str>
uart_send_double(out->power_sig1,3);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80033f8:	2203      	movs	r2, #3
 80033fa:	f001 fb23 	bl	8004a44 <uart_send_double>
uart_print_str("\n EST_TORQ :");
 80033fe:	481b      	ldr	r0, [pc, #108]	@ (800346c <decode_MCU_POWER_One+0x194>)
 8003400:	f001 fb0a 	bl	8004a18 <uart_print_str>
uart_send_double(out->power_sig2,3);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800340a:	2203      	movs	r2, #3
 800340c:	f001 fb1a 	bl	8004a44 <uart_send_double>
uart_print_str("\n RPM: ");
 8003410:	4817      	ldr	r0, [pc, #92]	@ (8003470 <decode_MCU_POWER_One+0x198>)
 8003412:	f001 fb01 	bl	8004a18 <uart_print_str>
uart_printf("%ld ",out->power_sig3);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	4619      	mov	r1, r3
 800341c:	4815      	ldr	r0, [pc, #84]	@ (8003474 <decode_MCU_POWER_One+0x19c>)
 800341e:	f001 fc69 	bl	8004cf4 <uart_printf>
uart_print_str("\n DC_CUR: ");
 8003422:	4815      	ldr	r0, [pc, #84]	@ (8003478 <decode_MCU_POWER_One+0x1a0>)
 8003424:	f001 faf8 	bl	8004a18 <uart_print_str>
uart_send_double(out->power_sig4,3);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800342e:	2203      	movs	r2, #3
 8003430:	f001 fb08 	bl	8004a44 <uart_send_double>
uart_print_str("\n");
 8003434:	4811      	ldr	r0, [pc, #68]	@ (800347c <decode_MCU_POWER_One+0x1a4>)
 8003436:	f001 faef 	bl	8004a18 <uart_print_str>
uart_print_str("\n============================================\n");
 800343a:	4811      	ldr	r0, [pc, #68]	@ (8003480 <decode_MCU_POWER_One+0x1a8>)
 800343c:	f001 faec 	bl	8004a18 <uart_print_str>

}
 8003440:	bf00      	nop
 8003442:	3708      	adds	r7, #8
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	9999999a 	.word	0x9999999a
 800344c:	3fb99999 	.word	0x3fb99999
 8003450:	66666666 	.word	0x66666666
 8003454:	4042a666 	.word	0x4042a666
 8003458:	9999999a 	.word	0x9999999a
 800345c:	40799999 	.word	0x40799999
 8003460:	40504000 	.word	0x40504000
 8003464:	0800a72c 	.word	0x0800a72c
 8003468:	0800a744 	.word	0x0800a744
 800346c:	0800a750 	.word	0x0800a750
 8003470:	0800a760 	.word	0x0800a760
 8003474:	0800a768 	.word	0x0800a768
 8003478:	0800a770 	.word	0x0800a770
 800347c:	0800a77c 	.word	0x0800a77c
 8003480:	0800a0cc 	.word	0x0800a0cc

08003484 <Motor_control_pins_init>:
    GPIOB->CRL&=~((0xF<<0)|(0XF<<4)|(0XF<<12)|(0xf<<20));
    GPIOB->CRL|=((0x3<<0)|(0X3<<4)|(0X3<<12)|(0x3<<20));
    GPIOB->ODR&=~((1<<PB0_REVERSE)|(1<<PB1_NEUTRAL)|(1<<PB3_DRIVE)|(1<<PB5_SPORT));
    GPIOB->ODR|=((1<<PB1_NEUTRAL));
}
void Motor_control_pins_init(){
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8003488:	4b12      	ldr	r3, [pc, #72]	@ (80034d4 <Motor_control_pins_init+0x50>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	4a11      	ldr	r2, [pc, #68]	@ (80034d4 <Motor_control_pins_init+0x50>)
 800348e:	f043 0308 	orr.w	r3, r3, #8
 8003492:	6193      	str	r3, [r2, #24]
    GPIOB->CRL&=~((0x4<<0)|(0X4<<4)|(0X4<<12));
 8003494:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <Motor_control_pins_init+0x54>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0f      	ldr	r2, [pc, #60]	@ (80034d8 <Motor_control_pins_init+0x54>)
 800349a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800349e:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80034a2:	6013      	str	r3, [r2, #0]
    GPIOB->CRL|=((0x3<<0)|(0X3<<4)|(0X3<<12));
 80034a4:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <Motor_control_pins_init+0x54>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0b      	ldr	r2, [pc, #44]	@ (80034d8 <Motor_control_pins_init+0x54>)
 80034aa:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80034ae:	f043 0333 	orr.w	r3, r3, #51	@ 0x33
 80034b2:	6013      	str	r3, [r2, #0]
    GPIOB->ODR|=((1<<PB0_REVERSE)|(1<<PB1_NEUTRAL)|(1<<PB3_DRIVE));
 80034b4:	4b08      	ldr	r3, [pc, #32]	@ (80034d8 <Motor_control_pins_init+0x54>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a07      	ldr	r2, [pc, #28]	@ (80034d8 <Motor_control_pins_init+0x54>)
 80034ba:	f043 030b 	orr.w	r3, r3, #11
 80034be:	60d3      	str	r3, [r2, #12]
    GPIOB->ODR&=~((1<<PB1_NEUTRAL));
 80034c0:	4b05      	ldr	r3, [pc, #20]	@ (80034d8 <Motor_control_pins_init+0x54>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	4a04      	ldr	r2, [pc, #16]	@ (80034d8 <Motor_control_pins_init+0x54>)
 80034c6:	f023 0302 	bic.w	r3, r3, #2
 80034ca:	60d3      	str	r3, [r2, #12]
}
 80034cc:	bf00      	nop
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	40021000 	.word	0x40021000
 80034d8:	40010c00 	.word	0x40010c00

080034dc <set_baudrate>:
    uint32_t tseg2;
    uint32_t sjw;
    float sample_point;  // in percentage
} CAN_BitTiming;

STATUS set_baudrate(uint32_t Baud_Rate){
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	f6ad 0d04 	subw	sp, sp, #2052	@ 0x804
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80034e8:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 80034ec:	6018      	str	r0, [r3, #0]
    CAN_BitTiming table[100]; // store results
    int count = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
    uint32_t clk = get_APB1_freq();      // 36 MHz
 80034f4:	f001 f86e 	bl	80045d4 <get_APB1_freq>
 80034f8:	f8c7 07e8 	str.w	r0, [r7, #2024]	@ 0x7e8
    uint32_t baud = Baud_Rate;      // 500 kbps
 80034fc:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8003500:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f8c7 37e4 	str.w	r3, [r7, #2020]	@ 0x7e4
    if (clk == 0 || Baud_Rate == 0) {
 800350a:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	@ 0x7e8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d006      	beq.n	8003520 <set_baudrate+0x44>
 8003512:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8003516:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <set_baudrate+0x48>
        return RY_NOT_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e0f7      	b.n	8003714 <set_baudrate+0x238>
    }
    uint32_t target = clk / baud; // should be 16
 8003524:	f8d7 27e8 	ldr.w	r2, [r7, #2024]	@ 0x7e8
 8003528:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	@ 0x7e4
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	f8c7 37e0 	str.w	r3, [r7, #2016]	@ 0x7e0
    for (uint32_t prescaler = 1; prescaler <= 1024; prescaler++) {
 8003534:	2301      	movs	r3, #1
 8003536:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 800353a:	e0c0      	b.n	80036be <set_baudrate+0x1e2>
        for (uint32_t tseg1 = 1; tseg1 <= 16; tseg1++) {
 800353c:	2301      	movs	r3, #1
 800353e:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 8003542:	e0b2      	b.n	80036aa <set_baudrate+0x1ce>
            for (uint32_t tseg2 = 1; tseg2 <= 8; tseg2++) {
 8003544:	2301      	movs	r3, #1
 8003546:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 800354a:	e0a4      	b.n	8003696 <set_baudrate+0x1ba>
            	uint32_t tq = 1 + tseg1 + tseg2;
 800354c:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 8003550:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 8003554:	4413      	add	r3, r2
 8003556:	3301      	adds	r3, #1
 8003558:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
                if (prescaler * tq == target) {
 800355c:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 8003560:	f8d7 27dc 	ldr.w	r2, [r7, #2012]	@ 0x7dc
 8003564:	fb02 f303 	mul.w	r3, r2, r3
 8003568:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	@ 0x7e0
 800356c:	429a      	cmp	r2, r3
 800356e:	f040 808d 	bne.w	800368c <set_baudrate+0x1b0>
                    float sp = ((1.0f + tseg1) / tq) * 100.0f;
 8003572:	f8d7 07f4 	ldr.w	r0, [r7, #2036]	@ 0x7f4
 8003576:	f7fd fb3d 	bl	8000bf4 <__aeabi_ui2f>
 800357a:	4603      	mov	r3, r0
 800357c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8003580:	4618      	mov	r0, r3
 8003582:	f7fd fa87 	bl	8000a94 <__addsf3>
 8003586:	4603      	mov	r3, r0
 8003588:	461c      	mov	r4, r3
 800358a:	f8d7 07dc 	ldr.w	r0, [r7, #2012]	@ 0x7dc
 800358e:	f7fd fb31 	bl	8000bf4 <__aeabi_ui2f>
 8003592:	4603      	mov	r3, r0
 8003594:	4619      	mov	r1, r3
 8003596:	4620      	mov	r0, r4
 8003598:	f7fd fc38 	bl	8000e0c <__aeabi_fdiv>
 800359c:	4603      	mov	r3, r0
 800359e:	4960      	ldr	r1, [pc, #384]	@ (8003720 <set_baudrate+0x244>)
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fd fb7f 	bl	8000ca4 <__aeabi_fmul>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f8c7 37d8 	str.w	r3, [r7, #2008]	@ 0x7d8
                    if (sp >= 70.0f && sp <= 80.0f) {
 80035ac:	495d      	ldr	r1, [pc, #372]	@ (8003724 <set_baudrate+0x248>)
 80035ae:	f8d7 07d8 	ldr.w	r0, [r7, #2008]	@ 0x7d8
 80035b2:	f7fd fd29 	bl	8001008 <__aeabi_fcmpge>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d067      	beq.n	800368c <set_baudrate+0x1b0>
 80035bc:	495a      	ldr	r1, [pc, #360]	@ (8003728 <set_baudrate+0x24c>)
 80035be:	f8d7 07d8 	ldr.w	r0, [r7, #2008]	@ 0x7d8
 80035c2:	f7fd fd17 	bl	8000ff4 <__aeabi_fcmple>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d05f      	beq.n	800368c <set_baudrate+0x1b0>
                        for (int sjw = 1; sjw <= tseg2; sjw++) {
 80035cc:	2301      	movs	r3, #1
 80035ce:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 80035d2:	e055      	b.n	8003680 <set_baudrate+0x1a4>
                            table[count].prescaler = prescaler;
 80035d4:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 80035d8:	b298      	uxth	r0, r3
 80035da:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80035de:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 80035e2:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	4602      	mov	r2, r0
 80035f2:	801a      	strh	r2, [r3, #0]
                            table[count].tseg1 = tseg1;
 80035f4:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80035f8:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 80035fc:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	3304      	adds	r3, #4
 800360c:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 8003610:	601a      	str	r2, [r3, #0]
                            table[count].tseg2 = tseg2;
 8003612:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8003616:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 800361a:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	3308      	adds	r3, #8
 800362a:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	@ 0x7f0
 800362e:	601a      	str	r2, [r3, #0]
                            table[count].sjw = sjw;
 8003630:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	@ 0x7ec
 8003634:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8003638:	f5a3 60ff 	sub.w	r0, r3, #2040	@ 0x7f8
 800363c:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4403      	add	r3, r0
 800364a:	330c      	adds	r3, #12
 800364c:	6019      	str	r1, [r3, #0]
                            table[count].sample_point = sp;
 800364e:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8003652:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 8003656:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 800365a:	4613      	mov	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	3310      	adds	r3, #16
 8003666:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	@ 0x7d8
 800366a:	601a      	str	r2, [r3, #0]
                            count++;
 800366c:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	@ 0x7fc
 8003670:	3301      	adds	r3, #1
 8003672:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
                        for (int sjw = 1; sjw <= tseg2; sjw++) {
 8003676:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 800367a:	3301      	adds	r3, #1
 800367c:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 8003680:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8003684:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	@ 0x7f0
 8003688:	429a      	cmp	r2, r3
 800368a:	d2a3      	bcs.n	80035d4 <set_baudrate+0xf8>
            for (uint32_t tseg2 = 1; tseg2 <= 8; tseg2++) {
 800368c:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 8003690:	3301      	adds	r3, #1
 8003692:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 8003696:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 800369a:	2b08      	cmp	r3, #8
 800369c:	f67f af56 	bls.w	800354c <set_baudrate+0x70>
        for (uint32_t tseg1 = 1; tseg1 <= 16; tseg1++) {
 80036a0:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 80036a4:	3301      	adds	r3, #1
 80036a6:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 80036aa:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 80036ae:	2b10      	cmp	r3, #16
 80036b0:	f67f af48 	bls.w	8003544 <set_baudrate+0x68>
    for (uint32_t prescaler = 1; prescaler <= 1024; prescaler++) {
 80036b4:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 80036b8:	3301      	adds	r3, #1
 80036ba:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 80036be:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 80036c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c6:	f67f af39 	bls.w	800353c <set_baudrate+0x60>
                    }
                }
            }
        }
    }
    CAN1->BTR|=((table[0].prescaler-1)<<0)|((table[0].sjw-1)<<24)|((table[0].tseg1-1)<<16)|((table[0].tseg2-1)<<20);
 80036ca:	4b18      	ldr	r3, [pc, #96]	@ (800372c <set_baudrate+0x250>)
 80036cc:	69da      	ldr	r2, [r3, #28]
 80036ce:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80036d2:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	3b01      	subs	r3, #1
 80036da:	4619      	mov	r1, r3
 80036dc:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80036e0:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	061b      	lsls	r3, r3, #24
 80036ea:	4319      	orrs	r1, r3
 80036ec:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80036f0:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	041b      	lsls	r3, r3, #16
 80036fa:	4319      	orrs	r1, r3
 80036fc:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8003700:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	3b01      	subs	r3, #1
 8003708:	051b      	lsls	r3, r3, #20
 800370a:	430b      	orrs	r3, r1
 800370c:	4907      	ldr	r1, [pc, #28]	@ (800372c <set_baudrate+0x250>)
 800370e:	4313      	orrs	r3, r2
 8003710:	61cb      	str	r3, [r1, #28]
    return RY_OK;//0x001e0003
 8003712:	2301      	movs	r3, #1
}
 8003714:	4618      	mov	r0, r3
 8003716:	f607 0704 	addw	r7, r7, #2052	@ 0x804
 800371a:	46bd      	mov	sp, r7
 800371c:	bd90      	pop	{r4, r7, pc}
 800371e:	bf00      	nop
 8003720:	42c80000 	.word	0x42c80000
 8003724:	428c0000 	.word	0x428c0000
 8003728:	42a00000 	.word	0x42a00000
 800372c:	40006400 	.word	0x40006400

08003730 <Gpio_init>:
void Gpio_init(){
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
    RCC->APB1ENR|=RCC_APB1ENR_CAN1EN;
 8003734:	4b19      	ldr	r3, [pc, #100]	@ (800379c <Gpio_init+0x6c>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	4a18      	ldr	r2, [pc, #96]	@ (800379c <Gpio_init+0x6c>)
 800373a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800373e:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR|=RCC_APB2ENR_AFIOEN;
 8003740:	4b16      	ldr	r3, [pc, #88]	@ (800379c <Gpio_init+0x6c>)
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	4a15      	ldr	r2, [pc, #84]	@ (800379c <Gpio_init+0x6c>)
 8003746:	f043 0301 	orr.w	r3, r3, #1
 800374a:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR|=RCC_APB2ENR_IOPBEN;
 800374c:	4b13      	ldr	r3, [pc, #76]	@ (800379c <Gpio_init+0x6c>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	4a12      	ldr	r2, [pc, #72]	@ (800379c <Gpio_init+0x6c>)
 8003752:	f043 0308 	orr.w	r3, r3, #8
 8003756:	6193      	str	r3, [r2, #24]
    GPIOB->CRH &= ~(0xF << 4); // Clear bits for PB9
 8003758:	4b11      	ldr	r3, [pc, #68]	@ (80037a0 <Gpio_init+0x70>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	4a10      	ldr	r2, [pc, #64]	@ (80037a0 <Gpio_init+0x70>)
 800375e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003762:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~(0xF << 0); // Clear bits for PB8
 8003764:	4b0e      	ldr	r3, [pc, #56]	@ (80037a0 <Gpio_init+0x70>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4a0d      	ldr	r2, [pc, #52]	@ (80037a0 <Gpio_init+0x70>)
 800376a:	f023 030f 	bic.w	r3, r3, #15
 800376e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=(1<<2);
 8003770:	4b0b      	ldr	r3, [pc, #44]	@ (80037a0 <Gpio_init+0x70>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a0a      	ldr	r2, [pc, #40]	@ (80037a0 <Gpio_init+0x70>)
 8003776:	f043 0304 	orr.w	r3, r3, #4
 800377a:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=(0Xb0);
 800377c:	4b08      	ldr	r3, [pc, #32]	@ (80037a0 <Gpio_init+0x70>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4a07      	ldr	r2, [pc, #28]	@ (80037a0 <Gpio_init+0x70>)
 8003782:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003786:	6053      	str	r3, [r2, #4]
    AFIO->MAPR|=AFIO_MAPR_CAN_REMAP_REMAP2;
 8003788:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <Gpio_init+0x74>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4a05      	ldr	r2, [pc, #20]	@ (80037a4 <Gpio_init+0x74>)
 800378e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003792:	6053      	str	r3, [r2, #4]
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr
 800379c:	40021000 	.word	0x40021000
 80037a0:	40010c00 	.word	0x40010c00
 80037a4:	40010000 	.word	0x40010000

080037a8 <can_init>:
STATUS can_init(uint32_t Baud_Rate){
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
	Gpio_init();
 80037b0:	f7ff ffbe 	bl	8003730 <Gpio_init>
	CAN1->MCR &= ~CAN_MCR_AWUM_Msk;
 80037b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003870 <can_init+0xc8>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003870 <can_init+0xc8>)
 80037ba:	f023 0320 	bic.w	r3, r3, #32
 80037be:	6013      	str	r3, [r2, #0]
	CAN1->MCR &= ~CAN_MCR_SLEEP_Msk;
 80037c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003870 <can_init+0xc8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003870 <can_init+0xc8>)
 80037c6:	f023 0302 	bic.w	r3, r3, #2
 80037ca:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_MCR_INRQ_Msk;
 80037cc:	4b28      	ldr	r3, [pc, #160]	@ (8003870 <can_init+0xc8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a27      	ldr	r2, [pc, #156]	@ (8003870 <can_init+0xc8>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6013      	str	r3, [r2, #0]
	while (!(CAN1->MSR & CAN_MSR_INAK_Msk));
 80037d8:	bf00      	nop
 80037da:	4b25      	ldr	r3, [pc, #148]	@ (8003870 <can_init+0xc8>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f9      	beq.n	80037da <can_init+0x32>
	if(set_baudrate(Baud_Rate)==RY_NOT_OK)
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff fe78 	bl	80034dc <set_baudrate>
	{
		RY_NOT_OK;
	}
	CAN1->MCR &= ~(1<<0);  // CLEAR INQR BIT TO LEAVE INTILAIZE MODE=
 80037ec:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <can_init+0xc8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003870 <can_init+0xc8>)
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	6013      	str	r3, [r2, #0]
	while (CAN1->MSR & CAN_MSR_INAK_Msk);  // Wait for Normal Mode
 80037f8:	bf00      	nop
 80037fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003870 <can_init+0xc8>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f9      	bne.n	80037fa <can_init+0x52>
	CAN1->FMR |= CAN_FMR_FINIT;       // Enter filter init mode
 8003806:	4b1a      	ldr	r3, [pc, #104]	@ (8003870 <can_init+0xc8>)
 8003808:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800380c:	4a18      	ldr	r2, [pc, #96]	@ (8003870 <can_init+0xc8>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

	CAN1->FA1R = 0;                   // Disable all filters
 8003816:	4b16      	ldr	r3, [pc, #88]	@ (8003870 <can_init+0xc8>)
 8003818:	2200      	movs	r2, #0
 800381a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	CAN1->FM1R = 0;                   // Identifier Mask mode
 800381e:	4b14      	ldr	r3, [pc, #80]	@ (8003870 <can_init+0xc8>)
 8003820:	2200      	movs	r2, #0
 8003822:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	CAN1->FS1R = 1;                   // 32-bit scale
 8003826:	4b12      	ldr	r3, [pc, #72]	@ (8003870 <can_init+0xc8>)
 8003828:	2201      	movs	r2, #1
 800382a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	CAN1->FFA1R = 0;                  // Assign to FIFO0
 800382e:	4b10      	ldr	r3, [pc, #64]	@ (8003870 <can_init+0xc8>)
 8003830:	2200      	movs	r2, #0
 8003832:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	CAN1->sFilterRegister[0].FR1 = 0x00000000;  // ID = 0
 8003836:	4b0e      	ldr	r3, [pc, #56]	@ (8003870 <can_init+0xc8>)
 8003838:	2200      	movs	r2, #0
 800383a:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
	CAN1->sFilterRegister[0].FR2 = 0x00000000;  // Mask = 0
 800383e:	4b0c      	ldr	r3, [pc, #48]	@ (8003870 <can_init+0xc8>)
 8003840:	2200      	movs	r2, #0
 8003842:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244

	CAN1->FA1R |= 1;                  // Enable filter 0
 8003846:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <can_init+0xc8>)
 8003848:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800384c:	4a08      	ldr	r2, [pc, #32]	@ (8003870 <can_init+0xc8>)
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

	CAN1->FMR &= ~CAN_FMR_FINIT;
 8003856:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <can_init+0xc8>)
 8003858:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800385c:	4a04      	ldr	r2, [pc, #16]	@ (8003870 <can_init+0xc8>)
 800385e:	f023 0301 	bic.w	r3, r3, #1
 8003862:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	return RY_OK;
 8003866:	2301      	movs	r3, #1
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40006400 	.word	0x40006400

08003874 <send_can_remote_frame>:
			 CAN1->sTxMailBox[mail_box].TDHR|=(frame.data[i]<<((i-4)*8));
		 }
	 }
	CAN1->sTxMailBox[mail_box].TIR |= (1<<0);
	}
void send_can_remote_frame(can_frame_t frame){
 8003874:	b490      	push	{r4, r7}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	463c      	mov	r4, r7
 800387c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t tme_mask = CAN1->TSR & (CAN_TSR_TME0 | CAN_TSR_TME1 | CAN_TSR_TME2);
 8003880:	4b49      	ldr	r3, [pc, #292]	@ (80039a8 <send_can_remote_frame+0x134>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 53e0 	and.w	r3, r3, #469762048	@ 0x1c000000
 8003888:	613b      	str	r3, [r7, #16]
		int mail_box = 0;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
	    if (tme_mask & CAN_TSR_TME0) {
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <send_can_remote_frame+0x2a>
	        mail_box = 0;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e00e      	b.n	80038bc <send_can_remote_frame+0x48>
	    } else if (tme_mask & CAN_TSR_TME1) {
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <send_can_remote_frame+0x3a>
	        mail_box = 1;
 80038a8:	2301      	movs	r3, #1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e006      	b.n	80038bc <send_can_remote_frame+0x48>
	    } else if (tme_mask & CAN_TSR_TME2) {
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <send_can_remote_frame+0x48>
	        mail_box = 2;
 80038b8:	2302      	movs	r3, #2
 80038ba:	617b      	str	r3, [r7, #20]
	    }
		CAN1->sTxMailBox[mail_box].TIR = 0x00000000;
 80038bc:	4a3a      	ldr	r2, [pc, #232]	@ (80039a8 <send_can_remote_frame+0x134>)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	3318      	adds	r3, #24
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	4413      	add	r3, r2
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
		if(frame.ide==0){
 80038ca:	793b      	ldrb	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10f      	bne.n	80038f0 <send_can_remote_frame+0x7c>
			CAN1->sTxMailBox[mail_box].TIR |= (frame.id<<21);
 80038d0:	4a35      	ldr	r2, [pc, #212]	@ (80039a8 <send_can_remote_frame+0x134>)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	3318      	adds	r3, #24
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	4413      	add	r3, r2
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	055b      	lsls	r3, r3, #21
 80038e0:	4931      	ldr	r1, [pc, #196]	@ (80039a8 <send_can_remote_frame+0x134>)
 80038e2:	431a      	orrs	r2, r3
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3318      	adds	r3, #24
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	440b      	add	r3, r1
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	e010      	b.n	8003912 <send_can_remote_frame+0x9e>

		}else{
			CAN1->sTxMailBox[mail_box].TIR |= (frame.id<<3)|(1<<2);
 80038f0:	4a2d      	ldr	r2, [pc, #180]	@ (80039a8 <send_can_remote_frame+0x134>)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	3318      	adds	r3, #24
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	4413      	add	r3, r2
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4313      	orrs	r3, r2
 8003902:	4929      	ldr	r1, [pc, #164]	@ (80039a8 <send_can_remote_frame+0x134>)
 8003904:	f043 0204 	orr.w	r2, r3, #4
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	3318      	adds	r3, #24
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	440b      	add	r3, r1
 8003910:	601a      	str	r2, [r3, #0]

		}
	    CAN1->sTxMailBox[mail_box].TDTR = (frame.dlc & 0x0F);
 8003912:	79bb      	ldrb	r3, [r7, #6]
 8003914:	4924      	ldr	r1, [pc, #144]	@ (80039a8 <send_can_remote_frame+0x134>)
 8003916:	f003 020f 	and.w	r2, r3, #15
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	3318      	adds	r3, #24
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	440b      	add	r3, r1
 8003922:	3304      	adds	r3, #4
 8003924:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mail_box].TIR |= 1<<1;
 8003926:	4a20      	ldr	r2, [pc, #128]	@ (80039a8 <send_can_remote_frame+0x134>)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3318      	adds	r3, #24
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	4413      	add	r3, r2
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	491d      	ldr	r1, [pc, #116]	@ (80039a8 <send_can_remote_frame+0x134>)
 8003934:	f043 0202 	orr.w	r2, r3, #2
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	3318      	adds	r3, #24
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	440b      	add	r3, r1
 8003940:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mail_box].TDTR &= ~(0xF<<0);
 8003942:	4a19      	ldr	r2, [pc, #100]	@ (80039a8 <send_can_remote_frame+0x134>)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	3318      	adds	r3, #24
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	4413      	add	r3, r2
 800394c:	3304      	adds	r3, #4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4915      	ldr	r1, [pc, #84]	@ (80039a8 <send_can_remote_frame+0x134>)
 8003952:	f023 020f 	bic.w	r2, r3, #15
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	3318      	adds	r3, #24
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	440b      	add	r3, r1
 800395e:	3304      	adds	r3, #4
 8003960:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mail_box].TDTR |= (frame.dlc<<0);
 8003962:	4a11      	ldr	r2, [pc, #68]	@ (80039a8 <send_can_remote_frame+0x134>)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	3318      	adds	r3, #24
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	4413      	add	r3, r2
 800396c:	3304      	adds	r3, #4
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	79ba      	ldrb	r2, [r7, #6]
 8003972:	490d      	ldr	r1, [pc, #52]	@ (80039a8 <send_can_remote_frame+0x134>)
 8003974:	431a      	orrs	r2, r3
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	3318      	adds	r3, #24
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	440b      	add	r3, r1
 800397e:	3304      	adds	r3, #4
 8003980:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mail_box].TIR |= (1<<0);
 8003982:	4a09      	ldr	r2, [pc, #36]	@ (80039a8 <send_can_remote_frame+0x134>)
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	3318      	adds	r3, #24
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	4413      	add	r3, r2
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4906      	ldr	r1, [pc, #24]	@ (80039a8 <send_can_remote_frame+0x134>)
 8003990:	f043 0201 	orr.w	r2, r3, #1
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	3318      	adds	r3, #24
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	440b      	add	r3, r1
 800399c:	601a      	str	r2, [r3, #0]
}
 800399e:	bf00      	nop
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc90      	pop	{r4, r7}
 80039a6:	4770      	bx	lr
 80039a8:	40006400 	.word	0x40006400

080039ac <configure_can_filters>:
void configure_can_filters(const uint32_t *std_ids, uint8_t std_cnt,const uint32_t *ext_ids, uint8_t ext_cnt) {
 80039ac:	b480      	push	{r7}
 80039ae:	b089      	sub	sp, #36	@ 0x24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	461a      	mov	r2, r3
 80039b8:	460b      	mov	r3, r1
 80039ba:	72fb      	strb	r3, [r7, #11]
 80039bc:	4613      	mov	r3, r2
 80039be:	72bb      	strb	r3, [r7, #10]
    uint8_t bank = 0; // filter bank index
 80039c0:	2300      	movs	r3, #0
 80039c2:	77fb      	strb	r3, [r7, #31]

    // Enter filter initialization mode
    CAN1->FMR |= CAN_FMR_FINIT;
 80039c4:	4b6e      	ldr	r3, [pc, #440]	@ (8003b80 <configure_can_filters+0x1d4>)
 80039c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80039ca:	4a6d      	ldr	r2, [pc, #436]	@ (8003b80 <configure_can_filters+0x1d4>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

    // --- Configure standard IDs ---
    for (uint8_t i = 0; i < std_cnt; i += 2)
 80039d4:	2300      	movs	r3, #0
 80039d6:	77bb      	strb	r3, [r7, #30]
 80039d8:	e067      	b.n	8003aaa <configure_can_filters+0xfe>
    {
        if (bank >= 14) break; // no more filter banks available
 80039da:	7ffb      	ldrb	r3, [r7, #31]
 80039dc:	2b0d      	cmp	r3, #13
 80039de:	d869      	bhi.n	8003ab4 <configure_can_filters+0x108>

        // Set 16-bit scale configuration
        CAN1->FS1R &= ~(1 << bank); // 0 = 16-bit scale
 80039e0:	4b67      	ldr	r3, [pc, #412]	@ (8003b80 <configure_can_filters+0x1d4>)
 80039e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80039e6:	7ffa      	ldrb	r2, [r7, #31]
 80039e8:	2101      	movs	r1, #1
 80039ea:	fa01 f202 	lsl.w	r2, r1, r2
 80039ee:	43d2      	mvns	r2, r2
 80039f0:	4611      	mov	r1, r2
 80039f2:	4a63      	ldr	r2, [pc, #396]	@ (8003b80 <configure_can_filters+0x1d4>)
 80039f4:	400b      	ands	r3, r1
 80039f6:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c

        // Set list mode (not mask mode)
        CAN1->FM1R |= (1 << bank);
 80039fa:	4b61      	ldr	r3, [pc, #388]	@ (8003b80 <configure_can_filters+0x1d4>)
 80039fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003a00:	7ffa      	ldrb	r2, [r7, #31]
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f202 	lsl.w	r2, r1, r2
 8003a08:	4611      	mov	r1, r2
 8003a0a:	4a5d      	ldr	r2, [pc, #372]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204

        // Assign to FIFO0
        CAN1->FFA1R &= ~(1 << bank);
 8003a12:	4b5b      	ldr	r3, [pc, #364]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003a14:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8003a18:	7ffa      	ldrb	r2, [r7, #31]
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a20:	43d2      	mvns	r2, r2
 8003a22:	4611      	mov	r1, r2
 8003a24:	4a56      	ldr	r2, [pc, #344]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003a26:	400b      	ands	r3, r1
 8003a28:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

        // Two IDs per bank (if available)
        uint16_t id1 = std_ids[i] & 0x7FF;
 8003a2c:	7fbb      	ldrb	r3, [r7, #30]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4413      	add	r3, r2
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a3c:	837b      	strh	r3, [r7, #26]
        uint16_t id2 = (i + 1 < std_cnt) ? (std_ids[i+1] & 0x7FF) : 0;
 8003a3e:	7fbb      	ldrb	r3, [r7, #30]
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	7afb      	ldrb	r3, [r7, #11]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	da0a      	bge.n	8003a5e <configure_can_filters+0xb2>
 8003a48:	7fbb      	ldrb	r3, [r7, #30]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4413      	add	r3, r2
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	e000      	b.n	8003a60 <configure_can_filters+0xb4>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	833b      	strh	r3, [r7, #24]

        // Put IDs into filter registers
        CAN1->sFilterRegister[bank].FR1 = (id1 << 5) | (id2 << 21);
 8003a62:	8b7b      	ldrh	r3, [r7, #26]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	8b3b      	ldrh	r3, [r7, #24]
 8003a68:	055b      	lsls	r3, r3, #21
 8003a6a:	ea42 0103 	orr.w	r1, r2, r3
 8003a6e:	4a44      	ldr	r2, [pc, #272]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003a70:	7ffb      	ldrb	r3, [r7, #31]
 8003a72:	3348      	adds	r3, #72	@ 0x48
 8003a74:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        CAN1->sFilterRegister[bank].FR2 = 0; // not used in 16-bit mode
 8003a78:	4a41      	ldr	r2, [pc, #260]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003a7a:	7ffb      	ldrb	r3, [r7, #31]
 8003a7c:	3348      	adds	r3, #72	@ 0x48
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4413      	add	r3, r2
 8003a82:	2200      	movs	r2, #0
 8003a84:	605a      	str	r2, [r3, #4]

        // Enable filter
        CAN1->FA1R |= (1 << bank);
 8003a86:	4b3e      	ldr	r3, [pc, #248]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003a88:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8003a8c:	7ffa      	ldrb	r2, [r7, #31]
 8003a8e:	2101      	movs	r1, #1
 8003a90:	fa01 f202 	lsl.w	r2, r1, r2
 8003a94:	4611      	mov	r1, r2
 8003a96:	4a3a      	ldr	r2, [pc, #232]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003a98:	430b      	orrs	r3, r1
 8003a9a:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

        bank++;
 8003a9e:	7ffb      	ldrb	r3, [r7, #31]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < std_cnt; i += 2)
 8003aa4:	7fbb      	ldrb	r3, [r7, #30]
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	77bb      	strb	r3, [r7, #30]
 8003aaa:	7fba      	ldrb	r2, [r7, #30]
 8003aac:	7afb      	ldrb	r3, [r7, #11]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d393      	bcc.n	80039da <configure_can_filters+0x2e>
 8003ab2:	e000      	b.n	8003ab6 <configure_can_filters+0x10a>
        if (bank >= 14) break; // no more filter banks available
 8003ab4:	bf00      	nop
    }

    // --- Configure extended IDs ---
    for (uint8_t i = 0; i < ext_cnt; i++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	777b      	strb	r3, [r7, #29]
 8003aba:	e04e      	b.n	8003b5a <configure_can_filters+0x1ae>
    {
        if (bank >= 14) break; // no more filter banks available
 8003abc:	7ffb      	ldrb	r3, [r7, #31]
 8003abe:	2b0d      	cmp	r3, #13
 8003ac0:	d850      	bhi.n	8003b64 <configure_can_filters+0x1b8>

        // Set 32-bit scale configuration
        CAN1->FS1R |= (1 << bank); // 1 = 32-bit scale
 8003ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003ac4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8003ac8:	7ffa      	ldrb	r2, [r7, #31]
 8003aca:	2101      	movs	r1, #1
 8003acc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c

        // Set list mode
        CAN1->FM1R |= (1 << bank);
 8003ada:	4b29      	ldr	r3, [pc, #164]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003adc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8003ae0:	7ffa      	ldrb	r2, [r7, #31]
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4a25      	ldr	r2, [pc, #148]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003aec:	430b      	orrs	r3, r1
 8003aee:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204

        // Assign to FIFO1
        CAN1->FFA1R |= (1 << bank);
 8003af2:	4b23      	ldr	r3, [pc, #140]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003af4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8003af8:	7ffa      	ldrb	r2, [r7, #31]
 8003afa:	2101      	movs	r1, #1
 8003afc:	fa01 f202 	lsl.w	r2, r1, r2
 8003b00:	4611      	mov	r1, r2
 8003b02:	4a1f      	ldr	r2, [pc, #124]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003b04:	430b      	orrs	r3, r1
 8003b06:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

        // Extended ID format: ID[28:0] << 3 + IDE bit
        uint32_t id = ((ext_ids[i] & 0x1FFFFFFF) << 3) | (1 << 2);
 8003b0a:	7f7b      	ldrb	r3, [r7, #29]
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	4413      	add	r3, r2
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	f043 0304 	orr.w	r3, r3, #4
 8003b1a:	617b      	str	r3, [r7, #20]

        // Put ID into filter
        CAN1->sFilterRegister[bank].FR1 = id;
 8003b1c:	4918      	ldr	r1, [pc, #96]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003b1e:	7ffb      	ldrb	r3, [r7, #31]
 8003b20:	3348      	adds	r3, #72	@ 0x48
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        CAN1->sFilterRegister[bank].FR2 = 0;
 8003b28:	4a15      	ldr	r2, [pc, #84]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003b2a:	7ffb      	ldrb	r3, [r7, #31]
 8003b2c:	3348      	adds	r3, #72	@ 0x48
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	4413      	add	r3, r2
 8003b32:	2200      	movs	r2, #0
 8003b34:	605a      	str	r2, [r3, #4]

        // Enable filter
        CAN1->FA1R |= (1 << bank);
 8003b36:	4b12      	ldr	r3, [pc, #72]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003b38:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8003b3c:	7ffa      	ldrb	r2, [r7, #31]
 8003b3e:	2101      	movs	r1, #1
 8003b40:	fa01 f202 	lsl.w	r2, r1, r2
 8003b44:	4611      	mov	r1, r2
 8003b46:	4a0e      	ldr	r2, [pc, #56]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

        bank++;
 8003b4e:	7ffb      	ldrb	r3, [r7, #31]
 8003b50:	3301      	adds	r3, #1
 8003b52:	77fb      	strb	r3, [r7, #31]
    for (uint8_t i = 0; i < ext_cnt; i++)
 8003b54:	7f7b      	ldrb	r3, [r7, #29]
 8003b56:	3301      	adds	r3, #1
 8003b58:	777b      	strb	r3, [r7, #29]
 8003b5a:	7f7a      	ldrb	r2, [r7, #29]
 8003b5c:	7abb      	ldrb	r3, [r7, #10]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d3ac      	bcc.n	8003abc <configure_can_filters+0x110>
 8003b62:	e000      	b.n	8003b66 <configure_can_filters+0x1ba>
        if (bank >= 14) break; // no more filter banks available
 8003b64:	bf00      	nop
    }

    // Exit filter initialization mode
    CAN1->FMR &= ~CAN_FMR_FINIT;
 8003b66:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003b68:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003b6c:	4a04      	ldr	r2, [pc, #16]	@ (8003b80 <configure_can_filters+0x1d4>)
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
        bank++;
    }

    // Leave filter init mode
    CAN1->FMR &= ~CAN_FMR_FINIT;*/
}
 8003b76:	bf00      	nop
 8003b78:	3724      	adds	r7, #36	@ 0x24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	40006400 	.word	0x40006400

08003b84 <CAN_MessagePending>:
 * @param fifo_number The FIFO to check (0 for FIFO0, 1 for FIFO1).
 * @param rx_message A pointer to the CanRxMsg structure to store the received data.
 * @return 1 if a message was successfully received, 0 otherwise.
 */
uint8_t CAN_MessagePending(uint8_t fifo)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
    if (fifo == 0)
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d109      	bne.n	8003ba8 <CAN_MessagePending+0x24>
        return (CAN1->RF0R & CAN_RF0R_FMP0_Msk) ? 1 : 0;
 8003b94:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc4 <CAN_MessagePending+0x40>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	bf14      	ite	ne
 8003ba0:	2301      	movne	r3, #1
 8003ba2:	2300      	moveq	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	e008      	b.n	8003bba <CAN_MessagePending+0x36>
    else
        return (CAN1->RF1R & CAN_RF1R_FMP1_Msk) ? 1 : 0;
 8003ba8:	4b06      	ldr	r3, [pc, #24]	@ (8003bc4 <CAN_MessagePending+0x40>)
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f003 0303 	and.w	r3, r3, #3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr
 8003bc4:	40006400 	.word	0x40006400

08003bc8 <can_rx>:

uint8_t can_rx(can_frame_t *RxMessage,uint8_t fifo_number){
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
	  RxMessage->ide = (uint8_t)0x04 & CAN1->sFIFOMailBox[fifo_number].RIR;
 8003bd4:	4a44      	ldr	r2, [pc, #272]	@ (8003ce8 <can_rx+0x120>)
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	331b      	adds	r3, #27
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	4413      	add	r3, r2
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	711a      	strb	r2, [r3, #4]
	  if (RxMessage->ide == 0)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	791b      	ldrb	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10b      	bne.n	8003c0c <can_rx+0x44>
	  {
	    RxMessage->id = (uint32_t)0x000007FF & (CAN1->sFIFOMailBox[fifo_number].RIR >> 21);
 8003bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8003ce8 <can_rx+0x120>)
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	331b      	adds	r3, #27
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	4413      	add	r3, r2
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	0d5b      	lsrs	r3, r3, #21
 8003c02:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e00a      	b.n	8003c22 <can_rx+0x5a>
	  }
	  else
	  {
	    RxMessage->id = (uint32_t)0x1FFFFFFF & (CAN1->sFIFOMailBox[fifo_number].RIR >> 3);
 8003c0c:	4a36      	ldr	r2, [pc, #216]	@ (8003ce8 <can_rx+0x120>)
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	331b      	adds	r3, #27
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	4413      	add	r3, r2
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	08db      	lsrs	r3, r3, #3
 8003c1a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	601a      	str	r2, [r3, #0]
	  }

	  RxMessage->rtr = (uint8_t)0x02 & CAN1->sFIFOMailBox[fifo_number].RIR;
 8003c22:	4a31      	ldr	r2, [pc, #196]	@ (8003ce8 <can_rx+0x120>)
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	331b      	adds	r3, #27
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	4413      	add	r3, r2
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	715a      	strb	r2, [r3, #5]
	  /* Get the DLC */
	  RxMessage->dlc = (uint8_t)0x0F & CAN1->sFIFOMailBox[fifo_number].RDTR;
 8003c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce8 <can_rx+0x120>)
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	331b      	adds	r3, #27
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	4413      	add	r3, r2
 8003c44:	3304      	adds	r3, #4
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	719a      	strb	r2, [r3, #6]
	  /* Get the data field */
	  for(uint8_t i=0;i< RxMessage->dlc;i++){
 8003c54:	2300      	movs	r3, #0
 8003c56:	73fb      	strb	r3, [r7, #15]
 8003c58:	e027      	b.n	8003caa <can_rx+0xe2>
		  if(i<4){
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d810      	bhi.n	8003c82 <can_rx+0xba>
			  RxMessage->data[i] = (CAN1->sFIFOMailBox[fifo_number].RDLR>>(i*8));
 8003c60:	4a21      	ldr	r2, [pc, #132]	@ (8003ce8 <can_rx+0x120>)
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	40da      	lsrs	r2, r3
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	b2d1      	uxtb	r1, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	460a      	mov	r2, r1
 8003c7e:	71da      	strb	r2, [r3, #7]
 8003c80:	e010      	b.n	8003ca4 <can_rx+0xdc>
		  }else{
			  RxMessage->data[i] = (CAN1->sFIFOMailBox[fifo_number].RDHR>>(((i-4)*8)));
 8003c82:	4a19      	ldr	r2, [pc, #100]	@ (8003ce8 <can_rx+0x120>)
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	3b04      	subs	r3, #4
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	40da      	lsrs	r2, r3
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	b2d1      	uxtb	r1, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	460a      	mov	r2, r1
 8003ca2:	71da      	strb	r2, [r3, #7]
	  for(uint8_t i=0;i< RxMessage->dlc;i++){
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	799b      	ldrb	r3, [r3, #6]
 8003cae:	7bfa      	ldrb	r2, [r7, #15]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d3d2      	bcc.n	8003c5a <can_rx+0x92>

		  }
	  }
//	  send_full_frame_over_uart(&RxMessage);
	  if (fifo_number == 0)
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <can_rx+0x100>
	  {
		  CAN1->RF0R |= CAN_RF0R_RFOM0;
 8003cba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce8 <can_rx+0x120>)
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce8 <can_rx+0x120>)
 8003cc0:	f043 0320 	orr.w	r3, r3, #32
 8003cc4:	60d3      	str	r3, [r2, #12]
 8003cc6:	e008      	b.n	8003cda <can_rx+0x112>
	  }
	  else if (fifo_number == 1)
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d105      	bne.n	8003cda <can_rx+0x112>
	  {
		  CAN1->RF1R |= CAN_RF1R_RFOM1;
 8003cce:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <can_rx+0x120>)
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	4a05      	ldr	r2, [pc, #20]	@ (8003ce8 <can_rx+0x120>)
 8003cd4:	f043 0320 	orr.w	r3, r3, #32
 8003cd8:	6113      	str	r3, [r2, #16]
	  }
	  return 1;
 8003cda:	2301      	movs	r3, #1
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	40006400 	.word	0x40006400

08003cec <Condensor_Relay_Pins_Init>:

#include"extern_file_declarations.h"

#define PB15_CONDENSOR   15

void Condensor_Relay_Pins_Init(){
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8003cf0:	4b0d      	ldr	r3, [pc, #52]	@ (8003d28 <Condensor_Relay_Pins_Init+0x3c>)
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	4a0c      	ldr	r2, [pc, #48]	@ (8003d28 <Condensor_Relay_Pins_Init+0x3c>)
 8003cf6:	f043 0308 	orr.w	r3, r3, #8
 8003cfa:	6193      	str	r3, [r2, #24]
    GPIOB->CRH&=~((0xF<<28));
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003d2c <Condensor_Relay_Pins_Init+0x40>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4a0a      	ldr	r2, [pc, #40]	@ (8003d2c <Condensor_Relay_Pins_Init+0x40>)
 8003d02:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003d06:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=((0x3<<28));
 8003d08:	4b08      	ldr	r3, [pc, #32]	@ (8003d2c <Condensor_Relay_Pins_Init+0x40>)
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	4a07      	ldr	r2, [pc, #28]	@ (8003d2c <Condensor_Relay_Pins_Init+0x40>)
 8003d0e:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8003d12:	6053      	str	r3, [r2, #4]
    GPIOB->ODR|=((1<<PB15_CONDENSOR));
 8003d14:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <Condensor_Relay_Pins_Init+0x40>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4a04      	ldr	r2, [pc, #16]	@ (8003d2c <Condensor_Relay_Pins_Init+0x40>)
 8003d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d1e:	60d3      	str	r3, [r2, #12]
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40010c00 	.word	0x40010c00

08003d30 <clock_print_status>:
#include"Drive_Selector_Switch.h"
#include"JBD_BMS.h"
#include"JBD_BMS_MESSAGES.h"
extern void matel_mcu_process_can_frame(can_frame_t *);
I2C_HandleTypeDef hi2c1;
void clock_print_status(){
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
    uart_printf("\r\n=====================================\r\n");
 8003d34:	4817      	ldr	r0, [pc, #92]	@ (8003d94 <clock_print_status+0x64>)
 8003d36:	f000 ffdd 	bl	8004cf4 <uart_printf>
    uart_printf("EVA DRIVE_MODE_SELECTOR & HVAC \r\n");
 8003d3a:	4817      	ldr	r0, [pc, #92]	@ (8003d98 <clock_print_status+0x68>)
 8003d3c:	f000 ffda 	bl	8004cf4 <uart_printf>
    uart_printf("=====================================\r\n");
 8003d40:	4816      	ldr	r0, [pc, #88]	@ (8003d9c <clock_print_status+0x6c>)
 8003d42:	f000 ffd7 	bl	8004cf4 <uart_printf>
    uart_printf("System Clock: %lu MHz\r\n", get_SYSCLK_freq() / 1000000);
 8003d46:	f000 fbc7 	bl	80044d8 <get_SYSCLK_freq>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	4a14      	ldr	r2, [pc, #80]	@ (8003da0 <clock_print_status+0x70>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	0c9b      	lsrs	r3, r3, #18
 8003d54:	4619      	mov	r1, r3
 8003d56:	4813      	ldr	r0, [pc, #76]	@ (8003da4 <clock_print_status+0x74>)
 8003d58:	f000 ffcc 	bl	8004cf4 <uart_printf>
    uart_printf("APB1 Clock: %lu MHz\r\n", get_APB1_freq() / 1000000);
 8003d5c:	f000 fc3a 	bl	80045d4 <get_APB1_freq>
 8003d60:	4603      	mov	r3, r0
 8003d62:	4a0f      	ldr	r2, [pc, #60]	@ (8003da0 <clock_print_status+0x70>)
 8003d64:	fba2 2303 	umull	r2, r3, r2, r3
 8003d68:	0c9b      	lsrs	r3, r3, #18
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	480e      	ldr	r0, [pc, #56]	@ (8003da8 <clock_print_status+0x78>)
 8003d6e:	f000 ffc1 	bl	8004cf4 <uart_printf>
    uart_printf("APB2 Clock: %lu MHz\r\n", get_APB2_freq() / 1000000);
 8003d72:	f000 fc55 	bl	8004620 <get_APB2_freq>
 8003d76:	4603      	mov	r3, r0
 8003d78:	4a09      	ldr	r2, [pc, #36]	@ (8003da0 <clock_print_status+0x70>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	0c9b      	lsrs	r3, r3, #18
 8003d80:	4619      	mov	r1, r3
 8003d82:	480a      	ldr	r0, [pc, #40]	@ (8003dac <clock_print_status+0x7c>)
 8003d84:	f000 ffb6 	bl	8004cf4 <uart_printf>
    uart_printf("=====================================\r\n");
 8003d88:	4804      	ldr	r0, [pc, #16]	@ (8003d9c <clock_print_status+0x6c>)
 8003d8a:	f000 ffb3 	bl	8004cf4 <uart_printf>
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	0800a780 	.word	0x0800a780
 8003d98:	0800a7ac 	.word	0x0800a7ac
 8003d9c:	0800a7d0 	.word	0x0800a7d0
 8003da0:	431bde83 	.word	0x431bde83
 8003da4:	0800a7f8 	.word	0x0800a7f8
 8003da8:	0800a810 	.word	0x0800a810
 8003dac:	0800a828 	.word	0x0800a828

08003db0 <can_ids_filter_configure>:
void can_ids_filter_configure(){
 8003db0:	b5b0      	push	{r4, r5, r7, lr}
 8003db2:	b090      	sub	sp, #64	@ 0x40
 8003db4:	af00      	add	r7, sp, #0
    uint32_t standard_rx_ids[] = {
 8003db6:	4b0f      	ldr	r3, [pc, #60]	@ (8003df4 <can_ids_filter_configure+0x44>)
 8003db8:	f107 0410 	add.w	r4, r7, #16
 8003dbc:	461d      	mov	r5, r3
 8003dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dc6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003dca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			Matel_MCU_FAULT_one_CAN_STD_ID_AE,
			Matel_MCU_FAULT_two_CAN_STD_ID_AF,
			Matel_MCU_Fault_Code_CAN_STD_ID_B3,
    };

    uint32_t extended_rx_ids[] = {
 8003dce:	4a0a      	ldr	r2, [pc, #40]	@ (8003df8 <can_ids_filter_configure+0x48>)
 8003dd0:	1d3b      	adds	r3, r7, #4
 8003dd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    		Matel_MCU_Stat_One_CAN_EXTD_ID_18265040,
			Matel_MCU_Stat_Two_CAN_EXTD_ID_18275040,
			Matel_VECTOR__INDEPENDENT_SIG_MSG_0xC0000000
    };
    configure_can_filters(standard_rx_ids,sizeof(standard_rx_ids)/sizeof(standard_rx_ids[0]),extended_rx_ids,sizeof(extended_rx_ids)/sizeof(extended_rx_ids[0]));
 8003dd8:	1d3a      	adds	r2, r7, #4
 8003dda:	f107 0010 	add.w	r0, r7, #16
 8003dde:	2303      	movs	r3, #3
 8003de0:	210c      	movs	r1, #12
 8003de2:	f7ff fde3 	bl	80039ac <configure_can_filters>
    uart_printf("[INFO] Configuring CAN filters for CT4 MCU messages...\r\n");
 8003de6:	4805      	ldr	r0, [pc, #20]	@ (8003dfc <can_ids_filter_configure+0x4c>)
 8003de8:	f000 ff84 	bl	8004cf4 <uart_printf>
}
 8003dec:	bf00      	nop
 8003dee:	3740      	adds	r7, #64	@ 0x40
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bdb0      	pop	{r4, r5, r7, pc}
 8003df4:	0800a87c 	.word	0x0800a87c
 8003df8:	0800a8ac 	.word	0x0800a8ac
 8003dfc:	0800a840 	.word	0x0800a840

08003e00 <main>:
    uart_send((uint8_t*)f, sizeof(can_frame_t));
}
#define PB0_REVERSE 0
#define PB1_NEUTRAL 1
#define PB3_DRIVE 3
int main(){
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af02      	add	r7, sp, #8
	HAL_Init();
 8003e06:	f000 ffd1 	bl	8004dac <HAL_Init>
	system_clock_init_to_72MHZ();
 8003e0a:	f000 fb0f 	bl	800442c <system_clock_init_to_72MHZ>
	if(uart3_Init(115200)==RY_NOT_OK){
 8003e0e:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8003e12:	f000 fd8f 	bl	8004934 <uart3_Init>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <main+0x20>
	  Error_Handler();
 8003e1c:	f000 f8b8 	bl	8003f90 <Error_Handler>
	}
    uart_printf("UART3 initialization is ok ,baud_baudrate in kbps %d:\r\n", 115200);
 8003e20:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003e24:	484a      	ldr	r0, [pc, #296]	@ (8003f50 <main+0x150>)
 8003e26:	f000 ff65 	bl	8004cf4 <uart_printf>
    uart_printf("=========================================================\r\n");
 8003e2a:	484a      	ldr	r0, [pc, #296]	@ (8003f54 <main+0x154>)
 8003e2c:	f000 ff62 	bl	8004cf4 <uart_printf>
	if(uart_init(115200)==RY_NOT_OK){
 8003e30:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8003e34:	f000 fd28 	bl	8004888 <uart_init>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <main+0x42>
	  Error_Handler();
 8003e3e:	f000 f8a7 	bl	8003f90 <Error_Handler>
	}
	clock_print_status();
 8003e42:	f7ff ff75 	bl	8003d30 <clock_print_status>
    uart_printf("UART1 initialization is ok ,baud_baudrate in kbps %d:\r\n", 115200);
 8003e46:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003e4a:	4843      	ldr	r0, [pc, #268]	@ (8003f58 <main+0x158>)
 8003e4c:	f000 ff52 	bl	8004cf4 <uart_printf>
    uart_printf("=========================================================\r\n");
 8003e50:	4840      	ldr	r0, [pc, #256]	@ (8003f54 <main+0x154>)
 8003e52:	f000 ff4f 	bl	8004cf4 <uart_printf>
    systick_init(1000);
 8003e56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e5a:	f000 fa0b 	bl	8004274 <systick_init>
    uart_printf("systick clock initialized for milli second ");
 8003e5e:	483f      	ldr	r0, [pc, #252]	@ (8003f5c <main+0x15c>)
 8003e60:	f000 ff48 	bl	8004cf4 <uart_printf>
    uart_printf("=========================================================\r\n");
 8003e64:	483b      	ldr	r0, [pc, #236]	@ (8003f54 <main+0x154>)
 8003e66:	f000 ff45 	bl	8004cf4 <uart_printf>
	if(can_init(500000)==RY_NOT_OK){
 8003e6a:	483d      	ldr	r0, [pc, #244]	@ (8003f60 <main+0x160>)
 8003e6c:	f7ff fc9c 	bl	80037a8 <can_init>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d107      	bne.n	8003e86 <main+0x86>
      uart_printf("CAN initialization is NOT oK\r\n");
 8003e76:	483b      	ldr	r0, [pc, #236]	@ (8003f64 <main+0x164>)
 8003e78:	f000 ff3c 	bl	8004cf4 <uart_printf>
	  uart_printf("======================================================\r\n");
 8003e7c:	483a      	ldr	r0, [pc, #232]	@ (8003f68 <main+0x168>)
 8003e7e:	f000 ff39 	bl	8004cf4 <uart_printf>
	  Error_Handler();
 8003e82:	f000 f885 	bl	8003f90 <Error_Handler>
	}
	can_ids_filter_configure();
 8003e86:	f7ff ff93 	bl	8003db0 <can_ids_filter_configure>
    uart_printf("CAN initialization is ok ,baud_baudrate in %d kbps:\r\n", 500);
 8003e8a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003e8e:	4837      	ldr	r0, [pc, #220]	@ (8003f6c <main+0x16c>)
 8003e90:	f000 ff30 	bl	8004cf4 <uart_printf>
    uart_printf("=========================================================\r\n");
 8003e94:	482f      	ldr	r0, [pc, #188]	@ (8003f54 <main+0x154>)
 8003e96:	f000 ff2d 	bl	8004cf4 <uart_printf>
    Init_tasks();
 8003e9a:	f000 fbed 	bl	8004678 <Init_tasks>
    uart_printf("Task schedular is initialized\r\n");
 8003e9e:	4834      	ldr	r0, [pc, #208]	@ (8003f70 <main+0x170>)
 8003ea0:	f000 ff28 	bl	8004cf4 <uart_printf>
    uart_printf("=========================================================\r\n");
 8003ea4:	482b      	ldr	r0, [pc, #172]	@ (8003f54 <main+0x154>)
 8003ea6:	f000 ff25 	bl	8004cf4 <uart_printf>
    Blower_Relay_Pins_Init();
 8003eaa:	f7fd fae9 	bl	8001480 <Blower_Relay_Pins_Init>
    uart_printf("Blower pins are initialized PIN12=%d PIN13=%d PIN14=%d\r\n",(GPIOB->IDR>>12&1),(GPIOB->IDR>>13&1),(GPIOB->IDR>>14&1));
 8003eae:	4b31      	ldr	r3, [pc, #196]	@ (8003f74 <main+0x174>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0b1b      	lsrs	r3, r3, #12
 8003eb4:	f003 0101 	and.w	r1, r3, #1
 8003eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003f74 <main+0x174>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	0b5b      	lsrs	r3, r3, #13
 8003ebe:	f003 0201 	and.w	r2, r3, #1
 8003ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f74 <main+0x174>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	0b9b      	lsrs	r3, r3, #14
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	482a      	ldr	r0, [pc, #168]	@ (8003f78 <main+0x178>)
 8003ece:	f000 ff11 	bl	8004cf4 <uart_printf>
    uart_printf("=========================================================\r\n");
 8003ed2:	4820      	ldr	r0, [pc, #128]	@ (8003f54 <main+0x154>)
 8003ed4:	f000 ff0e 	bl	8004cf4 <uart_printf>
    Condensor_Relay_Pins_Init();
 8003ed8:	f7ff ff08 	bl	8003cec <Condensor_Relay_Pins_Init>
    uart_printf("Condensor pins are initialized PIN15=%d \r\n",(GPIOB->IDR>>15&1));
 8003edc:	4b25      	ldr	r3, [pc, #148]	@ (8003f74 <main+0x174>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	0bdb      	lsrs	r3, r3, #15
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4824      	ldr	r0, [pc, #144]	@ (8003f7c <main+0x17c>)
 8003eea:	f000 ff03 	bl	8004cf4 <uart_printf>
    uart_printf("=========================================================\r\n");
 8003eee:	4819      	ldr	r0, [pc, #100]	@ (8003f54 <main+0x154>)
 8003ef0:	f000 ff00 	bl	8004cf4 <uart_printf>
    Motor_control_pins_init();
 8003ef4:	f7ff fac6 	bl	8003484 <Motor_control_pins_init>
    uart_printf("Motor_control pins are initialized PIN0=%d PIN1=%d  PIN3=%d PIN5=%d\r\n",(GPIOB->IDR>>0&1),(GPIOB->IDR>>1&1),(GPIOB->IDR>>3&1),(GPIOB->IDR>>5&1));
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f74 <main+0x174>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 0101 	and.w	r1, r3, #1
 8003f00:	4b1c      	ldr	r3, [pc, #112]	@ (8003f74 <main+0x174>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	085b      	lsrs	r3, r3, #1
 8003f06:	f003 0201 	and.w	r2, r3, #1
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f74 <main+0x174>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	08db      	lsrs	r3, r3, #3
 8003f10:	f003 0001 	and.w	r0, r3, #1
 8003f14:	4b17      	ldr	r3, [pc, #92]	@ (8003f74 <main+0x174>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	095b      	lsrs	r3, r3, #5
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	4603      	mov	r3, r0
 8003f22:	4817      	ldr	r0, [pc, #92]	@ (8003f80 <main+0x180>)
 8003f24:	f000 fee6 	bl	8004cf4 <uart_printf>
    uart_printf("=========================================================\r\n");
 8003f28:	480a      	ldr	r0, [pc, #40]	@ (8003f54 <main+0x154>)
 8003f2a:	f000 fee3 	bl	8004cf4 <uart_printf>
    Switch_Pins_int();
 8003f2e:	f7fd facd 	bl	80014cc <Switch_Pins_int>
//    MX_I2C1_Init();
//    Register_task(50,Drive_mode_state);
    Register_task(50,process_switch_status);
 8003f32:	4914      	ldr	r1, [pc, #80]	@ (8003f84 <main+0x184>)
 8003f34:	2032      	movs	r0, #50	@ 0x32
 8003f36:	f000 fbd5 	bl	80046e4 <Register_task>
    Register_task(2,Request_Msgs_to_BMS);
 8003f3a:	4913      	ldr	r1, [pc, #76]	@ (8003f88 <main+0x188>)
 8003f3c:	2002      	movs	r0, #2
 8003f3e:	f000 fbd1 	bl	80046e4 <Register_task>
    Register_task(20,process_can_messages);
 8003f42:	4912      	ldr	r1, [pc, #72]	@ (8003f8c <main+0x18c>)
 8003f44:	2014      	movs	r0, #20
 8003f46:	f000 fbcd 	bl	80046e4 <Register_task>


    while(1){

    Run_all_tasks();
 8003f4a:	f000 fc19 	bl	8004780 <Run_all_tasks>
 8003f4e:	e7fc      	b.n	8003f4a <main+0x14a>
 8003f50:	0800a8b8 	.word	0x0800a8b8
 8003f54:	0800a8f0 	.word	0x0800a8f0
 8003f58:	0800a92c 	.word	0x0800a92c
 8003f5c:	0800a964 	.word	0x0800a964
 8003f60:	0007a120 	.word	0x0007a120
 8003f64:	0800a990 	.word	0x0800a990
 8003f68:	0800a9b0 	.word	0x0800a9b0
 8003f6c:	0800a9ec 	.word	0x0800a9ec
 8003f70:	0800aa24 	.word	0x0800aa24
 8003f74:	40010c00 	.word	0x40010c00
 8003f78:	0800aa44 	.word	0x0800aa44
 8003f7c:	0800aa80 	.word	0x0800aa80
 8003f80:	0800aaac 	.word	0x0800aaac
 8003f84:	0800400d 	.word	0x0800400d
 8003f88:	0800408d 	.word	0x0800408d
 8003f8c:	08003f9d 	.word	0x08003f9d

08003f90 <Error_Handler>:
    }
}


void Error_Handler(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
}
 8003f94:	bf00      	nop
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr

08003f9c <process_can_messages>:
	    }
		}
	}
}
void process_can_messages(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
   can_frame_t rx_frame;
   while(CAN_MessagePending(0)){
 8003fa2:	e010      	b.n	8003fc6 <process_can_messages+0x2a>
	   can_rx(&rx_frame,0);
 8003fa4:	463b      	mov	r3, r7
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff fe0d 	bl	8003bc8 <can_rx>
	   Process_Jbd_Bms_Messages(&rx_frame);
 8003fae:	463b      	mov	r3, r7
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fd fb9f 	bl	80016f4 <Process_Jbd_Bms_Messages>
	   matel_mcu_process_can_frame(&rx_frame);
 8003fb6:	463b      	mov	r3, r7
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fe f98f 	bl	80022dc <matel_mcu_process_can_frame>
	   send_id_data_only_over_uart(&rx_frame);
 8003fbe:	463b      	mov	r3, r7
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fe5f 	bl	8004c84 <send_id_data_only_over_uart>
   while(CAN_MessagePending(0)){
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	f7ff fddc 	bl	8003b84 <CAN_MessagePending>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e8      	bne.n	8003fa4 <process_can_messages+0x8>
   }
   while(CAN_MessagePending(1)){
 8003fd2:	e010      	b.n	8003ff6 <process_can_messages+0x5a>
	   can_rx(&rx_frame,1);
 8003fd4:	463b      	mov	r3, r7
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fdf5 	bl	8003bc8 <can_rx>
	   Process_Jbd_Bms_Messages(&rx_frame);
 8003fde:	463b      	mov	r3, r7
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fd fb87 	bl	80016f4 <Process_Jbd_Bms_Messages>
	   matel_mcu_process_can_frame(&rx_frame);
 8003fe6:	463b      	mov	r3, r7
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fe f977 	bl	80022dc <matel_mcu_process_can_frame>
	   send_id_data_only_over_uart(&rx_frame);
 8003fee:	463b      	mov	r3, r7
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fe47 	bl	8004c84 <send_id_data_only_over_uart>
   while(CAN_MessagePending(1)){
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	f7ff fdc4 	bl	8003b84 <CAN_MessagePending>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e8      	bne.n	8003fd4 <process_can_messages+0x38>
   }

}
 8004002:	bf00      	nop
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <process_switch_status>:
void process_switch_status(){
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
		cur_state=Switch_update();
 8004010:	f7fd fac8 	bl	80015a4 <Switch_update>
 8004014:	4603      	mov	r3, r0
 8004016:	461a      	mov	r2, r3
 8004018:	4b19      	ldr	r3, [pc, #100]	@ (8004080 <process_switch_status+0x74>)
 800401a:	701a      	strb	r2, [r3, #0]
		if(cur_state!=last_state){
 800401c:	4b18      	ldr	r3, [pc, #96]	@ (8004080 <process_switch_status+0x74>)
 800401e:	781a      	ldrb	r2, [r3, #0]
 8004020:	4b18      	ldr	r3, [pc, #96]	@ (8004084 <process_switch_status+0x78>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d029      	beq.n	800407c <process_switch_status+0x70>
			last_state=cur_state;
 8004028:	4b15      	ldr	r3, [pc, #84]	@ (8004080 <process_switch_status+0x74>)
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	4b15      	ldr	r3, [pc, #84]	@ (8004084 <process_switch_status+0x78>)
 800402e:	701a      	strb	r2, [r3, #0]
			GPIOB->ODR |= ((1<<PB0_REVERSE) | (1<<PB1_NEUTRAL) | (1<<PB3_DRIVE));
 8004030:	4b15      	ldr	r3, [pc, #84]	@ (8004088 <process_switch_status+0x7c>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4a14      	ldr	r2, [pc, #80]	@ (8004088 <process_switch_status+0x7c>)
 8004036:	f043 030b 	orr.w	r3, r3, #11
 800403a:	60d3      	str	r3, [r2, #12]
			switch (cur_state) {
 800403c:	4b10      	ldr	r3, [pc, #64]	@ (8004080 <process_switch_status+0x74>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d006      	beq.n	8004052 <process_switch_status+0x46>
 8004044:	2b02      	cmp	r3, #2
 8004046:	dc19      	bgt.n	800407c <process_switch_status+0x70>
 8004048:	2b00      	cmp	r3, #0
 800404a:	d009      	beq.n	8004060 <process_switch_status+0x54>
 800404c:	2b01      	cmp	r3, #1
 800404e:	d00e      	beq.n	800406e <process_switch_status+0x62>
				case 2: GPIOB->ODR &=~ (1<<PB0_REVERSE); break;
				case 0: GPIOB->ODR &=~ (1<<PB1_NEUTRAL); break;
				case 1: GPIOB->ODR &=~ (1<<PB3_DRIVE);   break;
			}
		}
}
 8004050:	e014      	b.n	800407c <process_switch_status+0x70>
				case 2: GPIOB->ODR &=~ (1<<PB0_REVERSE); break;
 8004052:	4b0d      	ldr	r3, [pc, #52]	@ (8004088 <process_switch_status+0x7c>)
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	4a0c      	ldr	r2, [pc, #48]	@ (8004088 <process_switch_status+0x7c>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	60d3      	str	r3, [r2, #12]
 800405e:	e00d      	b.n	800407c <process_switch_status+0x70>
				case 0: GPIOB->ODR &=~ (1<<PB1_NEUTRAL); break;
 8004060:	4b09      	ldr	r3, [pc, #36]	@ (8004088 <process_switch_status+0x7c>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4a08      	ldr	r2, [pc, #32]	@ (8004088 <process_switch_status+0x7c>)
 8004066:	f023 0302 	bic.w	r3, r3, #2
 800406a:	60d3      	str	r3, [r2, #12]
 800406c:	e006      	b.n	800407c <process_switch_status+0x70>
				case 1: GPIOB->ODR &=~ (1<<PB3_DRIVE);   break;
 800406e:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <process_switch_status+0x7c>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	4a05      	ldr	r2, [pc, #20]	@ (8004088 <process_switch_status+0x7c>)
 8004074:	f023 0308 	bic.w	r3, r3, #8
 8004078:	60d3      	str	r3, [r2, #12]
 800407a:	bf00      	nop
}
 800407c:	bf00      	nop
 800407e:	bd80      	pop	{r7, pc}
 8004080:	2000054d 	.word	0x2000054d
 8004084:	2000054c 	.word	0x2000054c
 8004088:	40010c00 	.word	0x40010c00

0800408c <Request_Msgs_to_BMS>:
void Request_Msgs_to_BMS(){
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
	   can_frame_t rx_frame;
	   static uint8_t i=0;
	   rx_frame.id=id[i];
 8004092:	4b11      	ldr	r3, [pc, #68]	@ (80040d8 <Request_Msgs_to_BMS+0x4c>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	461a      	mov	r2, r3
 8004098:	4b10      	ldr	r3, [pc, #64]	@ (80040dc <Request_Msgs_to_BMS+0x50>)
 800409a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800409e:	603b      	str	r3, [r7, #0]
	   rx_frame.ide=0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	713b      	strb	r3, [r7, #4]
	   rx_frame.dlc=8;
 80040a4:	2308      	movs	r3, #8
 80040a6:	71bb      	strb	r3, [r7, #6]
	   send_can_remote_frame(rx_frame);
 80040a8:	463b      	mov	r3, r7
 80040aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040ac:	f7ff fbe2 	bl	8003874 <send_can_remote_frame>
	   i++;
 80040b0:	4b09      	ldr	r3, [pc, #36]	@ (80040d8 <Request_Msgs_to_BMS+0x4c>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	3301      	adds	r3, #1
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	4b07      	ldr	r3, [pc, #28]	@ (80040d8 <Request_Msgs_to_BMS+0x4c>)
 80040ba:	701a      	strb	r2, [r3, #0]
	   if(i>=id_size){
 80040bc:	4b06      	ldr	r3, [pc, #24]	@ (80040d8 <Request_Msgs_to_BMS+0x4c>)
 80040be:	781a      	ldrb	r2, [r3, #0]
 80040c0:	4b07      	ldr	r3, [pc, #28]	@ (80040e0 <Request_Msgs_to_BMS+0x54>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d302      	bcc.n	80040ce <Request_Msgs_to_BMS+0x42>
		   i=0;
 80040c8:	4b03      	ldr	r3, [pc, #12]	@ (80040d8 <Request_Msgs_to_BMS+0x4c>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
//		   rx_frame.dlc=8;
//		   send_can_remote_frame(rx_frame);
////		   uart_printf("%f \n\r",start-HAL_GetTick());
//	   }

}
 80040ce:	bf00      	nop
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	2000054e 	.word	0x2000054e
 80040dc:	20000004 	.word	0x20000004
 80040e0:	2000001e 	.word	0x2000001e

080040e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80040ea:	4b15      	ldr	r3, [pc, #84]	@ (8004140 <HAL_MspInit+0x5c>)
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	4a14      	ldr	r2, [pc, #80]	@ (8004140 <HAL_MspInit+0x5c>)
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	6193      	str	r3, [r2, #24]
 80040f6:	4b12      	ldr	r3, [pc, #72]	@ (8004140 <HAL_MspInit+0x5c>)
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	4b0f      	ldr	r3, [pc, #60]	@ (8004140 <HAL_MspInit+0x5c>)
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	4a0e      	ldr	r2, [pc, #56]	@ (8004140 <HAL_MspInit+0x5c>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800410c:	61d3      	str	r3, [r2, #28]
 800410e:	4b0c      	ldr	r3, [pc, #48]	@ (8004140 <HAL_MspInit+0x5c>)
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004116:	607b      	str	r3, [r7, #4]
 8004118:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800411a:	4b0a      	ldr	r3, [pc, #40]	@ (8004144 <HAL_MspInit+0x60>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	4a04      	ldr	r2, [pc, #16]	@ (8004144 <HAL_MspInit+0x60>)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004136:	bf00      	nop
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr
 8004140:	40021000 	.word	0x40021000
 8004144:	40010000 	.word	0x40010000

08004148 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004150:	f107 0310 	add.w	r3, r7, #16
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	609a      	str	r2, [r3, #8]
 800415c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1d      	ldr	r2, [pc, #116]	@ (80041d8 <HAL_I2C_MspInit+0x90>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d133      	bne.n	80041d0 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004168:	4b1c      	ldr	r3, [pc, #112]	@ (80041dc <HAL_I2C_MspInit+0x94>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	4a1b      	ldr	r2, [pc, #108]	@ (80041dc <HAL_I2C_MspInit+0x94>)
 800416e:	f043 0308 	orr.w	r3, r3, #8
 8004172:	6193      	str	r3, [r2, #24]
 8004174:	4b19      	ldr	r3, [pc, #100]	@ (80041dc <HAL_I2C_MspInit+0x94>)
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f003 0308 	and.w	r3, r3, #8
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004180:	23c0      	movs	r3, #192	@ 0xc0
 8004182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004184:	2312      	movs	r3, #18
 8004186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004188:	2303      	movs	r3, #3
 800418a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800418c:	f107 0310 	add.w	r3, r7, #16
 8004190:	4619      	mov	r1, r3
 8004192:	4813      	ldr	r0, [pc, #76]	@ (80041e0 <HAL_I2C_MspInit+0x98>)
 8004194:	f000 fff6 	bl	8005184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004198:	4b10      	ldr	r3, [pc, #64]	@ (80041dc <HAL_I2C_MspInit+0x94>)
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	4a0f      	ldr	r2, [pc, #60]	@ (80041dc <HAL_I2C_MspInit+0x94>)
 800419e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041a2:	61d3      	str	r3, [r2, #28]
 80041a4:	4b0d      	ldr	r3, [pc, #52]	@ (80041dc <HAL_I2C_MspInit+0x94>)
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80041b0:	2200      	movs	r2, #0
 80041b2:	2100      	movs	r1, #0
 80041b4:	201f      	movs	r0, #31
 80041b6:	f000 ff28 	bl	800500a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80041ba:	201f      	movs	r0, #31
 80041bc:	f000 ff41 	bl	8005042 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80041c0:	2200      	movs	r2, #0
 80041c2:	2100      	movs	r1, #0
 80041c4:	2020      	movs	r0, #32
 80041c6:	f000 ff20 	bl	800500a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80041ca:	2020      	movs	r0, #32
 80041cc:	f000 ff39 	bl	8005042 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80041d0:	bf00      	nop
 80041d2:	3720      	adds	r7, #32
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	40005400 	.word	0x40005400
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40010c00 	.word	0x40010c00

080041e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041e8:	bf00      	nop
 80041ea:	e7fd      	b.n	80041e8 <NMI_Handler+0x4>

080041ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041f0:	bf00      	nop
 80041f2:	e7fd      	b.n	80041f0 <HardFault_Handler+0x4>

080041f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041f8:	bf00      	nop
 80041fa:	e7fd      	b.n	80041f8 <MemManage_Handler+0x4>

080041fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <BusFault_Handler+0x4>

08004204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <UsageFault_Handler+0x4>

0800420c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004210:	bf00      	nop
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr

08004218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr

08004224 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004228:	bf00      	nop
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr

08004230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004234:	f000 fe00 	bl	8004e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  milli_sec_tick++;
 8004238:	4b03      	ldr	r3, [pc, #12]	@ (8004248 <SysTick_Handler+0x18>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3301      	adds	r3, #1
 800423e:	4a02      	ldr	r2, [pc, #8]	@ (8004248 <SysTick_Handler+0x18>)
 8004240:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8004242:	bf00      	nop
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000550 	.word	0x20000550

0800424c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004250:	4802      	ldr	r0, [pc, #8]	@ (800425c <I2C1_EV_IRQHandler+0x10>)
 8004252:	f001 fae1 	bl	8005818 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004256:	bf00      	nop
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	200004f8 	.word	0x200004f8

08004260 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004264:	4802      	ldr	r0, [pc, #8]	@ (8004270 <I2C1_ER_IRQHandler+0x10>)
 8004266:	f001 fc48 	bl	8005afa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800426a:	bf00      	nop
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	200004f8 	.word	0x200004f8

08004274 <systick_init>:
 *  Created on: Sep 3, 2025
 *      Author: MadaYaswanth
 */

#include"extern_file_declarations.h"
void systick_init(uint32_t ticks_per_sec){
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
    // Reload value = (SystemCoreClock / ticks_per_sec) - 1
    SysTick->LOAD = (get_SYSCLK_freq() / ticks_per_sec) - 1;
 800427c:	f000 f92c 	bl	80044d8 <get_SYSCLK_freq>
 8004280:	4602      	mov	r2, r0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	fbb2 f3f3 	udiv	r3, r2, r3
 8004288:	4a06      	ldr	r2, [pc, #24]	@ (80042a4 <systick_init+0x30>)
 800428a:	3b01      	subs	r3, #1
 800428c:	6053      	str	r3, [r2, #4]

    SysTick->VAL = 0;             // Clear current value
 800428e:	4b05      	ldr	r3, [pc, #20]	@ (80042a4 <systick_init+0x30>)
 8004290:	2200      	movs	r2, #0
 8004292:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = (1 << 2) |    // CLKSOURCE = processor clock (AHB)
 8004294:	4b03      	ldr	r3, [pc, #12]	@ (80042a4 <systick_init+0x30>)
 8004296:	2207      	movs	r2, #7
 8004298:	601a      	str	r2, [r3, #0]
                    (1 << 1) |    // TICKINT = enable SysTick interrupt
                    (1 << 0);     // ENABLE counter
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	e000e010 	.word	0xe000e010

080042a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
  return 1;
 80042ac:	2301      	movs	r3, #1
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr

080042b6 <_kill>:

int _kill(int pid, int sig)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042c0:	f003 fd9e 	bl	8007e00 <__errno>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2216      	movs	r2, #22
 80042c8:	601a      	str	r2, [r3, #0]
  return -1;
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <_exit>:

void _exit (int status)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80042de:	f04f 31ff 	mov.w	r1, #4294967295
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7ff ffe7 	bl	80042b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80042e8:	bf00      	nop
 80042ea:	e7fd      	b.n	80042e8 <_exit+0x12>

080042ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042f8:	2300      	movs	r3, #0
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e00a      	b.n	8004314 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80042fe:	f3af 8000 	nop.w
 8004302:	4601      	mov	r1, r0
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	60ba      	str	r2, [r7, #8]
 800430a:	b2ca      	uxtb	r2, r1
 800430c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	3301      	adds	r3, #1
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	429a      	cmp	r2, r3
 800431a:	dbf0      	blt.n	80042fe <_read+0x12>
  }

  return len;
 800431c:	687b      	ldr	r3, [r7, #4]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004332:	2300      	movs	r3, #0
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e009      	b.n	800434c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	60ba      	str	r2, [r7, #8]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	4618      	mov	r0, r3
 8004342:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	3301      	adds	r3, #1
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	429a      	cmp	r2, r3
 8004352:	dbf1      	blt.n	8004338 <_write+0x12>
  }
  return len;
 8004354:	687b      	ldr	r3, [r7, #4]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <_close>:

int _close(int file)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004366:	f04f 33ff 	mov.w	r3, #4294967295
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr

08004374 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004384:	605a      	str	r2, [r3, #4]
  return 0;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <_isatty>:

int _isatty(int file)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800439a:	2301      	movs	r3, #1
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bc80      	pop	{r7}
 80043a4:	4770      	bx	lr

080043a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b085      	sub	sp, #20
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	60f8      	str	r0, [r7, #12]
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr
	...

080043c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043c8:	4a14      	ldr	r2, [pc, #80]	@ (800441c <_sbrk+0x5c>)
 80043ca:	4b15      	ldr	r3, [pc, #84]	@ (8004420 <_sbrk+0x60>)
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043d4:	4b13      	ldr	r3, [pc, #76]	@ (8004424 <_sbrk+0x64>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d102      	bne.n	80043e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043dc:	4b11      	ldr	r3, [pc, #68]	@ (8004424 <_sbrk+0x64>)
 80043de:	4a12      	ldr	r2, [pc, #72]	@ (8004428 <_sbrk+0x68>)
 80043e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043e2:	4b10      	ldr	r3, [pc, #64]	@ (8004424 <_sbrk+0x64>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4413      	add	r3, r2
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d207      	bcs.n	8004400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043f0:	f003 fd06 	bl	8007e00 <__errno>
 80043f4:	4603      	mov	r3, r0
 80043f6:	220c      	movs	r2, #12
 80043f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043fa:	f04f 33ff 	mov.w	r3, #4294967295
 80043fe:	e009      	b.n	8004414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004400:	4b08      	ldr	r3, [pc, #32]	@ (8004424 <_sbrk+0x64>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004406:	4b07      	ldr	r3, [pc, #28]	@ (8004424 <_sbrk+0x64>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4413      	add	r3, r2
 800440e:	4a05      	ldr	r2, [pc, #20]	@ (8004424 <_sbrk+0x64>)
 8004410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004412:	68fb      	ldr	r3, [r7, #12]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20005000 	.word	0x20005000
 8004420:	00000400 	.word	0x00000400
 8004424:	20000554 	.word	0x20000554
 8004428:	20000748 	.word	0x20000748

0800442c <system_clock_init_to_72MHZ>:
 *
 *  Created on: Sep 2, 2025
 *      Author: MadaYaswanth
 */
#include"main.h"
STATUS system_clock_init_to_72MHZ(){
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
	    // 1. Enable HSE (external crystal, e.g., 8MHz)
	    RCC->CR |= RCC_CR_HSEON;       // Turn on HSE
 8004430:	4b27      	ldr	r3, [pc, #156]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a26      	ldr	r2, [pc, #152]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 8004436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800443a:	6013      	str	r3, [r2, #0]
	    while (!(RCC->CR & RCC_CR_HSERDY)); // Wait until HSE is ready
 800443c:	bf00      	nop
 800443e:	4b24      	ldr	r3, [pc, #144]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f9      	beq.n	800443e <system_clock_init_to_72MHZ+0x12>
	    FLASH->ACR |= FLASH_ACR_LATENCY_2;  // 2 wait states
 800444a:	4b22      	ldr	r3, [pc, #136]	@ (80044d4 <system_clock_init_to_72MHZ+0xa8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a21      	ldr	r2, [pc, #132]	@ (80044d4 <system_clock_init_to_72MHZ+0xa8>)
 8004450:	f043 0304 	orr.w	r3, r3, #4
 8004454:	6013      	str	r3, [r2, #0]
	    FLASH->ACR |= FLASH_ACR_PRFTBE;     // Enable prefetch
 8004456:	4b1f      	ldr	r3, [pc, #124]	@ (80044d4 <system_clock_init_to_72MHZ+0xa8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1e      	ldr	r2, [pc, #120]	@ (80044d4 <system_clock_init_to_72MHZ+0xa8>)
 800445c:	f043 0310 	orr.w	r3, r3, #16
 8004460:	6013      	str	r3, [r2, #0]
	    // 2. Configure PLL to multiply HSE to 72 MHz
	    //    PLLMUL = 9 (8MHz * 9 = 72MHz)
	    RCC->CFGR |= RCC_CFGR_PLLMULL9; // PLL multiplier = 9
 8004462:	4b1b      	ldr	r3, [pc, #108]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	4a1a      	ldr	r2, [pc, #104]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 8004468:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 800446c:	6053      	str	r3, [r2, #4]
	    // 3. Select HSE as PLL source
	    RCC->CFGR |= RCC_CFGR_PLLSRC;   // PLL source = HSE
 800446e:	4b18      	ldr	r3, [pc, #96]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4a17      	ldr	r2, [pc, #92]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 8004474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004478:	6053      	str	r3, [r2, #4]
	    // 4. Set APB1 Prescaler to 2 (PCLK1 = 72MHz / 2 = 36MHz)
	    RCC->CFGR |= RCC_CFGR_PPRE1_2;  // APB1 prescaler = 2 (36MHz)
 800447a:	4b15      	ldr	r3, [pc, #84]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4a14      	ldr	r2, [pc, #80]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 8004480:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004484:	6053      	str	r3, [r2, #4]
	    // 5. Set APB2 Prescaler to 1 (PCLK2 = 72MHz, no division)
	    RCC->CFGR &= ~RCC_CFGR_PPRE2;   // APB2 prescaler = 1 (72MHz)
 8004486:	4b12      	ldr	r3, [pc, #72]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	4a11      	ldr	r2, [pc, #68]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 800448c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004490:	6053      	str	r3, [r2, #4]
	    // 6. Enable PLL and wait until ready
	    RCC->CR |= RCC_CR_PLLON;
 8004492:	4b0f      	ldr	r3, [pc, #60]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a0e      	ldr	r2, [pc, #56]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 8004498:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800449c:	6013      	str	r3, [r2, #0]
	    while (!(RCC->CR & RCC_CR_PLLRDY));
 800449e:	bf00      	nop
 80044a0:	4b0b      	ldr	r3, [pc, #44]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f9      	beq.n	80044a0 <system_clock_init_to_72MHZ+0x74>
	     // 7. Switch SYSCLK to PLL
	    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80044ac:	4b08      	ldr	r3, [pc, #32]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	4a07      	ldr	r2, [pc, #28]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 80044b2:	f043 0302 	orr.w	r3, r3, #2
 80044b6:	6053      	str	r3, [r2, #4]
	    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80044b8:	bf00      	nop
 80044ba:	4b05      	ldr	r3, [pc, #20]	@ (80044d0 <system_clock_init_to_72MHZ+0xa4>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d1f9      	bne.n	80044ba <system_clock_init_to_72MHZ+0x8e>
}
 80044c6:	bf00      	nop
 80044c8:	4618      	mov	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40022000 	.word	0x40022000

080044d8 <get_SYSCLK_freq>:
uint32_t get_SYSCLK_freq(void) {
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
    uint32_t sysclk_source, pllmul, prediv, pllclk;
    uint32_t HSE_Value = 8000000; // External crystal (adjust if different)
 80044de:	4b26      	ldr	r3, [pc, #152]	@ (8004578 <get_SYSCLK_freq+0xa0>)
 80044e0:	60bb      	str	r3, [r7, #8]
    uint32_t HSI_Value = 8000000; // Internal RC
 80044e2:	4b25      	ldr	r3, [pc, #148]	@ (8004578 <get_SYSCLK_freq+0xa0>)
 80044e4:	607b      	str	r3, [r7, #4]
    sysclk_source = (RCC->CFGR >> 2) & 0x3;  // SWS bits
 80044e6:	4b25      	ldr	r3, [pc, #148]	@ (800457c <get_SYSCLK_freq+0xa4>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	089b      	lsrs	r3, r3, #2
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	603b      	str	r3, [r7, #0]
    switch (sysclk_source) {
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d00d      	beq.n	8004514 <get_SYSCLK_freq+0x3c>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d835      	bhi.n	800456a <get_SYSCLK_freq+0x92>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <get_SYSCLK_freq+0x34>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d002      	beq.n	8004510 <get_SYSCLK_freq+0x38>
 800450a:	e02e      	b.n	800456a <get_SYSCLK_freq+0x92>
        case 0x00: // HSI
            return HSI_Value;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	e02d      	b.n	800456c <get_SYSCLK_freq+0x94>
        case 0x01: // HSE
            return HSE_Value;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	e02b      	b.n	800456c <get_SYSCLK_freq+0x94>
        case 0x02: // PLL
            // PLL source
            if (RCC->CFGR & (1 << 16)) {
 8004514:	4b19      	ldr	r3, [pc, #100]	@ (800457c <get_SYSCLK_freq+0xa4>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d010      	beq.n	8004542 <get_SYSCLK_freq+0x6a>
                // HSE as PLL source
                if (RCC->CFGR & (1 << 17))
 8004520:	4b16      	ldr	r3, [pc, #88]	@ (800457c <get_SYSCLK_freq+0xa4>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <get_SYSCLK_freq+0x5a>
                    prediv = 2;   // HSE/2
 800452c:	2302      	movs	r3, #2
 800452e:	613b      	str	r3, [r7, #16]
 8004530:	e001      	b.n	8004536 <get_SYSCLK_freq+0x5e>
                else
                    prediv = 1;   // HSE
 8004532:	2301      	movs	r3, #1
 8004534:	613b      	str	r3, [r7, #16]
                pllclk = HSE_Value / prediv;
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	fbb2 f3f3 	udiv	r3, r2, r3
 800453e:	60fb      	str	r3, [r7, #12]
 8004540:	e002      	b.n	8004548 <get_SYSCLK_freq+0x70>
            } else {
                // HSI/2 as PLL source
                pllclk = HSI_Value / 2; // 4 MHz
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	085b      	lsrs	r3, r3, #1
 8004546:	60fb      	str	r3, [r7, #12]
            }

            // PLL multiplier
            pllmul = ((RCC->CFGR >> 18) & 0xF) + 2;
 8004548:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <get_SYSCLK_freq+0xa4>)
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	0c9b      	lsrs	r3, r3, #18
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	3302      	adds	r3, #2
 8004554:	617b      	str	r3, [r7, #20]
            // Note: value 0b1101 = x13, 0b1110 = x14, 0b1111 = x16
            if (pllmul == 15) pllmul = 16; // adjust for 0b1111 special case
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b0f      	cmp	r3, #15
 800455a:	d101      	bne.n	8004560 <get_SYSCLK_freq+0x88>
 800455c:	2310      	movs	r3, #16
 800455e:	617b      	str	r3, [r7, #20]

            return pllclk * pllmul;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	fb02 f303 	mul.w	r3, r2, r3
 8004568:	e000      	b.n	800456c <get_SYSCLK_freq+0x94>
        default:
            return HSI_Value; // fallback
 800456a:	687b      	ldr	r3, [r7, #4]
    }
}
 800456c:	4618      	mov	r0, r3
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	007a1200 	.word	0x007a1200
 800457c:	40021000 	.word	0x40021000

08004580 <get_AHB_freq>:
uint32_t get_AHB_freq(void) {
 8004580:	b5b0      	push	{r4, r5, r7, lr}
 8004582:	b092      	sub	sp, #72	@ 0x48
 8004584:	af00      	add	r7, sp, #0
    uint32_t presc_table[16] = {1,1,1,1,1,1,1,1,2,4,8,16,64,128,256,512};
 8004586:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <get_AHB_freq+0x4c>)
 8004588:	1d3c      	adds	r4, r7, #4
 800458a:	461d      	mov	r5, r3
 800458c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800458e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004598:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800459c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t hpre = (RCC->CFGR >> 4) & 0xF;
 80045a0:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <get_AHB_freq+0x50>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	647b      	str	r3, [r7, #68]	@ 0x44
    return get_SYSCLK_freq() / presc_table[hpre];
 80045ac:	f7ff ff94 	bl	80044d8 <get_SYSCLK_freq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	3348      	adds	r3, #72	@ 0x48
 80045b8:	443b      	add	r3, r7
 80045ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80045be:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3748      	adds	r7, #72	@ 0x48
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bdb0      	pop	{r4, r5, r7, pc}
 80045ca:	bf00      	nop
 80045cc:	0800aaf4 	.word	0x0800aaf4
 80045d0:	40021000 	.word	0x40021000

080045d4 <get_APB1_freq>:

uint32_t get_APB1_freq(void) {
 80045d4:	b5b0      	push	{r4, r5, r7, lr}
 80045d6:	b08a      	sub	sp, #40	@ 0x28
 80045d8:	af00      	add	r7, sp, #0
    uint32_t presc_table[8] = {1,1,1,1,2,4,8,16};
 80045da:	4b0f      	ldr	r3, [pc, #60]	@ (8004618 <get_APB1_freq+0x44>)
 80045dc:	1d3c      	adds	r4, r7, #4
 80045de:	461d      	mov	r5, r3
 80045e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80045e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t ppre1 = (RCC->CFGR >> 8) & 0x7;
 80045ec:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <get_APB1_freq+0x48>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	0a1b      	lsrs	r3, r3, #8
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
    return get_AHB_freq() / presc_table[ppre1];
 80045f8:	f7ff ffc2 	bl	8004580 <get_AHB_freq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	3328      	adds	r3, #40	@ 0x28
 8004604:	443b      	add	r3, r7
 8004606:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800460a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800460e:	4618      	mov	r0, r3
 8004610:	3728      	adds	r7, #40	@ 0x28
 8004612:	46bd      	mov	sp, r7
 8004614:	bdb0      	pop	{r4, r5, r7, pc}
 8004616:	bf00      	nop
 8004618:	0800ab34 	.word	0x0800ab34
 800461c:	40021000 	.word	0x40021000

08004620 <get_APB2_freq>:

uint32_t get_APB2_freq(void) {
 8004620:	b5b0      	push	{r4, r5, r7, lr}
 8004622:	b08a      	sub	sp, #40	@ 0x28
 8004624:	af00      	add	r7, sp, #0
    uint32_t presc_table[8] = {1,1,1,1,2,4,8,16};
 8004626:	4b0f      	ldr	r3, [pc, #60]	@ (8004664 <get_APB2_freq+0x44>)
 8004628:	1d3c      	adds	r4, r7, #4
 800462a:	461d      	mov	r5, r3
 800462c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800462e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004630:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t ppre2 = (RCC->CFGR >> 11) & 0x7;
 8004638:	4b0b      	ldr	r3, [pc, #44]	@ (8004668 <get_APB2_freq+0x48>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	0adb      	lsrs	r3, r3, #11
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	627b      	str	r3, [r7, #36]	@ 0x24
    return get_AHB_freq() / presc_table[ppre2];
 8004644:	f7ff ff9c 	bl	8004580 <get_AHB_freq>
 8004648:	4602      	mov	r2, r0
 800464a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	3328      	adds	r3, #40	@ 0x28
 8004650:	443b      	add	r3, r7
 8004652:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8004656:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800465a:	4618      	mov	r0, r3
 800465c:	3728      	adds	r7, #40	@ 0x28
 800465e:	46bd      	mov	sp, r7
 8004660:	bdb0      	pop	{r4, r5, r7, pc}
 8004662:	bf00      	nop
 8004664:	0800ab34 	.word	0x0800ab34
 8004668:	40021000 	.word	0x40021000

0800466c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004670:	bf00      	nop
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <Init_tasks>:

#include"extern_file_declarations.h"
#define max_tasks 10
task_timer timer[max_tasks];

void Init_tasks(void){
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
	for(int i=0; i<max_tasks; i++){
 800467e:	2300      	movs	r3, #0
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	e024      	b.n	80046ce <Init_tasks+0x56>
		timer[i].period_ms = 0;
 8004684:	4a16      	ldr	r2, [pc, #88]	@ (80046e0 <Init_tasks+0x68>)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	4413      	add	r3, r2
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
		timer[i].last_time_ms = 0;
 8004690:	4a13      	ldr	r2, [pc, #76]	@ (80046e0 <Init_tasks+0x68>)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	4413      	add	r3, r2
 8004698:	3304      	adds	r3, #4
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
		timer[i].enable = 0;
 800469e:	4a10      	ldr	r2, [pc, #64]	@ (80046e0 <Init_tasks+0x68>)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	4413      	add	r3, r2
 80046a6:	330c      	adds	r3, #12
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
		timer[i].task_fn = 0;
 80046ac:	4a0c      	ldr	r2, [pc, #48]	@ (80046e0 <Init_tasks+0x68>)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	4413      	add	r3, r2
 80046b4:	3308      	adds	r3, #8
 80046b6:	2200      	movs	r2, #0
 80046b8:	601a      	str	r2, [r3, #0]
		timer[i].one_time_execute = 0;
 80046ba:	4a09      	ldr	r2, [pc, #36]	@ (80046e0 <Init_tasks+0x68>)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	4413      	add	r3, r2
 80046c2:	330d      	adds	r3, #13
 80046c4:	2200      	movs	r2, #0
 80046c6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<max_tasks; i++){
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3301      	adds	r3, #1
 80046cc:	607b      	str	r3, [r7, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b09      	cmp	r3, #9
 80046d2:	ddd7      	ble.n	8004684 <Init_tasks+0xc>
	}
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	20000558 	.word	0x20000558

080046e4 <Register_task>:

int Register_task(uint32_t period_ms, TaskFunction task_fn){
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
	for(int i=0; i<max_tasks; i++){
 80046ee:	2300      	movs	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	e037      	b.n	8004764 <Register_task+0x80>
		if(!timer[i].enable && timer[i].task_fn == 0){
 80046f4:	4a20      	ldr	r2, [pc, #128]	@ (8004778 <Register_task+0x94>)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	4413      	add	r3, r2
 80046fc:	330c      	adds	r3, #12
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d12c      	bne.n	800475e <Register_task+0x7a>
 8004704:	4a1c      	ldr	r2, [pc, #112]	@ (8004778 <Register_task+0x94>)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	011b      	lsls	r3, r3, #4
 800470a:	4413      	add	r3, r2
 800470c:	3308      	adds	r3, #8
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d124      	bne.n	800475e <Register_task+0x7a>
			timer[i].enable =1;
 8004714:	4a18      	ldr	r2, [pc, #96]	@ (8004778 <Register_task+0x94>)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	4413      	add	r3, r2
 800471c:	330c      	adds	r3, #12
 800471e:	2201      	movs	r2, #1
 8004720:	701a      	strb	r2, [r3, #0]
			timer[i].last_time_ms = milli_sec_tick;
 8004722:	4b16      	ldr	r3, [pc, #88]	@ (800477c <Register_task+0x98>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4914      	ldr	r1, [pc, #80]	@ (8004778 <Register_task+0x94>)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	440b      	add	r3, r1
 800472e:	3304      	adds	r3, #4
 8004730:	601a      	str	r2, [r3, #0]
			timer[i].one_time_execute = 0;
 8004732:	4a11      	ldr	r2, [pc, #68]	@ (8004778 <Register_task+0x94>)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	011b      	lsls	r3, r3, #4
 8004738:	4413      	add	r3, r2
 800473a:	330d      	adds	r3, #13
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]
			timer[i].period_ms = period_ms;
 8004740:	4a0d      	ldr	r2, [pc, #52]	@ (8004778 <Register_task+0x94>)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	4413      	add	r3, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	601a      	str	r2, [r3, #0]
			timer[i].task_fn = task_fn;
 800474c:	4a0a      	ldr	r2, [pc, #40]	@ (8004778 <Register_task+0x94>)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	4413      	add	r3, r2
 8004754:	3308      	adds	r3, #8
 8004756:	683a      	ldr	r2, [r7, #0]
 8004758:	601a      	str	r2, [r3, #0]
			return i;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	e007      	b.n	800476e <Register_task+0x8a>
	for(int i=0; i<max_tasks; i++){
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3301      	adds	r3, #1
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b09      	cmp	r3, #9
 8004768:	ddc4      	ble.n	80046f4 <Register_task+0x10>
		}
	}
	return -1;
 800476a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800476e:	4618      	mov	r0, r3
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr
 8004778:	20000558 	.word	0x20000558
 800477c:	20000550 	.word	0x20000550

08004780 <Run_all_tasks>:
		}
	}
	return -1;
}

void Run_all_tasks(void){
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
	for(int i=0; i<max_tasks; i++){
 8004786:	2300      	movs	r3, #0
 8004788:	607b      	str	r3, [r7, #4]
 800478a:	e03c      	b.n	8004806 <Run_all_tasks+0x86>
		if(timer[i].enable && timer[i].task_fn != 0){
 800478c:	4a22      	ldr	r2, [pc, #136]	@ (8004818 <Run_all_tasks+0x98>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	4413      	add	r3, r2
 8004794:	330c      	adds	r3, #12
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d031      	beq.n	8004800 <Run_all_tasks+0x80>
 800479c:	4a1e      	ldr	r2, [pc, #120]	@ (8004818 <Run_all_tasks+0x98>)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	4413      	add	r3, r2
 80047a4:	3308      	adds	r3, #8
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d029      	beq.n	8004800 <Run_all_tasks+0x80>
			if(milli_sec_tick - timer[i].last_time_ms > timer[i].period_ms){
 80047ac:	4b1b      	ldr	r3, [pc, #108]	@ (800481c <Run_all_tasks+0x9c>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	4919      	ldr	r1, [pc, #100]	@ (8004818 <Run_all_tasks+0x98>)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	440b      	add	r3, r1
 80047b8:	3304      	adds	r3, #4
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	1ad2      	subs	r2, r2, r3
 80047be:	4916      	ldr	r1, [pc, #88]	@ (8004818 <Run_all_tasks+0x98>)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	440b      	add	r3, r1
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d919      	bls.n	8004800 <Run_all_tasks+0x80>
				timer[i].last_time_ms = milli_sec_tick;
 80047cc:	4b13      	ldr	r3, [pc, #76]	@ (800481c <Run_all_tasks+0x9c>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	4911      	ldr	r1, [pc, #68]	@ (8004818 <Run_all_tasks+0x98>)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	440b      	add	r3, r1
 80047d8:	3304      	adds	r3, #4
 80047da:	601a      	str	r2, [r3, #0]
				timer[i].task_fn();
 80047dc:	4a0e      	ldr	r2, [pc, #56]	@ (8004818 <Run_all_tasks+0x98>)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	4413      	add	r3, r2
 80047e4:	3308      	adds	r3, #8
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4798      	blx	r3
				if(timer[i].one_time_execute==1){
 80047ea:	4a0b      	ldr	r2, [pc, #44]	@ (8004818 <Run_all_tasks+0x98>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	4413      	add	r3, r2
 80047f2:	330d      	adds	r3, #13
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d102      	bne.n	8004800 <Run_all_tasks+0x80>
					Remove_task(i);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f810 	bl	8004820 <Remove_task>
	for(int i=0; i<max_tasks; i++){
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3301      	adds	r3, #1
 8004804:	607b      	str	r3, [r7, #4]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b09      	cmp	r3, #9
 800480a:	ddbf      	ble.n	800478c <Run_all_tasks+0xc>
				}
			}
		}
	}
}
 800480c:	bf00      	nop
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000558 	.word	0x20000558
 800481c:	20000550 	.word	0x20000550

08004820 <Remove_task>:

void Remove_task(int task_id){
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	if(task_id>=0 && task_id<max_tasks){
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	db24      	blt.n	8004878 <Remove_task+0x58>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b09      	cmp	r3, #9
 8004832:	dc21      	bgt.n	8004878 <Remove_task+0x58>
		timer[task_id].enable = 0;
 8004834:	4a13      	ldr	r2, [pc, #76]	@ (8004884 <Remove_task+0x64>)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	4413      	add	r3, r2
 800483c:	330c      	adds	r3, #12
 800483e:	2200      	movs	r2, #0
 8004840:	701a      	strb	r2, [r3, #0]
		timer[task_id].last_time_ms = 0;
 8004842:	4a10      	ldr	r2, [pc, #64]	@ (8004884 <Remove_task+0x64>)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	4413      	add	r3, r2
 800484a:	3304      	adds	r3, #4
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]
		timer[task_id].one_time_execute = 0;
 8004850:	4a0c      	ldr	r2, [pc, #48]	@ (8004884 <Remove_task+0x64>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	4413      	add	r3, r2
 8004858:	330d      	adds	r3, #13
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
		timer[task_id].period_ms = 0;
 800485e:	4a09      	ldr	r2, [pc, #36]	@ (8004884 <Remove_task+0x64>)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	4413      	add	r3, r2
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
		timer[task_id].task_fn = 0;
 800486a:	4a06      	ldr	r2, [pc, #24]	@ (8004884 <Remove_task+0x64>)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	4413      	add	r3, r2
 8004872:	3308      	adds	r3, #8
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
	}
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000558 	.word	0x20000558

08004888 <uart_init>:
#include <stdarg.h>
#include"extern_file_declarations.h"
#include"can.h"
#define UART_PRINTF_BUFFER_SIZE 100
extern uint32_t get_APB1_freq(void) ;
STATUS uart_init(uint32_t Baud_Rate){
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
	 // Enable clocks
	    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;   // GPIOA
 8004890:	4b25      	ldr	r3, [pc, #148]	@ (8004928 <uart_init+0xa0>)
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	4a24      	ldr	r2, [pc, #144]	@ (8004928 <uart_init+0xa0>)
 8004896:	f043 0304 	orr.w	r3, r3, #4
 800489a:	6193      	str	r3, [r2, #24]
	    RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1
 800489c:	4b22      	ldr	r3, [pc, #136]	@ (8004928 <uart_init+0xa0>)
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	4a21      	ldr	r2, [pc, #132]	@ (8004928 <uart_init+0xa0>)
 80048a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048a6:	6193      	str	r3, [r2, #24]
	    // PA9 = TX (AF push-pull), PA10 = RX (input floating)
	    GPIOA->CRH &= ~((0xF << (4 * 1)) | (0xF << (4 * 2))); // clear CNF/MODE for PA9, PA10
 80048a8:	4b20      	ldr	r3, [pc, #128]	@ (800492c <uart_init+0xa4>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4a1f      	ldr	r2, [pc, #124]	@ (800492c <uart_init+0xa4>)
 80048ae:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80048b2:	6053      	str	r3, [r2, #4]
	    GPIOA->CRH |=  (0xB << (4 * 1)); // PA9 = AF PP, 50 MHz
 80048b4:	4b1d      	ldr	r3, [pc, #116]	@ (800492c <uart_init+0xa4>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4a1c      	ldr	r2, [pc, #112]	@ (800492c <uart_init+0xa4>)
 80048ba:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80048be:	6053      	str	r3, [r2, #4]
	    GPIOA->CRH |=  (0x4 << (4 * 2)); // PA10 = input floating
 80048c0:	4b1a      	ldr	r3, [pc, #104]	@ (800492c <uart_init+0xa4>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	4a19      	ldr	r2, [pc, #100]	@ (800492c <uart_init+0xa4>)
 80048c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048ca:	6053      	str	r3, [r2, #4]
	    // Reset USART1
	    USART1->CR1 = 0;
 80048cc:	4b18      	ldr	r3, [pc, #96]	@ (8004930 <uart_init+0xa8>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	60da      	str	r2, [r3, #12]
	    // Calculate baudrate divisor
	    uint32_t pclk2 = get_APB2_freq();
 80048d2:	f7ff fea5 	bl	8004620 <get_APB2_freq>
 80048d6:	60f8      	str	r0, [r7, #12]
	    if (pclk2 == 0 || Baud_Rate == 0) {
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <uart_init+0x5c>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <uart_init+0x60>
	        return RY_NOT_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	e01b      	b.n	8004920 <uart_init+0x98>
	    }
	    uint32_t usartdiv = (pclk2 + (Baud_Rate/2)) / Baud_Rate; // nearest
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	085a      	lsrs	r2, r3, #1
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	441a      	add	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f6:	60bb      	str	r3, [r7, #8]
	    USART1->BRR = usartdiv;
 80048f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004930 <uart_init+0xa8>)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6093      	str	r3, [r2, #8]
	    // Enable USART, TX, RX
	    USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 80048fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004930 <uart_init+0xa8>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	4a0b      	ldr	r2, [pc, #44]	@ (8004930 <uart_init+0xa8>)
 8004904:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004908:	f043 030c 	orr.w	r3, r3, #12
 800490c:	60d3      	str	r3, [r2, #12]

	    // Verify configuration
	    if (!(USART1->CR1 & USART_CR1_UE)) {
 800490e:	4b08      	ldr	r3, [pc, #32]	@ (8004930 <uart_init+0xa8>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <uart_init+0x96>
	        return RY_NOT_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	e000      	b.n	8004920 <uart_init+0x98>
	    }
	    return RY_OK;
 800491e:	2301      	movs	r3, #1
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	40021000 	.word	0x40021000
 800492c:	40010800 	.word	0x40010800
 8004930:	40013800 	.word	0x40013800

08004934 <uart3_Init>:
STATUS uart3_Init(uint32_t baudrate) {
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
    // 1. Enable clocks for GPIOB and USART3
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;   // Enable GPIOB clock
 800493c:	4b23      	ldr	r3, [pc, #140]	@ (80049cc <uart3_Init+0x98>)
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	4a22      	ldr	r2, [pc, #136]	@ (80049cc <uart3_Init+0x98>)
 8004942:	f043 0308 	orr.w	r3, r3, #8
 8004946:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_USART3EN; // Enable USART3 clock
 8004948:	4b20      	ldr	r3, [pc, #128]	@ (80049cc <uart3_Init+0x98>)
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	4a1f      	ldr	r2, [pc, #124]	@ (80049cc <uart3_Init+0x98>)
 800494e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004952:	61d3      	str	r3, [r2, #28]

    // 2. Configure PB10 as Alternate Function Push-Pull (TX), 50 MHz
    GPIOB->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
 8004954:	4b1e      	ldr	r3, [pc, #120]	@ (80049d0 <uart3_Init+0x9c>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4a1d      	ldr	r2, [pc, #116]	@ (80049d0 <uart3_Init+0x9c>)
 800495a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800495e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x03 << GPIO_CRH_MODE10_Pos); // Output mode, max speed 50 MHz
 8004960:	4b1b      	ldr	r3, [pc, #108]	@ (80049d0 <uart3_Init+0x9c>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	4a1a      	ldr	r2, [pc, #104]	@ (80049d0 <uart3_Init+0x9c>)
 8004966:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800496a:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x02 << GPIO_CRH_CNF10_Pos);  // AF push-pull
 800496c:	4b18      	ldr	r3, [pc, #96]	@ (80049d0 <uart3_Init+0x9c>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	4a17      	ldr	r2, [pc, #92]	@ (80049d0 <uart3_Init+0x9c>)
 8004972:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004976:	6053      	str	r3, [r2, #4]

    // 3. Configure PB11 as Input Floating (RX)
    GPIOB->CRH &= ~(GPIO_CRH_MODE11 | GPIO_CRH_CNF11);
 8004978:	4b15      	ldr	r3, [pc, #84]	@ (80049d0 <uart3_Init+0x9c>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4a14      	ldr	r2, [pc, #80]	@ (80049d0 <uart3_Init+0x9c>)
 800497e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004982:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x01 << GPIO_CRH_CNF11_Pos);  // Floating input
 8004984:	4b12      	ldr	r3, [pc, #72]	@ (80049d0 <uart3_Init+0x9c>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4a11      	ldr	r2, [pc, #68]	@ (80049d0 <uart3_Init+0x9c>)
 800498a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800498e:	6053      	str	r3, [r2, #4]

    // 4. USART configuration
    USART3->CR1 = 0;  // Reset control register
 8004990:	4b10      	ldr	r3, [pc, #64]	@ (80049d4 <uart3_Init+0xa0>)
 8004992:	2200      	movs	r2, #0
 8004994:	60da      	str	r2, [r3, #12]

    // Baud rate = Fclk / (16 * USARTDIV)
    // Example: PCLK1 = 36 MHz, baud = 115200
    // USARTDIV = 36MHz / (16 * 115200) ≈ 19.53
    // DIV_Mantissa = 19, DIV_Fraction = 0.53*16 ≈ 8
    uint32_t pclk = 36000000; // APB1 clock is 36 MHz (default with 72 MHz SYSCLK)
 8004996:	4b10      	ldr	r3, [pc, #64]	@ (80049d8 <uart3_Init+0xa4>)
 8004998:	60fb      	str	r3, [r7, #12]
    uint32_t usartdiv = (pclk + (baudrate/2)) / baudrate; // scaled
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	085a      	lsrs	r2, r3, #1
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	441a      	add	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	60bb      	str	r3, [r7, #8]
    USART3->BRR = usartdiv;
 80049aa:	4a0a      	ldr	r2, [pc, #40]	@ (80049d4 <uart3_Init+0xa0>)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6093      	str	r3, [r2, #8]

    // Enable USART, TX, RX
    USART3->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80049b0:	4b08      	ldr	r3, [pc, #32]	@ (80049d4 <uart3_Init+0xa0>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	4a07      	ldr	r2, [pc, #28]	@ (80049d4 <uart3_Init+0xa0>)
 80049b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80049ba:	f043 030c 	orr.w	r3, r3, #12
 80049be:	60d3      	str	r3, [r2, #12]
    return RY_OK;
 80049c0:	2301      	movs	r3, #1
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40010c00 	.word	0x40010c00
 80049d4:	40004800 	.word	0x40004800
 80049d8:	02255100 	.word	0x02255100

080049dc <uart_print>:
void uart_print(uint8_t data)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	71fb      	strb	r3, [r7, #7]
    // Wait until TXE (Transmit Data Register Empty)
    while (!(USART3->SR & USART_SR_TXE)) {  }
 80049e6:	bf00      	nop
 80049e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a14 <uart_print+0x38>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0f9      	beq.n	80049e8 <uart_print+0xc>
    USART3->DR = data;
 80049f4:	4a07      	ldr	r2, [pc, #28]	@ (8004a14 <uart_print+0x38>)
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	6053      	str	r3, [r2, #4]
    while (!(USART3->SR & USART_SR_TC)) {  }
 80049fa:	bf00      	nop
 80049fc:	4b05      	ldr	r3, [pc, #20]	@ (8004a14 <uart_print+0x38>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0f9      	beq.n	80049fc <uart_print+0x20>
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr
 8004a14:	40004800 	.word	0x40004800

08004a18 <uart_print_str>:
void uart_print_str(const char *str)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8004a20:	e006      	b.n	8004a30 <uart_print_str+0x18>
    	uart_print(*str++);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff ffd6 	bl	80049dc <uart_print>
    while (*str) {
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f4      	bne.n	8004a22 <uart_print_str+0xa>
    }
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
	...

08004a44 <uart_send_double>:
void uart_send_double(double value, uint8_t decimal_places)
{
 8004a44:	b5b0      	push	{r4, r5, r7, lr}
 8004a46:	b09c      	sub	sp, #112	@ 0x70
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	71fb      	strb	r3, [r7, #7]
    char buf[32]; // Larger buffer for double
    int i = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // Handle negative
    if (value < 0) {
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	f04f 0300 	mov.w	r3, #0
 8004a5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a62:	f7fb ffab 	bl	80009bc <__aeabi_dcmplt>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00d      	beq.n	8004a88 <uart_send_double+0x44>
        buf[i++] = '-';
 8004a6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004a72:	3370      	adds	r3, #112	@ 0x70
 8004a74:	443b      	add	r3, r7
 8004a76:	222d      	movs	r2, #45	@ 0x2d
 8004a78:	f803 2c4c 	strb.w	r2, [r3, #-76]
        value = -value;
 8004a7c:	68bc      	ldr	r4, [r7, #8]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8004a84:	e9c7 4502 	strd	r4, r5, [r7, #8]
    }

    // Integer part
    long long int_part = (long long)value;
 8004a88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a8c:	f7fc fb20 	bl	80010d0 <__aeabi_d2lz>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    double frac = value - (double)int_part;
 8004a98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8004a9c:	f7fb fcee 	bl	800047c <__aeabi_l2d>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004aa8:	f7fb fb5e 	bl	8000168 <__aeabi_dsub>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    // Convert integer part to string
    char int_buf[20];
    int j = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	657b      	str	r3, [r7, #84]	@ 0x54
    do {
        int_buf[j++] = '0' + (int_part % 10);
 8004ab8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8004abc:	f04f 020a 	mov.w	r2, #10
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	f7fc fab4 	bl	8001030 <__aeabi_ldivmod>
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004acc:	1c59      	adds	r1, r3, #1
 8004ace:	6579      	str	r1, [r7, #84]	@ 0x54
 8004ad0:	3230      	adds	r2, #48	@ 0x30
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	3370      	adds	r3, #112	@ 0x70
 8004ad6:	443b      	add	r3, r7
 8004ad8:	f803 2c60 	strb.w	r2, [r3, #-96]
        int_part /= 10;
 8004adc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8004ae0:	f04f 020a 	mov.w	r2, #10
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	f7fc faa2 	bl	8001030 <__aeabi_ldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    } while (int_part > 0);
 8004af4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8004af8:	2a01      	cmp	r2, #1
 8004afa:	f173 0300 	sbcs.w	r3, r3, #0
 8004afe:	dadb      	bge.n	8004ab8 <uart_send_double+0x74>

    // Reverse digits into buf
    for (int k = j - 1; k >= 0; k--) {
 8004b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b02:	3b01      	subs	r3, #1
 8004b04:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b06:	e00e      	b.n	8004b26 <uart_send_double+0xe2>
        buf[i++] = int_buf[k];
 8004b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b0e:	f107 0110 	add.w	r1, r7, #16
 8004b12:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b14:	440a      	add	r2, r1
 8004b16:	7812      	ldrb	r2, [r2, #0]
 8004b18:	3370      	adds	r3, #112	@ 0x70
 8004b1a:	443b      	add	r3, r7
 8004b1c:	f803 2c4c 	strb.w	r2, [r3, #-76]
    for (int k = j - 1; k >= 0; k--) {
 8004b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b22:	3b01      	subs	r3, #1
 8004b24:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	daed      	bge.n	8004b08 <uart_send_double+0xc4>
    }

    buf[i++] = '.'; // decimal point
 8004b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b32:	3370      	adds	r3, #112	@ 0x70
 8004b34:	443b      	add	r3, r7
 8004b36:	222e      	movs	r2, #46	@ 0x2e
 8004b38:	f803 2c4c 	strb.w	r2, [r3, #-76]

    // Fractional part
    for (int k = 0; k < decimal_places; k++) {
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b40:	e02b      	b.n	8004b9a <uart_send_double+0x156>
        frac *= 10;
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	4b22      	ldr	r3, [pc, #136]	@ (8004bd0 <uart_send_double+0x18c>)
 8004b48:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8004b4c:	f7fb fcc4 	bl	80004d8 <__aeabi_dmul>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
        int digit = (int)frac;
 8004b58:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8004b5c:	f7fb ff6c 	bl	8000a38 <__aeabi_d2iz>
 8004b60:	4603      	mov	r3, r0
 8004b62:	647b      	str	r3, [r7, #68]	@ 0x44
        buf[i++] = '0' + digit;
 8004b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b6a:	1c59      	adds	r1, r3, #1
 8004b6c:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8004b6e:	3230      	adds	r2, #48	@ 0x30
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	3370      	adds	r3, #112	@ 0x70
 8004b74:	443b      	add	r3, r7
 8004b76:	f803 2c4c 	strb.w	r2, [r3, #-76]
        frac -= digit;
 8004b7a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8004b7c:	f7fb fc42 	bl	8000404 <__aeabi_i2d>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8004b88:	f7fb faee 	bl	8000168 <__aeabi_dsub>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (int k = 0; k < decimal_places; k++) {
 8004b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b96:	3301      	adds	r3, #1
 8004b98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b9a:	79fb      	ldrb	r3, [r7, #7]
 8004b9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	dbcf      	blt.n	8004b42 <uart_send_double+0xfe>
    }

    // Send string over UART
    for (int k = 0; k < i; k++) {
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ba6:	e00a      	b.n	8004bbe <uart_send_double+0x17a>
    	uart_print(buf[k]);
 8004ba8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8004bac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bae:	4413      	add	r3, r2
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff ff12 	bl	80049dc <uart_print>
    for (int k = 0; k < i; k++) {
 8004bb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bba:	3301      	adds	r3, #1
 8004bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	dbf0      	blt.n	8004ba8 <uart_send_double+0x164>
    }
}
 8004bc6:	bf00      	nop
 8004bc8:	bf00      	nop
 8004bca:	3770      	adds	r7, #112	@ 0x70
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bdb0      	pop	{r4, r5, r7, pc}
 8004bd0:	40240000 	.word	0x40240000

08004bd4 <uart_send1>:
void uart_send1(const uint8_t *buf, size_t len) {
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < len; ++i) {
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	e00f      	b.n	8004c04 <uart_send1+0x30>
        while (!(USART1->SR & (1U << 7))) { /* busy wait */ } // TXE bit
 8004be4:	bf00      	nop
 8004be6:	4b10      	ldr	r3, [pc, #64]	@ (8004c28 <uart_send1+0x54>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f9      	beq.n	8004be6 <uart_send1+0x12>
        USART1->DR = (uint8_t)buf[i];
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004c28 <uart_send1+0x54>)
 8004bfc:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < len; ++i) {
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3301      	adds	r3, #1
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d3eb      	bcc.n	8004be4 <uart_send1+0x10>
    }
    while (!(USART1->SR & (1U << 6))) { /* wait TC */ } // TC bit
 8004c0c:	bf00      	nop
 8004c0e:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <uart_send1+0x54>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d0f9      	beq.n	8004c0e <uart_send1+0x3a>
}
 8004c1a:	bf00      	nop
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	40013800 	.word	0x40013800

08004c2c <uart_send>:
void uart_send(const uint8_t *buf, size_t len) {
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < len; ++i) {
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	e00f      	b.n	8004c5c <uart_send+0x30>
        // Wait until TXE (transmit data register empty)
        while (!(USART3->SR & (1U << 7))) { /* busy wait */ } // TXE bit
 8004c3c:	bf00      	nop
 8004c3e:	4b10      	ldr	r3, [pc, #64]	@ (8004c80 <uart_send+0x54>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d0f9      	beq.n	8004c3e <uart_send+0x12>
        // Write data (DR is 8-bit)
        USART3->DR = (uint8_t)buf[i];
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	781a      	ldrb	r2, [r3, #0]
 8004c52:	4b0b      	ldr	r3, [pc, #44]	@ (8004c80 <uart_send+0x54>)
 8004c54:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < len; ++i) {
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d3eb      	bcc.n	8004c3c <uart_send+0x10>
    }
    // Optionally wait for TC (transmission complete) if you need to ensure fully shifted out:
    while (!(USART3->SR & (1U << 6))) { /* wait TC */ } // TC bit
 8004c64:	bf00      	nop
 8004c66:	4b06      	ldr	r3, [pc, #24]	@ (8004c80 <uart_send+0x54>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0f9      	beq.n	8004c66 <uart_send+0x3a>
}
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
 8004c76:	3714      	adds	r7, #20
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bc80      	pop	{r7}
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40004800 	.word	0x40004800

08004c84 <send_id_data_only_over_uart>:
void send_id_data_only_over_uart(const can_frame_t *f) {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
    uint8_t buf[13];
    /* send id always as 4 bytes (LE) so ESP32 can read little-endian uint32_t */
    buf[3] = (uint8_t)(f->id & 0xFF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	73fb      	strb	r3, [r7, #15]
    buf[2] = (uint8_t)((f->id >> 8) & 0xFF);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	0a1b      	lsrs	r3, r3, #8
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	73bb      	strb	r3, [r7, #14]
    buf[1] = (uint8_t)((f->id >> 16) & 0xFF);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	0c1b      	lsrs	r3, r3, #16
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	737b      	strb	r3, [r7, #13]
    buf[0] = (uint8_t)((f->id >> 24) & 0xFF);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	0e1b      	lsrs	r3, r3, #24
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	733b      	strb	r3, [r7, #12]
    buf[4] = f->dlc;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	799b      	ldrb	r3, [r3, #6]
 8004cb6:	743b      	strb	r3, [r7, #16]
    /* copy 8 data bytes (if dlc<8 you still send 8 bytes - zeros ok) */
    for (int i = 0; i < 8; ++i) buf[5 + i] = f->data[i];
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	e00d      	b.n	8004cda <send_id_data_only_over_uart+0x56>
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	3305      	adds	r3, #5
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	3207      	adds	r2, #7
 8004cca:	7812      	ldrb	r2, [r2, #0]
 8004ccc:	3320      	adds	r3, #32
 8004cce:	443b      	add	r3, r7
 8004cd0:	f803 2c14 	strb.w	r2, [r3, #-20]
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	2b07      	cmp	r3, #7
 8004cde:	ddee      	ble.n	8004cbe <send_id_data_only_over_uart+0x3a>
    uart_send1(buf, sizeof(buf)); // 13 bytes
 8004ce0:	f107 030c 	add.w	r3, r7, #12
 8004ce4:	210d      	movs	r1, #13
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff ff74 	bl	8004bd4 <uart_send1>
}
 8004cec:	bf00      	nop
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <uart_printf>:
void uart_printf(const char *format, ...)
{
 8004cf4:	b40f      	push	{r0, r1, r2, r3}
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b0c2      	sub	sp, #264	@ 0x108
 8004cfa:	af00      	add	r7, sp, #0
    char buf[256];
    va_list ap;
    va_start(ap, format);
 8004cfc:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8004d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d08:	601a      	str	r2, [r3, #0]
    int n = vsnprintf(buf, sizeof(buf), format, ap);
 8004d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d12:	1d38      	adds	r0, r7, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8004d1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d1e:	f003 f80f 	bl	8007d40 <vsniprintf>
 8004d22:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    va_end(ap);
    if (n > 0) {
 8004d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	dd0f      	ble.n	8004d4e <uart_printf+0x5a>
        if ((size_t)n > sizeof(buf)) n = sizeof(buf);
 8004d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d36:	d903      	bls.n	8004d40 <uart_printf+0x4c>
 8004d38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        uart_send(buf, (size_t)n);
 8004d40:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8004d44:	1d3b      	adds	r3, r7, #4
 8004d46:	4611      	mov	r1, r2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7ff ff6f 	bl	8004c2c <uart_send>
    }
}
 8004d4e:	bf00      	nop
 8004d50:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8004d54:	46bd      	mov	sp, r7
 8004d56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d5a:	b004      	add	sp, #16
 8004d5c:	4770      	bx	lr
	...

08004d60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004d60:	f7ff fc84 	bl	800466c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d64:	480b      	ldr	r0, [pc, #44]	@ (8004d94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004d66:	490c      	ldr	r1, [pc, #48]	@ (8004d98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004d68:	4a0c      	ldr	r2, [pc, #48]	@ (8004d9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8004d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004d6c:	e002      	b.n	8004d74 <LoopCopyDataInit>

08004d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d72:	3304      	adds	r3, #4

08004d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d78:	d3f9      	bcc.n	8004d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d7a:	4a09      	ldr	r2, [pc, #36]	@ (8004da0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004d7c:	4c09      	ldr	r4, [pc, #36]	@ (8004da4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d80:	e001      	b.n	8004d86 <LoopFillZerobss>

08004d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d84:	3204      	adds	r2, #4

08004d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d88:	d3fb      	bcc.n	8004d82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004d8a:	f003 f83f 	bl	8007e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004d8e:	f7ff f837 	bl	8003e00 <main>
  bx lr
 8004d92:	4770      	bx	lr
  ldr r0, =_sdata
 8004d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d98:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8004d9c:	0800aee4 	.word	0x0800aee4
  ldr r2, =_sbss
 8004da0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004da4:	20000748 	.word	0x20000748

08004da8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004da8:	e7fe      	b.n	8004da8 <ADC1_2_IRQHandler>
	...

08004dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004db0:	4b08      	ldr	r3, [pc, #32]	@ (8004dd4 <HAL_Init+0x28>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a07      	ldr	r2, [pc, #28]	@ (8004dd4 <HAL_Init+0x28>)
 8004db6:	f043 0310 	orr.w	r3, r3, #16
 8004dba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dbc:	2003      	movs	r0, #3
 8004dbe:	f000 f919 	bl	8004ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004dc2:	200f      	movs	r0, #15
 8004dc4:	f000 f808 	bl	8004dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004dc8:	f7ff f98c 	bl	80040e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40022000 	.word	0x40022000

08004dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004de0:	4b12      	ldr	r3, [pc, #72]	@ (8004e2c <HAL_InitTick+0x54>)
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	4b12      	ldr	r3, [pc, #72]	@ (8004e30 <HAL_InitTick+0x58>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	4619      	mov	r1, r3
 8004dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8004df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 f931 	bl	800505e <HAL_SYSTICK_Config>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e00e      	b.n	8004e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b0f      	cmp	r3, #15
 8004e0a:	d80a      	bhi.n	8004e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	f000 f8f9 	bl	800500a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e18:	4a06      	ldr	r2, [pc, #24]	@ (8004e34 <HAL_InitTick+0x5c>)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	e000      	b.n	8004e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20000020 	.word	0x20000020
 8004e30:	20000028 	.word	0x20000028
 8004e34:	20000024 	.word	0x20000024

08004e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e3c:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <HAL_IncTick+0x1c>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <HAL_IncTick+0x20>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4413      	add	r3, r2
 8004e48:	4a03      	ldr	r2, [pc, #12]	@ (8004e58 <HAL_IncTick+0x20>)
 8004e4a:	6013      	str	r3, [r2, #0]
}
 8004e4c:	bf00      	nop
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr
 8004e54:	20000028 	.word	0x20000028
 8004e58:	200005f8 	.word	0x200005f8

08004e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004e78:	4013      	ands	r3, r2
 8004e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e8e:	4a04      	ldr	r2, [pc, #16]	@ (8004ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	60d3      	str	r3, [r2, #12]
}
 8004e94:	bf00      	nop
 8004e96:	3714      	adds	r7, #20
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bc80      	pop	{r7}
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	e000ed00 	.word	0xe000ed00

08004ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ea8:	4b04      	ldr	r3, [pc, #16]	@ (8004ebc <__NVIC_GetPriorityGrouping+0x18>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	0a1b      	lsrs	r3, r3, #8
 8004eae:	f003 0307 	and.w	r3, r3, #7
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	e000ed00 	.word	0xe000ed00

08004ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	db0b      	blt.n	8004eea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ed2:	79fb      	ldrb	r3, [r7, #7]
 8004ed4:	f003 021f 	and.w	r2, r3, #31
 8004ed8:	4906      	ldr	r1, [pc, #24]	@ (8004ef4 <__NVIC_EnableIRQ+0x34>)
 8004eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	2001      	movs	r0, #1
 8004ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr
 8004ef4:	e000e100 	.word	0xe000e100

08004ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	4603      	mov	r3, r0
 8004f00:	6039      	str	r1, [r7, #0]
 8004f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	db0a      	blt.n	8004f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	490c      	ldr	r1, [pc, #48]	@ (8004f44 <__NVIC_SetPriority+0x4c>)
 8004f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f16:	0112      	lsls	r2, r2, #4
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f20:	e00a      	b.n	8004f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	4908      	ldr	r1, [pc, #32]	@ (8004f48 <__NVIC_SetPriority+0x50>)
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	3b04      	subs	r3, #4
 8004f30:	0112      	lsls	r2, r2, #4
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	440b      	add	r3, r1
 8004f36:	761a      	strb	r2, [r3, #24]
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bc80      	pop	{r7}
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	e000e100 	.word	0xe000e100
 8004f48:	e000ed00 	.word	0xe000ed00

08004f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b089      	sub	sp, #36	@ 0x24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 0307 	and.w	r3, r3, #7
 8004f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f1c3 0307 	rsb	r3, r3, #7
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	bf28      	it	cs
 8004f6a:	2304      	movcs	r3, #4
 8004f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	3304      	adds	r3, #4
 8004f72:	2b06      	cmp	r3, #6
 8004f74:	d902      	bls.n	8004f7c <NVIC_EncodePriority+0x30>
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	3b03      	subs	r3, #3
 8004f7a:	e000      	b.n	8004f7e <NVIC_EncodePriority+0x32>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f80:	f04f 32ff 	mov.w	r2, #4294967295
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8a:	43da      	mvns	r2, r3
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	401a      	ands	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f94:	f04f 31ff 	mov.w	r1, #4294967295
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9e:	43d9      	mvns	r1, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fa4:	4313      	orrs	r3, r2
         );
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3724      	adds	r7, #36	@ 0x24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr

08004fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fc0:	d301      	bcc.n	8004fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e00f      	b.n	8004fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff0 <SysTick_Config+0x40>)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fce:	210f      	movs	r1, #15
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd4:	f7ff ff90 	bl	8004ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004fd8:	4b05      	ldr	r3, [pc, #20]	@ (8004ff0 <SysTick_Config+0x40>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004fde:	4b04      	ldr	r3, [pc, #16]	@ (8004ff0 <SysTick_Config+0x40>)
 8004fe0:	2207      	movs	r2, #7
 8004fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	e000e010 	.word	0xe000e010

08004ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f7ff ff2d 	bl	8004e5c <__NVIC_SetPriorityGrouping>
}
 8005002:	bf00      	nop
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800500a:	b580      	push	{r7, lr}
 800500c:	b086      	sub	sp, #24
 800500e:	af00      	add	r7, sp, #0
 8005010:	4603      	mov	r3, r0
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	607a      	str	r2, [r7, #4]
 8005016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005018:	2300      	movs	r3, #0
 800501a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800501c:	f7ff ff42 	bl	8004ea4 <__NVIC_GetPriorityGrouping>
 8005020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	68b9      	ldr	r1, [r7, #8]
 8005026:	6978      	ldr	r0, [r7, #20]
 8005028:	f7ff ff90 	bl	8004f4c <NVIC_EncodePriority>
 800502c:	4602      	mov	r2, r0
 800502e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005032:	4611      	mov	r1, r2
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff ff5f 	bl	8004ef8 <__NVIC_SetPriority>
}
 800503a:	bf00      	nop
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	4603      	mov	r3, r0
 800504a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800504c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff ff35 	bl	8004ec0 <__NVIC_EnableIRQ>
}
 8005056:	bf00      	nop
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7ff ffa2 	bl	8004fb0 <SysTick_Config>
 800506c:	4603      	mov	r3, r0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b02      	cmp	r3, #2
 800508e:	d005      	beq.n	800509c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2204      	movs	r2, #4
 8005094:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
 800509a:	e051      	b.n	8005140 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 020e 	bic.w	r2, r2, #14
 80050aa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0201 	bic.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a22      	ldr	r2, [pc, #136]	@ (800514c <HAL_DMA_Abort_IT+0xd4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d029      	beq.n	800511a <HAL_DMA_Abort_IT+0xa2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a21      	ldr	r2, [pc, #132]	@ (8005150 <HAL_DMA_Abort_IT+0xd8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d022      	beq.n	8005116 <HAL_DMA_Abort_IT+0x9e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005154 <HAL_DMA_Abort_IT+0xdc>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d01a      	beq.n	8005110 <HAL_DMA_Abort_IT+0x98>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a1e      	ldr	r2, [pc, #120]	@ (8005158 <HAL_DMA_Abort_IT+0xe0>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d012      	beq.n	800510a <HAL_DMA_Abort_IT+0x92>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a1c      	ldr	r2, [pc, #112]	@ (800515c <HAL_DMA_Abort_IT+0xe4>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d00a      	beq.n	8005104 <HAL_DMA_Abort_IT+0x8c>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005160 <HAL_DMA_Abort_IT+0xe8>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d102      	bne.n	80050fe <HAL_DMA_Abort_IT+0x86>
 80050f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80050fc:	e00e      	b.n	800511c <HAL_DMA_Abort_IT+0xa4>
 80050fe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005102:	e00b      	b.n	800511c <HAL_DMA_Abort_IT+0xa4>
 8005104:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005108:	e008      	b.n	800511c <HAL_DMA_Abort_IT+0xa4>
 800510a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800510e:	e005      	b.n	800511c <HAL_DMA_Abort_IT+0xa4>
 8005110:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005114:	e002      	b.n	800511c <HAL_DMA_Abort_IT+0xa4>
 8005116:	2310      	movs	r3, #16
 8005118:	e000      	b.n	800511c <HAL_DMA_Abort_IT+0xa4>
 800511a:	2301      	movs	r3, #1
 800511c:	4a11      	ldr	r2, [pc, #68]	@ (8005164 <HAL_DMA_Abort_IT+0xec>)
 800511e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005134:	2b00      	cmp	r3, #0
 8005136:	d003      	beq.n	8005140 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	4798      	blx	r3
    } 
  }
  return status;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40020008 	.word	0x40020008
 8005150:	4002001c 	.word	0x4002001c
 8005154:	40020030 	.word	0x40020030
 8005158:	40020044 	.word	0x40020044
 800515c:	40020058 	.word	0x40020058
 8005160:	4002006c 	.word	0x4002006c
 8005164:	40020000 	.word	0x40020000

08005168 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005176:	b2db      	uxtb	r3, r3
}
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr
	...

08005184 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005184:	b480      	push	{r7}
 8005186:	b08b      	sub	sp, #44	@ 0x2c
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800518e:	2300      	movs	r3, #0
 8005190:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005192:	2300      	movs	r3, #0
 8005194:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005196:	e169      	b.n	800546c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005198:	2201      	movs	r2, #1
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69fa      	ldr	r2, [r7, #28]
 80051a8:	4013      	ands	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	f040 8158 	bne.w	8005466 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	4a9a      	ldr	r2, [pc, #616]	@ (8005424 <HAL_GPIO_Init+0x2a0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d05e      	beq.n	800527e <HAL_GPIO_Init+0xfa>
 80051c0:	4a98      	ldr	r2, [pc, #608]	@ (8005424 <HAL_GPIO_Init+0x2a0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d875      	bhi.n	80052b2 <HAL_GPIO_Init+0x12e>
 80051c6:	4a98      	ldr	r2, [pc, #608]	@ (8005428 <HAL_GPIO_Init+0x2a4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d058      	beq.n	800527e <HAL_GPIO_Init+0xfa>
 80051cc:	4a96      	ldr	r2, [pc, #600]	@ (8005428 <HAL_GPIO_Init+0x2a4>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d86f      	bhi.n	80052b2 <HAL_GPIO_Init+0x12e>
 80051d2:	4a96      	ldr	r2, [pc, #600]	@ (800542c <HAL_GPIO_Init+0x2a8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d052      	beq.n	800527e <HAL_GPIO_Init+0xfa>
 80051d8:	4a94      	ldr	r2, [pc, #592]	@ (800542c <HAL_GPIO_Init+0x2a8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d869      	bhi.n	80052b2 <HAL_GPIO_Init+0x12e>
 80051de:	4a94      	ldr	r2, [pc, #592]	@ (8005430 <HAL_GPIO_Init+0x2ac>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d04c      	beq.n	800527e <HAL_GPIO_Init+0xfa>
 80051e4:	4a92      	ldr	r2, [pc, #584]	@ (8005430 <HAL_GPIO_Init+0x2ac>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d863      	bhi.n	80052b2 <HAL_GPIO_Init+0x12e>
 80051ea:	4a92      	ldr	r2, [pc, #584]	@ (8005434 <HAL_GPIO_Init+0x2b0>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d046      	beq.n	800527e <HAL_GPIO_Init+0xfa>
 80051f0:	4a90      	ldr	r2, [pc, #576]	@ (8005434 <HAL_GPIO_Init+0x2b0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d85d      	bhi.n	80052b2 <HAL_GPIO_Init+0x12e>
 80051f6:	2b12      	cmp	r3, #18
 80051f8:	d82a      	bhi.n	8005250 <HAL_GPIO_Init+0xcc>
 80051fa:	2b12      	cmp	r3, #18
 80051fc:	d859      	bhi.n	80052b2 <HAL_GPIO_Init+0x12e>
 80051fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005204 <HAL_GPIO_Init+0x80>)
 8005200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005204:	0800527f 	.word	0x0800527f
 8005208:	08005259 	.word	0x08005259
 800520c:	0800526b 	.word	0x0800526b
 8005210:	080052ad 	.word	0x080052ad
 8005214:	080052b3 	.word	0x080052b3
 8005218:	080052b3 	.word	0x080052b3
 800521c:	080052b3 	.word	0x080052b3
 8005220:	080052b3 	.word	0x080052b3
 8005224:	080052b3 	.word	0x080052b3
 8005228:	080052b3 	.word	0x080052b3
 800522c:	080052b3 	.word	0x080052b3
 8005230:	080052b3 	.word	0x080052b3
 8005234:	080052b3 	.word	0x080052b3
 8005238:	080052b3 	.word	0x080052b3
 800523c:	080052b3 	.word	0x080052b3
 8005240:	080052b3 	.word	0x080052b3
 8005244:	080052b3 	.word	0x080052b3
 8005248:	08005261 	.word	0x08005261
 800524c:	08005275 	.word	0x08005275
 8005250:	4a79      	ldr	r2, [pc, #484]	@ (8005438 <HAL_GPIO_Init+0x2b4>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d013      	beq.n	800527e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005256:	e02c      	b.n	80052b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	623b      	str	r3, [r7, #32]
          break;
 800525e:	e029      	b.n	80052b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	3304      	adds	r3, #4
 8005266:	623b      	str	r3, [r7, #32]
          break;
 8005268:	e024      	b.n	80052b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	3308      	adds	r3, #8
 8005270:	623b      	str	r3, [r7, #32]
          break;
 8005272:	e01f      	b.n	80052b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	330c      	adds	r3, #12
 800527a:	623b      	str	r3, [r7, #32]
          break;
 800527c:	e01a      	b.n	80052b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005286:	2304      	movs	r3, #4
 8005288:	623b      	str	r3, [r7, #32]
          break;
 800528a:	e013      	b.n	80052b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d105      	bne.n	80052a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005294:	2308      	movs	r3, #8
 8005296:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	611a      	str	r2, [r3, #16]
          break;
 800529e:	e009      	b.n	80052b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80052a0:	2308      	movs	r3, #8
 80052a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69fa      	ldr	r2, [r7, #28]
 80052a8:	615a      	str	r2, [r3, #20]
          break;
 80052aa:	e003      	b.n	80052b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80052ac:	2300      	movs	r3, #0
 80052ae:	623b      	str	r3, [r7, #32]
          break;
 80052b0:	e000      	b.n	80052b4 <HAL_GPIO_Init+0x130>
          break;
 80052b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	2bff      	cmp	r3, #255	@ 0xff
 80052b8:	d801      	bhi.n	80052be <HAL_GPIO_Init+0x13a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	e001      	b.n	80052c2 <HAL_GPIO_Init+0x13e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	2bff      	cmp	r3, #255	@ 0xff
 80052c8:	d802      	bhi.n	80052d0 <HAL_GPIO_Init+0x14c>
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	e002      	b.n	80052d6 <HAL_GPIO_Init+0x152>
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	3b08      	subs	r3, #8
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	210f      	movs	r1, #15
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	fa01 f303 	lsl.w	r3, r1, r3
 80052e4:	43db      	mvns	r3, r3
 80052e6:	401a      	ands	r2, r3
 80052e8:	6a39      	ldr	r1, [r7, #32]
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	fa01 f303 	lsl.w	r3, r1, r3
 80052f0:	431a      	orrs	r2, r3
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f000 80b1 	beq.w	8005466 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005304:	4b4d      	ldr	r3, [pc, #308]	@ (800543c <HAL_GPIO_Init+0x2b8>)
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	4a4c      	ldr	r2, [pc, #304]	@ (800543c <HAL_GPIO_Init+0x2b8>)
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	6193      	str	r3, [r2, #24]
 8005310:	4b4a      	ldr	r3, [pc, #296]	@ (800543c <HAL_GPIO_Init+0x2b8>)
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	60bb      	str	r3, [r7, #8]
 800531a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800531c:	4a48      	ldr	r2, [pc, #288]	@ (8005440 <HAL_GPIO_Init+0x2bc>)
 800531e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005320:	089b      	lsrs	r3, r3, #2
 8005322:	3302      	adds	r3, #2
 8005324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005328:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	f003 0303 	and.w	r3, r3, #3
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	220f      	movs	r2, #15
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4013      	ands	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a40      	ldr	r2, [pc, #256]	@ (8005444 <HAL_GPIO_Init+0x2c0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d013      	beq.n	8005370 <HAL_GPIO_Init+0x1ec>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a3f      	ldr	r2, [pc, #252]	@ (8005448 <HAL_GPIO_Init+0x2c4>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00d      	beq.n	800536c <HAL_GPIO_Init+0x1e8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a3e      	ldr	r2, [pc, #248]	@ (800544c <HAL_GPIO_Init+0x2c8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d007      	beq.n	8005368 <HAL_GPIO_Init+0x1e4>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a3d      	ldr	r2, [pc, #244]	@ (8005450 <HAL_GPIO_Init+0x2cc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d101      	bne.n	8005364 <HAL_GPIO_Init+0x1e0>
 8005360:	2303      	movs	r3, #3
 8005362:	e006      	b.n	8005372 <HAL_GPIO_Init+0x1ee>
 8005364:	2304      	movs	r3, #4
 8005366:	e004      	b.n	8005372 <HAL_GPIO_Init+0x1ee>
 8005368:	2302      	movs	r3, #2
 800536a:	e002      	b.n	8005372 <HAL_GPIO_Init+0x1ee>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_GPIO_Init+0x1ee>
 8005370:	2300      	movs	r3, #0
 8005372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005374:	f002 0203 	and.w	r2, r2, #3
 8005378:	0092      	lsls	r2, r2, #2
 800537a:	4093      	lsls	r3, r2
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	4313      	orrs	r3, r2
 8005380:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005382:	492f      	ldr	r1, [pc, #188]	@ (8005440 <HAL_GPIO_Init+0x2bc>)
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	089b      	lsrs	r3, r3, #2
 8005388:	3302      	adds	r3, #2
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d006      	beq.n	80053aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800539c:	4b2d      	ldr	r3, [pc, #180]	@ (8005454 <HAL_GPIO_Init+0x2d0>)
 800539e:	689a      	ldr	r2, [r3, #8]
 80053a0:	492c      	ldr	r1, [pc, #176]	@ (8005454 <HAL_GPIO_Init+0x2d0>)
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	608b      	str	r3, [r1, #8]
 80053a8:	e006      	b.n	80053b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80053aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005454 <HAL_GPIO_Init+0x2d0>)
 80053ac:	689a      	ldr	r2, [r3, #8]
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	4928      	ldr	r1, [pc, #160]	@ (8005454 <HAL_GPIO_Init+0x2d0>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d006      	beq.n	80053d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80053c4:	4b23      	ldr	r3, [pc, #140]	@ (8005454 <HAL_GPIO_Init+0x2d0>)
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	4922      	ldr	r1, [pc, #136]	@ (8005454 <HAL_GPIO_Init+0x2d0>)
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60cb      	str	r3, [r1, #12]
 80053d0:	e006      	b.n	80053e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80053d2:	4b20      	ldr	r3, [pc, #128]	@ (8005454 <HAL_GPIO_Init+0x2d0>)
 80053d4:	68da      	ldr	r2, [r3, #12]
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	43db      	mvns	r3, r3
 80053da:	491e      	ldr	r1, [pc, #120]	@ (8005454 <HAL_GPIO_Init+0x2d0>)
 80053dc:	4013      	ands	r3, r2
 80053de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d006      	beq.n	80053fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80053ec:	4b19      	ldr	r3, [pc, #100]	@ (8005454 <HAL_GPIO_Init+0x2d0>)
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	4918      	ldr	r1, [pc, #96]	@ (8005454 <HAL_GPIO_Init+0x2d0>)
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	604b      	str	r3, [r1, #4]
 80053f8:	e006      	b.n	8005408 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80053fa:	4b16      	ldr	r3, [pc, #88]	@ (8005454 <HAL_GPIO_Init+0x2d0>)
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	43db      	mvns	r3, r3
 8005402:	4914      	ldr	r1, [pc, #80]	@ (8005454 <HAL_GPIO_Init+0x2d0>)
 8005404:	4013      	ands	r3, r2
 8005406:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d021      	beq.n	8005458 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005414:	4b0f      	ldr	r3, [pc, #60]	@ (8005454 <HAL_GPIO_Init+0x2d0>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	490e      	ldr	r1, [pc, #56]	@ (8005454 <HAL_GPIO_Init+0x2d0>)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	4313      	orrs	r3, r2
 800541e:	600b      	str	r3, [r1, #0]
 8005420:	e021      	b.n	8005466 <HAL_GPIO_Init+0x2e2>
 8005422:	bf00      	nop
 8005424:	10320000 	.word	0x10320000
 8005428:	10310000 	.word	0x10310000
 800542c:	10220000 	.word	0x10220000
 8005430:	10210000 	.word	0x10210000
 8005434:	10120000 	.word	0x10120000
 8005438:	10110000 	.word	0x10110000
 800543c:	40021000 	.word	0x40021000
 8005440:	40010000 	.word	0x40010000
 8005444:	40010800 	.word	0x40010800
 8005448:	40010c00 	.word	0x40010c00
 800544c:	40011000 	.word	0x40011000
 8005450:	40011400 	.word	0x40011400
 8005454:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005458:	4b0b      	ldr	r3, [pc, #44]	@ (8005488 <HAL_GPIO_Init+0x304>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	43db      	mvns	r3, r3
 8005460:	4909      	ldr	r1, [pc, #36]	@ (8005488 <HAL_GPIO_Init+0x304>)
 8005462:	4013      	ands	r3, r2
 8005464:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	3301      	adds	r3, #1
 800546a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	fa22 f303 	lsr.w	r3, r2, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	f47f ae8e 	bne.w	8005198 <HAL_GPIO_Init+0x14>
  }
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	372c      	adds	r7, #44	@ 0x2c
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr
 8005488:	40010400 	.word	0x40010400

0800548c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e12b      	b.n	80056f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fe fe48 	bl	8004148 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2224      	movs	r2, #36	@ 0x24
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0201 	bic.w	r2, r2, #1
 80054ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054f0:	f001 fe84 	bl	80071fc <HAL_RCC_GetPCLK1Freq>
 80054f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	4a81      	ldr	r2, [pc, #516]	@ (8005700 <HAL_I2C_Init+0x274>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d807      	bhi.n	8005510 <HAL_I2C_Init+0x84>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a80      	ldr	r2, [pc, #512]	@ (8005704 <HAL_I2C_Init+0x278>)
 8005504:	4293      	cmp	r3, r2
 8005506:	bf94      	ite	ls
 8005508:	2301      	movls	r3, #1
 800550a:	2300      	movhi	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e006      	b.n	800551e <HAL_I2C_Init+0x92>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4a7d      	ldr	r2, [pc, #500]	@ (8005708 <HAL_I2C_Init+0x27c>)
 8005514:	4293      	cmp	r3, r2
 8005516:	bf94      	ite	ls
 8005518:	2301      	movls	r3, #1
 800551a:	2300      	movhi	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e0e7      	b.n	80056f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4a78      	ldr	r2, [pc, #480]	@ (800570c <HAL_I2C_Init+0x280>)
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	0c9b      	lsrs	r3, r3, #18
 8005530:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	430a      	orrs	r2, r1
 8005544:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	4a6a      	ldr	r2, [pc, #424]	@ (8005700 <HAL_I2C_Init+0x274>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d802      	bhi.n	8005560 <HAL_I2C_Init+0xd4>
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	3301      	adds	r3, #1
 800555e:	e009      	b.n	8005574 <HAL_I2C_Init+0xe8>
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	4a69      	ldr	r2, [pc, #420]	@ (8005710 <HAL_I2C_Init+0x284>)
 800556c:	fba2 2303 	umull	r2, r3, r2, r3
 8005570:	099b      	lsrs	r3, r3, #6
 8005572:	3301      	adds	r3, #1
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	430b      	orrs	r3, r1
 800557a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005586:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	495c      	ldr	r1, [pc, #368]	@ (8005700 <HAL_I2C_Init+0x274>)
 8005590:	428b      	cmp	r3, r1
 8005592:	d819      	bhi.n	80055c8 <HAL_I2C_Init+0x13c>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	1e59      	subs	r1, r3, #1
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	fbb1 f3f3 	udiv	r3, r1, r3
 80055a2:	1c59      	adds	r1, r3, #1
 80055a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80055a8:	400b      	ands	r3, r1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <HAL_I2C_Init+0x138>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1e59      	subs	r1, r3, #1
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80055bc:	3301      	adds	r3, #1
 80055be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c2:	e051      	b.n	8005668 <HAL_I2C_Init+0x1dc>
 80055c4:	2304      	movs	r3, #4
 80055c6:	e04f      	b.n	8005668 <HAL_I2C_Init+0x1dc>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d111      	bne.n	80055f4 <HAL_I2C_Init+0x168>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	1e58      	subs	r0, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6859      	ldr	r1, [r3, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	440b      	add	r3, r1
 80055de:	fbb0 f3f3 	udiv	r3, r0, r3
 80055e2:	3301      	adds	r3, #1
 80055e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	bf0c      	ite	eq
 80055ec:	2301      	moveq	r3, #1
 80055ee:	2300      	movne	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	e012      	b.n	800561a <HAL_I2C_Init+0x18e>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	1e58      	subs	r0, r3, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6859      	ldr	r1, [r3, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	0099      	lsls	r1, r3, #2
 8005604:	440b      	add	r3, r1
 8005606:	fbb0 f3f3 	udiv	r3, r0, r3
 800560a:	3301      	adds	r3, #1
 800560c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005610:	2b00      	cmp	r3, #0
 8005612:	bf0c      	ite	eq
 8005614:	2301      	moveq	r3, #1
 8005616:	2300      	movne	r3, #0
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <HAL_I2C_Init+0x196>
 800561e:	2301      	movs	r3, #1
 8005620:	e022      	b.n	8005668 <HAL_I2C_Init+0x1dc>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10e      	bne.n	8005648 <HAL_I2C_Init+0x1bc>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1e58      	subs	r0, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6859      	ldr	r1, [r3, #4]
 8005632:	460b      	mov	r3, r1
 8005634:	005b      	lsls	r3, r3, #1
 8005636:	440b      	add	r3, r1
 8005638:	fbb0 f3f3 	udiv	r3, r0, r3
 800563c:	3301      	adds	r3, #1
 800563e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005646:	e00f      	b.n	8005668 <HAL_I2C_Init+0x1dc>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	1e58      	subs	r0, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6859      	ldr	r1, [r3, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	0099      	lsls	r1, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	fbb0 f3f3 	udiv	r3, r0, r3
 800565e:	3301      	adds	r3, #1
 8005660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005664:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	6809      	ldr	r1, [r1, #0]
 800566c:	4313      	orrs	r3, r2
 800566e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69da      	ldr	r2, [r3, #28]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a1b      	ldr	r3, [r3, #32]
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005696:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6911      	ldr	r1, [r2, #16]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	68d2      	ldr	r2, [r2, #12]
 80056a2:	4311      	orrs	r1, r2
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	6812      	ldr	r2, [r2, #0]
 80056a8:	430b      	orrs	r3, r1
 80056aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695a      	ldr	r2, [r3, #20]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	000186a0 	.word	0x000186a0
 8005704:	001e847f 	.word	0x001e847f
 8005708:	003d08ff 	.word	0x003d08ff
 800570c:	431bde83 	.word	0x431bde83
 8005710:	10624dd3 	.word	0x10624dd3

08005714 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005726:	2b80      	cmp	r3, #128	@ 0x80
 8005728:	d103      	bne.n	8005732 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2200      	movs	r2, #0
 8005730:	611a      	str	r2, [r3, #16]
  }
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr

0800573c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	4613      	mov	r3, r2
 8005748:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b20      	cmp	r3, #32
 8005754:	d158      	bne.n	8005808 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <HAL_I2C_Slave_Receive_IT+0x26>
 800575c:	88fb      	ldrh	r3, [r7, #6]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e051      	b.n	800580a <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_I2C_Slave_Receive_IT+0x38>
 8005770:	2302      	movs	r3, #2
 8005772:	e04a      	b.n	800580a <HAL_I2C_Slave_Receive_IT+0xce>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b01      	cmp	r3, #1
 8005788:	d007      	beq.n	800579a <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f042 0201 	orr.w	r2, r2, #1
 8005798:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057a8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2222      	movs	r2, #34	@ 0x22
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	88fa      	ldrh	r2, [r7, #6]
 80057ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4a0e      	ldr	r2, [pc, #56]	@ (8005814 <HAL_I2C_Slave_Receive_IT+0xd8>)
 80057da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057ea:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8005802:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005804:	2300      	movs	r3, #0
 8005806:	e000      	b.n	800580a <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8005808:	2302      	movs	r3, #2
  }
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr
 8005814:	ffff0000 	.word	0xffff0000

08005818 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b088      	sub	sp, #32
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005830:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005838:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005840:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	2b10      	cmp	r3, #16
 8005846:	d003      	beq.n	8005850 <HAL_I2C_EV_IRQHandler+0x38>
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	2b40      	cmp	r3, #64	@ 0x40
 800584c:	f040 80c1 	bne.w	80059d2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10d      	bne.n	8005886 <HAL_I2C_EV_IRQHandler+0x6e>
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005870:	d003      	beq.n	800587a <HAL_I2C_EV_IRQHandler+0x62>
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005878:	d101      	bne.n	800587e <HAL_I2C_EV_IRQHandler+0x66>
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <HAL_I2C_EV_IRQHandler+0x68>
 800587e:	2300      	movs	r3, #0
 8005880:	2b01      	cmp	r3, #1
 8005882:	f000 8132 	beq.w	8005aea <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00c      	beq.n	80058aa <HAL_I2C_EV_IRQHandler+0x92>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	0a5b      	lsrs	r3, r3, #9
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d006      	beq.n	80058aa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 fc89 	bl	80071b4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fd87 	bl	80063b6 <I2C_Master_SB>
 80058a8:	e092      	b.n	80059d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	08db      	lsrs	r3, r3, #3
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d009      	beq.n	80058ca <HAL_I2C_EV_IRQHandler+0xb2>
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	0a5b      	lsrs	r3, r3, #9
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fdfc 	bl	80064c0 <I2C_Master_ADD10>
 80058c8:	e082      	b.n	80059d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	085b      	lsrs	r3, r3, #1
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d009      	beq.n	80058ea <HAL_I2C_EV_IRQHandler+0xd2>
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	0a5b      	lsrs	r3, r3, #9
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fe15 	bl	8006512 <I2C_Master_ADDR>
 80058e8:	e072      	b.n	80059d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	089b      	lsrs	r3, r3, #2
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d03b      	beq.n	800596e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005900:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005904:	f000 80f3 	beq.w	8005aee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	09db      	lsrs	r3, r3, #7
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00f      	beq.n	8005934 <HAL_I2C_EV_IRQHandler+0x11c>
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	0a9b      	lsrs	r3, r3, #10
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d009      	beq.n	8005934 <HAL_I2C_EV_IRQHandler+0x11c>
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	089b      	lsrs	r3, r3, #2
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d103      	bne.n	8005934 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f9df 	bl	8005cf0 <I2C_MasterTransmit_TXE>
 8005932:	e04d      	b.n	80059d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	089b      	lsrs	r3, r3, #2
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 80d6 	beq.w	8005aee <HAL_I2C_EV_IRQHandler+0x2d6>
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	0a5b      	lsrs	r3, r3, #9
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 80cf 	beq.w	8005aee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005950:	7bbb      	ldrb	r3, [r7, #14]
 8005952:	2b21      	cmp	r3, #33	@ 0x21
 8005954:	d103      	bne.n	800595e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fa66 	bl	8005e28 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800595c:	e0c7      	b.n	8005aee <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	2b40      	cmp	r3, #64	@ 0x40
 8005962:	f040 80c4 	bne.w	8005aee <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fad4 	bl	8005f14 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800596c:	e0bf      	b.n	8005aee <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800597c:	f000 80b7 	beq.w	8005aee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	099b      	lsrs	r3, r3, #6
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00f      	beq.n	80059ac <HAL_I2C_EV_IRQHandler+0x194>
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	0a9b      	lsrs	r3, r3, #10
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	2b00      	cmp	r3, #0
 8005996:	d009      	beq.n	80059ac <HAL_I2C_EV_IRQHandler+0x194>
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	089b      	lsrs	r3, r3, #2
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d103      	bne.n	80059ac <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fb4d 	bl	8006044 <I2C_MasterReceive_RXNE>
 80059aa:	e011      	b.n	80059d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	089b      	lsrs	r3, r3, #2
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 809a 	beq.w	8005aee <HAL_I2C_EV_IRQHandler+0x2d6>
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	0a5b      	lsrs	r3, r3, #9
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 8093 	beq.w	8005aee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fc03 	bl	80061d4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059ce:	e08e      	b.n	8005aee <HAL_I2C_EV_IRQHandler+0x2d6>
 80059d0:	e08d      	b.n	8005aee <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d004      	beq.n	80059e4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695b      	ldr	r3, [r3, #20]
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	e007      	b.n	80059f4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d012      	beq.n	8005a26 <HAL_I2C_EV_IRQHandler+0x20e>
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	0a5b      	lsrs	r3, r3, #9
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00c      	beq.n	8005a26 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005a1c:	69b9      	ldr	r1, [r7, #24]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 ffce 	bl	80069c0 <I2C_Slave_ADDR>
 8005a24:	e066      	b.n	8005af4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	091b      	lsrs	r3, r3, #4
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d009      	beq.n	8005a46 <HAL_I2C_EV_IRQHandler+0x22e>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	0a5b      	lsrs	r3, r3, #9
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f001 f808 	bl	8006a54 <I2C_Slave_STOPF>
 8005a44:	e056      	b.n	8005af4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a46:	7bbb      	ldrb	r3, [r7, #14]
 8005a48:	2b21      	cmp	r3, #33	@ 0x21
 8005a4a:	d002      	beq.n	8005a52 <HAL_I2C_EV_IRQHandler+0x23a>
 8005a4c:	7bbb      	ldrb	r3, [r7, #14]
 8005a4e:	2b29      	cmp	r3, #41	@ 0x29
 8005a50:	d125      	bne.n	8005a9e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	09db      	lsrs	r3, r3, #7
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00f      	beq.n	8005a7e <HAL_I2C_EV_IRQHandler+0x266>
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	0a9b      	lsrs	r3, r3, #10
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d009      	beq.n	8005a7e <HAL_I2C_EV_IRQHandler+0x266>
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	089b      	lsrs	r3, r3, #2
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fee6 	bl	8006848 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a7c:	e039      	b.n	8005af2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	089b      	lsrs	r3, r3, #2
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d033      	beq.n	8005af2 <HAL_I2C_EV_IRQHandler+0x2da>
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	0a5b      	lsrs	r3, r3, #9
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d02d      	beq.n	8005af2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 ff13 	bl	80068c2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a9c:	e029      	b.n	8005af2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	099b      	lsrs	r3, r3, #6
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00f      	beq.n	8005aca <HAL_I2C_EV_IRQHandler+0x2b2>
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	0a9b      	lsrs	r3, r3, #10
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d009      	beq.n	8005aca <HAL_I2C_EV_IRQHandler+0x2b2>
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	089b      	lsrs	r3, r3, #2
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d103      	bne.n	8005aca <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 ff1d 	bl	8006902 <I2C_SlaveReceive_RXNE>
 8005ac8:	e014      	b.n	8005af4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	089b      	lsrs	r3, r3, #2
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00e      	beq.n	8005af4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	0a5b      	lsrs	r3, r3, #9
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d008      	beq.n	8005af4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 ff4b 	bl	800697e <I2C_SlaveReceive_BTF>
 8005ae8:	e004      	b.n	8005af4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005aea:	bf00      	nop
 8005aec:	e002      	b.n	8005af4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aee:	bf00      	nop
 8005af0:	e000      	b.n	8005af4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005af2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005af4:	3720      	adds	r7, #32
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b08a      	sub	sp, #40	@ 0x28
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b1c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	0a1b      	lsrs	r3, r3, #8
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d016      	beq.n	8005b58 <HAL_I2C_ER_IRQHandler+0x5e>
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	0a1b      	lsrs	r3, r3, #8
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d010      	beq.n	8005b58 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	f043 0301 	orr.w	r3, r3, #1
 8005b3c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b46:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b56:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	0a5b      	lsrs	r3, r3, #9
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00e      	beq.n	8005b82 <HAL_I2C_ER_IRQHandler+0x88>
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	0a1b      	lsrs	r3, r3, #8
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d008      	beq.n	8005b82 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b72:	f043 0302 	orr.w	r3, r3, #2
 8005b76:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8005b80:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	0a9b      	lsrs	r3, r3, #10
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d03f      	beq.n	8005c0e <HAL_I2C_ER_IRQHandler+0x114>
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	0a1b      	lsrs	r3, r3, #8
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d039      	beq.n	8005c0e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8005b9a:	7efb      	ldrb	r3, [r7, #27]
 8005b9c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bac:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005bb4:	7ebb      	ldrb	r3, [r7, #26]
 8005bb6:	2b20      	cmp	r3, #32
 8005bb8:	d112      	bne.n	8005be0 <HAL_I2C_ER_IRQHandler+0xe6>
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10f      	bne.n	8005be0 <HAL_I2C_ER_IRQHandler+0xe6>
 8005bc0:	7cfb      	ldrb	r3, [r7, #19]
 8005bc2:	2b21      	cmp	r3, #33	@ 0x21
 8005bc4:	d008      	beq.n	8005bd8 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005bc6:	7cfb      	ldrb	r3, [r7, #19]
 8005bc8:	2b29      	cmp	r3, #41	@ 0x29
 8005bca:	d005      	beq.n	8005bd8 <HAL_I2C_ER_IRQHandler+0xde>
 8005bcc:	7cfb      	ldrb	r3, [r7, #19]
 8005bce:	2b28      	cmp	r3, #40	@ 0x28
 8005bd0:	d106      	bne.n	8005be0 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b21      	cmp	r3, #33	@ 0x21
 8005bd6:	d103      	bne.n	8005be0 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f001 f86b 	bl	8006cb4 <I2C_Slave_AF>
 8005bde:	e016      	b.n	8005c0e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005be8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	f043 0304 	orr.w	r3, r3, #4
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005bf2:	7efb      	ldrb	r3, [r7, #27]
 8005bf4:	2b10      	cmp	r3, #16
 8005bf6:	d002      	beq.n	8005bfe <HAL_I2C_ER_IRQHandler+0x104>
 8005bf8:	7efb      	ldrb	r3, [r7, #27]
 8005bfa:	2b40      	cmp	r3, #64	@ 0x40
 8005bfc:	d107      	bne.n	8005c0e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c0c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	0adb      	lsrs	r3, r3, #11
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00e      	beq.n	8005c38 <HAL_I2C_ER_IRQHandler+0x13e>
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	0a1b      	lsrs	r3, r3, #8
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d008      	beq.n	8005c38 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	f043 0308 	orr.w	r3, r3, #8
 8005c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005c36:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d008      	beq.n	8005c50 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	431a      	orrs	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f001 f8a6 	bl	8006d9c <I2C_ITError>
  }
}
 8005c50:	bf00      	nop
 8005c52:	3728      	adds	r7, #40	@ 0x28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr

08005c6a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr

08005c7c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr

08005c8e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	460b      	mov	r3, r1
 8005c98:	70fb      	strb	r3, [r7, #3]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bc80      	pop	{r7}
 8005ca6:	4770      	bx	lr

08005ca8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bc80      	pop	{r7}
 8005cb8:	4770      	bx	lr

08005cba <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bc80      	pop	{r7}
 8005cca:	4770      	bx	lr

08005ccc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bc80      	pop	{r7}
 8005cdc:	4770      	bx	lr

08005cde <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr

08005cf0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cfe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d06:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d150      	bne.n	8005db8 <I2C_MasterTransmit_TXE+0xc8>
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	2b21      	cmp	r3, #33	@ 0x21
 8005d1a:	d14d      	bne.n	8005db8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b08      	cmp	r3, #8
 8005d20:	d01d      	beq.n	8005d5e <I2C_MasterTransmit_TXE+0x6e>
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d01a      	beq.n	8005d5e <I2C_MasterTransmit_TXE+0x6e>
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d2e:	d016      	beq.n	8005d5e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d3e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2211      	movs	r2, #17
 8005d44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff ff7e 	bl	8005c58 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d5c:	e060      	b.n	8005e20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d6c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d7c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b40      	cmp	r3, #64	@ 0x40
 8005d96:	d107      	bne.n	8005da8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff ff8a 	bl	8005cba <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005da6:	e03b      	b.n	8005e20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7ff ff51 	bl	8005c58 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005db6:	e033      	b.n	8005e20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	2b21      	cmp	r3, #33	@ 0x21
 8005dbc:	d005      	beq.n	8005dca <I2C_MasterTransmit_TXE+0xda>
 8005dbe:	7bbb      	ldrb	r3, [r7, #14]
 8005dc0:	2b40      	cmp	r3, #64	@ 0x40
 8005dc2:	d12d      	bne.n	8005e20 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	2b22      	cmp	r3, #34	@ 0x22
 8005dc8:	d12a      	bne.n	8005e20 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d108      	bne.n	8005de6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005de2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005de4:	e01c      	b.n	8005e20 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b40      	cmp	r3, #64	@ 0x40
 8005df0:	d103      	bne.n	8005dfa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f88e 	bl	8005f14 <I2C_MemoryTransmit_TXE_BTF>
}
 8005df8:	e012      	b.n	8005e20 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfe:	781a      	ldrb	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005e1e:	e7ff      	b.n	8005e20 <I2C_MasterTransmit_TXE+0x130>
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e34:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b21      	cmp	r3, #33	@ 0x21
 8005e40:	d164      	bne.n	8005f0c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d012      	beq.n	8005e72 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e50:	781a      	ldrb	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	1c5a      	adds	r2, r3, #1
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005e70:	e04c      	b.n	8005f0c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d01d      	beq.n	8005eb4 <I2C_MasterTransmit_BTF+0x8c>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d01a      	beq.n	8005eb4 <I2C_MasterTransmit_BTF+0x8c>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e84:	d016      	beq.n	8005eb4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e94:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2211      	movs	r2, #17
 8005e9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff fed3 	bl	8005c58 <HAL_I2C_MasterTxCpltCallback>
}
 8005eb2:	e02b      	b.n	8005f0c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ec2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ed2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b40      	cmp	r3, #64	@ 0x40
 8005eec:	d107      	bne.n	8005efe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff fedf 	bl	8005cba <HAL_I2C_MemTxCpltCallback>
}
 8005efc:	e006      	b.n	8005f0c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7ff fea6 	bl	8005c58 <HAL_I2C_MasterTxCpltCallback>
}
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f22:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d11d      	bne.n	8005f68 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d10b      	bne.n	8005f4c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f44:	1c9a      	adds	r2, r3, #2
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005f4a:	e077      	b.n	800603c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	121b      	asrs	r3, r3, #8
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005f66:	e069      	b.n	800603c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d10b      	bne.n	8005f88 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005f86:	e059      	b.n	800603c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d152      	bne.n	8006036 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	2b22      	cmp	r3, #34	@ 0x22
 8005f94:	d10d      	bne.n	8005fb2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fa4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005fb0:	e044      	b.n	800603c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d015      	beq.n	8005fe8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	2b21      	cmp	r3, #33	@ 0x21
 8005fc0:	d112      	bne.n	8005fe8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc6:	781a      	ldrb	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005fe6:	e029      	b.n	800603c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d124      	bne.n	800603c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	2b21      	cmp	r3, #33	@ 0x21
 8005ff6:	d121      	bne.n	800603c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006006:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006016:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7ff fe43 	bl	8005cba <HAL_I2C_MemTxCpltCallback>
}
 8006034:	e002      	b.n	800603c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff fb6c 	bl	8005714 <I2C_Flush_DR>
}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b22      	cmp	r3, #34	@ 0x22
 8006056:	f040 80b9 	bne.w	80061cc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006064:	b29b      	uxth	r3, r3
 8006066:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b03      	cmp	r3, #3
 800606c:	d921      	bls.n	80060b2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800608a:	b29b      	uxth	r3, r3
 800608c:	3b01      	subs	r3, #1
 800608e:	b29a      	uxth	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b03      	cmp	r3, #3
 800609c:	f040 8096 	bne.w	80061cc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060ae:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80060b0:	e08c      	b.n	80061cc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d07f      	beq.n	80061ba <I2C_MasterReceive_RXNE+0x176>
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d002      	beq.n	80060c6 <I2C_MasterReceive_RXNE+0x82>
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d179      	bne.n	80061ba <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f001 f842 	bl	8007150 <I2C_WaitOnSTOPRequestThroughIT>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d14c      	bne.n	800616c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060e0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80060f0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691a      	ldr	r2, [r3, #16]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fc:	b2d2      	uxtb	r2, r2
 80060fe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b40      	cmp	r3, #64	@ 0x40
 800612a:	d10a      	bne.n	8006142 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff fdc6 	bl	8005ccc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006140:	e044      	b.n	80061cc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b08      	cmp	r3, #8
 800614e:	d002      	beq.n	8006156 <I2C_MasterReceive_RXNE+0x112>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b20      	cmp	r3, #32
 8006154:	d103      	bne.n	800615e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	631a      	str	r2, [r3, #48]	@ 0x30
 800615c:	e002      	b.n	8006164 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2212      	movs	r2, #18
 8006162:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f7ff fd80 	bl	8005c6a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800616a:	e02f      	b.n	80061cc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800617a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2220      	movs	r2, #32
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fb fa76 	bl	80016a4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80061b8:	e008      	b.n	80061cc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061c8:	605a      	str	r2, [r3, #4]
}
 80061ca:	e7ff      	b.n	80061cc <I2C_MasterReceive_RXNE+0x188>
 80061cc:	bf00      	nop
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d11b      	bne.n	8006224 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061fa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	3b01      	subs	r3, #1
 800621c:	b29a      	uxth	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006222:	e0c4      	b.n	80063ae <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006228:	b29b      	uxth	r3, r3
 800622a:	2b03      	cmp	r3, #3
 800622c:	d129      	bne.n	8006282 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800623c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b04      	cmp	r3, #4
 8006242:	d00a      	beq.n	800625a <I2C_MasterReceive_BTF+0x86>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d007      	beq.n	800625a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006258:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691a      	ldr	r2, [r3, #16]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006280:	e095      	b.n	80063ae <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006286:	b29b      	uxth	r3, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d17d      	bne.n	8006388 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d002      	beq.n	8006298 <I2C_MasterReceive_BTF+0xc4>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2b10      	cmp	r3, #16
 8006296:	d108      	bne.n	80062aa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	e016      	b.n	80062d8 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b04      	cmp	r3, #4
 80062ae:	d002      	beq.n	80062b6 <I2C_MasterReceive_BTF+0xe2>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d108      	bne.n	80062c8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	e007      	b.n	80062d8 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062d6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691a      	ldr	r2, [r3, #16]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006310:	1c5a      	adds	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006332:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2220      	movs	r2, #32
 8006338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b40      	cmp	r3, #64	@ 0x40
 8006346:	d10a      	bne.n	800635e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7ff fcb8 	bl	8005ccc <HAL_I2C_MemRxCpltCallback>
}
 800635c:	e027      	b.n	80063ae <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b08      	cmp	r3, #8
 800636a:	d002      	beq.n	8006372 <I2C_MasterReceive_BTF+0x19e>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b20      	cmp	r3, #32
 8006370:	d103      	bne.n	800637a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	631a      	str	r2, [r3, #48]	@ 0x30
 8006378:	e002      	b.n	8006380 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2212      	movs	r2, #18
 800637e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff fc72 	bl	8005c6a <HAL_I2C_MasterRxCpltCallback>
}
 8006386:	e012      	b.n	80063ae <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691a      	ldr	r2, [r3, #16]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006392:	b2d2      	uxtb	r2, r2
 8006394:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	3b01      	subs	r3, #1
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b40      	cmp	r3, #64	@ 0x40
 80063c8:	d117      	bne.n	80063fa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80063e2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80063e4:	e067      	b.n	80064b6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	f043 0301 	orr.w	r3, r3, #1
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	611a      	str	r2, [r3, #16]
}
 80063f8:	e05d      	b.n	80064b6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006402:	d133      	bne.n	800646c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b21      	cmp	r3, #33	@ 0x21
 800640e:	d109      	bne.n	8006424 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006414:	b2db      	uxtb	r3, r3
 8006416:	461a      	mov	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006420:	611a      	str	r2, [r3, #16]
 8006422:	e008      	b.n	8006436 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006428:	b2db      	uxtb	r3, r3
 800642a:	f043 0301 	orr.w	r3, r3, #1
 800642e:	b2da      	uxtb	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800643a:	2b00      	cmp	r3, #0
 800643c:	d004      	beq.n	8006448 <I2C_Master_SB+0x92>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006444:	2b00      	cmp	r3, #0
 8006446:	d108      	bne.n	800645a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644c:	2b00      	cmp	r3, #0
 800644e:	d032      	beq.n	80064b6 <I2C_Master_SB+0x100>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006456:	2b00      	cmp	r3, #0
 8006458:	d02d      	beq.n	80064b6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006468:	605a      	str	r2, [r3, #4]
}
 800646a:	e024      	b.n	80064b6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10e      	bne.n	8006492 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006478:	b29b      	uxth	r3, r3
 800647a:	11db      	asrs	r3, r3, #7
 800647c:	b2db      	uxtb	r3, r3
 800647e:	f003 0306 	and.w	r3, r3, #6
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f063 030f 	orn	r3, r3, #15
 8006488:	b2da      	uxtb	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	611a      	str	r2, [r3, #16]
}
 8006490:	e011      	b.n	80064b6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006496:	2b01      	cmp	r3, #1
 8006498:	d10d      	bne.n	80064b6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649e:	b29b      	uxth	r3, r3
 80064a0:	11db      	asrs	r3, r3, #7
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	f003 0306 	and.w	r3, r3, #6
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	f063 030e 	orn	r3, r3, #14
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	611a      	str	r2, [r3, #16]
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr

080064c0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d004      	beq.n	80064e6 <I2C_Master_ADD10+0x26>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d108      	bne.n	80064f8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00c      	beq.n	8006508 <I2C_Master_ADD10+0x48>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d007      	beq.n	8006508 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006506:	605a      	str	r2, [r3, #4]
  }
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	bc80      	pop	{r7}
 8006510:	4770      	bx	lr

08006512 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006512:	b480      	push	{r7}
 8006514:	b091      	sub	sp, #68	@ 0x44
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006520:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006528:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800652e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b22      	cmp	r3, #34	@ 0x22
 800653a:	f040 8174 	bne.w	8006826 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10f      	bne.n	8006566 <I2C_Master_ADDR+0x54>
 8006546:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800654a:	2b40      	cmp	r3, #64	@ 0x40
 800654c:	d10b      	bne.n	8006566 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800654e:	2300      	movs	r3, #0
 8006550:	633b      	str	r3, [r7, #48]	@ 0x30
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	633b      	str	r3, [r7, #48]	@ 0x30
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	633b      	str	r3, [r7, #48]	@ 0x30
 8006562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006564:	e16b      	b.n	800683e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800656a:	2b00      	cmp	r3, #0
 800656c:	d11d      	bne.n	80065aa <I2C_Master_ADDR+0x98>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006576:	d118      	bne.n	80065aa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006578:	2300      	movs	r3, #0
 800657a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800658c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800659c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a2:	1c5a      	adds	r2, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80065a8:	e149      	b.n	800683e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d113      	bne.n	80065dc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065b4:	2300      	movs	r3, #0
 80065b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699b      	ldr	r3, [r3, #24]
 80065c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	e120      	b.n	800681e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	f040 808a 	bne.w	80066fc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80065e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065ee:	d137      	bne.n	8006660 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065fe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800660a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800660e:	d113      	bne.n	8006638 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800661e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006620:	2300      	movs	r3, #0
 8006622:	627b      	str	r3, [r7, #36]	@ 0x24
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	627b      	str	r3, [r7, #36]	@ 0x24
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	627b      	str	r3, [r7, #36]	@ 0x24
 8006634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006636:	e0f2      	b.n	800681e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006638:	2300      	movs	r3, #0
 800663a:	623b      	str	r3, [r7, #32]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	623b      	str	r3, [r7, #32]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	623b      	str	r3, [r7, #32]
 800664c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	e0de      	b.n	800681e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006662:	2b08      	cmp	r3, #8
 8006664:	d02e      	beq.n	80066c4 <I2C_Master_ADDR+0x1b2>
 8006666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006668:	2b20      	cmp	r3, #32
 800666a:	d02b      	beq.n	80066c4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800666c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800666e:	2b12      	cmp	r3, #18
 8006670:	d102      	bne.n	8006678 <I2C_Master_ADDR+0x166>
 8006672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006674:	2b01      	cmp	r3, #1
 8006676:	d125      	bne.n	80066c4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667a:	2b04      	cmp	r3, #4
 800667c:	d00e      	beq.n	800669c <I2C_Master_ADDR+0x18a>
 800667e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006680:	2b02      	cmp	r3, #2
 8006682:	d00b      	beq.n	800669c <I2C_Master_ADDR+0x18a>
 8006684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006686:	2b10      	cmp	r3, #16
 8006688:	d008      	beq.n	800669c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	e007      	b.n	80066ac <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066aa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ac:	2300      	movs	r3, #0
 80066ae:	61fb      	str	r3, [r7, #28]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	61fb      	str	r3, [r7, #28]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	e0ac      	b.n	800681e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066d2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066d4:	2300      	movs	r3, #0
 80066d6:	61bb      	str	r3, [r7, #24]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	61bb      	str	r3, [r7, #24]
 80066e8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	e090      	b.n	800681e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006700:	b29b      	uxth	r3, r3
 8006702:	2b02      	cmp	r3, #2
 8006704:	d158      	bne.n	80067b8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006708:	2b04      	cmp	r3, #4
 800670a:	d021      	beq.n	8006750 <I2C_Master_ADDR+0x23e>
 800670c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670e:	2b02      	cmp	r3, #2
 8006710:	d01e      	beq.n	8006750 <I2C_Master_ADDR+0x23e>
 8006712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006714:	2b10      	cmp	r3, #16
 8006716:	d01b      	beq.n	8006750 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006726:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006728:	2300      	movs	r3, #0
 800672a:	617b      	str	r3, [r7, #20]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	617b      	str	r3, [r7, #20]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e012      	b.n	8006776 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800675e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006760:	2300      	movs	r3, #0
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	613b      	str	r3, [r7, #16]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006780:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006784:	d14b      	bne.n	800681e <I2C_Master_ADDR+0x30c>
 8006786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006788:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800678c:	d00b      	beq.n	80067a6 <I2C_Master_ADDR+0x294>
 800678e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006790:	2b01      	cmp	r3, #1
 8006792:	d008      	beq.n	80067a6 <I2C_Master_ADDR+0x294>
 8006794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006796:	2b08      	cmp	r3, #8
 8006798:	d005      	beq.n	80067a6 <I2C_Master_ADDR+0x294>
 800679a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679c:	2b10      	cmp	r3, #16
 800679e:	d002      	beq.n	80067a6 <I2C_Master_ADDR+0x294>
 80067a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	d13b      	bne.n	800681e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	e032      	b.n	800681e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067c6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067d6:	d117      	bne.n	8006808 <I2C_Master_ADDR+0x2f6>
 80067d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80067de:	d00b      	beq.n	80067f8 <I2C_Master_ADDR+0x2e6>
 80067e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d008      	beq.n	80067f8 <I2C_Master_ADDR+0x2e6>
 80067e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d005      	beq.n	80067f8 <I2C_Master_ADDR+0x2e6>
 80067ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ee:	2b10      	cmp	r3, #16
 80067f0:	d002      	beq.n	80067f8 <I2C_Master_ADDR+0x2e6>
 80067f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f4:	2b20      	cmp	r3, #32
 80067f6:	d107      	bne.n	8006808 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006806:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006824:	e00b      	b.n	800683e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006826:	2300      	movs	r3, #0
 8006828:	60bb      	str	r3, [r7, #8]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	60bb      	str	r3, [r7, #8]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	60bb      	str	r3, [r7, #8]
 800683a:	68bb      	ldr	r3, [r7, #8]
}
 800683c:	e7ff      	b.n	800683e <I2C_Master_ADDR+0x32c>
 800683e:	bf00      	nop
 8006840:	3744      	adds	r7, #68	@ 0x44
 8006842:	46bd      	mov	sp, r7
 8006844:	bc80      	pop	{r7}
 8006846:	4770      	bx	lr

08006848 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006856:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800685c:	b29b      	uxth	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d02b      	beq.n	80068ba <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006866:	781a      	ldrb	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800687c:	b29b      	uxth	r3, r3
 800687e:	3b01      	subs	r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800688a:	b29b      	uxth	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d114      	bne.n	80068ba <I2C_SlaveTransmit_TXE+0x72>
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b29      	cmp	r3, #41	@ 0x29
 8006894:	d111      	bne.n	80068ba <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2221      	movs	r2, #33	@ 0x21
 80068aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2228      	movs	r2, #40	@ 0x28
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff f9e1 	bl	8005c7c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d011      	beq.n	80068f8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d8:	781a      	ldrb	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bc80      	pop	{r7}
 8006900:	4770      	bx	lr

08006902 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006910:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006916:	b29b      	uxth	r3, r3
 8006918:	2b00      	cmp	r3, #0
 800691a:	d02c      	beq.n	8006976 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	691a      	ldr	r2, [r3, #16]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006938:	b29b      	uxth	r3, r3
 800693a:	3b01      	subs	r3, #1
 800693c:	b29a      	uxth	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006946:	b29b      	uxth	r3, r3
 8006948:	2b00      	cmp	r3, #0
 800694a:	d114      	bne.n	8006976 <I2C_SlaveReceive_RXNE+0x74>
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006950:	d111      	bne.n	8006976 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006960:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2222      	movs	r2, #34	@ 0x22
 8006966:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2228      	movs	r2, #40	@ 0x28
 800696c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7fa fe81 	bl	8001678 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006976:	bf00      	nop
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d012      	beq.n	80069b6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691a      	ldr	r2, [r3, #16]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	3b01      	subs	r3, #1
 80069b0:	b29a      	uxth	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80069b6:	bf00      	nop
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bc80      	pop	{r7}
 80069be:	4770      	bx	lr

080069c0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80069da:	2b28      	cmp	r3, #40	@ 0x28
 80069dc:	d127      	bne.n	8006a2e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069ec:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	089b      	lsrs	r3, r3, #2
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80069fa:	2301      	movs	r3, #1
 80069fc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	09db      	lsrs	r3, r3, #7
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d103      	bne.n	8006a12 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	81bb      	strh	r3, [r7, #12]
 8006a10:	e002      	b.n	8006a18 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006a20:	89ba      	ldrh	r2, [r7, #12]
 8006a22:	7bfb      	ldrb	r3, [r7, #15]
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff f931 	bl	8005c8e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006a2c:	e00e      	b.n	8006a4c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	60bb      	str	r3, [r7, #8]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	60bb      	str	r3, [r7, #8]
 8006a42:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a62:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006a72:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006a74:	2300      	movs	r3, #0
 8006a76:	60bb      	str	r3, [r7, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	60bb      	str	r3, [r7, #8]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f042 0201 	orr.w	r2, r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aa0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ab0:	d172      	bne.n	8006b98 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	2b22      	cmp	r3, #34	@ 0x22
 8006ab6:	d002      	beq.n	8006abe <I2C_Slave_STOPF+0x6a>
 8006ab8:	7bfb      	ldrb	r3, [r7, #15]
 8006aba:	2b2a      	cmp	r3, #42	@ 0x2a
 8006abc:	d135      	bne.n	8006b2a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d005      	beq.n	8006ae2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ada:	f043 0204 	orr.w	r2, r3, #4
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006af0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe fb36 	bl	8005168 <HAL_DMA_GetState>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d049      	beq.n	8006b96 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b06:	4a69      	ldr	r2, [pc, #420]	@ (8006cac <I2C_Slave_STOPF+0x258>)
 8006b08:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fe fab2 	bl	8005078 <HAL_DMA_Abort_IT>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d03d      	beq.n	8006b96 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006b24:	4610      	mov	r0, r2
 8006b26:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b28:	e035      	b.n	8006b96 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d005      	beq.n	8006b4e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b46:	f043 0204 	orr.w	r2, r3, #4
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b5c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe fb00 	bl	8005168 <HAL_DMA_GetState>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d014      	beq.n	8006b98 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b72:	4a4e      	ldr	r2, [pc, #312]	@ (8006cac <I2C_Slave_STOPF+0x258>)
 8006b74:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fe fa7c 	bl	8005078 <HAL_DMA_Abort_IT>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d008      	beq.n	8006b98 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b90:	4610      	mov	r0, r2
 8006b92:	4798      	blx	r3
 8006b94:	e000      	b.n	8006b98 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b96:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d03e      	beq.n	8006c20 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b04      	cmp	r3, #4
 8006bae:	d112      	bne.n	8006bd6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691a      	ldr	r2, [r3, #16]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	695b      	ldr	r3, [r3, #20]
 8006bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be0:	2b40      	cmp	r3, #64	@ 0x40
 8006be2:	d112      	bne.n	8006c0a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	691a      	ldr	r2, [r3, #16]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c18:	f043 0204 	orr.w	r2, r3, #4
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f8b7 	bl	8006d9c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006c2e:	e039      	b.n	8006ca4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c34:	d109      	bne.n	8006c4a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2228      	movs	r2, #40	@ 0x28
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7fa fd17 	bl	8001678 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b28      	cmp	r3, #40	@ 0x28
 8006c54:	d111      	bne.n	8006c7a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a15      	ldr	r2, [pc, #84]	@ (8006cb0 <I2C_Slave_STOPF+0x25c>)
 8006c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff f818 	bl	8005ca8 <HAL_I2C_ListenCpltCallback>
}
 8006c78:	e014      	b.n	8006ca4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c7e:	2b22      	cmp	r3, #34	@ 0x22
 8006c80:	d002      	beq.n	8006c88 <I2C_Slave_STOPF+0x234>
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	2b22      	cmp	r3, #34	@ 0x22
 8006c86:	d10d      	bne.n	8006ca4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2220      	movs	r2, #32
 8006c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fa fcea 	bl	8001678 <HAL_I2C_SlaveRxCpltCallback>
}
 8006ca4:	bf00      	nop
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	08007001 	.word	0x08007001
 8006cb0:	ffff0000 	.word	0xffff0000

08006cb4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d002      	beq.n	8006cd6 <I2C_Slave_AF+0x22>
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d129      	bne.n	8006d2a <I2C_Slave_AF+0x76>
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	2b28      	cmp	r3, #40	@ 0x28
 8006cda:	d126      	bne.n	8006d2a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a2e      	ldr	r2, [pc, #184]	@ (8006d98 <I2C_Slave_AF+0xe4>)
 8006ce0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006cf0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006cfa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d0a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fe ffc0 	bl	8005ca8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006d28:	e031      	b.n	8006d8e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	2b21      	cmp	r3, #33	@ 0x21
 8006d2e:	d129      	bne.n	8006d84 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a19      	ldr	r2, [pc, #100]	@ (8006d98 <I2C_Slave_AF+0xe4>)
 8006d34:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2221      	movs	r2, #33	@ 0x21
 8006d3a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685a      	ldr	r2, [r3, #4]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006d5a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d64:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d74:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fe fccc 	bl	8005714 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7fe ff7d 	bl	8005c7c <HAL_I2C_SlaveTxCpltCallback>
}
 8006d82:	e004      	b.n	8006d8e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d8c:	615a      	str	r2, [r3, #20]
}
 8006d8e:	bf00      	nop
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	ffff0000 	.word	0xffff0000

08006d9c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006daa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006db2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006db4:	7bbb      	ldrb	r3, [r7, #14]
 8006db6:	2b10      	cmp	r3, #16
 8006db8:	d002      	beq.n	8006dc0 <I2C_ITError+0x24>
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	2b40      	cmp	r3, #64	@ 0x40
 8006dbe:	d10a      	bne.n	8006dd6 <I2C_ITError+0x3a>
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	2b22      	cmp	r3, #34	@ 0x22
 8006dc4:	d107      	bne.n	8006dd6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dd4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006ddc:	2b28      	cmp	r3, #40	@ 0x28
 8006dde:	d107      	bne.n	8006df0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2228      	movs	r2, #40	@ 0x28
 8006dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006dee:	e015      	b.n	8006e1c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dfe:	d00a      	beq.n	8006e16 <I2C_ITError+0x7a>
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	2b60      	cmp	r3, #96	@ 0x60
 8006e04:	d007      	beq.n	8006e16 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e2a:	d162      	bne.n	8006ef2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e3a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e40:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d020      	beq.n	8006e8c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e4e:	4a6a      	ldr	r2, [pc, #424]	@ (8006ff8 <I2C_ITError+0x25c>)
 8006e50:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe f90e 	bl	8005078 <HAL_DMA_Abort_IT>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 8089 	beq.w	8006f76 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0201 	bic.w	r2, r2, #1
 8006e72:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006e86:	4610      	mov	r0, r2
 8006e88:	4798      	blx	r3
 8006e8a:	e074      	b.n	8006f76 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e90:	4a59      	ldr	r2, [pc, #356]	@ (8006ff8 <I2C_ITError+0x25c>)
 8006e92:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fe f8ed 	bl	8005078 <HAL_DMA_Abort_IT>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d068      	beq.n	8006f76 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eae:	2b40      	cmp	r3, #64	@ 0x40
 8006eb0:	d10b      	bne.n	8006eca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	691a      	ldr	r2, [r3, #16]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 0201 	bic.w	r2, r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006eec:	4610      	mov	r0, r2
 8006eee:	4798      	blx	r3
 8006ef0:	e041      	b.n	8006f76 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b60      	cmp	r3, #96	@ 0x60
 8006efc:	d125      	bne.n	8006f4a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2220      	movs	r2, #32
 8006f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f16:	2b40      	cmp	r3, #64	@ 0x40
 8006f18:	d10b      	bne.n	8006f32 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0201 	bic.w	r2, r2, #1
 8006f40:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fe fecb 	bl	8005cde <HAL_I2C_AbortCpltCallback>
 8006f48:	e015      	b.n	8006f76 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f54:	2b40      	cmp	r3, #64	@ 0x40
 8006f56:	d10b      	bne.n	8006f70 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691a      	ldr	r2, [r3, #16]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f62:	b2d2      	uxtb	r2, r2
 8006f64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7fa fb97 	bl	80016a4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10e      	bne.n	8006fa4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d109      	bne.n	8006fa4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d104      	bne.n	8006fa4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d007      	beq.n	8006fb4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006fb2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	d113      	bne.n	8006ff0 <I2C_ITError+0x254>
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	2b28      	cmp	r3, #40	@ 0x28
 8006fcc:	d110      	bne.n	8006ff0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a0a      	ldr	r2, [pc, #40]	@ (8006ffc <I2C_ITError+0x260>)
 8006fd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7fe fe5c 	bl	8005ca8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ff0:	bf00      	nop
 8006ff2:	3710      	adds	r7, #16
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	08007001 	.word	0x08007001
 8006ffc:	ffff0000 	.word	0xffff0000

08007000 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007010:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007018:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800701a:	4b4b      	ldr	r3, [pc, #300]	@ (8007148 <I2C_DMAAbort+0x148>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	08db      	lsrs	r3, r3, #3
 8007020:	4a4a      	ldr	r2, [pc, #296]	@ (800714c <I2C_DMAAbort+0x14c>)
 8007022:	fba2 2303 	umull	r2, r3, r2, r3
 8007026:	0a1a      	lsrs	r2, r3, #8
 8007028:	4613      	mov	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	00da      	lsls	r2, r3, #3
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703e:	f043 0220 	orr.w	r2, r3, #32
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007046:	e00a      	b.n	800705e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3b01      	subs	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800705c:	d0ea      	beq.n	8007034 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800706a:	2200      	movs	r2, #0
 800706c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707a:	2200      	movs	r2, #0
 800707c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800708c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2200      	movs	r2, #0
 8007092:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070a0:	2200      	movs	r2, #0
 80070a2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b0:	2200      	movs	r2, #0
 80070b2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0201 	bic.w	r2, r2, #1
 80070c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b60      	cmp	r3, #96	@ 0x60
 80070ce:	d10e      	bne.n	80070ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	2220      	movs	r2, #32
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	2200      	movs	r2, #0
 80070e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80070e6:	6978      	ldr	r0, [r7, #20]
 80070e8:	f7fe fdf9 	bl	8005cde <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80070ec:	e027      	b.n	800713e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80070ee:	7cfb      	ldrb	r3, [r7, #19]
 80070f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80070f4:	2b28      	cmp	r3, #40	@ 0x28
 80070f6:	d117      	bne.n	8007128 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0201 	orr.w	r2, r2, #1
 8007106:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007116:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	2200      	movs	r2, #0
 800711c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2228      	movs	r2, #40	@ 0x28
 8007122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007126:	e007      	b.n	8007138 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007138:	6978      	ldr	r0, [r7, #20]
 800713a:	f7fa fab3 	bl	80016a4 <HAL_I2C_ErrorCallback>
}
 800713e:	bf00      	nop
 8007140:	3718      	adds	r7, #24
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	20000020 	.word	0x20000020
 800714c:	14f8b589 	.word	0x14f8b589

08007150 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800715c:	4b13      	ldr	r3, [pc, #76]	@ (80071ac <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	08db      	lsrs	r3, r3, #3
 8007162:	4a13      	ldr	r2, [pc, #76]	@ (80071b0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007164:	fba2 2303 	umull	r2, r3, r2, r3
 8007168:	0a1a      	lsrs	r2, r3, #8
 800716a:	4613      	mov	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	3b01      	subs	r3, #1
 8007176:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d107      	bne.n	800718e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007182:	f043 0220 	orr.w	r2, r3, #32
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e008      	b.n	80071a0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800719c:	d0e9      	beq.n	8007172 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bc80      	pop	{r7}
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	20000020 	.word	0x20000020
 80071b0:	14f8b589 	.word	0x14f8b589

080071b4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80071c4:	d103      	bne.n	80071ce <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80071cc:	e007      	b.n	80071de <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80071d6:	d102      	bne.n	80071de <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2208      	movs	r2, #8
 80071dc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bc80      	pop	{r7}
 80071e6:	4770      	bx	lr

080071e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071e8:	b480      	push	{r7}
 80071ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071ec:	4b02      	ldr	r3, [pc, #8]	@ (80071f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80071ee:	681b      	ldr	r3, [r3, #0]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bc80      	pop	{r7}
 80071f6:	4770      	bx	lr
 80071f8:	20000020 	.word	0x20000020

080071fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007200:	f7ff fff2 	bl	80071e8 <HAL_RCC_GetHCLKFreq>
 8007204:	4602      	mov	r2, r0
 8007206:	4b05      	ldr	r3, [pc, #20]	@ (800721c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	0a1b      	lsrs	r3, r3, #8
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	4903      	ldr	r1, [pc, #12]	@ (8007220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007212:	5ccb      	ldrb	r3, [r1, r3]
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007218:	4618      	mov	r0, r3
 800721a:	bd80      	pop	{r7, pc}
 800721c:	40021000 	.word	0x40021000
 8007220:	0800ab54 	.word	0x0800ab54

08007224 <__cvt>:
 8007224:	2b00      	cmp	r3, #0
 8007226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800722a:	461d      	mov	r5, r3
 800722c:	bfbb      	ittet	lt
 800722e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007232:	461d      	movlt	r5, r3
 8007234:	2300      	movge	r3, #0
 8007236:	232d      	movlt	r3, #45	@ 0x2d
 8007238:	b088      	sub	sp, #32
 800723a:	4614      	mov	r4, r2
 800723c:	bfb8      	it	lt
 800723e:	4614      	movlt	r4, r2
 8007240:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007242:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007244:	7013      	strb	r3, [r2, #0]
 8007246:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007248:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800724c:	f023 0820 	bic.w	r8, r3, #32
 8007250:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007254:	d005      	beq.n	8007262 <__cvt+0x3e>
 8007256:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800725a:	d100      	bne.n	800725e <__cvt+0x3a>
 800725c:	3601      	adds	r6, #1
 800725e:	2302      	movs	r3, #2
 8007260:	e000      	b.n	8007264 <__cvt+0x40>
 8007262:	2303      	movs	r3, #3
 8007264:	aa07      	add	r2, sp, #28
 8007266:	9204      	str	r2, [sp, #16]
 8007268:	aa06      	add	r2, sp, #24
 800726a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800726e:	e9cd 3600 	strd	r3, r6, [sp]
 8007272:	4622      	mov	r2, r4
 8007274:	462b      	mov	r3, r5
 8007276:	f000 fe87 	bl	8007f88 <_dtoa_r>
 800727a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800727e:	4607      	mov	r7, r0
 8007280:	d119      	bne.n	80072b6 <__cvt+0x92>
 8007282:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007284:	07db      	lsls	r3, r3, #31
 8007286:	d50e      	bpl.n	80072a6 <__cvt+0x82>
 8007288:	eb00 0906 	add.w	r9, r0, r6
 800728c:	2200      	movs	r2, #0
 800728e:	2300      	movs	r3, #0
 8007290:	4620      	mov	r0, r4
 8007292:	4629      	mov	r1, r5
 8007294:	f7f9 fb88 	bl	80009a8 <__aeabi_dcmpeq>
 8007298:	b108      	cbz	r0, 800729e <__cvt+0x7a>
 800729a:	f8cd 901c 	str.w	r9, [sp, #28]
 800729e:	2230      	movs	r2, #48	@ 0x30
 80072a0:	9b07      	ldr	r3, [sp, #28]
 80072a2:	454b      	cmp	r3, r9
 80072a4:	d31e      	bcc.n	80072e4 <__cvt+0xc0>
 80072a6:	4638      	mov	r0, r7
 80072a8:	9b07      	ldr	r3, [sp, #28]
 80072aa:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80072ac:	1bdb      	subs	r3, r3, r7
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	b008      	add	sp, #32
 80072b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072ba:	eb00 0906 	add.w	r9, r0, r6
 80072be:	d1e5      	bne.n	800728c <__cvt+0x68>
 80072c0:	7803      	ldrb	r3, [r0, #0]
 80072c2:	2b30      	cmp	r3, #48	@ 0x30
 80072c4:	d10a      	bne.n	80072dc <__cvt+0xb8>
 80072c6:	2200      	movs	r2, #0
 80072c8:	2300      	movs	r3, #0
 80072ca:	4620      	mov	r0, r4
 80072cc:	4629      	mov	r1, r5
 80072ce:	f7f9 fb6b 	bl	80009a8 <__aeabi_dcmpeq>
 80072d2:	b918      	cbnz	r0, 80072dc <__cvt+0xb8>
 80072d4:	f1c6 0601 	rsb	r6, r6, #1
 80072d8:	f8ca 6000 	str.w	r6, [sl]
 80072dc:	f8da 3000 	ldr.w	r3, [sl]
 80072e0:	4499      	add	r9, r3
 80072e2:	e7d3      	b.n	800728c <__cvt+0x68>
 80072e4:	1c59      	adds	r1, r3, #1
 80072e6:	9107      	str	r1, [sp, #28]
 80072e8:	701a      	strb	r2, [r3, #0]
 80072ea:	e7d9      	b.n	80072a0 <__cvt+0x7c>

080072ec <__exponent>:
 80072ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072ee:	2900      	cmp	r1, #0
 80072f0:	bfb6      	itet	lt
 80072f2:	232d      	movlt	r3, #45	@ 0x2d
 80072f4:	232b      	movge	r3, #43	@ 0x2b
 80072f6:	4249      	neglt	r1, r1
 80072f8:	2909      	cmp	r1, #9
 80072fa:	7002      	strb	r2, [r0, #0]
 80072fc:	7043      	strb	r3, [r0, #1]
 80072fe:	dd29      	ble.n	8007354 <__exponent+0x68>
 8007300:	f10d 0307 	add.w	r3, sp, #7
 8007304:	461d      	mov	r5, r3
 8007306:	270a      	movs	r7, #10
 8007308:	fbb1 f6f7 	udiv	r6, r1, r7
 800730c:	461a      	mov	r2, r3
 800730e:	fb07 1416 	mls	r4, r7, r6, r1
 8007312:	3430      	adds	r4, #48	@ 0x30
 8007314:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007318:	460c      	mov	r4, r1
 800731a:	2c63      	cmp	r4, #99	@ 0x63
 800731c:	4631      	mov	r1, r6
 800731e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007322:	dcf1      	bgt.n	8007308 <__exponent+0x1c>
 8007324:	3130      	adds	r1, #48	@ 0x30
 8007326:	1e94      	subs	r4, r2, #2
 8007328:	f803 1c01 	strb.w	r1, [r3, #-1]
 800732c:	4623      	mov	r3, r4
 800732e:	1c41      	adds	r1, r0, #1
 8007330:	42ab      	cmp	r3, r5
 8007332:	d30a      	bcc.n	800734a <__exponent+0x5e>
 8007334:	f10d 0309 	add.w	r3, sp, #9
 8007338:	1a9b      	subs	r3, r3, r2
 800733a:	42ac      	cmp	r4, r5
 800733c:	bf88      	it	hi
 800733e:	2300      	movhi	r3, #0
 8007340:	3302      	adds	r3, #2
 8007342:	4403      	add	r3, r0
 8007344:	1a18      	subs	r0, r3, r0
 8007346:	b003      	add	sp, #12
 8007348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800734a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800734e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007352:	e7ed      	b.n	8007330 <__exponent+0x44>
 8007354:	2330      	movs	r3, #48	@ 0x30
 8007356:	3130      	adds	r1, #48	@ 0x30
 8007358:	7083      	strb	r3, [r0, #2]
 800735a:	70c1      	strb	r1, [r0, #3]
 800735c:	1d03      	adds	r3, r0, #4
 800735e:	e7f1      	b.n	8007344 <__exponent+0x58>

08007360 <_printf_float>:
 8007360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	b091      	sub	sp, #68	@ 0x44
 8007366:	460c      	mov	r4, r1
 8007368:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800736c:	4616      	mov	r6, r2
 800736e:	461f      	mov	r7, r3
 8007370:	4605      	mov	r5, r0
 8007372:	f000 fcfb 	bl	8007d6c <_localeconv_r>
 8007376:	6803      	ldr	r3, [r0, #0]
 8007378:	4618      	mov	r0, r3
 800737a:	9308      	str	r3, [sp, #32]
 800737c:	f7f8 fee8 	bl	8000150 <strlen>
 8007380:	2300      	movs	r3, #0
 8007382:	930e      	str	r3, [sp, #56]	@ 0x38
 8007384:	f8d8 3000 	ldr.w	r3, [r8]
 8007388:	9009      	str	r0, [sp, #36]	@ 0x24
 800738a:	3307      	adds	r3, #7
 800738c:	f023 0307 	bic.w	r3, r3, #7
 8007390:	f103 0208 	add.w	r2, r3, #8
 8007394:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007398:	f8d4 b000 	ldr.w	fp, [r4]
 800739c:	f8c8 2000 	str.w	r2, [r8]
 80073a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073a4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80073a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073aa:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80073ae:	f04f 32ff 	mov.w	r2, #4294967295
 80073b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80073b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80073ba:	4b9c      	ldr	r3, [pc, #624]	@ (800762c <_printf_float+0x2cc>)
 80073bc:	f7f9 fb26 	bl	8000a0c <__aeabi_dcmpun>
 80073c0:	bb70      	cbnz	r0, 8007420 <_printf_float+0xc0>
 80073c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80073c6:	f04f 32ff 	mov.w	r2, #4294967295
 80073ca:	4b98      	ldr	r3, [pc, #608]	@ (800762c <_printf_float+0x2cc>)
 80073cc:	f7f9 fb00 	bl	80009d0 <__aeabi_dcmple>
 80073d0:	bb30      	cbnz	r0, 8007420 <_printf_float+0xc0>
 80073d2:	2200      	movs	r2, #0
 80073d4:	2300      	movs	r3, #0
 80073d6:	4640      	mov	r0, r8
 80073d8:	4649      	mov	r1, r9
 80073da:	f7f9 faef 	bl	80009bc <__aeabi_dcmplt>
 80073de:	b110      	cbz	r0, 80073e6 <_printf_float+0x86>
 80073e0:	232d      	movs	r3, #45	@ 0x2d
 80073e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073e6:	4a92      	ldr	r2, [pc, #584]	@ (8007630 <_printf_float+0x2d0>)
 80073e8:	4b92      	ldr	r3, [pc, #584]	@ (8007634 <_printf_float+0x2d4>)
 80073ea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80073ee:	bf8c      	ite	hi
 80073f0:	4690      	movhi	r8, r2
 80073f2:	4698      	movls	r8, r3
 80073f4:	2303      	movs	r3, #3
 80073f6:	f04f 0900 	mov.w	r9, #0
 80073fa:	6123      	str	r3, [r4, #16]
 80073fc:	f02b 0304 	bic.w	r3, fp, #4
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	4633      	mov	r3, r6
 8007404:	4621      	mov	r1, r4
 8007406:	4628      	mov	r0, r5
 8007408:	9700      	str	r7, [sp, #0]
 800740a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800740c:	f000 f9d4 	bl	80077b8 <_printf_common>
 8007410:	3001      	adds	r0, #1
 8007412:	f040 8090 	bne.w	8007536 <_printf_float+0x1d6>
 8007416:	f04f 30ff 	mov.w	r0, #4294967295
 800741a:	b011      	add	sp, #68	@ 0x44
 800741c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007420:	4642      	mov	r2, r8
 8007422:	464b      	mov	r3, r9
 8007424:	4640      	mov	r0, r8
 8007426:	4649      	mov	r1, r9
 8007428:	f7f9 faf0 	bl	8000a0c <__aeabi_dcmpun>
 800742c:	b148      	cbz	r0, 8007442 <_printf_float+0xe2>
 800742e:	464b      	mov	r3, r9
 8007430:	2b00      	cmp	r3, #0
 8007432:	bfb8      	it	lt
 8007434:	232d      	movlt	r3, #45	@ 0x2d
 8007436:	4a80      	ldr	r2, [pc, #512]	@ (8007638 <_printf_float+0x2d8>)
 8007438:	bfb8      	it	lt
 800743a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800743e:	4b7f      	ldr	r3, [pc, #508]	@ (800763c <_printf_float+0x2dc>)
 8007440:	e7d3      	b.n	80073ea <_printf_float+0x8a>
 8007442:	6863      	ldr	r3, [r4, #4]
 8007444:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	d13f      	bne.n	80074cc <_printf_float+0x16c>
 800744c:	2306      	movs	r3, #6
 800744e:	6063      	str	r3, [r4, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007456:	6023      	str	r3, [r4, #0]
 8007458:	9206      	str	r2, [sp, #24]
 800745a:	aa0e      	add	r2, sp, #56	@ 0x38
 800745c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007460:	aa0d      	add	r2, sp, #52	@ 0x34
 8007462:	9203      	str	r2, [sp, #12]
 8007464:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007468:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800746c:	6863      	ldr	r3, [r4, #4]
 800746e:	4642      	mov	r2, r8
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	4628      	mov	r0, r5
 8007474:	464b      	mov	r3, r9
 8007476:	910a      	str	r1, [sp, #40]	@ 0x28
 8007478:	f7ff fed4 	bl	8007224 <__cvt>
 800747c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800747e:	4680      	mov	r8, r0
 8007480:	2947      	cmp	r1, #71	@ 0x47
 8007482:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007484:	d128      	bne.n	80074d8 <_printf_float+0x178>
 8007486:	1cc8      	adds	r0, r1, #3
 8007488:	db02      	blt.n	8007490 <_printf_float+0x130>
 800748a:	6863      	ldr	r3, [r4, #4]
 800748c:	4299      	cmp	r1, r3
 800748e:	dd40      	ble.n	8007512 <_printf_float+0x1b2>
 8007490:	f1aa 0a02 	sub.w	sl, sl, #2
 8007494:	fa5f fa8a 	uxtb.w	sl, sl
 8007498:	4652      	mov	r2, sl
 800749a:	3901      	subs	r1, #1
 800749c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80074a0:	910d      	str	r1, [sp, #52]	@ 0x34
 80074a2:	f7ff ff23 	bl	80072ec <__exponent>
 80074a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80074a8:	4681      	mov	r9, r0
 80074aa:	1813      	adds	r3, r2, r0
 80074ac:	2a01      	cmp	r2, #1
 80074ae:	6123      	str	r3, [r4, #16]
 80074b0:	dc02      	bgt.n	80074b8 <_printf_float+0x158>
 80074b2:	6822      	ldr	r2, [r4, #0]
 80074b4:	07d2      	lsls	r2, r2, #31
 80074b6:	d501      	bpl.n	80074bc <_printf_float+0x15c>
 80074b8:	3301      	adds	r3, #1
 80074ba:	6123      	str	r3, [r4, #16]
 80074bc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d09e      	beq.n	8007402 <_printf_float+0xa2>
 80074c4:	232d      	movs	r3, #45	@ 0x2d
 80074c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074ca:	e79a      	b.n	8007402 <_printf_float+0xa2>
 80074cc:	2947      	cmp	r1, #71	@ 0x47
 80074ce:	d1bf      	bne.n	8007450 <_printf_float+0xf0>
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1bd      	bne.n	8007450 <_printf_float+0xf0>
 80074d4:	2301      	movs	r3, #1
 80074d6:	e7ba      	b.n	800744e <_printf_float+0xee>
 80074d8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80074dc:	d9dc      	bls.n	8007498 <_printf_float+0x138>
 80074de:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80074e2:	d118      	bne.n	8007516 <_printf_float+0x1b6>
 80074e4:	2900      	cmp	r1, #0
 80074e6:	6863      	ldr	r3, [r4, #4]
 80074e8:	dd0b      	ble.n	8007502 <_printf_float+0x1a2>
 80074ea:	6121      	str	r1, [r4, #16]
 80074ec:	b913      	cbnz	r3, 80074f4 <_printf_float+0x194>
 80074ee:	6822      	ldr	r2, [r4, #0]
 80074f0:	07d0      	lsls	r0, r2, #31
 80074f2:	d502      	bpl.n	80074fa <_printf_float+0x19a>
 80074f4:	3301      	adds	r3, #1
 80074f6:	440b      	add	r3, r1
 80074f8:	6123      	str	r3, [r4, #16]
 80074fa:	f04f 0900 	mov.w	r9, #0
 80074fe:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007500:	e7dc      	b.n	80074bc <_printf_float+0x15c>
 8007502:	b913      	cbnz	r3, 800750a <_printf_float+0x1aa>
 8007504:	6822      	ldr	r2, [r4, #0]
 8007506:	07d2      	lsls	r2, r2, #31
 8007508:	d501      	bpl.n	800750e <_printf_float+0x1ae>
 800750a:	3302      	adds	r3, #2
 800750c:	e7f4      	b.n	80074f8 <_printf_float+0x198>
 800750e:	2301      	movs	r3, #1
 8007510:	e7f2      	b.n	80074f8 <_printf_float+0x198>
 8007512:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007518:	4299      	cmp	r1, r3
 800751a:	db05      	blt.n	8007528 <_printf_float+0x1c8>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	6121      	str	r1, [r4, #16]
 8007520:	07d8      	lsls	r0, r3, #31
 8007522:	d5ea      	bpl.n	80074fa <_printf_float+0x19a>
 8007524:	1c4b      	adds	r3, r1, #1
 8007526:	e7e7      	b.n	80074f8 <_printf_float+0x198>
 8007528:	2900      	cmp	r1, #0
 800752a:	bfcc      	ite	gt
 800752c:	2201      	movgt	r2, #1
 800752e:	f1c1 0202 	rsble	r2, r1, #2
 8007532:	4413      	add	r3, r2
 8007534:	e7e0      	b.n	80074f8 <_printf_float+0x198>
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	055a      	lsls	r2, r3, #21
 800753a:	d407      	bmi.n	800754c <_printf_float+0x1ec>
 800753c:	6923      	ldr	r3, [r4, #16]
 800753e:	4642      	mov	r2, r8
 8007540:	4631      	mov	r1, r6
 8007542:	4628      	mov	r0, r5
 8007544:	47b8      	blx	r7
 8007546:	3001      	adds	r0, #1
 8007548:	d12b      	bne.n	80075a2 <_printf_float+0x242>
 800754a:	e764      	b.n	8007416 <_printf_float+0xb6>
 800754c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007550:	f240 80dc 	bls.w	800770c <_printf_float+0x3ac>
 8007554:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007558:	2200      	movs	r2, #0
 800755a:	2300      	movs	r3, #0
 800755c:	f7f9 fa24 	bl	80009a8 <__aeabi_dcmpeq>
 8007560:	2800      	cmp	r0, #0
 8007562:	d033      	beq.n	80075cc <_printf_float+0x26c>
 8007564:	2301      	movs	r3, #1
 8007566:	4631      	mov	r1, r6
 8007568:	4628      	mov	r0, r5
 800756a:	4a35      	ldr	r2, [pc, #212]	@ (8007640 <_printf_float+0x2e0>)
 800756c:	47b8      	blx	r7
 800756e:	3001      	adds	r0, #1
 8007570:	f43f af51 	beq.w	8007416 <_printf_float+0xb6>
 8007574:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007578:	4543      	cmp	r3, r8
 800757a:	db02      	blt.n	8007582 <_printf_float+0x222>
 800757c:	6823      	ldr	r3, [r4, #0]
 800757e:	07d8      	lsls	r0, r3, #31
 8007580:	d50f      	bpl.n	80075a2 <_printf_float+0x242>
 8007582:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007586:	4631      	mov	r1, r6
 8007588:	4628      	mov	r0, r5
 800758a:	47b8      	blx	r7
 800758c:	3001      	adds	r0, #1
 800758e:	f43f af42 	beq.w	8007416 <_printf_float+0xb6>
 8007592:	f04f 0900 	mov.w	r9, #0
 8007596:	f108 38ff 	add.w	r8, r8, #4294967295
 800759a:	f104 0a1a 	add.w	sl, r4, #26
 800759e:	45c8      	cmp	r8, r9
 80075a0:	dc09      	bgt.n	80075b6 <_printf_float+0x256>
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	079b      	lsls	r3, r3, #30
 80075a6:	f100 8102 	bmi.w	80077ae <_printf_float+0x44e>
 80075aa:	68e0      	ldr	r0, [r4, #12]
 80075ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075ae:	4298      	cmp	r0, r3
 80075b0:	bfb8      	it	lt
 80075b2:	4618      	movlt	r0, r3
 80075b4:	e731      	b.n	800741a <_printf_float+0xba>
 80075b6:	2301      	movs	r3, #1
 80075b8:	4652      	mov	r2, sl
 80075ba:	4631      	mov	r1, r6
 80075bc:	4628      	mov	r0, r5
 80075be:	47b8      	blx	r7
 80075c0:	3001      	adds	r0, #1
 80075c2:	f43f af28 	beq.w	8007416 <_printf_float+0xb6>
 80075c6:	f109 0901 	add.w	r9, r9, #1
 80075ca:	e7e8      	b.n	800759e <_printf_float+0x23e>
 80075cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	dc38      	bgt.n	8007644 <_printf_float+0x2e4>
 80075d2:	2301      	movs	r3, #1
 80075d4:	4631      	mov	r1, r6
 80075d6:	4628      	mov	r0, r5
 80075d8:	4a19      	ldr	r2, [pc, #100]	@ (8007640 <_printf_float+0x2e0>)
 80075da:	47b8      	blx	r7
 80075dc:	3001      	adds	r0, #1
 80075de:	f43f af1a 	beq.w	8007416 <_printf_float+0xb6>
 80075e2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80075e6:	ea59 0303 	orrs.w	r3, r9, r3
 80075ea:	d102      	bne.n	80075f2 <_printf_float+0x292>
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	07d9      	lsls	r1, r3, #31
 80075f0:	d5d7      	bpl.n	80075a2 <_printf_float+0x242>
 80075f2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80075f6:	4631      	mov	r1, r6
 80075f8:	4628      	mov	r0, r5
 80075fa:	47b8      	blx	r7
 80075fc:	3001      	adds	r0, #1
 80075fe:	f43f af0a 	beq.w	8007416 <_printf_float+0xb6>
 8007602:	f04f 0a00 	mov.w	sl, #0
 8007606:	f104 0b1a 	add.w	fp, r4, #26
 800760a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800760c:	425b      	negs	r3, r3
 800760e:	4553      	cmp	r3, sl
 8007610:	dc01      	bgt.n	8007616 <_printf_float+0x2b6>
 8007612:	464b      	mov	r3, r9
 8007614:	e793      	b.n	800753e <_printf_float+0x1de>
 8007616:	2301      	movs	r3, #1
 8007618:	465a      	mov	r2, fp
 800761a:	4631      	mov	r1, r6
 800761c:	4628      	mov	r0, r5
 800761e:	47b8      	blx	r7
 8007620:	3001      	adds	r0, #1
 8007622:	f43f aef8 	beq.w	8007416 <_printf_float+0xb6>
 8007626:	f10a 0a01 	add.w	sl, sl, #1
 800762a:	e7ee      	b.n	800760a <_printf_float+0x2aa>
 800762c:	7fefffff 	.word	0x7fefffff
 8007630:	0800ab60 	.word	0x0800ab60
 8007634:	0800ab5c 	.word	0x0800ab5c
 8007638:	0800ab68 	.word	0x0800ab68
 800763c:	0800ab64 	.word	0x0800ab64
 8007640:	0800ab6c 	.word	0x0800ab6c
 8007644:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007646:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800764a:	4553      	cmp	r3, sl
 800764c:	bfa8      	it	ge
 800764e:	4653      	movge	r3, sl
 8007650:	2b00      	cmp	r3, #0
 8007652:	4699      	mov	r9, r3
 8007654:	dc36      	bgt.n	80076c4 <_printf_float+0x364>
 8007656:	f04f 0b00 	mov.w	fp, #0
 800765a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800765e:	f104 021a 	add.w	r2, r4, #26
 8007662:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007664:	930a      	str	r3, [sp, #40]	@ 0x28
 8007666:	eba3 0309 	sub.w	r3, r3, r9
 800766a:	455b      	cmp	r3, fp
 800766c:	dc31      	bgt.n	80076d2 <_printf_float+0x372>
 800766e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007670:	459a      	cmp	sl, r3
 8007672:	dc3a      	bgt.n	80076ea <_printf_float+0x38a>
 8007674:	6823      	ldr	r3, [r4, #0]
 8007676:	07da      	lsls	r2, r3, #31
 8007678:	d437      	bmi.n	80076ea <_printf_float+0x38a>
 800767a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800767c:	ebaa 0903 	sub.w	r9, sl, r3
 8007680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007682:	ebaa 0303 	sub.w	r3, sl, r3
 8007686:	4599      	cmp	r9, r3
 8007688:	bfa8      	it	ge
 800768a:	4699      	movge	r9, r3
 800768c:	f1b9 0f00 	cmp.w	r9, #0
 8007690:	dc33      	bgt.n	80076fa <_printf_float+0x39a>
 8007692:	f04f 0800 	mov.w	r8, #0
 8007696:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800769a:	f104 0b1a 	add.w	fp, r4, #26
 800769e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076a0:	ebaa 0303 	sub.w	r3, sl, r3
 80076a4:	eba3 0309 	sub.w	r3, r3, r9
 80076a8:	4543      	cmp	r3, r8
 80076aa:	f77f af7a 	ble.w	80075a2 <_printf_float+0x242>
 80076ae:	2301      	movs	r3, #1
 80076b0:	465a      	mov	r2, fp
 80076b2:	4631      	mov	r1, r6
 80076b4:	4628      	mov	r0, r5
 80076b6:	47b8      	blx	r7
 80076b8:	3001      	adds	r0, #1
 80076ba:	f43f aeac 	beq.w	8007416 <_printf_float+0xb6>
 80076be:	f108 0801 	add.w	r8, r8, #1
 80076c2:	e7ec      	b.n	800769e <_printf_float+0x33e>
 80076c4:	4642      	mov	r2, r8
 80076c6:	4631      	mov	r1, r6
 80076c8:	4628      	mov	r0, r5
 80076ca:	47b8      	blx	r7
 80076cc:	3001      	adds	r0, #1
 80076ce:	d1c2      	bne.n	8007656 <_printf_float+0x2f6>
 80076d0:	e6a1      	b.n	8007416 <_printf_float+0xb6>
 80076d2:	2301      	movs	r3, #1
 80076d4:	4631      	mov	r1, r6
 80076d6:	4628      	mov	r0, r5
 80076d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80076da:	47b8      	blx	r7
 80076dc:	3001      	adds	r0, #1
 80076de:	f43f ae9a 	beq.w	8007416 <_printf_float+0xb6>
 80076e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076e4:	f10b 0b01 	add.w	fp, fp, #1
 80076e8:	e7bb      	b.n	8007662 <_printf_float+0x302>
 80076ea:	4631      	mov	r1, r6
 80076ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076f0:	4628      	mov	r0, r5
 80076f2:	47b8      	blx	r7
 80076f4:	3001      	adds	r0, #1
 80076f6:	d1c0      	bne.n	800767a <_printf_float+0x31a>
 80076f8:	e68d      	b.n	8007416 <_printf_float+0xb6>
 80076fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076fc:	464b      	mov	r3, r9
 80076fe:	4631      	mov	r1, r6
 8007700:	4628      	mov	r0, r5
 8007702:	4442      	add	r2, r8
 8007704:	47b8      	blx	r7
 8007706:	3001      	adds	r0, #1
 8007708:	d1c3      	bne.n	8007692 <_printf_float+0x332>
 800770a:	e684      	b.n	8007416 <_printf_float+0xb6>
 800770c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007710:	f1ba 0f01 	cmp.w	sl, #1
 8007714:	dc01      	bgt.n	800771a <_printf_float+0x3ba>
 8007716:	07db      	lsls	r3, r3, #31
 8007718:	d536      	bpl.n	8007788 <_printf_float+0x428>
 800771a:	2301      	movs	r3, #1
 800771c:	4642      	mov	r2, r8
 800771e:	4631      	mov	r1, r6
 8007720:	4628      	mov	r0, r5
 8007722:	47b8      	blx	r7
 8007724:	3001      	adds	r0, #1
 8007726:	f43f ae76 	beq.w	8007416 <_printf_float+0xb6>
 800772a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800772e:	4631      	mov	r1, r6
 8007730:	4628      	mov	r0, r5
 8007732:	47b8      	blx	r7
 8007734:	3001      	adds	r0, #1
 8007736:	f43f ae6e 	beq.w	8007416 <_printf_float+0xb6>
 800773a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800773e:	2200      	movs	r2, #0
 8007740:	2300      	movs	r3, #0
 8007742:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007746:	f7f9 f92f 	bl	80009a8 <__aeabi_dcmpeq>
 800774a:	b9c0      	cbnz	r0, 800777e <_printf_float+0x41e>
 800774c:	4653      	mov	r3, sl
 800774e:	f108 0201 	add.w	r2, r8, #1
 8007752:	4631      	mov	r1, r6
 8007754:	4628      	mov	r0, r5
 8007756:	47b8      	blx	r7
 8007758:	3001      	adds	r0, #1
 800775a:	d10c      	bne.n	8007776 <_printf_float+0x416>
 800775c:	e65b      	b.n	8007416 <_printf_float+0xb6>
 800775e:	2301      	movs	r3, #1
 8007760:	465a      	mov	r2, fp
 8007762:	4631      	mov	r1, r6
 8007764:	4628      	mov	r0, r5
 8007766:	47b8      	blx	r7
 8007768:	3001      	adds	r0, #1
 800776a:	f43f ae54 	beq.w	8007416 <_printf_float+0xb6>
 800776e:	f108 0801 	add.w	r8, r8, #1
 8007772:	45d0      	cmp	r8, sl
 8007774:	dbf3      	blt.n	800775e <_printf_float+0x3fe>
 8007776:	464b      	mov	r3, r9
 8007778:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800777c:	e6e0      	b.n	8007540 <_printf_float+0x1e0>
 800777e:	f04f 0800 	mov.w	r8, #0
 8007782:	f104 0b1a 	add.w	fp, r4, #26
 8007786:	e7f4      	b.n	8007772 <_printf_float+0x412>
 8007788:	2301      	movs	r3, #1
 800778a:	4642      	mov	r2, r8
 800778c:	e7e1      	b.n	8007752 <_printf_float+0x3f2>
 800778e:	2301      	movs	r3, #1
 8007790:	464a      	mov	r2, r9
 8007792:	4631      	mov	r1, r6
 8007794:	4628      	mov	r0, r5
 8007796:	47b8      	blx	r7
 8007798:	3001      	adds	r0, #1
 800779a:	f43f ae3c 	beq.w	8007416 <_printf_float+0xb6>
 800779e:	f108 0801 	add.w	r8, r8, #1
 80077a2:	68e3      	ldr	r3, [r4, #12]
 80077a4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80077a6:	1a5b      	subs	r3, r3, r1
 80077a8:	4543      	cmp	r3, r8
 80077aa:	dcf0      	bgt.n	800778e <_printf_float+0x42e>
 80077ac:	e6fd      	b.n	80075aa <_printf_float+0x24a>
 80077ae:	f04f 0800 	mov.w	r8, #0
 80077b2:	f104 0919 	add.w	r9, r4, #25
 80077b6:	e7f4      	b.n	80077a2 <_printf_float+0x442>

080077b8 <_printf_common>:
 80077b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077bc:	4616      	mov	r6, r2
 80077be:	4698      	mov	r8, r3
 80077c0:	688a      	ldr	r2, [r1, #8]
 80077c2:	690b      	ldr	r3, [r1, #16]
 80077c4:	4607      	mov	r7, r0
 80077c6:	4293      	cmp	r3, r2
 80077c8:	bfb8      	it	lt
 80077ca:	4613      	movlt	r3, r2
 80077cc:	6033      	str	r3, [r6, #0]
 80077ce:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077d2:	460c      	mov	r4, r1
 80077d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077d8:	b10a      	cbz	r2, 80077de <_printf_common+0x26>
 80077da:	3301      	adds	r3, #1
 80077dc:	6033      	str	r3, [r6, #0]
 80077de:	6823      	ldr	r3, [r4, #0]
 80077e0:	0699      	lsls	r1, r3, #26
 80077e2:	bf42      	ittt	mi
 80077e4:	6833      	ldrmi	r3, [r6, #0]
 80077e6:	3302      	addmi	r3, #2
 80077e8:	6033      	strmi	r3, [r6, #0]
 80077ea:	6825      	ldr	r5, [r4, #0]
 80077ec:	f015 0506 	ands.w	r5, r5, #6
 80077f0:	d106      	bne.n	8007800 <_printf_common+0x48>
 80077f2:	f104 0a19 	add.w	sl, r4, #25
 80077f6:	68e3      	ldr	r3, [r4, #12]
 80077f8:	6832      	ldr	r2, [r6, #0]
 80077fa:	1a9b      	subs	r3, r3, r2
 80077fc:	42ab      	cmp	r3, r5
 80077fe:	dc2b      	bgt.n	8007858 <_printf_common+0xa0>
 8007800:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007804:	6822      	ldr	r2, [r4, #0]
 8007806:	3b00      	subs	r3, #0
 8007808:	bf18      	it	ne
 800780a:	2301      	movne	r3, #1
 800780c:	0692      	lsls	r2, r2, #26
 800780e:	d430      	bmi.n	8007872 <_printf_common+0xba>
 8007810:	4641      	mov	r1, r8
 8007812:	4638      	mov	r0, r7
 8007814:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007818:	47c8      	blx	r9
 800781a:	3001      	adds	r0, #1
 800781c:	d023      	beq.n	8007866 <_printf_common+0xae>
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	6922      	ldr	r2, [r4, #16]
 8007822:	f003 0306 	and.w	r3, r3, #6
 8007826:	2b04      	cmp	r3, #4
 8007828:	bf14      	ite	ne
 800782a:	2500      	movne	r5, #0
 800782c:	6833      	ldreq	r3, [r6, #0]
 800782e:	f04f 0600 	mov.w	r6, #0
 8007832:	bf08      	it	eq
 8007834:	68e5      	ldreq	r5, [r4, #12]
 8007836:	f104 041a 	add.w	r4, r4, #26
 800783a:	bf08      	it	eq
 800783c:	1aed      	subeq	r5, r5, r3
 800783e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007842:	bf08      	it	eq
 8007844:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007848:	4293      	cmp	r3, r2
 800784a:	bfc4      	itt	gt
 800784c:	1a9b      	subgt	r3, r3, r2
 800784e:	18ed      	addgt	r5, r5, r3
 8007850:	42b5      	cmp	r5, r6
 8007852:	d11a      	bne.n	800788a <_printf_common+0xd2>
 8007854:	2000      	movs	r0, #0
 8007856:	e008      	b.n	800786a <_printf_common+0xb2>
 8007858:	2301      	movs	r3, #1
 800785a:	4652      	mov	r2, sl
 800785c:	4641      	mov	r1, r8
 800785e:	4638      	mov	r0, r7
 8007860:	47c8      	blx	r9
 8007862:	3001      	adds	r0, #1
 8007864:	d103      	bne.n	800786e <_printf_common+0xb6>
 8007866:	f04f 30ff 	mov.w	r0, #4294967295
 800786a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800786e:	3501      	adds	r5, #1
 8007870:	e7c1      	b.n	80077f6 <_printf_common+0x3e>
 8007872:	2030      	movs	r0, #48	@ 0x30
 8007874:	18e1      	adds	r1, r4, r3
 8007876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007880:	4422      	add	r2, r4
 8007882:	3302      	adds	r3, #2
 8007884:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007888:	e7c2      	b.n	8007810 <_printf_common+0x58>
 800788a:	2301      	movs	r3, #1
 800788c:	4622      	mov	r2, r4
 800788e:	4641      	mov	r1, r8
 8007890:	4638      	mov	r0, r7
 8007892:	47c8      	blx	r9
 8007894:	3001      	adds	r0, #1
 8007896:	d0e6      	beq.n	8007866 <_printf_common+0xae>
 8007898:	3601      	adds	r6, #1
 800789a:	e7d9      	b.n	8007850 <_printf_common+0x98>

0800789c <_printf_i>:
 800789c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078a0:	7e0f      	ldrb	r7, [r1, #24]
 80078a2:	4691      	mov	r9, r2
 80078a4:	2f78      	cmp	r7, #120	@ 0x78
 80078a6:	4680      	mov	r8, r0
 80078a8:	460c      	mov	r4, r1
 80078aa:	469a      	mov	sl, r3
 80078ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078b2:	d807      	bhi.n	80078c4 <_printf_i+0x28>
 80078b4:	2f62      	cmp	r7, #98	@ 0x62
 80078b6:	d80a      	bhi.n	80078ce <_printf_i+0x32>
 80078b8:	2f00      	cmp	r7, #0
 80078ba:	f000 80d1 	beq.w	8007a60 <_printf_i+0x1c4>
 80078be:	2f58      	cmp	r7, #88	@ 0x58
 80078c0:	f000 80b8 	beq.w	8007a34 <_printf_i+0x198>
 80078c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80078cc:	e03a      	b.n	8007944 <_printf_i+0xa8>
 80078ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078d2:	2b15      	cmp	r3, #21
 80078d4:	d8f6      	bhi.n	80078c4 <_printf_i+0x28>
 80078d6:	a101      	add	r1, pc, #4	@ (adr r1, 80078dc <_printf_i+0x40>)
 80078d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078dc:	08007935 	.word	0x08007935
 80078e0:	08007949 	.word	0x08007949
 80078e4:	080078c5 	.word	0x080078c5
 80078e8:	080078c5 	.word	0x080078c5
 80078ec:	080078c5 	.word	0x080078c5
 80078f0:	080078c5 	.word	0x080078c5
 80078f4:	08007949 	.word	0x08007949
 80078f8:	080078c5 	.word	0x080078c5
 80078fc:	080078c5 	.word	0x080078c5
 8007900:	080078c5 	.word	0x080078c5
 8007904:	080078c5 	.word	0x080078c5
 8007908:	08007a47 	.word	0x08007a47
 800790c:	08007973 	.word	0x08007973
 8007910:	08007a01 	.word	0x08007a01
 8007914:	080078c5 	.word	0x080078c5
 8007918:	080078c5 	.word	0x080078c5
 800791c:	08007a69 	.word	0x08007a69
 8007920:	080078c5 	.word	0x080078c5
 8007924:	08007973 	.word	0x08007973
 8007928:	080078c5 	.word	0x080078c5
 800792c:	080078c5 	.word	0x080078c5
 8007930:	08007a09 	.word	0x08007a09
 8007934:	6833      	ldr	r3, [r6, #0]
 8007936:	1d1a      	adds	r2, r3, #4
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6032      	str	r2, [r6, #0]
 800793c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007944:	2301      	movs	r3, #1
 8007946:	e09c      	b.n	8007a82 <_printf_i+0x1e6>
 8007948:	6833      	ldr	r3, [r6, #0]
 800794a:	6820      	ldr	r0, [r4, #0]
 800794c:	1d19      	adds	r1, r3, #4
 800794e:	6031      	str	r1, [r6, #0]
 8007950:	0606      	lsls	r6, r0, #24
 8007952:	d501      	bpl.n	8007958 <_printf_i+0xbc>
 8007954:	681d      	ldr	r5, [r3, #0]
 8007956:	e003      	b.n	8007960 <_printf_i+0xc4>
 8007958:	0645      	lsls	r5, r0, #25
 800795a:	d5fb      	bpl.n	8007954 <_printf_i+0xb8>
 800795c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007960:	2d00      	cmp	r5, #0
 8007962:	da03      	bge.n	800796c <_printf_i+0xd0>
 8007964:	232d      	movs	r3, #45	@ 0x2d
 8007966:	426d      	negs	r5, r5
 8007968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800796c:	230a      	movs	r3, #10
 800796e:	4858      	ldr	r0, [pc, #352]	@ (8007ad0 <_printf_i+0x234>)
 8007970:	e011      	b.n	8007996 <_printf_i+0xfa>
 8007972:	6821      	ldr	r1, [r4, #0]
 8007974:	6833      	ldr	r3, [r6, #0]
 8007976:	0608      	lsls	r0, r1, #24
 8007978:	f853 5b04 	ldr.w	r5, [r3], #4
 800797c:	d402      	bmi.n	8007984 <_printf_i+0xe8>
 800797e:	0649      	lsls	r1, r1, #25
 8007980:	bf48      	it	mi
 8007982:	b2ad      	uxthmi	r5, r5
 8007984:	2f6f      	cmp	r7, #111	@ 0x6f
 8007986:	6033      	str	r3, [r6, #0]
 8007988:	bf14      	ite	ne
 800798a:	230a      	movne	r3, #10
 800798c:	2308      	moveq	r3, #8
 800798e:	4850      	ldr	r0, [pc, #320]	@ (8007ad0 <_printf_i+0x234>)
 8007990:	2100      	movs	r1, #0
 8007992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007996:	6866      	ldr	r6, [r4, #4]
 8007998:	2e00      	cmp	r6, #0
 800799a:	60a6      	str	r6, [r4, #8]
 800799c:	db05      	blt.n	80079aa <_printf_i+0x10e>
 800799e:	6821      	ldr	r1, [r4, #0]
 80079a0:	432e      	orrs	r6, r5
 80079a2:	f021 0104 	bic.w	r1, r1, #4
 80079a6:	6021      	str	r1, [r4, #0]
 80079a8:	d04b      	beq.n	8007a42 <_printf_i+0x1a6>
 80079aa:	4616      	mov	r6, r2
 80079ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80079b0:	fb03 5711 	mls	r7, r3, r1, r5
 80079b4:	5dc7      	ldrb	r7, [r0, r7]
 80079b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079ba:	462f      	mov	r7, r5
 80079bc:	42bb      	cmp	r3, r7
 80079be:	460d      	mov	r5, r1
 80079c0:	d9f4      	bls.n	80079ac <_printf_i+0x110>
 80079c2:	2b08      	cmp	r3, #8
 80079c4:	d10b      	bne.n	80079de <_printf_i+0x142>
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	07df      	lsls	r7, r3, #31
 80079ca:	d508      	bpl.n	80079de <_printf_i+0x142>
 80079cc:	6923      	ldr	r3, [r4, #16]
 80079ce:	6861      	ldr	r1, [r4, #4]
 80079d0:	4299      	cmp	r1, r3
 80079d2:	bfde      	ittt	le
 80079d4:	2330      	movle	r3, #48	@ 0x30
 80079d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079de:	1b92      	subs	r2, r2, r6
 80079e0:	6122      	str	r2, [r4, #16]
 80079e2:	464b      	mov	r3, r9
 80079e4:	4621      	mov	r1, r4
 80079e6:	4640      	mov	r0, r8
 80079e8:	f8cd a000 	str.w	sl, [sp]
 80079ec:	aa03      	add	r2, sp, #12
 80079ee:	f7ff fee3 	bl	80077b8 <_printf_common>
 80079f2:	3001      	adds	r0, #1
 80079f4:	d14a      	bne.n	8007a8c <_printf_i+0x1f0>
 80079f6:	f04f 30ff 	mov.w	r0, #4294967295
 80079fa:	b004      	add	sp, #16
 80079fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	f043 0320 	orr.w	r3, r3, #32
 8007a06:	6023      	str	r3, [r4, #0]
 8007a08:	2778      	movs	r7, #120	@ 0x78
 8007a0a:	4832      	ldr	r0, [pc, #200]	@ (8007ad4 <_printf_i+0x238>)
 8007a0c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	6831      	ldr	r1, [r6, #0]
 8007a14:	061f      	lsls	r7, r3, #24
 8007a16:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a1a:	d402      	bmi.n	8007a22 <_printf_i+0x186>
 8007a1c:	065f      	lsls	r7, r3, #25
 8007a1e:	bf48      	it	mi
 8007a20:	b2ad      	uxthmi	r5, r5
 8007a22:	6031      	str	r1, [r6, #0]
 8007a24:	07d9      	lsls	r1, r3, #31
 8007a26:	bf44      	itt	mi
 8007a28:	f043 0320 	orrmi.w	r3, r3, #32
 8007a2c:	6023      	strmi	r3, [r4, #0]
 8007a2e:	b11d      	cbz	r5, 8007a38 <_printf_i+0x19c>
 8007a30:	2310      	movs	r3, #16
 8007a32:	e7ad      	b.n	8007990 <_printf_i+0xf4>
 8007a34:	4826      	ldr	r0, [pc, #152]	@ (8007ad0 <_printf_i+0x234>)
 8007a36:	e7e9      	b.n	8007a0c <_printf_i+0x170>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	f023 0320 	bic.w	r3, r3, #32
 8007a3e:	6023      	str	r3, [r4, #0]
 8007a40:	e7f6      	b.n	8007a30 <_printf_i+0x194>
 8007a42:	4616      	mov	r6, r2
 8007a44:	e7bd      	b.n	80079c2 <_printf_i+0x126>
 8007a46:	6833      	ldr	r3, [r6, #0]
 8007a48:	6825      	ldr	r5, [r4, #0]
 8007a4a:	1d18      	adds	r0, r3, #4
 8007a4c:	6961      	ldr	r1, [r4, #20]
 8007a4e:	6030      	str	r0, [r6, #0]
 8007a50:	062e      	lsls	r6, r5, #24
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	d501      	bpl.n	8007a5a <_printf_i+0x1be>
 8007a56:	6019      	str	r1, [r3, #0]
 8007a58:	e002      	b.n	8007a60 <_printf_i+0x1c4>
 8007a5a:	0668      	lsls	r0, r5, #25
 8007a5c:	d5fb      	bpl.n	8007a56 <_printf_i+0x1ba>
 8007a5e:	8019      	strh	r1, [r3, #0]
 8007a60:	2300      	movs	r3, #0
 8007a62:	4616      	mov	r6, r2
 8007a64:	6123      	str	r3, [r4, #16]
 8007a66:	e7bc      	b.n	80079e2 <_printf_i+0x146>
 8007a68:	6833      	ldr	r3, [r6, #0]
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	1d1a      	adds	r2, r3, #4
 8007a6e:	6032      	str	r2, [r6, #0]
 8007a70:	681e      	ldr	r6, [r3, #0]
 8007a72:	6862      	ldr	r2, [r4, #4]
 8007a74:	4630      	mov	r0, r6
 8007a76:	f000 f9f0 	bl	8007e5a <memchr>
 8007a7a:	b108      	cbz	r0, 8007a80 <_printf_i+0x1e4>
 8007a7c:	1b80      	subs	r0, r0, r6
 8007a7e:	6060      	str	r0, [r4, #4]
 8007a80:	6863      	ldr	r3, [r4, #4]
 8007a82:	6123      	str	r3, [r4, #16]
 8007a84:	2300      	movs	r3, #0
 8007a86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a8a:	e7aa      	b.n	80079e2 <_printf_i+0x146>
 8007a8c:	4632      	mov	r2, r6
 8007a8e:	4649      	mov	r1, r9
 8007a90:	4640      	mov	r0, r8
 8007a92:	6923      	ldr	r3, [r4, #16]
 8007a94:	47d0      	blx	sl
 8007a96:	3001      	adds	r0, #1
 8007a98:	d0ad      	beq.n	80079f6 <_printf_i+0x15a>
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	079b      	lsls	r3, r3, #30
 8007a9e:	d413      	bmi.n	8007ac8 <_printf_i+0x22c>
 8007aa0:	68e0      	ldr	r0, [r4, #12]
 8007aa2:	9b03      	ldr	r3, [sp, #12]
 8007aa4:	4298      	cmp	r0, r3
 8007aa6:	bfb8      	it	lt
 8007aa8:	4618      	movlt	r0, r3
 8007aaa:	e7a6      	b.n	80079fa <_printf_i+0x15e>
 8007aac:	2301      	movs	r3, #1
 8007aae:	4632      	mov	r2, r6
 8007ab0:	4649      	mov	r1, r9
 8007ab2:	4640      	mov	r0, r8
 8007ab4:	47d0      	blx	sl
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	d09d      	beq.n	80079f6 <_printf_i+0x15a>
 8007aba:	3501      	adds	r5, #1
 8007abc:	68e3      	ldr	r3, [r4, #12]
 8007abe:	9903      	ldr	r1, [sp, #12]
 8007ac0:	1a5b      	subs	r3, r3, r1
 8007ac2:	42ab      	cmp	r3, r5
 8007ac4:	dcf2      	bgt.n	8007aac <_printf_i+0x210>
 8007ac6:	e7eb      	b.n	8007aa0 <_printf_i+0x204>
 8007ac8:	2500      	movs	r5, #0
 8007aca:	f104 0619 	add.w	r6, r4, #25
 8007ace:	e7f5      	b.n	8007abc <_printf_i+0x220>
 8007ad0:	0800ab6e 	.word	0x0800ab6e
 8007ad4:	0800ab7f 	.word	0x0800ab7f

08007ad8 <std>:
 8007ad8:	2300      	movs	r3, #0
 8007ada:	b510      	push	{r4, lr}
 8007adc:	4604      	mov	r4, r0
 8007ade:	e9c0 3300 	strd	r3, r3, [r0]
 8007ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ae6:	6083      	str	r3, [r0, #8]
 8007ae8:	8181      	strh	r1, [r0, #12]
 8007aea:	6643      	str	r3, [r0, #100]	@ 0x64
 8007aec:	81c2      	strh	r2, [r0, #14]
 8007aee:	6183      	str	r3, [r0, #24]
 8007af0:	4619      	mov	r1, r3
 8007af2:	2208      	movs	r2, #8
 8007af4:	305c      	adds	r0, #92	@ 0x5c
 8007af6:	f000 f931 	bl	8007d5c <memset>
 8007afa:	4b0d      	ldr	r3, [pc, #52]	@ (8007b30 <std+0x58>)
 8007afc:	6224      	str	r4, [r4, #32]
 8007afe:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b00:	4b0c      	ldr	r3, [pc, #48]	@ (8007b34 <std+0x5c>)
 8007b02:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b04:	4b0c      	ldr	r3, [pc, #48]	@ (8007b38 <std+0x60>)
 8007b06:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b08:	4b0c      	ldr	r3, [pc, #48]	@ (8007b3c <std+0x64>)
 8007b0a:	6323      	str	r3, [r4, #48]	@ 0x30
 8007b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b40 <std+0x68>)
 8007b0e:	429c      	cmp	r4, r3
 8007b10:	d006      	beq.n	8007b20 <std+0x48>
 8007b12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007b16:	4294      	cmp	r4, r2
 8007b18:	d002      	beq.n	8007b20 <std+0x48>
 8007b1a:	33d0      	adds	r3, #208	@ 0xd0
 8007b1c:	429c      	cmp	r4, r3
 8007b1e:	d105      	bne.n	8007b2c <std+0x54>
 8007b20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b28:	f000 b994 	b.w	8007e54 <__retarget_lock_init_recursive>
 8007b2c:	bd10      	pop	{r4, pc}
 8007b2e:	bf00      	nop
 8007b30:	08007c5d 	.word	0x08007c5d
 8007b34:	08007c7f 	.word	0x08007c7f
 8007b38:	08007cb7 	.word	0x08007cb7
 8007b3c:	08007cdb 	.word	0x08007cdb
 8007b40:	200005fc 	.word	0x200005fc

08007b44 <stdio_exit_handler>:
 8007b44:	4a02      	ldr	r2, [pc, #8]	@ (8007b50 <stdio_exit_handler+0xc>)
 8007b46:	4903      	ldr	r1, [pc, #12]	@ (8007b54 <stdio_exit_handler+0x10>)
 8007b48:	4803      	ldr	r0, [pc, #12]	@ (8007b58 <stdio_exit_handler+0x14>)
 8007b4a:	f000 b869 	b.w	8007c20 <_fwalk_sglue>
 8007b4e:	bf00      	nop
 8007b50:	2000002c 	.word	0x2000002c
 8007b54:	080097d1 	.word	0x080097d1
 8007b58:	2000003c 	.word	0x2000003c

08007b5c <cleanup_stdio>:
 8007b5c:	6841      	ldr	r1, [r0, #4]
 8007b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8007b90 <cleanup_stdio+0x34>)
 8007b60:	b510      	push	{r4, lr}
 8007b62:	4299      	cmp	r1, r3
 8007b64:	4604      	mov	r4, r0
 8007b66:	d001      	beq.n	8007b6c <cleanup_stdio+0x10>
 8007b68:	f001 fe32 	bl	80097d0 <_fflush_r>
 8007b6c:	68a1      	ldr	r1, [r4, #8]
 8007b6e:	4b09      	ldr	r3, [pc, #36]	@ (8007b94 <cleanup_stdio+0x38>)
 8007b70:	4299      	cmp	r1, r3
 8007b72:	d002      	beq.n	8007b7a <cleanup_stdio+0x1e>
 8007b74:	4620      	mov	r0, r4
 8007b76:	f001 fe2b 	bl	80097d0 <_fflush_r>
 8007b7a:	68e1      	ldr	r1, [r4, #12]
 8007b7c:	4b06      	ldr	r3, [pc, #24]	@ (8007b98 <cleanup_stdio+0x3c>)
 8007b7e:	4299      	cmp	r1, r3
 8007b80:	d004      	beq.n	8007b8c <cleanup_stdio+0x30>
 8007b82:	4620      	mov	r0, r4
 8007b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b88:	f001 be22 	b.w	80097d0 <_fflush_r>
 8007b8c:	bd10      	pop	{r4, pc}
 8007b8e:	bf00      	nop
 8007b90:	200005fc 	.word	0x200005fc
 8007b94:	20000664 	.word	0x20000664
 8007b98:	200006cc 	.word	0x200006cc

08007b9c <global_stdio_init.part.0>:
 8007b9c:	b510      	push	{r4, lr}
 8007b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8007bcc <global_stdio_init.part.0+0x30>)
 8007ba0:	4c0b      	ldr	r4, [pc, #44]	@ (8007bd0 <global_stdio_init.part.0+0x34>)
 8007ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8007bd4 <global_stdio_init.part.0+0x38>)
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	601a      	str	r2, [r3, #0]
 8007ba8:	2104      	movs	r1, #4
 8007baa:	2200      	movs	r2, #0
 8007bac:	f7ff ff94 	bl	8007ad8 <std>
 8007bb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	2109      	movs	r1, #9
 8007bb8:	f7ff ff8e 	bl	8007ad8 <std>
 8007bbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bc6:	2112      	movs	r1, #18
 8007bc8:	f7ff bf86 	b.w	8007ad8 <std>
 8007bcc:	20000734 	.word	0x20000734
 8007bd0:	200005fc 	.word	0x200005fc
 8007bd4:	08007b45 	.word	0x08007b45

08007bd8 <__sfp_lock_acquire>:
 8007bd8:	4801      	ldr	r0, [pc, #4]	@ (8007be0 <__sfp_lock_acquire+0x8>)
 8007bda:	f000 b93c 	b.w	8007e56 <__retarget_lock_acquire_recursive>
 8007bde:	bf00      	nop
 8007be0:	2000073d 	.word	0x2000073d

08007be4 <__sfp_lock_release>:
 8007be4:	4801      	ldr	r0, [pc, #4]	@ (8007bec <__sfp_lock_release+0x8>)
 8007be6:	f000 b937 	b.w	8007e58 <__retarget_lock_release_recursive>
 8007bea:	bf00      	nop
 8007bec:	2000073d 	.word	0x2000073d

08007bf0 <__sinit>:
 8007bf0:	b510      	push	{r4, lr}
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	f7ff fff0 	bl	8007bd8 <__sfp_lock_acquire>
 8007bf8:	6a23      	ldr	r3, [r4, #32]
 8007bfa:	b11b      	cbz	r3, 8007c04 <__sinit+0x14>
 8007bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c00:	f7ff bff0 	b.w	8007be4 <__sfp_lock_release>
 8007c04:	4b04      	ldr	r3, [pc, #16]	@ (8007c18 <__sinit+0x28>)
 8007c06:	6223      	str	r3, [r4, #32]
 8007c08:	4b04      	ldr	r3, [pc, #16]	@ (8007c1c <__sinit+0x2c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1f5      	bne.n	8007bfc <__sinit+0xc>
 8007c10:	f7ff ffc4 	bl	8007b9c <global_stdio_init.part.0>
 8007c14:	e7f2      	b.n	8007bfc <__sinit+0xc>
 8007c16:	bf00      	nop
 8007c18:	08007b5d 	.word	0x08007b5d
 8007c1c:	20000734 	.word	0x20000734

08007c20 <_fwalk_sglue>:
 8007c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c24:	4607      	mov	r7, r0
 8007c26:	4688      	mov	r8, r1
 8007c28:	4614      	mov	r4, r2
 8007c2a:	2600      	movs	r6, #0
 8007c2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c30:	f1b9 0901 	subs.w	r9, r9, #1
 8007c34:	d505      	bpl.n	8007c42 <_fwalk_sglue+0x22>
 8007c36:	6824      	ldr	r4, [r4, #0]
 8007c38:	2c00      	cmp	r4, #0
 8007c3a:	d1f7      	bne.n	8007c2c <_fwalk_sglue+0xc>
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c42:	89ab      	ldrh	r3, [r5, #12]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d907      	bls.n	8007c58 <_fwalk_sglue+0x38>
 8007c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	d003      	beq.n	8007c58 <_fwalk_sglue+0x38>
 8007c50:	4629      	mov	r1, r5
 8007c52:	4638      	mov	r0, r7
 8007c54:	47c0      	blx	r8
 8007c56:	4306      	orrs	r6, r0
 8007c58:	3568      	adds	r5, #104	@ 0x68
 8007c5a:	e7e9      	b.n	8007c30 <_fwalk_sglue+0x10>

08007c5c <__sread>:
 8007c5c:	b510      	push	{r4, lr}
 8007c5e:	460c      	mov	r4, r1
 8007c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c64:	f000 f8a8 	bl	8007db8 <_read_r>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	bfab      	itete	ge
 8007c6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c6e:	89a3      	ldrhlt	r3, [r4, #12]
 8007c70:	181b      	addge	r3, r3, r0
 8007c72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c76:	bfac      	ite	ge
 8007c78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c7a:	81a3      	strhlt	r3, [r4, #12]
 8007c7c:	bd10      	pop	{r4, pc}

08007c7e <__swrite>:
 8007c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c82:	461f      	mov	r7, r3
 8007c84:	898b      	ldrh	r3, [r1, #12]
 8007c86:	4605      	mov	r5, r0
 8007c88:	05db      	lsls	r3, r3, #23
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	4616      	mov	r6, r2
 8007c8e:	d505      	bpl.n	8007c9c <__swrite+0x1e>
 8007c90:	2302      	movs	r3, #2
 8007c92:	2200      	movs	r2, #0
 8007c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c98:	f000 f87c 	bl	8007d94 <_lseek_r>
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	4632      	mov	r2, r6
 8007ca0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ca4:	81a3      	strh	r3, [r4, #12]
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	463b      	mov	r3, r7
 8007caa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb2:	f000 b893 	b.w	8007ddc <_write_r>

08007cb6 <__sseek>:
 8007cb6:	b510      	push	{r4, lr}
 8007cb8:	460c      	mov	r4, r1
 8007cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cbe:	f000 f869 	bl	8007d94 <_lseek_r>
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	89a3      	ldrh	r3, [r4, #12]
 8007cc6:	bf15      	itete	ne
 8007cc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007cca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007cce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007cd2:	81a3      	strheq	r3, [r4, #12]
 8007cd4:	bf18      	it	ne
 8007cd6:	81a3      	strhne	r3, [r4, #12]
 8007cd8:	bd10      	pop	{r4, pc}

08007cda <__sclose>:
 8007cda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cde:	f000 b849 	b.w	8007d74 <_close_r>

08007ce2 <_vsniprintf_r>:
 8007ce2:	b530      	push	{r4, r5, lr}
 8007ce4:	4614      	mov	r4, r2
 8007ce6:	2c00      	cmp	r4, #0
 8007ce8:	4605      	mov	r5, r0
 8007cea:	461a      	mov	r2, r3
 8007cec:	b09b      	sub	sp, #108	@ 0x6c
 8007cee:	da05      	bge.n	8007cfc <_vsniprintf_r+0x1a>
 8007cf0:	238b      	movs	r3, #139	@ 0x8b
 8007cf2:	6003      	str	r3, [r0, #0]
 8007cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf8:	b01b      	add	sp, #108	@ 0x6c
 8007cfa:	bd30      	pop	{r4, r5, pc}
 8007cfc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007d00:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007d04:	f04f 0300 	mov.w	r3, #0
 8007d08:	9319      	str	r3, [sp, #100]	@ 0x64
 8007d0a:	bf0c      	ite	eq
 8007d0c:	4623      	moveq	r3, r4
 8007d0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007d12:	9302      	str	r3, [sp, #8]
 8007d14:	9305      	str	r3, [sp, #20]
 8007d16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007d1a:	9100      	str	r1, [sp, #0]
 8007d1c:	9104      	str	r1, [sp, #16]
 8007d1e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007d22:	4669      	mov	r1, sp
 8007d24:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007d26:	f001 fbd7 	bl	80094d8 <_svfiprintf_r>
 8007d2a:	1c43      	adds	r3, r0, #1
 8007d2c:	bfbc      	itt	lt
 8007d2e:	238b      	movlt	r3, #139	@ 0x8b
 8007d30:	602b      	strlt	r3, [r5, #0]
 8007d32:	2c00      	cmp	r4, #0
 8007d34:	d0e0      	beq.n	8007cf8 <_vsniprintf_r+0x16>
 8007d36:	2200      	movs	r2, #0
 8007d38:	9b00      	ldr	r3, [sp, #0]
 8007d3a:	701a      	strb	r2, [r3, #0]
 8007d3c:	e7dc      	b.n	8007cf8 <_vsniprintf_r+0x16>
	...

08007d40 <vsniprintf>:
 8007d40:	b507      	push	{r0, r1, r2, lr}
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	4613      	mov	r3, r2
 8007d46:	460a      	mov	r2, r1
 8007d48:	4601      	mov	r1, r0
 8007d4a:	4803      	ldr	r0, [pc, #12]	@ (8007d58 <vsniprintf+0x18>)
 8007d4c:	6800      	ldr	r0, [r0, #0]
 8007d4e:	f7ff ffc8 	bl	8007ce2 <_vsniprintf_r>
 8007d52:	b003      	add	sp, #12
 8007d54:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d58:	20000038 	.word	0x20000038

08007d5c <memset>:
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	4402      	add	r2, r0
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d100      	bne.n	8007d66 <memset+0xa>
 8007d64:	4770      	bx	lr
 8007d66:	f803 1b01 	strb.w	r1, [r3], #1
 8007d6a:	e7f9      	b.n	8007d60 <memset+0x4>

08007d6c <_localeconv_r>:
 8007d6c:	4800      	ldr	r0, [pc, #0]	@ (8007d70 <_localeconv_r+0x4>)
 8007d6e:	4770      	bx	lr
 8007d70:	20000178 	.word	0x20000178

08007d74 <_close_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	2300      	movs	r3, #0
 8007d78:	4d05      	ldr	r5, [pc, #20]	@ (8007d90 <_close_r+0x1c>)
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	602b      	str	r3, [r5, #0]
 8007d80:	f7fc faed 	bl	800435e <_close>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d102      	bne.n	8007d8e <_close_r+0x1a>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	b103      	cbz	r3, 8007d8e <_close_r+0x1a>
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	20000738 	.word	0x20000738

08007d94 <_lseek_r>:
 8007d94:	b538      	push	{r3, r4, r5, lr}
 8007d96:	4604      	mov	r4, r0
 8007d98:	4608      	mov	r0, r1
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	4d05      	ldr	r5, [pc, #20]	@ (8007db4 <_lseek_r+0x20>)
 8007da0:	602a      	str	r2, [r5, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	f7fc faff 	bl	80043a6 <_lseek>
 8007da8:	1c43      	adds	r3, r0, #1
 8007daa:	d102      	bne.n	8007db2 <_lseek_r+0x1e>
 8007dac:	682b      	ldr	r3, [r5, #0]
 8007dae:	b103      	cbz	r3, 8007db2 <_lseek_r+0x1e>
 8007db0:	6023      	str	r3, [r4, #0]
 8007db2:	bd38      	pop	{r3, r4, r5, pc}
 8007db4:	20000738 	.word	0x20000738

08007db8 <_read_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4604      	mov	r4, r0
 8007dbc:	4608      	mov	r0, r1
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4d05      	ldr	r5, [pc, #20]	@ (8007dd8 <_read_r+0x20>)
 8007dc4:	602a      	str	r2, [r5, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f7fc fa90 	bl	80042ec <_read>
 8007dcc:	1c43      	adds	r3, r0, #1
 8007dce:	d102      	bne.n	8007dd6 <_read_r+0x1e>
 8007dd0:	682b      	ldr	r3, [r5, #0]
 8007dd2:	b103      	cbz	r3, 8007dd6 <_read_r+0x1e>
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	bd38      	pop	{r3, r4, r5, pc}
 8007dd8:	20000738 	.word	0x20000738

08007ddc <_write_r>:
 8007ddc:	b538      	push	{r3, r4, r5, lr}
 8007dde:	4604      	mov	r4, r0
 8007de0:	4608      	mov	r0, r1
 8007de2:	4611      	mov	r1, r2
 8007de4:	2200      	movs	r2, #0
 8007de6:	4d05      	ldr	r5, [pc, #20]	@ (8007dfc <_write_r+0x20>)
 8007de8:	602a      	str	r2, [r5, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	f7fc fa9b 	bl	8004326 <_write>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d102      	bne.n	8007dfa <_write_r+0x1e>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	b103      	cbz	r3, 8007dfa <_write_r+0x1e>
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	bd38      	pop	{r3, r4, r5, pc}
 8007dfc:	20000738 	.word	0x20000738

08007e00 <__errno>:
 8007e00:	4b01      	ldr	r3, [pc, #4]	@ (8007e08 <__errno+0x8>)
 8007e02:	6818      	ldr	r0, [r3, #0]
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	20000038 	.word	0x20000038

08007e0c <__libc_init_array>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	2600      	movs	r6, #0
 8007e10:	4d0c      	ldr	r5, [pc, #48]	@ (8007e44 <__libc_init_array+0x38>)
 8007e12:	4c0d      	ldr	r4, [pc, #52]	@ (8007e48 <__libc_init_array+0x3c>)
 8007e14:	1b64      	subs	r4, r4, r5
 8007e16:	10a4      	asrs	r4, r4, #2
 8007e18:	42a6      	cmp	r6, r4
 8007e1a:	d109      	bne.n	8007e30 <__libc_init_array+0x24>
 8007e1c:	f002 f874 	bl	8009f08 <_init>
 8007e20:	2600      	movs	r6, #0
 8007e22:	4d0a      	ldr	r5, [pc, #40]	@ (8007e4c <__libc_init_array+0x40>)
 8007e24:	4c0a      	ldr	r4, [pc, #40]	@ (8007e50 <__libc_init_array+0x44>)
 8007e26:	1b64      	subs	r4, r4, r5
 8007e28:	10a4      	asrs	r4, r4, #2
 8007e2a:	42a6      	cmp	r6, r4
 8007e2c:	d105      	bne.n	8007e3a <__libc_init_array+0x2e>
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e34:	4798      	blx	r3
 8007e36:	3601      	adds	r6, #1
 8007e38:	e7ee      	b.n	8007e18 <__libc_init_array+0xc>
 8007e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e3e:	4798      	blx	r3
 8007e40:	3601      	adds	r6, #1
 8007e42:	e7f2      	b.n	8007e2a <__libc_init_array+0x1e>
 8007e44:	0800aedc 	.word	0x0800aedc
 8007e48:	0800aedc 	.word	0x0800aedc
 8007e4c:	0800aedc 	.word	0x0800aedc
 8007e50:	0800aee0 	.word	0x0800aee0

08007e54 <__retarget_lock_init_recursive>:
 8007e54:	4770      	bx	lr

08007e56 <__retarget_lock_acquire_recursive>:
 8007e56:	4770      	bx	lr

08007e58 <__retarget_lock_release_recursive>:
 8007e58:	4770      	bx	lr

08007e5a <memchr>:
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	b2c9      	uxtb	r1, r1
 8007e60:	4402      	add	r2, r0
 8007e62:	4293      	cmp	r3, r2
 8007e64:	4618      	mov	r0, r3
 8007e66:	d101      	bne.n	8007e6c <memchr+0x12>
 8007e68:	2000      	movs	r0, #0
 8007e6a:	e003      	b.n	8007e74 <memchr+0x1a>
 8007e6c:	7804      	ldrb	r4, [r0, #0]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	428c      	cmp	r4, r1
 8007e72:	d1f6      	bne.n	8007e62 <memchr+0x8>
 8007e74:	bd10      	pop	{r4, pc}

08007e76 <quorem>:
 8007e76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e7a:	6903      	ldr	r3, [r0, #16]
 8007e7c:	690c      	ldr	r4, [r1, #16]
 8007e7e:	4607      	mov	r7, r0
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	db7e      	blt.n	8007f82 <quorem+0x10c>
 8007e84:	3c01      	subs	r4, #1
 8007e86:	00a3      	lsls	r3, r4, #2
 8007e88:	f100 0514 	add.w	r5, r0, #20
 8007e8c:	f101 0814 	add.w	r8, r1, #20
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e96:	9301      	str	r3, [sp, #4]
 8007e98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ea8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007eac:	d32e      	bcc.n	8007f0c <quorem+0x96>
 8007eae:	f04f 0a00 	mov.w	sl, #0
 8007eb2:	46c4      	mov	ip, r8
 8007eb4:	46ae      	mov	lr, r5
 8007eb6:	46d3      	mov	fp, sl
 8007eb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ebc:	b298      	uxth	r0, r3
 8007ebe:	fb06 a000 	mla	r0, r6, r0, sl
 8007ec2:	0c1b      	lsrs	r3, r3, #16
 8007ec4:	0c02      	lsrs	r2, r0, #16
 8007ec6:	fb06 2303 	mla	r3, r6, r3, r2
 8007eca:	f8de 2000 	ldr.w	r2, [lr]
 8007ece:	b280      	uxth	r0, r0
 8007ed0:	b292      	uxth	r2, r2
 8007ed2:	1a12      	subs	r2, r2, r0
 8007ed4:	445a      	add	r2, fp
 8007ed6:	f8de 0000 	ldr.w	r0, [lr]
 8007eda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007ee4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007ee8:	b292      	uxth	r2, r2
 8007eea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007eee:	45e1      	cmp	r9, ip
 8007ef0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007ef4:	f84e 2b04 	str.w	r2, [lr], #4
 8007ef8:	d2de      	bcs.n	8007eb8 <quorem+0x42>
 8007efa:	9b00      	ldr	r3, [sp, #0]
 8007efc:	58eb      	ldr	r3, [r5, r3]
 8007efe:	b92b      	cbnz	r3, 8007f0c <quorem+0x96>
 8007f00:	9b01      	ldr	r3, [sp, #4]
 8007f02:	3b04      	subs	r3, #4
 8007f04:	429d      	cmp	r5, r3
 8007f06:	461a      	mov	r2, r3
 8007f08:	d32f      	bcc.n	8007f6a <quorem+0xf4>
 8007f0a:	613c      	str	r4, [r7, #16]
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f001 f97f 	bl	8009210 <__mcmp>
 8007f12:	2800      	cmp	r0, #0
 8007f14:	db25      	blt.n	8007f62 <quorem+0xec>
 8007f16:	4629      	mov	r1, r5
 8007f18:	2000      	movs	r0, #0
 8007f1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f1e:	f8d1 c000 	ldr.w	ip, [r1]
 8007f22:	fa1f fe82 	uxth.w	lr, r2
 8007f26:	fa1f f38c 	uxth.w	r3, ip
 8007f2a:	eba3 030e 	sub.w	r3, r3, lr
 8007f2e:	4403      	add	r3, r0
 8007f30:	0c12      	lsrs	r2, r2, #16
 8007f32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007f36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f40:	45c1      	cmp	r9, r8
 8007f42:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f46:	f841 3b04 	str.w	r3, [r1], #4
 8007f4a:	d2e6      	bcs.n	8007f1a <quorem+0xa4>
 8007f4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f54:	b922      	cbnz	r2, 8007f60 <quorem+0xea>
 8007f56:	3b04      	subs	r3, #4
 8007f58:	429d      	cmp	r5, r3
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	d30b      	bcc.n	8007f76 <quorem+0x100>
 8007f5e:	613c      	str	r4, [r7, #16]
 8007f60:	3601      	adds	r6, #1
 8007f62:	4630      	mov	r0, r6
 8007f64:	b003      	add	sp, #12
 8007f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f6a:	6812      	ldr	r2, [r2, #0]
 8007f6c:	3b04      	subs	r3, #4
 8007f6e:	2a00      	cmp	r2, #0
 8007f70:	d1cb      	bne.n	8007f0a <quorem+0x94>
 8007f72:	3c01      	subs	r4, #1
 8007f74:	e7c6      	b.n	8007f04 <quorem+0x8e>
 8007f76:	6812      	ldr	r2, [r2, #0]
 8007f78:	3b04      	subs	r3, #4
 8007f7a:	2a00      	cmp	r2, #0
 8007f7c:	d1ef      	bne.n	8007f5e <quorem+0xe8>
 8007f7e:	3c01      	subs	r4, #1
 8007f80:	e7ea      	b.n	8007f58 <quorem+0xe2>
 8007f82:	2000      	movs	r0, #0
 8007f84:	e7ee      	b.n	8007f64 <quorem+0xee>
	...

08007f88 <_dtoa_r>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	4614      	mov	r4, r2
 8007f8e:	461d      	mov	r5, r3
 8007f90:	69c7      	ldr	r7, [r0, #28]
 8007f92:	b097      	sub	sp, #92	@ 0x5c
 8007f94:	4681      	mov	r9, r0
 8007f96:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007f9a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007f9c:	b97f      	cbnz	r7, 8007fbe <_dtoa_r+0x36>
 8007f9e:	2010      	movs	r0, #16
 8007fa0:	f000 fe0e 	bl	8008bc0 <malloc>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	f8c9 001c 	str.w	r0, [r9, #28]
 8007faa:	b920      	cbnz	r0, 8007fb6 <_dtoa_r+0x2e>
 8007fac:	21ef      	movs	r1, #239	@ 0xef
 8007fae:	4bac      	ldr	r3, [pc, #688]	@ (8008260 <_dtoa_r+0x2d8>)
 8007fb0:	48ac      	ldr	r0, [pc, #688]	@ (8008264 <_dtoa_r+0x2dc>)
 8007fb2:	f001 fc6d 	bl	8009890 <__assert_func>
 8007fb6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007fba:	6007      	str	r7, [r0, #0]
 8007fbc:	60c7      	str	r7, [r0, #12]
 8007fbe:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007fc2:	6819      	ldr	r1, [r3, #0]
 8007fc4:	b159      	cbz	r1, 8007fde <_dtoa_r+0x56>
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	2301      	movs	r3, #1
 8007fca:	4093      	lsls	r3, r2
 8007fcc:	604a      	str	r2, [r1, #4]
 8007fce:	608b      	str	r3, [r1, #8]
 8007fd0:	4648      	mov	r0, r9
 8007fd2:	f000 feeb 	bl	8008dac <_Bfree>
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	1e2b      	subs	r3, r5, #0
 8007fe0:	bfaf      	iteee	ge
 8007fe2:	2300      	movge	r3, #0
 8007fe4:	2201      	movlt	r2, #1
 8007fe6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007fea:	9307      	strlt	r3, [sp, #28]
 8007fec:	bfa8      	it	ge
 8007fee:	6033      	strge	r3, [r6, #0]
 8007ff0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007ff4:	4b9c      	ldr	r3, [pc, #624]	@ (8008268 <_dtoa_r+0x2e0>)
 8007ff6:	bfb8      	it	lt
 8007ff8:	6032      	strlt	r2, [r6, #0]
 8007ffa:	ea33 0308 	bics.w	r3, r3, r8
 8007ffe:	d112      	bne.n	8008026 <_dtoa_r+0x9e>
 8008000:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008004:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800800c:	4323      	orrs	r3, r4
 800800e:	f000 855e 	beq.w	8008ace <_dtoa_r+0xb46>
 8008012:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008014:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800826c <_dtoa_r+0x2e4>
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 8560 	beq.w	8008ade <_dtoa_r+0xb56>
 800801e:	f10a 0303 	add.w	r3, sl, #3
 8008022:	f000 bd5a 	b.w	8008ada <_dtoa_r+0xb52>
 8008026:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800802a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800802e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008032:	2200      	movs	r2, #0
 8008034:	2300      	movs	r3, #0
 8008036:	f7f8 fcb7 	bl	80009a8 <__aeabi_dcmpeq>
 800803a:	4607      	mov	r7, r0
 800803c:	b158      	cbz	r0, 8008056 <_dtoa_r+0xce>
 800803e:	2301      	movs	r3, #1
 8008040:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008046:	b113      	cbz	r3, 800804e <_dtoa_r+0xc6>
 8008048:	4b89      	ldr	r3, [pc, #548]	@ (8008270 <_dtoa_r+0x2e8>)
 800804a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8008274 <_dtoa_r+0x2ec>
 8008052:	f000 bd44 	b.w	8008ade <_dtoa_r+0xb56>
 8008056:	ab14      	add	r3, sp, #80	@ 0x50
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	ab15      	add	r3, sp, #84	@ 0x54
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	4648      	mov	r0, r9
 8008060:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008064:	f001 f984 	bl	8009370 <__d2b>
 8008068:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800806c:	9003      	str	r0, [sp, #12]
 800806e:	2e00      	cmp	r6, #0
 8008070:	d078      	beq.n	8008164 <_dtoa_r+0x1dc>
 8008072:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008076:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008078:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800807c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008080:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008084:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008088:	9712      	str	r7, [sp, #72]	@ 0x48
 800808a:	4619      	mov	r1, r3
 800808c:	2200      	movs	r2, #0
 800808e:	4b7a      	ldr	r3, [pc, #488]	@ (8008278 <_dtoa_r+0x2f0>)
 8008090:	f7f8 f86a 	bl	8000168 <__aeabi_dsub>
 8008094:	a36c      	add	r3, pc, #432	@ (adr r3, 8008248 <_dtoa_r+0x2c0>)
 8008096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809a:	f7f8 fa1d 	bl	80004d8 <__aeabi_dmul>
 800809e:	a36c      	add	r3, pc, #432	@ (adr r3, 8008250 <_dtoa_r+0x2c8>)
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f7f8 f862 	bl	800016c <__adddf3>
 80080a8:	4604      	mov	r4, r0
 80080aa:	4630      	mov	r0, r6
 80080ac:	460d      	mov	r5, r1
 80080ae:	f7f8 f9a9 	bl	8000404 <__aeabi_i2d>
 80080b2:	a369      	add	r3, pc, #420	@ (adr r3, 8008258 <_dtoa_r+0x2d0>)
 80080b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b8:	f7f8 fa0e 	bl	80004d8 <__aeabi_dmul>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	4620      	mov	r0, r4
 80080c2:	4629      	mov	r1, r5
 80080c4:	f7f8 f852 	bl	800016c <__adddf3>
 80080c8:	4604      	mov	r4, r0
 80080ca:	460d      	mov	r5, r1
 80080cc:	f7f8 fcb4 	bl	8000a38 <__aeabi_d2iz>
 80080d0:	2200      	movs	r2, #0
 80080d2:	4607      	mov	r7, r0
 80080d4:	2300      	movs	r3, #0
 80080d6:	4620      	mov	r0, r4
 80080d8:	4629      	mov	r1, r5
 80080da:	f7f8 fc6f 	bl	80009bc <__aeabi_dcmplt>
 80080de:	b140      	cbz	r0, 80080f2 <_dtoa_r+0x16a>
 80080e0:	4638      	mov	r0, r7
 80080e2:	f7f8 f98f 	bl	8000404 <__aeabi_i2d>
 80080e6:	4622      	mov	r2, r4
 80080e8:	462b      	mov	r3, r5
 80080ea:	f7f8 fc5d 	bl	80009a8 <__aeabi_dcmpeq>
 80080ee:	b900      	cbnz	r0, 80080f2 <_dtoa_r+0x16a>
 80080f0:	3f01      	subs	r7, #1
 80080f2:	2f16      	cmp	r7, #22
 80080f4:	d854      	bhi.n	80081a0 <_dtoa_r+0x218>
 80080f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080fa:	4b60      	ldr	r3, [pc, #384]	@ (800827c <_dtoa_r+0x2f4>)
 80080fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	f7f8 fc5a 	bl	80009bc <__aeabi_dcmplt>
 8008108:	2800      	cmp	r0, #0
 800810a:	d04b      	beq.n	80081a4 <_dtoa_r+0x21c>
 800810c:	2300      	movs	r3, #0
 800810e:	3f01      	subs	r7, #1
 8008110:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008112:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008114:	1b9b      	subs	r3, r3, r6
 8008116:	1e5a      	subs	r2, r3, #1
 8008118:	bf49      	itett	mi
 800811a:	f1c3 0301 	rsbmi	r3, r3, #1
 800811e:	2300      	movpl	r3, #0
 8008120:	9304      	strmi	r3, [sp, #16]
 8008122:	2300      	movmi	r3, #0
 8008124:	9209      	str	r2, [sp, #36]	@ 0x24
 8008126:	bf54      	ite	pl
 8008128:	9304      	strpl	r3, [sp, #16]
 800812a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800812c:	2f00      	cmp	r7, #0
 800812e:	db3b      	blt.n	80081a8 <_dtoa_r+0x220>
 8008130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008132:	970e      	str	r7, [sp, #56]	@ 0x38
 8008134:	443b      	add	r3, r7
 8008136:	9309      	str	r3, [sp, #36]	@ 0x24
 8008138:	2300      	movs	r3, #0
 800813a:	930a      	str	r3, [sp, #40]	@ 0x28
 800813c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800813e:	2b09      	cmp	r3, #9
 8008140:	d865      	bhi.n	800820e <_dtoa_r+0x286>
 8008142:	2b05      	cmp	r3, #5
 8008144:	bfc4      	itt	gt
 8008146:	3b04      	subgt	r3, #4
 8008148:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800814a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800814c:	bfc8      	it	gt
 800814e:	2400      	movgt	r4, #0
 8008150:	f1a3 0302 	sub.w	r3, r3, #2
 8008154:	bfd8      	it	le
 8008156:	2401      	movle	r4, #1
 8008158:	2b03      	cmp	r3, #3
 800815a:	d864      	bhi.n	8008226 <_dtoa_r+0x29e>
 800815c:	e8df f003 	tbb	[pc, r3]
 8008160:	2c385553 	.word	0x2c385553
 8008164:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008168:	441e      	add	r6, r3
 800816a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800816e:	2b20      	cmp	r3, #32
 8008170:	bfc1      	itttt	gt
 8008172:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008176:	fa08 f803 	lslgt.w	r8, r8, r3
 800817a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800817e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008182:	bfd6      	itet	le
 8008184:	f1c3 0320 	rsble	r3, r3, #32
 8008188:	ea48 0003 	orrgt.w	r0, r8, r3
 800818c:	fa04 f003 	lslle.w	r0, r4, r3
 8008190:	f7f8 f928 	bl	80003e4 <__aeabi_ui2d>
 8008194:	2201      	movs	r2, #1
 8008196:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800819a:	3e01      	subs	r6, #1
 800819c:	9212      	str	r2, [sp, #72]	@ 0x48
 800819e:	e774      	b.n	800808a <_dtoa_r+0x102>
 80081a0:	2301      	movs	r3, #1
 80081a2:	e7b5      	b.n	8008110 <_dtoa_r+0x188>
 80081a4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80081a6:	e7b4      	b.n	8008112 <_dtoa_r+0x18a>
 80081a8:	9b04      	ldr	r3, [sp, #16]
 80081aa:	1bdb      	subs	r3, r3, r7
 80081ac:	9304      	str	r3, [sp, #16]
 80081ae:	427b      	negs	r3, r7
 80081b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80081b2:	2300      	movs	r3, #0
 80081b4:	930e      	str	r3, [sp, #56]	@ 0x38
 80081b6:	e7c1      	b.n	800813c <_dtoa_r+0x1b4>
 80081b8:	2301      	movs	r3, #1
 80081ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081be:	eb07 0b03 	add.w	fp, r7, r3
 80081c2:	f10b 0301 	add.w	r3, fp, #1
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	9308      	str	r3, [sp, #32]
 80081ca:	bfb8      	it	lt
 80081cc:	2301      	movlt	r3, #1
 80081ce:	e006      	b.n	80081de <_dtoa_r+0x256>
 80081d0:	2301      	movs	r3, #1
 80081d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	dd28      	ble.n	800822c <_dtoa_r+0x2a4>
 80081da:	469b      	mov	fp, r3
 80081dc:	9308      	str	r3, [sp, #32]
 80081de:	2100      	movs	r1, #0
 80081e0:	2204      	movs	r2, #4
 80081e2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80081e6:	f102 0514 	add.w	r5, r2, #20
 80081ea:	429d      	cmp	r5, r3
 80081ec:	d926      	bls.n	800823c <_dtoa_r+0x2b4>
 80081ee:	6041      	str	r1, [r0, #4]
 80081f0:	4648      	mov	r0, r9
 80081f2:	f000 fd9b 	bl	8008d2c <_Balloc>
 80081f6:	4682      	mov	sl, r0
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d143      	bne.n	8008284 <_dtoa_r+0x2fc>
 80081fc:	4602      	mov	r2, r0
 80081fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8008202:	4b1f      	ldr	r3, [pc, #124]	@ (8008280 <_dtoa_r+0x2f8>)
 8008204:	e6d4      	b.n	8007fb0 <_dtoa_r+0x28>
 8008206:	2300      	movs	r3, #0
 8008208:	e7e3      	b.n	80081d2 <_dtoa_r+0x24a>
 800820a:	2300      	movs	r3, #0
 800820c:	e7d5      	b.n	80081ba <_dtoa_r+0x232>
 800820e:	2401      	movs	r4, #1
 8008210:	2300      	movs	r3, #0
 8008212:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008214:	9320      	str	r3, [sp, #128]	@ 0x80
 8008216:	f04f 3bff 	mov.w	fp, #4294967295
 800821a:	2200      	movs	r2, #0
 800821c:	2312      	movs	r3, #18
 800821e:	f8cd b020 	str.w	fp, [sp, #32]
 8008222:	9221      	str	r2, [sp, #132]	@ 0x84
 8008224:	e7db      	b.n	80081de <_dtoa_r+0x256>
 8008226:	2301      	movs	r3, #1
 8008228:	930b      	str	r3, [sp, #44]	@ 0x2c
 800822a:	e7f4      	b.n	8008216 <_dtoa_r+0x28e>
 800822c:	f04f 0b01 	mov.w	fp, #1
 8008230:	465b      	mov	r3, fp
 8008232:	f8cd b020 	str.w	fp, [sp, #32]
 8008236:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800823a:	e7d0      	b.n	80081de <_dtoa_r+0x256>
 800823c:	3101      	adds	r1, #1
 800823e:	0052      	lsls	r2, r2, #1
 8008240:	e7d1      	b.n	80081e6 <_dtoa_r+0x25e>
 8008242:	bf00      	nop
 8008244:	f3af 8000 	nop.w
 8008248:	636f4361 	.word	0x636f4361
 800824c:	3fd287a7 	.word	0x3fd287a7
 8008250:	8b60c8b3 	.word	0x8b60c8b3
 8008254:	3fc68a28 	.word	0x3fc68a28
 8008258:	509f79fb 	.word	0x509f79fb
 800825c:	3fd34413 	.word	0x3fd34413
 8008260:	0800ab9d 	.word	0x0800ab9d
 8008264:	0800abb4 	.word	0x0800abb4
 8008268:	7ff00000 	.word	0x7ff00000
 800826c:	0800ab99 	.word	0x0800ab99
 8008270:	0800ab6d 	.word	0x0800ab6d
 8008274:	0800ab6c 	.word	0x0800ab6c
 8008278:	3ff80000 	.word	0x3ff80000
 800827c:	0800ad08 	.word	0x0800ad08
 8008280:	0800ac0c 	.word	0x0800ac0c
 8008284:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008288:	6018      	str	r0, [r3, #0]
 800828a:	9b08      	ldr	r3, [sp, #32]
 800828c:	2b0e      	cmp	r3, #14
 800828e:	f200 80a1 	bhi.w	80083d4 <_dtoa_r+0x44c>
 8008292:	2c00      	cmp	r4, #0
 8008294:	f000 809e 	beq.w	80083d4 <_dtoa_r+0x44c>
 8008298:	2f00      	cmp	r7, #0
 800829a:	dd33      	ble.n	8008304 <_dtoa_r+0x37c>
 800829c:	4b9c      	ldr	r3, [pc, #624]	@ (8008510 <_dtoa_r+0x588>)
 800829e:	f007 020f 	and.w	r2, r7, #15
 80082a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082a6:	05f8      	lsls	r0, r7, #23
 80082a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80082ac:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80082b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80082b4:	d516      	bpl.n	80082e4 <_dtoa_r+0x35c>
 80082b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082ba:	4b96      	ldr	r3, [pc, #600]	@ (8008514 <_dtoa_r+0x58c>)
 80082bc:	2603      	movs	r6, #3
 80082be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082c2:	f7f8 fa33 	bl	800072c <__aeabi_ddiv>
 80082c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80082ca:	f004 040f 	and.w	r4, r4, #15
 80082ce:	4d91      	ldr	r5, [pc, #580]	@ (8008514 <_dtoa_r+0x58c>)
 80082d0:	b954      	cbnz	r4, 80082e8 <_dtoa_r+0x360>
 80082d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082da:	f7f8 fa27 	bl	800072c <__aeabi_ddiv>
 80082de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80082e2:	e028      	b.n	8008336 <_dtoa_r+0x3ae>
 80082e4:	2602      	movs	r6, #2
 80082e6:	e7f2      	b.n	80082ce <_dtoa_r+0x346>
 80082e8:	07e1      	lsls	r1, r4, #31
 80082ea:	d508      	bpl.n	80082fe <_dtoa_r+0x376>
 80082ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082f4:	f7f8 f8f0 	bl	80004d8 <__aeabi_dmul>
 80082f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082fc:	3601      	adds	r6, #1
 80082fe:	1064      	asrs	r4, r4, #1
 8008300:	3508      	adds	r5, #8
 8008302:	e7e5      	b.n	80082d0 <_dtoa_r+0x348>
 8008304:	f000 80af 	beq.w	8008466 <_dtoa_r+0x4de>
 8008308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800830c:	427c      	negs	r4, r7
 800830e:	4b80      	ldr	r3, [pc, #512]	@ (8008510 <_dtoa_r+0x588>)
 8008310:	f004 020f 	and.w	r2, r4, #15
 8008314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831c:	f7f8 f8dc 	bl	80004d8 <__aeabi_dmul>
 8008320:	2602      	movs	r6, #2
 8008322:	2300      	movs	r3, #0
 8008324:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008328:	4d7a      	ldr	r5, [pc, #488]	@ (8008514 <_dtoa_r+0x58c>)
 800832a:	1124      	asrs	r4, r4, #4
 800832c:	2c00      	cmp	r4, #0
 800832e:	f040 808f 	bne.w	8008450 <_dtoa_r+0x4c8>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1d3      	bne.n	80082de <_dtoa_r+0x356>
 8008336:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800833a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 8094 	beq.w	800846a <_dtoa_r+0x4e2>
 8008342:	2200      	movs	r2, #0
 8008344:	4620      	mov	r0, r4
 8008346:	4629      	mov	r1, r5
 8008348:	4b73      	ldr	r3, [pc, #460]	@ (8008518 <_dtoa_r+0x590>)
 800834a:	f7f8 fb37 	bl	80009bc <__aeabi_dcmplt>
 800834e:	2800      	cmp	r0, #0
 8008350:	f000 808b 	beq.w	800846a <_dtoa_r+0x4e2>
 8008354:	9b08      	ldr	r3, [sp, #32]
 8008356:	2b00      	cmp	r3, #0
 8008358:	f000 8087 	beq.w	800846a <_dtoa_r+0x4e2>
 800835c:	f1bb 0f00 	cmp.w	fp, #0
 8008360:	dd34      	ble.n	80083cc <_dtoa_r+0x444>
 8008362:	4620      	mov	r0, r4
 8008364:	2200      	movs	r2, #0
 8008366:	4629      	mov	r1, r5
 8008368:	4b6c      	ldr	r3, [pc, #432]	@ (800851c <_dtoa_r+0x594>)
 800836a:	f7f8 f8b5 	bl	80004d8 <__aeabi_dmul>
 800836e:	465c      	mov	r4, fp
 8008370:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008374:	f107 38ff 	add.w	r8, r7, #4294967295
 8008378:	3601      	adds	r6, #1
 800837a:	4630      	mov	r0, r6
 800837c:	f7f8 f842 	bl	8000404 <__aeabi_i2d>
 8008380:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008384:	f7f8 f8a8 	bl	80004d8 <__aeabi_dmul>
 8008388:	2200      	movs	r2, #0
 800838a:	4b65      	ldr	r3, [pc, #404]	@ (8008520 <_dtoa_r+0x598>)
 800838c:	f7f7 feee 	bl	800016c <__adddf3>
 8008390:	4605      	mov	r5, r0
 8008392:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008396:	2c00      	cmp	r4, #0
 8008398:	d16a      	bne.n	8008470 <_dtoa_r+0x4e8>
 800839a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800839e:	2200      	movs	r2, #0
 80083a0:	4b60      	ldr	r3, [pc, #384]	@ (8008524 <_dtoa_r+0x59c>)
 80083a2:	f7f7 fee1 	bl	8000168 <__aeabi_dsub>
 80083a6:	4602      	mov	r2, r0
 80083a8:	460b      	mov	r3, r1
 80083aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80083ae:	462a      	mov	r2, r5
 80083b0:	4633      	mov	r3, r6
 80083b2:	f7f8 fb21 	bl	80009f8 <__aeabi_dcmpgt>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	f040 8298 	bne.w	80088ec <_dtoa_r+0x964>
 80083bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083c0:	462a      	mov	r2, r5
 80083c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80083c6:	f7f8 faf9 	bl	80009bc <__aeabi_dcmplt>
 80083ca:	bb38      	cbnz	r0, 800841c <_dtoa_r+0x494>
 80083cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80083d0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80083d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f2c0 8157 	blt.w	800868a <_dtoa_r+0x702>
 80083dc:	2f0e      	cmp	r7, #14
 80083de:	f300 8154 	bgt.w	800868a <_dtoa_r+0x702>
 80083e2:	4b4b      	ldr	r3, [pc, #300]	@ (8008510 <_dtoa_r+0x588>)
 80083e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80083ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80083f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f280 80e5 	bge.w	80085c2 <_dtoa_r+0x63a>
 80083f8:	9b08      	ldr	r3, [sp, #32]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f300 80e1 	bgt.w	80085c2 <_dtoa_r+0x63a>
 8008400:	d10c      	bne.n	800841c <_dtoa_r+0x494>
 8008402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008406:	2200      	movs	r2, #0
 8008408:	4b46      	ldr	r3, [pc, #280]	@ (8008524 <_dtoa_r+0x59c>)
 800840a:	f7f8 f865 	bl	80004d8 <__aeabi_dmul>
 800840e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008412:	f7f8 fae7 	bl	80009e4 <__aeabi_dcmpge>
 8008416:	2800      	cmp	r0, #0
 8008418:	f000 8266 	beq.w	80088e8 <_dtoa_r+0x960>
 800841c:	2400      	movs	r4, #0
 800841e:	4625      	mov	r5, r4
 8008420:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008422:	4656      	mov	r6, sl
 8008424:	ea6f 0803 	mvn.w	r8, r3
 8008428:	2700      	movs	r7, #0
 800842a:	4621      	mov	r1, r4
 800842c:	4648      	mov	r0, r9
 800842e:	f000 fcbd 	bl	8008dac <_Bfree>
 8008432:	2d00      	cmp	r5, #0
 8008434:	f000 80bd 	beq.w	80085b2 <_dtoa_r+0x62a>
 8008438:	b12f      	cbz	r7, 8008446 <_dtoa_r+0x4be>
 800843a:	42af      	cmp	r7, r5
 800843c:	d003      	beq.n	8008446 <_dtoa_r+0x4be>
 800843e:	4639      	mov	r1, r7
 8008440:	4648      	mov	r0, r9
 8008442:	f000 fcb3 	bl	8008dac <_Bfree>
 8008446:	4629      	mov	r1, r5
 8008448:	4648      	mov	r0, r9
 800844a:	f000 fcaf 	bl	8008dac <_Bfree>
 800844e:	e0b0      	b.n	80085b2 <_dtoa_r+0x62a>
 8008450:	07e2      	lsls	r2, r4, #31
 8008452:	d505      	bpl.n	8008460 <_dtoa_r+0x4d8>
 8008454:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008458:	f7f8 f83e 	bl	80004d8 <__aeabi_dmul>
 800845c:	2301      	movs	r3, #1
 800845e:	3601      	adds	r6, #1
 8008460:	1064      	asrs	r4, r4, #1
 8008462:	3508      	adds	r5, #8
 8008464:	e762      	b.n	800832c <_dtoa_r+0x3a4>
 8008466:	2602      	movs	r6, #2
 8008468:	e765      	b.n	8008336 <_dtoa_r+0x3ae>
 800846a:	46b8      	mov	r8, r7
 800846c:	9c08      	ldr	r4, [sp, #32]
 800846e:	e784      	b.n	800837a <_dtoa_r+0x3f2>
 8008470:	4b27      	ldr	r3, [pc, #156]	@ (8008510 <_dtoa_r+0x588>)
 8008472:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008474:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008478:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800847c:	4454      	add	r4, sl
 800847e:	2900      	cmp	r1, #0
 8008480:	d054      	beq.n	800852c <_dtoa_r+0x5a4>
 8008482:	2000      	movs	r0, #0
 8008484:	4928      	ldr	r1, [pc, #160]	@ (8008528 <_dtoa_r+0x5a0>)
 8008486:	f7f8 f951 	bl	800072c <__aeabi_ddiv>
 800848a:	4633      	mov	r3, r6
 800848c:	462a      	mov	r2, r5
 800848e:	f7f7 fe6b 	bl	8000168 <__aeabi_dsub>
 8008492:	4656      	mov	r6, sl
 8008494:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008498:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800849c:	f7f8 facc 	bl	8000a38 <__aeabi_d2iz>
 80084a0:	4605      	mov	r5, r0
 80084a2:	f7f7 ffaf 	bl	8000404 <__aeabi_i2d>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084ae:	f7f7 fe5b 	bl	8000168 <__aeabi_dsub>
 80084b2:	4602      	mov	r2, r0
 80084b4:	460b      	mov	r3, r1
 80084b6:	3530      	adds	r5, #48	@ 0x30
 80084b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80084c0:	f806 5b01 	strb.w	r5, [r6], #1
 80084c4:	f7f8 fa7a 	bl	80009bc <__aeabi_dcmplt>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	d172      	bne.n	80085b2 <_dtoa_r+0x62a>
 80084cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084d0:	2000      	movs	r0, #0
 80084d2:	4911      	ldr	r1, [pc, #68]	@ (8008518 <_dtoa_r+0x590>)
 80084d4:	f7f7 fe48 	bl	8000168 <__aeabi_dsub>
 80084d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80084dc:	f7f8 fa6e 	bl	80009bc <__aeabi_dcmplt>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	f040 80b4 	bne.w	800864e <_dtoa_r+0x6c6>
 80084e6:	42a6      	cmp	r6, r4
 80084e8:	f43f af70 	beq.w	80083cc <_dtoa_r+0x444>
 80084ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80084f0:	2200      	movs	r2, #0
 80084f2:	4b0a      	ldr	r3, [pc, #40]	@ (800851c <_dtoa_r+0x594>)
 80084f4:	f7f7 fff0 	bl	80004d8 <__aeabi_dmul>
 80084f8:	2200      	movs	r2, #0
 80084fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80084fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008502:	4b06      	ldr	r3, [pc, #24]	@ (800851c <_dtoa_r+0x594>)
 8008504:	f7f7 ffe8 	bl	80004d8 <__aeabi_dmul>
 8008508:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800850c:	e7c4      	b.n	8008498 <_dtoa_r+0x510>
 800850e:	bf00      	nop
 8008510:	0800ad08 	.word	0x0800ad08
 8008514:	0800ace0 	.word	0x0800ace0
 8008518:	3ff00000 	.word	0x3ff00000
 800851c:	40240000 	.word	0x40240000
 8008520:	401c0000 	.word	0x401c0000
 8008524:	40140000 	.word	0x40140000
 8008528:	3fe00000 	.word	0x3fe00000
 800852c:	4631      	mov	r1, r6
 800852e:	4628      	mov	r0, r5
 8008530:	f7f7 ffd2 	bl	80004d8 <__aeabi_dmul>
 8008534:	4656      	mov	r6, sl
 8008536:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800853a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800853c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008540:	f7f8 fa7a 	bl	8000a38 <__aeabi_d2iz>
 8008544:	4605      	mov	r5, r0
 8008546:	f7f7 ff5d 	bl	8000404 <__aeabi_i2d>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008552:	f7f7 fe09 	bl	8000168 <__aeabi_dsub>
 8008556:	4602      	mov	r2, r0
 8008558:	460b      	mov	r3, r1
 800855a:	3530      	adds	r5, #48	@ 0x30
 800855c:	f806 5b01 	strb.w	r5, [r6], #1
 8008560:	42a6      	cmp	r6, r4
 8008562:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008566:	f04f 0200 	mov.w	r2, #0
 800856a:	d124      	bne.n	80085b6 <_dtoa_r+0x62e>
 800856c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008570:	4bae      	ldr	r3, [pc, #696]	@ (800882c <_dtoa_r+0x8a4>)
 8008572:	f7f7 fdfb 	bl	800016c <__adddf3>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800857e:	f7f8 fa3b 	bl	80009f8 <__aeabi_dcmpgt>
 8008582:	2800      	cmp	r0, #0
 8008584:	d163      	bne.n	800864e <_dtoa_r+0x6c6>
 8008586:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800858a:	2000      	movs	r0, #0
 800858c:	49a7      	ldr	r1, [pc, #668]	@ (800882c <_dtoa_r+0x8a4>)
 800858e:	f7f7 fdeb 	bl	8000168 <__aeabi_dsub>
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800859a:	f7f8 fa0f 	bl	80009bc <__aeabi_dcmplt>
 800859e:	2800      	cmp	r0, #0
 80085a0:	f43f af14 	beq.w	80083cc <_dtoa_r+0x444>
 80085a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80085a6:	1e73      	subs	r3, r6, #1
 80085a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80085aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80085ae:	2b30      	cmp	r3, #48	@ 0x30
 80085b0:	d0f8      	beq.n	80085a4 <_dtoa_r+0x61c>
 80085b2:	4647      	mov	r7, r8
 80085b4:	e03b      	b.n	800862e <_dtoa_r+0x6a6>
 80085b6:	4b9e      	ldr	r3, [pc, #632]	@ (8008830 <_dtoa_r+0x8a8>)
 80085b8:	f7f7 ff8e 	bl	80004d8 <__aeabi_dmul>
 80085bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80085c0:	e7bc      	b.n	800853c <_dtoa_r+0x5b4>
 80085c2:	4656      	mov	r6, sl
 80085c4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80085c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085cc:	4620      	mov	r0, r4
 80085ce:	4629      	mov	r1, r5
 80085d0:	f7f8 f8ac 	bl	800072c <__aeabi_ddiv>
 80085d4:	f7f8 fa30 	bl	8000a38 <__aeabi_d2iz>
 80085d8:	4680      	mov	r8, r0
 80085da:	f7f7 ff13 	bl	8000404 <__aeabi_i2d>
 80085de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085e2:	f7f7 ff79 	bl	80004d8 <__aeabi_dmul>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4620      	mov	r0, r4
 80085ec:	4629      	mov	r1, r5
 80085ee:	f7f7 fdbb 	bl	8000168 <__aeabi_dsub>
 80085f2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80085f6:	9d08      	ldr	r5, [sp, #32]
 80085f8:	f806 4b01 	strb.w	r4, [r6], #1
 80085fc:	eba6 040a 	sub.w	r4, r6, sl
 8008600:	42a5      	cmp	r5, r4
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	d133      	bne.n	8008670 <_dtoa_r+0x6e8>
 8008608:	f7f7 fdb0 	bl	800016c <__adddf3>
 800860c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008610:	4604      	mov	r4, r0
 8008612:	460d      	mov	r5, r1
 8008614:	f7f8 f9f0 	bl	80009f8 <__aeabi_dcmpgt>
 8008618:	b9c0      	cbnz	r0, 800864c <_dtoa_r+0x6c4>
 800861a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800861e:	4620      	mov	r0, r4
 8008620:	4629      	mov	r1, r5
 8008622:	f7f8 f9c1 	bl	80009a8 <__aeabi_dcmpeq>
 8008626:	b110      	cbz	r0, 800862e <_dtoa_r+0x6a6>
 8008628:	f018 0f01 	tst.w	r8, #1
 800862c:	d10e      	bne.n	800864c <_dtoa_r+0x6c4>
 800862e:	4648      	mov	r0, r9
 8008630:	9903      	ldr	r1, [sp, #12]
 8008632:	f000 fbbb 	bl	8008dac <_Bfree>
 8008636:	2300      	movs	r3, #0
 8008638:	7033      	strb	r3, [r6, #0]
 800863a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800863c:	3701      	adds	r7, #1
 800863e:	601f      	str	r7, [r3, #0]
 8008640:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 824b 	beq.w	8008ade <_dtoa_r+0xb56>
 8008648:	601e      	str	r6, [r3, #0]
 800864a:	e248      	b.n	8008ade <_dtoa_r+0xb56>
 800864c:	46b8      	mov	r8, r7
 800864e:	4633      	mov	r3, r6
 8008650:	461e      	mov	r6, r3
 8008652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008656:	2a39      	cmp	r2, #57	@ 0x39
 8008658:	d106      	bne.n	8008668 <_dtoa_r+0x6e0>
 800865a:	459a      	cmp	sl, r3
 800865c:	d1f8      	bne.n	8008650 <_dtoa_r+0x6c8>
 800865e:	2230      	movs	r2, #48	@ 0x30
 8008660:	f108 0801 	add.w	r8, r8, #1
 8008664:	f88a 2000 	strb.w	r2, [sl]
 8008668:	781a      	ldrb	r2, [r3, #0]
 800866a:	3201      	adds	r2, #1
 800866c:	701a      	strb	r2, [r3, #0]
 800866e:	e7a0      	b.n	80085b2 <_dtoa_r+0x62a>
 8008670:	2200      	movs	r2, #0
 8008672:	4b6f      	ldr	r3, [pc, #444]	@ (8008830 <_dtoa_r+0x8a8>)
 8008674:	f7f7 ff30 	bl	80004d8 <__aeabi_dmul>
 8008678:	2200      	movs	r2, #0
 800867a:	2300      	movs	r3, #0
 800867c:	4604      	mov	r4, r0
 800867e:	460d      	mov	r5, r1
 8008680:	f7f8 f992 	bl	80009a8 <__aeabi_dcmpeq>
 8008684:	2800      	cmp	r0, #0
 8008686:	d09f      	beq.n	80085c8 <_dtoa_r+0x640>
 8008688:	e7d1      	b.n	800862e <_dtoa_r+0x6a6>
 800868a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800868c:	2a00      	cmp	r2, #0
 800868e:	f000 80ea 	beq.w	8008866 <_dtoa_r+0x8de>
 8008692:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008694:	2a01      	cmp	r2, #1
 8008696:	f300 80cd 	bgt.w	8008834 <_dtoa_r+0x8ac>
 800869a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800869c:	2a00      	cmp	r2, #0
 800869e:	f000 80c1 	beq.w	8008824 <_dtoa_r+0x89c>
 80086a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80086a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80086a8:	9e04      	ldr	r6, [sp, #16]
 80086aa:	9a04      	ldr	r2, [sp, #16]
 80086ac:	2101      	movs	r1, #1
 80086ae:	441a      	add	r2, r3
 80086b0:	9204      	str	r2, [sp, #16]
 80086b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086b4:	4648      	mov	r0, r9
 80086b6:	441a      	add	r2, r3
 80086b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80086ba:	f000 fc2b 	bl	8008f14 <__i2b>
 80086be:	4605      	mov	r5, r0
 80086c0:	b166      	cbz	r6, 80086dc <_dtoa_r+0x754>
 80086c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	dd09      	ble.n	80086dc <_dtoa_r+0x754>
 80086c8:	42b3      	cmp	r3, r6
 80086ca:	bfa8      	it	ge
 80086cc:	4633      	movge	r3, r6
 80086ce:	9a04      	ldr	r2, [sp, #16]
 80086d0:	1af6      	subs	r6, r6, r3
 80086d2:	1ad2      	subs	r2, r2, r3
 80086d4:	9204      	str	r2, [sp, #16]
 80086d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	9309      	str	r3, [sp, #36]	@ 0x24
 80086dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086de:	b30b      	cbz	r3, 8008724 <_dtoa_r+0x79c>
 80086e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 80c6 	beq.w	8008874 <_dtoa_r+0x8ec>
 80086e8:	2c00      	cmp	r4, #0
 80086ea:	f000 80c0 	beq.w	800886e <_dtoa_r+0x8e6>
 80086ee:	4629      	mov	r1, r5
 80086f0:	4622      	mov	r2, r4
 80086f2:	4648      	mov	r0, r9
 80086f4:	f000 fcc6 	bl	8009084 <__pow5mult>
 80086f8:	9a03      	ldr	r2, [sp, #12]
 80086fa:	4601      	mov	r1, r0
 80086fc:	4605      	mov	r5, r0
 80086fe:	4648      	mov	r0, r9
 8008700:	f000 fc1e 	bl	8008f40 <__multiply>
 8008704:	9903      	ldr	r1, [sp, #12]
 8008706:	4680      	mov	r8, r0
 8008708:	4648      	mov	r0, r9
 800870a:	f000 fb4f 	bl	8008dac <_Bfree>
 800870e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008710:	1b1b      	subs	r3, r3, r4
 8008712:	930a      	str	r3, [sp, #40]	@ 0x28
 8008714:	f000 80b1 	beq.w	800887a <_dtoa_r+0x8f2>
 8008718:	4641      	mov	r1, r8
 800871a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800871c:	4648      	mov	r0, r9
 800871e:	f000 fcb1 	bl	8009084 <__pow5mult>
 8008722:	9003      	str	r0, [sp, #12]
 8008724:	2101      	movs	r1, #1
 8008726:	4648      	mov	r0, r9
 8008728:	f000 fbf4 	bl	8008f14 <__i2b>
 800872c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800872e:	4604      	mov	r4, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 81d8 	beq.w	8008ae6 <_dtoa_r+0xb5e>
 8008736:	461a      	mov	r2, r3
 8008738:	4601      	mov	r1, r0
 800873a:	4648      	mov	r0, r9
 800873c:	f000 fca2 	bl	8009084 <__pow5mult>
 8008740:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008742:	4604      	mov	r4, r0
 8008744:	2b01      	cmp	r3, #1
 8008746:	f300 809f 	bgt.w	8008888 <_dtoa_r+0x900>
 800874a:	9b06      	ldr	r3, [sp, #24]
 800874c:	2b00      	cmp	r3, #0
 800874e:	f040 8097 	bne.w	8008880 <_dtoa_r+0x8f8>
 8008752:	9b07      	ldr	r3, [sp, #28]
 8008754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008758:	2b00      	cmp	r3, #0
 800875a:	f040 8093 	bne.w	8008884 <_dtoa_r+0x8fc>
 800875e:	9b07      	ldr	r3, [sp, #28]
 8008760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008764:	0d1b      	lsrs	r3, r3, #20
 8008766:	051b      	lsls	r3, r3, #20
 8008768:	b133      	cbz	r3, 8008778 <_dtoa_r+0x7f0>
 800876a:	9b04      	ldr	r3, [sp, #16]
 800876c:	3301      	adds	r3, #1
 800876e:	9304      	str	r3, [sp, #16]
 8008770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008772:	3301      	adds	r3, #1
 8008774:	9309      	str	r3, [sp, #36]	@ 0x24
 8008776:	2301      	movs	r3, #1
 8008778:	930a      	str	r3, [sp, #40]	@ 0x28
 800877a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 81b8 	beq.w	8008af2 <_dtoa_r+0xb6a>
 8008782:	6923      	ldr	r3, [r4, #16]
 8008784:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008788:	6918      	ldr	r0, [r3, #16]
 800878a:	f000 fb77 	bl	8008e7c <__hi0bits>
 800878e:	f1c0 0020 	rsb	r0, r0, #32
 8008792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008794:	4418      	add	r0, r3
 8008796:	f010 001f 	ands.w	r0, r0, #31
 800879a:	f000 8082 	beq.w	80088a2 <_dtoa_r+0x91a>
 800879e:	f1c0 0320 	rsb	r3, r0, #32
 80087a2:	2b04      	cmp	r3, #4
 80087a4:	dd73      	ble.n	800888e <_dtoa_r+0x906>
 80087a6:	9b04      	ldr	r3, [sp, #16]
 80087a8:	f1c0 001c 	rsb	r0, r0, #28
 80087ac:	4403      	add	r3, r0
 80087ae:	9304      	str	r3, [sp, #16]
 80087b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b2:	4406      	add	r6, r0
 80087b4:	4403      	add	r3, r0
 80087b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80087b8:	9b04      	ldr	r3, [sp, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	dd05      	ble.n	80087ca <_dtoa_r+0x842>
 80087be:	461a      	mov	r2, r3
 80087c0:	4648      	mov	r0, r9
 80087c2:	9903      	ldr	r1, [sp, #12]
 80087c4:	f000 fcb8 	bl	8009138 <__lshift>
 80087c8:	9003      	str	r0, [sp, #12]
 80087ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	dd05      	ble.n	80087dc <_dtoa_r+0x854>
 80087d0:	4621      	mov	r1, r4
 80087d2:	461a      	mov	r2, r3
 80087d4:	4648      	mov	r0, r9
 80087d6:	f000 fcaf 	bl	8009138 <__lshift>
 80087da:	4604      	mov	r4, r0
 80087dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d061      	beq.n	80088a6 <_dtoa_r+0x91e>
 80087e2:	4621      	mov	r1, r4
 80087e4:	9803      	ldr	r0, [sp, #12]
 80087e6:	f000 fd13 	bl	8009210 <__mcmp>
 80087ea:	2800      	cmp	r0, #0
 80087ec:	da5b      	bge.n	80088a6 <_dtoa_r+0x91e>
 80087ee:	2300      	movs	r3, #0
 80087f0:	220a      	movs	r2, #10
 80087f2:	4648      	mov	r0, r9
 80087f4:	9903      	ldr	r1, [sp, #12]
 80087f6:	f000 fafb 	bl	8008df0 <__multadd>
 80087fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087fc:	f107 38ff 	add.w	r8, r7, #4294967295
 8008800:	9003      	str	r0, [sp, #12]
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 8177 	beq.w	8008af6 <_dtoa_r+0xb6e>
 8008808:	4629      	mov	r1, r5
 800880a:	2300      	movs	r3, #0
 800880c:	220a      	movs	r2, #10
 800880e:	4648      	mov	r0, r9
 8008810:	f000 faee 	bl	8008df0 <__multadd>
 8008814:	f1bb 0f00 	cmp.w	fp, #0
 8008818:	4605      	mov	r5, r0
 800881a:	dc6f      	bgt.n	80088fc <_dtoa_r+0x974>
 800881c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800881e:	2b02      	cmp	r3, #2
 8008820:	dc49      	bgt.n	80088b6 <_dtoa_r+0x92e>
 8008822:	e06b      	b.n	80088fc <_dtoa_r+0x974>
 8008824:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008826:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800882a:	e73c      	b.n	80086a6 <_dtoa_r+0x71e>
 800882c:	3fe00000 	.word	0x3fe00000
 8008830:	40240000 	.word	0x40240000
 8008834:	9b08      	ldr	r3, [sp, #32]
 8008836:	1e5c      	subs	r4, r3, #1
 8008838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800883a:	42a3      	cmp	r3, r4
 800883c:	db09      	blt.n	8008852 <_dtoa_r+0x8ca>
 800883e:	1b1c      	subs	r4, r3, r4
 8008840:	9b08      	ldr	r3, [sp, #32]
 8008842:	2b00      	cmp	r3, #0
 8008844:	f6bf af30 	bge.w	80086a8 <_dtoa_r+0x720>
 8008848:	9b04      	ldr	r3, [sp, #16]
 800884a:	9a08      	ldr	r2, [sp, #32]
 800884c:	1a9e      	subs	r6, r3, r2
 800884e:	2300      	movs	r3, #0
 8008850:	e72b      	b.n	80086aa <_dtoa_r+0x722>
 8008852:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008854:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008856:	1ae3      	subs	r3, r4, r3
 8008858:	441a      	add	r2, r3
 800885a:	940a      	str	r4, [sp, #40]	@ 0x28
 800885c:	9e04      	ldr	r6, [sp, #16]
 800885e:	2400      	movs	r4, #0
 8008860:	9b08      	ldr	r3, [sp, #32]
 8008862:	920e      	str	r2, [sp, #56]	@ 0x38
 8008864:	e721      	b.n	80086aa <_dtoa_r+0x722>
 8008866:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008868:	9e04      	ldr	r6, [sp, #16]
 800886a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800886c:	e728      	b.n	80086c0 <_dtoa_r+0x738>
 800886e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008872:	e751      	b.n	8008718 <_dtoa_r+0x790>
 8008874:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008876:	9903      	ldr	r1, [sp, #12]
 8008878:	e750      	b.n	800871c <_dtoa_r+0x794>
 800887a:	f8cd 800c 	str.w	r8, [sp, #12]
 800887e:	e751      	b.n	8008724 <_dtoa_r+0x79c>
 8008880:	2300      	movs	r3, #0
 8008882:	e779      	b.n	8008778 <_dtoa_r+0x7f0>
 8008884:	9b06      	ldr	r3, [sp, #24]
 8008886:	e777      	b.n	8008778 <_dtoa_r+0x7f0>
 8008888:	2300      	movs	r3, #0
 800888a:	930a      	str	r3, [sp, #40]	@ 0x28
 800888c:	e779      	b.n	8008782 <_dtoa_r+0x7fa>
 800888e:	d093      	beq.n	80087b8 <_dtoa_r+0x830>
 8008890:	9a04      	ldr	r2, [sp, #16]
 8008892:	331c      	adds	r3, #28
 8008894:	441a      	add	r2, r3
 8008896:	9204      	str	r2, [sp, #16]
 8008898:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800889a:	441e      	add	r6, r3
 800889c:	441a      	add	r2, r3
 800889e:	9209      	str	r2, [sp, #36]	@ 0x24
 80088a0:	e78a      	b.n	80087b8 <_dtoa_r+0x830>
 80088a2:	4603      	mov	r3, r0
 80088a4:	e7f4      	b.n	8008890 <_dtoa_r+0x908>
 80088a6:	9b08      	ldr	r3, [sp, #32]
 80088a8:	46b8      	mov	r8, r7
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	dc20      	bgt.n	80088f0 <_dtoa_r+0x968>
 80088ae:	469b      	mov	fp, r3
 80088b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80088b2:	2b02      	cmp	r3, #2
 80088b4:	dd1e      	ble.n	80088f4 <_dtoa_r+0x96c>
 80088b6:	f1bb 0f00 	cmp.w	fp, #0
 80088ba:	f47f adb1 	bne.w	8008420 <_dtoa_r+0x498>
 80088be:	4621      	mov	r1, r4
 80088c0:	465b      	mov	r3, fp
 80088c2:	2205      	movs	r2, #5
 80088c4:	4648      	mov	r0, r9
 80088c6:	f000 fa93 	bl	8008df0 <__multadd>
 80088ca:	4601      	mov	r1, r0
 80088cc:	4604      	mov	r4, r0
 80088ce:	9803      	ldr	r0, [sp, #12]
 80088d0:	f000 fc9e 	bl	8009210 <__mcmp>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	f77f ada3 	ble.w	8008420 <_dtoa_r+0x498>
 80088da:	4656      	mov	r6, sl
 80088dc:	2331      	movs	r3, #49	@ 0x31
 80088de:	f108 0801 	add.w	r8, r8, #1
 80088e2:	f806 3b01 	strb.w	r3, [r6], #1
 80088e6:	e59f      	b.n	8008428 <_dtoa_r+0x4a0>
 80088e8:	46b8      	mov	r8, r7
 80088ea:	9c08      	ldr	r4, [sp, #32]
 80088ec:	4625      	mov	r5, r4
 80088ee:	e7f4      	b.n	80088da <_dtoa_r+0x952>
 80088f0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80088f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 8101 	beq.w	8008afe <_dtoa_r+0xb76>
 80088fc:	2e00      	cmp	r6, #0
 80088fe:	dd05      	ble.n	800890c <_dtoa_r+0x984>
 8008900:	4629      	mov	r1, r5
 8008902:	4632      	mov	r2, r6
 8008904:	4648      	mov	r0, r9
 8008906:	f000 fc17 	bl	8009138 <__lshift>
 800890a:	4605      	mov	r5, r0
 800890c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800890e:	2b00      	cmp	r3, #0
 8008910:	d05c      	beq.n	80089cc <_dtoa_r+0xa44>
 8008912:	4648      	mov	r0, r9
 8008914:	6869      	ldr	r1, [r5, #4]
 8008916:	f000 fa09 	bl	8008d2c <_Balloc>
 800891a:	4606      	mov	r6, r0
 800891c:	b928      	cbnz	r0, 800892a <_dtoa_r+0x9a2>
 800891e:	4602      	mov	r2, r0
 8008920:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008924:	4b80      	ldr	r3, [pc, #512]	@ (8008b28 <_dtoa_r+0xba0>)
 8008926:	f7ff bb43 	b.w	8007fb0 <_dtoa_r+0x28>
 800892a:	692a      	ldr	r2, [r5, #16]
 800892c:	f105 010c 	add.w	r1, r5, #12
 8008930:	3202      	adds	r2, #2
 8008932:	0092      	lsls	r2, r2, #2
 8008934:	300c      	adds	r0, #12
 8008936:	f000 ff9d 	bl	8009874 <memcpy>
 800893a:	2201      	movs	r2, #1
 800893c:	4631      	mov	r1, r6
 800893e:	4648      	mov	r0, r9
 8008940:	f000 fbfa 	bl	8009138 <__lshift>
 8008944:	462f      	mov	r7, r5
 8008946:	4605      	mov	r5, r0
 8008948:	f10a 0301 	add.w	r3, sl, #1
 800894c:	9304      	str	r3, [sp, #16]
 800894e:	eb0a 030b 	add.w	r3, sl, fp
 8008952:	930a      	str	r3, [sp, #40]	@ 0x28
 8008954:	9b06      	ldr	r3, [sp, #24]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	9309      	str	r3, [sp, #36]	@ 0x24
 800895c:	9b04      	ldr	r3, [sp, #16]
 800895e:	4621      	mov	r1, r4
 8008960:	9803      	ldr	r0, [sp, #12]
 8008962:	f103 3bff 	add.w	fp, r3, #4294967295
 8008966:	f7ff fa86 	bl	8007e76 <quorem>
 800896a:	4603      	mov	r3, r0
 800896c:	4639      	mov	r1, r7
 800896e:	3330      	adds	r3, #48	@ 0x30
 8008970:	9006      	str	r0, [sp, #24]
 8008972:	9803      	ldr	r0, [sp, #12]
 8008974:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008976:	f000 fc4b 	bl	8009210 <__mcmp>
 800897a:	462a      	mov	r2, r5
 800897c:	9008      	str	r0, [sp, #32]
 800897e:	4621      	mov	r1, r4
 8008980:	4648      	mov	r0, r9
 8008982:	f000 fc61 	bl	8009248 <__mdiff>
 8008986:	68c2      	ldr	r2, [r0, #12]
 8008988:	4606      	mov	r6, r0
 800898a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800898c:	bb02      	cbnz	r2, 80089d0 <_dtoa_r+0xa48>
 800898e:	4601      	mov	r1, r0
 8008990:	9803      	ldr	r0, [sp, #12]
 8008992:	f000 fc3d 	bl	8009210 <__mcmp>
 8008996:	4602      	mov	r2, r0
 8008998:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800899a:	4631      	mov	r1, r6
 800899c:	4648      	mov	r0, r9
 800899e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80089a2:	f000 fa03 	bl	8008dac <_Bfree>
 80089a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80089aa:	9e04      	ldr	r6, [sp, #16]
 80089ac:	ea42 0103 	orr.w	r1, r2, r3
 80089b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089b2:	4319      	orrs	r1, r3
 80089b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089b6:	d10d      	bne.n	80089d4 <_dtoa_r+0xa4c>
 80089b8:	2b39      	cmp	r3, #57	@ 0x39
 80089ba:	d027      	beq.n	8008a0c <_dtoa_r+0xa84>
 80089bc:	9a08      	ldr	r2, [sp, #32]
 80089be:	2a00      	cmp	r2, #0
 80089c0:	dd01      	ble.n	80089c6 <_dtoa_r+0xa3e>
 80089c2:	9b06      	ldr	r3, [sp, #24]
 80089c4:	3331      	adds	r3, #49	@ 0x31
 80089c6:	f88b 3000 	strb.w	r3, [fp]
 80089ca:	e52e      	b.n	800842a <_dtoa_r+0x4a2>
 80089cc:	4628      	mov	r0, r5
 80089ce:	e7b9      	b.n	8008944 <_dtoa_r+0x9bc>
 80089d0:	2201      	movs	r2, #1
 80089d2:	e7e2      	b.n	800899a <_dtoa_r+0xa12>
 80089d4:	9908      	ldr	r1, [sp, #32]
 80089d6:	2900      	cmp	r1, #0
 80089d8:	db04      	blt.n	80089e4 <_dtoa_r+0xa5c>
 80089da:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80089dc:	4301      	orrs	r1, r0
 80089de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089e0:	4301      	orrs	r1, r0
 80089e2:	d120      	bne.n	8008a26 <_dtoa_r+0xa9e>
 80089e4:	2a00      	cmp	r2, #0
 80089e6:	ddee      	ble.n	80089c6 <_dtoa_r+0xa3e>
 80089e8:	2201      	movs	r2, #1
 80089ea:	9903      	ldr	r1, [sp, #12]
 80089ec:	4648      	mov	r0, r9
 80089ee:	9304      	str	r3, [sp, #16]
 80089f0:	f000 fba2 	bl	8009138 <__lshift>
 80089f4:	4621      	mov	r1, r4
 80089f6:	9003      	str	r0, [sp, #12]
 80089f8:	f000 fc0a 	bl	8009210 <__mcmp>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	9b04      	ldr	r3, [sp, #16]
 8008a00:	dc02      	bgt.n	8008a08 <_dtoa_r+0xa80>
 8008a02:	d1e0      	bne.n	80089c6 <_dtoa_r+0xa3e>
 8008a04:	07da      	lsls	r2, r3, #31
 8008a06:	d5de      	bpl.n	80089c6 <_dtoa_r+0xa3e>
 8008a08:	2b39      	cmp	r3, #57	@ 0x39
 8008a0a:	d1da      	bne.n	80089c2 <_dtoa_r+0xa3a>
 8008a0c:	2339      	movs	r3, #57	@ 0x39
 8008a0e:	f88b 3000 	strb.w	r3, [fp]
 8008a12:	4633      	mov	r3, r6
 8008a14:	461e      	mov	r6, r3
 8008a16:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	2a39      	cmp	r2, #57	@ 0x39
 8008a1e:	d04e      	beq.n	8008abe <_dtoa_r+0xb36>
 8008a20:	3201      	adds	r2, #1
 8008a22:	701a      	strb	r2, [r3, #0]
 8008a24:	e501      	b.n	800842a <_dtoa_r+0x4a2>
 8008a26:	2a00      	cmp	r2, #0
 8008a28:	dd03      	ble.n	8008a32 <_dtoa_r+0xaaa>
 8008a2a:	2b39      	cmp	r3, #57	@ 0x39
 8008a2c:	d0ee      	beq.n	8008a0c <_dtoa_r+0xa84>
 8008a2e:	3301      	adds	r3, #1
 8008a30:	e7c9      	b.n	80089c6 <_dtoa_r+0xa3e>
 8008a32:	9a04      	ldr	r2, [sp, #16]
 8008a34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a3a:	428a      	cmp	r2, r1
 8008a3c:	d028      	beq.n	8008a90 <_dtoa_r+0xb08>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	220a      	movs	r2, #10
 8008a42:	9903      	ldr	r1, [sp, #12]
 8008a44:	4648      	mov	r0, r9
 8008a46:	f000 f9d3 	bl	8008df0 <__multadd>
 8008a4a:	42af      	cmp	r7, r5
 8008a4c:	9003      	str	r0, [sp, #12]
 8008a4e:	f04f 0300 	mov.w	r3, #0
 8008a52:	f04f 020a 	mov.w	r2, #10
 8008a56:	4639      	mov	r1, r7
 8008a58:	4648      	mov	r0, r9
 8008a5a:	d107      	bne.n	8008a6c <_dtoa_r+0xae4>
 8008a5c:	f000 f9c8 	bl	8008df0 <__multadd>
 8008a60:	4607      	mov	r7, r0
 8008a62:	4605      	mov	r5, r0
 8008a64:	9b04      	ldr	r3, [sp, #16]
 8008a66:	3301      	adds	r3, #1
 8008a68:	9304      	str	r3, [sp, #16]
 8008a6a:	e777      	b.n	800895c <_dtoa_r+0x9d4>
 8008a6c:	f000 f9c0 	bl	8008df0 <__multadd>
 8008a70:	4629      	mov	r1, r5
 8008a72:	4607      	mov	r7, r0
 8008a74:	2300      	movs	r3, #0
 8008a76:	220a      	movs	r2, #10
 8008a78:	4648      	mov	r0, r9
 8008a7a:	f000 f9b9 	bl	8008df0 <__multadd>
 8008a7e:	4605      	mov	r5, r0
 8008a80:	e7f0      	b.n	8008a64 <_dtoa_r+0xadc>
 8008a82:	f1bb 0f00 	cmp.w	fp, #0
 8008a86:	bfcc      	ite	gt
 8008a88:	465e      	movgt	r6, fp
 8008a8a:	2601      	movle	r6, #1
 8008a8c:	2700      	movs	r7, #0
 8008a8e:	4456      	add	r6, sl
 8008a90:	2201      	movs	r2, #1
 8008a92:	9903      	ldr	r1, [sp, #12]
 8008a94:	4648      	mov	r0, r9
 8008a96:	9304      	str	r3, [sp, #16]
 8008a98:	f000 fb4e 	bl	8009138 <__lshift>
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	9003      	str	r0, [sp, #12]
 8008aa0:	f000 fbb6 	bl	8009210 <__mcmp>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	dcb4      	bgt.n	8008a12 <_dtoa_r+0xa8a>
 8008aa8:	d102      	bne.n	8008ab0 <_dtoa_r+0xb28>
 8008aaa:	9b04      	ldr	r3, [sp, #16]
 8008aac:	07db      	lsls	r3, r3, #31
 8008aae:	d4b0      	bmi.n	8008a12 <_dtoa_r+0xa8a>
 8008ab0:	4633      	mov	r3, r6
 8008ab2:	461e      	mov	r6, r3
 8008ab4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ab8:	2a30      	cmp	r2, #48	@ 0x30
 8008aba:	d0fa      	beq.n	8008ab2 <_dtoa_r+0xb2a>
 8008abc:	e4b5      	b.n	800842a <_dtoa_r+0x4a2>
 8008abe:	459a      	cmp	sl, r3
 8008ac0:	d1a8      	bne.n	8008a14 <_dtoa_r+0xa8c>
 8008ac2:	2331      	movs	r3, #49	@ 0x31
 8008ac4:	f108 0801 	add.w	r8, r8, #1
 8008ac8:	f88a 3000 	strb.w	r3, [sl]
 8008acc:	e4ad      	b.n	800842a <_dtoa_r+0x4a2>
 8008ace:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008ad0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008b2c <_dtoa_r+0xba4>
 8008ad4:	b11b      	cbz	r3, 8008ade <_dtoa_r+0xb56>
 8008ad6:	f10a 0308 	add.w	r3, sl, #8
 8008ada:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	4650      	mov	r0, sl
 8008ae0:	b017      	add	sp, #92	@ 0x5c
 8008ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	f77f ae2e 	ble.w	800874a <_dtoa_r+0x7c2>
 8008aee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008af0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008af2:	2001      	movs	r0, #1
 8008af4:	e64d      	b.n	8008792 <_dtoa_r+0x80a>
 8008af6:	f1bb 0f00 	cmp.w	fp, #0
 8008afa:	f77f aed9 	ble.w	80088b0 <_dtoa_r+0x928>
 8008afe:	4656      	mov	r6, sl
 8008b00:	4621      	mov	r1, r4
 8008b02:	9803      	ldr	r0, [sp, #12]
 8008b04:	f7ff f9b7 	bl	8007e76 <quorem>
 8008b08:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008b0c:	f806 3b01 	strb.w	r3, [r6], #1
 8008b10:	eba6 020a 	sub.w	r2, r6, sl
 8008b14:	4593      	cmp	fp, r2
 8008b16:	ddb4      	ble.n	8008a82 <_dtoa_r+0xafa>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	220a      	movs	r2, #10
 8008b1c:	4648      	mov	r0, r9
 8008b1e:	9903      	ldr	r1, [sp, #12]
 8008b20:	f000 f966 	bl	8008df0 <__multadd>
 8008b24:	9003      	str	r0, [sp, #12]
 8008b26:	e7eb      	b.n	8008b00 <_dtoa_r+0xb78>
 8008b28:	0800ac0c 	.word	0x0800ac0c
 8008b2c:	0800ab90 	.word	0x0800ab90

08008b30 <_free_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	4605      	mov	r5, r0
 8008b34:	2900      	cmp	r1, #0
 8008b36:	d040      	beq.n	8008bba <_free_r+0x8a>
 8008b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b3c:	1f0c      	subs	r4, r1, #4
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	bfb8      	it	lt
 8008b42:	18e4      	addlt	r4, r4, r3
 8008b44:	f000 f8e6 	bl	8008d14 <__malloc_lock>
 8008b48:	4a1c      	ldr	r2, [pc, #112]	@ (8008bbc <_free_r+0x8c>)
 8008b4a:	6813      	ldr	r3, [r2, #0]
 8008b4c:	b933      	cbnz	r3, 8008b5c <_free_r+0x2c>
 8008b4e:	6063      	str	r3, [r4, #4]
 8008b50:	6014      	str	r4, [r2, #0]
 8008b52:	4628      	mov	r0, r5
 8008b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b58:	f000 b8e2 	b.w	8008d20 <__malloc_unlock>
 8008b5c:	42a3      	cmp	r3, r4
 8008b5e:	d908      	bls.n	8008b72 <_free_r+0x42>
 8008b60:	6820      	ldr	r0, [r4, #0]
 8008b62:	1821      	adds	r1, r4, r0
 8008b64:	428b      	cmp	r3, r1
 8008b66:	bf01      	itttt	eq
 8008b68:	6819      	ldreq	r1, [r3, #0]
 8008b6a:	685b      	ldreq	r3, [r3, #4]
 8008b6c:	1809      	addeq	r1, r1, r0
 8008b6e:	6021      	streq	r1, [r4, #0]
 8008b70:	e7ed      	b.n	8008b4e <_free_r+0x1e>
 8008b72:	461a      	mov	r2, r3
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	b10b      	cbz	r3, 8008b7c <_free_r+0x4c>
 8008b78:	42a3      	cmp	r3, r4
 8008b7a:	d9fa      	bls.n	8008b72 <_free_r+0x42>
 8008b7c:	6811      	ldr	r1, [r2, #0]
 8008b7e:	1850      	adds	r0, r2, r1
 8008b80:	42a0      	cmp	r0, r4
 8008b82:	d10b      	bne.n	8008b9c <_free_r+0x6c>
 8008b84:	6820      	ldr	r0, [r4, #0]
 8008b86:	4401      	add	r1, r0
 8008b88:	1850      	adds	r0, r2, r1
 8008b8a:	4283      	cmp	r3, r0
 8008b8c:	6011      	str	r1, [r2, #0]
 8008b8e:	d1e0      	bne.n	8008b52 <_free_r+0x22>
 8008b90:	6818      	ldr	r0, [r3, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	4408      	add	r0, r1
 8008b96:	6010      	str	r0, [r2, #0]
 8008b98:	6053      	str	r3, [r2, #4]
 8008b9a:	e7da      	b.n	8008b52 <_free_r+0x22>
 8008b9c:	d902      	bls.n	8008ba4 <_free_r+0x74>
 8008b9e:	230c      	movs	r3, #12
 8008ba0:	602b      	str	r3, [r5, #0]
 8008ba2:	e7d6      	b.n	8008b52 <_free_r+0x22>
 8008ba4:	6820      	ldr	r0, [r4, #0]
 8008ba6:	1821      	adds	r1, r4, r0
 8008ba8:	428b      	cmp	r3, r1
 8008baa:	bf01      	itttt	eq
 8008bac:	6819      	ldreq	r1, [r3, #0]
 8008bae:	685b      	ldreq	r3, [r3, #4]
 8008bb0:	1809      	addeq	r1, r1, r0
 8008bb2:	6021      	streq	r1, [r4, #0]
 8008bb4:	6063      	str	r3, [r4, #4]
 8008bb6:	6054      	str	r4, [r2, #4]
 8008bb8:	e7cb      	b.n	8008b52 <_free_r+0x22>
 8008bba:	bd38      	pop	{r3, r4, r5, pc}
 8008bbc:	20000744 	.word	0x20000744

08008bc0 <malloc>:
 8008bc0:	4b02      	ldr	r3, [pc, #8]	@ (8008bcc <malloc+0xc>)
 8008bc2:	4601      	mov	r1, r0
 8008bc4:	6818      	ldr	r0, [r3, #0]
 8008bc6:	f000 b825 	b.w	8008c14 <_malloc_r>
 8008bca:	bf00      	nop
 8008bcc:	20000038 	.word	0x20000038

08008bd0 <sbrk_aligned>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	4e0f      	ldr	r6, [pc, #60]	@ (8008c10 <sbrk_aligned+0x40>)
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	6831      	ldr	r1, [r6, #0]
 8008bd8:	4605      	mov	r5, r0
 8008bda:	b911      	cbnz	r1, 8008be2 <sbrk_aligned+0x12>
 8008bdc:	f000 fe3a 	bl	8009854 <_sbrk_r>
 8008be0:	6030      	str	r0, [r6, #0]
 8008be2:	4621      	mov	r1, r4
 8008be4:	4628      	mov	r0, r5
 8008be6:	f000 fe35 	bl	8009854 <_sbrk_r>
 8008bea:	1c43      	adds	r3, r0, #1
 8008bec:	d103      	bne.n	8008bf6 <sbrk_aligned+0x26>
 8008bee:	f04f 34ff 	mov.w	r4, #4294967295
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	bd70      	pop	{r4, r5, r6, pc}
 8008bf6:	1cc4      	adds	r4, r0, #3
 8008bf8:	f024 0403 	bic.w	r4, r4, #3
 8008bfc:	42a0      	cmp	r0, r4
 8008bfe:	d0f8      	beq.n	8008bf2 <sbrk_aligned+0x22>
 8008c00:	1a21      	subs	r1, r4, r0
 8008c02:	4628      	mov	r0, r5
 8008c04:	f000 fe26 	bl	8009854 <_sbrk_r>
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d1f2      	bne.n	8008bf2 <sbrk_aligned+0x22>
 8008c0c:	e7ef      	b.n	8008bee <sbrk_aligned+0x1e>
 8008c0e:	bf00      	nop
 8008c10:	20000740 	.word	0x20000740

08008c14 <_malloc_r>:
 8008c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c18:	1ccd      	adds	r5, r1, #3
 8008c1a:	f025 0503 	bic.w	r5, r5, #3
 8008c1e:	3508      	adds	r5, #8
 8008c20:	2d0c      	cmp	r5, #12
 8008c22:	bf38      	it	cc
 8008c24:	250c      	movcc	r5, #12
 8008c26:	2d00      	cmp	r5, #0
 8008c28:	4606      	mov	r6, r0
 8008c2a:	db01      	blt.n	8008c30 <_malloc_r+0x1c>
 8008c2c:	42a9      	cmp	r1, r5
 8008c2e:	d904      	bls.n	8008c3a <_malloc_r+0x26>
 8008c30:	230c      	movs	r3, #12
 8008c32:	6033      	str	r3, [r6, #0]
 8008c34:	2000      	movs	r0, #0
 8008c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008d10 <_malloc_r+0xfc>
 8008c3e:	f000 f869 	bl	8008d14 <__malloc_lock>
 8008c42:	f8d8 3000 	ldr.w	r3, [r8]
 8008c46:	461c      	mov	r4, r3
 8008c48:	bb44      	cbnz	r4, 8008c9c <_malloc_r+0x88>
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	f7ff ffbf 	bl	8008bd0 <sbrk_aligned>
 8008c52:	1c43      	adds	r3, r0, #1
 8008c54:	4604      	mov	r4, r0
 8008c56:	d158      	bne.n	8008d0a <_malloc_r+0xf6>
 8008c58:	f8d8 4000 	ldr.w	r4, [r8]
 8008c5c:	4627      	mov	r7, r4
 8008c5e:	2f00      	cmp	r7, #0
 8008c60:	d143      	bne.n	8008cea <_malloc_r+0xd6>
 8008c62:	2c00      	cmp	r4, #0
 8008c64:	d04b      	beq.n	8008cfe <_malloc_r+0xea>
 8008c66:	6823      	ldr	r3, [r4, #0]
 8008c68:	4639      	mov	r1, r7
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	eb04 0903 	add.w	r9, r4, r3
 8008c70:	f000 fdf0 	bl	8009854 <_sbrk_r>
 8008c74:	4581      	cmp	r9, r0
 8008c76:	d142      	bne.n	8008cfe <_malloc_r+0xea>
 8008c78:	6821      	ldr	r1, [r4, #0]
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	1a6d      	subs	r5, r5, r1
 8008c7e:	4629      	mov	r1, r5
 8008c80:	f7ff ffa6 	bl	8008bd0 <sbrk_aligned>
 8008c84:	3001      	adds	r0, #1
 8008c86:	d03a      	beq.n	8008cfe <_malloc_r+0xea>
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	442b      	add	r3, r5
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	bb62      	cbnz	r2, 8008cf0 <_malloc_r+0xdc>
 8008c96:	f8c8 7000 	str.w	r7, [r8]
 8008c9a:	e00f      	b.n	8008cbc <_malloc_r+0xa8>
 8008c9c:	6822      	ldr	r2, [r4, #0]
 8008c9e:	1b52      	subs	r2, r2, r5
 8008ca0:	d420      	bmi.n	8008ce4 <_malloc_r+0xd0>
 8008ca2:	2a0b      	cmp	r2, #11
 8008ca4:	d917      	bls.n	8008cd6 <_malloc_r+0xc2>
 8008ca6:	1961      	adds	r1, r4, r5
 8008ca8:	42a3      	cmp	r3, r4
 8008caa:	6025      	str	r5, [r4, #0]
 8008cac:	bf18      	it	ne
 8008cae:	6059      	strne	r1, [r3, #4]
 8008cb0:	6863      	ldr	r3, [r4, #4]
 8008cb2:	bf08      	it	eq
 8008cb4:	f8c8 1000 	streq.w	r1, [r8]
 8008cb8:	5162      	str	r2, [r4, r5]
 8008cba:	604b      	str	r3, [r1, #4]
 8008cbc:	4630      	mov	r0, r6
 8008cbe:	f000 f82f 	bl	8008d20 <__malloc_unlock>
 8008cc2:	f104 000b 	add.w	r0, r4, #11
 8008cc6:	1d23      	adds	r3, r4, #4
 8008cc8:	f020 0007 	bic.w	r0, r0, #7
 8008ccc:	1ac2      	subs	r2, r0, r3
 8008cce:	bf1c      	itt	ne
 8008cd0:	1a1b      	subne	r3, r3, r0
 8008cd2:	50a3      	strne	r3, [r4, r2]
 8008cd4:	e7af      	b.n	8008c36 <_malloc_r+0x22>
 8008cd6:	6862      	ldr	r2, [r4, #4]
 8008cd8:	42a3      	cmp	r3, r4
 8008cda:	bf0c      	ite	eq
 8008cdc:	f8c8 2000 	streq.w	r2, [r8]
 8008ce0:	605a      	strne	r2, [r3, #4]
 8008ce2:	e7eb      	b.n	8008cbc <_malloc_r+0xa8>
 8008ce4:	4623      	mov	r3, r4
 8008ce6:	6864      	ldr	r4, [r4, #4]
 8008ce8:	e7ae      	b.n	8008c48 <_malloc_r+0x34>
 8008cea:	463c      	mov	r4, r7
 8008cec:	687f      	ldr	r7, [r7, #4]
 8008cee:	e7b6      	b.n	8008c5e <_malloc_r+0x4a>
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	42a3      	cmp	r3, r4
 8008cf6:	d1fb      	bne.n	8008cf0 <_malloc_r+0xdc>
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	6053      	str	r3, [r2, #4]
 8008cfc:	e7de      	b.n	8008cbc <_malloc_r+0xa8>
 8008cfe:	230c      	movs	r3, #12
 8008d00:	4630      	mov	r0, r6
 8008d02:	6033      	str	r3, [r6, #0]
 8008d04:	f000 f80c 	bl	8008d20 <__malloc_unlock>
 8008d08:	e794      	b.n	8008c34 <_malloc_r+0x20>
 8008d0a:	6005      	str	r5, [r0, #0]
 8008d0c:	e7d6      	b.n	8008cbc <_malloc_r+0xa8>
 8008d0e:	bf00      	nop
 8008d10:	20000744 	.word	0x20000744

08008d14 <__malloc_lock>:
 8008d14:	4801      	ldr	r0, [pc, #4]	@ (8008d1c <__malloc_lock+0x8>)
 8008d16:	f7ff b89e 	b.w	8007e56 <__retarget_lock_acquire_recursive>
 8008d1a:	bf00      	nop
 8008d1c:	2000073c 	.word	0x2000073c

08008d20 <__malloc_unlock>:
 8008d20:	4801      	ldr	r0, [pc, #4]	@ (8008d28 <__malloc_unlock+0x8>)
 8008d22:	f7ff b899 	b.w	8007e58 <__retarget_lock_release_recursive>
 8008d26:	bf00      	nop
 8008d28:	2000073c 	.word	0x2000073c

08008d2c <_Balloc>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	69c6      	ldr	r6, [r0, #28]
 8008d30:	4604      	mov	r4, r0
 8008d32:	460d      	mov	r5, r1
 8008d34:	b976      	cbnz	r6, 8008d54 <_Balloc+0x28>
 8008d36:	2010      	movs	r0, #16
 8008d38:	f7ff ff42 	bl	8008bc0 <malloc>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	61e0      	str	r0, [r4, #28]
 8008d40:	b920      	cbnz	r0, 8008d4c <_Balloc+0x20>
 8008d42:	216b      	movs	r1, #107	@ 0x6b
 8008d44:	4b17      	ldr	r3, [pc, #92]	@ (8008da4 <_Balloc+0x78>)
 8008d46:	4818      	ldr	r0, [pc, #96]	@ (8008da8 <_Balloc+0x7c>)
 8008d48:	f000 fda2 	bl	8009890 <__assert_func>
 8008d4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d50:	6006      	str	r6, [r0, #0]
 8008d52:	60c6      	str	r6, [r0, #12]
 8008d54:	69e6      	ldr	r6, [r4, #28]
 8008d56:	68f3      	ldr	r3, [r6, #12]
 8008d58:	b183      	cbz	r3, 8008d7c <_Balloc+0x50>
 8008d5a:	69e3      	ldr	r3, [r4, #28]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d62:	b9b8      	cbnz	r0, 8008d94 <_Balloc+0x68>
 8008d64:	2101      	movs	r1, #1
 8008d66:	fa01 f605 	lsl.w	r6, r1, r5
 8008d6a:	1d72      	adds	r2, r6, #5
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	0092      	lsls	r2, r2, #2
 8008d70:	f000 fdac 	bl	80098cc <_calloc_r>
 8008d74:	b160      	cbz	r0, 8008d90 <_Balloc+0x64>
 8008d76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d7a:	e00e      	b.n	8008d9a <_Balloc+0x6e>
 8008d7c:	2221      	movs	r2, #33	@ 0x21
 8008d7e:	2104      	movs	r1, #4
 8008d80:	4620      	mov	r0, r4
 8008d82:	f000 fda3 	bl	80098cc <_calloc_r>
 8008d86:	69e3      	ldr	r3, [r4, #28]
 8008d88:	60f0      	str	r0, [r6, #12]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e4      	bne.n	8008d5a <_Balloc+0x2e>
 8008d90:	2000      	movs	r0, #0
 8008d92:	bd70      	pop	{r4, r5, r6, pc}
 8008d94:	6802      	ldr	r2, [r0, #0]
 8008d96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008da0:	e7f7      	b.n	8008d92 <_Balloc+0x66>
 8008da2:	bf00      	nop
 8008da4:	0800ab9d 	.word	0x0800ab9d
 8008da8:	0800ac1d 	.word	0x0800ac1d

08008dac <_Bfree>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	69c6      	ldr	r6, [r0, #28]
 8008db0:	4605      	mov	r5, r0
 8008db2:	460c      	mov	r4, r1
 8008db4:	b976      	cbnz	r6, 8008dd4 <_Bfree+0x28>
 8008db6:	2010      	movs	r0, #16
 8008db8:	f7ff ff02 	bl	8008bc0 <malloc>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	61e8      	str	r0, [r5, #28]
 8008dc0:	b920      	cbnz	r0, 8008dcc <_Bfree+0x20>
 8008dc2:	218f      	movs	r1, #143	@ 0x8f
 8008dc4:	4b08      	ldr	r3, [pc, #32]	@ (8008de8 <_Bfree+0x3c>)
 8008dc6:	4809      	ldr	r0, [pc, #36]	@ (8008dec <_Bfree+0x40>)
 8008dc8:	f000 fd62 	bl	8009890 <__assert_func>
 8008dcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dd0:	6006      	str	r6, [r0, #0]
 8008dd2:	60c6      	str	r6, [r0, #12]
 8008dd4:	b13c      	cbz	r4, 8008de6 <_Bfree+0x3a>
 8008dd6:	69eb      	ldr	r3, [r5, #28]
 8008dd8:	6862      	ldr	r2, [r4, #4]
 8008dda:	68db      	ldr	r3, [r3, #12]
 8008ddc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008de0:	6021      	str	r1, [r4, #0]
 8008de2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
 8008de8:	0800ab9d 	.word	0x0800ab9d
 8008dec:	0800ac1d 	.word	0x0800ac1d

08008df0 <__multadd>:
 8008df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df4:	4607      	mov	r7, r0
 8008df6:	460c      	mov	r4, r1
 8008df8:	461e      	mov	r6, r3
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	690d      	ldr	r5, [r1, #16]
 8008dfe:	f101 0c14 	add.w	ip, r1, #20
 8008e02:	f8dc 3000 	ldr.w	r3, [ip]
 8008e06:	3001      	adds	r0, #1
 8008e08:	b299      	uxth	r1, r3
 8008e0a:	fb02 6101 	mla	r1, r2, r1, r6
 8008e0e:	0c1e      	lsrs	r6, r3, #16
 8008e10:	0c0b      	lsrs	r3, r1, #16
 8008e12:	fb02 3306 	mla	r3, r2, r6, r3
 8008e16:	b289      	uxth	r1, r1
 8008e18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e1c:	4285      	cmp	r5, r0
 8008e1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e22:	f84c 1b04 	str.w	r1, [ip], #4
 8008e26:	dcec      	bgt.n	8008e02 <__multadd+0x12>
 8008e28:	b30e      	cbz	r6, 8008e6e <__multadd+0x7e>
 8008e2a:	68a3      	ldr	r3, [r4, #8]
 8008e2c:	42ab      	cmp	r3, r5
 8008e2e:	dc19      	bgt.n	8008e64 <__multadd+0x74>
 8008e30:	6861      	ldr	r1, [r4, #4]
 8008e32:	4638      	mov	r0, r7
 8008e34:	3101      	adds	r1, #1
 8008e36:	f7ff ff79 	bl	8008d2c <_Balloc>
 8008e3a:	4680      	mov	r8, r0
 8008e3c:	b928      	cbnz	r0, 8008e4a <__multadd+0x5a>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	21ba      	movs	r1, #186	@ 0xba
 8008e42:	4b0c      	ldr	r3, [pc, #48]	@ (8008e74 <__multadd+0x84>)
 8008e44:	480c      	ldr	r0, [pc, #48]	@ (8008e78 <__multadd+0x88>)
 8008e46:	f000 fd23 	bl	8009890 <__assert_func>
 8008e4a:	6922      	ldr	r2, [r4, #16]
 8008e4c:	f104 010c 	add.w	r1, r4, #12
 8008e50:	3202      	adds	r2, #2
 8008e52:	0092      	lsls	r2, r2, #2
 8008e54:	300c      	adds	r0, #12
 8008e56:	f000 fd0d 	bl	8009874 <memcpy>
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	4638      	mov	r0, r7
 8008e5e:	f7ff ffa5 	bl	8008dac <_Bfree>
 8008e62:	4644      	mov	r4, r8
 8008e64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e68:	3501      	adds	r5, #1
 8008e6a:	615e      	str	r6, [r3, #20]
 8008e6c:	6125      	str	r5, [r4, #16]
 8008e6e:	4620      	mov	r0, r4
 8008e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e74:	0800ac0c 	.word	0x0800ac0c
 8008e78:	0800ac1d 	.word	0x0800ac1d

08008e7c <__hi0bits>:
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008e82:	bf3a      	itte	cc
 8008e84:	0403      	lslcc	r3, r0, #16
 8008e86:	2010      	movcc	r0, #16
 8008e88:	2000      	movcs	r0, #0
 8008e8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e8e:	bf3c      	itt	cc
 8008e90:	021b      	lslcc	r3, r3, #8
 8008e92:	3008      	addcc	r0, #8
 8008e94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e98:	bf3c      	itt	cc
 8008e9a:	011b      	lslcc	r3, r3, #4
 8008e9c:	3004      	addcc	r0, #4
 8008e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ea2:	bf3c      	itt	cc
 8008ea4:	009b      	lslcc	r3, r3, #2
 8008ea6:	3002      	addcc	r0, #2
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	db05      	blt.n	8008eb8 <__hi0bits+0x3c>
 8008eac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008eb0:	f100 0001 	add.w	r0, r0, #1
 8008eb4:	bf08      	it	eq
 8008eb6:	2020      	moveq	r0, #32
 8008eb8:	4770      	bx	lr

08008eba <__lo0bits>:
 8008eba:	6803      	ldr	r3, [r0, #0]
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	f013 0007 	ands.w	r0, r3, #7
 8008ec2:	d00b      	beq.n	8008edc <__lo0bits+0x22>
 8008ec4:	07d9      	lsls	r1, r3, #31
 8008ec6:	d421      	bmi.n	8008f0c <__lo0bits+0x52>
 8008ec8:	0798      	lsls	r0, r3, #30
 8008eca:	bf49      	itett	mi
 8008ecc:	085b      	lsrmi	r3, r3, #1
 8008ece:	089b      	lsrpl	r3, r3, #2
 8008ed0:	2001      	movmi	r0, #1
 8008ed2:	6013      	strmi	r3, [r2, #0]
 8008ed4:	bf5c      	itt	pl
 8008ed6:	2002      	movpl	r0, #2
 8008ed8:	6013      	strpl	r3, [r2, #0]
 8008eda:	4770      	bx	lr
 8008edc:	b299      	uxth	r1, r3
 8008ede:	b909      	cbnz	r1, 8008ee4 <__lo0bits+0x2a>
 8008ee0:	2010      	movs	r0, #16
 8008ee2:	0c1b      	lsrs	r3, r3, #16
 8008ee4:	b2d9      	uxtb	r1, r3
 8008ee6:	b909      	cbnz	r1, 8008eec <__lo0bits+0x32>
 8008ee8:	3008      	adds	r0, #8
 8008eea:	0a1b      	lsrs	r3, r3, #8
 8008eec:	0719      	lsls	r1, r3, #28
 8008eee:	bf04      	itt	eq
 8008ef0:	091b      	lsreq	r3, r3, #4
 8008ef2:	3004      	addeq	r0, #4
 8008ef4:	0799      	lsls	r1, r3, #30
 8008ef6:	bf04      	itt	eq
 8008ef8:	089b      	lsreq	r3, r3, #2
 8008efa:	3002      	addeq	r0, #2
 8008efc:	07d9      	lsls	r1, r3, #31
 8008efe:	d403      	bmi.n	8008f08 <__lo0bits+0x4e>
 8008f00:	085b      	lsrs	r3, r3, #1
 8008f02:	f100 0001 	add.w	r0, r0, #1
 8008f06:	d003      	beq.n	8008f10 <__lo0bits+0x56>
 8008f08:	6013      	str	r3, [r2, #0]
 8008f0a:	4770      	bx	lr
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	4770      	bx	lr
 8008f10:	2020      	movs	r0, #32
 8008f12:	4770      	bx	lr

08008f14 <__i2b>:
 8008f14:	b510      	push	{r4, lr}
 8008f16:	460c      	mov	r4, r1
 8008f18:	2101      	movs	r1, #1
 8008f1a:	f7ff ff07 	bl	8008d2c <_Balloc>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	b928      	cbnz	r0, 8008f2e <__i2b+0x1a>
 8008f22:	f240 1145 	movw	r1, #325	@ 0x145
 8008f26:	4b04      	ldr	r3, [pc, #16]	@ (8008f38 <__i2b+0x24>)
 8008f28:	4804      	ldr	r0, [pc, #16]	@ (8008f3c <__i2b+0x28>)
 8008f2a:	f000 fcb1 	bl	8009890 <__assert_func>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	6144      	str	r4, [r0, #20]
 8008f32:	6103      	str	r3, [r0, #16]
 8008f34:	bd10      	pop	{r4, pc}
 8008f36:	bf00      	nop
 8008f38:	0800ac0c 	.word	0x0800ac0c
 8008f3c:	0800ac1d 	.word	0x0800ac1d

08008f40 <__multiply>:
 8008f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f44:	4617      	mov	r7, r2
 8008f46:	690a      	ldr	r2, [r1, #16]
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	4689      	mov	r9, r1
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	bfa2      	ittt	ge
 8008f50:	463b      	movge	r3, r7
 8008f52:	460f      	movge	r7, r1
 8008f54:	4699      	movge	r9, r3
 8008f56:	693d      	ldr	r5, [r7, #16]
 8008f58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	6879      	ldr	r1, [r7, #4]
 8008f60:	eb05 060a 	add.w	r6, r5, sl
 8008f64:	42b3      	cmp	r3, r6
 8008f66:	b085      	sub	sp, #20
 8008f68:	bfb8      	it	lt
 8008f6a:	3101      	addlt	r1, #1
 8008f6c:	f7ff fede 	bl	8008d2c <_Balloc>
 8008f70:	b930      	cbnz	r0, 8008f80 <__multiply+0x40>
 8008f72:	4602      	mov	r2, r0
 8008f74:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008f78:	4b40      	ldr	r3, [pc, #256]	@ (800907c <__multiply+0x13c>)
 8008f7a:	4841      	ldr	r0, [pc, #260]	@ (8009080 <__multiply+0x140>)
 8008f7c:	f000 fc88 	bl	8009890 <__assert_func>
 8008f80:	f100 0414 	add.w	r4, r0, #20
 8008f84:	4623      	mov	r3, r4
 8008f86:	2200      	movs	r2, #0
 8008f88:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008f8c:	4573      	cmp	r3, lr
 8008f8e:	d320      	bcc.n	8008fd2 <__multiply+0x92>
 8008f90:	f107 0814 	add.w	r8, r7, #20
 8008f94:	f109 0114 	add.w	r1, r9, #20
 8008f98:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008f9c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008fa0:	9302      	str	r3, [sp, #8]
 8008fa2:	1beb      	subs	r3, r5, r7
 8008fa4:	3b15      	subs	r3, #21
 8008fa6:	f023 0303 	bic.w	r3, r3, #3
 8008faa:	3304      	adds	r3, #4
 8008fac:	3715      	adds	r7, #21
 8008fae:	42bd      	cmp	r5, r7
 8008fb0:	bf38      	it	cc
 8008fb2:	2304      	movcc	r3, #4
 8008fb4:	9301      	str	r3, [sp, #4]
 8008fb6:	9b02      	ldr	r3, [sp, #8]
 8008fb8:	9103      	str	r1, [sp, #12]
 8008fba:	428b      	cmp	r3, r1
 8008fbc:	d80c      	bhi.n	8008fd8 <__multiply+0x98>
 8008fbe:	2e00      	cmp	r6, #0
 8008fc0:	dd03      	ble.n	8008fca <__multiply+0x8a>
 8008fc2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d055      	beq.n	8009076 <__multiply+0x136>
 8008fca:	6106      	str	r6, [r0, #16]
 8008fcc:	b005      	add	sp, #20
 8008fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd2:	f843 2b04 	str.w	r2, [r3], #4
 8008fd6:	e7d9      	b.n	8008f8c <__multiply+0x4c>
 8008fd8:	f8b1 a000 	ldrh.w	sl, [r1]
 8008fdc:	f1ba 0f00 	cmp.w	sl, #0
 8008fe0:	d01f      	beq.n	8009022 <__multiply+0xe2>
 8008fe2:	46c4      	mov	ip, r8
 8008fe4:	46a1      	mov	r9, r4
 8008fe6:	2700      	movs	r7, #0
 8008fe8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008fec:	f8d9 3000 	ldr.w	r3, [r9]
 8008ff0:	fa1f fb82 	uxth.w	fp, r2
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ffa:	443b      	add	r3, r7
 8008ffc:	f8d9 7000 	ldr.w	r7, [r9]
 8009000:	0c12      	lsrs	r2, r2, #16
 8009002:	0c3f      	lsrs	r7, r7, #16
 8009004:	fb0a 7202 	mla	r2, sl, r2, r7
 8009008:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800900c:	b29b      	uxth	r3, r3
 800900e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009012:	4565      	cmp	r5, ip
 8009014:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009018:	f849 3b04 	str.w	r3, [r9], #4
 800901c:	d8e4      	bhi.n	8008fe8 <__multiply+0xa8>
 800901e:	9b01      	ldr	r3, [sp, #4]
 8009020:	50e7      	str	r7, [r4, r3]
 8009022:	9b03      	ldr	r3, [sp, #12]
 8009024:	3104      	adds	r1, #4
 8009026:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800902a:	f1b9 0f00 	cmp.w	r9, #0
 800902e:	d020      	beq.n	8009072 <__multiply+0x132>
 8009030:	4647      	mov	r7, r8
 8009032:	46a4      	mov	ip, r4
 8009034:	f04f 0a00 	mov.w	sl, #0
 8009038:	6823      	ldr	r3, [r4, #0]
 800903a:	f8b7 b000 	ldrh.w	fp, [r7]
 800903e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009042:	b29b      	uxth	r3, r3
 8009044:	fb09 220b 	mla	r2, r9, fp, r2
 8009048:	4452      	add	r2, sl
 800904a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800904e:	f84c 3b04 	str.w	r3, [ip], #4
 8009052:	f857 3b04 	ldr.w	r3, [r7], #4
 8009056:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800905a:	f8bc 3000 	ldrh.w	r3, [ip]
 800905e:	42bd      	cmp	r5, r7
 8009060:	fb09 330a 	mla	r3, r9, sl, r3
 8009064:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009068:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800906c:	d8e5      	bhi.n	800903a <__multiply+0xfa>
 800906e:	9a01      	ldr	r2, [sp, #4]
 8009070:	50a3      	str	r3, [r4, r2]
 8009072:	3404      	adds	r4, #4
 8009074:	e79f      	b.n	8008fb6 <__multiply+0x76>
 8009076:	3e01      	subs	r6, #1
 8009078:	e7a1      	b.n	8008fbe <__multiply+0x7e>
 800907a:	bf00      	nop
 800907c:	0800ac0c 	.word	0x0800ac0c
 8009080:	0800ac1d 	.word	0x0800ac1d

08009084 <__pow5mult>:
 8009084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009088:	4615      	mov	r5, r2
 800908a:	f012 0203 	ands.w	r2, r2, #3
 800908e:	4607      	mov	r7, r0
 8009090:	460e      	mov	r6, r1
 8009092:	d007      	beq.n	80090a4 <__pow5mult+0x20>
 8009094:	4c25      	ldr	r4, [pc, #148]	@ (800912c <__pow5mult+0xa8>)
 8009096:	3a01      	subs	r2, #1
 8009098:	2300      	movs	r3, #0
 800909a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800909e:	f7ff fea7 	bl	8008df0 <__multadd>
 80090a2:	4606      	mov	r6, r0
 80090a4:	10ad      	asrs	r5, r5, #2
 80090a6:	d03d      	beq.n	8009124 <__pow5mult+0xa0>
 80090a8:	69fc      	ldr	r4, [r7, #28]
 80090aa:	b97c      	cbnz	r4, 80090cc <__pow5mult+0x48>
 80090ac:	2010      	movs	r0, #16
 80090ae:	f7ff fd87 	bl	8008bc0 <malloc>
 80090b2:	4602      	mov	r2, r0
 80090b4:	61f8      	str	r0, [r7, #28]
 80090b6:	b928      	cbnz	r0, 80090c4 <__pow5mult+0x40>
 80090b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80090bc:	4b1c      	ldr	r3, [pc, #112]	@ (8009130 <__pow5mult+0xac>)
 80090be:	481d      	ldr	r0, [pc, #116]	@ (8009134 <__pow5mult+0xb0>)
 80090c0:	f000 fbe6 	bl	8009890 <__assert_func>
 80090c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090c8:	6004      	str	r4, [r0, #0]
 80090ca:	60c4      	str	r4, [r0, #12]
 80090cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80090d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090d4:	b94c      	cbnz	r4, 80090ea <__pow5mult+0x66>
 80090d6:	f240 2171 	movw	r1, #625	@ 0x271
 80090da:	4638      	mov	r0, r7
 80090dc:	f7ff ff1a 	bl	8008f14 <__i2b>
 80090e0:	2300      	movs	r3, #0
 80090e2:	4604      	mov	r4, r0
 80090e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80090e8:	6003      	str	r3, [r0, #0]
 80090ea:	f04f 0900 	mov.w	r9, #0
 80090ee:	07eb      	lsls	r3, r5, #31
 80090f0:	d50a      	bpl.n	8009108 <__pow5mult+0x84>
 80090f2:	4631      	mov	r1, r6
 80090f4:	4622      	mov	r2, r4
 80090f6:	4638      	mov	r0, r7
 80090f8:	f7ff ff22 	bl	8008f40 <__multiply>
 80090fc:	4680      	mov	r8, r0
 80090fe:	4631      	mov	r1, r6
 8009100:	4638      	mov	r0, r7
 8009102:	f7ff fe53 	bl	8008dac <_Bfree>
 8009106:	4646      	mov	r6, r8
 8009108:	106d      	asrs	r5, r5, #1
 800910a:	d00b      	beq.n	8009124 <__pow5mult+0xa0>
 800910c:	6820      	ldr	r0, [r4, #0]
 800910e:	b938      	cbnz	r0, 8009120 <__pow5mult+0x9c>
 8009110:	4622      	mov	r2, r4
 8009112:	4621      	mov	r1, r4
 8009114:	4638      	mov	r0, r7
 8009116:	f7ff ff13 	bl	8008f40 <__multiply>
 800911a:	6020      	str	r0, [r4, #0]
 800911c:	f8c0 9000 	str.w	r9, [r0]
 8009120:	4604      	mov	r4, r0
 8009122:	e7e4      	b.n	80090ee <__pow5mult+0x6a>
 8009124:	4630      	mov	r0, r6
 8009126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800912a:	bf00      	nop
 800912c:	0800acd0 	.word	0x0800acd0
 8009130:	0800ab9d 	.word	0x0800ab9d
 8009134:	0800ac1d 	.word	0x0800ac1d

08009138 <__lshift>:
 8009138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800913c:	460c      	mov	r4, r1
 800913e:	4607      	mov	r7, r0
 8009140:	4691      	mov	r9, r2
 8009142:	6923      	ldr	r3, [r4, #16]
 8009144:	6849      	ldr	r1, [r1, #4]
 8009146:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800914a:	68a3      	ldr	r3, [r4, #8]
 800914c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009150:	f108 0601 	add.w	r6, r8, #1
 8009154:	42b3      	cmp	r3, r6
 8009156:	db0b      	blt.n	8009170 <__lshift+0x38>
 8009158:	4638      	mov	r0, r7
 800915a:	f7ff fde7 	bl	8008d2c <_Balloc>
 800915e:	4605      	mov	r5, r0
 8009160:	b948      	cbnz	r0, 8009176 <__lshift+0x3e>
 8009162:	4602      	mov	r2, r0
 8009164:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009168:	4b27      	ldr	r3, [pc, #156]	@ (8009208 <__lshift+0xd0>)
 800916a:	4828      	ldr	r0, [pc, #160]	@ (800920c <__lshift+0xd4>)
 800916c:	f000 fb90 	bl	8009890 <__assert_func>
 8009170:	3101      	adds	r1, #1
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	e7ee      	b.n	8009154 <__lshift+0x1c>
 8009176:	2300      	movs	r3, #0
 8009178:	f100 0114 	add.w	r1, r0, #20
 800917c:	f100 0210 	add.w	r2, r0, #16
 8009180:	4618      	mov	r0, r3
 8009182:	4553      	cmp	r3, sl
 8009184:	db33      	blt.n	80091ee <__lshift+0xb6>
 8009186:	6920      	ldr	r0, [r4, #16]
 8009188:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800918c:	f104 0314 	add.w	r3, r4, #20
 8009190:	f019 091f 	ands.w	r9, r9, #31
 8009194:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009198:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800919c:	d02b      	beq.n	80091f6 <__lshift+0xbe>
 800919e:	468a      	mov	sl, r1
 80091a0:	2200      	movs	r2, #0
 80091a2:	f1c9 0e20 	rsb	lr, r9, #32
 80091a6:	6818      	ldr	r0, [r3, #0]
 80091a8:	fa00 f009 	lsl.w	r0, r0, r9
 80091ac:	4310      	orrs	r0, r2
 80091ae:	f84a 0b04 	str.w	r0, [sl], #4
 80091b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80091b6:	459c      	cmp	ip, r3
 80091b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80091bc:	d8f3      	bhi.n	80091a6 <__lshift+0x6e>
 80091be:	ebac 0304 	sub.w	r3, ip, r4
 80091c2:	3b15      	subs	r3, #21
 80091c4:	f023 0303 	bic.w	r3, r3, #3
 80091c8:	3304      	adds	r3, #4
 80091ca:	f104 0015 	add.w	r0, r4, #21
 80091ce:	4560      	cmp	r0, ip
 80091d0:	bf88      	it	hi
 80091d2:	2304      	movhi	r3, #4
 80091d4:	50ca      	str	r2, [r1, r3]
 80091d6:	b10a      	cbz	r2, 80091dc <__lshift+0xa4>
 80091d8:	f108 0602 	add.w	r6, r8, #2
 80091dc:	3e01      	subs	r6, #1
 80091de:	4638      	mov	r0, r7
 80091e0:	4621      	mov	r1, r4
 80091e2:	612e      	str	r6, [r5, #16]
 80091e4:	f7ff fde2 	bl	8008dac <_Bfree>
 80091e8:	4628      	mov	r0, r5
 80091ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80091f2:	3301      	adds	r3, #1
 80091f4:	e7c5      	b.n	8009182 <__lshift+0x4a>
 80091f6:	3904      	subs	r1, #4
 80091f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091fc:	459c      	cmp	ip, r3
 80091fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8009202:	d8f9      	bhi.n	80091f8 <__lshift+0xc0>
 8009204:	e7ea      	b.n	80091dc <__lshift+0xa4>
 8009206:	bf00      	nop
 8009208:	0800ac0c 	.word	0x0800ac0c
 800920c:	0800ac1d 	.word	0x0800ac1d

08009210 <__mcmp>:
 8009210:	4603      	mov	r3, r0
 8009212:	690a      	ldr	r2, [r1, #16]
 8009214:	6900      	ldr	r0, [r0, #16]
 8009216:	b530      	push	{r4, r5, lr}
 8009218:	1a80      	subs	r0, r0, r2
 800921a:	d10e      	bne.n	800923a <__mcmp+0x2a>
 800921c:	3314      	adds	r3, #20
 800921e:	3114      	adds	r1, #20
 8009220:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009224:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009228:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800922c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009230:	4295      	cmp	r5, r2
 8009232:	d003      	beq.n	800923c <__mcmp+0x2c>
 8009234:	d205      	bcs.n	8009242 <__mcmp+0x32>
 8009236:	f04f 30ff 	mov.w	r0, #4294967295
 800923a:	bd30      	pop	{r4, r5, pc}
 800923c:	42a3      	cmp	r3, r4
 800923e:	d3f3      	bcc.n	8009228 <__mcmp+0x18>
 8009240:	e7fb      	b.n	800923a <__mcmp+0x2a>
 8009242:	2001      	movs	r0, #1
 8009244:	e7f9      	b.n	800923a <__mcmp+0x2a>
	...

08009248 <__mdiff>:
 8009248:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924c:	4689      	mov	r9, r1
 800924e:	4606      	mov	r6, r0
 8009250:	4611      	mov	r1, r2
 8009252:	4648      	mov	r0, r9
 8009254:	4614      	mov	r4, r2
 8009256:	f7ff ffdb 	bl	8009210 <__mcmp>
 800925a:	1e05      	subs	r5, r0, #0
 800925c:	d112      	bne.n	8009284 <__mdiff+0x3c>
 800925e:	4629      	mov	r1, r5
 8009260:	4630      	mov	r0, r6
 8009262:	f7ff fd63 	bl	8008d2c <_Balloc>
 8009266:	4602      	mov	r2, r0
 8009268:	b928      	cbnz	r0, 8009276 <__mdiff+0x2e>
 800926a:	f240 2137 	movw	r1, #567	@ 0x237
 800926e:	4b3e      	ldr	r3, [pc, #248]	@ (8009368 <__mdiff+0x120>)
 8009270:	483e      	ldr	r0, [pc, #248]	@ (800936c <__mdiff+0x124>)
 8009272:	f000 fb0d 	bl	8009890 <__assert_func>
 8009276:	2301      	movs	r3, #1
 8009278:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800927c:	4610      	mov	r0, r2
 800927e:	b003      	add	sp, #12
 8009280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009284:	bfbc      	itt	lt
 8009286:	464b      	movlt	r3, r9
 8009288:	46a1      	movlt	r9, r4
 800928a:	4630      	mov	r0, r6
 800928c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009290:	bfba      	itte	lt
 8009292:	461c      	movlt	r4, r3
 8009294:	2501      	movlt	r5, #1
 8009296:	2500      	movge	r5, #0
 8009298:	f7ff fd48 	bl	8008d2c <_Balloc>
 800929c:	4602      	mov	r2, r0
 800929e:	b918      	cbnz	r0, 80092a8 <__mdiff+0x60>
 80092a0:	f240 2145 	movw	r1, #581	@ 0x245
 80092a4:	4b30      	ldr	r3, [pc, #192]	@ (8009368 <__mdiff+0x120>)
 80092a6:	e7e3      	b.n	8009270 <__mdiff+0x28>
 80092a8:	f100 0b14 	add.w	fp, r0, #20
 80092ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80092b0:	f109 0310 	add.w	r3, r9, #16
 80092b4:	60c5      	str	r5, [r0, #12]
 80092b6:	f04f 0c00 	mov.w	ip, #0
 80092ba:	f109 0514 	add.w	r5, r9, #20
 80092be:	46d9      	mov	r9, fp
 80092c0:	6926      	ldr	r6, [r4, #16]
 80092c2:	f104 0e14 	add.w	lr, r4, #20
 80092c6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80092ca:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	9b01      	ldr	r3, [sp, #4]
 80092d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80092d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80092da:	b281      	uxth	r1, r0
 80092dc:	9301      	str	r3, [sp, #4]
 80092de:	fa1f f38a 	uxth.w	r3, sl
 80092e2:	1a5b      	subs	r3, r3, r1
 80092e4:	0c00      	lsrs	r0, r0, #16
 80092e6:	4463      	add	r3, ip
 80092e8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80092ec:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80092f6:	4576      	cmp	r6, lr
 80092f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092fc:	f849 3b04 	str.w	r3, [r9], #4
 8009300:	d8e6      	bhi.n	80092d0 <__mdiff+0x88>
 8009302:	1b33      	subs	r3, r6, r4
 8009304:	3b15      	subs	r3, #21
 8009306:	f023 0303 	bic.w	r3, r3, #3
 800930a:	3415      	adds	r4, #21
 800930c:	3304      	adds	r3, #4
 800930e:	42a6      	cmp	r6, r4
 8009310:	bf38      	it	cc
 8009312:	2304      	movcc	r3, #4
 8009314:	441d      	add	r5, r3
 8009316:	445b      	add	r3, fp
 8009318:	461e      	mov	r6, r3
 800931a:	462c      	mov	r4, r5
 800931c:	4544      	cmp	r4, r8
 800931e:	d30e      	bcc.n	800933e <__mdiff+0xf6>
 8009320:	f108 0103 	add.w	r1, r8, #3
 8009324:	1b49      	subs	r1, r1, r5
 8009326:	f021 0103 	bic.w	r1, r1, #3
 800932a:	3d03      	subs	r5, #3
 800932c:	45a8      	cmp	r8, r5
 800932e:	bf38      	it	cc
 8009330:	2100      	movcc	r1, #0
 8009332:	440b      	add	r3, r1
 8009334:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009338:	b199      	cbz	r1, 8009362 <__mdiff+0x11a>
 800933a:	6117      	str	r7, [r2, #16]
 800933c:	e79e      	b.n	800927c <__mdiff+0x34>
 800933e:	46e6      	mov	lr, ip
 8009340:	f854 1b04 	ldr.w	r1, [r4], #4
 8009344:	fa1f fc81 	uxth.w	ip, r1
 8009348:	44f4      	add	ip, lr
 800934a:	0c08      	lsrs	r0, r1, #16
 800934c:	4471      	add	r1, lr
 800934e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009352:	b289      	uxth	r1, r1
 8009354:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009358:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800935c:	f846 1b04 	str.w	r1, [r6], #4
 8009360:	e7dc      	b.n	800931c <__mdiff+0xd4>
 8009362:	3f01      	subs	r7, #1
 8009364:	e7e6      	b.n	8009334 <__mdiff+0xec>
 8009366:	bf00      	nop
 8009368:	0800ac0c 	.word	0x0800ac0c
 800936c:	0800ac1d 	.word	0x0800ac1d

08009370 <__d2b>:
 8009370:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009374:	2101      	movs	r1, #1
 8009376:	4690      	mov	r8, r2
 8009378:	4699      	mov	r9, r3
 800937a:	9e08      	ldr	r6, [sp, #32]
 800937c:	f7ff fcd6 	bl	8008d2c <_Balloc>
 8009380:	4604      	mov	r4, r0
 8009382:	b930      	cbnz	r0, 8009392 <__d2b+0x22>
 8009384:	4602      	mov	r2, r0
 8009386:	f240 310f 	movw	r1, #783	@ 0x30f
 800938a:	4b23      	ldr	r3, [pc, #140]	@ (8009418 <__d2b+0xa8>)
 800938c:	4823      	ldr	r0, [pc, #140]	@ (800941c <__d2b+0xac>)
 800938e:	f000 fa7f 	bl	8009890 <__assert_func>
 8009392:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009396:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800939a:	b10d      	cbz	r5, 80093a0 <__d2b+0x30>
 800939c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093a0:	9301      	str	r3, [sp, #4]
 80093a2:	f1b8 0300 	subs.w	r3, r8, #0
 80093a6:	d024      	beq.n	80093f2 <__d2b+0x82>
 80093a8:	4668      	mov	r0, sp
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	f7ff fd85 	bl	8008eba <__lo0bits>
 80093b0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093b4:	b1d8      	cbz	r0, 80093ee <__d2b+0x7e>
 80093b6:	f1c0 0320 	rsb	r3, r0, #32
 80093ba:	fa02 f303 	lsl.w	r3, r2, r3
 80093be:	430b      	orrs	r3, r1
 80093c0:	40c2      	lsrs	r2, r0
 80093c2:	6163      	str	r3, [r4, #20]
 80093c4:	9201      	str	r2, [sp, #4]
 80093c6:	9b01      	ldr	r3, [sp, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	bf0c      	ite	eq
 80093cc:	2201      	moveq	r2, #1
 80093ce:	2202      	movne	r2, #2
 80093d0:	61a3      	str	r3, [r4, #24]
 80093d2:	6122      	str	r2, [r4, #16]
 80093d4:	b1ad      	cbz	r5, 8009402 <__d2b+0x92>
 80093d6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093da:	4405      	add	r5, r0
 80093dc:	6035      	str	r5, [r6, #0]
 80093de:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e4:	6018      	str	r0, [r3, #0]
 80093e6:	4620      	mov	r0, r4
 80093e8:	b002      	add	sp, #8
 80093ea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80093ee:	6161      	str	r1, [r4, #20]
 80093f0:	e7e9      	b.n	80093c6 <__d2b+0x56>
 80093f2:	a801      	add	r0, sp, #4
 80093f4:	f7ff fd61 	bl	8008eba <__lo0bits>
 80093f8:	9b01      	ldr	r3, [sp, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	6163      	str	r3, [r4, #20]
 80093fe:	3020      	adds	r0, #32
 8009400:	e7e7      	b.n	80093d2 <__d2b+0x62>
 8009402:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009406:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800940a:	6030      	str	r0, [r6, #0]
 800940c:	6918      	ldr	r0, [r3, #16]
 800940e:	f7ff fd35 	bl	8008e7c <__hi0bits>
 8009412:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009416:	e7e4      	b.n	80093e2 <__d2b+0x72>
 8009418:	0800ac0c 	.word	0x0800ac0c
 800941c:	0800ac1d 	.word	0x0800ac1d

08009420 <__ssputs_r>:
 8009420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009424:	461f      	mov	r7, r3
 8009426:	688e      	ldr	r6, [r1, #8]
 8009428:	4682      	mov	sl, r0
 800942a:	42be      	cmp	r6, r7
 800942c:	460c      	mov	r4, r1
 800942e:	4690      	mov	r8, r2
 8009430:	680b      	ldr	r3, [r1, #0]
 8009432:	d82d      	bhi.n	8009490 <__ssputs_r+0x70>
 8009434:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009438:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800943c:	d026      	beq.n	800948c <__ssputs_r+0x6c>
 800943e:	6965      	ldr	r5, [r4, #20]
 8009440:	6909      	ldr	r1, [r1, #16]
 8009442:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009446:	eba3 0901 	sub.w	r9, r3, r1
 800944a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800944e:	1c7b      	adds	r3, r7, #1
 8009450:	444b      	add	r3, r9
 8009452:	106d      	asrs	r5, r5, #1
 8009454:	429d      	cmp	r5, r3
 8009456:	bf38      	it	cc
 8009458:	461d      	movcc	r5, r3
 800945a:	0553      	lsls	r3, r2, #21
 800945c:	d527      	bpl.n	80094ae <__ssputs_r+0x8e>
 800945e:	4629      	mov	r1, r5
 8009460:	f7ff fbd8 	bl	8008c14 <_malloc_r>
 8009464:	4606      	mov	r6, r0
 8009466:	b360      	cbz	r0, 80094c2 <__ssputs_r+0xa2>
 8009468:	464a      	mov	r2, r9
 800946a:	6921      	ldr	r1, [r4, #16]
 800946c:	f000 fa02 	bl	8009874 <memcpy>
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800947a:	81a3      	strh	r3, [r4, #12]
 800947c:	6126      	str	r6, [r4, #16]
 800947e:	444e      	add	r6, r9
 8009480:	6026      	str	r6, [r4, #0]
 8009482:	463e      	mov	r6, r7
 8009484:	6165      	str	r5, [r4, #20]
 8009486:	eba5 0509 	sub.w	r5, r5, r9
 800948a:	60a5      	str	r5, [r4, #8]
 800948c:	42be      	cmp	r6, r7
 800948e:	d900      	bls.n	8009492 <__ssputs_r+0x72>
 8009490:	463e      	mov	r6, r7
 8009492:	4632      	mov	r2, r6
 8009494:	4641      	mov	r1, r8
 8009496:	6820      	ldr	r0, [r4, #0]
 8009498:	f000 f9c2 	bl	8009820 <memmove>
 800949c:	2000      	movs	r0, #0
 800949e:	68a3      	ldr	r3, [r4, #8]
 80094a0:	1b9b      	subs	r3, r3, r6
 80094a2:	60a3      	str	r3, [r4, #8]
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	4433      	add	r3, r6
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ae:	462a      	mov	r2, r5
 80094b0:	f000 fa32 	bl	8009918 <_realloc_r>
 80094b4:	4606      	mov	r6, r0
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d1e0      	bne.n	800947c <__ssputs_r+0x5c>
 80094ba:	4650      	mov	r0, sl
 80094bc:	6921      	ldr	r1, [r4, #16]
 80094be:	f7ff fb37 	bl	8008b30 <_free_r>
 80094c2:	230c      	movs	r3, #12
 80094c4:	f8ca 3000 	str.w	r3, [sl]
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	f04f 30ff 	mov.w	r0, #4294967295
 80094ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094d2:	81a3      	strh	r3, [r4, #12]
 80094d4:	e7e9      	b.n	80094aa <__ssputs_r+0x8a>
	...

080094d8 <_svfiprintf_r>:
 80094d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094dc:	4698      	mov	r8, r3
 80094de:	898b      	ldrh	r3, [r1, #12]
 80094e0:	4607      	mov	r7, r0
 80094e2:	061b      	lsls	r3, r3, #24
 80094e4:	460d      	mov	r5, r1
 80094e6:	4614      	mov	r4, r2
 80094e8:	b09d      	sub	sp, #116	@ 0x74
 80094ea:	d510      	bpl.n	800950e <_svfiprintf_r+0x36>
 80094ec:	690b      	ldr	r3, [r1, #16]
 80094ee:	b973      	cbnz	r3, 800950e <_svfiprintf_r+0x36>
 80094f0:	2140      	movs	r1, #64	@ 0x40
 80094f2:	f7ff fb8f 	bl	8008c14 <_malloc_r>
 80094f6:	6028      	str	r0, [r5, #0]
 80094f8:	6128      	str	r0, [r5, #16]
 80094fa:	b930      	cbnz	r0, 800950a <_svfiprintf_r+0x32>
 80094fc:	230c      	movs	r3, #12
 80094fe:	603b      	str	r3, [r7, #0]
 8009500:	f04f 30ff 	mov.w	r0, #4294967295
 8009504:	b01d      	add	sp, #116	@ 0x74
 8009506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950a:	2340      	movs	r3, #64	@ 0x40
 800950c:	616b      	str	r3, [r5, #20]
 800950e:	2300      	movs	r3, #0
 8009510:	9309      	str	r3, [sp, #36]	@ 0x24
 8009512:	2320      	movs	r3, #32
 8009514:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009518:	2330      	movs	r3, #48	@ 0x30
 800951a:	f04f 0901 	mov.w	r9, #1
 800951e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009522:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80096bc <_svfiprintf_r+0x1e4>
 8009526:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800952a:	4623      	mov	r3, r4
 800952c:	469a      	mov	sl, r3
 800952e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009532:	b10a      	cbz	r2, 8009538 <_svfiprintf_r+0x60>
 8009534:	2a25      	cmp	r2, #37	@ 0x25
 8009536:	d1f9      	bne.n	800952c <_svfiprintf_r+0x54>
 8009538:	ebba 0b04 	subs.w	fp, sl, r4
 800953c:	d00b      	beq.n	8009556 <_svfiprintf_r+0x7e>
 800953e:	465b      	mov	r3, fp
 8009540:	4622      	mov	r2, r4
 8009542:	4629      	mov	r1, r5
 8009544:	4638      	mov	r0, r7
 8009546:	f7ff ff6b 	bl	8009420 <__ssputs_r>
 800954a:	3001      	adds	r0, #1
 800954c:	f000 80a7 	beq.w	800969e <_svfiprintf_r+0x1c6>
 8009550:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009552:	445a      	add	r2, fp
 8009554:	9209      	str	r2, [sp, #36]	@ 0x24
 8009556:	f89a 3000 	ldrb.w	r3, [sl]
 800955a:	2b00      	cmp	r3, #0
 800955c:	f000 809f 	beq.w	800969e <_svfiprintf_r+0x1c6>
 8009560:	2300      	movs	r3, #0
 8009562:	f04f 32ff 	mov.w	r2, #4294967295
 8009566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800956a:	f10a 0a01 	add.w	sl, sl, #1
 800956e:	9304      	str	r3, [sp, #16]
 8009570:	9307      	str	r3, [sp, #28]
 8009572:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009576:	931a      	str	r3, [sp, #104]	@ 0x68
 8009578:	4654      	mov	r4, sl
 800957a:	2205      	movs	r2, #5
 800957c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009580:	484e      	ldr	r0, [pc, #312]	@ (80096bc <_svfiprintf_r+0x1e4>)
 8009582:	f7fe fc6a 	bl	8007e5a <memchr>
 8009586:	9a04      	ldr	r2, [sp, #16]
 8009588:	b9d8      	cbnz	r0, 80095c2 <_svfiprintf_r+0xea>
 800958a:	06d0      	lsls	r0, r2, #27
 800958c:	bf44      	itt	mi
 800958e:	2320      	movmi	r3, #32
 8009590:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009594:	0711      	lsls	r1, r2, #28
 8009596:	bf44      	itt	mi
 8009598:	232b      	movmi	r3, #43	@ 0x2b
 800959a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800959e:	f89a 3000 	ldrb.w	r3, [sl]
 80095a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80095a4:	d015      	beq.n	80095d2 <_svfiprintf_r+0xfa>
 80095a6:	4654      	mov	r4, sl
 80095a8:	2000      	movs	r0, #0
 80095aa:	f04f 0c0a 	mov.w	ip, #10
 80095ae:	9a07      	ldr	r2, [sp, #28]
 80095b0:	4621      	mov	r1, r4
 80095b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095b6:	3b30      	subs	r3, #48	@ 0x30
 80095b8:	2b09      	cmp	r3, #9
 80095ba:	d94b      	bls.n	8009654 <_svfiprintf_r+0x17c>
 80095bc:	b1b0      	cbz	r0, 80095ec <_svfiprintf_r+0x114>
 80095be:	9207      	str	r2, [sp, #28]
 80095c0:	e014      	b.n	80095ec <_svfiprintf_r+0x114>
 80095c2:	eba0 0308 	sub.w	r3, r0, r8
 80095c6:	fa09 f303 	lsl.w	r3, r9, r3
 80095ca:	4313      	orrs	r3, r2
 80095cc:	46a2      	mov	sl, r4
 80095ce:	9304      	str	r3, [sp, #16]
 80095d0:	e7d2      	b.n	8009578 <_svfiprintf_r+0xa0>
 80095d2:	9b03      	ldr	r3, [sp, #12]
 80095d4:	1d19      	adds	r1, r3, #4
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	9103      	str	r1, [sp, #12]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	bfbb      	ittet	lt
 80095de:	425b      	neglt	r3, r3
 80095e0:	f042 0202 	orrlt.w	r2, r2, #2
 80095e4:	9307      	strge	r3, [sp, #28]
 80095e6:	9307      	strlt	r3, [sp, #28]
 80095e8:	bfb8      	it	lt
 80095ea:	9204      	strlt	r2, [sp, #16]
 80095ec:	7823      	ldrb	r3, [r4, #0]
 80095ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80095f0:	d10a      	bne.n	8009608 <_svfiprintf_r+0x130>
 80095f2:	7863      	ldrb	r3, [r4, #1]
 80095f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80095f6:	d132      	bne.n	800965e <_svfiprintf_r+0x186>
 80095f8:	9b03      	ldr	r3, [sp, #12]
 80095fa:	3402      	adds	r4, #2
 80095fc:	1d1a      	adds	r2, r3, #4
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	9203      	str	r2, [sp, #12]
 8009602:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009606:	9305      	str	r3, [sp, #20]
 8009608:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80096c0 <_svfiprintf_r+0x1e8>
 800960c:	2203      	movs	r2, #3
 800960e:	4650      	mov	r0, sl
 8009610:	7821      	ldrb	r1, [r4, #0]
 8009612:	f7fe fc22 	bl	8007e5a <memchr>
 8009616:	b138      	cbz	r0, 8009628 <_svfiprintf_r+0x150>
 8009618:	2240      	movs	r2, #64	@ 0x40
 800961a:	9b04      	ldr	r3, [sp, #16]
 800961c:	eba0 000a 	sub.w	r0, r0, sl
 8009620:	4082      	lsls	r2, r0
 8009622:	4313      	orrs	r3, r2
 8009624:	3401      	adds	r4, #1
 8009626:	9304      	str	r3, [sp, #16]
 8009628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800962c:	2206      	movs	r2, #6
 800962e:	4825      	ldr	r0, [pc, #148]	@ (80096c4 <_svfiprintf_r+0x1ec>)
 8009630:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009634:	f7fe fc11 	bl	8007e5a <memchr>
 8009638:	2800      	cmp	r0, #0
 800963a:	d036      	beq.n	80096aa <_svfiprintf_r+0x1d2>
 800963c:	4b22      	ldr	r3, [pc, #136]	@ (80096c8 <_svfiprintf_r+0x1f0>)
 800963e:	bb1b      	cbnz	r3, 8009688 <_svfiprintf_r+0x1b0>
 8009640:	9b03      	ldr	r3, [sp, #12]
 8009642:	3307      	adds	r3, #7
 8009644:	f023 0307 	bic.w	r3, r3, #7
 8009648:	3308      	adds	r3, #8
 800964a:	9303      	str	r3, [sp, #12]
 800964c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800964e:	4433      	add	r3, r6
 8009650:	9309      	str	r3, [sp, #36]	@ 0x24
 8009652:	e76a      	b.n	800952a <_svfiprintf_r+0x52>
 8009654:	460c      	mov	r4, r1
 8009656:	2001      	movs	r0, #1
 8009658:	fb0c 3202 	mla	r2, ip, r2, r3
 800965c:	e7a8      	b.n	80095b0 <_svfiprintf_r+0xd8>
 800965e:	2300      	movs	r3, #0
 8009660:	f04f 0c0a 	mov.w	ip, #10
 8009664:	4619      	mov	r1, r3
 8009666:	3401      	adds	r4, #1
 8009668:	9305      	str	r3, [sp, #20]
 800966a:	4620      	mov	r0, r4
 800966c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009670:	3a30      	subs	r2, #48	@ 0x30
 8009672:	2a09      	cmp	r2, #9
 8009674:	d903      	bls.n	800967e <_svfiprintf_r+0x1a6>
 8009676:	2b00      	cmp	r3, #0
 8009678:	d0c6      	beq.n	8009608 <_svfiprintf_r+0x130>
 800967a:	9105      	str	r1, [sp, #20]
 800967c:	e7c4      	b.n	8009608 <_svfiprintf_r+0x130>
 800967e:	4604      	mov	r4, r0
 8009680:	2301      	movs	r3, #1
 8009682:	fb0c 2101 	mla	r1, ip, r1, r2
 8009686:	e7f0      	b.n	800966a <_svfiprintf_r+0x192>
 8009688:	ab03      	add	r3, sp, #12
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	462a      	mov	r2, r5
 800968e:	4638      	mov	r0, r7
 8009690:	4b0e      	ldr	r3, [pc, #56]	@ (80096cc <_svfiprintf_r+0x1f4>)
 8009692:	a904      	add	r1, sp, #16
 8009694:	f7fd fe64 	bl	8007360 <_printf_float>
 8009698:	1c42      	adds	r2, r0, #1
 800969a:	4606      	mov	r6, r0
 800969c:	d1d6      	bne.n	800964c <_svfiprintf_r+0x174>
 800969e:	89ab      	ldrh	r3, [r5, #12]
 80096a0:	065b      	lsls	r3, r3, #25
 80096a2:	f53f af2d 	bmi.w	8009500 <_svfiprintf_r+0x28>
 80096a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096a8:	e72c      	b.n	8009504 <_svfiprintf_r+0x2c>
 80096aa:	ab03      	add	r3, sp, #12
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	462a      	mov	r2, r5
 80096b0:	4638      	mov	r0, r7
 80096b2:	4b06      	ldr	r3, [pc, #24]	@ (80096cc <_svfiprintf_r+0x1f4>)
 80096b4:	a904      	add	r1, sp, #16
 80096b6:	f7fe f8f1 	bl	800789c <_printf_i>
 80096ba:	e7ed      	b.n	8009698 <_svfiprintf_r+0x1c0>
 80096bc:	0800ac76 	.word	0x0800ac76
 80096c0:	0800ac7c 	.word	0x0800ac7c
 80096c4:	0800ac80 	.word	0x0800ac80
 80096c8:	08007361 	.word	0x08007361
 80096cc:	08009421 	.word	0x08009421

080096d0 <__sflush_r>:
 80096d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d6:	0716      	lsls	r6, r2, #28
 80096d8:	4605      	mov	r5, r0
 80096da:	460c      	mov	r4, r1
 80096dc:	d454      	bmi.n	8009788 <__sflush_r+0xb8>
 80096de:	684b      	ldr	r3, [r1, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	dc02      	bgt.n	80096ea <__sflush_r+0x1a>
 80096e4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	dd48      	ble.n	800977c <__sflush_r+0xac>
 80096ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096ec:	2e00      	cmp	r6, #0
 80096ee:	d045      	beq.n	800977c <__sflush_r+0xac>
 80096f0:	2300      	movs	r3, #0
 80096f2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80096f6:	682f      	ldr	r7, [r5, #0]
 80096f8:	6a21      	ldr	r1, [r4, #32]
 80096fa:	602b      	str	r3, [r5, #0]
 80096fc:	d030      	beq.n	8009760 <__sflush_r+0x90>
 80096fe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009700:	89a3      	ldrh	r3, [r4, #12]
 8009702:	0759      	lsls	r1, r3, #29
 8009704:	d505      	bpl.n	8009712 <__sflush_r+0x42>
 8009706:	6863      	ldr	r3, [r4, #4]
 8009708:	1ad2      	subs	r2, r2, r3
 800970a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800970c:	b10b      	cbz	r3, 8009712 <__sflush_r+0x42>
 800970e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009710:	1ad2      	subs	r2, r2, r3
 8009712:	2300      	movs	r3, #0
 8009714:	4628      	mov	r0, r5
 8009716:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009718:	6a21      	ldr	r1, [r4, #32]
 800971a:	47b0      	blx	r6
 800971c:	1c43      	adds	r3, r0, #1
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	d106      	bne.n	8009730 <__sflush_r+0x60>
 8009722:	6829      	ldr	r1, [r5, #0]
 8009724:	291d      	cmp	r1, #29
 8009726:	d82b      	bhi.n	8009780 <__sflush_r+0xb0>
 8009728:	4a28      	ldr	r2, [pc, #160]	@ (80097cc <__sflush_r+0xfc>)
 800972a:	40ca      	lsrs	r2, r1
 800972c:	07d6      	lsls	r6, r2, #31
 800972e:	d527      	bpl.n	8009780 <__sflush_r+0xb0>
 8009730:	2200      	movs	r2, #0
 8009732:	6062      	str	r2, [r4, #4]
 8009734:	6922      	ldr	r2, [r4, #16]
 8009736:	04d9      	lsls	r1, r3, #19
 8009738:	6022      	str	r2, [r4, #0]
 800973a:	d504      	bpl.n	8009746 <__sflush_r+0x76>
 800973c:	1c42      	adds	r2, r0, #1
 800973e:	d101      	bne.n	8009744 <__sflush_r+0x74>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	b903      	cbnz	r3, 8009746 <__sflush_r+0x76>
 8009744:	6560      	str	r0, [r4, #84]	@ 0x54
 8009746:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009748:	602f      	str	r7, [r5, #0]
 800974a:	b1b9      	cbz	r1, 800977c <__sflush_r+0xac>
 800974c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009750:	4299      	cmp	r1, r3
 8009752:	d002      	beq.n	800975a <__sflush_r+0x8a>
 8009754:	4628      	mov	r0, r5
 8009756:	f7ff f9eb 	bl	8008b30 <_free_r>
 800975a:	2300      	movs	r3, #0
 800975c:	6363      	str	r3, [r4, #52]	@ 0x34
 800975e:	e00d      	b.n	800977c <__sflush_r+0xac>
 8009760:	2301      	movs	r3, #1
 8009762:	4628      	mov	r0, r5
 8009764:	47b0      	blx	r6
 8009766:	4602      	mov	r2, r0
 8009768:	1c50      	adds	r0, r2, #1
 800976a:	d1c9      	bne.n	8009700 <__sflush_r+0x30>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0c6      	beq.n	8009700 <__sflush_r+0x30>
 8009772:	2b1d      	cmp	r3, #29
 8009774:	d001      	beq.n	800977a <__sflush_r+0xaa>
 8009776:	2b16      	cmp	r3, #22
 8009778:	d11d      	bne.n	80097b6 <__sflush_r+0xe6>
 800977a:	602f      	str	r7, [r5, #0]
 800977c:	2000      	movs	r0, #0
 800977e:	e021      	b.n	80097c4 <__sflush_r+0xf4>
 8009780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009784:	b21b      	sxth	r3, r3
 8009786:	e01a      	b.n	80097be <__sflush_r+0xee>
 8009788:	690f      	ldr	r7, [r1, #16]
 800978a:	2f00      	cmp	r7, #0
 800978c:	d0f6      	beq.n	800977c <__sflush_r+0xac>
 800978e:	0793      	lsls	r3, r2, #30
 8009790:	bf18      	it	ne
 8009792:	2300      	movne	r3, #0
 8009794:	680e      	ldr	r6, [r1, #0]
 8009796:	bf08      	it	eq
 8009798:	694b      	ldreq	r3, [r1, #20]
 800979a:	1bf6      	subs	r6, r6, r7
 800979c:	600f      	str	r7, [r1, #0]
 800979e:	608b      	str	r3, [r1, #8]
 80097a0:	2e00      	cmp	r6, #0
 80097a2:	ddeb      	ble.n	800977c <__sflush_r+0xac>
 80097a4:	4633      	mov	r3, r6
 80097a6:	463a      	mov	r2, r7
 80097a8:	4628      	mov	r0, r5
 80097aa:	6a21      	ldr	r1, [r4, #32]
 80097ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80097b0:	47e0      	blx	ip
 80097b2:	2800      	cmp	r0, #0
 80097b4:	dc07      	bgt.n	80097c6 <__sflush_r+0xf6>
 80097b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097be:	f04f 30ff 	mov.w	r0, #4294967295
 80097c2:	81a3      	strh	r3, [r4, #12]
 80097c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097c6:	4407      	add	r7, r0
 80097c8:	1a36      	subs	r6, r6, r0
 80097ca:	e7e9      	b.n	80097a0 <__sflush_r+0xd0>
 80097cc:	20400001 	.word	0x20400001

080097d0 <_fflush_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	690b      	ldr	r3, [r1, #16]
 80097d4:	4605      	mov	r5, r0
 80097d6:	460c      	mov	r4, r1
 80097d8:	b913      	cbnz	r3, 80097e0 <_fflush_r+0x10>
 80097da:	2500      	movs	r5, #0
 80097dc:	4628      	mov	r0, r5
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	b118      	cbz	r0, 80097ea <_fflush_r+0x1a>
 80097e2:	6a03      	ldr	r3, [r0, #32]
 80097e4:	b90b      	cbnz	r3, 80097ea <_fflush_r+0x1a>
 80097e6:	f7fe fa03 	bl	8007bf0 <__sinit>
 80097ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d0f3      	beq.n	80097da <_fflush_r+0xa>
 80097f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80097f4:	07d0      	lsls	r0, r2, #31
 80097f6:	d404      	bmi.n	8009802 <_fflush_r+0x32>
 80097f8:	0599      	lsls	r1, r3, #22
 80097fa:	d402      	bmi.n	8009802 <_fflush_r+0x32>
 80097fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097fe:	f7fe fb2a 	bl	8007e56 <__retarget_lock_acquire_recursive>
 8009802:	4628      	mov	r0, r5
 8009804:	4621      	mov	r1, r4
 8009806:	f7ff ff63 	bl	80096d0 <__sflush_r>
 800980a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800980c:	4605      	mov	r5, r0
 800980e:	07da      	lsls	r2, r3, #31
 8009810:	d4e4      	bmi.n	80097dc <_fflush_r+0xc>
 8009812:	89a3      	ldrh	r3, [r4, #12]
 8009814:	059b      	lsls	r3, r3, #22
 8009816:	d4e1      	bmi.n	80097dc <_fflush_r+0xc>
 8009818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800981a:	f7fe fb1d 	bl	8007e58 <__retarget_lock_release_recursive>
 800981e:	e7dd      	b.n	80097dc <_fflush_r+0xc>

08009820 <memmove>:
 8009820:	4288      	cmp	r0, r1
 8009822:	b510      	push	{r4, lr}
 8009824:	eb01 0402 	add.w	r4, r1, r2
 8009828:	d902      	bls.n	8009830 <memmove+0x10>
 800982a:	4284      	cmp	r4, r0
 800982c:	4623      	mov	r3, r4
 800982e:	d807      	bhi.n	8009840 <memmove+0x20>
 8009830:	1e43      	subs	r3, r0, #1
 8009832:	42a1      	cmp	r1, r4
 8009834:	d008      	beq.n	8009848 <memmove+0x28>
 8009836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800983a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800983e:	e7f8      	b.n	8009832 <memmove+0x12>
 8009840:	4601      	mov	r1, r0
 8009842:	4402      	add	r2, r0
 8009844:	428a      	cmp	r2, r1
 8009846:	d100      	bne.n	800984a <memmove+0x2a>
 8009848:	bd10      	pop	{r4, pc}
 800984a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800984e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009852:	e7f7      	b.n	8009844 <memmove+0x24>

08009854 <_sbrk_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	2300      	movs	r3, #0
 8009858:	4d05      	ldr	r5, [pc, #20]	@ (8009870 <_sbrk_r+0x1c>)
 800985a:	4604      	mov	r4, r0
 800985c:	4608      	mov	r0, r1
 800985e:	602b      	str	r3, [r5, #0]
 8009860:	f7fa fdae 	bl	80043c0 <_sbrk>
 8009864:	1c43      	adds	r3, r0, #1
 8009866:	d102      	bne.n	800986e <_sbrk_r+0x1a>
 8009868:	682b      	ldr	r3, [r5, #0]
 800986a:	b103      	cbz	r3, 800986e <_sbrk_r+0x1a>
 800986c:	6023      	str	r3, [r4, #0]
 800986e:	bd38      	pop	{r3, r4, r5, pc}
 8009870:	20000738 	.word	0x20000738

08009874 <memcpy>:
 8009874:	440a      	add	r2, r1
 8009876:	4291      	cmp	r1, r2
 8009878:	f100 33ff 	add.w	r3, r0, #4294967295
 800987c:	d100      	bne.n	8009880 <memcpy+0xc>
 800987e:	4770      	bx	lr
 8009880:	b510      	push	{r4, lr}
 8009882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009886:	4291      	cmp	r1, r2
 8009888:	f803 4f01 	strb.w	r4, [r3, #1]!
 800988c:	d1f9      	bne.n	8009882 <memcpy+0xe>
 800988e:	bd10      	pop	{r4, pc}

08009890 <__assert_func>:
 8009890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009892:	4614      	mov	r4, r2
 8009894:	461a      	mov	r2, r3
 8009896:	4b09      	ldr	r3, [pc, #36]	@ (80098bc <__assert_func+0x2c>)
 8009898:	4605      	mov	r5, r0
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68d8      	ldr	r0, [r3, #12]
 800989e:	b14c      	cbz	r4, 80098b4 <__assert_func+0x24>
 80098a0:	4b07      	ldr	r3, [pc, #28]	@ (80098c0 <__assert_func+0x30>)
 80098a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098a6:	9100      	str	r1, [sp, #0]
 80098a8:	462b      	mov	r3, r5
 80098aa:	4906      	ldr	r1, [pc, #24]	@ (80098c4 <__assert_func+0x34>)
 80098ac:	f000 f870 	bl	8009990 <fiprintf>
 80098b0:	f000 f880 	bl	80099b4 <abort>
 80098b4:	4b04      	ldr	r3, [pc, #16]	@ (80098c8 <__assert_func+0x38>)
 80098b6:	461c      	mov	r4, r3
 80098b8:	e7f3      	b.n	80098a2 <__assert_func+0x12>
 80098ba:	bf00      	nop
 80098bc:	20000038 	.word	0x20000038
 80098c0:	0800ac91 	.word	0x0800ac91
 80098c4:	0800ac9e 	.word	0x0800ac9e
 80098c8:	0800accc 	.word	0x0800accc

080098cc <_calloc_r>:
 80098cc:	b570      	push	{r4, r5, r6, lr}
 80098ce:	fba1 5402 	umull	r5, r4, r1, r2
 80098d2:	b934      	cbnz	r4, 80098e2 <_calloc_r+0x16>
 80098d4:	4629      	mov	r1, r5
 80098d6:	f7ff f99d 	bl	8008c14 <_malloc_r>
 80098da:	4606      	mov	r6, r0
 80098dc:	b928      	cbnz	r0, 80098ea <_calloc_r+0x1e>
 80098de:	4630      	mov	r0, r6
 80098e0:	bd70      	pop	{r4, r5, r6, pc}
 80098e2:	220c      	movs	r2, #12
 80098e4:	2600      	movs	r6, #0
 80098e6:	6002      	str	r2, [r0, #0]
 80098e8:	e7f9      	b.n	80098de <_calloc_r+0x12>
 80098ea:	462a      	mov	r2, r5
 80098ec:	4621      	mov	r1, r4
 80098ee:	f7fe fa35 	bl	8007d5c <memset>
 80098f2:	e7f4      	b.n	80098de <_calloc_r+0x12>

080098f4 <__ascii_mbtowc>:
 80098f4:	b082      	sub	sp, #8
 80098f6:	b901      	cbnz	r1, 80098fa <__ascii_mbtowc+0x6>
 80098f8:	a901      	add	r1, sp, #4
 80098fa:	b142      	cbz	r2, 800990e <__ascii_mbtowc+0x1a>
 80098fc:	b14b      	cbz	r3, 8009912 <__ascii_mbtowc+0x1e>
 80098fe:	7813      	ldrb	r3, [r2, #0]
 8009900:	600b      	str	r3, [r1, #0]
 8009902:	7812      	ldrb	r2, [r2, #0]
 8009904:	1e10      	subs	r0, r2, #0
 8009906:	bf18      	it	ne
 8009908:	2001      	movne	r0, #1
 800990a:	b002      	add	sp, #8
 800990c:	4770      	bx	lr
 800990e:	4610      	mov	r0, r2
 8009910:	e7fb      	b.n	800990a <__ascii_mbtowc+0x16>
 8009912:	f06f 0001 	mvn.w	r0, #1
 8009916:	e7f8      	b.n	800990a <__ascii_mbtowc+0x16>

08009918 <_realloc_r>:
 8009918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800991c:	4607      	mov	r7, r0
 800991e:	4614      	mov	r4, r2
 8009920:	460d      	mov	r5, r1
 8009922:	b921      	cbnz	r1, 800992e <_realloc_r+0x16>
 8009924:	4611      	mov	r1, r2
 8009926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800992a:	f7ff b973 	b.w	8008c14 <_malloc_r>
 800992e:	b92a      	cbnz	r2, 800993c <_realloc_r+0x24>
 8009930:	f7ff f8fe 	bl	8008b30 <_free_r>
 8009934:	4625      	mov	r5, r4
 8009936:	4628      	mov	r0, r5
 8009938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800993c:	f000 f841 	bl	80099c2 <_malloc_usable_size_r>
 8009940:	4284      	cmp	r4, r0
 8009942:	4606      	mov	r6, r0
 8009944:	d802      	bhi.n	800994c <_realloc_r+0x34>
 8009946:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800994a:	d8f4      	bhi.n	8009936 <_realloc_r+0x1e>
 800994c:	4621      	mov	r1, r4
 800994e:	4638      	mov	r0, r7
 8009950:	f7ff f960 	bl	8008c14 <_malloc_r>
 8009954:	4680      	mov	r8, r0
 8009956:	b908      	cbnz	r0, 800995c <_realloc_r+0x44>
 8009958:	4645      	mov	r5, r8
 800995a:	e7ec      	b.n	8009936 <_realloc_r+0x1e>
 800995c:	42b4      	cmp	r4, r6
 800995e:	4622      	mov	r2, r4
 8009960:	4629      	mov	r1, r5
 8009962:	bf28      	it	cs
 8009964:	4632      	movcs	r2, r6
 8009966:	f7ff ff85 	bl	8009874 <memcpy>
 800996a:	4629      	mov	r1, r5
 800996c:	4638      	mov	r0, r7
 800996e:	f7ff f8df 	bl	8008b30 <_free_r>
 8009972:	e7f1      	b.n	8009958 <_realloc_r+0x40>

08009974 <__ascii_wctomb>:
 8009974:	4603      	mov	r3, r0
 8009976:	4608      	mov	r0, r1
 8009978:	b141      	cbz	r1, 800998c <__ascii_wctomb+0x18>
 800997a:	2aff      	cmp	r2, #255	@ 0xff
 800997c:	d904      	bls.n	8009988 <__ascii_wctomb+0x14>
 800997e:	228a      	movs	r2, #138	@ 0x8a
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	601a      	str	r2, [r3, #0]
 8009986:	4770      	bx	lr
 8009988:	2001      	movs	r0, #1
 800998a:	700a      	strb	r2, [r1, #0]
 800998c:	4770      	bx	lr
	...

08009990 <fiprintf>:
 8009990:	b40e      	push	{r1, r2, r3}
 8009992:	b503      	push	{r0, r1, lr}
 8009994:	4601      	mov	r1, r0
 8009996:	ab03      	add	r3, sp, #12
 8009998:	4805      	ldr	r0, [pc, #20]	@ (80099b0 <fiprintf+0x20>)
 800999a:	f853 2b04 	ldr.w	r2, [r3], #4
 800999e:	6800      	ldr	r0, [r0, #0]
 80099a0:	9301      	str	r3, [sp, #4]
 80099a2:	f000 f83d 	bl	8009a20 <_vfiprintf_r>
 80099a6:	b002      	add	sp, #8
 80099a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80099ac:	b003      	add	sp, #12
 80099ae:	4770      	bx	lr
 80099b0:	20000038 	.word	0x20000038

080099b4 <abort>:
 80099b4:	2006      	movs	r0, #6
 80099b6:	b508      	push	{r3, lr}
 80099b8:	f000 fa06 	bl	8009dc8 <raise>
 80099bc:	2001      	movs	r0, #1
 80099be:	f7fa fc8a 	bl	80042d6 <_exit>

080099c2 <_malloc_usable_size_r>:
 80099c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099c6:	1f18      	subs	r0, r3, #4
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	bfbc      	itt	lt
 80099cc:	580b      	ldrlt	r3, [r1, r0]
 80099ce:	18c0      	addlt	r0, r0, r3
 80099d0:	4770      	bx	lr

080099d2 <__sfputc_r>:
 80099d2:	6893      	ldr	r3, [r2, #8]
 80099d4:	b410      	push	{r4}
 80099d6:	3b01      	subs	r3, #1
 80099d8:	2b00      	cmp	r3, #0
 80099da:	6093      	str	r3, [r2, #8]
 80099dc:	da07      	bge.n	80099ee <__sfputc_r+0x1c>
 80099de:	6994      	ldr	r4, [r2, #24]
 80099e0:	42a3      	cmp	r3, r4
 80099e2:	db01      	blt.n	80099e8 <__sfputc_r+0x16>
 80099e4:	290a      	cmp	r1, #10
 80099e6:	d102      	bne.n	80099ee <__sfputc_r+0x1c>
 80099e8:	bc10      	pop	{r4}
 80099ea:	f000 b931 	b.w	8009c50 <__swbuf_r>
 80099ee:	6813      	ldr	r3, [r2, #0]
 80099f0:	1c58      	adds	r0, r3, #1
 80099f2:	6010      	str	r0, [r2, #0]
 80099f4:	7019      	strb	r1, [r3, #0]
 80099f6:	4608      	mov	r0, r1
 80099f8:	bc10      	pop	{r4}
 80099fa:	4770      	bx	lr

080099fc <__sfputs_r>:
 80099fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fe:	4606      	mov	r6, r0
 8009a00:	460f      	mov	r7, r1
 8009a02:	4614      	mov	r4, r2
 8009a04:	18d5      	adds	r5, r2, r3
 8009a06:	42ac      	cmp	r4, r5
 8009a08:	d101      	bne.n	8009a0e <__sfputs_r+0x12>
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	e007      	b.n	8009a1e <__sfputs_r+0x22>
 8009a0e:	463a      	mov	r2, r7
 8009a10:	4630      	mov	r0, r6
 8009a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a16:	f7ff ffdc 	bl	80099d2 <__sfputc_r>
 8009a1a:	1c43      	adds	r3, r0, #1
 8009a1c:	d1f3      	bne.n	8009a06 <__sfputs_r+0xa>
 8009a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a20 <_vfiprintf_r>:
 8009a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a24:	460d      	mov	r5, r1
 8009a26:	4614      	mov	r4, r2
 8009a28:	4698      	mov	r8, r3
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	b09d      	sub	sp, #116	@ 0x74
 8009a2e:	b118      	cbz	r0, 8009a38 <_vfiprintf_r+0x18>
 8009a30:	6a03      	ldr	r3, [r0, #32]
 8009a32:	b90b      	cbnz	r3, 8009a38 <_vfiprintf_r+0x18>
 8009a34:	f7fe f8dc 	bl	8007bf0 <__sinit>
 8009a38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a3a:	07d9      	lsls	r1, r3, #31
 8009a3c:	d405      	bmi.n	8009a4a <_vfiprintf_r+0x2a>
 8009a3e:	89ab      	ldrh	r3, [r5, #12]
 8009a40:	059a      	lsls	r2, r3, #22
 8009a42:	d402      	bmi.n	8009a4a <_vfiprintf_r+0x2a>
 8009a44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a46:	f7fe fa06 	bl	8007e56 <__retarget_lock_acquire_recursive>
 8009a4a:	89ab      	ldrh	r3, [r5, #12]
 8009a4c:	071b      	lsls	r3, r3, #28
 8009a4e:	d501      	bpl.n	8009a54 <_vfiprintf_r+0x34>
 8009a50:	692b      	ldr	r3, [r5, #16]
 8009a52:	b99b      	cbnz	r3, 8009a7c <_vfiprintf_r+0x5c>
 8009a54:	4629      	mov	r1, r5
 8009a56:	4630      	mov	r0, r6
 8009a58:	f000 f938 	bl	8009ccc <__swsetup_r>
 8009a5c:	b170      	cbz	r0, 8009a7c <_vfiprintf_r+0x5c>
 8009a5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a60:	07dc      	lsls	r4, r3, #31
 8009a62:	d504      	bpl.n	8009a6e <_vfiprintf_r+0x4e>
 8009a64:	f04f 30ff 	mov.w	r0, #4294967295
 8009a68:	b01d      	add	sp, #116	@ 0x74
 8009a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a6e:	89ab      	ldrh	r3, [r5, #12]
 8009a70:	0598      	lsls	r0, r3, #22
 8009a72:	d4f7      	bmi.n	8009a64 <_vfiprintf_r+0x44>
 8009a74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a76:	f7fe f9ef 	bl	8007e58 <__retarget_lock_release_recursive>
 8009a7a:	e7f3      	b.n	8009a64 <_vfiprintf_r+0x44>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a80:	2320      	movs	r3, #32
 8009a82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a86:	2330      	movs	r3, #48	@ 0x30
 8009a88:	f04f 0901 	mov.w	r9, #1
 8009a8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a90:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009c3c <_vfiprintf_r+0x21c>
 8009a94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a98:	4623      	mov	r3, r4
 8009a9a:	469a      	mov	sl, r3
 8009a9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aa0:	b10a      	cbz	r2, 8009aa6 <_vfiprintf_r+0x86>
 8009aa2:	2a25      	cmp	r2, #37	@ 0x25
 8009aa4:	d1f9      	bne.n	8009a9a <_vfiprintf_r+0x7a>
 8009aa6:	ebba 0b04 	subs.w	fp, sl, r4
 8009aaa:	d00b      	beq.n	8009ac4 <_vfiprintf_r+0xa4>
 8009aac:	465b      	mov	r3, fp
 8009aae:	4622      	mov	r2, r4
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f7ff ffa2 	bl	80099fc <__sfputs_r>
 8009ab8:	3001      	adds	r0, #1
 8009aba:	f000 80a7 	beq.w	8009c0c <_vfiprintf_r+0x1ec>
 8009abe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ac0:	445a      	add	r2, fp
 8009ac2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 809f 	beq.w	8009c0c <_vfiprintf_r+0x1ec>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ad8:	f10a 0a01 	add.w	sl, sl, #1
 8009adc:	9304      	str	r3, [sp, #16]
 8009ade:	9307      	str	r3, [sp, #28]
 8009ae0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ae4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ae6:	4654      	mov	r4, sl
 8009ae8:	2205      	movs	r2, #5
 8009aea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aee:	4853      	ldr	r0, [pc, #332]	@ (8009c3c <_vfiprintf_r+0x21c>)
 8009af0:	f7fe f9b3 	bl	8007e5a <memchr>
 8009af4:	9a04      	ldr	r2, [sp, #16]
 8009af6:	b9d8      	cbnz	r0, 8009b30 <_vfiprintf_r+0x110>
 8009af8:	06d1      	lsls	r1, r2, #27
 8009afa:	bf44      	itt	mi
 8009afc:	2320      	movmi	r3, #32
 8009afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b02:	0713      	lsls	r3, r2, #28
 8009b04:	bf44      	itt	mi
 8009b06:	232b      	movmi	r3, #43	@ 0x2b
 8009b08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b10:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b12:	d015      	beq.n	8009b40 <_vfiprintf_r+0x120>
 8009b14:	4654      	mov	r4, sl
 8009b16:	2000      	movs	r0, #0
 8009b18:	f04f 0c0a 	mov.w	ip, #10
 8009b1c:	9a07      	ldr	r2, [sp, #28]
 8009b1e:	4621      	mov	r1, r4
 8009b20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b24:	3b30      	subs	r3, #48	@ 0x30
 8009b26:	2b09      	cmp	r3, #9
 8009b28:	d94b      	bls.n	8009bc2 <_vfiprintf_r+0x1a2>
 8009b2a:	b1b0      	cbz	r0, 8009b5a <_vfiprintf_r+0x13a>
 8009b2c:	9207      	str	r2, [sp, #28]
 8009b2e:	e014      	b.n	8009b5a <_vfiprintf_r+0x13a>
 8009b30:	eba0 0308 	sub.w	r3, r0, r8
 8009b34:	fa09 f303 	lsl.w	r3, r9, r3
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	46a2      	mov	sl, r4
 8009b3c:	9304      	str	r3, [sp, #16]
 8009b3e:	e7d2      	b.n	8009ae6 <_vfiprintf_r+0xc6>
 8009b40:	9b03      	ldr	r3, [sp, #12]
 8009b42:	1d19      	adds	r1, r3, #4
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	9103      	str	r1, [sp, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	bfbb      	ittet	lt
 8009b4c:	425b      	neglt	r3, r3
 8009b4e:	f042 0202 	orrlt.w	r2, r2, #2
 8009b52:	9307      	strge	r3, [sp, #28]
 8009b54:	9307      	strlt	r3, [sp, #28]
 8009b56:	bfb8      	it	lt
 8009b58:	9204      	strlt	r2, [sp, #16]
 8009b5a:	7823      	ldrb	r3, [r4, #0]
 8009b5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b5e:	d10a      	bne.n	8009b76 <_vfiprintf_r+0x156>
 8009b60:	7863      	ldrb	r3, [r4, #1]
 8009b62:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b64:	d132      	bne.n	8009bcc <_vfiprintf_r+0x1ac>
 8009b66:	9b03      	ldr	r3, [sp, #12]
 8009b68:	3402      	adds	r4, #2
 8009b6a:	1d1a      	adds	r2, r3, #4
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	9203      	str	r2, [sp, #12]
 8009b70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b74:	9305      	str	r3, [sp, #20]
 8009b76:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009c40 <_vfiprintf_r+0x220>
 8009b7a:	2203      	movs	r2, #3
 8009b7c:	4650      	mov	r0, sl
 8009b7e:	7821      	ldrb	r1, [r4, #0]
 8009b80:	f7fe f96b 	bl	8007e5a <memchr>
 8009b84:	b138      	cbz	r0, 8009b96 <_vfiprintf_r+0x176>
 8009b86:	2240      	movs	r2, #64	@ 0x40
 8009b88:	9b04      	ldr	r3, [sp, #16]
 8009b8a:	eba0 000a 	sub.w	r0, r0, sl
 8009b8e:	4082      	lsls	r2, r0
 8009b90:	4313      	orrs	r3, r2
 8009b92:	3401      	adds	r4, #1
 8009b94:	9304      	str	r3, [sp, #16]
 8009b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b9a:	2206      	movs	r2, #6
 8009b9c:	4829      	ldr	r0, [pc, #164]	@ (8009c44 <_vfiprintf_r+0x224>)
 8009b9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ba2:	f7fe f95a 	bl	8007e5a <memchr>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d03f      	beq.n	8009c2a <_vfiprintf_r+0x20a>
 8009baa:	4b27      	ldr	r3, [pc, #156]	@ (8009c48 <_vfiprintf_r+0x228>)
 8009bac:	bb1b      	cbnz	r3, 8009bf6 <_vfiprintf_r+0x1d6>
 8009bae:	9b03      	ldr	r3, [sp, #12]
 8009bb0:	3307      	adds	r3, #7
 8009bb2:	f023 0307 	bic.w	r3, r3, #7
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	9303      	str	r3, [sp, #12]
 8009bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bbc:	443b      	add	r3, r7
 8009bbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bc0:	e76a      	b.n	8009a98 <_vfiprintf_r+0x78>
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	2001      	movs	r0, #1
 8009bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bca:	e7a8      	b.n	8009b1e <_vfiprintf_r+0xfe>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f04f 0c0a 	mov.w	ip, #10
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	3401      	adds	r4, #1
 8009bd6:	9305      	str	r3, [sp, #20]
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bde:	3a30      	subs	r2, #48	@ 0x30
 8009be0:	2a09      	cmp	r2, #9
 8009be2:	d903      	bls.n	8009bec <_vfiprintf_r+0x1cc>
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d0c6      	beq.n	8009b76 <_vfiprintf_r+0x156>
 8009be8:	9105      	str	r1, [sp, #20]
 8009bea:	e7c4      	b.n	8009b76 <_vfiprintf_r+0x156>
 8009bec:	4604      	mov	r4, r0
 8009bee:	2301      	movs	r3, #1
 8009bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bf4:	e7f0      	b.n	8009bd8 <_vfiprintf_r+0x1b8>
 8009bf6:	ab03      	add	r3, sp, #12
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	462a      	mov	r2, r5
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	4b13      	ldr	r3, [pc, #76]	@ (8009c4c <_vfiprintf_r+0x22c>)
 8009c00:	a904      	add	r1, sp, #16
 8009c02:	f7fd fbad 	bl	8007360 <_printf_float>
 8009c06:	4607      	mov	r7, r0
 8009c08:	1c78      	adds	r0, r7, #1
 8009c0a:	d1d6      	bne.n	8009bba <_vfiprintf_r+0x19a>
 8009c0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c0e:	07d9      	lsls	r1, r3, #31
 8009c10:	d405      	bmi.n	8009c1e <_vfiprintf_r+0x1fe>
 8009c12:	89ab      	ldrh	r3, [r5, #12]
 8009c14:	059a      	lsls	r2, r3, #22
 8009c16:	d402      	bmi.n	8009c1e <_vfiprintf_r+0x1fe>
 8009c18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c1a:	f7fe f91d 	bl	8007e58 <__retarget_lock_release_recursive>
 8009c1e:	89ab      	ldrh	r3, [r5, #12]
 8009c20:	065b      	lsls	r3, r3, #25
 8009c22:	f53f af1f 	bmi.w	8009a64 <_vfiprintf_r+0x44>
 8009c26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c28:	e71e      	b.n	8009a68 <_vfiprintf_r+0x48>
 8009c2a:	ab03      	add	r3, sp, #12
 8009c2c:	9300      	str	r3, [sp, #0]
 8009c2e:	462a      	mov	r2, r5
 8009c30:	4630      	mov	r0, r6
 8009c32:	4b06      	ldr	r3, [pc, #24]	@ (8009c4c <_vfiprintf_r+0x22c>)
 8009c34:	a904      	add	r1, sp, #16
 8009c36:	f7fd fe31 	bl	800789c <_printf_i>
 8009c3a:	e7e4      	b.n	8009c06 <_vfiprintf_r+0x1e6>
 8009c3c:	0800ac76 	.word	0x0800ac76
 8009c40:	0800ac7c 	.word	0x0800ac7c
 8009c44:	0800ac80 	.word	0x0800ac80
 8009c48:	08007361 	.word	0x08007361
 8009c4c:	080099fd 	.word	0x080099fd

08009c50 <__swbuf_r>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	460e      	mov	r6, r1
 8009c54:	4614      	mov	r4, r2
 8009c56:	4605      	mov	r5, r0
 8009c58:	b118      	cbz	r0, 8009c62 <__swbuf_r+0x12>
 8009c5a:	6a03      	ldr	r3, [r0, #32]
 8009c5c:	b90b      	cbnz	r3, 8009c62 <__swbuf_r+0x12>
 8009c5e:	f7fd ffc7 	bl	8007bf0 <__sinit>
 8009c62:	69a3      	ldr	r3, [r4, #24]
 8009c64:	60a3      	str	r3, [r4, #8]
 8009c66:	89a3      	ldrh	r3, [r4, #12]
 8009c68:	071a      	lsls	r2, r3, #28
 8009c6a:	d501      	bpl.n	8009c70 <__swbuf_r+0x20>
 8009c6c:	6923      	ldr	r3, [r4, #16]
 8009c6e:	b943      	cbnz	r3, 8009c82 <__swbuf_r+0x32>
 8009c70:	4621      	mov	r1, r4
 8009c72:	4628      	mov	r0, r5
 8009c74:	f000 f82a 	bl	8009ccc <__swsetup_r>
 8009c78:	b118      	cbz	r0, 8009c82 <__swbuf_r+0x32>
 8009c7a:	f04f 37ff 	mov.w	r7, #4294967295
 8009c7e:	4638      	mov	r0, r7
 8009c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c82:	6823      	ldr	r3, [r4, #0]
 8009c84:	6922      	ldr	r2, [r4, #16]
 8009c86:	b2f6      	uxtb	r6, r6
 8009c88:	1a98      	subs	r0, r3, r2
 8009c8a:	6963      	ldr	r3, [r4, #20]
 8009c8c:	4637      	mov	r7, r6
 8009c8e:	4283      	cmp	r3, r0
 8009c90:	dc05      	bgt.n	8009c9e <__swbuf_r+0x4e>
 8009c92:	4621      	mov	r1, r4
 8009c94:	4628      	mov	r0, r5
 8009c96:	f7ff fd9b 	bl	80097d0 <_fflush_r>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	d1ed      	bne.n	8009c7a <__swbuf_r+0x2a>
 8009c9e:	68a3      	ldr	r3, [r4, #8]
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	60a3      	str	r3, [r4, #8]
 8009ca4:	6823      	ldr	r3, [r4, #0]
 8009ca6:	1c5a      	adds	r2, r3, #1
 8009ca8:	6022      	str	r2, [r4, #0]
 8009caa:	701e      	strb	r6, [r3, #0]
 8009cac:	6962      	ldr	r2, [r4, #20]
 8009cae:	1c43      	adds	r3, r0, #1
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d004      	beq.n	8009cbe <__swbuf_r+0x6e>
 8009cb4:	89a3      	ldrh	r3, [r4, #12]
 8009cb6:	07db      	lsls	r3, r3, #31
 8009cb8:	d5e1      	bpl.n	8009c7e <__swbuf_r+0x2e>
 8009cba:	2e0a      	cmp	r6, #10
 8009cbc:	d1df      	bne.n	8009c7e <__swbuf_r+0x2e>
 8009cbe:	4621      	mov	r1, r4
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	f7ff fd85 	bl	80097d0 <_fflush_r>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d0d9      	beq.n	8009c7e <__swbuf_r+0x2e>
 8009cca:	e7d6      	b.n	8009c7a <__swbuf_r+0x2a>

08009ccc <__swsetup_r>:
 8009ccc:	b538      	push	{r3, r4, r5, lr}
 8009cce:	4b29      	ldr	r3, [pc, #164]	@ (8009d74 <__swsetup_r+0xa8>)
 8009cd0:	4605      	mov	r5, r0
 8009cd2:	6818      	ldr	r0, [r3, #0]
 8009cd4:	460c      	mov	r4, r1
 8009cd6:	b118      	cbz	r0, 8009ce0 <__swsetup_r+0x14>
 8009cd8:	6a03      	ldr	r3, [r0, #32]
 8009cda:	b90b      	cbnz	r3, 8009ce0 <__swsetup_r+0x14>
 8009cdc:	f7fd ff88 	bl	8007bf0 <__sinit>
 8009ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ce4:	0719      	lsls	r1, r3, #28
 8009ce6:	d422      	bmi.n	8009d2e <__swsetup_r+0x62>
 8009ce8:	06da      	lsls	r2, r3, #27
 8009cea:	d407      	bmi.n	8009cfc <__swsetup_r+0x30>
 8009cec:	2209      	movs	r2, #9
 8009cee:	602a      	str	r2, [r5, #0]
 8009cf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf8:	81a3      	strh	r3, [r4, #12]
 8009cfa:	e033      	b.n	8009d64 <__swsetup_r+0x98>
 8009cfc:	0758      	lsls	r0, r3, #29
 8009cfe:	d512      	bpl.n	8009d26 <__swsetup_r+0x5a>
 8009d00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d02:	b141      	cbz	r1, 8009d16 <__swsetup_r+0x4a>
 8009d04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d08:	4299      	cmp	r1, r3
 8009d0a:	d002      	beq.n	8009d12 <__swsetup_r+0x46>
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	f7fe ff0f 	bl	8008b30 <_free_r>
 8009d12:	2300      	movs	r3, #0
 8009d14:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009d1c:	81a3      	strh	r3, [r4, #12]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	6063      	str	r3, [r4, #4]
 8009d22:	6923      	ldr	r3, [r4, #16]
 8009d24:	6023      	str	r3, [r4, #0]
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	f043 0308 	orr.w	r3, r3, #8
 8009d2c:	81a3      	strh	r3, [r4, #12]
 8009d2e:	6923      	ldr	r3, [r4, #16]
 8009d30:	b94b      	cbnz	r3, 8009d46 <__swsetup_r+0x7a>
 8009d32:	89a3      	ldrh	r3, [r4, #12]
 8009d34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d3c:	d003      	beq.n	8009d46 <__swsetup_r+0x7a>
 8009d3e:	4621      	mov	r1, r4
 8009d40:	4628      	mov	r0, r5
 8009d42:	f000 f882 	bl	8009e4a <__smakebuf_r>
 8009d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d4a:	f013 0201 	ands.w	r2, r3, #1
 8009d4e:	d00a      	beq.n	8009d66 <__swsetup_r+0x9a>
 8009d50:	2200      	movs	r2, #0
 8009d52:	60a2      	str	r2, [r4, #8]
 8009d54:	6962      	ldr	r2, [r4, #20]
 8009d56:	4252      	negs	r2, r2
 8009d58:	61a2      	str	r2, [r4, #24]
 8009d5a:	6922      	ldr	r2, [r4, #16]
 8009d5c:	b942      	cbnz	r2, 8009d70 <__swsetup_r+0xa4>
 8009d5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009d62:	d1c5      	bne.n	8009cf0 <__swsetup_r+0x24>
 8009d64:	bd38      	pop	{r3, r4, r5, pc}
 8009d66:	0799      	lsls	r1, r3, #30
 8009d68:	bf58      	it	pl
 8009d6a:	6962      	ldrpl	r2, [r4, #20]
 8009d6c:	60a2      	str	r2, [r4, #8]
 8009d6e:	e7f4      	b.n	8009d5a <__swsetup_r+0x8e>
 8009d70:	2000      	movs	r0, #0
 8009d72:	e7f7      	b.n	8009d64 <__swsetup_r+0x98>
 8009d74:	20000038 	.word	0x20000038

08009d78 <_raise_r>:
 8009d78:	291f      	cmp	r1, #31
 8009d7a:	b538      	push	{r3, r4, r5, lr}
 8009d7c:	4605      	mov	r5, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	d904      	bls.n	8009d8c <_raise_r+0x14>
 8009d82:	2316      	movs	r3, #22
 8009d84:	6003      	str	r3, [r0, #0]
 8009d86:	f04f 30ff 	mov.w	r0, #4294967295
 8009d8a:	bd38      	pop	{r3, r4, r5, pc}
 8009d8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009d8e:	b112      	cbz	r2, 8009d96 <_raise_r+0x1e>
 8009d90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d94:	b94b      	cbnz	r3, 8009daa <_raise_r+0x32>
 8009d96:	4628      	mov	r0, r5
 8009d98:	f000 f830 	bl	8009dfc <_getpid_r>
 8009d9c:	4622      	mov	r2, r4
 8009d9e:	4601      	mov	r1, r0
 8009da0:	4628      	mov	r0, r5
 8009da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009da6:	f000 b817 	b.w	8009dd8 <_kill_r>
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d00a      	beq.n	8009dc4 <_raise_r+0x4c>
 8009dae:	1c59      	adds	r1, r3, #1
 8009db0:	d103      	bne.n	8009dba <_raise_r+0x42>
 8009db2:	2316      	movs	r3, #22
 8009db4:	6003      	str	r3, [r0, #0]
 8009db6:	2001      	movs	r0, #1
 8009db8:	e7e7      	b.n	8009d8a <_raise_r+0x12>
 8009dba:	2100      	movs	r1, #0
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009dc2:	4798      	blx	r3
 8009dc4:	2000      	movs	r0, #0
 8009dc6:	e7e0      	b.n	8009d8a <_raise_r+0x12>

08009dc8 <raise>:
 8009dc8:	4b02      	ldr	r3, [pc, #8]	@ (8009dd4 <raise+0xc>)
 8009dca:	4601      	mov	r1, r0
 8009dcc:	6818      	ldr	r0, [r3, #0]
 8009dce:	f7ff bfd3 	b.w	8009d78 <_raise_r>
 8009dd2:	bf00      	nop
 8009dd4:	20000038 	.word	0x20000038

08009dd8 <_kill_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4d06      	ldr	r5, [pc, #24]	@ (8009df8 <_kill_r+0x20>)
 8009dde:	4604      	mov	r4, r0
 8009de0:	4608      	mov	r0, r1
 8009de2:	4611      	mov	r1, r2
 8009de4:	602b      	str	r3, [r5, #0]
 8009de6:	f7fa fa66 	bl	80042b6 <_kill>
 8009dea:	1c43      	adds	r3, r0, #1
 8009dec:	d102      	bne.n	8009df4 <_kill_r+0x1c>
 8009dee:	682b      	ldr	r3, [r5, #0]
 8009df0:	b103      	cbz	r3, 8009df4 <_kill_r+0x1c>
 8009df2:	6023      	str	r3, [r4, #0]
 8009df4:	bd38      	pop	{r3, r4, r5, pc}
 8009df6:	bf00      	nop
 8009df8:	20000738 	.word	0x20000738

08009dfc <_getpid_r>:
 8009dfc:	f7fa ba54 	b.w	80042a8 <_getpid>

08009e00 <__swhatbuf_r>:
 8009e00:	b570      	push	{r4, r5, r6, lr}
 8009e02:	460c      	mov	r4, r1
 8009e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e08:	4615      	mov	r5, r2
 8009e0a:	2900      	cmp	r1, #0
 8009e0c:	461e      	mov	r6, r3
 8009e0e:	b096      	sub	sp, #88	@ 0x58
 8009e10:	da0c      	bge.n	8009e2c <__swhatbuf_r+0x2c>
 8009e12:	89a3      	ldrh	r3, [r4, #12]
 8009e14:	2100      	movs	r1, #0
 8009e16:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e1a:	bf14      	ite	ne
 8009e1c:	2340      	movne	r3, #64	@ 0x40
 8009e1e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e22:	2000      	movs	r0, #0
 8009e24:	6031      	str	r1, [r6, #0]
 8009e26:	602b      	str	r3, [r5, #0]
 8009e28:	b016      	add	sp, #88	@ 0x58
 8009e2a:	bd70      	pop	{r4, r5, r6, pc}
 8009e2c:	466a      	mov	r2, sp
 8009e2e:	f000 f849 	bl	8009ec4 <_fstat_r>
 8009e32:	2800      	cmp	r0, #0
 8009e34:	dbed      	blt.n	8009e12 <__swhatbuf_r+0x12>
 8009e36:	9901      	ldr	r1, [sp, #4]
 8009e38:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e3c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e40:	4259      	negs	r1, r3
 8009e42:	4159      	adcs	r1, r3
 8009e44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e48:	e7eb      	b.n	8009e22 <__swhatbuf_r+0x22>

08009e4a <__smakebuf_r>:
 8009e4a:	898b      	ldrh	r3, [r1, #12]
 8009e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e4e:	079d      	lsls	r5, r3, #30
 8009e50:	4606      	mov	r6, r0
 8009e52:	460c      	mov	r4, r1
 8009e54:	d507      	bpl.n	8009e66 <__smakebuf_r+0x1c>
 8009e56:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e5a:	6023      	str	r3, [r4, #0]
 8009e5c:	6123      	str	r3, [r4, #16]
 8009e5e:	2301      	movs	r3, #1
 8009e60:	6163      	str	r3, [r4, #20]
 8009e62:	b003      	add	sp, #12
 8009e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e66:	466a      	mov	r2, sp
 8009e68:	ab01      	add	r3, sp, #4
 8009e6a:	f7ff ffc9 	bl	8009e00 <__swhatbuf_r>
 8009e6e:	9f00      	ldr	r7, [sp, #0]
 8009e70:	4605      	mov	r5, r0
 8009e72:	4639      	mov	r1, r7
 8009e74:	4630      	mov	r0, r6
 8009e76:	f7fe fecd 	bl	8008c14 <_malloc_r>
 8009e7a:	b948      	cbnz	r0, 8009e90 <__smakebuf_r+0x46>
 8009e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e80:	059a      	lsls	r2, r3, #22
 8009e82:	d4ee      	bmi.n	8009e62 <__smakebuf_r+0x18>
 8009e84:	f023 0303 	bic.w	r3, r3, #3
 8009e88:	f043 0302 	orr.w	r3, r3, #2
 8009e8c:	81a3      	strh	r3, [r4, #12]
 8009e8e:	e7e2      	b.n	8009e56 <__smakebuf_r+0xc>
 8009e90:	89a3      	ldrh	r3, [r4, #12]
 8009e92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e9a:	81a3      	strh	r3, [r4, #12]
 8009e9c:	9b01      	ldr	r3, [sp, #4]
 8009e9e:	6020      	str	r0, [r4, #0]
 8009ea0:	b15b      	cbz	r3, 8009eba <__smakebuf_r+0x70>
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ea8:	f000 f81e 	bl	8009ee8 <_isatty_r>
 8009eac:	b128      	cbz	r0, 8009eba <__smakebuf_r+0x70>
 8009eae:	89a3      	ldrh	r3, [r4, #12]
 8009eb0:	f023 0303 	bic.w	r3, r3, #3
 8009eb4:	f043 0301 	orr.w	r3, r3, #1
 8009eb8:	81a3      	strh	r3, [r4, #12]
 8009eba:	89a3      	ldrh	r3, [r4, #12]
 8009ebc:	431d      	orrs	r5, r3
 8009ebe:	81a5      	strh	r5, [r4, #12]
 8009ec0:	e7cf      	b.n	8009e62 <__smakebuf_r+0x18>
	...

08009ec4 <_fstat_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	4d06      	ldr	r5, [pc, #24]	@ (8009ee4 <_fstat_r+0x20>)
 8009eca:	4604      	mov	r4, r0
 8009ecc:	4608      	mov	r0, r1
 8009ece:	4611      	mov	r1, r2
 8009ed0:	602b      	str	r3, [r5, #0]
 8009ed2:	f7fa fa4f 	bl	8004374 <_fstat>
 8009ed6:	1c43      	adds	r3, r0, #1
 8009ed8:	d102      	bne.n	8009ee0 <_fstat_r+0x1c>
 8009eda:	682b      	ldr	r3, [r5, #0]
 8009edc:	b103      	cbz	r3, 8009ee0 <_fstat_r+0x1c>
 8009ede:	6023      	str	r3, [r4, #0]
 8009ee0:	bd38      	pop	{r3, r4, r5, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20000738 	.word	0x20000738

08009ee8 <_isatty_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	2300      	movs	r3, #0
 8009eec:	4d05      	ldr	r5, [pc, #20]	@ (8009f04 <_isatty_r+0x1c>)
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	602b      	str	r3, [r5, #0]
 8009ef4:	f7fa fa4d 	bl	8004392 <_isatty>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d102      	bne.n	8009f02 <_isatty_r+0x1a>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	b103      	cbz	r3, 8009f02 <_isatty_r+0x1a>
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	20000738 	.word	0x20000738

08009f08 <_init>:
 8009f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0a:	bf00      	nop
 8009f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f0e:	bc08      	pop	{r3}
 8009f10:	469e      	mov	lr, r3
 8009f12:	4770      	bx	lr

08009f14 <_fini>:
 8009f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f16:	bf00      	nop
 8009f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f1a:	bc08      	pop	{r3}
 8009f1c:	469e      	mov	lr, r3
 8009f1e:	4770      	bx	lr
