
HVAC_CONTROL_WITH_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000689c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af0  080069ac  080069ac  000079ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800749c  0800749c  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800749c  0800749c  0000849c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074a4  080074a4  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a4  080074a4  000084a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074a8  080074a8  000084a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080074ac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000060  0800750c  00009060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  0800750c  00009498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ccb  00000000  00000000  00009089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000250a  00000000  00000000  00012d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  00015260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000796  00000000  00000000  00015c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182bb  00000000  00000000  000163f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104db  00000000  00000000  0002e6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083854  00000000  00000000  0003eb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c23e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e70  00000000  00000000  000c2424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  000c5294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006994 	.word	0x08006994

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006994 	.word	0x08006994

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_d2iz>:
 800082c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000830:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000834:	d215      	bcs.n	8000862 <__aeabi_d2iz+0x36>
 8000836:	d511      	bpl.n	800085c <__aeabi_d2iz+0x30>
 8000838:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800083c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000840:	d912      	bls.n	8000868 <__aeabi_d2iz+0x3c>
 8000842:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000846:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800084a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800084e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000852:	fa23 f002 	lsr.w	r0, r3, r2
 8000856:	bf18      	it	ne
 8000858:	4240      	negne	r0, r0
 800085a:	4770      	bx	lr
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	4770      	bx	lr
 8000862:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000866:	d105      	bne.n	8000874 <__aeabi_d2iz+0x48>
 8000868:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800086c:	bf08      	it	eq
 800086e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <__aeabi_frsub>:
 800087c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000880:	e002      	b.n	8000888 <__addsf3>
 8000882:	bf00      	nop

08000884 <__aeabi_fsub>:
 8000884:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000888 <__addsf3>:
 8000888:	0042      	lsls	r2, r0, #1
 800088a:	bf1f      	itttt	ne
 800088c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000890:	ea92 0f03 	teqne	r2, r3
 8000894:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000898:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800089c:	d06a      	beq.n	8000974 <__addsf3+0xec>
 800089e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80008a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80008a6:	bfc1      	itttt	gt
 80008a8:	18d2      	addgt	r2, r2, r3
 80008aa:	4041      	eorgt	r1, r0
 80008ac:	4048      	eorgt	r0, r1
 80008ae:	4041      	eorgt	r1, r0
 80008b0:	bfb8      	it	lt
 80008b2:	425b      	neglt	r3, r3
 80008b4:	2b19      	cmp	r3, #25
 80008b6:	bf88      	it	hi
 80008b8:	4770      	bxhi	lr
 80008ba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80008be:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008c2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80008c6:	bf18      	it	ne
 80008c8:	4240      	negne	r0, r0
 80008ca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008ce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80008d2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80008d6:	bf18      	it	ne
 80008d8:	4249      	negne	r1, r1
 80008da:	ea92 0f03 	teq	r2, r3
 80008de:	d03f      	beq.n	8000960 <__addsf3+0xd8>
 80008e0:	f1a2 0201 	sub.w	r2, r2, #1
 80008e4:	fa41 fc03 	asr.w	ip, r1, r3
 80008e8:	eb10 000c 	adds.w	r0, r0, ip
 80008ec:	f1c3 0320 	rsb	r3, r3, #32
 80008f0:	fa01 f103 	lsl.w	r1, r1, r3
 80008f4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008f8:	d502      	bpl.n	8000900 <__addsf3+0x78>
 80008fa:	4249      	negs	r1, r1
 80008fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000900:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000904:	d313      	bcc.n	800092e <__addsf3+0xa6>
 8000906:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800090a:	d306      	bcc.n	800091a <__addsf3+0x92>
 800090c:	0840      	lsrs	r0, r0, #1
 800090e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000912:	f102 0201 	add.w	r2, r2, #1
 8000916:	2afe      	cmp	r2, #254	@ 0xfe
 8000918:	d251      	bcs.n	80009be <__addsf3+0x136>
 800091a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800091e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000922:	bf08      	it	eq
 8000924:	f020 0001 	biceq.w	r0, r0, #1
 8000928:	ea40 0003 	orr.w	r0, r0, r3
 800092c:	4770      	bx	lr
 800092e:	0049      	lsls	r1, r1, #1
 8000930:	eb40 0000 	adc.w	r0, r0, r0
 8000934:	3a01      	subs	r2, #1
 8000936:	bf28      	it	cs
 8000938:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800093c:	d2ed      	bcs.n	800091a <__addsf3+0x92>
 800093e:	fab0 fc80 	clz	ip, r0
 8000942:	f1ac 0c08 	sub.w	ip, ip, #8
 8000946:	ebb2 020c 	subs.w	r2, r2, ip
 800094a:	fa00 f00c 	lsl.w	r0, r0, ip
 800094e:	bfaa      	itet	ge
 8000950:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000954:	4252      	neglt	r2, r2
 8000956:	4318      	orrge	r0, r3
 8000958:	bfbc      	itt	lt
 800095a:	40d0      	lsrlt	r0, r2
 800095c:	4318      	orrlt	r0, r3
 800095e:	4770      	bx	lr
 8000960:	f092 0f00 	teq	r2, #0
 8000964:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000968:	bf06      	itte	eq
 800096a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800096e:	3201      	addeq	r2, #1
 8000970:	3b01      	subne	r3, #1
 8000972:	e7b5      	b.n	80008e0 <__addsf3+0x58>
 8000974:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000978:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800097c:	bf18      	it	ne
 800097e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000982:	d021      	beq.n	80009c8 <__addsf3+0x140>
 8000984:	ea92 0f03 	teq	r2, r3
 8000988:	d004      	beq.n	8000994 <__addsf3+0x10c>
 800098a:	f092 0f00 	teq	r2, #0
 800098e:	bf08      	it	eq
 8000990:	4608      	moveq	r0, r1
 8000992:	4770      	bx	lr
 8000994:	ea90 0f01 	teq	r0, r1
 8000998:	bf1c      	itt	ne
 800099a:	2000      	movne	r0, #0
 800099c:	4770      	bxne	lr
 800099e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80009a2:	d104      	bne.n	80009ae <__addsf3+0x126>
 80009a4:	0040      	lsls	r0, r0, #1
 80009a6:	bf28      	it	cs
 80009a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80009ac:	4770      	bx	lr
 80009ae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80009b2:	bf3c      	itt	cc
 80009b4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80009b8:	4770      	bxcc	lr
 80009ba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009be:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80009c2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c6:	4770      	bx	lr
 80009c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80009cc:	bf16      	itet	ne
 80009ce:	4608      	movne	r0, r1
 80009d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80009d4:	4601      	movne	r1, r0
 80009d6:	0242      	lsls	r2, r0, #9
 80009d8:	bf06      	itte	eq
 80009da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80009de:	ea90 0f01 	teqeq	r0, r1
 80009e2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80009e6:	4770      	bx	lr

080009e8 <__aeabi_ui2f>:
 80009e8:	f04f 0300 	mov.w	r3, #0
 80009ec:	e004      	b.n	80009f8 <__aeabi_i2f+0x8>
 80009ee:	bf00      	nop

080009f0 <__aeabi_i2f>:
 80009f0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80009f4:	bf48      	it	mi
 80009f6:	4240      	negmi	r0, r0
 80009f8:	ea5f 0c00 	movs.w	ip, r0
 80009fc:	bf08      	it	eq
 80009fe:	4770      	bxeq	lr
 8000a00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000a04:	4601      	mov	r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	e01c      	b.n	8000a46 <__aeabi_l2f+0x2a>

08000a0c <__aeabi_ul2f>:
 8000a0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a10:	bf08      	it	eq
 8000a12:	4770      	bxeq	lr
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	e00a      	b.n	8000a30 <__aeabi_l2f+0x14>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_l2f>:
 8000a1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a20:	bf08      	it	eq
 8000a22:	4770      	bxeq	lr
 8000a24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000a28:	d502      	bpl.n	8000a30 <__aeabi_l2f+0x14>
 8000a2a:	4240      	negs	r0, r0
 8000a2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a30:	ea5f 0c01 	movs.w	ip, r1
 8000a34:	bf02      	ittt	eq
 8000a36:	4684      	moveq	ip, r0
 8000a38:	4601      	moveq	r1, r0
 8000a3a:	2000      	moveq	r0, #0
 8000a3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000a40:	bf08      	it	eq
 8000a42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000a4a:	fabc f28c 	clz	r2, ip
 8000a4e:	3a08      	subs	r2, #8
 8000a50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a54:	db10      	blt.n	8000a78 <__aeabi_l2f+0x5c>
 8000a56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a5a:	4463      	add	r3, ip
 8000a5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a60:	f1c2 0220 	rsb	r2, r2, #32
 8000a64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000a68:	fa20 f202 	lsr.w	r2, r0, r2
 8000a6c:	eb43 0002 	adc.w	r0, r3, r2
 8000a70:	bf08      	it	eq
 8000a72:	f020 0001 	biceq.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	f102 0220 	add.w	r2, r2, #32
 8000a7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a80:	f1c2 0220 	rsb	r2, r2, #32
 8000a84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a88:	fa21 f202 	lsr.w	r2, r1, r2
 8000a8c:	eb43 0002 	adc.w	r0, r3, r2
 8000a90:	bf08      	it	eq
 8000a92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_fmul>:
 8000a98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aa6:	ea92 0f0c 	teqne	r2, ip
 8000aaa:	ea93 0f0c 	teqne	r3, ip
 8000aae:	d06f      	beq.n	8000b90 <__aeabi_fmul+0xf8>
 8000ab0:	441a      	add	r2, r3
 8000ab2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ab6:	0240      	lsls	r0, r0, #9
 8000ab8:	bf18      	it	ne
 8000aba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000abe:	d01e      	beq.n	8000afe <__aeabi_fmul+0x66>
 8000ac0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ac4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ac8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000acc:	fba0 3101 	umull	r3, r1, r0, r1
 8000ad0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ad4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ad8:	bf3e      	ittt	cc
 8000ada:	0049      	lslcc	r1, r1, #1
 8000adc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ae0:	005b      	lslcc	r3, r3, #1
 8000ae2:	ea40 0001 	orr.w	r0, r0, r1
 8000ae6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000aea:	2afd      	cmp	r2, #253	@ 0xfd
 8000aec:	d81d      	bhi.n	8000b2a <__aeabi_fmul+0x92>
 8000aee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000af2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000af6:	bf08      	it	eq
 8000af8:	f020 0001 	biceq.w	r0, r0, #1
 8000afc:	4770      	bx	lr
 8000afe:	f090 0f00 	teq	r0, #0
 8000b02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b06:	bf08      	it	eq
 8000b08:	0249      	lsleq	r1, r1, #9
 8000b0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b12:	3a7f      	subs	r2, #127	@ 0x7f
 8000b14:	bfc2      	ittt	gt
 8000b16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b1e:	4770      	bxgt	lr
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	3a01      	subs	r2, #1
 8000b2a:	dc5d      	bgt.n	8000be8 <__aeabi_fmul+0x150>
 8000b2c:	f112 0f19 	cmn.w	r2, #25
 8000b30:	bfdc      	itt	le
 8000b32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bxle	lr
 8000b38:	f1c2 0200 	rsb	r2, r2, #0
 8000b3c:	0041      	lsls	r1, r0, #1
 8000b3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000b42:	f1c2 0220 	rsb	r2, r2, #32
 8000b46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b4e:	f140 0000 	adc.w	r0, r0, #0
 8000b52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b56:	bf08      	it	eq
 8000b58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b5c:	4770      	bx	lr
 8000b5e:	f092 0f00 	teq	r2, #0
 8000b62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b66:	bf02      	ittt	eq
 8000b68:	0040      	lsleq	r0, r0, #1
 8000b6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b6e:	3a01      	subeq	r2, #1
 8000b70:	d0f9      	beq.n	8000b66 <__aeabi_fmul+0xce>
 8000b72:	ea40 000c 	orr.w	r0, r0, ip
 8000b76:	f093 0f00 	teq	r3, #0
 8000b7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b7e:	bf02      	ittt	eq
 8000b80:	0049      	lsleq	r1, r1, #1
 8000b82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000b86:	3b01      	subeq	r3, #1
 8000b88:	d0f9      	beq.n	8000b7e <__aeabi_fmul+0xe6>
 8000b8a:	ea41 010c 	orr.w	r1, r1, ip
 8000b8e:	e78f      	b.n	8000ab0 <__aeabi_fmul+0x18>
 8000b90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b94:	ea92 0f0c 	teq	r2, ip
 8000b98:	bf18      	it	ne
 8000b9a:	ea93 0f0c 	teqne	r3, ip
 8000b9e:	d00a      	beq.n	8000bb6 <__aeabi_fmul+0x11e>
 8000ba0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ba4:	bf18      	it	ne
 8000ba6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000baa:	d1d8      	bne.n	8000b5e <__aeabi_fmul+0xc6>
 8000bac:	ea80 0001 	eor.w	r0, r0, r1
 8000bb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000bb4:	4770      	bx	lr
 8000bb6:	f090 0f00 	teq	r0, #0
 8000bba:	bf17      	itett	ne
 8000bbc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	f091 0f00 	teqne	r1, #0
 8000bc6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000bca:	d014      	beq.n	8000bf6 <__aeabi_fmul+0x15e>
 8000bcc:	ea92 0f0c 	teq	r2, ip
 8000bd0:	d101      	bne.n	8000bd6 <__aeabi_fmul+0x13e>
 8000bd2:	0242      	lsls	r2, r0, #9
 8000bd4:	d10f      	bne.n	8000bf6 <__aeabi_fmul+0x15e>
 8000bd6:	ea93 0f0c 	teq	r3, ip
 8000bda:	d103      	bne.n	8000be4 <__aeabi_fmul+0x14c>
 8000bdc:	024b      	lsls	r3, r1, #9
 8000bde:	bf18      	it	ne
 8000be0:	4608      	movne	r0, r1
 8000be2:	d108      	bne.n	8000bf6 <__aeabi_fmul+0x15e>
 8000be4:	ea80 0001 	eor.w	r0, r0, r1
 8000be8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bfa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_fdiv>:
 8000c00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c08:	bf1e      	ittt	ne
 8000c0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c0e:	ea92 0f0c 	teqne	r2, ip
 8000c12:	ea93 0f0c 	teqne	r3, ip
 8000c16:	d069      	beq.n	8000cec <__aeabi_fdiv+0xec>
 8000c18:	eba2 0203 	sub.w	r2, r2, r3
 8000c1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000c20:	0249      	lsls	r1, r1, #9
 8000c22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c26:	d037      	beq.n	8000c98 <__aeabi_fdiv+0x98>
 8000c28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c34:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	bf38      	it	cc
 8000c3c:	005b      	lslcc	r3, r3, #1
 8000c3e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000c42:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000c46:	428b      	cmp	r3, r1
 8000c48:	bf24      	itt	cs
 8000c4a:	1a5b      	subcs	r3, r3, r1
 8000c4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c54:	bf24      	itt	cs
 8000c56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c62:	bf24      	itt	cs
 8000c64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c70:	bf24      	itt	cs
 8000c72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	bf18      	it	ne
 8000c7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c82:	d1e0      	bne.n	8000c46 <__aeabi_fdiv+0x46>
 8000c84:	2afd      	cmp	r2, #253	@ 0xfd
 8000c86:	f63f af50 	bhi.w	8000b2a <__aeabi_fmul+0x92>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ca0:	327f      	adds	r2, #127	@ 0x7f
 8000ca2:	bfc2      	ittt	gt
 8000ca4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ca8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cac:	4770      	bxgt	lr
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	f04f 0300 	mov.w	r3, #0
 8000cb6:	3a01      	subs	r2, #1
 8000cb8:	e737      	b.n	8000b2a <__aeabi_fmul+0x92>
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cc2:	bf02      	ittt	eq
 8000cc4:	0040      	lsleq	r0, r0, #1
 8000cc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cca:	3a01      	subeq	r2, #1
 8000ccc:	d0f9      	beq.n	8000cc2 <__aeabi_fdiv+0xc2>
 8000cce:	ea40 000c 	orr.w	r0, r0, ip
 8000cd2:	f093 0f00 	teq	r3, #0
 8000cd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cda:	bf02      	ittt	eq
 8000cdc:	0049      	lsleq	r1, r1, #1
 8000cde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ce2:	3b01      	subeq	r3, #1
 8000ce4:	d0f9      	beq.n	8000cda <__aeabi_fdiv+0xda>
 8000ce6:	ea41 010c 	orr.w	r1, r1, ip
 8000cea:	e795      	b.n	8000c18 <__aeabi_fdiv+0x18>
 8000cec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf0:	ea92 0f0c 	teq	r2, ip
 8000cf4:	d108      	bne.n	8000d08 <__aeabi_fdiv+0x108>
 8000cf6:	0242      	lsls	r2, r0, #9
 8000cf8:	f47f af7d 	bne.w	8000bf6 <__aeabi_fmul+0x15e>
 8000cfc:	ea93 0f0c 	teq	r3, ip
 8000d00:	f47f af70 	bne.w	8000be4 <__aeabi_fmul+0x14c>
 8000d04:	4608      	mov	r0, r1
 8000d06:	e776      	b.n	8000bf6 <__aeabi_fmul+0x15e>
 8000d08:	ea93 0f0c 	teq	r3, ip
 8000d0c:	d104      	bne.n	8000d18 <__aeabi_fdiv+0x118>
 8000d0e:	024b      	lsls	r3, r1, #9
 8000d10:	f43f af4c 	beq.w	8000bac <__aeabi_fmul+0x114>
 8000d14:	4608      	mov	r0, r1
 8000d16:	e76e      	b.n	8000bf6 <__aeabi_fmul+0x15e>
 8000d18:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d1c:	bf18      	it	ne
 8000d1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d22:	d1ca      	bne.n	8000cba <__aeabi_fdiv+0xba>
 8000d24:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000d28:	f47f af5c 	bne.w	8000be4 <__aeabi_fmul+0x14c>
 8000d2c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000d30:	f47f af3c 	bne.w	8000bac <__aeabi_fmul+0x114>
 8000d34:	e75f      	b.n	8000bf6 <__aeabi_fmul+0x15e>
 8000d36:	bf00      	nop

08000d38 <__gesf2>:
 8000d38:	f04f 3cff 	mov.w	ip, #4294967295
 8000d3c:	e006      	b.n	8000d4c <__cmpsf2+0x4>
 8000d3e:	bf00      	nop

08000d40 <__lesf2>:
 8000d40:	f04f 0c01 	mov.w	ip, #1
 8000d44:	e002      	b.n	8000d4c <__cmpsf2+0x4>
 8000d46:	bf00      	nop

08000d48 <__cmpsf2>:
 8000d48:	f04f 0c01 	mov.w	ip, #1
 8000d4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	bf18      	it	ne
 8000d5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d62:	d011      	beq.n	8000d88 <__cmpsf2+0x40>
 8000d64:	b001      	add	sp, #4
 8000d66:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d6a:	bf18      	it	ne
 8000d6c:	ea90 0f01 	teqne	r0, r1
 8000d70:	bf58      	it	pl
 8000d72:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d76:	bf88      	it	hi
 8000d78:	17c8      	asrhi	r0, r1, #31
 8000d7a:	bf38      	it	cc
 8000d7c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d80:	bf18      	it	ne
 8000d82:	f040 0001 	orrne.w	r0, r0, #1
 8000d86:	4770      	bx	lr
 8000d88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d8c:	d102      	bne.n	8000d94 <__cmpsf2+0x4c>
 8000d8e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d92:	d105      	bne.n	8000da0 <__cmpsf2+0x58>
 8000d94:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d98:	d1e4      	bne.n	8000d64 <__cmpsf2+0x1c>
 8000d9a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d9e:	d0e1      	beq.n	8000d64 <__cmpsf2+0x1c>
 8000da0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_cfrcmple>:
 8000da8:	4684      	mov	ip, r0
 8000daa:	4608      	mov	r0, r1
 8000dac:	4661      	mov	r1, ip
 8000dae:	e7ff      	b.n	8000db0 <__aeabi_cfcmpeq>

08000db0 <__aeabi_cfcmpeq>:
 8000db0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000db2:	f7ff ffc9 	bl	8000d48 <__cmpsf2>
 8000db6:	2800      	cmp	r0, #0
 8000db8:	bf48      	it	mi
 8000dba:	f110 0f00 	cmnmi.w	r0, #0
 8000dbe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dc0 <__aeabi_fcmpeq>:
 8000dc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc4:	f7ff fff4 	bl	8000db0 <__aeabi_cfcmpeq>
 8000dc8:	bf0c      	ite	eq
 8000dca:	2001      	moveq	r0, #1
 8000dcc:	2000      	movne	r0, #0
 8000dce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_fcmplt>:
 8000dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd8:	f7ff ffea 	bl	8000db0 <__aeabi_cfcmpeq>
 8000ddc:	bf34      	ite	cc
 8000dde:	2001      	movcc	r0, #1
 8000de0:	2000      	movcs	r0, #0
 8000de2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000de6:	bf00      	nop

08000de8 <__aeabi_fcmple>:
 8000de8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dec:	f7ff ffe0 	bl	8000db0 <__aeabi_cfcmpeq>
 8000df0:	bf94      	ite	ls
 8000df2:	2001      	movls	r0, #1
 8000df4:	2000      	movhi	r0, #0
 8000df6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfa:	bf00      	nop

08000dfc <__aeabi_fcmpge>:
 8000dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e00:	f7ff ffd2 	bl	8000da8 <__aeabi_cfrcmple>
 8000e04:	bf94      	ite	ls
 8000e06:	2001      	movls	r0, #1
 8000e08:	2000      	movhi	r0, #0
 8000e0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e0e:	bf00      	nop

08000e10 <__aeabi_fcmpgt>:
 8000e10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e14:	f7ff ffc8 	bl	8000da8 <__aeabi_cfrcmple>
 8000e18:	bf34      	ite	cc
 8000e1a:	2001      	movcc	r0, #1
 8000e1c:	2000      	movcs	r0, #0
 8000e1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e22:	bf00      	nop

08000e24 <__aeabi_ldivmod>:
 8000e24:	b97b      	cbnz	r3, 8000e46 <__aeabi_ldivmod+0x22>
 8000e26:	b972      	cbnz	r2, 8000e46 <__aeabi_ldivmod+0x22>
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	bfbe      	ittt	lt
 8000e2c:	2000      	movlt	r0, #0
 8000e2e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000e32:	e006      	blt.n	8000e42 <__aeabi_ldivmod+0x1e>
 8000e34:	bf08      	it	eq
 8000e36:	2800      	cmpeq	r0, #0
 8000e38:	bf1c      	itt	ne
 8000e3a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000e3e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e42:	f000 b9f5 	b.w	8001230 <__aeabi_idiv0>
 8000e46:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e4a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e4e:	2900      	cmp	r1, #0
 8000e50:	db09      	blt.n	8000e66 <__aeabi_ldivmod+0x42>
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db1a      	blt.n	8000e8c <__aeabi_ldivmod+0x68>
 8000e56:	f000 f86b 	bl	8000f30 <__udivmoddi4>
 8000e5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e62:	b004      	add	sp, #16
 8000e64:	4770      	bx	lr
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db1b      	blt.n	8000ea8 <__aeabi_ldivmod+0x84>
 8000e70:	f000 f85e 	bl	8000f30 <__udivmoddi4>
 8000e74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e7c:	b004      	add	sp, #16
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	4252      	negs	r2, r2
 8000e86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e8a:	4770      	bx	lr
 8000e8c:	4252      	negs	r2, r2
 8000e8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e92:	f000 f84d 	bl	8000f30 <__udivmoddi4>
 8000e96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e9e:	b004      	add	sp, #16
 8000ea0:	4240      	negs	r0, r0
 8000ea2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ea6:	4770      	bx	lr
 8000ea8:	4252      	negs	r2, r2
 8000eaa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eae:	f000 f83f 	bl	8000f30 <__udivmoddi4>
 8000eb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eba:	b004      	add	sp, #16
 8000ebc:	4252      	negs	r2, r2
 8000ebe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_d2lz>:
 8000ec4:	b538      	push	{r3, r4, r5, lr}
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4604      	mov	r4, r0
 8000ecc:	460d      	mov	r5, r1
 8000ece:	f7ff fc85 	bl	80007dc <__aeabi_dcmplt>
 8000ed2:	b928      	cbnz	r0, 8000ee0 <__aeabi_d2lz+0x1c>
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000edc:	f000 b80a 	b.w	8000ef4 <__aeabi_d2ulz>
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ee6:	f000 f805 	bl	8000ef4 <__aeabi_d2ulz>
 8000eea:	4240      	negs	r0, r0
 8000eec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ef0:	bd38      	pop	{r3, r4, r5, pc}
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_d2ulz>:
 8000ef4:	b5d0      	push	{r4, r6, r7, lr}
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <__aeabi_d2ulz+0x34>)
 8000efa:	4606      	mov	r6, r0
 8000efc:	460f      	mov	r7, r1
 8000efe:	f7ff f927 	bl	8000150 <__aeabi_dmul>
 8000f02:	f000 f997 	bl	8001234 <__aeabi_d2uiz>
 8000f06:	4604      	mov	r4, r0
 8000f08:	f7ff fb8e 	bl	8000628 <__aeabi_ui2d>
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <__aeabi_d2ulz+0x38>)
 8000f10:	f7ff f91e 	bl	8000150 <__aeabi_dmul>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	4630      	mov	r0, r6
 8000f1a:	4639      	mov	r1, r7
 8000f1c:	f7ff fa46 	bl	80003ac <__aeabi_dsub>
 8000f20:	f000 f988 	bl	8001234 <__aeabi_d2uiz>
 8000f24:	4621      	mov	r1, r4
 8000f26:	bdd0      	pop	{r4, r6, r7, pc}
 8000f28:	3df00000 	.word	0x3df00000
 8000f2c:	41f00000 	.word	0x41f00000

08000f30 <__udivmoddi4>:
 8000f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f34:	9d08      	ldr	r5, [sp, #32]
 8000f36:	468e      	mov	lr, r1
 8000f38:	4604      	mov	r4, r0
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d14a      	bne.n	8000fd6 <__udivmoddi4+0xa6>
 8000f40:	428a      	cmp	r2, r1
 8000f42:	4617      	mov	r7, r2
 8000f44:	d962      	bls.n	800100c <__udivmoddi4+0xdc>
 8000f46:	fab2 f682 	clz	r6, r2
 8000f4a:	b14e      	cbz	r6, 8000f60 <__udivmoddi4+0x30>
 8000f4c:	f1c6 0320 	rsb	r3, r6, #32
 8000f50:	fa01 f806 	lsl.w	r8, r1, r6
 8000f54:	fa20 f303 	lsr.w	r3, r0, r3
 8000f58:	40b7      	lsls	r7, r6
 8000f5a:	ea43 0808 	orr.w	r8, r3, r8
 8000f5e:	40b4      	lsls	r4, r6
 8000f60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f68:	fa1f fc87 	uxth.w	ip, r7
 8000f6c:	fb0e 8811 	mls	r8, lr, r1, r8
 8000f70:	fb01 f20c 	mul.w	r2, r1, ip
 8000f74:	0c23      	lsrs	r3, r4, #16
 8000f76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d909      	bls.n	8000f92 <__udivmoddi4+0x62>
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	f101 30ff 	add.w	r0, r1, #4294967295
 8000f84:	f080 80eb 	bcs.w	800115e <__udivmoddi4+0x22e>
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f240 80e8 	bls.w	800115e <__udivmoddi4+0x22e>
 8000f8e:	3902      	subs	r1, #2
 8000f90:	443b      	add	r3, r7
 8000f92:	1a9a      	subs	r2, r3, r2
 8000f94:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f98:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fa0:	b2a3      	uxth	r3, r4
 8000fa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fa6:	459c      	cmp	ip, r3
 8000fa8:	d909      	bls.n	8000fbe <__udivmoddi4+0x8e>
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fb0:	f080 80d7 	bcs.w	8001162 <__udivmoddi4+0x232>
 8000fb4:	459c      	cmp	ip, r3
 8000fb6:	f240 80d4 	bls.w	8001162 <__udivmoddi4+0x232>
 8000fba:	443b      	add	r3, r7
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	eba3 030c 	sub.w	r3, r3, ip
 8000fc8:	b11d      	cbz	r5, 8000fd2 <__udivmoddi4+0xa2>
 8000fca:	2200      	movs	r2, #0
 8000fcc:	40f3      	lsrs	r3, r6
 8000fce:	e9c5 3200 	strd	r3, r2, [r5]
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d905      	bls.n	8000fe6 <__udivmoddi4+0xb6>
 8000fda:	b10d      	cbz	r5, 8000fe0 <__udivmoddi4+0xb0>
 8000fdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e7f5      	b.n	8000fd2 <__udivmoddi4+0xa2>
 8000fe6:	fab3 f183 	clz	r1, r3
 8000fea:	2900      	cmp	r1, #0
 8000fec:	d146      	bne.n	800107c <__udivmoddi4+0x14c>
 8000fee:	4573      	cmp	r3, lr
 8000ff0:	d302      	bcc.n	8000ff8 <__udivmoddi4+0xc8>
 8000ff2:	4282      	cmp	r2, r0
 8000ff4:	f200 8108 	bhi.w	8001208 <__udivmoddi4+0x2d8>
 8000ff8:	1a84      	subs	r4, r0, r2
 8000ffa:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ffe:	2001      	movs	r0, #1
 8001000:	4690      	mov	r8, r2
 8001002:	2d00      	cmp	r5, #0
 8001004:	d0e5      	beq.n	8000fd2 <__udivmoddi4+0xa2>
 8001006:	e9c5 4800 	strd	r4, r8, [r5]
 800100a:	e7e2      	b.n	8000fd2 <__udivmoddi4+0xa2>
 800100c:	2a00      	cmp	r2, #0
 800100e:	f000 8091 	beq.w	8001134 <__udivmoddi4+0x204>
 8001012:	fab2 f682 	clz	r6, r2
 8001016:	2e00      	cmp	r6, #0
 8001018:	f040 80a5 	bne.w	8001166 <__udivmoddi4+0x236>
 800101c:	1a8a      	subs	r2, r1, r2
 800101e:	2101      	movs	r1, #1
 8001020:	0c03      	lsrs	r3, r0, #16
 8001022:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001026:	b280      	uxth	r0, r0
 8001028:	b2bc      	uxth	r4, r7
 800102a:	fbb2 fcfe 	udiv	ip, r2, lr
 800102e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001036:	fb04 f20c 	mul.w	r2, r4, ip
 800103a:	429a      	cmp	r2, r3
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x11e>
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001044:	d202      	bcs.n	800104c <__udivmoddi4+0x11c>
 8001046:	429a      	cmp	r2, r3
 8001048:	f200 80e3 	bhi.w	8001212 <__udivmoddi4+0x2e2>
 800104c:	46c4      	mov	ip, r8
 800104e:	1a9b      	subs	r3, r3, r2
 8001050:	fbb3 f2fe 	udiv	r2, r3, lr
 8001054:	fb0e 3312 	mls	r3, lr, r2, r3
 8001058:	fb02 f404 	mul.w	r4, r2, r4
 800105c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001060:	429c      	cmp	r4, r3
 8001062:	d907      	bls.n	8001074 <__udivmoddi4+0x144>
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	f102 30ff 	add.w	r0, r2, #4294967295
 800106a:	d202      	bcs.n	8001072 <__udivmoddi4+0x142>
 800106c:	429c      	cmp	r4, r3
 800106e:	f200 80cd 	bhi.w	800120c <__udivmoddi4+0x2dc>
 8001072:	4602      	mov	r2, r0
 8001074:	1b1b      	subs	r3, r3, r4
 8001076:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800107a:	e7a5      	b.n	8000fc8 <__udivmoddi4+0x98>
 800107c:	f1c1 0620 	rsb	r6, r1, #32
 8001080:	408b      	lsls	r3, r1
 8001082:	fa22 f706 	lsr.w	r7, r2, r6
 8001086:	431f      	orrs	r7, r3
 8001088:	fa2e fa06 	lsr.w	sl, lr, r6
 800108c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001090:	fbba f8f9 	udiv	r8, sl, r9
 8001094:	fa0e fe01 	lsl.w	lr, lr, r1
 8001098:	fa20 f306 	lsr.w	r3, r0, r6
 800109c:	fb09 aa18 	mls	sl, r9, r8, sl
 80010a0:	fa1f fc87 	uxth.w	ip, r7
 80010a4:	ea43 030e 	orr.w	r3, r3, lr
 80010a8:	fa00 fe01 	lsl.w	lr, r0, r1
 80010ac:	fb08 f00c 	mul.w	r0, r8, ip
 80010b0:	0c1c      	lsrs	r4, r3, #16
 80010b2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80010b6:	42a0      	cmp	r0, r4
 80010b8:	fa02 f201 	lsl.w	r2, r2, r1
 80010bc:	d90a      	bls.n	80010d4 <__udivmoddi4+0x1a4>
 80010be:	193c      	adds	r4, r7, r4
 80010c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80010c4:	f080 809e 	bcs.w	8001204 <__udivmoddi4+0x2d4>
 80010c8:	42a0      	cmp	r0, r4
 80010ca:	f240 809b 	bls.w	8001204 <__udivmoddi4+0x2d4>
 80010ce:	f1a8 0802 	sub.w	r8, r8, #2
 80010d2:	443c      	add	r4, r7
 80010d4:	1a24      	subs	r4, r4, r0
 80010d6:	b298      	uxth	r0, r3
 80010d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80010dc:	fb09 4413 	mls	r4, r9, r3, r4
 80010e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80010e4:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80010e8:	45a4      	cmp	ip, r4
 80010ea:	d909      	bls.n	8001100 <__udivmoddi4+0x1d0>
 80010ec:	193c      	adds	r4, r7, r4
 80010ee:	f103 30ff 	add.w	r0, r3, #4294967295
 80010f2:	f080 8085 	bcs.w	8001200 <__udivmoddi4+0x2d0>
 80010f6:	45a4      	cmp	ip, r4
 80010f8:	f240 8082 	bls.w	8001200 <__udivmoddi4+0x2d0>
 80010fc:	3b02      	subs	r3, #2
 80010fe:	443c      	add	r4, r7
 8001100:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001104:	eba4 040c 	sub.w	r4, r4, ip
 8001108:	fba0 8c02 	umull	r8, ip, r0, r2
 800110c:	4564      	cmp	r4, ip
 800110e:	4643      	mov	r3, r8
 8001110:	46e1      	mov	r9, ip
 8001112:	d364      	bcc.n	80011de <__udivmoddi4+0x2ae>
 8001114:	d061      	beq.n	80011da <__udivmoddi4+0x2aa>
 8001116:	b15d      	cbz	r5, 8001130 <__udivmoddi4+0x200>
 8001118:	ebbe 0203 	subs.w	r2, lr, r3
 800111c:	eb64 0409 	sbc.w	r4, r4, r9
 8001120:	fa04 f606 	lsl.w	r6, r4, r6
 8001124:	fa22 f301 	lsr.w	r3, r2, r1
 8001128:	431e      	orrs	r6, r3
 800112a:	40cc      	lsrs	r4, r1
 800112c:	e9c5 6400 	strd	r6, r4, [r5]
 8001130:	2100      	movs	r1, #0
 8001132:	e74e      	b.n	8000fd2 <__udivmoddi4+0xa2>
 8001134:	fbb1 fcf2 	udiv	ip, r1, r2
 8001138:	0c01      	lsrs	r1, r0, #16
 800113a:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800113e:	b280      	uxth	r0, r0
 8001140:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001144:	463b      	mov	r3, r7
 8001146:	fbb1 f1f7 	udiv	r1, r1, r7
 800114a:	4638      	mov	r0, r7
 800114c:	463c      	mov	r4, r7
 800114e:	46b8      	mov	r8, r7
 8001150:	46be      	mov	lr, r7
 8001152:	2620      	movs	r6, #32
 8001154:	eba2 0208 	sub.w	r2, r2, r8
 8001158:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800115c:	e765      	b.n	800102a <__udivmoddi4+0xfa>
 800115e:	4601      	mov	r1, r0
 8001160:	e717      	b.n	8000f92 <__udivmoddi4+0x62>
 8001162:	4610      	mov	r0, r2
 8001164:	e72b      	b.n	8000fbe <__udivmoddi4+0x8e>
 8001166:	f1c6 0120 	rsb	r1, r6, #32
 800116a:	fa2e fc01 	lsr.w	ip, lr, r1
 800116e:	40b7      	lsls	r7, r6
 8001170:	fa0e fe06 	lsl.w	lr, lr, r6
 8001174:	fa20 f101 	lsr.w	r1, r0, r1
 8001178:	ea41 010e 	orr.w	r1, r1, lr
 800117c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001180:	fbbc f8fe 	udiv	r8, ip, lr
 8001184:	b2bc      	uxth	r4, r7
 8001186:	fb0e cc18 	mls	ip, lr, r8, ip
 800118a:	fb08 f904 	mul.w	r9, r8, r4
 800118e:	0c0a      	lsrs	r2, r1, #16
 8001190:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001194:	40b0      	lsls	r0, r6
 8001196:	4591      	cmp	r9, r2
 8001198:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800119c:	b280      	uxth	r0, r0
 800119e:	d93e      	bls.n	800121e <__udivmoddi4+0x2ee>
 80011a0:	18ba      	adds	r2, r7, r2
 80011a2:	f108 3cff 	add.w	ip, r8, #4294967295
 80011a6:	d201      	bcs.n	80011ac <__udivmoddi4+0x27c>
 80011a8:	4591      	cmp	r9, r2
 80011aa:	d81f      	bhi.n	80011ec <__udivmoddi4+0x2bc>
 80011ac:	eba2 0209 	sub.w	r2, r2, r9
 80011b0:	fbb2 f9fe 	udiv	r9, r2, lr
 80011b4:	fb09 f804 	mul.w	r8, r9, r4
 80011b8:	fb0e 2a19 	mls	sl, lr, r9, r2
 80011bc:	b28a      	uxth	r2, r1
 80011be:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80011c2:	4542      	cmp	r2, r8
 80011c4:	d229      	bcs.n	800121a <__udivmoddi4+0x2ea>
 80011c6:	18ba      	adds	r2, r7, r2
 80011c8:	f109 31ff 	add.w	r1, r9, #4294967295
 80011cc:	d2c2      	bcs.n	8001154 <__udivmoddi4+0x224>
 80011ce:	4542      	cmp	r2, r8
 80011d0:	d2c0      	bcs.n	8001154 <__udivmoddi4+0x224>
 80011d2:	f1a9 0102 	sub.w	r1, r9, #2
 80011d6:	443a      	add	r2, r7
 80011d8:	e7bc      	b.n	8001154 <__udivmoddi4+0x224>
 80011da:	45c6      	cmp	lr, r8
 80011dc:	d29b      	bcs.n	8001116 <__udivmoddi4+0x1e6>
 80011de:	ebb8 0302 	subs.w	r3, r8, r2
 80011e2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80011e6:	3801      	subs	r0, #1
 80011e8:	46e1      	mov	r9, ip
 80011ea:	e794      	b.n	8001116 <__udivmoddi4+0x1e6>
 80011ec:	eba7 0909 	sub.w	r9, r7, r9
 80011f0:	444a      	add	r2, r9
 80011f2:	fbb2 f9fe 	udiv	r9, r2, lr
 80011f6:	f1a8 0c02 	sub.w	ip, r8, #2
 80011fa:	fb09 f804 	mul.w	r8, r9, r4
 80011fe:	e7db      	b.n	80011b8 <__udivmoddi4+0x288>
 8001200:	4603      	mov	r3, r0
 8001202:	e77d      	b.n	8001100 <__udivmoddi4+0x1d0>
 8001204:	46d0      	mov	r8, sl
 8001206:	e765      	b.n	80010d4 <__udivmoddi4+0x1a4>
 8001208:	4608      	mov	r0, r1
 800120a:	e6fa      	b.n	8001002 <__udivmoddi4+0xd2>
 800120c:	443b      	add	r3, r7
 800120e:	3a02      	subs	r2, #2
 8001210:	e730      	b.n	8001074 <__udivmoddi4+0x144>
 8001212:	f1ac 0c02 	sub.w	ip, ip, #2
 8001216:	443b      	add	r3, r7
 8001218:	e719      	b.n	800104e <__udivmoddi4+0x11e>
 800121a:	4649      	mov	r1, r9
 800121c:	e79a      	b.n	8001154 <__udivmoddi4+0x224>
 800121e:	eba2 0209 	sub.w	r2, r2, r9
 8001222:	fbb2 f9fe 	udiv	r9, r2, lr
 8001226:	46c4      	mov	ip, r8
 8001228:	fb09 f804 	mul.w	r8, r9, r4
 800122c:	e7c4      	b.n	80011b8 <__udivmoddi4+0x288>
 800122e:	bf00      	nop

08001230 <__aeabi_idiv0>:
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <__aeabi_d2uiz>:
 8001234:	004a      	lsls	r2, r1, #1
 8001236:	d211      	bcs.n	800125c <__aeabi_d2uiz+0x28>
 8001238:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800123c:	d211      	bcs.n	8001262 <__aeabi_d2uiz+0x2e>
 800123e:	d50d      	bpl.n	800125c <__aeabi_d2uiz+0x28>
 8001240:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8001244:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001248:	d40e      	bmi.n	8001268 <__aeabi_d2uiz+0x34>
 800124a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800124e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001252:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001256:	fa23 f002 	lsr.w	r0, r3, r2
 800125a:	4770      	bx	lr
 800125c:	f04f 0000 	mov.w	r0, #0
 8001260:	4770      	bx	lr
 8001262:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001266:	d102      	bne.n	800126e <__aeabi_d2uiz+0x3a>
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	4770      	bx	lr
 800126e:	f04f 0000 	mov.w	r0, #0
 8001272:	4770      	bx	lr

08001274 <Blower_Relay_Pins_Init>:

#define PB12_LOW_SPEED_BLOWER    12
#define PB13_MEDIUM_SPEED_BLOWER 13
#define PB14_HIGH_SPEED_BLOWER   14

void Blower_Relay_Pins_Init(){
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <Blower_Relay_Pins_Init+0x44>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a0e      	ldr	r2, [pc, #56]	@ (80012b8 <Blower_Relay_Pins_Init+0x44>)
 800127e:	f043 0308 	orr.w	r3, r3, #8
 8001282:	6193      	str	r3, [r2, #24]
    GPIOB->CRH&=~((0xF<<16)|(0XF<<20)|(0XF<<24));
 8001284:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <Blower_Relay_Pins_Init+0x48>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	4a0c      	ldr	r2, [pc, #48]	@ (80012bc <Blower_Relay_Pins_Init+0x48>)
 800128a:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 800128e:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8001292:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=((0x3<<16)|(0X3<<20)|(0X3<<24));
 8001294:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <Blower_Relay_Pins_Init+0x48>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <Blower_Relay_Pins_Init+0x48>)
 800129a:	f043 734c 	orr.w	r3, r3, #53477376	@ 0x3300000
 800129e:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80012a2:	6053      	str	r3, [r2, #4]
    GPIOB->ODR|=((1<<PB12_LOW_SPEED_BLOWER)|(1<<PB13_MEDIUM_SPEED_BLOWER)|(1<<PB14_HIGH_SPEED_BLOWER));
 80012a4:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <Blower_Relay_Pins_Init+0x48>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <Blower_Relay_Pins_Init+0x48>)
 80012aa:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80012ae:	60d3      	str	r3, [r2, #12]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010c00 	.word	0x40010c00

080012c0 <Switch_Pins_int>:
extern uint32_t milli_sec_tick;
uint32_t LastDebounceTime = 0;  // The Last Time The Output Pin Was Toggled
uint32_t DebounceDelay = 50;    // The Ddebounce Time; increase it if the output still flickers
switch_state_t BtnState=SW_STATE_NEUTRAL;               // The Current Reading From The Input Pin
switch_state_t LastBtnState = SW_STATE_NEUTRAL;       // The previous reading from The Input Pin
void Switch_Pins_int(){
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80012c4:	4b16      	ldr	r3, [pc, #88]	@ (8001320 <Switch_Pins_int+0x60>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a15      	ldr	r2, [pc, #84]	@ (8001320 <Switch_Pins_int+0x60>)
 80012ca:	f043 0308 	orr.w	r3, r3, #8
 80012ce:	6193      	str	r3, [r2, #24]
    GPIOB->CRL&=~(0xf<<28);//PB7 as input//FORWARD
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <Switch_Pins_int+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a13      	ldr	r2, [pc, #76]	@ (8001324 <Switch_Pins_int+0x64>)
 80012d6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80012da:	6013      	str	r3, [r2, #0]
    GPIOB->CRL|=(0b10<<30);
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <Switch_Pins_int+0x64>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a10      	ldr	r2, [pc, #64]	@ (8001324 <Switch_Pins_int+0x64>)
 80012e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80012e6:	6013      	str	r3, [r2, #0]
    GPIOB->ODR|=(1<<7);
 80012e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <Switch_Pins_int+0x64>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001324 <Switch_Pins_int+0x64>)
 80012ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012f2:	60d3      	str	r3, [r2, #12]
    GPIOB->CRL&=~(0XF<<24);// PB6 REVERSE
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <Switch_Pins_int+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <Switch_Pins_int+0x64>)
 80012fa:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80012fe:	6013      	str	r3, [r2, #0]
    GPIOB->CRL|=(0b10<<26);
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <Switch_Pins_int+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a07      	ldr	r2, [pc, #28]	@ (8001324 <Switch_Pins_int+0x64>)
 8001306:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800130a:	6013      	str	r3, [r2, #0]
    GPIOB->ODR|=(1<<6);
 800130c:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <Switch_Pins_int+0x64>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4a04      	ldr	r2, [pc, #16]	@ (8001324 <Switch_Pins_int+0x64>)
 8001312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	40021000 	.word	0x40021000
 8001324:	40010c00 	.word	0x40010c00

08001328 <read_switch_raw>:
switch_state_t read_switch_raw(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
    uint8_t fwd =!(GPIOB->IDR>>7&1);
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <read_switch_raw+0x6c>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	09db      	lsrs	r3, r3, #7
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b00      	cmp	r3, #0
 800133a:	bf0c      	ite	eq
 800133c:	2301      	moveq	r3, #1
 800133e:	2300      	movne	r3, #0
 8001340:	b2db      	uxtb	r3, r3
 8001342:	71fb      	strb	r3, [r7, #7]
    uint8_t rev =!(GPIOB->IDR>>6&1);
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <read_switch_raw+0x6c>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	099b      	lsrs	r3, r3, #6
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	bf0c      	ite	eq
 8001352:	2301      	moveq	r3, #1
 8001354:	2300      	movne	r3, #0
 8001356:	b2db      	uxtb	r3, r3
 8001358:	71bb      	strb	r3, [r7, #6]

    if (fwd && !rev) return SW_STATE_FORWARD;
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d004      	beq.n	800136a <read_switch_raw+0x42>
 8001360:	79bb      	ldrb	r3, [r7, #6]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <read_switch_raw+0x42>
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <read_switch_raw+0x62>
    if (!fwd && rev) return SW_STATE_REVERSE;
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d104      	bne.n	800137a <read_switch_raw+0x52>
 8001370:	79bb      	ldrb	r3, [r7, #6]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <read_switch_raw+0x52>
 8001376:	2302      	movs	r3, #2
 8001378:	e007      	b.n	800138a <read_switch_raw+0x62>
    if (!fwd && !rev) return SW_STATE_NEUTRAL;
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d104      	bne.n	800138a <read_switch_raw+0x62>
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <read_switch_raw+0x62>
 8001386:	2300      	movs	r3, #0
 8001388:	e7ff      	b.n	800138a <read_switch_raw+0x62>
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	40010c00 	.word	0x40010c00

08001398 <Switch_update>:
// Debounce state machine (call periodically from main loop)
switch_state_t Switch_update(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
    uint8_t TempBtnReading;
    TempBtnReading =read_switch_raw();// R_BIT(GPIOC->IDR,13); // read the state of the switch into a local variable:
 800139e:	f7ff ffc3 	bl	8001328 <read_switch_raw>
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
    if(TempBtnReading != LastBtnState) // If the switch changed, due to noise or pressing:
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <Switch_update+0x54>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d003      	beq.n	80013b8 <Switch_update+0x20>
    {
        LastDebounceTime = milli_sec_tick; // reset the debouncing timer
 80013b0:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <Switch_update+0x58>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0f      	ldr	r2, [pc, #60]	@ (80013f4 <Switch_update+0x5c>)
 80013b6:	6013      	str	r3, [r2, #0]
    }
    if((milli_sec_tick - LastDebounceTime) > DebounceDelay)
 80013b8:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <Switch_update+0x58>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <Switch_update+0x5c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	1ad2      	subs	r2, r2, r3
 80013c2:	4b0d      	ldr	r3, [pc, #52]	@ (80013f8 <Switch_update+0x60>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d907      	bls.n	80013da <Switch_update+0x42>
    {
        if(TempBtnReading != BtnState)
 80013ca:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <Switch_update+0x64>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	79fa      	ldrb	r2, [r7, #7]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d002      	beq.n	80013da <Switch_update+0x42>
        {
            BtnState = TempBtnReading;
 80013d4:	4a09      	ldr	r2, [pc, #36]	@ (80013fc <Switch_update+0x64>)
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	7013      	strb	r3, [r2, #0]
        }
    }
    LastBtnState = TempBtnReading;
 80013da:	4a04      	ldr	r2, [pc, #16]	@ (80013ec <Switch_update+0x54>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	7013      	strb	r3, [r2, #0]
    return BtnState;
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <Switch_update+0x64>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000081 	.word	0x20000081
 80013f0:	200002a4 	.word	0x200002a4
 80013f4:	2000007c 	.word	0x2000007c
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000080 	.word	0x20000080

08001400 <MX_I2C1_Init>:
 */

#include"extern_file_declarations.h"
uint8_t I2C_RX_FLAG=0,data[2];
 void MX_I2C1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001404:	4b15      	ldr	r3, [pc, #84]	@ (800145c <MX_I2C1_Init+0x5c>)
 8001406:	4a16      	ldr	r2, [pc, #88]	@ (8001460 <MX_I2C1_Init+0x60>)
 8001408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800140a:	4b14      	ldr	r3, [pc, #80]	@ (800145c <MX_I2C1_Init+0x5c>)
 800140c:	4a15      	ldr	r2, [pc, #84]	@ (8001464 <MX_I2C1_Init+0x64>)
 800140e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <MX_I2C1_Init+0x5c>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 170;
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <MX_I2C1_Init+0x5c>)
 8001418:	22aa      	movs	r2, #170	@ 0xaa
 800141a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800141c:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <MX_I2C1_Init+0x5c>)
 800141e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001422:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001424:	4b0d      	ldr	r3, [pc, #52]	@ (800145c <MX_I2C1_Init+0x5c>)
 8001426:	2200      	movs	r2, #0
 8001428:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800142a:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <MX_I2C1_Init+0x5c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001430:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <MX_I2C1_Init+0x5c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001436:	4b09      	ldr	r3, [pc, #36]	@ (800145c <MX_I2C1_Init+0x5c>)
 8001438:	2200      	movs	r2, #0
 800143a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800143c:	4807      	ldr	r0, [pc, #28]	@ (800145c <MX_I2C1_Init+0x5c>)
 800143e:	f002 ff1b 	bl	8004278 <HAL_I2C_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001448:	f001 fed2 	bl	80031f0 <Error_Handler>
  }
  HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 800144c:	2202      	movs	r2, #2
 800144e:	4906      	ldr	r1, [pc, #24]	@ (8001468 <MX_I2C1_Init+0x68>)
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <MX_I2C1_Init+0x5c>)
 8001452:	f003 f869 	bl	8004528 <HAL_I2C_Slave_Receive_IT>
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000250 	.word	0x20000250
 8001460:	40005400 	.word	0x40005400
 8001464:	00061a80 	.word	0x00061a80
 8001468:	20000084 	.word	0x20000084

0800146c <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	I2C_RX_FLAG=1;
 8001474:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_I2C_SlaveRxCpltCallback+0x20>)
 8001476:	2201      	movs	r2, #1
 8001478:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 800147a:	2202      	movs	r2, #2
 800147c:	4904      	ldr	r1, [pc, #16]	@ (8001490 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8001480:	f003 f852 	bl	8004528 <HAL_I2C_Slave_Receive_IT>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000082 	.word	0x20000082
 8001490:	20000084 	.word	0x20000084
 8001494:	20000250 	.word	0x20000250

08001498 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0c      	ldr	r2, [pc, #48]	@ (80014d8 <HAL_I2C_ErrorCallback+0x40>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d112      	bne.n	80014d0 <HAL_I2C_ErrorCallback+0x38>
        // Reset I2C if it’s stuck
        __HAL_RCC_I2C1_FORCE_RESET();
 80014aa:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <HAL_I2C_ErrorCallback+0x44>)
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	4a0b      	ldr	r2, [pc, #44]	@ (80014dc <HAL_I2C_ErrorCallback+0x44>)
 80014b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014b4:	6113      	str	r3, [r2, #16]
        __HAL_RCC_I2C1_RELEASE_RESET();
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HAL_I2C_ErrorCallback+0x44>)
 80014b8:	691b      	ldr	r3, [r3, #16]
 80014ba:	4a08      	ldr	r2, [pc, #32]	@ (80014dc <HAL_I2C_ErrorCallback+0x44>)
 80014bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80014c0:	6113      	str	r3, [r2, #16]

        MX_I2C1_Init();  // Re-init peripheral
 80014c2:	f7ff ff9d 	bl	8001400 <MX_I2C1_Init>
        HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 80014c6:	2202      	movs	r2, #2
 80014c8:	4905      	ldr	r1, [pc, #20]	@ (80014e0 <HAL_I2C_ErrorCallback+0x48>)
 80014ca:	4806      	ldr	r0, [pc, #24]	@ (80014e4 <HAL_I2C_ErrorCallback+0x4c>)
 80014cc:	f003 f82c 	bl	8004528 <HAL_I2C_Slave_Receive_IT>
    }
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40005400 	.word	0x40005400
 80014dc:	40021000 	.word	0x40021000
 80014e0:	20000084 	.word	0x20000084
 80014e4:	20000250 	.word	0x20000250

080014e8 <matel_mcu_process_can_frame>:
#include"MCU_ELECTROCATLYST.h"
#include"can.h"
#include"uart.h"

DBC_AllMessages_t msg;
void matel_mcu_process_can_frame(can_frame_t *frame){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	switch(frame->id){
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80014f8:	d073      	beq.n	80015e2 <matel_mcu_process_can_frame+0xfa>
 80014fa:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80014fe:	d871      	bhi.n	80015e4 <matel_mcu_process_can_frame+0xfc>
 8001500:	4a3a      	ldr	r2, [pc, #232]	@ (80015ec <matel_mcu_process_can_frame+0x104>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d066      	beq.n	80015d4 <matel_mcu_process_can_frame+0xec>
 8001506:	4a39      	ldr	r2, [pc, #228]	@ (80015ec <matel_mcu_process_can_frame+0x104>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d86b      	bhi.n	80015e4 <matel_mcu_process_can_frame+0xfc>
 800150c:	4a38      	ldr	r2, [pc, #224]	@ (80015f0 <matel_mcu_process_can_frame+0x108>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d059      	beq.n	80015c6 <matel_mcu_process_can_frame+0xde>
 8001512:	4a37      	ldr	r2, [pc, #220]	@ (80015f0 <matel_mcu_process_can_frame+0x108>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d865      	bhi.n	80015e4 <matel_mcu_process_can_frame+0xfc>
 8001518:	2bb3      	cmp	r3, #179	@ 0xb3
 800151a:	d82d      	bhi.n	8001578 <matel_mcu_process_can_frame+0x90>
 800151c:	2ba1      	cmp	r3, #161	@ 0xa1
 800151e:	d361      	bcc.n	80015e4 <matel_mcu_process_can_frame+0xfc>
 8001520:	3ba1      	subs	r3, #161	@ 0xa1
 8001522:	2b12      	cmp	r3, #18
 8001524:	d85e      	bhi.n	80015e4 <matel_mcu_process_can_frame+0xfc>
 8001526:	a201      	add	r2, pc, #4	@ (adr r2, 800152c <matel_mcu_process_can_frame+0x44>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	08001581 	.word	0x08001581
 8001530:	080015e5 	.word	0x080015e5
 8001534:	080015e5 	.word	0x080015e5
 8001538:	080015e5 	.word	0x080015e5
 800153c:	080015e5 	.word	0x080015e5
 8001540:	080015e5 	.word	0x080015e5
 8001544:	080015e5 	.word	0x080015e5
 8001548:	080015e5 	.word	0x080015e5
 800154c:	080015e5 	.word	0x080015e5
 8001550:	080015e5 	.word	0x080015e5
 8001554:	080015e5 	.word	0x080015e5
 8001558:	080015e5 	.word	0x080015e5
 800155c:	080015e5 	.word	0x080015e5
 8001560:	0800158f 	.word	0x0800158f
 8001564:	0800159d 	.word	0x0800159d
 8001568:	080015e5 	.word	0x080015e5
 800156c:	080015e5 	.word	0x080015e5
 8001570:	080015e5 	.word	0x080015e5
 8001574:	080015ab 	.word	0x080015ab
 8001578:	4a1e      	ldr	r2, [pc, #120]	@ (80015f4 <matel_mcu_process_can_frame+0x10c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d01c      	beq.n	80015b8 <matel_mcu_process_can_frame+0xd0>
	                                             break;
	case Matel_VECTOR__INDEPENDENT_SIG_MSG_0xC0000000:
		                                       break;
	}

}
 800157e:	e031      	b.n	80015e4 <matel_mcu_process_can_frame+0xfc>
	case Matel_MCU_POWER_CAN_STD_ID_A1:decode_MCU_POWER_One(frame->data,&msg.MCU_POWER_One);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3307      	adds	r3, #7
 8001584:	491c      	ldr	r1, [pc, #112]	@ (80015f8 <matel_mcu_process_can_frame+0x110>)
 8001586:	4618      	mov	r0, r3
 8001588:	f000 ffae 	bl	80024e8 <decode_MCU_POWER_One>
		                                break;
 800158c:	e02a      	b.n	80015e4 <matel_mcu_process_can_frame+0xfc>
	case Matel_MCU_FAULT_one_CAN_STD_ID_AE:decode_MCU_FAULT_One(frame->data, &msg.MCU_FAULT_One);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3307      	adds	r3, #7
 8001592:	491a      	ldr	r1, [pc, #104]	@ (80015fc <matel_mcu_process_can_frame+0x114>)
 8001594:	4618      	mov	r0, r3
 8001596:	f000 fb7f 	bl	8001c98 <decode_MCU_FAULT_One>
		                                  break;
 800159a:	e023      	b.n	80015e4 <matel_mcu_process_can_frame+0xfc>
	case Matel_MCU_FAULT_two_CAN_STD_ID_AF:decode_MCU_FAULT_two(frame->data,&msg.MCU_FAULT_two);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3307      	adds	r3, #7
 80015a0:	4917      	ldr	r1, [pc, #92]	@ (8001600 <matel_mcu_process_can_frame+0x118>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fcd0 	bl	8001f48 <decode_MCU_FAULT_two>
		                                  break;
 80015a8:	e01c      	b.n	80015e4 <matel_mcu_process_can_frame+0xfc>
	case Matel_MCU_Fault_Code_CAN_STD_ID_B3:decode_MCU_Fault_Code(frame->data, &msg.MCU_Fault_Code);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3307      	adds	r3, #7
 80015ae:	4915      	ldr	r1, [pc, #84]	@ (8001604 <matel_mcu_process_can_frame+0x11c>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 f98b 	bl	80018cc <decode_MCU_Fault_Code>
		                                   break;
 80015b6:	e015      	b.n	80015e4 <matel_mcu_process_can_frame+0xfc>
	case Matel_MCU_Stat_One_CAN_EXTD_ID_18265040:decode_MCU_Stat_One(frame->data, &msg.MCU_Stat_One);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3307      	adds	r3, #7
 80015bc:	4912      	ldr	r1, [pc, #72]	@ (8001608 <matel_mcu_process_can_frame+0x120>)
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fed6 	bl	8002370 <decode_MCU_Stat_One>
		                                  break;
 80015c4:	e00e      	b.n	80015e4 <matel_mcu_process_can_frame+0xfc>
	case Matel_MCU_Stat_Two_CAN_EXTD_ID_18275040:decode_MCU_Stat_Two(frame->data, &msg.MCU_Stat_Two);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3307      	adds	r3, #7
 80015ca:	4910      	ldr	r1, [pc, #64]	@ (800160c <matel_mcu_process_can_frame+0x124>)
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 f8ff 	bl	80017d0 <decode_MCU_Stat_Two>
		                                       break;
 80015d2:	e007      	b.n	80015e4 <matel_mcu_process_can_frame+0xfc>
	case Matel_MCU_HearthBeat_CAN_EXTD_ID_18963257:decode_HearthBeat(frame->data, &msg.HearthBeat);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3307      	adds	r3, #7
 80015d8:	490d      	ldr	r1, [pc, #52]	@ (8001610 <matel_mcu_process_can_frame+0x128>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 fdf8 	bl	80021d0 <decode_HearthBeat>
	                                             break;
 80015e0:	e000      	b.n	80015e4 <matel_mcu_process_can_frame+0xfc>
		                                       break;
 80015e2:	bf00      	nop
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	18963257 	.word	0x18963257
 80015f0:	18275040 	.word	0x18275040
 80015f4:	18265040 	.word	0x18265040
 80015f8:	20000228 	.word	0x20000228
 80015fc:	200001e4 	.word	0x200001e4
 8001600:	200001a8 	.word	0x200001a8
 8001604:	200000a0 	.word	0x200000a0
 8001608:	20000188 	.word	0x20000188
 800160c:	20000088 	.word	0x20000088
 8001610:	20000100 	.word	0x20000100

08001614 <extract_motorola_u64>:
	uint64_t mask = (~0ULL) << len;
	return (int64_t)(v | mask);
	}
	return (int64_t)v;
}
static uint64_t extract_motorola_u64(const uint8_t *data, int start, int len) {
 8001614:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001618:	b08b      	sub	sp, #44	@ 0x2c
 800161a:	af00      	add	r7, sp, #0
 800161c:	60f8      	str	r0, [r7, #12]
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
	if (len <= 0 || len > 64) return 0;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	dd02      	ble.n	800162e <extract_motorola_u64+0x1a>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b40      	cmp	r3, #64	@ 0x40
 800162c:	dd04      	ble.n	8001638 <extract_motorola_u64+0x24>
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	e051      	b.n	80016dc <extract_motorola_u64+0xc8>
	uint64_t value = 0;
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int cur_byte = start / 8;
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	2b00      	cmp	r3, #0
 8001648:	da00      	bge.n	800164c <extract_motorola_u64+0x38>
 800164a:	3307      	adds	r3, #7
 800164c:	10db      	asrs	r3, r3, #3
 800164e:	61fb      	str	r3, [r7, #28]
	int cur_bit = start % 8; // 7 = MSB of byte
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	425a      	negs	r2, r3
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	f002 0207 	and.w	r2, r2, #7
 800165c:	bf58      	it	pl
 800165e:	4253      	negpl	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < len; i++) {
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e033      	b.n	80016d0 <extract_motorola_u64+0xbc>
	uint8_t bit = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	74fb      	strb	r3, [r7, #19]
	if (cur_byte >= 0 && cur_byte < 8) bit = (data[cur_byte] >> cur_bit) & 1U;
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0e      	blt.n	8001690 <extract_motorola_u64+0x7c>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	2b07      	cmp	r3, #7
 8001676:	dc0b      	bgt.n	8001690 <extract_motorola_u64+0x7c>
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4413      	add	r3, r2
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	fa42 f303 	asr.w	r3, r2, r3
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	74fb      	strb	r3, [r7, #19]
	value = (value << 1) | (uint64_t)bit;
 8001690:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001694:	eb12 0a02 	adds.w	sl, r2, r2
 8001698:	eb43 0b03 	adc.w	fp, r3, r3
 800169c:	4652      	mov	r2, sl
 800169e:	465b      	mov	r3, fp
 80016a0:	7cf9      	ldrb	r1, [r7, #19]
 80016a2:	2000      	movs	r0, #0
 80016a4:	460c      	mov	r4, r1
 80016a6:	4605      	mov	r5, r0
 80016a8:	ea42 0804 	orr.w	r8, r2, r4
 80016ac:	ea43 0905 	orr.w	r9, r3, r5
 80016b0:	e9c7 8908 	strd	r8, r9, [r7, #32]
	cur_bit--;
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	61bb      	str	r3, [r7, #24]
	if (cur_bit < 0) { cur_byte++; cur_bit = 7; }
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	da04      	bge.n	80016ca <extract_motorola_u64+0xb6>
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	3301      	adds	r3, #1
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	2307      	movs	r3, #7
 80016c8:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < len; i++) {
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	dbc7      	blt.n	8001668 <extract_motorola_u64+0x54>
	}
	return value;
 80016d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	372c      	adds	r7, #44	@ 0x2c
 80016e2:	46bd      	mov	sp, r7
 80016e4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80016e8:	4770      	bx	lr

080016ea <extract_little_endian_u64>:
    uint64_t shifted = v >> start_bit;
    uint64_t mask = (length == 64) ? ~0ULL : ((1ULL << length) - 1ULL);
    return shifted & mask;
}*/

static uint64_t extract_little_endian_u64(const uint8_t *data, int start, int len) {
 80016ea:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80016ee:	b08d      	sub	sp, #52	@ 0x34
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
if (len <= 0 || len > 64) return 0;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	dd02      	ble.n	8001704 <extract_little_endian_u64+0x1a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b40      	cmp	r3, #64	@ 0x40
 8001702:	dd04      	ble.n	800170e <extract_little_endian_u64+0x24>
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	f04f 0300 	mov.w	r3, #0
 800170c:	e056      	b.n	80017bc <extract_little_endian_u64+0xd2>
uint64_t value = 0;
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
for (int i = 0; i < len; i++) {
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	@ 0x24
 800171e:	e047      	b.n	80017b0 <extract_little_endian_u64+0xc6>
int bit_index = start + i;
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	4413      	add	r3, r2
 8001726:	61fb      	str	r3, [r7, #28]
int byte_index = bit_index / 8;
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	2b00      	cmp	r3, #0
 800172c:	da00      	bge.n	8001730 <extract_little_endian_u64+0x46>
 800172e:	3307      	adds	r3, #7
 8001730:	10db      	asrs	r3, r3, #3
 8001732:	61bb      	str	r3, [r7, #24]
int bit_in_byte = bit_index % 8;
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	425a      	negs	r2, r3
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	f002 0207 	and.w	r2, r2, #7
 8001740:	bf58      	it	pl
 8001742:	4253      	negpl	r3, r2
 8001744:	617b      	str	r3, [r7, #20]
uint8_t bit = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
if (byte_index >= 0 && byte_index < 8) bit = (data[byte_index] >> bit_in_byte) & 1U;
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db0f      	blt.n	8001772 <extract_little_endian_u64+0x88>
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b07      	cmp	r3, #7
 8001756:	dc0c      	bgt.n	8001772 <extract_little_endian_u64+0x88>
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4413      	add	r3, r2
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	fa42 f303 	asr.w	r3, r2, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
value |= ((uint64_t)bit << i);
 8001772:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001776:	2200      	movs	r2, #0
 8001778:	4698      	mov	r8, r3
 800177a:	4691      	mov	r9, r2
 800177c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177e:	f1a3 0120 	sub.w	r1, r3, #32
 8001782:	f1c3 0220 	rsb	r2, r3, #32
 8001786:	fa09 f503 	lsl.w	r5, r9, r3
 800178a:	fa08 f101 	lsl.w	r1, r8, r1
 800178e:	430d      	orrs	r5, r1
 8001790:	fa28 f202 	lsr.w	r2, r8, r2
 8001794:	4315      	orrs	r5, r2
 8001796:	fa08 f403 	lsl.w	r4, r8, r3
 800179a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800179e:	ea42 0a04 	orr.w	sl, r2, r4
 80017a2:	ea43 0b05 	orr.w	fp, r3, r5
 80017a6:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
for (int i = 0; i < len; i++) {
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	3301      	adds	r3, #1
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbb3      	blt.n	8001720 <extract_little_endian_u64+0x36>
}
return value;
 80017b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
}
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	3734      	adds	r7, #52	@ 0x34
 80017c2:	46bd      	mov	sp, r7
 80017c4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80017c8:	4770      	bx	lr
 80017ca:	0000      	movs	r0, r0
 80017cc:	0000      	movs	r0, r0
	...

080017d0 <decode_MCU_Stat_Two>:

// Implementations of decode functions follow (using extract helpers)


void decode_MCU_Stat_Two(const uint8_t *data, MCU_Stat_Two_t *out) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
	if (!out) return;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d062      	beq.n	80018a6 <decode_MCU_Stat_Two+0xd6>
	uint64_t raw0 = extract_little_endian_u64(data, 32, 32);
 80017e0:	2220      	movs	r2, #32
 80017e2:	2120      	movs	r1, #32
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff80 	bl	80016ea <extract_little_endian_u64>
 80017ea:	e9c7 0106 	strd	r0, r1, [r7, #24]
	out->MCU_Odometer_Val = (double)raw0 * 0.1 + 0.0;
 80017ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80017f2:	f7fe ff5d 	bl	80006b0 <__aeabi_ul2d>
 80017f6:	a32e      	add	r3, pc, #184	@ (adr r3, 80018b0 <decode_MCU_Stat_Two+0xe0>)
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	f7fe fca8 	bl	8000150 <__aeabi_dmul>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	f7fe fdce 	bl	80003b0 <__adddf3>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	6839      	ldr	r1, [r7, #0]
 800181a:	e9c1 2300 	strd	r2, r3, [r1]
	uint64_t raw1 = extract_little_endian_u64(data, 16, 16);
 800181e:	2210      	movs	r2, #16
 8001820:	2110      	movs	r1, #16
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ff61 	bl	80016ea <extract_little_endian_u64>
 8001828:	e9c7 0104 	strd	r0, r1, [r7, #16]
	out->MCU_VCU_State = (double)raw1;
 800182c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001830:	f7fe ff3e 	bl	80006b0 <__aeabi_ul2d>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	6839      	ldr	r1, [r7, #0]
 800183a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	uint64_t raw2 = extract_little_endian_u64(data, 0, 16);
 800183e:	2210      	movs	r2, #16
 8001840:	2100      	movs	r1, #0
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ff51 	bl	80016ea <extract_little_endian_u64>
 8001848:	e9c7 0102 	strd	r0, r1, [r7, #8]
	out->MCU_Motor_RPM = (double)raw2  -16384.0;
 800184c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001850:	f7fe ff2e 	bl	80006b0 <__aeabi_ul2d>
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <decode_MCU_Stat_Two+0xe8>)
 800185a:	f7fe fda7 	bl	80003ac <__aeabi_dsub>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	6839      	ldr	r1, [r7, #0]
 8001864:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uart_print_str("\n Odometer: ");
 8001868:	4814      	ldr	r0, [pc, #80]	@ (80018bc <decode_MCU_Stat_Two+0xec>)
 800186a:	f002 f803 	bl	8003874 <uart_print_str>
	uart_send_double(out->MCU_Odometer_Val,3);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001874:	2203      	movs	r2, #3
 8001876:	f002 f813 	bl	80038a0 <uart_send_double>
	uart_print_str("\n MCU_VCU_State: ");
 800187a:	4811      	ldr	r0, [pc, #68]	@ (80018c0 <decode_MCU_Stat_Two+0xf0>)
 800187c:	f001 fffa 	bl	8003874 <uart_print_str>
	uart_send_double(out->MCU_VCU_State,3);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001886:	2203      	movs	r2, #3
 8001888:	f002 f80a 	bl	80038a0 <uart_send_double>
	uart_print_str("\n MCU_Motor_RPM :");
 800188c:	480d      	ldr	r0, [pc, #52]	@ (80018c4 <decode_MCU_Stat_Two+0xf4>)
 800188e:	f001 fff1 	bl	8003874 <uart_print_str>
	uart_send_double(out->MCU_Motor_RPM,3);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001898:	2203      	movs	r2, #3
 800189a:	f002 f801 	bl	80038a0 <uart_send_double>
	uart_print_str("\n============================================\n");
 800189e:	480a      	ldr	r0, [pc, #40]	@ (80018c8 <decode_MCU_Stat_Two+0xf8>)
 80018a0:	f001 ffe8 	bl	8003874 <uart_print_str>
 80018a4:	e000      	b.n	80018a8 <decode_MCU_Stat_Two+0xd8>
	if (!out) return;
 80018a6:	bf00      	nop
}
 80018a8:	3720      	adds	r7, #32
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	9999999a 	.word	0x9999999a
 80018b4:	3fb99999 	.word	0x3fb99999
 80018b8:	40d00000 	.word	0x40d00000
 80018bc:	080069ac 	.word	0x080069ac
 80018c0:	080069bc 	.word	0x080069bc
 80018c4:	080069d0 	.word	0x080069d0
 80018c8:	080069e4 	.word	0x080069e4

080018cc <decode_MCU_Fault_Code>:


void decode_MCU_Fault_Code(const uint8_t *data, MCU_Fault_Code_t *out) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
	if (!out) return;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 81a2 	beq.w	8001c22 <decode_MCU_Fault_Code+0x356>
	// sequential 8-bit little-endian signals
	out->MCU_Fault_Code_0 = (int)extract_motorola_u64(data, 30, 1);
 80018de:	2201      	movs	r2, #1
 80018e0:	211e      	movs	r1, #30
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff fe96 	bl	8001614 <extract_motorola_u64>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	601a      	str	r2, [r3, #0]
	out->MCU_Fault_Code_1 = (int)extract_motorola_u64(data, 31, 1);
 80018f0:	2201      	movs	r2, #1
 80018f2:	211f      	movs	r1, #31
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fe8d 	bl	8001614 <extract_motorola_u64>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	605a      	str	r2, [r3, #4]
	out->MCU_Fault_Code_2 = (int)extract_motorola_u64(data, 16,1);
 8001902:	2201      	movs	r2, #1
 8001904:	2110      	movs	r1, #16
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fe84 	bl	8001614 <extract_motorola_u64>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	609a      	str	r2, [r3, #8]
	out->MCU_Fault_Code_3 = (int)extract_motorola_u64(data, 17, 1);
 8001914:	2201      	movs	r2, #1
 8001916:	2111      	movs	r1, #17
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff fe7b 	bl	8001614 <extract_motorola_u64>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	60da      	str	r2, [r3, #12]
	out->MCU_Fault_Code_4 = (int)extract_motorola_u64(data, 18, 1);
 8001926:	2201      	movs	r2, #1
 8001928:	2112      	movs	r1, #18
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff fe72 	bl	8001614 <extract_motorola_u64>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	611a      	str	r2, [r3, #16]
	out->MCU_Fault_Code_5 = (int)extract_motorola_u64(data, 19, 1);
 8001938:	2201      	movs	r2, #1
 800193a:	2113      	movs	r1, #19
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff fe69 	bl	8001614 <extract_motorola_u64>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	615a      	str	r2, [r3, #20]
	out->MCU_Fault_Code_6 = (int)extract_motorola_u64(data, 20, 1);
 800194a:	2201      	movs	r2, #1
 800194c:	2114      	movs	r1, #20
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff fe60 	bl	8001614 <extract_motorola_u64>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	619a      	str	r2, [r3, #24]
	out->MCU_Fault_Code_7 = (int)extract_motorola_u64(data, 21, 1);
 800195c:	2201      	movs	r2, #1
 800195e:	2115      	movs	r1, #21
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff fe57 	bl	8001614 <extract_motorola_u64>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	61da      	str	r2, [r3, #28]
	out->MCU_Fault_Code_8 = (int)extract_motorola_u64(data, 22, 1);
 800196e:	2201      	movs	r2, #1
 8001970:	2116      	movs	r1, #22
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fe4e 	bl	8001614 <extract_motorola_u64>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	621a      	str	r2, [r3, #32]
	out->MCU_Fault_Code_9 = (int)extract_motorola_u64(data,23, 1);
 8001980:	2201      	movs	r2, #1
 8001982:	2117      	movs	r1, #23
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7ff fe45 	bl	8001614 <extract_motorola_u64>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	625a      	str	r2, [r3, #36]	@ 0x24
	out->MCU_Fault_Code_10 = (int)extract_motorola_u64(data, 8, 1);
 8001992:	2201      	movs	r2, #1
 8001994:	2108      	movs	r1, #8
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff fe3c 	bl	8001614 <extract_motorola_u64>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	629a      	str	r2, [r3, #40]	@ 0x28
	out->MCU_Fault_Code_11 = (int)extract_motorola_u64(data, 9, 1);
 80019a4:	2201      	movs	r2, #1
 80019a6:	2109      	movs	r1, #9
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff fe33 	bl	8001614 <extract_motorola_u64>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	62da      	str	r2, [r3, #44]	@ 0x2c
	out->MCU_Fault_Code_12 = (int)extract_motorola_u64(data, 10, 1);
 80019b6:	2201      	movs	r2, #1
 80019b8:	210a      	movs	r1, #10
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff fe2a 	bl	8001614 <extract_motorola_u64>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	631a      	str	r2, [r3, #48]	@ 0x30
	out->MCU_Fault_Code_13 = (int)extract_motorola_u64(data, 11, 1);
 80019c8:	2201      	movs	r2, #1
 80019ca:	210b      	movs	r1, #11
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff fe21 	bl	8001614 <extract_motorola_u64>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	635a      	str	r2, [r3, #52]	@ 0x34
	out->MCU_Fault_Code_14 = (int)extract_motorola_u64(data, 12, 1);
 80019da:	2201      	movs	r2, #1
 80019dc:	210c      	movs	r1, #12
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fe18 	bl	8001614 <extract_motorola_u64>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	639a      	str	r2, [r3, #56]	@ 0x38
	out->MCU_Fault_Code_15 = (int)extract_motorola_u64(data, 13, 1);
 80019ec:	2201      	movs	r2, #1
 80019ee:	210d      	movs	r1, #13
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff fe0f 	bl	8001614 <extract_motorola_u64>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	out->MCU_Fault_Code_16 = (int)extract_motorola_u64(data, 14, 1);
 80019fe:	2201      	movs	r2, #1
 8001a00:	210e      	movs	r1, #14
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff fe06 	bl	8001614 <extract_motorola_u64>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	641a      	str	r2, [r3, #64]	@ 0x40
	out->MCU_Fault_Code_17 = (int)extract_motorola_u64(data, 15, 1);
 8001a10:	2201      	movs	r2, #1
 8001a12:	210f      	movs	r1, #15
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff fdfd 	bl	8001614 <extract_motorola_u64>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	645a      	str	r2, [r3, #68]	@ 0x44
	out->MCU_Fault_Code_18 = (int)extract_motorola_u64(data, 0, 1);
 8001a22:	2201      	movs	r2, #1
 8001a24:	2100      	movs	r1, #0
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fdf4 	bl	8001614 <extract_motorola_u64>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	649a      	str	r2, [r3, #72]	@ 0x48
	out->MCU_Fault_Code_19 = (int)extract_motorola_u64(data, 7, 3);
 8001a34:	2203      	movs	r2, #3
 8001a36:	2107      	movs	r1, #7
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff fdeb 	bl	8001614 <extract_motorola_u64>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	64da      	str	r2, [r3, #76]	@ 0x4c
	out->MCU_Fault_Code_20 = (int)extract_motorola_u64(data, 1, 1);
 8001a46:	2201      	movs	r2, #1
 8001a48:	2101      	movs	r1, #1
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fde2 	bl	8001614 <extract_motorola_u64>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	651a      	str	r2, [r3, #80]	@ 0x50
	out->MCU_Fault_Code_21 = (int)extract_motorola_u64(data, 2,1);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff fdd9 	bl	8001614 <extract_motorola_u64>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	655a      	str	r2, [r3, #84]	@ 0x54
	out->MCU_Fault_Code_22 = (int)extract_motorola_u64(data, 4, 3);
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff fdd0 	bl	8001614 <extract_motorola_u64>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	659a      	str	r2, [r3, #88]	@ 0x58
	uart_print_str("\n MCU_temp_cutoff: ");
 8001a7c:	486b      	ldr	r0, [pc, #428]	@ (8001c2c <decode_MCU_Fault_Code+0x360>)
 8001a7e:	f001 fef9 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_0);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4619      	mov	r1, r3
 8001a88:	4869      	ldr	r0, [pc, #420]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001a8a:	f002 f829 	bl	8003ae0 <uart_printf>
	uart_print_str("\n motor_temp_cutoff_fault: ");
 8001a8e:	4869      	ldr	r0, [pc, #420]	@ (8001c34 <decode_MCU_Fault_Code+0x368>)
 8001a90:	f001 fef0 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_1);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4865      	ldr	r0, [pc, #404]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001a9c:	f002 f820 	bl	8003ae0 <uart_printf>
	uart_print_str("\n Motor_temp_warning");
 8001aa0:	4865      	ldr	r0, [pc, #404]	@ (8001c38 <decode_MCU_Fault_Code+0x36c>)
 8001aa2:	f001 fee7 	bl	8003874 <uart_print_str>
	uart_printf("%d",out->MCU_Fault_Code_2);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4863      	ldr	r0, [pc, #396]	@ (8001c3c <decode_MCU_Fault_Code+0x370>)
 8001aae:	f002 f817 	bl	8003ae0 <uart_printf>
	uart_print_str("\n Motor_temp_sensor_fault: ");
 8001ab2:	4863      	ldr	r0, [pc, #396]	@ (8001c40 <decode_MCU_Fault_Code+0x374>)
 8001ab4:	f001 fede 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_3);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4619      	mov	r1, r3
 8001abe:	485c      	ldr	r0, [pc, #368]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001ac0:	f002 f80e 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_Brake_STG_Fault: ");
 8001ac4:	485f      	ldr	r0, [pc, #380]	@ (8001c44 <decode_MCU_Fault_Code+0x378>)
 8001ac6:	f001 fed5 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_4);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4857      	ldr	r0, [pc, #348]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001ad2:	f002 f805 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_Brake_STB_Fault: ");
 8001ad6:	485c      	ldr	r0, [pc, #368]	@ (8001c48 <decode_MCU_Fault_Code+0x37c>)
 8001ad8:	f001 fecc 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_5);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4853      	ldr	r0, [pc, #332]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001ae4:	f001 fffc 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_Throttle2_STG_Fault: ");
 8001ae8:	4858      	ldr	r0, [pc, #352]	@ (8001c4c <decode_MCU_Fault_Code+0x380>)
 8001aea:	f001 fec3 	bl	8003874 <uart_print_str>
	uart_printf("%d \n ",out->MCU_Fault_Code_6);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	4619      	mov	r1, r3
 8001af4:	4856      	ldr	r0, [pc, #344]	@ (8001c50 <decode_MCU_Fault_Code+0x384>)
 8001af6:	f001 fff3 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_Throttle2_STB_Fault: ");
 8001afa:	4856      	ldr	r0, [pc, #344]	@ (8001c54 <decode_MCU_Fault_Code+0x388>)
 8001afc:	f001 feba 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_7);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	4619      	mov	r1, r3
 8001b06:	484a      	ldr	r0, [pc, #296]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001b08:	f001 ffea 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_Throttle1_STB_Fault: ");
 8001b0c:	4852      	ldr	r0, [pc, #328]	@ (8001c58 <decode_MCU_Fault_Code+0x38c>)
 8001b0e:	f001 feb1 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_8);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4619      	mov	r1, r3
 8001b18:	4845      	ldr	r0, [pc, #276]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001b1a:	f001 ffe1 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_Throttle1_STG_Fault");
 8001b1e:	484f      	ldr	r0, [pc, #316]	@ (8001c5c <decode_MCU_Fault_Code+0x390>)
 8001b20:	f001 fea8 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_9);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4841      	ldr	r0, [pc, #260]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001b2c:	f001 ffd8 	bl	8003ae0 <uart_printf>
	uart_print_str("\n MCU_temp_warning: ");
 8001b30:	484b      	ldr	r0, [pc, #300]	@ (8001c60 <decode_MCU_Fault_Code+0x394>)
 8001b32:	f001 fe9f 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_10);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	483c      	ldr	r0, [pc, #240]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001b3e:	f001 ffcf 	bl	8003ae0 <uart_printf>
	uart_print_str("\n MCU_temp_sensor_fault: ");
 8001b42:	4848      	ldr	r0, [pc, #288]	@ (8001c64 <decode_MCU_Fault_Code+0x398>)
 8001b44:	f001 fe96 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_11);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4838      	ldr	r0, [pc, #224]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001b50:	f001 ffc6 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_LowSOC_Fault: ");
 8001b54:	4844      	ldr	r0, [pc, #272]	@ (8001c68 <decode_MCU_Fault_Code+0x39c>)
 8001b56:	f001 fe8d 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_12);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4833      	ldr	r0, [pc, #204]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001b62:	f001 ffbd 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_AuxVoltage_cutoff: ");
 8001b66:	4841      	ldr	r0, [pc, #260]	@ (8001c6c <decode_MCU_Fault_Code+0x3a0>)
 8001b68:	f001 fe84 	bl	8003874 <uart_print_str>
	uart_printf("%d \n ",out->MCU_Fault_Code_13);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b70:	4619      	mov	r1, r3
 8001b72:	4837      	ldr	r0, [pc, #220]	@ (8001c50 <decode_MCU_Fault_Code+0x384>)
 8001b74:	f001 ffb4 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_AuxVoltage_Warning: ");
 8001b78:	483d      	ldr	r0, [pc, #244]	@ (8001c70 <decode_MCU_Fault_Code+0x3a4>)
 8001b7a:	f001 fe7b 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_14);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b82:	4619      	mov	r1, r3
 8001b84:	482a      	ldr	r0, [pc, #168]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001b86:	f001 ffab 	bl	8003ae0 <uart_printf>
	uart_print_str("\n MCU_Encoder_Fault: ");
 8001b8a:	483a      	ldr	r0, [pc, #232]	@ (8001c74 <decode_MCU_Fault_Code+0x3a8>)
 8001b8c:	f001 fe72 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_15);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b94:	4619      	mov	r1, r3
 8001b96:	4826      	ldr	r0, [pc, #152]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001b98:	f001 ffa2 	bl	8003ae0 <uart_printf>
	uart_print_str("\n MCU_FET_OPEN_FAULT: ");
 8001b9c:	4836      	ldr	r0, [pc, #216]	@ (8001c78 <decode_MCU_Fault_Code+0x3ac>)
 8001b9e:	f001 fe69 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_16);
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4821      	ldr	r0, [pc, #132]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001baa:	f001 ff99 	bl	8003ae0 <uart_printf>
	uart_print_str("\n MCU_WheelLock_Fault");
 8001bae:	4833      	ldr	r0, [pc, #204]	@ (8001c7c <decode_MCU_Fault_Code+0x3b0>)
 8001bb0:	f001 fe60 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_17);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb8:	4619      	mov	r1, r3
 8001bba:	481d      	ldr	r0, [pc, #116]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001bbc:	f001 ff90 	bl	8003ae0 <uart_printf>
	uart_print_str("\n MCU_SensorSupply_Fault: ");
 8001bc0:	482f      	ldr	r0, [pc, #188]	@ (8001c80 <decode_MCU_Fault_Code+0x3b4>)
 8001bc2:	f001 fe57 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_18);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4818      	ldr	r0, [pc, #96]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001bce:	f001 ff87 	bl	8003ae0 <uart_printf>
	uart_print_str("\n MCU_OverCurrent_Fault: ");
 8001bd2:	482c      	ldr	r0, [pc, #176]	@ (8001c84 <decode_MCU_Fault_Code+0x3b8>)
 8001bd4:	f001 fe4e 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_19);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4814      	ldr	r0, [pc, #80]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001be0:	f001 ff7e 	bl	8003ae0 <uart_printf>
	uart_print_str("\n MCU_DC_CurrSensor_Fault: ");
 8001be4:	4828      	ldr	r0, [pc, #160]	@ (8001c88 <decode_MCU_Fault_Code+0x3bc>)
 8001be6:	f001 fe45 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_20);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480f      	ldr	r0, [pc, #60]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001bf2:	f001 ff75 	bl	8003ae0 <uart_printf>
	uart_print_str("\n MCU_Foc_Fault: ");
 8001bf6:	4825      	ldr	r0, [pc, #148]	@ (8001c8c <decode_MCU_Fault_Code+0x3c0>)
 8001bf8:	f001 fe3c 	bl	8003874 <uart_print_str>
	uart_printf("%d \n ",out->MCU_Fault_Code_21);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c00:	4619      	mov	r1, r3
 8001c02:	4813      	ldr	r0, [pc, #76]	@ (8001c50 <decode_MCU_Fault_Code+0x384>)
 8001c04:	f001 ff6c 	bl	8003ae0 <uart_printf>
	uart_print_str("\n MCU_PH_Sensor_Fault: ");
 8001c08:	4821      	ldr	r0, [pc, #132]	@ (8001c90 <decode_MCU_Fault_Code+0x3c4>)
 8001c0a:	f001 fe33 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Fault_Code_22);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c12:	4619      	mov	r1, r3
 8001c14:	4806      	ldr	r0, [pc, #24]	@ (8001c30 <decode_MCU_Fault_Code+0x364>)
 8001c16:	f001 ff63 	bl	8003ae0 <uart_printf>
	uart_print_str("\n============================================\n");
 8001c1a:	481e      	ldr	r0, [pc, #120]	@ (8001c94 <decode_MCU_Fault_Code+0x3c8>)
 8001c1c:	f001 fe2a 	bl	8003874 <uart_print_str>
 8001c20:	e000      	b.n	8001c24 <decode_MCU_Fault_Code+0x358>
	if (!out) return;
 8001c22:	bf00      	nop
}
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	08006a14 	.word	0x08006a14
 8001c30:	08006a28 	.word	0x08006a28
 8001c34:	08006a2c 	.word	0x08006a2c
 8001c38:	08006a48 	.word	0x08006a48
 8001c3c:	08006a60 	.word	0x08006a60
 8001c40:	08006a64 	.word	0x08006a64
 8001c44:	08006a80 	.word	0x08006a80
 8001c48:	08006a98 	.word	0x08006a98
 8001c4c:	08006ab0 	.word	0x08006ab0
 8001c50:	08006acc 	.word	0x08006acc
 8001c54:	08006ad4 	.word	0x08006ad4
 8001c58:	08006af0 	.word	0x08006af0
 8001c5c:	08006b0c 	.word	0x08006b0c
 8001c60:	08006b28 	.word	0x08006b28
 8001c64:	08006b40 	.word	0x08006b40
 8001c68:	08006b5c 	.word	0x08006b5c
 8001c6c:	08006b74 	.word	0x08006b74
 8001c70:	08006b90 	.word	0x08006b90
 8001c74:	08006bac 	.word	0x08006bac
 8001c78:	08006bc4 	.word	0x08006bc4
 8001c7c:	08006bdc 	.word	0x08006bdc
 8001c80:	08006bf4 	.word	0x08006bf4
 8001c84:	08006c10 	.word	0x08006c10
 8001c88:	08006c2c 	.word	0x08006c2c
 8001c8c:	08006c48 	.word	0x08006c48
 8001c90:	08006c5c 	.word	0x08006c5c
 8001c94:	080069e4 	.word	0x080069e4

08001c98 <decode_MCU_FAULT_One>:
void decode_MCU_FAULT_One(const uint8_t *data, MCU_FAULT_One_t *out) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
if (!out) return;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 8124 	beq.w	8001ef2 <decode_MCU_FAULT_One+0x25a>
out->MCU_FAULT_One_sig0 = (int)extract_motorola_u64(data, 27, 1);
 8001caa:	2201      	movs	r2, #1
 8001cac:	211b      	movs	r1, #27
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fcb0 	bl	8001614 <extract_motorola_u64>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	601a      	str	r2, [r3, #0]
out->MCU_FAULT_One_sig1 = (int)extract_motorola_u64(data, 28, 1);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	211c      	movs	r1, #28
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff fca7 	bl	8001614 <extract_motorola_u64>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
out->MCU_FAULT_One_sig2 = (int)extract_motorola_u64(data, 39, 1);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	2127      	movs	r1, #39	@ 0x27
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff fc9e 	bl	8001614 <extract_motorola_u64>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	609a      	str	r2, [r3, #8]
out->MCU_FAULT_One_sig3 = (int)extract_motorola_u64(data, 4, 1);
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff fc95 	bl	8001614 <extract_motorola_u64>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	60da      	str	r2, [r3, #12]
out->MCU_FAULT_One_sig4 = (int)extract_motorola_u64(data, 2, 1);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fc8c 	bl	8001614 <extract_motorola_u64>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	611a      	str	r2, [r3, #16]
out->MCU_FAULT_One_sig5 = (int)extract_motorola_u64(data, 18, 6);
 8001d04:	2206      	movs	r2, #6
 8001d06:	2112      	movs	r1, #18
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff fc83 	bl	8001614 <extract_motorola_u64>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	615a      	str	r2, [r3, #20]
out->MCU_FAULT_One_sig6 = (int)extract_motorola_u64(data, 6, 1);
 8001d16:	2201      	movs	r2, #1
 8001d18:	2106      	movs	r1, #6
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff fc7a 	bl	8001614 <extract_motorola_u64>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	619a      	str	r2, [r3, #24]
out->MCU_FAULT_One_sig7 = (int)extract_motorola_u64(data, 9, 2);
 8001d28:	2202      	movs	r2, #2
 8001d2a:	2109      	movs	r1, #9
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff fc71 	bl	8001614 <extract_motorola_u64>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	61da      	str	r2, [r3, #28]
out->MCU_FAULT_One_sig8 = (int)extract_motorola_u64(data, 11, 2);
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	210b      	movs	r1, #11
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fc68 	bl	8001614 <extract_motorola_u64>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	621a      	str	r2, [r3, #32]
out->MCU_FAULT_One_sig9 = (int)extract_motorola_u64(data, 1, 1);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2101      	movs	r1, #1
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff fc5f 	bl	8001614 <extract_motorola_u64>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	625a      	str	r2, [r3, #36]	@ 0x24
out->MCU_FAULT_One_sig10 = (int)extract_motorola_u64(data, 21, 1);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	2115      	movs	r1, #21
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff fc56 	bl	8001614 <extract_motorola_u64>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	629a      	str	r2, [r3, #40]	@ 0x28
out->MCU_FAULT_One_sig11 = (int)extract_motorola_u64(data, 7, 1);
 8001d70:	2201      	movs	r2, #1
 8001d72:	2107      	movs	r1, #7
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f7ff fc4d 	bl	8001614 <extract_motorola_u64>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c
out->MCU_FAULT_One_sig12 = (int)extract_motorola_u64(data, 15, 4);
 8001d82:	2204      	movs	r2, #4
 8001d84:	210f      	movs	r1, #15
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff fc44 	bl	8001614 <extract_motorola_u64>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	631a      	str	r2, [r3, #48]	@ 0x30
out->MCU_FAULT_One_sig13 = (int)extract_motorola_u64(data, 23, 2);
 8001d94:	2202      	movs	r2, #2
 8001d96:	2117      	movs	r1, #23
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff fc3b 	bl	8001614 <extract_motorola_u64>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	635a      	str	r2, [r3, #52]	@ 0x34
out->MCU_FAULT_One_sig14 = (int)extract_motorola_u64(data, 3, 1);
 8001da6:	2201      	movs	r2, #1
 8001da8:	2103      	movs	r1, #3
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff fc32 	bl	8001614 <extract_motorola_u64>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	639a      	str	r2, [r3, #56]	@ 0x38
out->MCU_FAULT_One_sig15 = (int)extract_motorola_u64(data, 5, 1);
 8001db8:	2201      	movs	r2, #1
 8001dba:	2105      	movs	r1, #5
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff fc29 	bl	8001614 <extract_motorola_u64>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
uart_print_str("\n HW_ASC_st_b: ");
 8001dca:	484c      	ldr	r0, [pc, #304]	@ (8001efc <decode_MCU_FAULT_One+0x264>)
 8001dcc:	f001 fd52 	bl	8003874 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig0);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	484a      	ldr	r0, [pc, #296]	@ (8001f00 <decode_MCU_FAULT_One+0x268>)
 8001dd8:	f001 fe82 	bl	8003ae0 <uart_printf>
uart_print_str("\n MCU_FET_OPEN_FAULT: ");
 8001ddc:	4849      	ldr	r0, [pc, #292]	@ (8001f04 <decode_MCU_FAULT_One+0x26c>)
 8001dde:	f001 fd49 	bl	8003874 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig1);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4619      	mov	r1, r3
 8001de8:	4845      	ldr	r0, [pc, #276]	@ (8001f00 <decode_MCU_FAULT_One+0x268>)
 8001dea:	f001 fe79 	bl	8003ae0 <uart_printf>
uart_print_str("\n MCU_DCDCCONV_Fault_St_B");
 8001dee:	4846      	ldr	r0, [pc, #280]	@ (8001f08 <decode_MCU_FAULT_One+0x270>)
 8001df0:	f001 fd40 	bl	8003874 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig2);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4841      	ldr	r0, [pc, #260]	@ (8001f00 <decode_MCU_FAULT_One+0x268>)
 8001dfc:	f001 fe70 	bl	8003ae0 <uart_printf>
uart_print_str("\n MCU_BatteryUV_St_B: ");
 8001e00:	4842      	ldr	r0, [pc, #264]	@ (8001f0c <decode_MCU_FAULT_One+0x274>)
 8001e02:	f001 fd37 	bl	8003874 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig3);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	483c      	ldr	r0, [pc, #240]	@ (8001f00 <decode_MCU_FAULT_One+0x268>)
 8001e0e:	f001 fe67 	bl	8003ae0 <uart_printf>
uart_print_str("\n MCU_VCUFault_St_B: ");
 8001e12:	483f      	ldr	r0, [pc, #252]	@ (8001f10 <decode_MCU_FAULT_One+0x278>)
 8001e14:	f001 fd2e 	bl	8003874 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig4);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4838      	ldr	r0, [pc, #224]	@ (8001f00 <decode_MCU_FAULT_One+0x268>)
 8001e20:	f001 fe5e 	bl	8003ae0 <uart_printf>
uart_print_str("\n MCU_PhaseISensorFault_enum: ");
 8001e24:	483b      	ldr	r0, [pc, #236]	@ (8001f14 <decode_MCU_FAULT_One+0x27c>)
 8001e26:	f001 fd25 	bl	8003874 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig5);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4833      	ldr	r0, [pc, #204]	@ (8001f00 <decode_MCU_FAULT_One+0x268>)
 8001e32:	f001 fe55 	bl	8003ae0 <uart_printf>
uart_print_str("\n MCU_SpeedFault_St_B: ");
 8001e36:	4838      	ldr	r0, [pc, #224]	@ (8001f18 <decode_MCU_FAULT_One+0x280>)
 8001e38:	f001 fd1c 	bl	8003874 <uart_print_str>
uart_printf("%d \n ",out->MCU_FAULT_One_sig6);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	4619      	mov	r1, r3
 8001e42:	4836      	ldr	r0, [pc, #216]	@ (8001f1c <decode_MCU_FAULT_One+0x284>)
 8001e44:	f001 fe4c 	bl	8003ae0 <uart_printf>
uart_print_str("\n MCU_SensorSupplyFault_enum: ");
 8001e48:	4835      	ldr	r0, [pc, #212]	@ (8001f20 <decode_MCU_FAULT_One+0x288>)
 8001e4a:	f001 fd13 	bl	8003874 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig7);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	4619      	mov	r1, r3
 8001e54:	482a      	ldr	r0, [pc, #168]	@ (8001f00 <decode_MCU_FAULT_One+0x268>)
 8001e56:	f001 fe43 	bl	8003ae0 <uart_printf>
uart_print_str("\n MCU_PhFault_enum: ");
 8001e5a:	4832      	ldr	r0, [pc, #200]	@ (8001f24 <decode_MCU_FAULT_One+0x28c>)
 8001e5c:	f001 fd0a 	bl	8003874 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig8);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4619      	mov	r1, r3
 8001e66:	4826      	ldr	r0, [pc, #152]	@ (8001f00 <decode_MCU_FAULT_One+0x268>)
 8001e68:	f001 fe3a 	bl	8003ae0 <uart_printf>
uart_print_str("\n MCU_PhaseSensorFault_enum");
 8001e6c:	482e      	ldr	r0, [pc, #184]	@ (8001f28 <decode_MCU_FAULT_One+0x290>)
 8001e6e:	f001 fd01 	bl	8003874 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig9);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e76:	4619      	mov	r1, r3
 8001e78:	4821      	ldr	r0, [pc, #132]	@ (8001f00 <decode_MCU_FAULT_One+0x268>)
 8001e7a:	f001 fe31 	bl	8003ae0 <uart_printf>
uart_print_str("\n MCU_OverCurrentFault_enum: ");
 8001e7e:	482b      	ldr	r0, [pc, #172]	@ (8001f2c <decode_MCU_FAULT_One+0x294>)
 8001e80:	f001 fcf8 	bl	8003874 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig10);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e88:	4619      	mov	r1, r3
 8001e8a:	481d      	ldr	r0, [pc, #116]	@ (8001f00 <decode_MCU_FAULT_One+0x268>)
 8001e8c:	f001 fe28 	bl	8003ae0 <uart_printf>
uart_print_str("\n MCU_FOCFault_St_B: ");
 8001e90:	4827      	ldr	r0, [pc, #156]	@ (8001f30 <decode_MCU_FAULT_One+0x298>)
 8001e92:	f001 fcef 	bl	8003874 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig11);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4818      	ldr	r0, [pc, #96]	@ (8001f00 <decode_MCU_FAULT_One+0x268>)
 8001e9e:	f001 fe1f 	bl	8003ae0 <uart_printf>
uart_print_str("\n MCU_EncoderFault_enum: ");
 8001ea2:	4824      	ldr	r0, [pc, #144]	@ (8001f34 <decode_MCU_FAULT_One+0x29c>)
 8001ea4:	f001 fce6 	bl	8003874 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig12);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eac:	4619      	mov	r1, r3
 8001eae:	4814      	ldr	r0, [pc, #80]	@ (8001f00 <decode_MCU_FAULT_One+0x268>)
 8001eb0:	f001 fe16 	bl	8003ae0 <uart_printf>
uart_print_str("\n MCU_DC_ISensorFault_St_B: ");
 8001eb4:	4820      	ldr	r0, [pc, #128]	@ (8001f38 <decode_MCU_FAULT_One+0x2a0>)
 8001eb6:	f001 fcdd 	bl	8003874 <uart_print_str>
uart_printf("%d \n ",out->MCU_FAULT_One_sig13);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4816      	ldr	r0, [pc, #88]	@ (8001f1c <decode_MCU_FAULT_One+0x284>)
 8001ec2:	f001 fe0d 	bl	8003ae0 <uart_printf>
uart_print_str("\n MCU_ChargerFault_St_B: ");
 8001ec6:	481d      	ldr	r0, [pc, #116]	@ (8001f3c <decode_MCU_FAULT_One+0x2a4>)
 8001ec8:	f001 fcd4 	bl	8003874 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig14);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	480b      	ldr	r0, [pc, #44]	@ (8001f00 <decode_MCU_FAULT_One+0x268>)
 8001ed4:	f001 fe04 	bl	8003ae0 <uart_printf>
uart_print_str("\n MCU_BatOVFault_St_B: ");
 8001ed8:	4819      	ldr	r0, [pc, #100]	@ (8001f40 <decode_MCU_FAULT_One+0x2a8>)
 8001eda:	f001 fccb 	bl	8003874 <uart_print_str>
uart_printf("%d ",out->MCU_FAULT_One_sig15);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4806      	ldr	r0, [pc, #24]	@ (8001f00 <decode_MCU_FAULT_One+0x268>)
 8001ee6:	f001 fdfb 	bl	8003ae0 <uart_printf>
uart_print_str("\n============================================\n");
 8001eea:	4816      	ldr	r0, [pc, #88]	@ (8001f44 <decode_MCU_FAULT_One+0x2ac>)
 8001eec:	f001 fcc2 	bl	8003874 <uart_print_str>
 8001ef0:	e000      	b.n	8001ef4 <decode_MCU_FAULT_One+0x25c>
if (!out) return;
 8001ef2:	bf00      	nop
}
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	08006c74 	.word	0x08006c74
 8001f00:	08006a28 	.word	0x08006a28
 8001f04:	08006bc4 	.word	0x08006bc4
 8001f08:	08006c84 	.word	0x08006c84
 8001f0c:	08006ca0 	.word	0x08006ca0
 8001f10:	08006cb8 	.word	0x08006cb8
 8001f14:	08006cd0 	.word	0x08006cd0
 8001f18:	08006cf0 	.word	0x08006cf0
 8001f1c:	08006acc 	.word	0x08006acc
 8001f20:	08006d08 	.word	0x08006d08
 8001f24:	08006d28 	.word	0x08006d28
 8001f28:	08006d40 	.word	0x08006d40
 8001f2c:	08006d5c 	.word	0x08006d5c
 8001f30:	08006d7c 	.word	0x08006d7c
 8001f34:	08006d94 	.word	0x08006d94
 8001f38:	08006db0 	.word	0x08006db0
 8001f3c:	08006dd0 	.word	0x08006dd0
 8001f40:	08006dec 	.word	0x08006dec
 8001f44:	080069e4 	.word	0x080069e4

08001f48 <decode_MCU_FAULT_two>:
void decode_MCU_FAULT_two(const uint8_t *data, MCU_FAULT_two_t *out) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
if (!out) return;
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f000 8112 	beq.w	800217e <decode_MCU_FAULT_two+0x236>
	out->MCU_FAULT_two_sig0 = (int)extract_motorola_u64(data, 9, 3);
 8001f5a:	2203      	movs	r2, #3
 8001f5c:	2109      	movs	r1, #9
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff fb58 	bl	8001614 <extract_motorola_u64>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	601a      	str	r2, [r3, #0]
	out->MCU_FAULT_two_sig1 = (int)extract_motorola_u64(data, 10, 1);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	210a      	movs	r1, #10
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff fb4f 	bl	8001614 <extract_motorola_u64>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
	out->MCU_FAULT_two_sig2 = (int)extract_motorola_u64(data, 11, 1);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	210b      	movs	r1, #11
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff fb46 	bl	8001614 <extract_motorola_u64>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	609a      	str	r2, [r3, #8]
	out->MCU_FAULT_two_sig3 = (int)extract_motorola_u64(data, 12, 1);
 8001f90:	2201      	movs	r2, #1
 8001f92:	210c      	movs	r1, #12
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff fb3d 	bl	8001614 <extract_motorola_u64>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	60da      	str	r2, [r3, #12]
	out->MCU_FAULT_two_sig4 = (int)extract_motorola_u64(data, 13, 1);
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	210d      	movs	r1, #13
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fb34 	bl	8001614 <extract_motorola_u64>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	611a      	str	r2, [r3, #16]
	out->MCU_FAULT_two_sig5 = (int)extract_motorola_u64(data, 14, 1);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	210e      	movs	r1, #14
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff fb2b 	bl	8001614 <extract_motorola_u64>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	615a      	str	r2, [r3, #20]
	out->MCU_FAULT_two_sig6 = (int)extract_motorola_u64(data, 15, 1);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	210f      	movs	r1, #15
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff fb22 	bl	8001614 <extract_motorola_u64>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	619a      	str	r2, [r3, #24]
	out->MCU_FAULT_two_sig7 = (int)extract_motorola_u64(data, 0, 1);
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2100      	movs	r1, #0
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff fb19 	bl	8001614 <extract_motorola_u64>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	61da      	str	r2, [r3, #28]
	out->MCU_FAULT_two_sig8 = (int)extract_motorola_u64(data, 1, 1);
 8001fea:	2201      	movs	r2, #1
 8001fec:	2101      	movs	r1, #1
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fb10 	bl	8001614 <extract_motorola_u64>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	621a      	str	r2, [r3, #32]
	out->MCU_FAULT_two_sig9 = (int)extract_motorola_u64(data, 2, 1);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2102      	movs	r1, #2
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff fb07 	bl	8001614 <extract_motorola_u64>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	625a      	str	r2, [r3, #36]	@ 0x24
	out->MCU_FAULT_two_sig10 = (int)extract_motorola_u64(data, 3, 1);
 800200e:	2201      	movs	r2, #1
 8002010:	2103      	movs	r1, #3
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff fafe 	bl	8001614 <extract_motorola_u64>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	629a      	str	r2, [r3, #40]	@ 0x28
	out->MCU_FAULT_two_sig11 = (int)extract_motorola_u64(data, 4, 1);
 8002020:	2201      	movs	r2, #1
 8002022:	2104      	movs	r1, #4
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff faf5 	bl	8001614 <extract_motorola_u64>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	62da      	str	r2, [r3, #44]	@ 0x2c
	out->MCU_FAULT_two_sig12 = (int)extract_motorola_u64(data, 5, 1);
 8002032:	2201      	movs	r2, #1
 8002034:	2105      	movs	r1, #5
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7ff faec 	bl	8001614 <extract_motorola_u64>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	631a      	str	r2, [r3, #48]	@ 0x30
	out->MCU_FAULT_two_sig13 = (int)extract_motorola_u64(data, 6, 1);
 8002044:	2201      	movs	r2, #1
 8002046:	2106      	movs	r1, #6
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7ff fae3 	bl	8001614 <extract_motorola_u64>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	635a      	str	r2, [r3, #52]	@ 0x34
	out->MCU_FAULT_two_sig14 = (int)extract_motorola_u64(data, 7, 1);
 8002056:	2201      	movs	r2, #1
 8002058:	2107      	movs	r1, #7
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fada 	bl	8001614 <extract_motorola_u64>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	639a      	str	r2, [r3, #56]	@ 0x38
	uart_print_str("\n VCU_BFNRFault_St_B: ");
 8002068:	4847      	ldr	r0, [pc, #284]	@ (8002188 <decode_MCU_FAULT_two+0x240>)
 800206a:	f001 fc03 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig0);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4619      	mov	r1, r3
 8002074:	4845      	ldr	r0, [pc, #276]	@ (800218c <decode_MCU_FAULT_two+0x244>)
 8002076:	f001 fd33 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_DCDCEnableFault_St_B: ");
 800207a:	4845      	ldr	r0, [pc, #276]	@ (8002190 <decode_MCU_FAULT_two+0x248>)
 800207c:	f001 fbfa 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig1);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4619      	mov	r1, r3
 8002086:	4841      	ldr	r0, [pc, #260]	@ (800218c <decode_MCU_FAULT_two+0x244>)
 8002088:	f001 fd2a 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_ThrottleMismatch_St_B");
 800208c:	4841      	ldr	r0, [pc, #260]	@ (8002194 <decode_MCU_FAULT_two+0x24c>)
 800208e:	f001 fbf1 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig2);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	4619      	mov	r1, r3
 8002098:	483c      	ldr	r0, [pc, #240]	@ (800218c <decode_MCU_FAULT_two+0x244>)
 800209a:	f001 fd21 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_LowSOC_Fault_St_B: ");
 800209e:	483e      	ldr	r0, [pc, #248]	@ (8002198 <decode_MCU_FAULT_two+0x250>)
 80020a0:	f001 fbe8 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig3);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4619      	mov	r1, r3
 80020aa:	4838      	ldr	r0, [pc, #224]	@ (800218c <decode_MCU_FAULT_two+0x244>)
 80020ac:	f001 fd18 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_LowSOC_Warning_St_B: ");
 80020b0:	483a      	ldr	r0, [pc, #232]	@ (800219c <decode_MCU_FAULT_two+0x254>)
 80020b2:	f001 fbdf 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig4);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	4619      	mov	r1, r3
 80020bc:	4833      	ldr	r0, [pc, #204]	@ (800218c <decode_MCU_FAULT_two+0x244>)
 80020be:	f001 fd0f 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_AuxBatteryUV_Fault_St_B: ");
 80020c2:	4837      	ldr	r0, [pc, #220]	@ (80021a0 <decode_MCU_FAULT_two+0x258>)
 80020c4:	f001 fbd6 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig5);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	4619      	mov	r1, r3
 80020ce:	482f      	ldr	r0, [pc, #188]	@ (800218c <decode_MCU_FAULT_two+0x244>)
 80020d0:	f001 fd06 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_AuxVoltageUV_Warning_St_B: ");
 80020d4:	4833      	ldr	r0, [pc, #204]	@ (80021a4 <decode_MCU_FAULT_two+0x25c>)
 80020d6:	f001 fbcd 	bl	8003874 <uart_print_str>
	uart_printf("%d \n ",out->MCU_FAULT_two_sig6);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	4619      	mov	r1, r3
 80020e0:	4831      	ldr	r0, [pc, #196]	@ (80021a8 <decode_MCU_FAULT_two+0x260>)
 80020e2:	f001 fcfd 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_OverSpeed_Fault_St_B: ");
 80020e6:	4831      	ldr	r0, [pc, #196]	@ (80021ac <decode_MCU_FAULT_two+0x264>)
 80020e8:	f001 fbc4 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig7);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	4619      	mov	r1, r3
 80020f2:	4826      	ldr	r0, [pc, #152]	@ (800218c <decode_MCU_FAULT_two+0x244>)
 80020f4:	f001 fcf4 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_OverSpeed_Warning_St_B: ");
 80020f8:	482d      	ldr	r0, [pc, #180]	@ (80021b0 <decode_MCU_FAULT_two+0x268>)
 80020fa:	f001 fbbb 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig8);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	4619      	mov	r1, r3
 8002104:	4821      	ldr	r0, [pc, #132]	@ (800218c <decode_MCU_FAULT_two+0x244>)
 8002106:	f001 fceb 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_Brake_STB_St_B");
 800210a:	482a      	ldr	r0, [pc, #168]	@ (80021b4 <decode_MCU_FAULT_two+0x26c>)
 800210c:	f001 fbb2 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig9);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002114:	4619      	mov	r1, r3
 8002116:	481d      	ldr	r0, [pc, #116]	@ (800218c <decode_MCU_FAULT_two+0x244>)
 8002118:	f001 fce2 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_Brake_STG_St_B: ");
 800211c:	4826      	ldr	r0, [pc, #152]	@ (80021b8 <decode_MCU_FAULT_two+0x270>)
 800211e:	f001 fba9 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig10);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	4619      	mov	r1, r3
 8002128:	4818      	ldr	r0, [pc, #96]	@ (800218c <decode_MCU_FAULT_two+0x244>)
 800212a:	f001 fcd9 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_Throttle2_STB_St_B: ");
 800212e:	4823      	ldr	r0, [pc, #140]	@ (80021bc <decode_MCU_FAULT_two+0x274>)
 8002130:	f001 fba0 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig11);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	4619      	mov	r1, r3
 800213a:	4814      	ldr	r0, [pc, #80]	@ (800218c <decode_MCU_FAULT_two+0x244>)
 800213c:	f001 fcd0 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_Throttle2_STG_St_B: ");
 8002140:	481f      	ldr	r0, [pc, #124]	@ (80021c0 <decode_MCU_FAULT_two+0x278>)
 8002142:	f001 fb97 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig12);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	4619      	mov	r1, r3
 800214c:	480f      	ldr	r0, [pc, #60]	@ (800218c <decode_MCU_FAULT_two+0x244>)
 800214e:	f001 fcc7 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_Throttle1_STB_St_B: ");
 8002152:	481c      	ldr	r0, [pc, #112]	@ (80021c4 <decode_MCU_FAULT_two+0x27c>)
 8002154:	f001 fb8e 	bl	8003874 <uart_print_str>
	uart_printf("%d \n ",out->MCU_FAULT_two_sig13);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800215c:	4619      	mov	r1, r3
 800215e:	4812      	ldr	r0, [pc, #72]	@ (80021a8 <decode_MCU_FAULT_two+0x260>)
 8002160:	f001 fcbe 	bl	8003ae0 <uart_printf>
	uart_print_str("\n VCU_Throttle1_STG_St_B: ");
 8002164:	4818      	ldr	r0, [pc, #96]	@ (80021c8 <decode_MCU_FAULT_two+0x280>)
 8002166:	f001 fb85 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_FAULT_two_sig14);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216e:	4619      	mov	r1, r3
 8002170:	4806      	ldr	r0, [pc, #24]	@ (800218c <decode_MCU_FAULT_two+0x244>)
 8002172:	f001 fcb5 	bl	8003ae0 <uart_printf>
	uart_print_str("\n============================================\n");
 8002176:	4815      	ldr	r0, [pc, #84]	@ (80021cc <decode_MCU_FAULT_two+0x284>)
 8002178:	f001 fb7c 	bl	8003874 <uart_print_str>
 800217c:	e000      	b.n	8002180 <decode_MCU_FAULT_two+0x238>
if (!out) return;
 800217e:	bf00      	nop
}
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	08006e04 	.word	0x08006e04
 800218c:	08006a28 	.word	0x08006a28
 8002190:	08006e1c 	.word	0x08006e1c
 8002194:	08006e3c 	.word	0x08006e3c
 8002198:	08006e58 	.word	0x08006e58
 800219c:	08006e74 	.word	0x08006e74
 80021a0:	08006e90 	.word	0x08006e90
 80021a4:	08006eb0 	.word	0x08006eb0
 80021a8:	08006acc 	.word	0x08006acc
 80021ac:	08006ed4 	.word	0x08006ed4
 80021b0:	08006ef4 	.word	0x08006ef4
 80021b4:	08006f14 	.word	0x08006f14
 80021b8:	08006f2c 	.word	0x08006f2c
 80021bc:	08006f44 	.word	0x08006f44
 80021c0:	08006f60 	.word	0x08006f60
 80021c4:	08006f7c 	.word	0x08006f7c
 80021c8:	08006f98 	.word	0x08006f98
 80021cc:	080069e4 	.word	0x080069e4

080021d0 <decode_HearthBeat>:
void decode_HearthBeat(const uint8_t *data, HearthBeat_t *out) {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
if (!out) return;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80c1 	beq.w	8002364 <decode_HearthBeat+0x194>
out->HeartBeat_Stat0 = (double)extract_little_endian_u64(data, 0, 1);
 80021e2:	2201      	movs	r2, #1
 80021e4:	2100      	movs	r1, #0
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fa7f 	bl	80016ea <extract_little_endian_u64>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	f7fe fa5c 	bl	80006b0 <__aeabi_ul2d>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	6839      	ldr	r1, [r7, #0]
 80021fe:	e9c1 2300 	strd	r2, r3, [r1]
out->HeartBeat_Stat1 = (double)extract_little_endian_u64(data, 1, 1);
 8002202:	2201      	movs	r2, #1
 8002204:	2101      	movs	r1, #1
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff fa6f 	bl	80016ea <extract_little_endian_u64>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fa4c 	bl	80006b0 <__aeabi_ul2d>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	6839      	ldr	r1, [r7, #0]
 800221e:	e9c1 2302 	strd	r2, r3, [r1, #8]
out->HeartBeat_Stat2 = (double)extract_little_endian_u64(data, 2, 1);
 8002222:	2201      	movs	r2, #1
 8002224:	2102      	movs	r1, #2
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff fa5f 	bl	80016ea <extract_little_endian_u64>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f7fe fa3c 	bl	80006b0 <__aeabi_ul2d>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	6839      	ldr	r1, [r7, #0]
 800223e:	e9c1 2304 	strd	r2, r3, [r1, #16]
out->HeartBeat_Stat3 = (double)extract_little_endian_u64(data, 3, 1);
 8002242:	2201      	movs	r2, #1
 8002244:	2103      	movs	r1, #3
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fa4f 	bl	80016ea <extract_little_endian_u64>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	f7fe fa2c 	bl	80006b0 <__aeabi_ul2d>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	6839      	ldr	r1, [r7, #0]
 800225e:	e9c1 2306 	strd	r2, r3, [r1, #24]
out->HeartBeat_Stat4 = (double)extract_little_endian_u64(data, 4, 1);
 8002262:	2201      	movs	r2, #1
 8002264:	2104      	movs	r1, #4
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fa3f 	bl	80016ea <extract_little_endian_u64>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fa1c 	bl	80006b0 <__aeabi_ul2d>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	6839      	ldr	r1, [r7, #0]
 800227e:	e9c1 2308 	strd	r2, r3, [r1, #32]
out->HeartBeat_Stat5 = (double)extract_little_endian_u64(data, 5, 1);
 8002282:	2201      	movs	r2, #1
 8002284:	2105      	movs	r1, #5
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fa2f 	bl	80016ea <extract_little_endian_u64>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4610      	mov	r0, r2
 8002292:	4619      	mov	r1, r3
 8002294:	f7fe fa0c 	bl	80006b0 <__aeabi_ul2d>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	6839      	ldr	r1, [r7, #0]
 800229e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
out->HeartBeat_Stat6 = (double)extract_little_endian_u64(data, 6, 1);
 80022a2:	2201      	movs	r2, #1
 80022a4:	2106      	movs	r1, #6
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff fa1f 	bl	80016ea <extract_little_endian_u64>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4610      	mov	r0, r2
 80022b2:	4619      	mov	r1, r3
 80022b4:	f7fe f9fc 	bl	80006b0 <__aeabi_ul2d>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	6839      	ldr	r1, [r7, #0]
 80022be:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
out->HeartBeat_Stat7 = (double)extract_little_endian_u64(data, 7, 1);
 80022c2:	2201      	movs	r2, #1
 80022c4:	2107      	movs	r1, #7
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fa0f 	bl	80016ea <extract_little_endian_u64>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f7fe f9ec 	bl	80006b0 <__aeabi_ul2d>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	6839      	ldr	r1, [r7, #0]
 80022de:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
out->HeartBeat_Stat8 = (double)extract_little_endian_u64(data, 8, 1);
 80022e2:	2201      	movs	r2, #1
 80022e4:	2108      	movs	r1, #8
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff f9ff 	bl	80016ea <extract_little_endian_u64>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7fe f9dc 	bl	80006b0 <__aeabi_ul2d>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	6839      	ldr	r1, [r7, #0]
 80022fe:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
out->HeartBeat_Stat9 = (double)extract_little_endian_u64(data, 9, 1);
 8002302:	2201      	movs	r2, #1
 8002304:	2109      	movs	r1, #9
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff f9ef 	bl	80016ea <extract_little_endian_u64>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4610      	mov	r0, r2
 8002312:	4619      	mov	r1, r3
 8002314:	f7fe f9cc 	bl	80006b0 <__aeabi_ul2d>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	6839      	ldr	r1, [r7, #0]
 800231e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
out->HeartBeat_Stat10 = (double)extract_little_endian_u64(data, 10, 1);
 8002322:	2201      	movs	r2, #1
 8002324:	210a      	movs	r1, #10
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff f9df 	bl	80016ea <extract_little_endian_u64>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	f7fe f9bc 	bl	80006b0 <__aeabi_ul2d>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	6839      	ldr	r1, [r7, #0]
 800233e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
out->HeartBeat_Stat11 = (double)extract_little_endian_u64(data, 11, 1);
 8002342:	2201      	movs	r2, #1
 8002344:	210b      	movs	r1, #11
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff f9cf 	bl	80016ea <extract_little_endian_u64>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4610      	mov	r0, r2
 8002352:	4619      	mov	r1, r3
 8002354:	f7fe f9ac 	bl	80006b0 <__aeabi_ul2d>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8002362:	e000      	b.n	8002366 <decode_HearthBeat+0x196>
if (!out) return;
 8002364:	bf00      	nop
}
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	0000      	movs	r0, r0
	...

08002370 <decode_MCU_Stat_One>:
//uart_print_str("done \n\r");
//
//}


void decode_MCU_Stat_One(const uint8_t *data, MCU_Stat_One_t *out) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
	if (!out) return;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 8094 	beq.w	80024aa <decode_MCU_Stat_One+0x13a>
	out->MCU_Stat_One_sig0 = (int)extract_little_endian_u64(data, 8, 8)-40;
 8002382:	2208      	movs	r2, #8
 8002384:	2108      	movs	r1, #8
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff f9af 	bl	80016ea <extract_little_endian_u64>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4613      	mov	r3, r2
 8002392:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	601a      	str	r2, [r3, #0]
	out->MCU_Stat_One_sig1 = (int)extract_little_endian_u64(data, 0, 8)-40;
 800239a:	2208      	movs	r2, #8
 800239c:	2100      	movs	r1, #0
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff f9a3 	bl	80016ea <extract_little_endian_u64>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4613      	mov	r3, r2
 80023aa:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	605a      	str	r2, [r3, #4]
	out->MCU_Stat_One_sig2 = (double)extract_little_endian_u64(data, 16, 16)*0.1;
 80023b2:	2210      	movs	r2, #16
 80023b4:	2110      	movs	r1, #16
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff f997 	bl	80016ea <extract_little_endian_u64>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	f7fe f974 	bl	80006b0 <__aeabi_ul2d>
 80023c8:	a33b      	add	r3, pc, #236	@ (adr r3, 80024b8 <decode_MCU_Stat_One+0x148>)
 80023ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ce:	f7fd febf 	bl	8000150 <__aeabi_dmul>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	6839      	ldr	r1, [r7, #0]
 80023d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	out->MCU_Stat_One_sig3 = (int)extract_little_endian_u64(data, 56, 3);
 80023dc:	2203      	movs	r2, #3
 80023de:	2138      	movs	r1, #56	@ 0x38
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff f982 	bl	80016ea <extract_little_endian_u64>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	611a      	str	r2, [r3, #16]
	out->MCU_Stat_One_sig4 = (int)extract_little_endian_u64(data, 48, 8);
 80023ee:	2208      	movs	r2, #8
 80023f0:	2130      	movs	r1, #48	@ 0x30
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff f979 	bl	80016ea <extract_little_endian_u64>
 80023f8:	4602      	mov	r2, r0
 80023fa:	460b      	mov	r3, r1
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	615a      	str	r2, [r3, #20]
	out->MCU_Stat_One_sig5 = (int)extract_little_endian_u64(data, 40, 8);
 8002400:	2208      	movs	r2, #8
 8002402:	2128      	movs	r1, #40	@ 0x28
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff f970 	bl	80016ea <extract_little_endian_u64>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	619a      	str	r2, [r3, #24]
	out->MCU_Stat_One_sig6 = (int)extract_little_endian_u64(data, 32, 8);
 8002412:	2208      	movs	r2, #8
 8002414:	2120      	movs	r1, #32
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff f967 	bl	80016ea <extract_little_endian_u64>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	61da      	str	r2, [r3, #28]
	uart_print_str("\n MCU_Motor_Temp: ");
 8002424:	4826      	ldr	r0, [pc, #152]	@ (80024c0 <decode_MCU_Stat_One+0x150>)
 8002426:	f001 fa25 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Stat_One_sig0);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4619      	mov	r1, r3
 8002430:	4824      	ldr	r0, [pc, #144]	@ (80024c4 <decode_MCU_Stat_One+0x154>)
 8002432:	f001 fb55 	bl	8003ae0 <uart_printf>
	uart_print_str("\n MCU_PCB_Temp: ");
 8002436:	4824      	ldr	r0, [pc, #144]	@ (80024c8 <decode_MCU_Stat_One+0x158>)
 8002438:	f001 fa1c 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Stat_One_sig1);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4619      	mov	r1, r3
 8002442:	4820      	ldr	r0, [pc, #128]	@ (80024c4 <decode_MCU_Stat_One+0x154>)
 8002444:	f001 fb4c 	bl	8003ae0 <uart_printf>
	uart_print_str("\n MCU_RMS_Current");
 8002448:	4820      	ldr	r0, [pc, #128]	@ (80024cc <decode_MCU_Stat_One+0x15c>)
 800244a:	f001 fa13 	bl	8003874 <uart_print_str>
	uart_send_double(out->MCU_Stat_One_sig2,3);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002454:	2203      	movs	r2, #3
 8002456:	f001 fa23 	bl	80038a0 <uart_send_double>
	uart_print_str("\n MCU_Drive_Mode: ");
 800245a:	481d      	ldr	r0, [pc, #116]	@ (80024d0 <decode_MCU_Stat_One+0x160>)
 800245c:	f001 fa0a 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Stat_One_sig3);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	4619      	mov	r1, r3
 8002466:	4817      	ldr	r0, [pc, #92]	@ (80024c4 <decode_MCU_Stat_One+0x154>)
 8002468:	f001 fb3a 	bl	8003ae0 <uart_printf>
	uart_print_str("\n MCU_Speed_Kmph: ");
 800246c:	4819      	ldr	r0, [pc, #100]	@ (80024d4 <decode_MCU_Stat_One+0x164>)
 800246e:	f001 fa01 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Stat_One_sig4);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	4619      	mov	r1, r3
 8002478:	4812      	ldr	r0, [pc, #72]	@ (80024c4 <decode_MCU_Stat_One+0x154>)
 800247a:	f001 fb31 	bl	8003ae0 <uart_printf>
	uart_print_str("\n MCU_Brake_perc: ");
 800247e:	4816      	ldr	r0, [pc, #88]	@ (80024d8 <decode_MCU_Stat_One+0x168>)
 8002480:	f001 f9f8 	bl	8003874 <uart_print_str>
	uart_printf("%d ",out->MCU_Stat_One_sig5);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	4619      	mov	r1, r3
 800248a:	480e      	ldr	r0, [pc, #56]	@ (80024c4 <decode_MCU_Stat_One+0x154>)
 800248c:	f001 fb28 	bl	8003ae0 <uart_printf>
	uart_print_str("\n MCU_Throttle_perc: ");
 8002490:	4812      	ldr	r0, [pc, #72]	@ (80024dc <decode_MCU_Stat_One+0x16c>)
 8002492:	f001 f9ef 	bl	8003874 <uart_print_str>
	uart_printf("%d \n ",out->MCU_Stat_One_sig6);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	4619      	mov	r1, r3
 800249c:	4810      	ldr	r0, [pc, #64]	@ (80024e0 <decode_MCU_Stat_One+0x170>)
 800249e:	f001 fb1f 	bl	8003ae0 <uart_printf>
	uart_print_str("\n============================================\n");
 80024a2:	4810      	ldr	r0, [pc, #64]	@ (80024e4 <decode_MCU_Stat_One+0x174>)
 80024a4:	f001 f9e6 	bl	8003874 <uart_print_str>
 80024a8:	e000      	b.n	80024ac <decode_MCU_Stat_One+0x13c>
	if (!out) return;
 80024aa:	bf00      	nop
}
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	f3af 8000 	nop.w
 80024b8:	9999999a 	.word	0x9999999a
 80024bc:	3fb99999 	.word	0x3fb99999
 80024c0:	08006fb4 	.word	0x08006fb4
 80024c4:	08006a28 	.word	0x08006a28
 80024c8:	08006fc8 	.word	0x08006fc8
 80024cc:	08006fdc 	.word	0x08006fdc
 80024d0:	08006ff0 	.word	0x08006ff0
 80024d4:	08007004 	.word	0x08007004
 80024d8:	08007018 	.word	0x08007018
 80024dc:	0800702c 	.word	0x0800702c
 80024e0:	08006acc 	.word	0x08006acc
 80024e4:	080069e4 	.word	0x080069e4

080024e8 <decode_MCU_POWER_One>:





void decode_MCU_POWER_One(const uint8_t *data, MCU_POWER_One_t *out) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
//if (!out) return;

out->power_sig0 = (double)extract_motorola_u64(data, 38, 10)*0.1-37.3;
 80024f2:	220a      	movs	r2, #10
 80024f4:	2126      	movs	r1, #38	@ 0x26
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff f88c 	bl	8001614 <extract_motorola_u64>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4610      	mov	r0, r2
 8002502:	4619      	mov	r1, r3
 8002504:	f7fe f8d4 	bl	80006b0 <__aeabi_ul2d>
 8002508:	a353      	add	r3, pc, #332	@ (adr r3, 8002658 <decode_MCU_POWER_One+0x170>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fd fe1f 	bl	8000150 <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	a351      	add	r3, pc, #324	@ (adr r3, 8002660 <decode_MCU_POWER_One+0x178>)
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	f7fd ff44 	bl	80003ac <__aeabi_dsub>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	6839      	ldr	r1, [r7, #0]
 800252a:	e9c1 2300 	strd	r2, r3, [r1]
out->power_sig1 = (double)extract_motorola_u64(data, 7, 10)*0.1;
 800252e:	220a      	movs	r2, #10
 8002530:	2107      	movs	r1, #7
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff f86e 	bl	8001614 <extract_motorola_u64>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	f7fe f8b6 	bl	80006b0 <__aeabi_ul2d>
 8002544:	a344      	add	r3, pc, #272	@ (adr r3, 8002658 <decode_MCU_POWER_One+0x170>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fd fe01 	bl	8000150 <__aeabi_dmul>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	6839      	ldr	r1, [r7, #0]
 8002554:	e9c1 2302 	strd	r2, r3, [r1, #8]
out->power_sig2 = (double)extract_motorola_u64(data, 16, 10)*0.1-65;
 8002558:	220a      	movs	r2, #10
 800255a:	2110      	movs	r1, #16
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff f859 	bl	8001614 <extract_motorola_u64>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4610      	mov	r0, r2
 8002568:	4619      	mov	r1, r3
 800256a:	f7fe f8a1 	bl	80006b0 <__aeabi_ul2d>
 800256e:	a33a      	add	r3, pc, #232	@ (adr r3, 8002658 <decode_MCU_POWER_One+0x170>)
 8002570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002574:	f7fd fdec 	bl	8000150 <__aeabi_dmul>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	4b3a      	ldr	r3, [pc, #232]	@ (8002670 <decode_MCU_POWER_One+0x188>)
 8002586:	f7fd ff11 	bl	80003ac <__aeabi_dsub>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	6839      	ldr	r1, [r7, #0]
 8002590:	e9c1 2304 	strd	r2, r3, [r1, #16]
out->power_sig3 = (uint64_t)extract_motorola_u64(data, 44, 15)-16384;
 8002594:	220f      	movs	r2, #15
 8002596:	212c      	movs	r1, #44	@ 0x2c
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff f83b 	bl	8001614 <extract_motorola_u64>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4613      	mov	r3, r2
 80025a4:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80025a8:	461a      	mov	r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	619a      	str	r2, [r3, #24]
out->power_sig4 = (double)extract_motorola_u64(data, 13, 13)*0.1-409.6;
 80025ae:	220d      	movs	r2, #13
 80025b0:	210d      	movs	r1, #13
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff f82e 	bl	8001614 <extract_motorola_u64>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	f7fe f876 	bl	80006b0 <__aeabi_ul2d>
 80025c4:	a324      	add	r3, pc, #144	@ (adr r3, 8002658 <decode_MCU_POWER_One+0x170>)
 80025c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ca:	f7fd fdc1 	bl	8000150 <__aeabi_dmul>
 80025ce:	4602      	mov	r2, r0
 80025d0:	460b      	mov	r3, r1
 80025d2:	4610      	mov	r0, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	a324      	add	r3, pc, #144	@ (adr r3, 8002668 <decode_MCU_POWER_One+0x180>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	f7fd fee6 	bl	80003ac <__aeabi_dsub>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	6839      	ldr	r1, [r7, #0]
 80025e6:	e9c1 2308 	strd	r2, r3, [r1, #32]
uart_print_str("\n torque_requested: ");
 80025ea:	4822      	ldr	r0, [pc, #136]	@ (8002674 <decode_MCU_POWER_One+0x18c>)
 80025ec:	f001 f942 	bl	8003874 <uart_print_str>
uart_send_double(out->power_sig0,3);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025f6:	2203      	movs	r2, #3
 80025f8:	f001 f952 	bl	80038a0 <uart_send_double>
uart_print_str("\n DC V0L: ");
 80025fc:	481e      	ldr	r0, [pc, #120]	@ (8002678 <decode_MCU_POWER_One+0x190>)
 80025fe:	f001 f939 	bl	8003874 <uart_print_str>
uart_send_double(out->power_sig1,3);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002608:	2203      	movs	r2, #3
 800260a:	f001 f949 	bl	80038a0 <uart_send_double>
uart_print_str("\n EST_TORQ :");
 800260e:	481b      	ldr	r0, [pc, #108]	@ (800267c <decode_MCU_POWER_One+0x194>)
 8002610:	f001 f930 	bl	8003874 <uart_print_str>
uart_send_double(out->power_sig2,3);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800261a:	2203      	movs	r2, #3
 800261c:	f001 f940 	bl	80038a0 <uart_send_double>
uart_print_str("\n RPM: ");
 8002620:	4817      	ldr	r0, [pc, #92]	@ (8002680 <decode_MCU_POWER_One+0x198>)
 8002622:	f001 f927 	bl	8003874 <uart_print_str>
uart_printf("%ld ",out->power_sig3);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	4619      	mov	r1, r3
 800262c:	4815      	ldr	r0, [pc, #84]	@ (8002684 <decode_MCU_POWER_One+0x19c>)
 800262e:	f001 fa57 	bl	8003ae0 <uart_printf>
uart_print_str("\n DC_CUR: ");
 8002632:	4815      	ldr	r0, [pc, #84]	@ (8002688 <decode_MCU_POWER_One+0x1a0>)
 8002634:	f001 f91e 	bl	8003874 <uart_print_str>
uart_send_double(out->power_sig4,3);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800263e:	2203      	movs	r2, #3
 8002640:	f001 f92e 	bl	80038a0 <uart_send_double>
uart_print_str("\n");
 8002644:	4811      	ldr	r0, [pc, #68]	@ (800268c <decode_MCU_POWER_One+0x1a4>)
 8002646:	f001 f915 	bl	8003874 <uart_print_str>
uart_print_str("\n============================================\n");
 800264a:	4811      	ldr	r0, [pc, #68]	@ (8002690 <decode_MCU_POWER_One+0x1a8>)
 800264c:	f001 f912 	bl	8003874 <uart_print_str>

}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	9999999a 	.word	0x9999999a
 800265c:	3fb99999 	.word	0x3fb99999
 8002660:	66666666 	.word	0x66666666
 8002664:	4042a666 	.word	0x4042a666
 8002668:	9999999a 	.word	0x9999999a
 800266c:	40799999 	.word	0x40799999
 8002670:	40504000 	.word	0x40504000
 8002674:	08007044 	.word	0x08007044
 8002678:	0800705c 	.word	0x0800705c
 800267c:	08007068 	.word	0x08007068
 8002680:	08007078 	.word	0x08007078
 8002684:	08007080 	.word	0x08007080
 8002688:	08007088 	.word	0x08007088
 800268c:	08007094 	.word	0x08007094
 8002690:	080069e4 	.word	0x080069e4

08002694 <Motor_control_pins_init>:
    GPIOB->CRL&=~((0xF<<0)|(0XF<<4)|(0XF<<12)|(0xf<<20));
    GPIOB->CRL|=((0x3<<0)|(0X3<<4)|(0X3<<12)|(0x3<<20));
    GPIOB->ODR&=~((1<<PB0_REVERSE)|(1<<PB1_NEUTRAL)|(1<<PB3_DRIVE)|(1<<PB5_SPORT));
    GPIOB->ODR|=((1<<PB1_NEUTRAL));
}
void Motor_control_pins_init(){
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8002698:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <Motor_control_pins_init+0x50>)
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	4a11      	ldr	r2, [pc, #68]	@ (80026e4 <Motor_control_pins_init+0x50>)
 800269e:	f043 0308 	orr.w	r3, r3, #8
 80026a2:	6193      	str	r3, [r2, #24]
    GPIOB->CRL&=~((0x4<<0)|(0X4<<4)|(0X4<<12));
 80026a4:	4b10      	ldr	r3, [pc, #64]	@ (80026e8 <Motor_control_pins_init+0x54>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0f      	ldr	r2, [pc, #60]	@ (80026e8 <Motor_control_pins_init+0x54>)
 80026aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80026ae:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80026b2:	6013      	str	r3, [r2, #0]
    GPIOB->CRL|=((0x3<<0)|(0X3<<4)|(0X3<<12));
 80026b4:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <Motor_control_pins_init+0x54>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0b      	ldr	r2, [pc, #44]	@ (80026e8 <Motor_control_pins_init+0x54>)
 80026ba:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 80026be:	f043 0333 	orr.w	r3, r3, #51	@ 0x33
 80026c2:	6013      	str	r3, [r2, #0]
    GPIOB->ODR|=((1<<PB0_REVERSE)|(1<<PB1_NEUTRAL)|(1<<PB3_DRIVE));
 80026c4:	4b08      	ldr	r3, [pc, #32]	@ (80026e8 <Motor_control_pins_init+0x54>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	4a07      	ldr	r2, [pc, #28]	@ (80026e8 <Motor_control_pins_init+0x54>)
 80026ca:	f043 030b 	orr.w	r3, r3, #11
 80026ce:	60d3      	str	r3, [r2, #12]
    GPIOB->ODR&=~((1<<PB1_NEUTRAL));
 80026d0:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <Motor_control_pins_init+0x54>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <Motor_control_pins_init+0x54>)
 80026d6:	f023 0302 	bic.w	r3, r3, #2
 80026da:	60d3      	str	r3, [r2, #12]
}
 80026dc:	bf00      	nop
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40010c00 	.word	0x40010c00

080026ec <set_baudrate>:
    uint32_t tseg2;
    uint32_t sjw;
    float sample_point;  // in percentage
} CAN_BitTiming;

STATUS set_baudrate(uint32_t Baud_Rate){
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	f6ad 0d04 	subw	sp, sp, #2052	@ 0x804
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80026f8:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 80026fc:	6018      	str	r0, [r3, #0]
    CAN_BitTiming table[100]; // store results
    int count = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
    uint32_t clk = get_APB1_freq();      // 36 MHz
 8002704:	f000 ff66 	bl	80035d4 <get_APB1_freq>
 8002708:	f8c7 07e8 	str.w	r0, [r7, #2024]	@ 0x7e8
    uint32_t baud = Baud_Rate;      // 500 kbps
 800270c:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002710:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f8c7 37e4 	str.w	r3, [r7, #2020]	@ 0x7e4
    if (clk == 0 || Baud_Rate == 0) {
 800271a:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	@ 0x7e8
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <set_baudrate+0x44>
 8002722:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002726:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <set_baudrate+0x48>
        return RY_NOT_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	e0f7      	b.n	8002924 <set_baudrate+0x238>
    }
    uint32_t target = clk / baud; // should be 16
 8002734:	f8d7 27e8 	ldr.w	r2, [r7, #2024]	@ 0x7e8
 8002738:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	@ 0x7e4
 800273c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002740:	f8c7 37e0 	str.w	r3, [r7, #2016]	@ 0x7e0
    for (uint32_t prescaler = 1; prescaler <= 1024; prescaler++) {
 8002744:	2301      	movs	r3, #1
 8002746:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 800274a:	e0c0      	b.n	80028ce <set_baudrate+0x1e2>
        for (uint32_t tseg1 = 1; tseg1 <= 16; tseg1++) {
 800274c:	2301      	movs	r3, #1
 800274e:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 8002752:	e0b2      	b.n	80028ba <set_baudrate+0x1ce>
            for (uint32_t tseg2 = 1; tseg2 <= 8; tseg2++) {
 8002754:	2301      	movs	r3, #1
 8002756:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 800275a:	e0a4      	b.n	80028a6 <set_baudrate+0x1ba>
            	uint32_t tq = 1 + tseg1 + tseg2;
 800275c:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 8002760:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 8002764:	4413      	add	r3, r2
 8002766:	3301      	adds	r3, #1
 8002768:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
                if (prescaler * tq == target) {
 800276c:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 8002770:	f8d7 27dc 	ldr.w	r2, [r7, #2012]	@ 0x7dc
 8002774:	fb02 f303 	mul.w	r3, r2, r3
 8002778:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	@ 0x7e0
 800277c:	429a      	cmp	r2, r3
 800277e:	f040 808d 	bne.w	800289c <set_baudrate+0x1b0>
                    float sp = ((1.0f + tseg1) / tq) * 100.0f;
 8002782:	f8d7 07f4 	ldr.w	r0, [r7, #2036]	@ 0x7f4
 8002786:	f7fe f92f 	bl	80009e8 <__aeabi_ui2f>
 800278a:	4603      	mov	r3, r0
 800278c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe f879 	bl	8000888 <__addsf3>
 8002796:	4603      	mov	r3, r0
 8002798:	461c      	mov	r4, r3
 800279a:	f8d7 07dc 	ldr.w	r0, [r7, #2012]	@ 0x7dc
 800279e:	f7fe f923 	bl	80009e8 <__aeabi_ui2f>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4619      	mov	r1, r3
 80027a6:	4620      	mov	r0, r4
 80027a8:	f7fe fa2a 	bl	8000c00 <__aeabi_fdiv>
 80027ac:	4603      	mov	r3, r0
 80027ae:	4960      	ldr	r1, [pc, #384]	@ (8002930 <set_baudrate+0x244>)
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe f971 	bl	8000a98 <__aeabi_fmul>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f8c7 37d8 	str.w	r3, [r7, #2008]	@ 0x7d8
                    if (sp >= 70.0f && sp <= 80.0f) {
 80027bc:	495d      	ldr	r1, [pc, #372]	@ (8002934 <set_baudrate+0x248>)
 80027be:	f8d7 07d8 	ldr.w	r0, [r7, #2008]	@ 0x7d8
 80027c2:	f7fe fb1b 	bl	8000dfc <__aeabi_fcmpge>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d067      	beq.n	800289c <set_baudrate+0x1b0>
 80027cc:	495a      	ldr	r1, [pc, #360]	@ (8002938 <set_baudrate+0x24c>)
 80027ce:	f8d7 07d8 	ldr.w	r0, [r7, #2008]	@ 0x7d8
 80027d2:	f7fe fb09 	bl	8000de8 <__aeabi_fcmple>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d05f      	beq.n	800289c <set_baudrate+0x1b0>
                        for (int sjw = 1; sjw <= tseg2; sjw++) {
 80027dc:	2301      	movs	r3, #1
 80027de:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 80027e2:	e055      	b.n	8002890 <set_baudrate+0x1a4>
                            table[count].prescaler = prescaler;
 80027e4:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 80027e8:	b298      	uxth	r0, r3
 80027ea:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80027ee:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 80027f2:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	4602      	mov	r2, r0
 8002802:	801a      	strh	r2, [r3, #0]
                            table[count].tseg1 = tseg1;
 8002804:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002808:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 800280c:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	3304      	adds	r3, #4
 800281c:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 8002820:	601a      	str	r2, [r3, #0]
                            table[count].tseg2 = tseg2;
 8002822:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002826:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 800282a:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3308      	adds	r3, #8
 800283a:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	@ 0x7f0
 800283e:	601a      	str	r2, [r3, #0]
                            table[count].sjw = sjw;
 8002840:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	@ 0x7ec
 8002844:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002848:	f5a3 60ff 	sub.w	r0, r3, #2040	@ 0x7f8
 800284c:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4403      	add	r3, r0
 800285a:	330c      	adds	r3, #12
 800285c:	6019      	str	r1, [r3, #0]
                            table[count].sample_point = sp;
 800285e:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002862:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 8002866:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3310      	adds	r3, #16
 8002876:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	@ 0x7d8
 800287a:	601a      	str	r2, [r3, #0]
                            count++;
 800287c:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	@ 0x7fc
 8002880:	3301      	adds	r3, #1
 8002882:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
                        for (int sjw = 1; sjw <= tseg2; sjw++) {
 8002886:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 800288a:	3301      	adds	r3, #1
 800288c:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 8002890:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8002894:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	@ 0x7f0
 8002898:	429a      	cmp	r2, r3
 800289a:	d2a3      	bcs.n	80027e4 <set_baudrate+0xf8>
            for (uint32_t tseg2 = 1; tseg2 <= 8; tseg2++) {
 800289c:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 80028a0:	3301      	adds	r3, #1
 80028a2:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 80028a6:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	f67f af56 	bls.w	800275c <set_baudrate+0x70>
        for (uint32_t tseg1 = 1; tseg1 <= 16; tseg1++) {
 80028b0:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 80028b4:	3301      	adds	r3, #1
 80028b6:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 80028ba:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 80028be:	2b10      	cmp	r3, #16
 80028c0:	f67f af48 	bls.w	8002754 <set_baudrate+0x68>
    for (uint32_t prescaler = 1; prescaler <= 1024; prescaler++) {
 80028c4:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 80028c8:	3301      	adds	r3, #1
 80028ca:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 80028ce:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 80028d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028d6:	f67f af39 	bls.w	800274c <set_baudrate+0x60>
                    }
                }
            }
        }
    }
    CAN1->BTR|=((table[0].prescaler-1)<<0)|((table[0].sjw-1)<<24)|((table[0].tseg1-1)<<16)|((table[0].tseg2-1)<<20);
 80028da:	4b18      	ldr	r3, [pc, #96]	@ (800293c <set_baudrate+0x250>)
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80028e2:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	3b01      	subs	r3, #1
 80028ea:	4619      	mov	r1, r3
 80028ec:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80028f0:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	061b      	lsls	r3, r3, #24
 80028fa:	4319      	orrs	r1, r3
 80028fc:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002900:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	041b      	lsls	r3, r3, #16
 800290a:	4319      	orrs	r1, r3
 800290c:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002910:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	3b01      	subs	r3, #1
 8002918:	051b      	lsls	r3, r3, #20
 800291a:	430b      	orrs	r3, r1
 800291c:	4907      	ldr	r1, [pc, #28]	@ (800293c <set_baudrate+0x250>)
 800291e:	4313      	orrs	r3, r2
 8002920:	61cb      	str	r3, [r1, #28]
    return RY_OK;//0x001e0003
 8002922:	2301      	movs	r3, #1
}
 8002924:	4618      	mov	r0, r3
 8002926:	f607 0704 	addw	r7, r7, #2052	@ 0x804
 800292a:	46bd      	mov	sp, r7
 800292c:	bd90      	pop	{r4, r7, pc}
 800292e:	bf00      	nop
 8002930:	42c80000 	.word	0x42c80000
 8002934:	428c0000 	.word	0x428c0000
 8002938:	42a00000 	.word	0x42a00000
 800293c:	40006400 	.word	0x40006400

08002940 <Gpio_init>:
void Gpio_init(){
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
    RCC->APB1ENR|=RCC_APB1ENR_CAN1EN;
 8002944:	4b19      	ldr	r3, [pc, #100]	@ (80029ac <Gpio_init+0x6c>)
 8002946:	69db      	ldr	r3, [r3, #28]
 8002948:	4a18      	ldr	r2, [pc, #96]	@ (80029ac <Gpio_init+0x6c>)
 800294a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800294e:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR|=RCC_APB2ENR_AFIOEN;
 8002950:	4b16      	ldr	r3, [pc, #88]	@ (80029ac <Gpio_init+0x6c>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	4a15      	ldr	r2, [pc, #84]	@ (80029ac <Gpio_init+0x6c>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR|=RCC_APB2ENR_IOPBEN;
 800295c:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <Gpio_init+0x6c>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	4a12      	ldr	r2, [pc, #72]	@ (80029ac <Gpio_init+0x6c>)
 8002962:	f043 0308 	orr.w	r3, r3, #8
 8002966:	6193      	str	r3, [r2, #24]
    GPIOB->CRH &= ~(0xF << 4); // Clear bits for PB9
 8002968:	4b11      	ldr	r3, [pc, #68]	@ (80029b0 <Gpio_init+0x70>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a10      	ldr	r2, [pc, #64]	@ (80029b0 <Gpio_init+0x70>)
 800296e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002972:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~(0xF << 0); // Clear bits for PB8
 8002974:	4b0e      	ldr	r3, [pc, #56]	@ (80029b0 <Gpio_init+0x70>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a0d      	ldr	r2, [pc, #52]	@ (80029b0 <Gpio_init+0x70>)
 800297a:	f023 030f 	bic.w	r3, r3, #15
 800297e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=(1<<2);
 8002980:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <Gpio_init+0x70>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4a0a      	ldr	r2, [pc, #40]	@ (80029b0 <Gpio_init+0x70>)
 8002986:	f043 0304 	orr.w	r3, r3, #4
 800298a:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=(0Xb0);
 800298c:	4b08      	ldr	r3, [pc, #32]	@ (80029b0 <Gpio_init+0x70>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4a07      	ldr	r2, [pc, #28]	@ (80029b0 <Gpio_init+0x70>)
 8002992:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002996:	6053      	str	r3, [r2, #4]
    AFIO->MAPR|=AFIO_MAPR_CAN_REMAP_REMAP2;
 8002998:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <Gpio_init+0x74>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a05      	ldr	r2, [pc, #20]	@ (80029b4 <Gpio_init+0x74>)
 800299e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029a2:	6053      	str	r3, [r2, #4]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr
 80029ac:	40021000 	.word	0x40021000
 80029b0:	40010c00 	.word	0x40010c00
 80029b4:	40010000 	.word	0x40010000

080029b8 <can_init>:
STATUS can_init(uint32_t Baud_Rate){
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	Gpio_init();
 80029c0:	f7ff ffbe 	bl	8002940 <Gpio_init>
	CAN1->MCR &= ~CAN_MCR_AWUM_Msk;
 80029c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002a80 <can_init+0xc8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a2d      	ldr	r2, [pc, #180]	@ (8002a80 <can_init+0xc8>)
 80029ca:	f023 0320 	bic.w	r3, r3, #32
 80029ce:	6013      	str	r3, [r2, #0]
	CAN1->MCR &= ~CAN_MCR_SLEEP_Msk;
 80029d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a80 <can_init+0xc8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002a80 <can_init+0xc8>)
 80029d6:	f023 0302 	bic.w	r3, r3, #2
 80029da:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_MCR_INRQ_Msk;
 80029dc:	4b28      	ldr	r3, [pc, #160]	@ (8002a80 <can_init+0xc8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a27      	ldr	r2, [pc, #156]	@ (8002a80 <can_init+0xc8>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6013      	str	r3, [r2, #0]
	while (!(CAN1->MSR & CAN_MSR_INAK_Msk));
 80029e8:	bf00      	nop
 80029ea:	4b25      	ldr	r3, [pc, #148]	@ (8002a80 <can_init+0xc8>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f9      	beq.n	80029ea <can_init+0x32>
	if(set_baudrate(Baud_Rate)==RY_NOT_OK)
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7ff fe78 	bl	80026ec <set_baudrate>
	{
		RY_NOT_OK;
	}
	CAN1->MCR &= ~(1<<0);  // CLEAR INQR BIT TO LEAVE INTILAIZE MODE=
 80029fc:	4b20      	ldr	r3, [pc, #128]	@ (8002a80 <can_init+0xc8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a1f      	ldr	r2, [pc, #124]	@ (8002a80 <can_init+0xc8>)
 8002a02:	f023 0301 	bic.w	r3, r3, #1
 8002a06:	6013      	str	r3, [r2, #0]
	while (CAN1->MSR & CAN_MSR_INAK_Msk);  // Wait for Normal Mode
 8002a08:	bf00      	nop
 8002a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a80 <can_init+0xc8>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f9      	bne.n	8002a0a <can_init+0x52>
	CAN1->FMR |= CAN_FMR_FINIT;       // Enter filter init mode
 8002a16:	4b1a      	ldr	r3, [pc, #104]	@ (8002a80 <can_init+0xc8>)
 8002a18:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002a1c:	4a18      	ldr	r2, [pc, #96]	@ (8002a80 <can_init+0xc8>)
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

	CAN1->FA1R = 0;                   // Disable all filters
 8002a26:	4b16      	ldr	r3, [pc, #88]	@ (8002a80 <can_init+0xc8>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	CAN1->FM1R = 0;                   // Identifier Mask mode
 8002a2e:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <can_init+0xc8>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	CAN1->FS1R = 1;                   // 32-bit scale
 8002a36:	4b12      	ldr	r3, [pc, #72]	@ (8002a80 <can_init+0xc8>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	CAN1->FFA1R = 0;                  // Assign to FIFO0
 8002a3e:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <can_init+0xc8>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	CAN1->sFilterRegister[0].FR1 = 0x00000000;  // ID = 0
 8002a46:	4b0e      	ldr	r3, [pc, #56]	@ (8002a80 <can_init+0xc8>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
	CAN1->sFilterRegister[0].FR2 = 0x00000000;  // Mask = 0
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <can_init+0xc8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244

	CAN1->FA1R |= 1;                  // Enable filter 0
 8002a56:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <can_init+0xc8>)
 8002a58:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002a5c:	4a08      	ldr	r2, [pc, #32]	@ (8002a80 <can_init+0xc8>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

	CAN1->FMR &= ~CAN_FMR_FINIT;
 8002a66:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <can_init+0xc8>)
 8002a68:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002a6c:	4a04      	ldr	r2, [pc, #16]	@ (8002a80 <can_init+0xc8>)
 8002a6e:	f023 0301 	bic.w	r3, r3, #1
 8002a72:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	return RY_OK;
 8002a76:	2301      	movs	r3, #1
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40006400 	.word	0x40006400

08002a84 <configure_can_filters>:
			 CAN1->sTxMailBox[mail_box].TDHR|=(frame.data[i]<<((i-4)*8));
		 }
	 }
	CAN1->sTxMailBox[mail_box].TIR |= (1<<0);
	}
void configure_can_filters(const uint32_t *std_ids, uint8_t std_cnt,const uint32_t *ext_ids, uint8_t ext_cnt) {
 8002a84:	b480      	push	{r7}
 8002a86:	b08f      	sub	sp, #60	@ 0x3c
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	460b      	mov	r3, r1
 8002a92:	72fb      	strb	r3, [r7, #11]
 8002a94:	4613      	mov	r3, r2
 8002a96:	72bb      	strb	r3, [r7, #10]

    uint8_t bank = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Enter filter init mode
    CAN1->FMR |= CAN_FMR_FINIT;
 8002a9e:	4b91      	ldr	r3, [pc, #580]	@ (8002ce4 <configure_can_filters+0x260>)
 8002aa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002aa4:	4a8f      	ldr	r2, [pc, #572]	@ (8002ce4 <configure_can_filters+0x260>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

    // --- Standard IDs: use banks from 0 upwards ---
    for (uint8_t i = 0; i < std_cnt; i += 2) {
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8002ab4:	e079      	b.n	8002baa <configure_can_filters+0x126>
        if (bank >= CAN_MAX_FILTER_BANKS) break;
 8002ab6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002aba:	2b0d      	cmp	r3, #13
 8002abc:	d87b      	bhi.n	8002bb6 <configure_can_filters+0x132>

        // Deactivate bank while configuring
        CAN1->FA1R &= ~(1u << bank);
 8002abe:	4b89      	ldr	r3, [pc, #548]	@ (8002ce4 <configure_can_filters+0x260>)
 8002ac0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002ac4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002ac8:	2101      	movs	r1, #1
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	4984      	ldr	r1, [pc, #528]	@ (8002ce4 <configure_can_filters+0x260>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c

        // Identifier list mode (exact IDs)
        CAN1->FM1R |= (1u << bank);
 8002ad8:	4b82      	ldr	r3, [pc, #520]	@ (8002ce4 <configure_can_filters+0x260>)
 8002ada:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002ade:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae8:	497e      	ldr	r1, [pc, #504]	@ (8002ce4 <configure_can_filters+0x260>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3204 	str.w	r3, [r1, #516]	@ 0x204

        // 32-bit scale
        CAN1->FS1R |= (1u << bank);
 8002af0:	4b7c      	ldr	r3, [pc, #496]	@ (8002ce4 <configure_can_filters+0x260>)
 8002af2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002af6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002afa:	2101      	movs	r1, #1
 8002afc:	fa01 f303 	lsl.w	r3, r1, r3
 8002b00:	4978      	ldr	r1, [pc, #480]	@ (8002ce4 <configure_can_filters+0x260>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 320c 	str.w	r3, [r1, #524]	@ 0x20c

        // Assign to FIFO0
        CAN1->FFA1R &= ~(1u << bank);
 8002b08:	4b76      	ldr	r3, [pc, #472]	@ (8002ce4 <configure_can_filters+0x260>)
 8002b0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002b0e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b12:	2101      	movs	r1, #1
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	4972      	ldr	r1, [pc, #456]	@ (8002ce4 <configure_can_filters+0x260>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	f8c1 3214 	str.w	r3, [r1, #532]	@ 0x214

        // Prepare two 32-bit slots (FR1 and FR2)
        uint32_t fr1 = 0, fr2 = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b26:	2300      	movs	r3, #0
 8002b28:	633b      	str	r3, [r7, #48]	@ 0x30

        // first ID into FR1
        uint32_t id1 = (std_ids[i] & 0x7FFu) << 21; // std ID in bits [31:21]
 8002b2a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	055b      	lsls	r3, r3, #21
 8002b38:	623b      	str	r3, [r7, #32]
        fr1 = id1;
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	627b      	str	r3, [r7, #36]	@ 0x24

        // second ID into FR2 (if exists)
        if ((i + 1) < std_cnt) {
 8002b3e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	7afb      	ldrb	r3, [r7, #11]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	da0a      	bge.n	8002b60 <configure_can_filters+0xdc>
            uint32_t id2 = (std_ids[i + 1] & 0x7FFu) << 21;
 8002b4a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002b4e:	3301      	adds	r3, #1
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4413      	add	r3, r2
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	055b      	lsls	r3, r3, #21
 8002b5a:	61fb      	str	r3, [r7, #28]
            fr2 = id2;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        CAN1->sFilterRegister[bank].FR1 = fr1;
 8002b60:	4960      	ldr	r1, [pc, #384]	@ (8002ce4 <configure_can_filters+0x260>)
 8002b62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b66:	3348      	adds	r3, #72	@ 0x48
 8002b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        CAN1->sFilterRegister[bank].FR2 = fr2;
 8002b6e:	4a5d      	ldr	r2, [pc, #372]	@ (8002ce4 <configure_can_filters+0x260>)
 8002b70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b74:	3348      	adds	r3, #72	@ 0x48
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b7c:	605a      	str	r2, [r3, #4]

        // Activate bank
        CAN1->FA1R |= (1u << bank);
 8002b7e:	4b59      	ldr	r3, [pc, #356]	@ (8002ce4 <configure_can_filters+0x260>)
 8002b80:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002b84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b88:	2101      	movs	r1, #1
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	4955      	ldr	r1, [pc, #340]	@ (8002ce4 <configure_can_filters+0x260>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
        bank++;
 8002b96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    for (uint8_t i = 0; i < std_cnt; i += 2) {
 8002ba0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8002baa:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8002bae:	7afb      	ldrb	r3, [r7, #11]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d380      	bcc.n	8002ab6 <configure_can_filters+0x32>
 8002bb4:	e000      	b.n	8002bb8 <configure_can_filters+0x134>
        if (bank >= CAN_MAX_FILTER_BANKS) break;
 8002bb6:	bf00      	nop
    }

    // --- Extended IDs: continue with remaining banks ---
    for (uint8_t j = 0; j < ext_cnt; j += 2) {
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002bbe:	e07c      	b.n	8002cba <configure_can_filters+0x236>
        if (bank >= CAN_MAX_FILTER_BANKS) break;
 8002bc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bc4:	2b0d      	cmp	r3, #13
 8002bc6:	d87f      	bhi.n	8002cc8 <configure_can_filters+0x244>

        // Deactivate bank while configuring
        CAN1->FA1R &= ~(1u << bank);
 8002bc8:	4b46      	ldr	r3, [pc, #280]	@ (8002ce4 <configure_can_filters+0x260>)
 8002bca:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002bce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	4942      	ldr	r1, [pc, #264]	@ (8002ce4 <configure_can_filters+0x260>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c

        // Identifier list mode
        CAN1->FM1R |= (1u << bank);
 8002be2:	4b40      	ldr	r3, [pc, #256]	@ (8002ce4 <configure_can_filters+0x260>)
 8002be4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002be8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002bec:	2101      	movs	r1, #1
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	493c      	ldr	r1, [pc, #240]	@ (8002ce4 <configure_can_filters+0x260>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3204 	str.w	r3, [r1, #516]	@ 0x204

        // 32-bit scale
        CAN1->FS1R |= (1u << bank);
 8002bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce4 <configure_can_filters+0x260>)
 8002bfc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002c00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c04:	2101      	movs	r1, #1
 8002c06:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0a:	4936      	ldr	r1, [pc, #216]	@ (8002ce4 <configure_can_filters+0x260>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 320c 	str.w	r3, [r1, #524]	@ 0x20c

        // Assign to FIFO1 for extended IDs
        CAN1->FFA1R |= (1u << bank);
 8002c12:	4b34      	ldr	r3, [pc, #208]	@ (8002ce4 <configure_can_filters+0x260>)
 8002c14:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002c18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	4930      	ldr	r1, [pc, #192]	@ (8002ce4 <configure_can_filters+0x260>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3214 	str.w	r3, [r1, #532]	@ 0x214

        uint32_t fr1 = 0, fr2 = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	62bb      	str	r3, [r7, #40]	@ 0x28

        // FR1: ext id1 encoded as (ID << 3) + IDE bit in bit2
        uint32_t e1 = ((ext_ids[j] & 0x1FFFFFFFu) << 3) | (1u << 2);
 8002c32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	f043 0304 	orr.w	r3, r3, #4
 8002c44:	617b      	str	r3, [r7, #20]
        fr1 = e1;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	61bb      	str	r3, [r7, #24]

        if ((j + 1) < ext_cnt) {
 8002c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	7abb      	ldrb	r3, [r7, #10]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	da0c      	bge.n	8002c70 <configure_can_filters+0x1ec>
            uint32_t e2 = ((ext_ids[j + 1] & 0x1FFFFFFFu) << 3) | (1u << 2);
 8002c56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	613b      	str	r3, [r7, #16]
            fr2 = e2;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        CAN1->sFilterRegister[bank].FR1 = fr1;
 8002c70:	491c      	ldr	r1, [pc, #112]	@ (8002ce4 <configure_can_filters+0x260>)
 8002c72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c76:	3348      	adds	r3, #72	@ 0x48
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        CAN1->sFilterRegister[bank].FR2 = fr2;
 8002c7e:	4a19      	ldr	r2, [pc, #100]	@ (8002ce4 <configure_can_filters+0x260>)
 8002c80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c84:	3348      	adds	r3, #72	@ 0x48
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c8c:	605a      	str	r2, [r3, #4]

        // Activate bank
        CAN1->FA1R |= (1u << bank);
 8002c8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ce4 <configure_can_filters+0x260>)
 8002c90:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002c94:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c98:	2101      	movs	r1, #1
 8002c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9e:	4911      	ldr	r1, [pc, #68]	@ (8002ce4 <configure_can_filters+0x260>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
        bank++;
 8002ca6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002caa:	3301      	adds	r3, #1
 8002cac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    for (uint8_t j = 0; j < ext_cnt; j += 2) {
 8002cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002cba:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002cbe:	7abb      	ldrb	r3, [r7, #10]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	f4ff af7d 	bcc.w	8002bc0 <configure_can_filters+0x13c>
 8002cc6:	e000      	b.n	8002cca <configure_can_filters+0x246>
        if (bank >= CAN_MAX_FILTER_BANKS) break;
 8002cc8:	bf00      	nop
    }

    // Leave filter init mode
    CAN1->FMR &= ~CAN_FMR_FINIT;
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <configure_can_filters+0x260>)
 8002ccc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002cd0:	4a04      	ldr	r2, [pc, #16]	@ (8002ce4 <configure_can_filters+0x260>)
 8002cd2:	f023 0301 	bic.w	r3, r3, #1
 8002cd6:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
}
 8002cda:	bf00      	nop
 8002cdc:	373c      	adds	r7, #60	@ 0x3c
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	40006400 	.word	0x40006400

08002ce8 <CAN_MessagePending>:
 * @param fifo_number The FIFO to check (0 for FIFO0, 1 for FIFO1).
 * @param rx_message A pointer to the CanRxMsg structure to store the received data.
 * @return 1 if a message was successfully received, 0 otherwise.
 */
uint8_t CAN_MessagePending(uint8_t fifo)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
    if (fifo == 0)
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d109      	bne.n	8002d0c <CAN_MessagePending+0x24>
        return (CAN1->RF0R & CAN_RF0R_FMP0_Msk) ? 1 : 0;
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <CAN_MessagePending+0x40>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	e008      	b.n	8002d1e <CAN_MessagePending+0x36>
    else
        return (CAN1->RF1R & CAN_RF1R_FMP1_Msk) ? 1 : 0;
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <CAN_MessagePending+0x40>)
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf14      	ite	ne
 8002d18:	2301      	movne	r3, #1
 8002d1a:	2300      	moveq	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	40006400 	.word	0x40006400

08002d2c <can_rx>:

uint8_t can_rx(can_frame_t *RxMessage,uint8_t fifo_number){
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	70fb      	strb	r3, [r7, #3]
	  RxMessage->ide = (uint8_t)0x04 & CAN1->sFIFOMailBox[fifo_number].RIR;
 8002d38:	4a44      	ldr	r2, [pc, #272]	@ (8002e4c <can_rx+0x120>)
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	331b      	adds	r3, #27
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	4413      	add	r3, r2
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	711a      	strb	r2, [r3, #4]
	  if (RxMessage->ide == 0)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	791b      	ldrb	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10b      	bne.n	8002d70 <can_rx+0x44>
	  {
	    RxMessage->id = (uint32_t)0x000007FF & (CAN1->sFIFOMailBox[fifo_number].RIR >> 21);
 8002d58:	4a3c      	ldr	r2, [pc, #240]	@ (8002e4c <can_rx+0x120>)
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	331b      	adds	r3, #27
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	4413      	add	r3, r2
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0d5b      	lsrs	r3, r3, #21
 8002d66:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e00a      	b.n	8002d86 <can_rx+0x5a>
	  }
	  else
	  {
	    RxMessage->id = (uint32_t)0x1FFFFFFF & (CAN1->sFIFOMailBox[fifo_number].RIR >> 3);
 8002d70:	4a36      	ldr	r2, [pc, #216]	@ (8002e4c <can_rx+0x120>)
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	331b      	adds	r3, #27
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	4413      	add	r3, r2
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	08db      	lsrs	r3, r3, #3
 8002d7e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	601a      	str	r2, [r3, #0]
	  }

	  RxMessage->rtr = (uint8_t)0x02 & CAN1->sFIFOMailBox[fifo_number].RIR;
 8002d86:	4a31      	ldr	r2, [pc, #196]	@ (8002e4c <can_rx+0x120>)
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	331b      	adds	r3, #27
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	4413      	add	r3, r2
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	715a      	strb	r2, [r3, #5]
	  /* Get the DLC */
	  RxMessage->dlc = (uint8_t)0x0F & CAN1->sFIFOMailBox[fifo_number].RDTR;
 8002d9e:	4a2b      	ldr	r2, [pc, #172]	@ (8002e4c <can_rx+0x120>)
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	331b      	adds	r3, #27
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	4413      	add	r3, r2
 8002da8:	3304      	adds	r3, #4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	719a      	strb	r2, [r3, #6]
	  /* Get the data field */
	  for(uint8_t i=0;i< RxMessage->dlc;i++){
 8002db8:	2300      	movs	r3, #0
 8002dba:	73fb      	strb	r3, [r7, #15]
 8002dbc:	e027      	b.n	8002e0e <can_rx+0xe2>
		  if(i<4){
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d810      	bhi.n	8002de6 <can_rx+0xba>
			  RxMessage->data[i] = (CAN1->sFIFOMailBox[fifo_number].RDLR>>(i*8));
 8002dc4:	4a21      	ldr	r2, [pc, #132]	@ (8002e4c <can_rx+0x120>)
 8002dc6:	78fb      	ldrb	r3, [r7, #3]
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	40da      	lsrs	r2, r3
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	b2d1      	uxtb	r1, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	4413      	add	r3, r2
 8002de0:	460a      	mov	r2, r1
 8002de2:	71da      	strb	r2, [r3, #7]
 8002de4:	e010      	b.n	8002e08 <can_rx+0xdc>
		  }else{
			  RxMessage->data[i] = (CAN1->sFIFOMailBox[fifo_number].RDHR>>(((i-4)*8)));
 8002de6:	4a19      	ldr	r2, [pc, #100]	@ (8002e4c <can_rx+0x120>)
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	4413      	add	r3, r2
 8002dee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	3b04      	subs	r3, #4
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	40da      	lsrs	r2, r3
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	b2d1      	uxtb	r1, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	460a      	mov	r2, r1
 8002e06:	71da      	strb	r2, [r3, #7]
	  for(uint8_t i=0;i< RxMessage->dlc;i++){
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	799b      	ldrb	r3, [r3, #6]
 8002e12:	7bfa      	ldrb	r2, [r7, #15]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d3d2      	bcc.n	8002dbe <can_rx+0x92>

		  }
	  }
//	  send_full_frame_over_uart(&RxMessage);
	  if (fifo_number == 0)
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <can_rx+0x100>
	  {
		  CAN1->RF0R |= CAN_RF0R_RFOM0;
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e4c <can_rx+0x120>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	4a0a      	ldr	r2, [pc, #40]	@ (8002e4c <can_rx+0x120>)
 8002e24:	f043 0320 	orr.w	r3, r3, #32
 8002e28:	60d3      	str	r3, [r2, #12]
 8002e2a:	e008      	b.n	8002e3e <can_rx+0x112>
	  }
	  else if (fifo_number == 1)
 8002e2c:	78fb      	ldrb	r3, [r7, #3]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d105      	bne.n	8002e3e <can_rx+0x112>
	  {
		  CAN1->RF1R |= CAN_RF1R_RFOM1;
 8002e32:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <can_rx+0x120>)
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	4a05      	ldr	r2, [pc, #20]	@ (8002e4c <can_rx+0x120>)
 8002e38:	f043 0320 	orr.w	r3, r3, #32
 8002e3c:	6113      	str	r3, [r2, #16]
	  }
	  return 1;
 8002e3e:	2301      	movs	r3, #1
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40006400 	.word	0x40006400

08002e50 <Condensor_Relay_Pins_Init>:

#include"extern_file_declarations.h"

#define PB15_CONDENSOR   15

void Condensor_Relay_Pins_Init(){
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8002e54:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <Condensor_Relay_Pins_Init+0x3c>)
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	4a0c      	ldr	r2, [pc, #48]	@ (8002e8c <Condensor_Relay_Pins_Init+0x3c>)
 8002e5a:	f043 0308 	orr.w	r3, r3, #8
 8002e5e:	6193      	str	r3, [r2, #24]
    GPIOB->CRH&=~((0xF<<28));
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <Condensor_Relay_Pins_Init+0x40>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4a0a      	ldr	r2, [pc, #40]	@ (8002e90 <Condensor_Relay_Pins_Init+0x40>)
 8002e66:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002e6a:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=((0x3<<28));
 8002e6c:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <Condensor_Relay_Pins_Init+0x40>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a07      	ldr	r2, [pc, #28]	@ (8002e90 <Condensor_Relay_Pins_Init+0x40>)
 8002e72:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8002e76:	6053      	str	r3, [r2, #4]
    GPIOB->ODR|=((1<<PB15_CONDENSOR));
 8002e78:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <Condensor_Relay_Pins_Init+0x40>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4a04      	ldr	r2, [pc, #16]	@ (8002e90 <Condensor_Relay_Pins_Init+0x40>)
 8002e7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e82:	60d3      	str	r3, [r2, #12]
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	40010c00 	.word	0x40010c00

08002e94 <clock_print_status>:
#include"process.h"
#include"MCU_ELECTROCATALYST_MESSAGES.h"
#include"Drive_Selector_Switch.h"
extern void matel_mcu_process_can_frame(can_frame_t *);
I2C_HandleTypeDef hi2c1;
void clock_print_status(){
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
    uart_printf("\r\n=====================================\r\n");
 8002e98:	4817      	ldr	r0, [pc, #92]	@ (8002ef8 <clock_print_status+0x64>)
 8002e9a:	f000 fe21 	bl	8003ae0 <uart_printf>
    uart_printf("EVA DRIVE_MODE_SELECTOR & HVAC \r\n");
 8002e9e:	4817      	ldr	r0, [pc, #92]	@ (8002efc <clock_print_status+0x68>)
 8002ea0:	f000 fe1e 	bl	8003ae0 <uart_printf>
    uart_printf("=====================================\r\n");
 8002ea4:	4816      	ldr	r0, [pc, #88]	@ (8002f00 <clock_print_status+0x6c>)
 8002ea6:	f000 fe1b 	bl	8003ae0 <uart_printf>
    uart_printf("System Clock: %lu MHz\r\n", get_SYSCLK_freq() / 1000000);
 8002eaa:	f000 fb15 	bl	80034d8 <get_SYSCLK_freq>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	4a14      	ldr	r2, [pc, #80]	@ (8002f04 <clock_print_status+0x70>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	0c9b      	lsrs	r3, r3, #18
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4813      	ldr	r0, [pc, #76]	@ (8002f08 <clock_print_status+0x74>)
 8002ebc:	f000 fe10 	bl	8003ae0 <uart_printf>
    uart_printf("APB1 Clock: %lu MHz\r\n", get_APB1_freq() / 1000000);
 8002ec0:	f000 fb88 	bl	80035d4 <get_APB1_freq>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8002f04 <clock_print_status+0x70>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	0c9b      	lsrs	r3, r3, #18
 8002ece:	4619      	mov	r1, r3
 8002ed0:	480e      	ldr	r0, [pc, #56]	@ (8002f0c <clock_print_status+0x78>)
 8002ed2:	f000 fe05 	bl	8003ae0 <uart_printf>
    uart_printf("APB2 Clock: %lu MHz\r\n", get_APB2_freq() / 1000000);
 8002ed6:	f000 fba3 	bl	8003620 <get_APB2_freq>
 8002eda:	4603      	mov	r3, r0
 8002edc:	4a09      	ldr	r2, [pc, #36]	@ (8002f04 <clock_print_status+0x70>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0c9b      	lsrs	r3, r3, #18
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	480a      	ldr	r0, [pc, #40]	@ (8002f10 <clock_print_status+0x7c>)
 8002ee8:	f000 fdfa 	bl	8003ae0 <uart_printf>
    uart_printf("=====================================\r\n");
 8002eec:	4804      	ldr	r0, [pc, #16]	@ (8002f00 <clock_print_status+0x6c>)
 8002eee:	f000 fdf7 	bl	8003ae0 <uart_printf>
}
 8002ef2:	bf00      	nop
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	08007098 	.word	0x08007098
 8002efc:	080070c4 	.word	0x080070c4
 8002f00:	080070e8 	.word	0x080070e8
 8002f04:	431bde83 	.word	0x431bde83
 8002f08:	08007110 	.word	0x08007110
 8002f0c:	08007128 	.word	0x08007128
 8002f10:	08007140 	.word	0x08007140

08002f14 <can_ids_filter_configure>:
\
void can_ids_filter_configure(){
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b089      	sub	sp, #36	@ 0x24
 8002f18:	af00      	add	r7, sp, #0
    /* Standard IDs array - terminated with 0x0000 */
    uint32_t standard_rx_ids[] = {
 8002f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f4c <can_ids_filter_configure+0x38>)
 8002f1c:	f107 0410 	add.w	r4, r7, #16
 8002f20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			Matel_MCU_FAULT_two_CAN_STD_ID_AF,
			Matel_MCU_Fault_Code_CAN_STD_ID_B3,
    };

    /* Extended IDs array - terminated with 0x00000000 */
    uint32_t extended_rx_ids[] = {
 8002f26:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <can_ids_filter_configure+0x3c>)
 8002f28:	463c      	mov	r4, r7
 8002f2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    		Matel_MCU_Stat_One_CAN_EXTD_ID_18265040,
			Matel_MCU_Stat_Two_CAN_EXTD_ID_18275040,
			Matel_MCU_HearthBeat_CAN_EXTD_ID_18963257,
			Matel_VECTOR__INDEPENDENT_SIG_MSG_0xC0000000
    };
    configure_can_filters(standard_rx_ids,sizeof(standard_rx_ids)/sizeof(standard_rx_ids[0]),extended_rx_ids,sizeof(extended_rx_ids)/sizeof(extended_rx_ids[0]));
 8002f30:	463a      	mov	r2, r7
 8002f32:	f107 0010 	add.w	r0, r7, #16
 8002f36:	2304      	movs	r3, #4
 8002f38:	2104      	movs	r1, #4
 8002f3a:	f7ff fda3 	bl	8002a84 <configure_can_filters>
    uart_printf("[INFO] Configuring CAN filters for CT4 MCU messages...\r\n");
 8002f3e:	4805      	ldr	r0, [pc, #20]	@ (8002f54 <can_ids_filter_configure+0x40>)
 8002f40:	f000 fdce 	bl	8003ae0 <uart_printf>
}
 8002f44:	bf00      	nop
 8002f46:	3724      	adds	r7, #36	@ 0x24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd90      	pop	{r4, r7, pc}
 8002f4c:	08007194 	.word	0x08007194
 8002f50:	080071a4 	.word	0x080071a4
 8002f54:	08007158 	.word	0x08007158

08002f58 <send_id_data_only_over_uart>:
void send_full_frame_over_uart( can_frame_t *f) {
    uart_send((uint8_t*)f, sizeof(can_frame_t));
}
void send_id_data_only_over_uart(const can_frame_t *f) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
    uint8_t buf[13];
    /* send id always as 4 bytes (LE) so ESP32 can read little-endian uint32_t */
    buf[3] = (uint8_t)(f->id & 0xFF);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	73fb      	strb	r3, [r7, #15]
    buf[2] = (uint8_t)((f->id >> 8) & 0xFF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	0a1b      	lsrs	r3, r3, #8
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	73bb      	strb	r3, [r7, #14]
    buf[1] = (uint8_t)((f->id >> 16) & 0xFF);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	0c1b      	lsrs	r3, r3, #16
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	737b      	strb	r3, [r7, #13]
    buf[0] = (uint8_t)((f->id >> 24) & 0xFF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	0e1b      	lsrs	r3, r3, #24
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	733b      	strb	r3, [r7, #12]
    buf[4] = f->dlc;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	799b      	ldrb	r3, [r3, #6]
 8002f8a:	743b      	strb	r3, [r7, #16]
    /* copy 8 data bytes (if dlc<8 you still send 8 bytes - zeros ok) */
    for (int i = 0; i < 8; ++i) buf[5 + i] = f->data[i];
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	e00d      	b.n	8002fae <send_id_data_only_over_uart+0x56>
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	3305      	adds	r3, #5
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	440a      	add	r2, r1
 8002f9c:	3207      	adds	r2, #7
 8002f9e:	7812      	ldrb	r2, [r2, #0]
 8002fa0:	3320      	adds	r3, #32
 8002fa2:	443b      	add	r3, r7
 8002fa4:	f803 2c14 	strb.w	r2, [r3, #-20]
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	3301      	adds	r3, #1
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	2b07      	cmp	r3, #7
 8002fb2:	ddee      	ble.n	8002f92 <send_id_data_only_over_uart+0x3a>
    uart_send1(buf, sizeof(buf)); // 13 bytes
 8002fb4:	f107 030c 	add.w	r3, r7, #12
 8002fb8:	210d      	movs	r1, #13
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 fd38 	bl	8003a30 <uart_send1>
}
 8002fc0:	bf00      	nop
 8002fc2:	3720      	adds	r7, #32
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <main>:
#define PB0_REVERSE 0
#define PB1_NEUTRAL 1
#define PB3_DRIVE 3
int main(){
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b088      	sub	sp, #32
 8002fcc:	af02      	add	r7, sp, #8
	HAL_Init();
 8002fce:	f000 fde3 	bl	8003b98 <HAL_Init>
	system_clock_init_to_72MHZ();
 8002fd2:	f000 fa2b 	bl	800342c <system_clock_init_to_72MHZ>
	if(uart3_Init(115200)==RY_NOT_OK){
 8002fd6:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8002fda:	f000 fbd9 	bl	8003790 <uart3_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <main+0x20>
	  Error_Handler();
 8002fe4:	f000 f904 	bl	80031f0 <Error_Handler>
	}
    uart_printf("UART3 initialization is ok ,baud_baudrate in kbps %d:\r\n", 115200);
 8002fe8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002fec:	4872      	ldr	r0, [pc, #456]	@ (80031b8 <main+0x1f0>)
 8002fee:	f000 fd77 	bl	8003ae0 <uart_printf>
    uart_printf("=========================================================\r\n");
 8002ff2:	4872      	ldr	r0, [pc, #456]	@ (80031bc <main+0x1f4>)
 8002ff4:	f000 fd74 	bl	8003ae0 <uart_printf>
	if(uart_init(115200)==RY_NOT_OK){
 8002ff8:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8002ffc:	f000 fb72 	bl	80036e4 <uart_init>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <main+0x42>
	  Error_Handler();
 8003006:	f000 f8f3 	bl	80031f0 <Error_Handler>
	}
	clock_print_status();
 800300a:	f7ff ff43 	bl	8002e94 <clock_print_status>
    uart_printf("UART1 initialization is ok ,baud_baudrate in kbps %d:\r\n", 115200);
 800300e:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003012:	486b      	ldr	r0, [pc, #428]	@ (80031c0 <main+0x1f8>)
 8003014:	f000 fd64 	bl	8003ae0 <uart_printf>
    uart_printf("=========================================================\r\n");
 8003018:	4868      	ldr	r0, [pc, #416]	@ (80031bc <main+0x1f4>)
 800301a:	f000 fd61 	bl	8003ae0 <uart_printf>
    systick_init(1000);
 800301e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003022:	f000 f9b3 	bl	800338c <systick_init>
    uart_printf("systick clock initialized for milli second ");
 8003026:	4867      	ldr	r0, [pc, #412]	@ (80031c4 <main+0x1fc>)
 8003028:	f000 fd5a 	bl	8003ae0 <uart_printf>
    uart_printf("=========================================================\r\n");
 800302c:	4863      	ldr	r0, [pc, #396]	@ (80031bc <main+0x1f4>)
 800302e:	f000 fd57 	bl	8003ae0 <uart_printf>
	if(can_init(500000)==RY_NOT_OK){
 8003032:	4865      	ldr	r0, [pc, #404]	@ (80031c8 <main+0x200>)
 8003034:	f7ff fcc0 	bl	80029b8 <can_init>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d107      	bne.n	800304e <main+0x86>
      uart_printf("CAN initialization is NOT oK\r\n");
 800303e:	4863      	ldr	r0, [pc, #396]	@ (80031cc <main+0x204>)
 8003040:	f000 fd4e 	bl	8003ae0 <uart_printf>
	  uart_printf("======================================================\r\n");
 8003044:	4862      	ldr	r0, [pc, #392]	@ (80031d0 <main+0x208>)
 8003046:	f000 fd4b 	bl	8003ae0 <uart_printf>
	  Error_Handler();
 800304a:	f000 f8d1 	bl	80031f0 <Error_Handler>
	}
	can_ids_filter_configure();
 800304e:	f7ff ff61 	bl	8002f14 <can_ids_filter_configure>
    uart_printf("CAN initialization is ok ,baud_baudrate in %d kbps:\r\n", 500);
 8003052:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003056:	485f      	ldr	r0, [pc, #380]	@ (80031d4 <main+0x20c>)
 8003058:	f000 fd42 	bl	8003ae0 <uart_printf>
    uart_printf("=========================================================\r\n");
 800305c:	4857      	ldr	r0, [pc, #348]	@ (80031bc <main+0x1f4>)
 800305e:	f000 fd3f 	bl	8003ae0 <uart_printf>
    Init_tasks();
 8003062:	f000 fb09 	bl	8003678 <Init_tasks>
    uart_printf("Task schedular is initialized\r\n");
 8003066:	485c      	ldr	r0, [pc, #368]	@ (80031d8 <main+0x210>)
 8003068:	f000 fd3a 	bl	8003ae0 <uart_printf>
    uart_printf("=========================================================\r\n");
 800306c:	4853      	ldr	r0, [pc, #332]	@ (80031bc <main+0x1f4>)
 800306e:	f000 fd37 	bl	8003ae0 <uart_printf>
    Blower_Relay_Pins_Init();
 8003072:	f7fe f8ff 	bl	8001274 <Blower_Relay_Pins_Init>
    uart_printf("Blower pins are initialized PIN12=%d PIN13=%d PIN14=%d\r\n",(GPIOB->IDR>>12&1),(GPIOB->IDR>>13&1),(GPIOB->IDR>>14&1));
 8003076:	4b59      	ldr	r3, [pc, #356]	@ (80031dc <main+0x214>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0b1b      	lsrs	r3, r3, #12
 800307c:	f003 0101 	and.w	r1, r3, #1
 8003080:	4b56      	ldr	r3, [pc, #344]	@ (80031dc <main+0x214>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	0b5b      	lsrs	r3, r3, #13
 8003086:	f003 0201 	and.w	r2, r3, #1
 800308a:	4b54      	ldr	r3, [pc, #336]	@ (80031dc <main+0x214>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	0b9b      	lsrs	r3, r3, #14
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	4852      	ldr	r0, [pc, #328]	@ (80031e0 <main+0x218>)
 8003096:	f000 fd23 	bl	8003ae0 <uart_printf>
    uart_printf("=========================================================\r\n");
 800309a:	4848      	ldr	r0, [pc, #288]	@ (80031bc <main+0x1f4>)
 800309c:	f000 fd20 	bl	8003ae0 <uart_printf>
    Condensor_Relay_Pins_Init();
 80030a0:	f7ff fed6 	bl	8002e50 <Condensor_Relay_Pins_Init>
    uart_printf("Condensor pins are initialized PIN15=%d \r\n",(GPIOB->IDR>>15&1));
 80030a4:	4b4d      	ldr	r3, [pc, #308]	@ (80031dc <main+0x214>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	0bdb      	lsrs	r3, r3, #15
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	4619      	mov	r1, r3
 80030b0:	484c      	ldr	r0, [pc, #304]	@ (80031e4 <main+0x21c>)
 80030b2:	f000 fd15 	bl	8003ae0 <uart_printf>
    uart_printf("=========================================================\r\n");
 80030b6:	4841      	ldr	r0, [pc, #260]	@ (80031bc <main+0x1f4>)
 80030b8:	f000 fd12 	bl	8003ae0 <uart_printf>
    Motor_control_pins_init();
 80030bc:	f7ff faea 	bl	8002694 <Motor_control_pins_init>
    uart_printf("Motor_control pins are initialized PIN0=%d PIN1=%d  PIN3=%d PIN5=%d\r\n",(GPIOB->IDR>>0&1),(GPIOB->IDR>>1&1),(GPIOB->IDR>>3&1),(GPIOB->IDR>>5&1));
 80030c0:	4b46      	ldr	r3, [pc, #280]	@ (80031dc <main+0x214>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f003 0101 	and.w	r1, r3, #1
 80030c8:	4b44      	ldr	r3, [pc, #272]	@ (80031dc <main+0x214>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	f003 0201 	and.w	r2, r3, #1
 80030d2:	4b42      	ldr	r3, [pc, #264]	@ (80031dc <main+0x214>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	08db      	lsrs	r3, r3, #3
 80030d8:	f003 0001 	and.w	r0, r3, #1
 80030dc:	4b3f      	ldr	r3, [pc, #252]	@ (80031dc <main+0x214>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	4603      	mov	r3, r0
 80030ea:	483f      	ldr	r0, [pc, #252]	@ (80031e8 <main+0x220>)
 80030ec:	f000 fcf8 	bl	8003ae0 <uart_printf>
    uart_printf("=========================================================\r\n");
 80030f0:	4832      	ldr	r0, [pc, #200]	@ (80031bc <main+0x1f4>)
 80030f2:	f000 fcf5 	bl	8003ae0 <uart_printf>
    Switch_Pins_int();
 80030f6:	f7fe f8e3 	bl	80012c0 <Switch_Pins_int>
//    MX_I2C1_Init();
//    Register_task(50,Drive_mode_state);
//    Register_task(20,process_can_messages);
    switch_state_t last_state,cur_state;
     last_state=Switch_update();
 80030fa:	f7fe f94d 	bl	8001398 <Switch_update>
 80030fe:	4603      	mov	r3, r0
 8003100:	75fb      	strb	r3, [r7, #23]
    while(1){
//    	Run_all_tasks();
    	   can_frame_t rx_frame;
    	   if (CAN_MessagePending(0))
 8003102:	2000      	movs	r0, #0
 8003104:	f7ff fdf0 	bl	8002ce8 <CAN_MessagePending>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00c      	beq.n	8003128 <main+0x160>
    	   {
    		   can_rx(&rx_frame,0);
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff fe0a 	bl	8002d2c <can_rx>
    		   send_id_data_only_over_uart(&rx_frame);
 8003118:	1d3b      	adds	r3, r7, #4
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff1c 	bl	8002f58 <send_id_data_only_over_uart>
    	       matel_mcu_process_can_frame(&rx_frame);
 8003120:	1d3b      	adds	r3, r7, #4
 8003122:	4618      	mov	r0, r3
 8003124:	f7fe f9e0 	bl	80014e8 <matel_mcu_process_can_frame>
    	   }
    	   if (CAN_MessagePending(1))
 8003128:	2001      	movs	r0, #1
 800312a:	f7ff fddd 	bl	8002ce8 <CAN_MessagePending>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00c      	beq.n	800314e <main+0x186>
    	   {
    		   can_rx(&rx_frame,1);
 8003134:	1d3b      	adds	r3, r7, #4
 8003136:	2101      	movs	r1, #1
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fdf7 	bl	8002d2c <can_rx>
    		   send_id_data_only_over_uart(&rx_frame);
 800313e:	1d3b      	adds	r3, r7, #4
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff ff09 	bl	8002f58 <send_id_data_only_over_uart>
    	       matel_mcu_process_can_frame(&rx_frame);
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	4618      	mov	r0, r3
 800314a:	f7fe f9cd 	bl	80014e8 <matel_mcu_process_can_frame>
    	   }
    	cur_state=Switch_update();
 800314e:	f7fe f923 	bl	8001398 <Switch_update>
 8003152:	4603      	mov	r3, r0
 8003154:	75bb      	strb	r3, [r7, #22]
    	if(cur_state!=last_state){
 8003156:	7dba      	ldrb	r2, [r7, #22]
 8003158:	7dfb      	ldrb	r3, [r7, #23]
 800315a:	429a      	cmp	r2, r3
 800315c:	d0d1      	beq.n	8003102 <main+0x13a>
    		last_state=cur_state;
 800315e:	7dbb      	ldrb	r3, [r7, #22]
 8003160:	75fb      	strb	r3, [r7, #23]
    	    GPIOB->ODR |= ((1<<PB0_REVERSE) | (1<<PB1_NEUTRAL) | (1<<PB3_DRIVE));
 8003162:	4b1e      	ldr	r3, [pc, #120]	@ (80031dc <main+0x214>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	4a1d      	ldr	r2, [pc, #116]	@ (80031dc <main+0x214>)
 8003168:	f043 030b 	orr.w	r3, r3, #11
 800316c:	60d3      	str	r3, [r2, #12]
    	    switch (cur_state) {
 800316e:	7dbb      	ldrb	r3, [r7, #22]
 8003170:	2b02      	cmp	r3, #2
 8003172:	d006      	beq.n	8003182 <main+0x1ba>
 8003174:	2b02      	cmp	r3, #2
 8003176:	dc19      	bgt.n	80031ac <main+0x1e4>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <main+0x1c8>
 800317c:	2b01      	cmp	r3, #1
 800317e:	d00e      	beq.n	800319e <main+0x1d6>
 8003180:	e014      	b.n	80031ac <main+0x1e4>
    	        case 2: GPIOB->ODR &=~ (1<<PB0_REVERSE); break;
 8003182:	4b16      	ldr	r3, [pc, #88]	@ (80031dc <main+0x214>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	4a15      	ldr	r2, [pc, #84]	@ (80031dc <main+0x214>)
 8003188:	f023 0301 	bic.w	r3, r3, #1
 800318c:	60d3      	str	r3, [r2, #12]
 800318e:	e00d      	b.n	80031ac <main+0x1e4>
    	        case 0: GPIOB->ODR &=~ (1<<PB1_NEUTRAL); break;
 8003190:	4b12      	ldr	r3, [pc, #72]	@ (80031dc <main+0x214>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a11      	ldr	r2, [pc, #68]	@ (80031dc <main+0x214>)
 8003196:	f023 0302 	bic.w	r3, r3, #2
 800319a:	60d3      	str	r3, [r2, #12]
 800319c:	e006      	b.n	80031ac <main+0x1e4>
    	        case 1: GPIOB->ODR &=~ (1<<PB3_DRIVE);   break;
 800319e:	4b0f      	ldr	r3, [pc, #60]	@ (80031dc <main+0x214>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	4a0e      	ldr	r2, [pc, #56]	@ (80031dc <main+0x214>)
 80031a4:	f023 0308 	bic.w	r3, r3, #8
 80031a8:	60d3      	str	r3, [r2, #12]
 80031aa:	bf00      	nop
    	    }
    		uart_printf(" button=%d :\n",cur_state);
 80031ac:	7dbb      	ldrb	r3, [r7, #22]
 80031ae:	4619      	mov	r1, r3
 80031b0:	480e      	ldr	r0, [pc, #56]	@ (80031ec <main+0x224>)
 80031b2:	f000 fc95 	bl	8003ae0 <uart_printf>
    while(1){
 80031b6:	e7a4      	b.n	8003102 <main+0x13a>
 80031b8:	080071b4 	.word	0x080071b4
 80031bc:	080071ec 	.word	0x080071ec
 80031c0:	08007228 	.word	0x08007228
 80031c4:	08007260 	.word	0x08007260
 80031c8:	0007a120 	.word	0x0007a120
 80031cc:	0800728c 	.word	0x0800728c
 80031d0:	080072ac 	.word	0x080072ac
 80031d4:	080072e8 	.word	0x080072e8
 80031d8:	08007320 	.word	0x08007320
 80031dc:	40010c00 	.word	0x40010c00
 80031e0:	08007340 	.word	0x08007340
 80031e4:	0800737c 	.word	0x0800737c
 80031e8:	080073a8 	.word	0x080073a8
 80031ec:	080073f0 	.word	0x080073f0

080031f0 <Error_Handler>:
    }
}


void Error_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003202:	4b15      	ldr	r3, [pc, #84]	@ (8003258 <HAL_MspInit+0x5c>)
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	4a14      	ldr	r2, [pc, #80]	@ (8003258 <HAL_MspInit+0x5c>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6193      	str	r3, [r2, #24]
 800320e:	4b12      	ldr	r3, [pc, #72]	@ (8003258 <HAL_MspInit+0x5c>)
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	60bb      	str	r3, [r7, #8]
 8003218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	4b0f      	ldr	r3, [pc, #60]	@ (8003258 <HAL_MspInit+0x5c>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	4a0e      	ldr	r2, [pc, #56]	@ (8003258 <HAL_MspInit+0x5c>)
 8003220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003224:	61d3      	str	r3, [r2, #28]
 8003226:	4b0c      	ldr	r3, [pc, #48]	@ (8003258 <HAL_MspInit+0x5c>)
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8003232:	4b0a      	ldr	r3, [pc, #40]	@ (800325c <HAL_MspInit+0x60>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003246:	60fb      	str	r3, [r7, #12]
 8003248:	4a04      	ldr	r2, [pc, #16]	@ (800325c <HAL_MspInit+0x60>)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	40021000 	.word	0x40021000
 800325c:	40010000 	.word	0x40010000

08003260 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003268:	f107 0310 	add.w	r3, r7, #16
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
 8003270:	605a      	str	r2, [r3, #4]
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1d      	ldr	r2, [pc, #116]	@ (80032f0 <HAL_I2C_MspInit+0x90>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d133      	bne.n	80032e8 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003280:	4b1c      	ldr	r3, [pc, #112]	@ (80032f4 <HAL_I2C_MspInit+0x94>)
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	4a1b      	ldr	r2, [pc, #108]	@ (80032f4 <HAL_I2C_MspInit+0x94>)
 8003286:	f043 0308 	orr.w	r3, r3, #8
 800328a:	6193      	str	r3, [r2, #24]
 800328c:	4b19      	ldr	r3, [pc, #100]	@ (80032f4 <HAL_I2C_MspInit+0x94>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003298:	23c0      	movs	r3, #192	@ 0xc0
 800329a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800329c:	2312      	movs	r3, #18
 800329e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032a0:	2303      	movs	r3, #3
 80032a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a4:	f107 0310 	add.w	r3, r7, #16
 80032a8:	4619      	mov	r1, r3
 80032aa:	4813      	ldr	r0, [pc, #76]	@ (80032f8 <HAL_I2C_MspInit+0x98>)
 80032ac:	f000 fe60 	bl	8003f70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032b0:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <HAL_I2C_MspInit+0x94>)
 80032b2:	69db      	ldr	r3, [r3, #28]
 80032b4:	4a0f      	ldr	r2, [pc, #60]	@ (80032f4 <HAL_I2C_MspInit+0x94>)
 80032b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80032ba:	61d3      	str	r3, [r2, #28]
 80032bc:	4b0d      	ldr	r3, [pc, #52]	@ (80032f4 <HAL_I2C_MspInit+0x94>)
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80032c8:	2200      	movs	r2, #0
 80032ca:	2100      	movs	r1, #0
 80032cc:	201f      	movs	r0, #31
 80032ce:	f000 fd92 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80032d2:	201f      	movs	r0, #31
 80032d4:	f000 fdab 	bl	8003e2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80032d8:	2200      	movs	r2, #0
 80032da:	2100      	movs	r1, #0
 80032dc:	2020      	movs	r0, #32
 80032de:	f000 fd8a 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80032e2:	2020      	movs	r0, #32
 80032e4:	f000 fda3 	bl	8003e2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80032e8:	bf00      	nop
 80032ea:	3720      	adds	r7, #32
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40005400 	.word	0x40005400
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40010c00 	.word	0x40010c00

080032fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003300:	bf00      	nop
 8003302:	e7fd      	b.n	8003300 <NMI_Handler+0x4>

08003304 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003308:	bf00      	nop
 800330a:	e7fd      	b.n	8003308 <HardFault_Handler+0x4>

0800330c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003310:	bf00      	nop
 8003312:	e7fd      	b.n	8003310 <MemManage_Handler+0x4>

08003314 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003318:	bf00      	nop
 800331a:	e7fd      	b.n	8003318 <BusFault_Handler+0x4>

0800331c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003320:	bf00      	nop
 8003322:	e7fd      	b.n	8003320 <UsageFault_Handler+0x4>

08003324 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003328:	bf00      	nop
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr

08003330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	bc80      	pop	{r7}
 800333a:	4770      	bx	lr

0800333c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800334c:	f000 fc6a 	bl	8003c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  milli_sec_tick++;
 8003350:	4b03      	ldr	r3, [pc, #12]	@ (8003360 <SysTick_Handler+0x18>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	4a02      	ldr	r2, [pc, #8]	@ (8003360 <SysTick_Handler+0x18>)
 8003358:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200002a4 	.word	0x200002a4

08003364 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003368:	4802      	ldr	r0, [pc, #8]	@ (8003374 <I2C1_EV_IRQHandler+0x10>)
 800336a:	f001 f94b 	bl	8004604 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000250 	.word	0x20000250

08003378 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800337c:	4802      	ldr	r0, [pc, #8]	@ (8003388 <I2C1_ER_IRQHandler+0x10>)
 800337e:	f001 fab2 	bl	80048e6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000250 	.word	0x20000250

0800338c <systick_init>:
 *  Created on: Sep 3, 2025
 *      Author: MadaYaswanth
 */

#include"extern_file_declarations.h"
void systick_init(uint32_t ticks_per_sec){
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
    // Reload value = (SystemCoreClock / ticks_per_sec) - 1
    SysTick->LOAD = (get_SYSCLK_freq() / ticks_per_sec) - 1;
 8003394:	f000 f8a0 	bl	80034d8 <get_SYSCLK_freq>
 8003398:	4602      	mov	r2, r0
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a0:	4a06      	ldr	r2, [pc, #24]	@ (80033bc <systick_init+0x30>)
 80033a2:	3b01      	subs	r3, #1
 80033a4:	6053      	str	r3, [r2, #4]

    SysTick->VAL = 0;             // Clear current value
 80033a6:	4b05      	ldr	r3, [pc, #20]	@ (80033bc <systick_init+0x30>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = (1 << 2) |    // CLKSOURCE = processor clock (AHB)
 80033ac:	4b03      	ldr	r3, [pc, #12]	@ (80033bc <systick_init+0x30>)
 80033ae:	2207      	movs	r2, #7
 80033b0:	601a      	str	r2, [r3, #0]
                    (1 << 1) |    // TICKINT = enable SysTick interrupt
                    (1 << 0);     // ENABLE counter
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	e000e010 	.word	0xe000e010

080033c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033c8:	4a14      	ldr	r2, [pc, #80]	@ (800341c <_sbrk+0x5c>)
 80033ca:	4b15      	ldr	r3, [pc, #84]	@ (8003420 <_sbrk+0x60>)
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033d4:	4b13      	ldr	r3, [pc, #76]	@ (8003424 <_sbrk+0x64>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d102      	bne.n	80033e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033dc:	4b11      	ldr	r3, [pc, #68]	@ (8003424 <_sbrk+0x64>)
 80033de:	4a12      	ldr	r2, [pc, #72]	@ (8003428 <_sbrk+0x68>)
 80033e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033e2:	4b10      	ldr	r3, [pc, #64]	@ (8003424 <_sbrk+0x64>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4413      	add	r3, r2
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d207      	bcs.n	8003400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033f0:	f002 fe4a 	bl	8006088 <__errno>
 80033f4:	4603      	mov	r3, r0
 80033f6:	220c      	movs	r2, #12
 80033f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033fa:	f04f 33ff 	mov.w	r3, #4294967295
 80033fe:	e009      	b.n	8003414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003400:	4b08      	ldr	r3, [pc, #32]	@ (8003424 <_sbrk+0x64>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003406:	4b07      	ldr	r3, [pc, #28]	@ (8003424 <_sbrk+0x64>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	4a05      	ldr	r2, [pc, #20]	@ (8003424 <_sbrk+0x64>)
 8003410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003412:	68fb      	ldr	r3, [r7, #12]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20005000 	.word	0x20005000
 8003420:	00000400 	.word	0x00000400
 8003424:	200002a8 	.word	0x200002a8
 8003428:	20000498 	.word	0x20000498

0800342c <system_clock_init_to_72MHZ>:
 *
 *  Created on: Sep 2, 2025
 *      Author: MadaYaswanth
 */
#include"main.h"
STATUS system_clock_init_to_72MHZ(){
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
	    // 1. Enable HSE (external crystal, e.g., 8MHz)
	    RCC->CR |= RCC_CR_HSEON;       // Turn on HSE
 8003430:	4b27      	ldr	r3, [pc, #156]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a26      	ldr	r2, [pc, #152]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 8003436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800343a:	6013      	str	r3, [r2, #0]
	    while (!(RCC->CR & RCC_CR_HSERDY)); // Wait until HSE is ready
 800343c:	bf00      	nop
 800343e:	4b24      	ldr	r3, [pc, #144]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f9      	beq.n	800343e <system_clock_init_to_72MHZ+0x12>
	    FLASH->ACR |= FLASH_ACR_LATENCY_2;  // 2 wait states
 800344a:	4b22      	ldr	r3, [pc, #136]	@ (80034d4 <system_clock_init_to_72MHZ+0xa8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a21      	ldr	r2, [pc, #132]	@ (80034d4 <system_clock_init_to_72MHZ+0xa8>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	6013      	str	r3, [r2, #0]
	    FLASH->ACR |= FLASH_ACR_PRFTBE;     // Enable prefetch
 8003456:	4b1f      	ldr	r3, [pc, #124]	@ (80034d4 <system_clock_init_to_72MHZ+0xa8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1e      	ldr	r2, [pc, #120]	@ (80034d4 <system_clock_init_to_72MHZ+0xa8>)
 800345c:	f043 0310 	orr.w	r3, r3, #16
 8003460:	6013      	str	r3, [r2, #0]
	    // 2. Configure PLL to multiply HSE to 72 MHz
	    //    PLLMUL = 9 (8MHz * 9 = 72MHz)
	    RCC->CFGR |= RCC_CFGR_PLLMULL9; // PLL multiplier = 9
 8003462:	4b1b      	ldr	r3, [pc, #108]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4a1a      	ldr	r2, [pc, #104]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 8003468:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 800346c:	6053      	str	r3, [r2, #4]
	    // 3. Select HSE as PLL source
	    RCC->CFGR |= RCC_CFGR_PLLSRC;   // PLL source = HSE
 800346e:	4b18      	ldr	r3, [pc, #96]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4a17      	ldr	r2, [pc, #92]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003478:	6053      	str	r3, [r2, #4]
	    // 4. Set APB1 Prescaler to 2 (PCLK1 = 72MHz / 2 = 36MHz)
	    RCC->CFGR |= RCC_CFGR_PPRE1_2;  // APB1 prescaler = 2 (36MHz)
 800347a:	4b15      	ldr	r3, [pc, #84]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	4a14      	ldr	r2, [pc, #80]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 8003480:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003484:	6053      	str	r3, [r2, #4]
	    // 5. Set APB2 Prescaler to 1 (PCLK2 = 72MHz, no division)
	    RCC->CFGR &= ~RCC_CFGR_PPRE2;   // APB2 prescaler = 1 (72MHz)
 8003486:	4b12      	ldr	r3, [pc, #72]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4a11      	ldr	r2, [pc, #68]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 800348c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003490:	6053      	str	r3, [r2, #4]
	    // 6. Enable PLL and wait until ready
	    RCC->CR |= RCC_CR_PLLON;
 8003492:	4b0f      	ldr	r3, [pc, #60]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a0e      	ldr	r2, [pc, #56]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 8003498:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800349c:	6013      	str	r3, [r2, #0]
	    while (!(RCC->CR & RCC_CR_PLLRDY));
 800349e:	bf00      	nop
 80034a0:	4b0b      	ldr	r3, [pc, #44]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f9      	beq.n	80034a0 <system_clock_init_to_72MHZ+0x74>
	     // 7. Switch SYSCLK to PLL
	    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80034ac:	4b08      	ldr	r3, [pc, #32]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4a07      	ldr	r2, [pc, #28]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 80034b2:	f043 0302 	orr.w	r3, r3, #2
 80034b6:	6053      	str	r3, [r2, #4]
	    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80034b8:	bf00      	nop
 80034ba:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <system_clock_init_to_72MHZ+0xa4>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 030c 	and.w	r3, r3, #12
 80034c2:	2b08      	cmp	r3, #8
 80034c4:	d1f9      	bne.n	80034ba <system_clock_init_to_72MHZ+0x8e>
}
 80034c6:	bf00      	nop
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40022000 	.word	0x40022000

080034d8 <get_SYSCLK_freq>:
uint32_t get_SYSCLK_freq(void) {
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
    uint32_t sysclk_source, pllmul, prediv, pllclk;
    uint32_t HSE_Value = 8000000; // External crystal (adjust if different)
 80034de:	4b26      	ldr	r3, [pc, #152]	@ (8003578 <get_SYSCLK_freq+0xa0>)
 80034e0:	60bb      	str	r3, [r7, #8]
    uint32_t HSI_Value = 8000000; // Internal RC
 80034e2:	4b25      	ldr	r3, [pc, #148]	@ (8003578 <get_SYSCLK_freq+0xa0>)
 80034e4:	607b      	str	r3, [r7, #4]
    sysclk_source = (RCC->CFGR >> 2) & 0x3;  // SWS bits
 80034e6:	4b25      	ldr	r3, [pc, #148]	@ (800357c <get_SYSCLK_freq+0xa4>)
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	089b      	lsrs	r3, r3, #2
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	603b      	str	r3, [r7, #0]
    switch (sysclk_source) {
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d00d      	beq.n	8003514 <get_SYSCLK_freq+0x3c>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d835      	bhi.n	800356a <get_SYSCLK_freq+0x92>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <get_SYSCLK_freq+0x34>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d002      	beq.n	8003510 <get_SYSCLK_freq+0x38>
 800350a:	e02e      	b.n	800356a <get_SYSCLK_freq+0x92>
        case 0x00: // HSI
            return HSI_Value;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	e02d      	b.n	800356c <get_SYSCLK_freq+0x94>
        case 0x01: // HSE
            return HSE_Value;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	e02b      	b.n	800356c <get_SYSCLK_freq+0x94>
        case 0x02: // PLL
            // PLL source
            if (RCC->CFGR & (1 << 16)) {
 8003514:	4b19      	ldr	r3, [pc, #100]	@ (800357c <get_SYSCLK_freq+0xa4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d010      	beq.n	8003542 <get_SYSCLK_freq+0x6a>
                // HSE as PLL source
                if (RCC->CFGR & (1 << 17))
 8003520:	4b16      	ldr	r3, [pc, #88]	@ (800357c <get_SYSCLK_freq+0xa4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <get_SYSCLK_freq+0x5a>
                    prediv = 2;   // HSE/2
 800352c:	2302      	movs	r3, #2
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	e001      	b.n	8003536 <get_SYSCLK_freq+0x5e>
                else
                    prediv = 1;   // HSE
 8003532:	2301      	movs	r3, #1
 8003534:	613b      	str	r3, [r7, #16]
                pllclk = HSE_Value / prediv;
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	fbb2 f3f3 	udiv	r3, r2, r3
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e002      	b.n	8003548 <get_SYSCLK_freq+0x70>
            } else {
                // HSI/2 as PLL source
                pllclk = HSI_Value / 2; // 4 MHz
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	085b      	lsrs	r3, r3, #1
 8003546:	60fb      	str	r3, [r7, #12]
            }

            // PLL multiplier
            pllmul = ((RCC->CFGR >> 18) & 0xF) + 2;
 8003548:	4b0c      	ldr	r3, [pc, #48]	@ (800357c <get_SYSCLK_freq+0xa4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	0c9b      	lsrs	r3, r3, #18
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	3302      	adds	r3, #2
 8003554:	617b      	str	r3, [r7, #20]
            // Note: value 0b1101 = x13, 0b1110 = x14, 0b1111 = x16
            if (pllmul == 15) pllmul = 16; // adjust for 0b1111 special case
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b0f      	cmp	r3, #15
 800355a:	d101      	bne.n	8003560 <get_SYSCLK_freq+0x88>
 800355c:	2310      	movs	r3, #16
 800355e:	617b      	str	r3, [r7, #20]

            return pllclk * pllmul;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	fb02 f303 	mul.w	r3, r2, r3
 8003568:	e000      	b.n	800356c <get_SYSCLK_freq+0x94>
        default:
            return HSI_Value; // fallback
 800356a:	687b      	ldr	r3, [r7, #4]
    }
}
 800356c:	4618      	mov	r0, r3
 800356e:	371c      	adds	r7, #28
 8003570:	46bd      	mov	sp, r7
 8003572:	bc80      	pop	{r7}
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	007a1200 	.word	0x007a1200
 800357c:	40021000 	.word	0x40021000

08003580 <get_AHB_freq>:
uint32_t get_AHB_freq(void) {
 8003580:	b5b0      	push	{r4, r5, r7, lr}
 8003582:	b092      	sub	sp, #72	@ 0x48
 8003584:	af00      	add	r7, sp, #0
    uint32_t presc_table[16] = {1,1,1,1,1,1,1,1,2,4,8,16,64,128,256,512};
 8003586:	4b11      	ldr	r3, [pc, #68]	@ (80035cc <get_AHB_freq+0x4c>)
 8003588:	1d3c      	adds	r4, r7, #4
 800358a:	461d      	mov	r5, r3
 800358c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800358e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003598:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800359c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t hpre = (RCC->CFGR >> 4) & 0xF;
 80035a0:	4b0b      	ldr	r3, [pc, #44]	@ (80035d0 <get_AHB_freq+0x50>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	091b      	lsrs	r3, r3, #4
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	647b      	str	r3, [r7, #68]	@ 0x44
    return get_SYSCLK_freq() / presc_table[hpre];
 80035ac:	f7ff ff94 	bl	80034d8 <get_SYSCLK_freq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	3348      	adds	r3, #72	@ 0x48
 80035b8:	443b      	add	r3, r7
 80035ba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80035be:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3748      	adds	r7, #72	@ 0x48
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bdb0      	pop	{r4, r5, r7, pc}
 80035ca:	bf00      	nop
 80035cc:	08007400 	.word	0x08007400
 80035d0:	40021000 	.word	0x40021000

080035d4 <get_APB1_freq>:

uint32_t get_APB1_freq(void) {
 80035d4:	b5b0      	push	{r4, r5, r7, lr}
 80035d6:	b08a      	sub	sp, #40	@ 0x28
 80035d8:	af00      	add	r7, sp, #0
    uint32_t presc_table[8] = {1,1,1,1,2,4,8,16};
 80035da:	4b0f      	ldr	r3, [pc, #60]	@ (8003618 <get_APB1_freq+0x44>)
 80035dc:	1d3c      	adds	r4, r7, #4
 80035de:	461d      	mov	r5, r3
 80035e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80035e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t ppre1 = (RCC->CFGR >> 8) & 0x7;
 80035ec:	4b0b      	ldr	r3, [pc, #44]	@ (800361c <get_APB1_freq+0x48>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	627b      	str	r3, [r7, #36]	@ 0x24
    return get_AHB_freq() / presc_table[ppre1];
 80035f8:	f7ff ffc2 	bl	8003580 <get_AHB_freq>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	3328      	adds	r3, #40	@ 0x28
 8003604:	443b      	add	r3, r7
 8003606:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800360a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800360e:	4618      	mov	r0, r3
 8003610:	3728      	adds	r7, #40	@ 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	bdb0      	pop	{r4, r5, r7, pc}
 8003616:	bf00      	nop
 8003618:	08007440 	.word	0x08007440
 800361c:	40021000 	.word	0x40021000

08003620 <get_APB2_freq>:

uint32_t get_APB2_freq(void) {
 8003620:	b5b0      	push	{r4, r5, r7, lr}
 8003622:	b08a      	sub	sp, #40	@ 0x28
 8003624:	af00      	add	r7, sp, #0
    uint32_t presc_table[8] = {1,1,1,1,2,4,8,16};
 8003626:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <get_APB2_freq+0x44>)
 8003628:	1d3c      	adds	r4, r7, #4
 800362a:	461d      	mov	r5, r3
 800362c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800362e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003630:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t ppre2 = (RCC->CFGR >> 11) & 0x7;
 8003638:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <get_APB2_freq+0x48>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	0adb      	lsrs	r3, r3, #11
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24
    return get_AHB_freq() / presc_table[ppre2];
 8003644:	f7ff ff9c 	bl	8003580 <get_AHB_freq>
 8003648:	4602      	mov	r2, r0
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	3328      	adds	r3, #40	@ 0x28
 8003650:	443b      	add	r3, r7
 8003652:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800365a:	4618      	mov	r0, r3
 800365c:	3728      	adds	r7, #40	@ 0x28
 800365e:	46bd      	mov	sp, r7
 8003660:	bdb0      	pop	{r4, r5, r7, pc}
 8003662:	bf00      	nop
 8003664:	08007440 	.word	0x08007440
 8003668:	40021000 	.word	0x40021000

0800366c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <Init_tasks>:

#include"extern_file_declarations.h"
#define max_tasks 10
task_timer timer[max_tasks];

void Init_tasks(void){
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
	for(int i=0; i<max_tasks; i++){
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	e024      	b.n	80036ce <Init_tasks+0x56>
		timer[i].period_ms = 0;
 8003684:	4a16      	ldr	r2, [pc, #88]	@ (80036e0 <Init_tasks+0x68>)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	4413      	add	r3, r2
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
		timer[i].last_time_ms = 0;
 8003690:	4a13      	ldr	r2, [pc, #76]	@ (80036e0 <Init_tasks+0x68>)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	4413      	add	r3, r2
 8003698:	3304      	adds	r3, #4
 800369a:	2200      	movs	r2, #0
 800369c:	601a      	str	r2, [r3, #0]
		timer[i].enable = 0;
 800369e:	4a10      	ldr	r2, [pc, #64]	@ (80036e0 <Init_tasks+0x68>)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	4413      	add	r3, r2
 80036a6:	330c      	adds	r3, #12
 80036a8:	2200      	movs	r2, #0
 80036aa:	701a      	strb	r2, [r3, #0]
		timer[i].task_fn = 0;
 80036ac:	4a0c      	ldr	r2, [pc, #48]	@ (80036e0 <Init_tasks+0x68>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	4413      	add	r3, r2
 80036b4:	3308      	adds	r3, #8
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
		timer[i].one_time_execute = 0;
 80036ba:	4a09      	ldr	r2, [pc, #36]	@ (80036e0 <Init_tasks+0x68>)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	4413      	add	r3, r2
 80036c2:	330d      	adds	r3, #13
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<max_tasks; i++){
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3301      	adds	r3, #1
 80036cc:	607b      	str	r3, [r7, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b09      	cmp	r3, #9
 80036d2:	ddd7      	ble.n	8003684 <Init_tasks+0xc>
	}
}
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	200002ac 	.word	0x200002ac

080036e4 <uart_init>:
#include <stdio.h>
#include <stdarg.h>
#include"extern_file_declarations.h"
#define UART_PRINTF_BUFFER_SIZE 100
extern uint32_t get_APB1_freq(void) ;
STATUS uart_init(uint32_t Baud_Rate){
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	 // Enable clocks
	    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;   // GPIOA
 80036ec:	4b25      	ldr	r3, [pc, #148]	@ (8003784 <uart_init+0xa0>)
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	4a24      	ldr	r2, [pc, #144]	@ (8003784 <uart_init+0xa0>)
 80036f2:	f043 0304 	orr.w	r3, r3, #4
 80036f6:	6193      	str	r3, [r2, #24]
	    RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1
 80036f8:	4b22      	ldr	r3, [pc, #136]	@ (8003784 <uart_init+0xa0>)
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	4a21      	ldr	r2, [pc, #132]	@ (8003784 <uart_init+0xa0>)
 80036fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003702:	6193      	str	r3, [r2, #24]
	    // PA9 = TX (AF push-pull), PA10 = RX (input floating)
	    GPIOA->CRH &= ~((0xF << (4 * 1)) | (0xF << (4 * 2))); // clear CNF/MODE for PA9, PA10
 8003704:	4b20      	ldr	r3, [pc, #128]	@ (8003788 <uart_init+0xa4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4a1f      	ldr	r2, [pc, #124]	@ (8003788 <uart_init+0xa4>)
 800370a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800370e:	6053      	str	r3, [r2, #4]
	    GPIOA->CRH |=  (0xB << (4 * 1)); // PA9 = AF PP, 50 MHz
 8003710:	4b1d      	ldr	r3, [pc, #116]	@ (8003788 <uart_init+0xa4>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4a1c      	ldr	r2, [pc, #112]	@ (8003788 <uart_init+0xa4>)
 8003716:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800371a:	6053      	str	r3, [r2, #4]
	    GPIOA->CRH |=  (0x4 << (4 * 2)); // PA10 = input floating
 800371c:	4b1a      	ldr	r3, [pc, #104]	@ (8003788 <uart_init+0xa4>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	4a19      	ldr	r2, [pc, #100]	@ (8003788 <uart_init+0xa4>)
 8003722:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003726:	6053      	str	r3, [r2, #4]
	    // Reset USART1
	    USART1->CR1 = 0;
 8003728:	4b18      	ldr	r3, [pc, #96]	@ (800378c <uart_init+0xa8>)
 800372a:	2200      	movs	r2, #0
 800372c:	60da      	str	r2, [r3, #12]
	    // Calculate baudrate divisor
	    uint32_t pclk2 = get_APB2_freq();
 800372e:	f7ff ff77 	bl	8003620 <get_APB2_freq>
 8003732:	60f8      	str	r0, [r7, #12]
	    if (pclk2 == 0 || Baud_Rate == 0) {
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <uart_init+0x5c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <uart_init+0x60>
	        return RY_NOT_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e01b      	b.n	800377c <uart_init+0x98>
	    }
	    uint32_t usartdiv = (pclk2 + (Baud_Rate/2)) / Baud_Rate; // nearest
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	085a      	lsrs	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	441a      	add	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003752:	60bb      	str	r3, [r7, #8]
	    USART1->BRR = usartdiv;
 8003754:	4a0d      	ldr	r2, [pc, #52]	@ (800378c <uart_init+0xa8>)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	6093      	str	r3, [r2, #8]
	    // Enable USART, TX, RX
	    USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 800375a:	4b0c      	ldr	r3, [pc, #48]	@ (800378c <uart_init+0xa8>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	4a0b      	ldr	r2, [pc, #44]	@ (800378c <uart_init+0xa8>)
 8003760:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003764:	f043 030c 	orr.w	r3, r3, #12
 8003768:	60d3      	str	r3, [r2, #12]

	    // Verify configuration
	    if (!(USART1->CR1 & USART_CR1_UE)) {
 800376a:	4b08      	ldr	r3, [pc, #32]	@ (800378c <uart_init+0xa8>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <uart_init+0x96>
	        return RY_NOT_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e000      	b.n	800377c <uart_init+0x98>
	    }
	    return RY_OK;
 800377a:	2301      	movs	r3, #1
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000
 8003788:	40010800 	.word	0x40010800
 800378c:	40013800 	.word	0x40013800

08003790 <uart3_Init>:
STATUS uart3_Init(uint32_t baudrate) {
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
    // 1. Enable clocks for GPIOB and USART3
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;   // Enable GPIOB clock
 8003798:	4b23      	ldr	r3, [pc, #140]	@ (8003828 <uart3_Init+0x98>)
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	4a22      	ldr	r2, [pc, #136]	@ (8003828 <uart3_Init+0x98>)
 800379e:	f043 0308 	orr.w	r3, r3, #8
 80037a2:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_USART3EN; // Enable USART3 clock
 80037a4:	4b20      	ldr	r3, [pc, #128]	@ (8003828 <uart3_Init+0x98>)
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003828 <uart3_Init+0x98>)
 80037aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037ae:	61d3      	str	r3, [r2, #28]

    // 2. Configure PB10 as Alternate Function Push-Pull (TX), 50 MHz
    GPIOB->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
 80037b0:	4b1e      	ldr	r3, [pc, #120]	@ (800382c <uart3_Init+0x9c>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	4a1d      	ldr	r2, [pc, #116]	@ (800382c <uart3_Init+0x9c>)
 80037b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80037ba:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x03 << GPIO_CRH_MODE10_Pos); // Output mode, max speed 50 MHz
 80037bc:	4b1b      	ldr	r3, [pc, #108]	@ (800382c <uart3_Init+0x9c>)
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	4a1a      	ldr	r2, [pc, #104]	@ (800382c <uart3_Init+0x9c>)
 80037c2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80037c6:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x02 << GPIO_CRH_CNF10_Pos);  // AF push-pull
 80037c8:	4b18      	ldr	r3, [pc, #96]	@ (800382c <uart3_Init+0x9c>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4a17      	ldr	r2, [pc, #92]	@ (800382c <uart3_Init+0x9c>)
 80037ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80037d2:	6053      	str	r3, [r2, #4]

    // 3. Configure PB11 as Input Floating (RX)
    GPIOB->CRH &= ~(GPIO_CRH_MODE11 | GPIO_CRH_CNF11);
 80037d4:	4b15      	ldr	r3, [pc, #84]	@ (800382c <uart3_Init+0x9c>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4a14      	ldr	r2, [pc, #80]	@ (800382c <uart3_Init+0x9c>)
 80037da:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037de:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x01 << GPIO_CRH_CNF11_Pos);  // Floating input
 80037e0:	4b12      	ldr	r3, [pc, #72]	@ (800382c <uart3_Init+0x9c>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4a11      	ldr	r2, [pc, #68]	@ (800382c <uart3_Init+0x9c>)
 80037e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037ea:	6053      	str	r3, [r2, #4]

    // 4. USART configuration
    USART3->CR1 = 0;  // Reset control register
 80037ec:	4b10      	ldr	r3, [pc, #64]	@ (8003830 <uart3_Init+0xa0>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	60da      	str	r2, [r3, #12]

    // Baud rate = Fclk / (16 * USARTDIV)
    // Example: PCLK1 = 36 MHz, baud = 115200
    // USARTDIV = 36MHz / (16 * 115200) ≈ 19.53
    // DIV_Mantissa = 19, DIV_Fraction = 0.53*16 ≈ 8
    uint32_t pclk = 36000000; // APB1 clock is 36 MHz (default with 72 MHz SYSCLK)
 80037f2:	4b10      	ldr	r3, [pc, #64]	@ (8003834 <uart3_Init+0xa4>)
 80037f4:	60fb      	str	r3, [r7, #12]
    uint32_t usartdiv = (pclk + (baudrate/2)) / baudrate; // scaled
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	085a      	lsrs	r2, r3, #1
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	441a      	add	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	60bb      	str	r3, [r7, #8]
    USART3->BRR = usartdiv;
 8003806:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <uart3_Init+0xa0>)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	6093      	str	r3, [r2, #8]

    // Enable USART, TX, RX
    USART3->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800380c:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <uart3_Init+0xa0>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4a07      	ldr	r2, [pc, #28]	@ (8003830 <uart3_Init+0xa0>)
 8003812:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003816:	f043 030c 	orr.w	r3, r3, #12
 800381a:	60d3      	str	r3, [r2, #12]
    return RY_OK;
 800381c:	2301      	movs	r3, #1
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	40021000 	.word	0x40021000
 800382c:	40010c00 	.word	0x40010c00
 8003830:	40004800 	.word	0x40004800
 8003834:	02255100 	.word	0x02255100

08003838 <uart_print>:
void uart_print(uint8_t data)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
    // Wait until TXE (Transmit Data Register Empty)
    while (!(USART3->SR & USART_SR_TXE)) {  }
 8003842:	bf00      	nop
 8003844:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <uart_print+0x38>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0f9      	beq.n	8003844 <uart_print+0xc>
    USART3->DR = data;
 8003850:	4a07      	ldr	r2, [pc, #28]	@ (8003870 <uart_print+0x38>)
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	6053      	str	r3, [r2, #4]
    while (!(USART3->SR & USART_SR_TC)) {  }
 8003856:	bf00      	nop
 8003858:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <uart_print+0x38>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f9      	beq.n	8003858 <uart_print+0x20>
}
 8003864:	bf00      	nop
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr
 8003870:	40004800 	.word	0x40004800

08003874 <uart_print_str>:
void uart_print_str(const char *str)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
    while (*str) {
 800387c:	e006      	b.n	800388c <uart_print_str+0x18>
    	uart_print(*str++);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ffd6 	bl	8003838 <uart_print>
    while (*str) {
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1f4      	bne.n	800387e <uart_print_str+0xa>
    }
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <uart_send_double>:
void uart_send_double(double value, uint8_t decimal_places)
{
 80038a0:	b5b0      	push	{r4, r5, r7, lr}
 80038a2:	b09c      	sub	sp, #112	@ 0x70
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80038aa:	4613      	mov	r3, r2
 80038ac:	71fb      	strb	r3, [r7, #7]
    char buf[32]; // Larger buffer for double
    int i = 0;
 80038ae:	2300      	movs	r3, #0
 80038b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // Handle negative
    if (value < 0) {
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038be:	f7fc ff8d 	bl	80007dc <__aeabi_dcmplt>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00d      	beq.n	80038e4 <uart_send_double+0x44>
        buf[i++] = '-';
 80038c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038ce:	3370      	adds	r3, #112	@ 0x70
 80038d0:	443b      	add	r3, r7
 80038d2:	222d      	movs	r2, #45	@ 0x2d
 80038d4:	f803 2c4c 	strb.w	r2, [r3, #-76]
        value = -value;
 80038d8:	68bc      	ldr	r4, [r7, #8]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80038e0:	e9c7 4502 	strd	r4, r5, [r7, #8]
    }

    // Integer part
    long long int_part = (long long)value;
 80038e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038e8:	f7fd faec 	bl	8000ec4 <__aeabi_d2lz>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    double frac = value - (double)int_part;
 80038f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80038f8:	f7fc fee2 	bl	80006c0 <__aeabi_l2d>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003904:	f7fc fd52 	bl	80003ac <__aeabi_dsub>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    // Convert integer part to string
    char int_buf[20];
    int j = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	657b      	str	r3, [r7, #84]	@ 0x54
    do {
        int_buf[j++] = '0' + (int_part % 10);
 8003914:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8003918:	f04f 020a 	mov.w	r2, #10
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	f7fd fa80 	bl	8000e24 <__aeabi_ldivmod>
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003928:	1c59      	adds	r1, r3, #1
 800392a:	6579      	str	r1, [r7, #84]	@ 0x54
 800392c:	3230      	adds	r2, #48	@ 0x30
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	3370      	adds	r3, #112	@ 0x70
 8003932:	443b      	add	r3, r7
 8003934:	f803 2c60 	strb.w	r2, [r3, #-96]
        int_part /= 10;
 8003938:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 800393c:	f04f 020a 	mov.w	r2, #10
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	f7fd fa6e 	bl	8000e24 <__aeabi_ldivmod>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    } while (int_part > 0);
 8003950:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8003954:	2a01      	cmp	r2, #1
 8003956:	f173 0300 	sbcs.w	r3, r3, #0
 800395a:	dadb      	bge.n	8003914 <uart_send_double+0x74>

    // Reverse digits into buf
    for (int k = j - 1; k >= 0; k--) {
 800395c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395e:	3b01      	subs	r3, #1
 8003960:	653b      	str	r3, [r7, #80]	@ 0x50
 8003962:	e00e      	b.n	8003982 <uart_send_double+0xe2>
        buf[i++] = int_buf[k];
 8003964:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800396a:	f107 0110 	add.w	r1, r7, #16
 800396e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003970:	440a      	add	r2, r1
 8003972:	7812      	ldrb	r2, [r2, #0]
 8003974:	3370      	adds	r3, #112	@ 0x70
 8003976:	443b      	add	r3, r7
 8003978:	f803 2c4c 	strb.w	r2, [r3, #-76]
    for (int k = j - 1; k >= 0; k--) {
 800397c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800397e:	3b01      	subs	r3, #1
 8003980:	653b      	str	r3, [r7, #80]	@ 0x50
 8003982:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003984:	2b00      	cmp	r3, #0
 8003986:	daed      	bge.n	8003964 <uart_send_double+0xc4>
    }

    buf[i++] = '.'; // decimal point
 8003988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800398e:	3370      	adds	r3, #112	@ 0x70
 8003990:	443b      	add	r3, r7
 8003992:	222e      	movs	r2, #46	@ 0x2e
 8003994:	f803 2c4c 	strb.w	r2, [r3, #-76]

    // Fractional part
    for (int k = 0; k < decimal_places; k++) {
 8003998:	2300      	movs	r3, #0
 800399a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800399c:	e02b      	b.n	80039f6 <uart_send_double+0x156>
        frac *= 10;
 800399e:	f04f 0200 	mov.w	r2, #0
 80039a2:	4b22      	ldr	r3, [pc, #136]	@ (8003a2c <uart_send_double+0x18c>)
 80039a4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80039a8:	f7fc fbd2 	bl	8000150 <__aeabi_dmul>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
        int digit = (int)frac;
 80039b4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80039b8:	f7fc ff38 	bl	800082c <__aeabi_d2iz>
 80039bc:	4603      	mov	r3, r0
 80039be:	647b      	str	r3, [r7, #68]	@ 0x44
        buf[i++] = '0' + digit;
 80039c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039c6:	1c59      	adds	r1, r3, #1
 80039c8:	66f9      	str	r1, [r7, #108]	@ 0x6c
 80039ca:	3230      	adds	r2, #48	@ 0x30
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	3370      	adds	r3, #112	@ 0x70
 80039d0:	443b      	add	r3, r7
 80039d2:	f803 2c4c 	strb.w	r2, [r3, #-76]
        frac -= digit;
 80039d6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80039d8:	f7fc fe36 	bl	8000648 <__aeabi_i2d>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80039e4:	f7fc fce2 	bl	80003ac <__aeabi_dsub>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (int k = 0; k < decimal_places; k++) {
 80039f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039f2:	3301      	adds	r3, #1
 80039f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039fa:	429a      	cmp	r2, r3
 80039fc:	dbcf      	blt.n	800399e <uart_send_double+0xfe>
    }

    // Send string over UART
    for (int k = 0; k < i; k++) {
 80039fe:	2300      	movs	r3, #0
 8003a00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a02:	e00a      	b.n	8003a1a <uart_send_double+0x17a>
    	uart_print(buf[k]);
 8003a04:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003a08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a0a:	4413      	add	r3, r2
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff ff12 	bl	8003838 <uart_print>
    for (int k = 0; k < i; k++) {
 8003a14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a16:	3301      	adds	r3, #1
 8003a18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	dbf0      	blt.n	8003a04 <uart_send_double+0x164>
    }
}
 8003a22:	bf00      	nop
 8003a24:	bf00      	nop
 8003a26:	3770      	adds	r7, #112	@ 0x70
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a2c:	40240000 	.word	0x40240000

08003a30 <uart_send1>:
void uart_send1(const uint8_t *buf, size_t len) {
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < len; ++i) {
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60fb      	str	r3, [r7, #12]
 8003a3e:	e00f      	b.n	8003a60 <uart_send1+0x30>
        // Wait until TXE (transmit data register empty)
        while (!(USART1->SR & (1U << 7))) { /* busy wait */ } // TXE bit
 8003a40:	bf00      	nop
 8003a42:	4b10      	ldr	r3, [pc, #64]	@ (8003a84 <uart_send1+0x54>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f9      	beq.n	8003a42 <uart_send1+0x12>
        // Write data (DR is 8-bit)
        USART1->DR = (uint8_t)buf[i];
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4413      	add	r3, r2
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <uart_send1+0x54>)
 8003a58:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < len; ++i) {
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d3eb      	bcc.n	8003a40 <uart_send1+0x10>
    }
    // Optionally wait for TC (transmission complete) if you need to ensure fully shifted out:
    while (!(USART1->SR & (1U << 6))) { /* wait TC */ } // TC bit
 8003a68:	bf00      	nop
 8003a6a:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <uart_send1+0x54>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d0f9      	beq.n	8003a6a <uart_send1+0x3a>
}
 8003a76:	bf00      	nop
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40013800 	.word	0x40013800

08003a88 <uart_send>:
void uart_send(const uint8_t *buf, size_t len) {
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < len; ++i) {
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	e00f      	b.n	8003ab8 <uart_send+0x30>
        // Wait until TXE (transmit data register empty)
        while (!(USART3->SR & (1U << 7))) { /* busy wait */ } // TXE bit
 8003a98:	bf00      	nop
 8003a9a:	4b10      	ldr	r3, [pc, #64]	@ (8003adc <uart_send+0x54>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f9      	beq.n	8003a9a <uart_send+0x12>
        // Write data (DR is 8-bit)
        USART3->DR = (uint8_t)buf[i];
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	781a      	ldrb	r2, [r3, #0]
 8003aae:	4b0b      	ldr	r3, [pc, #44]	@ (8003adc <uart_send+0x54>)
 8003ab0:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < len; ++i) {
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d3eb      	bcc.n	8003a98 <uart_send+0x10>
    }
    // Optionally wait for TC (transmission complete) if you need to ensure fully shifted out:
    while (!(USART3->SR & (1U << 6))) { /* wait TC */ } // TC bit
 8003ac0:	bf00      	nop
 8003ac2:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <uart_send+0x54>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f9      	beq.n	8003ac2 <uart_send+0x3a>
}
 8003ace:	bf00      	nop
 8003ad0:	bf00      	nop
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bc80      	pop	{r7}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	40004800 	.word	0x40004800

08003ae0 <uart_printf>:
void uart_printf(const char *format, ...)
{
 8003ae0:	b40f      	push	{r0, r1, r2, r3}
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b0c2      	sub	sp, #264	@ 0x108
 8003ae6:	af00      	add	r7, sp, #0
    char buf[256];
    va_list ap;
    va_start(ap, format);
 8003ae8:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8003aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003af4:	601a      	str	r2, [r3, #0]
    int n = vsnprintf(buf, sizeof(buf), format, ap);
 8003af6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003afa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003afe:	1d38      	adds	r0, r7, #4
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003b06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b0a:	f002 faaf 	bl	800606c <vsniprintf>
 8003b0e:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    va_end(ap);
    if (n > 0) {
 8003b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	dd0f      	ble.n	8003b3a <uart_printf+0x5a>
        // truncate if too long
        if ((size_t)n > sizeof(buf)) n = sizeof(buf);
 8003b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b22:	d903      	bls.n	8003b2c <uart_printf+0x4c>
 8003b24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        uart_send(buf, (size_t)n);
 8003b2c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003b30:	1d3b      	adds	r3, r7, #4
 8003b32:	4611      	mov	r1, r2
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff ffa7 	bl	8003a88 <uart_send>
    }
}
 8003b3a:	bf00      	nop
 8003b3c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8003b40:	46bd      	mov	sp, r7
 8003b42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b46:	b004      	add	sp, #16
 8003b48:	4770      	bx	lr
	...

08003b4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b4c:	f7ff fd8e 	bl	800366c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b50:	480b      	ldr	r0, [pc, #44]	@ (8003b80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003b52:	490c      	ldr	r1, [pc, #48]	@ (8003b84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003b54:	4a0c      	ldr	r2, [pc, #48]	@ (8003b88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b58:	e002      	b.n	8003b60 <LoopCopyDataInit>

08003b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b5e:	3304      	adds	r3, #4

08003b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b64:	d3f9      	bcc.n	8003b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b66:	4a09      	ldr	r2, [pc, #36]	@ (8003b8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003b68:	4c09      	ldr	r4, [pc, #36]	@ (8003b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b6c:	e001      	b.n	8003b72 <LoopFillZerobss>

08003b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b70:	3204      	adds	r2, #4

08003b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b74:	d3fb      	bcc.n	8003b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b76:	f002 fa8d 	bl	8006094 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b7a:	f7ff fa25 	bl	8002fc8 <main>
  bx lr
 8003b7e:	4770      	bx	lr
  ldr r0, =_sdata
 8003b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b84:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003b88:	080074ac 	.word	0x080074ac
  ldr r2, =_sbss
 8003b8c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003b90:	20000498 	.word	0x20000498

08003b94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b94:	e7fe      	b.n	8003b94 <ADC1_2_IRQHandler>
	...

08003b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b9c:	4b08      	ldr	r3, [pc, #32]	@ (8003bc0 <HAL_Init+0x28>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a07      	ldr	r2, [pc, #28]	@ (8003bc0 <HAL_Init+0x28>)
 8003ba2:	f043 0310 	orr.w	r3, r3, #16
 8003ba6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ba8:	2003      	movs	r0, #3
 8003baa:	f000 f919 	bl	8003de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bae:	200f      	movs	r0, #15
 8003bb0:	f000 f808 	bl	8003bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bb4:	f7ff fb22 	bl	80031fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40022000 	.word	0x40022000

08003bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bcc:	4b12      	ldr	r3, [pc, #72]	@ (8003c18 <HAL_InitTick+0x54>)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	4b12      	ldr	r3, [pc, #72]	@ (8003c1c <HAL_InitTick+0x58>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f931 	bl	8003e4a <HAL_SYSTICK_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e00e      	b.n	8003c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b0f      	cmp	r3, #15
 8003bf6:	d80a      	bhi.n	8003c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003c00:	f000 f8f9 	bl	8003df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c04:	4a06      	ldr	r2, [pc, #24]	@ (8003c20 <HAL_InitTick+0x5c>)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e000      	b.n	8003c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	20000004 	.word	0x20000004
 8003c1c:	2000000c 	.word	0x2000000c
 8003c20:	20000008 	.word	0x20000008

08003c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c28:	4b05      	ldr	r3, [pc, #20]	@ (8003c40 <HAL_IncTick+0x1c>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b05      	ldr	r3, [pc, #20]	@ (8003c44 <HAL_IncTick+0x20>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4413      	add	r3, r2
 8003c34:	4a03      	ldr	r2, [pc, #12]	@ (8003c44 <HAL_IncTick+0x20>)
 8003c36:	6013      	str	r3, [r2, #0]
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bc80      	pop	{r7}
 8003c3e:	4770      	bx	lr
 8003c40:	2000000c 	.word	0x2000000c
 8003c44:	2000034c 	.word	0x2000034c

08003c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c58:	4b0c      	ldr	r3, [pc, #48]	@ (8003c8c <__NVIC_SetPriorityGrouping+0x44>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c64:	4013      	ands	r3, r2
 8003c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c7a:	4a04      	ldr	r2, [pc, #16]	@ (8003c8c <__NVIC_SetPriorityGrouping+0x44>)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	60d3      	str	r3, [r2, #12]
}
 8003c80:	bf00      	nop
 8003c82:	3714      	adds	r7, #20
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bc80      	pop	{r7}
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c94:	4b04      	ldr	r3, [pc, #16]	@ (8003ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	0a1b      	lsrs	r3, r3, #8
 8003c9a:	f003 0307 	and.w	r3, r3, #7
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bc80      	pop	{r7}
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	db0b      	blt.n	8003cd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cbe:	79fb      	ldrb	r3, [r7, #7]
 8003cc0:	f003 021f 	and.w	r2, r3, #31
 8003cc4:	4906      	ldr	r1, [pc, #24]	@ (8003ce0 <__NVIC_EnableIRQ+0x34>)
 8003cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2001      	movs	r0, #1
 8003cce:	fa00 f202 	lsl.w	r2, r0, r2
 8003cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr
 8003ce0:	e000e100 	.word	0xe000e100

08003ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	6039      	str	r1, [r7, #0]
 8003cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	db0a      	blt.n	8003d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	490c      	ldr	r1, [pc, #48]	@ (8003d30 <__NVIC_SetPriority+0x4c>)
 8003cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d02:	0112      	lsls	r2, r2, #4
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	440b      	add	r3, r1
 8003d08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d0c:	e00a      	b.n	8003d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	4908      	ldr	r1, [pc, #32]	@ (8003d34 <__NVIC_SetPriority+0x50>)
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	3b04      	subs	r3, #4
 8003d1c:	0112      	lsls	r2, r2, #4
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	440b      	add	r3, r1
 8003d22:	761a      	strb	r2, [r3, #24]
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	e000e100 	.word	0xe000e100
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b089      	sub	sp, #36	@ 0x24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f1c3 0307 	rsb	r3, r3, #7
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	bf28      	it	cs
 8003d56:	2304      	movcs	r3, #4
 8003d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	2b06      	cmp	r3, #6
 8003d60:	d902      	bls.n	8003d68 <NVIC_EncodePriority+0x30>
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	3b03      	subs	r3, #3
 8003d66:	e000      	b.n	8003d6a <NVIC_EncodePriority+0x32>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	43da      	mvns	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d80:	f04f 31ff 	mov.w	r1, #4294967295
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8a:	43d9      	mvns	r1, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d90:	4313      	orrs	r3, r2
         );
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3724      	adds	r7, #36	@ 0x24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr

08003d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dac:	d301      	bcc.n	8003db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dae:	2301      	movs	r3, #1
 8003db0:	e00f      	b.n	8003dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003db2:	4a0a      	ldr	r2, [pc, #40]	@ (8003ddc <SysTick_Config+0x40>)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dba:	210f      	movs	r1, #15
 8003dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc0:	f7ff ff90 	bl	8003ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dc4:	4b05      	ldr	r3, [pc, #20]	@ (8003ddc <SysTick_Config+0x40>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dca:	4b04      	ldr	r3, [pc, #16]	@ (8003ddc <SysTick_Config+0x40>)
 8003dcc:	2207      	movs	r2, #7
 8003dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	e000e010 	.word	0xe000e010

08003de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff ff2d 	bl	8003c48 <__NVIC_SetPriorityGrouping>
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
 8003e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e08:	f7ff ff42 	bl	8003c90 <__NVIC_GetPriorityGrouping>
 8003e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	6978      	ldr	r0, [r7, #20]
 8003e14:	f7ff ff90 	bl	8003d38 <NVIC_EncodePriority>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1e:	4611      	mov	r1, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff5f 	bl	8003ce4 <__NVIC_SetPriority>
}
 8003e26:	bf00      	nop
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	4603      	mov	r3, r0
 8003e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff ff35 	bl	8003cac <__NVIC_EnableIRQ>
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff ffa2 	bl	8003d9c <SysTick_Config>
 8003e58:	4603      	mov	r3, r0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d005      	beq.n	8003e88 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2204      	movs	r2, #4
 8003e80:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]
 8003e86:	e051      	b.n	8003f2c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 020e 	bic.w	r2, r2, #14
 8003e96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0201 	bic.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a22      	ldr	r2, [pc, #136]	@ (8003f38 <HAL_DMA_Abort_IT+0xd4>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d029      	beq.n	8003f06 <HAL_DMA_Abort_IT+0xa2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a21      	ldr	r2, [pc, #132]	@ (8003f3c <HAL_DMA_Abort_IT+0xd8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d022      	beq.n	8003f02 <HAL_DMA_Abort_IT+0x9e>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8003f40 <HAL_DMA_Abort_IT+0xdc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d01a      	beq.n	8003efc <HAL_DMA_Abort_IT+0x98>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1e      	ldr	r2, [pc, #120]	@ (8003f44 <HAL_DMA_Abort_IT+0xe0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d012      	beq.n	8003ef6 <HAL_DMA_Abort_IT+0x92>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f48 <HAL_DMA_Abort_IT+0xe4>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00a      	beq.n	8003ef0 <HAL_DMA_Abort_IT+0x8c>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a1b      	ldr	r2, [pc, #108]	@ (8003f4c <HAL_DMA_Abort_IT+0xe8>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d102      	bne.n	8003eea <HAL_DMA_Abort_IT+0x86>
 8003ee4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003ee8:	e00e      	b.n	8003f08 <HAL_DMA_Abort_IT+0xa4>
 8003eea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003eee:	e00b      	b.n	8003f08 <HAL_DMA_Abort_IT+0xa4>
 8003ef0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ef4:	e008      	b.n	8003f08 <HAL_DMA_Abort_IT+0xa4>
 8003ef6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003efa:	e005      	b.n	8003f08 <HAL_DMA_Abort_IT+0xa4>
 8003efc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f00:	e002      	b.n	8003f08 <HAL_DMA_Abort_IT+0xa4>
 8003f02:	2310      	movs	r3, #16
 8003f04:	e000      	b.n	8003f08 <HAL_DMA_Abort_IT+0xa4>
 8003f06:	2301      	movs	r3, #1
 8003f08:	4a11      	ldr	r2, [pc, #68]	@ (8003f50 <HAL_DMA_Abort_IT+0xec>)
 8003f0a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
    } 
  }
  return status;
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40020008 	.word	0x40020008
 8003f3c:	4002001c 	.word	0x4002001c
 8003f40:	40020030 	.word	0x40020030
 8003f44:	40020044 	.word	0x40020044
 8003f48:	40020058 	.word	0x40020058
 8003f4c:	4002006c 	.word	0x4002006c
 8003f50:	40020000 	.word	0x40020000

08003f54 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f62:	b2db      	uxtb	r3, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr
	...

08003f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b08b      	sub	sp, #44	@ 0x2c
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f82:	e169      	b.n	8004258 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f84:	2201      	movs	r2, #1
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69fa      	ldr	r2, [r7, #28]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	f040 8158 	bne.w	8004252 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	4a9a      	ldr	r2, [pc, #616]	@ (8004210 <HAL_GPIO_Init+0x2a0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d05e      	beq.n	800406a <HAL_GPIO_Init+0xfa>
 8003fac:	4a98      	ldr	r2, [pc, #608]	@ (8004210 <HAL_GPIO_Init+0x2a0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d875      	bhi.n	800409e <HAL_GPIO_Init+0x12e>
 8003fb2:	4a98      	ldr	r2, [pc, #608]	@ (8004214 <HAL_GPIO_Init+0x2a4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d058      	beq.n	800406a <HAL_GPIO_Init+0xfa>
 8003fb8:	4a96      	ldr	r2, [pc, #600]	@ (8004214 <HAL_GPIO_Init+0x2a4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d86f      	bhi.n	800409e <HAL_GPIO_Init+0x12e>
 8003fbe:	4a96      	ldr	r2, [pc, #600]	@ (8004218 <HAL_GPIO_Init+0x2a8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d052      	beq.n	800406a <HAL_GPIO_Init+0xfa>
 8003fc4:	4a94      	ldr	r2, [pc, #592]	@ (8004218 <HAL_GPIO_Init+0x2a8>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d869      	bhi.n	800409e <HAL_GPIO_Init+0x12e>
 8003fca:	4a94      	ldr	r2, [pc, #592]	@ (800421c <HAL_GPIO_Init+0x2ac>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d04c      	beq.n	800406a <HAL_GPIO_Init+0xfa>
 8003fd0:	4a92      	ldr	r2, [pc, #584]	@ (800421c <HAL_GPIO_Init+0x2ac>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d863      	bhi.n	800409e <HAL_GPIO_Init+0x12e>
 8003fd6:	4a92      	ldr	r2, [pc, #584]	@ (8004220 <HAL_GPIO_Init+0x2b0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d046      	beq.n	800406a <HAL_GPIO_Init+0xfa>
 8003fdc:	4a90      	ldr	r2, [pc, #576]	@ (8004220 <HAL_GPIO_Init+0x2b0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d85d      	bhi.n	800409e <HAL_GPIO_Init+0x12e>
 8003fe2:	2b12      	cmp	r3, #18
 8003fe4:	d82a      	bhi.n	800403c <HAL_GPIO_Init+0xcc>
 8003fe6:	2b12      	cmp	r3, #18
 8003fe8:	d859      	bhi.n	800409e <HAL_GPIO_Init+0x12e>
 8003fea:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff0 <HAL_GPIO_Init+0x80>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	0800406b 	.word	0x0800406b
 8003ff4:	08004045 	.word	0x08004045
 8003ff8:	08004057 	.word	0x08004057
 8003ffc:	08004099 	.word	0x08004099
 8004000:	0800409f 	.word	0x0800409f
 8004004:	0800409f 	.word	0x0800409f
 8004008:	0800409f 	.word	0x0800409f
 800400c:	0800409f 	.word	0x0800409f
 8004010:	0800409f 	.word	0x0800409f
 8004014:	0800409f 	.word	0x0800409f
 8004018:	0800409f 	.word	0x0800409f
 800401c:	0800409f 	.word	0x0800409f
 8004020:	0800409f 	.word	0x0800409f
 8004024:	0800409f 	.word	0x0800409f
 8004028:	0800409f 	.word	0x0800409f
 800402c:	0800409f 	.word	0x0800409f
 8004030:	0800409f 	.word	0x0800409f
 8004034:	0800404d 	.word	0x0800404d
 8004038:	08004061 	.word	0x08004061
 800403c:	4a79      	ldr	r2, [pc, #484]	@ (8004224 <HAL_GPIO_Init+0x2b4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d013      	beq.n	800406a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004042:	e02c      	b.n	800409e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	623b      	str	r3, [r7, #32]
          break;
 800404a:	e029      	b.n	80040a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	3304      	adds	r3, #4
 8004052:	623b      	str	r3, [r7, #32]
          break;
 8004054:	e024      	b.n	80040a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	3308      	adds	r3, #8
 800405c:	623b      	str	r3, [r7, #32]
          break;
 800405e:	e01f      	b.n	80040a0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	330c      	adds	r3, #12
 8004066:	623b      	str	r3, [r7, #32]
          break;
 8004068:	e01a      	b.n	80040a0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d102      	bne.n	8004078 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004072:	2304      	movs	r3, #4
 8004074:	623b      	str	r3, [r7, #32]
          break;
 8004076:	e013      	b.n	80040a0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d105      	bne.n	800408c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004080:	2308      	movs	r3, #8
 8004082:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	611a      	str	r2, [r3, #16]
          break;
 800408a:	e009      	b.n	80040a0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800408c:	2308      	movs	r3, #8
 800408e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	615a      	str	r2, [r3, #20]
          break;
 8004096:	e003      	b.n	80040a0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004098:	2300      	movs	r3, #0
 800409a:	623b      	str	r3, [r7, #32]
          break;
 800409c:	e000      	b.n	80040a0 <HAL_GPIO_Init+0x130>
          break;
 800409e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2bff      	cmp	r3, #255	@ 0xff
 80040a4:	d801      	bhi.n	80040aa <HAL_GPIO_Init+0x13a>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	e001      	b.n	80040ae <HAL_GPIO_Init+0x13e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3304      	adds	r3, #4
 80040ae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2bff      	cmp	r3, #255	@ 0xff
 80040b4:	d802      	bhi.n	80040bc <HAL_GPIO_Init+0x14c>
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	e002      	b.n	80040c2 <HAL_GPIO_Init+0x152>
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	3b08      	subs	r3, #8
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	210f      	movs	r1, #15
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	fa01 f303 	lsl.w	r3, r1, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	401a      	ands	r2, r3
 80040d4:	6a39      	ldr	r1, [r7, #32]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	fa01 f303 	lsl.w	r3, r1, r3
 80040dc:	431a      	orrs	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f000 80b1 	beq.w	8004252 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004228 <HAL_GPIO_Init+0x2b8>)
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	4a4c      	ldr	r2, [pc, #304]	@ (8004228 <HAL_GPIO_Init+0x2b8>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	6193      	str	r3, [r2, #24]
 80040fc:	4b4a      	ldr	r3, [pc, #296]	@ (8004228 <HAL_GPIO_Init+0x2b8>)
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	60bb      	str	r3, [r7, #8]
 8004106:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004108:	4a48      	ldr	r2, [pc, #288]	@ (800422c <HAL_GPIO_Init+0x2bc>)
 800410a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800410c:	089b      	lsrs	r3, r3, #2
 800410e:	3302      	adds	r3, #2
 8004110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004114:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	220f      	movs	r2, #15
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4013      	ands	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a40      	ldr	r2, [pc, #256]	@ (8004230 <HAL_GPIO_Init+0x2c0>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <HAL_GPIO_Init+0x1ec>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a3f      	ldr	r2, [pc, #252]	@ (8004234 <HAL_GPIO_Init+0x2c4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00d      	beq.n	8004158 <HAL_GPIO_Init+0x1e8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a3e      	ldr	r2, [pc, #248]	@ (8004238 <HAL_GPIO_Init+0x2c8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d007      	beq.n	8004154 <HAL_GPIO_Init+0x1e4>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a3d      	ldr	r2, [pc, #244]	@ (800423c <HAL_GPIO_Init+0x2cc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d101      	bne.n	8004150 <HAL_GPIO_Init+0x1e0>
 800414c:	2303      	movs	r3, #3
 800414e:	e006      	b.n	800415e <HAL_GPIO_Init+0x1ee>
 8004150:	2304      	movs	r3, #4
 8004152:	e004      	b.n	800415e <HAL_GPIO_Init+0x1ee>
 8004154:	2302      	movs	r3, #2
 8004156:	e002      	b.n	800415e <HAL_GPIO_Init+0x1ee>
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <HAL_GPIO_Init+0x1ee>
 800415c:	2300      	movs	r3, #0
 800415e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004160:	f002 0203 	and.w	r2, r2, #3
 8004164:	0092      	lsls	r2, r2, #2
 8004166:	4093      	lsls	r3, r2
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800416e:	492f      	ldr	r1, [pc, #188]	@ (800422c <HAL_GPIO_Init+0x2bc>)
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	3302      	adds	r3, #2
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d006      	beq.n	8004196 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004188:	4b2d      	ldr	r3, [pc, #180]	@ (8004240 <HAL_GPIO_Init+0x2d0>)
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	492c      	ldr	r1, [pc, #176]	@ (8004240 <HAL_GPIO_Init+0x2d0>)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	4313      	orrs	r3, r2
 8004192:	608b      	str	r3, [r1, #8]
 8004194:	e006      	b.n	80041a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004196:	4b2a      	ldr	r3, [pc, #168]	@ (8004240 <HAL_GPIO_Init+0x2d0>)
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	43db      	mvns	r3, r3
 800419e:	4928      	ldr	r1, [pc, #160]	@ (8004240 <HAL_GPIO_Init+0x2d0>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d006      	beq.n	80041be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041b0:	4b23      	ldr	r3, [pc, #140]	@ (8004240 <HAL_GPIO_Init+0x2d0>)
 80041b2:	68da      	ldr	r2, [r3, #12]
 80041b4:	4922      	ldr	r1, [pc, #136]	@ (8004240 <HAL_GPIO_Init+0x2d0>)
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60cb      	str	r3, [r1, #12]
 80041bc:	e006      	b.n	80041cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041be:	4b20      	ldr	r3, [pc, #128]	@ (8004240 <HAL_GPIO_Init+0x2d0>)
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	43db      	mvns	r3, r3
 80041c6:	491e      	ldr	r1, [pc, #120]	@ (8004240 <HAL_GPIO_Init+0x2d0>)
 80041c8:	4013      	ands	r3, r2
 80041ca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d006      	beq.n	80041e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80041d8:	4b19      	ldr	r3, [pc, #100]	@ (8004240 <HAL_GPIO_Init+0x2d0>)
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	4918      	ldr	r1, [pc, #96]	@ (8004240 <HAL_GPIO_Init+0x2d0>)
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	604b      	str	r3, [r1, #4]
 80041e4:	e006      	b.n	80041f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80041e6:	4b16      	ldr	r3, [pc, #88]	@ (8004240 <HAL_GPIO_Init+0x2d0>)
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	43db      	mvns	r3, r3
 80041ee:	4914      	ldr	r1, [pc, #80]	@ (8004240 <HAL_GPIO_Init+0x2d0>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d021      	beq.n	8004244 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004200:	4b0f      	ldr	r3, [pc, #60]	@ (8004240 <HAL_GPIO_Init+0x2d0>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	490e      	ldr	r1, [pc, #56]	@ (8004240 <HAL_GPIO_Init+0x2d0>)
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]
 800420c:	e021      	b.n	8004252 <HAL_GPIO_Init+0x2e2>
 800420e:	bf00      	nop
 8004210:	10320000 	.word	0x10320000
 8004214:	10310000 	.word	0x10310000
 8004218:	10220000 	.word	0x10220000
 800421c:	10210000 	.word	0x10210000
 8004220:	10120000 	.word	0x10120000
 8004224:	10110000 	.word	0x10110000
 8004228:	40021000 	.word	0x40021000
 800422c:	40010000 	.word	0x40010000
 8004230:	40010800 	.word	0x40010800
 8004234:	40010c00 	.word	0x40010c00
 8004238:	40011000 	.word	0x40011000
 800423c:	40011400 	.word	0x40011400
 8004240:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004244:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <HAL_GPIO_Init+0x304>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	43db      	mvns	r3, r3
 800424c:	4909      	ldr	r1, [pc, #36]	@ (8004274 <HAL_GPIO_Init+0x304>)
 800424e:	4013      	ands	r3, r2
 8004250:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	3301      	adds	r3, #1
 8004256:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425e:	fa22 f303 	lsr.w	r3, r2, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	f47f ae8e 	bne.w	8003f84 <HAL_GPIO_Init+0x14>
  }
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	372c      	adds	r7, #44	@ 0x2c
 800426e:	46bd      	mov	sp, r7
 8004270:	bc80      	pop	{r7}
 8004272:	4770      	bx	lr
 8004274:	40010400 	.word	0x40010400

08004278 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e12b      	b.n	80044e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d106      	bne.n	80042a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7fe ffde 	bl	8003260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2224      	movs	r2, #36	@ 0x24
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 0201 	bic.w	r2, r2, #1
 80042ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042dc:	f001 fe84 	bl	8005fe8 <HAL_RCC_GetPCLK1Freq>
 80042e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	4a81      	ldr	r2, [pc, #516]	@ (80044ec <HAL_I2C_Init+0x274>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d807      	bhi.n	80042fc <HAL_I2C_Init+0x84>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a80      	ldr	r2, [pc, #512]	@ (80044f0 <HAL_I2C_Init+0x278>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	bf94      	ite	ls
 80042f4:	2301      	movls	r3, #1
 80042f6:	2300      	movhi	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	e006      	b.n	800430a <HAL_I2C_Init+0x92>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4a7d      	ldr	r2, [pc, #500]	@ (80044f4 <HAL_I2C_Init+0x27c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	bf94      	ite	ls
 8004304:	2301      	movls	r3, #1
 8004306:	2300      	movhi	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e0e7      	b.n	80044e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4a78      	ldr	r2, [pc, #480]	@ (80044f8 <HAL_I2C_Init+0x280>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	0c9b      	lsrs	r3, r3, #18
 800431c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	430a      	orrs	r2, r1
 8004330:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	4a6a      	ldr	r2, [pc, #424]	@ (80044ec <HAL_I2C_Init+0x274>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d802      	bhi.n	800434c <HAL_I2C_Init+0xd4>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	3301      	adds	r3, #1
 800434a:	e009      	b.n	8004360 <HAL_I2C_Init+0xe8>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004352:	fb02 f303 	mul.w	r3, r2, r3
 8004356:	4a69      	ldr	r2, [pc, #420]	@ (80044fc <HAL_I2C_Init+0x284>)
 8004358:	fba2 2303 	umull	r2, r3, r2, r3
 800435c:	099b      	lsrs	r3, r3, #6
 800435e:	3301      	adds	r3, #1
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	430b      	orrs	r3, r1
 8004366:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004372:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	495c      	ldr	r1, [pc, #368]	@ (80044ec <HAL_I2C_Init+0x274>)
 800437c:	428b      	cmp	r3, r1
 800437e:	d819      	bhi.n	80043b4 <HAL_I2C_Init+0x13c>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	1e59      	subs	r1, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	fbb1 f3f3 	udiv	r3, r1, r3
 800438e:	1c59      	adds	r1, r3, #1
 8004390:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004394:	400b      	ands	r3, r1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_I2C_Init+0x138>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1e59      	subs	r1, r3, #1
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80043a8:	3301      	adds	r3, #1
 80043aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ae:	e051      	b.n	8004454 <HAL_I2C_Init+0x1dc>
 80043b0:	2304      	movs	r3, #4
 80043b2:	e04f      	b.n	8004454 <HAL_I2C_Init+0x1dc>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d111      	bne.n	80043e0 <HAL_I2C_Init+0x168>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1e58      	subs	r0, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6859      	ldr	r1, [r3, #4]
 80043c4:	460b      	mov	r3, r1
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	440b      	add	r3, r1
 80043ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ce:	3301      	adds	r3, #1
 80043d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	e012      	b.n	8004406 <HAL_I2C_Init+0x18e>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	1e58      	subs	r0, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6859      	ldr	r1, [r3, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	0099      	lsls	r1, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f6:	3301      	adds	r3, #1
 80043f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_I2C_Init+0x196>
 800440a:	2301      	movs	r3, #1
 800440c:	e022      	b.n	8004454 <HAL_I2C_Init+0x1dc>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10e      	bne.n	8004434 <HAL_I2C_Init+0x1bc>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1e58      	subs	r0, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6859      	ldr	r1, [r3, #4]
 800441e:	460b      	mov	r3, r1
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	440b      	add	r3, r1
 8004424:	fbb0 f3f3 	udiv	r3, r0, r3
 8004428:	3301      	adds	r3, #1
 800442a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800442e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004432:	e00f      	b.n	8004454 <HAL_I2C_Init+0x1dc>
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	1e58      	subs	r0, r3, #1
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6859      	ldr	r1, [r3, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	0099      	lsls	r1, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	fbb0 f3f3 	udiv	r3, r0, r3
 800444a:	3301      	adds	r3, #1
 800444c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004450:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	6809      	ldr	r1, [r1, #0]
 8004458:	4313      	orrs	r3, r2
 800445a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004482:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6911      	ldr	r1, [r2, #16]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	68d2      	ldr	r2, [r2, #12]
 800448e:	4311      	orrs	r1, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	430b      	orrs	r3, r1
 8004496:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	695a      	ldr	r2, [r3, #20]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	000186a0 	.word	0x000186a0
 80044f0:	001e847f 	.word	0x001e847f
 80044f4:	003d08ff 	.word	0x003d08ff
 80044f8:	431bde83 	.word	0x431bde83
 80044fc:	10624dd3 	.word	0x10624dd3

08004500 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004512:	2b80      	cmp	r3, #128	@ 0x80
 8004514:	d103      	bne.n	800451e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2200      	movs	r2, #0
 800451c:	611a      	str	r2, [r3, #16]
  }
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	4613      	mov	r3, r2
 8004534:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b20      	cmp	r3, #32
 8004540:	d158      	bne.n	80045f4 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_I2C_Slave_Receive_IT+0x26>
 8004548:	88fb      	ldrh	r3, [r7, #6]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e051      	b.n	80045f6 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_I2C_Slave_Receive_IT+0x38>
 800455c:	2302      	movs	r3, #2
 800455e:	e04a      	b.n	80045f6 <HAL_I2C_Slave_Receive_IT+0xce>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b01      	cmp	r3, #1
 8004574:	d007      	beq.n	8004586 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0201 	orr.w	r2, r2, #1
 8004584:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004594:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2222      	movs	r2, #34	@ 0x22
 800459a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	88fa      	ldrh	r2, [r7, #6]
 80045b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004600 <HAL_I2C_Slave_Receive_IT+0xd8>)
 80045c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045d6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80045ee:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80045f0:	2300      	movs	r3, #0
 80045f2:	e000      	b.n	80045f6 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 80045f4:	2302      	movs	r3, #2
  }
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr
 8004600:	ffff0000 	.word	0xffff0000

08004604 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004624:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800462c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	2b10      	cmp	r3, #16
 8004632:	d003      	beq.n	800463c <HAL_I2C_EV_IRQHandler+0x38>
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b40      	cmp	r3, #64	@ 0x40
 8004638:	f040 80c1 	bne.w	80047be <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10d      	bne.n	8004672 <HAL_I2C_EV_IRQHandler+0x6e>
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800465c:	d003      	beq.n	8004666 <HAL_I2C_EV_IRQHandler+0x62>
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004664:	d101      	bne.n	800466a <HAL_I2C_EV_IRQHandler+0x66>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <HAL_I2C_EV_IRQHandler+0x68>
 800466a:	2300      	movs	r3, #0
 800466c:	2b01      	cmp	r3, #1
 800466e:	f000 8132 	beq.w	80048d6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00c      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x92>
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	0a5b      	lsrs	r3, r3, #9
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d006      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f001 fc89 	bl	8005fa0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fd87 	bl	80051a2 <I2C_Master_SB>
 8004694:	e092      	b.n	80047bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	08db      	lsrs	r3, r3, #3
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d009      	beq.n	80046b6 <HAL_I2C_EV_IRQHandler+0xb2>
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	0a5b      	lsrs	r3, r3, #9
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fdfc 	bl	80052ac <I2C_Master_ADD10>
 80046b4:	e082      	b.n	80047bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0xd2>
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	0a5b      	lsrs	r3, r3, #9
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fe15 	bl	80052fe <I2C_Master_ADDR>
 80046d4:	e072      	b.n	80047bc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	089b      	lsrs	r3, r3, #2
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d03b      	beq.n	800475a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046f0:	f000 80f3 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	09db      	lsrs	r3, r3, #7
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00f      	beq.n	8004720 <HAL_I2C_EV_IRQHandler+0x11c>
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	0a9b      	lsrs	r3, r3, #10
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <HAL_I2C_EV_IRQHandler+0x11c>
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	089b      	lsrs	r3, r3, #2
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d103      	bne.n	8004720 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f9df 	bl	8004adc <I2C_MasterTransmit_TXE>
 800471e:	e04d      	b.n	80047bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	089b      	lsrs	r3, r3, #2
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80d6 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	0a5b      	lsrs	r3, r3, #9
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 80cf 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800473c:	7bbb      	ldrb	r3, [r7, #14]
 800473e:	2b21      	cmp	r3, #33	@ 0x21
 8004740:	d103      	bne.n	800474a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fa66 	bl	8004c14 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004748:	e0c7      	b.n	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	2b40      	cmp	r3, #64	@ 0x40
 800474e:	f040 80c4 	bne.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fad4 	bl	8004d00 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004758:	e0bf      	b.n	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004768:	f000 80b7 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	099b      	lsrs	r3, r3, #6
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d00f      	beq.n	8004798 <HAL_I2C_EV_IRQHandler+0x194>
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	0a9b      	lsrs	r3, r3, #10
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d009      	beq.n	8004798 <HAL_I2C_EV_IRQHandler+0x194>
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	089b      	lsrs	r3, r3, #2
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	2b00      	cmp	r3, #0
 800478e:	d103      	bne.n	8004798 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 fb4d 	bl	8004e30 <I2C_MasterReceive_RXNE>
 8004796:	e011      	b.n	80047bc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	089b      	lsrs	r3, r3, #2
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 809a 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	0a5b      	lsrs	r3, r3, #9
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 8093 	beq.w	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 fc03 	bl	8004fc0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047ba:	e08e      	b.n	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
 80047bc:	e08d      	b.n	80048da <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	61fb      	str	r3, [r7, #28]
 80047ce:	e007      	b.n	80047e0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	085b      	lsrs	r3, r3, #1
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d012      	beq.n	8004812 <HAL_I2C_EV_IRQHandler+0x20e>
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	0a5b      	lsrs	r3, r3, #9
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00c      	beq.n	8004812 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004808:	69b9      	ldr	r1, [r7, #24]
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 ffce 	bl	80057ac <I2C_Slave_ADDR>
 8004810:	e066      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d009      	beq.n	8004832 <HAL_I2C_EV_IRQHandler+0x22e>
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	0a5b      	lsrs	r3, r3, #9
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f001 f808 	bl	8005840 <I2C_Slave_STOPF>
 8004830:	e056      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004832:	7bbb      	ldrb	r3, [r7, #14]
 8004834:	2b21      	cmp	r3, #33	@ 0x21
 8004836:	d002      	beq.n	800483e <HAL_I2C_EV_IRQHandler+0x23a>
 8004838:	7bbb      	ldrb	r3, [r7, #14]
 800483a:	2b29      	cmp	r3, #41	@ 0x29
 800483c:	d125      	bne.n	800488a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	09db      	lsrs	r3, r3, #7
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00f      	beq.n	800486a <HAL_I2C_EV_IRQHandler+0x266>
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	0a9b      	lsrs	r3, r3, #10
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <HAL_I2C_EV_IRQHandler+0x266>
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	089b      	lsrs	r3, r3, #2
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d103      	bne.n	800486a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fee6 	bl	8005634 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004868:	e039      	b.n	80048de <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	089b      	lsrs	r3, r3, #2
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d033      	beq.n	80048de <HAL_I2C_EV_IRQHandler+0x2da>
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	0a5b      	lsrs	r3, r3, #9
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d02d      	beq.n	80048de <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 ff13 	bl	80056ae <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004888:	e029      	b.n	80048de <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	099b      	lsrs	r3, r3, #6
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00f      	beq.n	80048b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	0a9b      	lsrs	r3, r3, #10
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d009      	beq.n	80048b6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	089b      	lsrs	r3, r3, #2
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d103      	bne.n	80048b6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 ff1d 	bl	80056ee <I2C_SlaveReceive_RXNE>
 80048b4:	e014      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	089b      	lsrs	r3, r3, #2
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00e      	beq.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	0a5b      	lsrs	r3, r3, #9
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d008      	beq.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 ff4b 	bl	800576a <I2C_SlaveReceive_BTF>
 80048d4:	e004      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80048d6:	bf00      	nop
 80048d8:	e002      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048da:	bf00      	nop
 80048dc:	e000      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048de:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b08a      	sub	sp, #40	@ 0x28
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80048fe:	2300      	movs	r3, #0
 8004900:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004908:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d016      	beq.n	8004944 <HAL_I2C_ER_IRQHandler+0x5e>
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	0a1b      	lsrs	r3, r3, #8
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d010      	beq.n	8004944 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004932:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004942:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	0a5b      	lsrs	r3, r3, #9
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00e      	beq.n	800496e <HAL_I2C_ER_IRQHandler+0x88>
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	0a1b      	lsrs	r3, r3, #8
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d008      	beq.n	800496e <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	f043 0302 	orr.w	r3, r3, #2
 8004962:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800496c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	0a9b      	lsrs	r3, r3, #10
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d03f      	beq.n	80049fa <HAL_I2C_ER_IRQHandler+0x114>
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	0a1b      	lsrs	r3, r3, #8
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d039      	beq.n	80049fa <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004986:	7efb      	ldrb	r3, [r7, #27]
 8004988:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498e:	b29b      	uxth	r3, r3
 8004990:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004998:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80049a0:	7ebb      	ldrb	r3, [r7, #26]
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d112      	bne.n	80049cc <HAL_I2C_ER_IRQHandler+0xe6>
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10f      	bne.n	80049cc <HAL_I2C_ER_IRQHandler+0xe6>
 80049ac:	7cfb      	ldrb	r3, [r7, #19]
 80049ae:	2b21      	cmp	r3, #33	@ 0x21
 80049b0:	d008      	beq.n	80049c4 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80049b2:	7cfb      	ldrb	r3, [r7, #19]
 80049b4:	2b29      	cmp	r3, #41	@ 0x29
 80049b6:	d005      	beq.n	80049c4 <HAL_I2C_ER_IRQHandler+0xde>
 80049b8:	7cfb      	ldrb	r3, [r7, #19]
 80049ba:	2b28      	cmp	r3, #40	@ 0x28
 80049bc:	d106      	bne.n	80049cc <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b21      	cmp	r3, #33	@ 0x21
 80049c2:	d103      	bne.n	80049cc <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f001 f86b 	bl	8005aa0 <I2C_Slave_AF>
 80049ca:	e016      	b.n	80049fa <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049d4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	f043 0304 	orr.w	r3, r3, #4
 80049dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80049de:	7efb      	ldrb	r3, [r7, #27]
 80049e0:	2b10      	cmp	r3, #16
 80049e2:	d002      	beq.n	80049ea <HAL_I2C_ER_IRQHandler+0x104>
 80049e4:	7efb      	ldrb	r3, [r7, #27]
 80049e6:	2b40      	cmp	r3, #64	@ 0x40
 80049e8:	d107      	bne.n	80049fa <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049f8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	0adb      	lsrs	r3, r3, #11
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00e      	beq.n	8004a24 <HAL_I2C_ER_IRQHandler+0x13e>
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d008      	beq.n	8004a24 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	f043 0308 	orr.w	r3, r3, #8
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004a22:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a30:	431a      	orrs	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f001 f8a6 	bl	8005b88 <I2C_ITError>
  }
}
 8004a3c:	bf00      	nop
 8004a3e:	3728      	adds	r7, #40	@ 0x28
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr

08004a56 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc80      	pop	{r7}
 8004a66:	4770      	bx	lr

08004a68 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bc80      	pop	{r7}
 8004a78:	4770      	bx	lr

08004a7a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	460b      	mov	r3, r1
 8004a84:	70fb      	strb	r3, [r7, #3]
 8004a86:	4613      	mov	r3, r2
 8004a88:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr

08004aca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004af2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d150      	bne.n	8004ba4 <I2C_MasterTransmit_TXE+0xc8>
 8004b02:	7bfb      	ldrb	r3, [r7, #15]
 8004b04:	2b21      	cmp	r3, #33	@ 0x21
 8004b06:	d14d      	bne.n	8004ba4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2b08      	cmp	r3, #8
 8004b0c:	d01d      	beq.n	8004b4a <I2C_MasterTransmit_TXE+0x6e>
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d01a      	beq.n	8004b4a <I2C_MasterTransmit_TXE+0x6e>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b1a:	d016      	beq.n	8004b4a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b2a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2211      	movs	r2, #17
 8004b30:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff ff7e 	bl	8004a44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b48:	e060      	b.n	8004c0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004b58:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b68:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b40      	cmp	r3, #64	@ 0x40
 8004b82:	d107      	bne.n	8004b94 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff ff8a 	bl	8004aa6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b92:	e03b      	b.n	8004c0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff ff51 	bl	8004a44 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ba2:	e033      	b.n	8004c0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2b21      	cmp	r3, #33	@ 0x21
 8004ba8:	d005      	beq.n	8004bb6 <I2C_MasterTransmit_TXE+0xda>
 8004baa:	7bbb      	ldrb	r3, [r7, #14]
 8004bac:	2b40      	cmp	r3, #64	@ 0x40
 8004bae:	d12d      	bne.n	8004c0c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	2b22      	cmp	r3, #34	@ 0x22
 8004bb4:	d12a      	bne.n	8004c0c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d108      	bne.n	8004bd2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bce:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004bd0:	e01c      	b.n	8004c0c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b40      	cmp	r3, #64	@ 0x40
 8004bdc:	d103      	bne.n	8004be6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f88e 	bl	8004d00 <I2C_MemoryTransmit_TXE_BTF>
}
 8004be4:	e012      	b.n	8004c0c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bea:	781a      	ldrb	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004c0a:	e7ff      	b.n	8004c0c <I2C_MasterTransmit_TXE+0x130>
 8004c0c:	bf00      	nop
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c20:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b21      	cmp	r3, #33	@ 0x21
 8004c2c:	d164      	bne.n	8004cf8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d012      	beq.n	8004c5e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3c:	781a      	ldrb	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004c5c:	e04c      	b.n	8004cf8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d01d      	beq.n	8004ca0 <I2C_MasterTransmit_BTF+0x8c>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d01a      	beq.n	8004ca0 <I2C_MasterTransmit_BTF+0x8c>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c70:	d016      	beq.n	8004ca0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c80:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2211      	movs	r2, #17
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff fed3 	bl	8004a44 <HAL_I2C_MasterTxCpltCallback>
}
 8004c9e:	e02b      	b.n	8004cf8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cae:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cbe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b40      	cmp	r3, #64	@ 0x40
 8004cd8:	d107      	bne.n	8004cea <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff fedf 	bl	8004aa6 <HAL_I2C_MemTxCpltCallback>
}
 8004ce8:	e006      	b.n	8004cf8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff fea6 	bl	8004a44 <HAL_I2C_MasterTxCpltCallback>
}
 8004cf8:	bf00      	nop
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d0e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d11d      	bne.n	8004d54 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d10b      	bne.n	8004d38 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d30:	1c9a      	adds	r2, r3, #2
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004d36:	e077      	b.n	8004e28 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	121b      	asrs	r3, r3, #8
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d4c:	1c5a      	adds	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d52:	e069      	b.n	8004e28 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d10b      	bne.n	8004d74 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d72:	e059      	b.n	8004e28 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d152      	bne.n	8004e22 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	2b22      	cmp	r3, #34	@ 0x22
 8004d80:	d10d      	bne.n	8004d9e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d90:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004d9c:	e044      	b.n	8004e28 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d015      	beq.n	8004dd4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	2b21      	cmp	r3, #33	@ 0x21
 8004dac:	d112      	bne.n	8004dd4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db2:	781a      	ldrb	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004dd2:	e029      	b.n	8004e28 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d124      	bne.n	8004e28 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	2b21      	cmp	r3, #33	@ 0x21
 8004de2:	d121      	bne.n	8004e28 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004df2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e02:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7ff fe43 	bl	8004aa6 <HAL_I2C_MemTxCpltCallback>
}
 8004e20:	e002      	b.n	8004e28 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff fb6c 	bl	8004500 <I2C_Flush_DR>
}
 8004e28:	bf00      	nop
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b22      	cmp	r3, #34	@ 0x22
 8004e42:	f040 80b9 	bne.w	8004fb8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d921      	bls.n	8004e9e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6c:	1c5a      	adds	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	f040 8096 	bne.w	8004fb8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e9a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004e9c:	e08c      	b.n	8004fb8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d07f      	beq.n	8004fa6 <I2C_MasterReceive_RXNE+0x176>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d002      	beq.n	8004eb2 <I2C_MasterReceive_RXNE+0x82>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d179      	bne.n	8004fa6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f001 f842 	bl	8005f3c <I2C_WaitOnSTOPRequestThroughIT>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d14c      	bne.n	8004f58 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ecc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004edc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	691a      	ldr	r2, [r3, #16]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	b2d2      	uxtb	r2, r2
 8004eea:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b40      	cmp	r3, #64	@ 0x40
 8004f16:	d10a      	bne.n	8004f2e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7ff fdc6 	bl	8004ab8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f2c:	e044      	b.n	8004fb8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d002      	beq.n	8004f42 <I2C_MasterReceive_RXNE+0x112>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d103      	bne.n	8004f4a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f48:	e002      	b.n	8004f50 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2212      	movs	r2, #18
 8004f4e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff fd80 	bl	8004a56 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f56:	e02f      	b.n	8004fb8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f66:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f72:	b2d2      	uxtb	r2, r2
 8004f74:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fc fa7a 	bl	8001498 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004fa4:	e008      	b.n	8004fb8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fb4:	605a      	str	r2, [r3, #4]
}
 8004fb6:	e7ff      	b.n	8004fb8 <I2C_MasterReceive_RXNE+0x188>
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d11b      	bne.n	8005010 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fe6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691a      	ldr	r2, [r3, #16]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800500e:	e0c4      	b.n	800519a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005014:	b29b      	uxth	r3, r3
 8005016:	2b03      	cmp	r3, #3
 8005018:	d129      	bne.n	800506e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005028:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b04      	cmp	r3, #4
 800502e:	d00a      	beq.n	8005046 <I2C_MasterReceive_BTF+0x86>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d007      	beq.n	8005046 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005044:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800506c:	e095      	b.n	800519a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005072:	b29b      	uxth	r3, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d17d      	bne.n	8005174 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d002      	beq.n	8005084 <I2C_MasterReceive_BTF+0xc4>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b10      	cmp	r3, #16
 8005082:	d108      	bne.n	8005096 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	e016      	b.n	80050c4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b04      	cmp	r3, #4
 800509a:	d002      	beq.n	80050a2 <I2C_MasterReceive_BTF+0xe2>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d108      	bne.n	80050b4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	e007      	b.n	80050c4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691a      	ldr	r2, [r3, #16]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	691a      	ldr	r2, [r3, #16]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800511e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b40      	cmp	r3, #64	@ 0x40
 8005132:	d10a      	bne.n	800514a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7ff fcb8 	bl	8004ab8 <HAL_I2C_MemRxCpltCallback>
}
 8005148:	e027      	b.n	800519a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b08      	cmp	r3, #8
 8005156:	d002      	beq.n	800515e <I2C_MasterReceive_BTF+0x19e>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b20      	cmp	r3, #32
 800515c:	d103      	bne.n	8005166 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	631a      	str	r2, [r3, #48]	@ 0x30
 8005164:	e002      	b.n	800516c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2212      	movs	r2, #18
 800516a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f7ff fc72 	bl	8004a56 <HAL_I2C_MasterRxCpltCallback>
}
 8005172:	e012      	b.n	800519a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800519a:	bf00      	nop
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b40      	cmp	r3, #64	@ 0x40
 80051b4:	d117      	bne.n	80051e6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051ce:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80051d0:	e067      	b.n	80052a2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	611a      	str	r2, [r3, #16]
}
 80051e4:	e05d      	b.n	80052a2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051ee:	d133      	bne.n	8005258 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b21      	cmp	r3, #33	@ 0x21
 80051fa:	d109      	bne.n	8005210 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005200:	b2db      	uxtb	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800520c:	611a      	str	r2, [r3, #16]
 800520e:	e008      	b.n	8005222 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005214:	b2db      	uxtb	r3, r3
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	b2da      	uxtb	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005226:	2b00      	cmp	r3, #0
 8005228:	d004      	beq.n	8005234 <I2C_Master_SB+0x92>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800522e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005230:	2b00      	cmp	r3, #0
 8005232:	d108      	bne.n	8005246 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005238:	2b00      	cmp	r3, #0
 800523a:	d032      	beq.n	80052a2 <I2C_Master_SB+0x100>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005242:	2b00      	cmp	r3, #0
 8005244:	d02d      	beq.n	80052a2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005254:	605a      	str	r2, [r3, #4]
}
 8005256:	e024      	b.n	80052a2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10e      	bne.n	800527e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005264:	b29b      	uxth	r3, r3
 8005266:	11db      	asrs	r3, r3, #7
 8005268:	b2db      	uxtb	r3, r3
 800526a:	f003 0306 	and.w	r3, r3, #6
 800526e:	b2db      	uxtb	r3, r3
 8005270:	f063 030f 	orn	r3, r3, #15
 8005274:	b2da      	uxtb	r2, r3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	611a      	str	r2, [r3, #16]
}
 800527c:	e011      	b.n	80052a2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005282:	2b01      	cmp	r3, #1
 8005284:	d10d      	bne.n	80052a2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528a:	b29b      	uxth	r3, r3
 800528c:	11db      	asrs	r3, r3, #7
 800528e:	b2db      	uxtb	r3, r3
 8005290:	f003 0306 	and.w	r3, r3, #6
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f063 030e 	orn	r3, r3, #14
 800529a:	b2da      	uxtb	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	611a      	str	r2, [r3, #16]
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d004      	beq.n	80052d2 <I2C_Master_ADD10+0x26>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d108      	bne.n	80052e4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00c      	beq.n	80052f4 <I2C_Master_ADD10+0x48>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80052f2:	605a      	str	r2, [r3, #4]
  }
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr

080052fe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80052fe:	b480      	push	{r7}
 8005300:	b091      	sub	sp, #68	@ 0x44
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800530c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005314:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b22      	cmp	r3, #34	@ 0x22
 8005326:	f040 8174 	bne.w	8005612 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10f      	bne.n	8005352 <I2C_Master_ADDR+0x54>
 8005332:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005336:	2b40      	cmp	r3, #64	@ 0x40
 8005338:	d10b      	bne.n	8005352 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533a:	2300      	movs	r3, #0
 800533c:	633b      	str	r3, [r7, #48]	@ 0x30
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	633b      	str	r3, [r7, #48]	@ 0x30
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	633b      	str	r3, [r7, #48]	@ 0x30
 800534e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005350:	e16b      	b.n	800562a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005356:	2b00      	cmp	r3, #0
 8005358:	d11d      	bne.n	8005396 <I2C_Master_ADDR+0x98>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005362:	d118      	bne.n	8005396 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005364:	2300      	movs	r3, #0
 8005366:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005388:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800538e:	1c5a      	adds	r2, r3, #1
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	651a      	str	r2, [r3, #80]	@ 0x50
 8005394:	e149      	b.n	800562a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d113      	bne.n	80053c8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a0:	2300      	movs	r3, #0
 80053a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	e120      	b.n	800560a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	f040 808a 	bne.w	80054e8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80053d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053da:	d137      	bne.n	800544c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053fa:	d113      	bne.n	8005424 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800540a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800540c:	2300      	movs	r3, #0
 800540e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	627b      	str	r3, [r7, #36]	@ 0x24
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	e0f2      	b.n	800560a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005424:	2300      	movs	r3, #0
 8005426:	623b      	str	r3, [r7, #32]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	623b      	str	r3, [r7, #32]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	623b      	str	r3, [r7, #32]
 8005438:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005448:	601a      	str	r2, [r3, #0]
 800544a:	e0de      	b.n	800560a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800544c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544e:	2b08      	cmp	r3, #8
 8005450:	d02e      	beq.n	80054b0 <I2C_Master_ADDR+0x1b2>
 8005452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005454:	2b20      	cmp	r3, #32
 8005456:	d02b      	beq.n	80054b0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545a:	2b12      	cmp	r3, #18
 800545c:	d102      	bne.n	8005464 <I2C_Master_ADDR+0x166>
 800545e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005460:	2b01      	cmp	r3, #1
 8005462:	d125      	bne.n	80054b0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005466:	2b04      	cmp	r3, #4
 8005468:	d00e      	beq.n	8005488 <I2C_Master_ADDR+0x18a>
 800546a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546c:	2b02      	cmp	r3, #2
 800546e:	d00b      	beq.n	8005488 <I2C_Master_ADDR+0x18a>
 8005470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005472:	2b10      	cmp	r3, #16
 8005474:	d008      	beq.n	8005488 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e007      	b.n	8005498 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005496:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005498:	2300      	movs	r3, #0
 800549a:	61fb      	str	r3, [r7, #28]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	61fb      	str	r3, [r7, #28]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	e0ac      	b.n	800560a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c0:	2300      	movs	r3, #0
 80054c2:	61bb      	str	r3, [r7, #24]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	61bb      	str	r3, [r7, #24]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	61bb      	str	r3, [r7, #24]
 80054d4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	e090      	b.n	800560a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d158      	bne.n	80055a4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d021      	beq.n	800553c <I2C_Master_ADDR+0x23e>
 80054f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d01e      	beq.n	800553c <I2C_Master_ADDR+0x23e>
 80054fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005500:	2b10      	cmp	r3, #16
 8005502:	d01b      	beq.n	800553c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005512:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005514:	2300      	movs	r3, #0
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	e012      	b.n	8005562 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800554a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800554c:	2300      	movs	r3, #0
 800554e:	613b      	str	r3, [r7, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800556c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005570:	d14b      	bne.n	800560a <I2C_Master_ADDR+0x30c>
 8005572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005574:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005578:	d00b      	beq.n	8005592 <I2C_Master_ADDR+0x294>
 800557a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557c:	2b01      	cmp	r3, #1
 800557e:	d008      	beq.n	8005592 <I2C_Master_ADDR+0x294>
 8005580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005582:	2b08      	cmp	r3, #8
 8005584:	d005      	beq.n	8005592 <I2C_Master_ADDR+0x294>
 8005586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005588:	2b10      	cmp	r3, #16
 800558a:	d002      	beq.n	8005592 <I2C_Master_ADDR+0x294>
 800558c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558e:	2b20      	cmp	r3, #32
 8005590:	d13b      	bne.n	800560a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055a0:	605a      	str	r2, [r3, #4]
 80055a2:	e032      	b.n	800560a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055b2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055c2:	d117      	bne.n	80055f4 <I2C_Master_ADDR+0x2f6>
 80055c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055ca:	d00b      	beq.n	80055e4 <I2C_Master_ADDR+0x2e6>
 80055cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d008      	beq.n	80055e4 <I2C_Master_ADDR+0x2e6>
 80055d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d005      	beq.n	80055e4 <I2C_Master_ADDR+0x2e6>
 80055d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055da:	2b10      	cmp	r3, #16
 80055dc:	d002      	beq.n	80055e4 <I2C_Master_ADDR+0x2e6>
 80055de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d107      	bne.n	80055f4 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055f2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055f4:	2300      	movs	r3, #0
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005610:	e00b      	b.n	800562a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005612:	2300      	movs	r3, #0
 8005614:	60bb      	str	r3, [r7, #8]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	60bb      	str	r3, [r7, #8]
 8005626:	68bb      	ldr	r3, [r7, #8]
}
 8005628:	e7ff      	b.n	800562a <I2C_Master_ADDR+0x32c>
 800562a:	bf00      	nop
 800562c:	3744      	adds	r7, #68	@ 0x44
 800562e:	46bd      	mov	sp, r7
 8005630:	bc80      	pop	{r7}
 8005632:	4770      	bx	lr

08005634 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005642:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d02b      	beq.n	80056a6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	781a      	ldrb	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565e:	1c5a      	adds	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005668:	b29b      	uxth	r3, r3
 800566a:	3b01      	subs	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d114      	bne.n	80056a6 <I2C_SlaveTransmit_TXE+0x72>
 800567c:	7bfb      	ldrb	r3, [r7, #15]
 800567e:	2b29      	cmp	r3, #41	@ 0x29
 8005680:	d111      	bne.n	80056a6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005690:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2221      	movs	r2, #33	@ 0x21
 8005696:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2228      	movs	r2, #40	@ 0x28
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff f9e1 	bl	8004a68 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80056a6:	bf00      	nop
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d011      	beq.n	80056e4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c4:	781a      	ldrb	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056da:	b29b      	uxth	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	b29a      	uxth	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bc80      	pop	{r7}
 80056ec:	4770      	bx	lr

080056ee <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b084      	sub	sp, #16
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d02c      	beq.n	8005762 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005724:	b29b      	uxth	r3, r3
 8005726:	3b01      	subs	r3, #1
 8005728:	b29a      	uxth	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005732:	b29b      	uxth	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d114      	bne.n	8005762 <I2C_SlaveReceive_RXNE+0x74>
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	2b2a      	cmp	r3, #42	@ 0x2a
 800573c:	d111      	bne.n	8005762 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800574c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2222      	movs	r2, #34	@ 0x22
 8005752:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2228      	movs	r2, #40	@ 0x28
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7fb fe85 	bl	800146c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005762:	bf00      	nop
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d012      	beq.n	80057a2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691a      	ldr	r2, [r3, #16]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005786:	b2d2      	uxtb	r2, r2
 8005788:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80057a2:	bf00      	nop
 80057a4:	370c      	adds	r7, #12
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr

080057ac <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80057b6:	2300      	movs	r3, #0
 80057b8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80057c6:	2b28      	cmp	r3, #40	@ 0x28
 80057c8:	d127      	bne.n	800581a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057d8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	089b      	lsrs	r3, r3, #2
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80057e6:	2301      	movs	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	09db      	lsrs	r3, r3, #7
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	81bb      	strh	r3, [r7, #12]
 80057fc:	e002      	b.n	8005804 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800580c:	89ba      	ldrh	r2, [r7, #12]
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff f931 	bl	8004a7a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005818:	e00e      	b.n	8005838 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800581a:	2300      	movs	r3, #0
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800584e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800585e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005860:	2300      	movs	r3, #0
 8005862:	60bb      	str	r3, [r7, #8]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	60bb      	str	r3, [r7, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0201 	orr.w	r2, r2, #1
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800588c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800589c:	d172      	bne.n	8005984 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	2b22      	cmp	r3, #34	@ 0x22
 80058a2:	d002      	beq.n	80058aa <I2C_Slave_STOPF+0x6a>
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80058a8:	d135      	bne.n	8005916 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c6:	f043 0204 	orr.w	r2, r3, #4
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058dc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fe fb36 	bl	8003f54 <HAL_DMA_GetState>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d049      	beq.n	8005982 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f2:	4a69      	ldr	r2, [pc, #420]	@ (8005a98 <I2C_Slave_STOPF+0x258>)
 80058f4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe fab2 	bl	8003e64 <HAL_DMA_Abort_IT>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d03d      	beq.n	8005982 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005910:	4610      	mov	r0, r2
 8005912:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005914:	e035      	b.n	8005982 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	b29a      	uxth	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005932:	f043 0204 	orr.w	r2, r3, #4
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005948:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe fb00 	bl	8003f54 <HAL_DMA_GetState>
 8005954:	4603      	mov	r3, r0
 8005956:	2b01      	cmp	r3, #1
 8005958:	d014      	beq.n	8005984 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800595e:	4a4e      	ldr	r2, [pc, #312]	@ (8005a98 <I2C_Slave_STOPF+0x258>)
 8005960:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005966:	4618      	mov	r0, r3
 8005968:	f7fe fa7c 	bl	8003e64 <HAL_DMA_Abort_IT>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d008      	beq.n	8005984 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800597c:	4610      	mov	r0, r2
 800597e:	4798      	blx	r3
 8005980:	e000      	b.n	8005984 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005982:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d03e      	beq.n	8005a0c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	695b      	ldr	r3, [r3, #20]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b04      	cmp	r3, #4
 800599a:	d112      	bne.n	80059c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691a      	ldr	r2, [r3, #16]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059cc:	2b40      	cmp	r3, #64	@ 0x40
 80059ce:	d112      	bne.n	80059f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a04:	f043 0204 	orr.w	r2, r3, #4
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d003      	beq.n	8005a1c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f8b7 	bl	8005b88 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005a1a:	e039      	b.n	8005a90 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a20:	d109      	bne.n	8005a36 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2228      	movs	r2, #40	@ 0x28
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7fb fd1b 	bl	800146c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b28      	cmp	r3, #40	@ 0x28
 8005a40:	d111      	bne.n	8005a66 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a15      	ldr	r2, [pc, #84]	@ (8005a9c <I2C_Slave_STOPF+0x25c>)
 8005a46:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f7ff f818 	bl	8004a94 <HAL_I2C_ListenCpltCallback>
}
 8005a64:	e014      	b.n	8005a90 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6a:	2b22      	cmp	r3, #34	@ 0x22
 8005a6c:	d002      	beq.n	8005a74 <I2C_Slave_STOPF+0x234>
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	2b22      	cmp	r3, #34	@ 0x22
 8005a72:	d10d      	bne.n	8005a90 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fb fcee 	bl	800146c <HAL_I2C_SlaveRxCpltCallback>
}
 8005a90:	bf00      	nop
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	08005ded 	.word	0x08005ded
 8005a9c:	ffff0000 	.word	0xffff0000

08005aa0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aae:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d002      	beq.n	8005ac2 <I2C_Slave_AF+0x22>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b20      	cmp	r3, #32
 8005ac0:	d129      	bne.n	8005b16 <I2C_Slave_AF+0x76>
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	2b28      	cmp	r3, #40	@ 0x28
 8005ac6:	d126      	bne.n	8005b16 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a2e      	ldr	r2, [pc, #184]	@ (8005b84 <I2C_Slave_AF+0xe4>)
 8005acc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005adc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ae6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fe ffc0 	bl	8004a94 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005b14:	e031      	b.n	8005b7a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	2b21      	cmp	r3, #33	@ 0x21
 8005b1a:	d129      	bne.n	8005b70 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a19      	ldr	r2, [pc, #100]	@ (8005b84 <I2C_Slave_AF+0xe4>)
 8005b20:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2221      	movs	r2, #33	@ 0x21
 8005b26:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b46:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b50:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b60:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7fe fccc 	bl	8004500 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f7fe ff7d 	bl	8004a68 <HAL_I2C_SlaveTxCpltCallback>
}
 8005b6e:	e004      	b.n	8005b7a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b78:	615a      	str	r2, [r3, #20]
}
 8005b7a:	bf00      	nop
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	ffff0000 	.word	0xffff0000

08005b88 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ba0:	7bbb      	ldrb	r3, [r7, #14]
 8005ba2:	2b10      	cmp	r3, #16
 8005ba4:	d002      	beq.n	8005bac <I2C_ITError+0x24>
 8005ba6:	7bbb      	ldrb	r3, [r7, #14]
 8005ba8:	2b40      	cmp	r3, #64	@ 0x40
 8005baa:	d10a      	bne.n	8005bc2 <I2C_ITError+0x3a>
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	2b22      	cmp	r3, #34	@ 0x22
 8005bb0:	d107      	bne.n	8005bc2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bc0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005bc8:	2b28      	cmp	r3, #40	@ 0x28
 8005bca:	d107      	bne.n	8005bdc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2228      	movs	r2, #40	@ 0x28
 8005bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005bda:	e015      	b.n	8005c08 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005be6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bea:	d00a      	beq.n	8005c02 <I2C_ITError+0x7a>
 8005bec:	7bfb      	ldrb	r3, [r7, #15]
 8005bee:	2b60      	cmp	r3, #96	@ 0x60
 8005bf0:	d007      	beq.n	8005c02 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c16:	d162      	bne.n	8005cde <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c26:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c2c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d020      	beq.n	8005c78 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3a:	4a6a      	ldr	r2, [pc, #424]	@ (8005de4 <I2C_ITError+0x25c>)
 8005c3c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fe f90e 	bl	8003e64 <HAL_DMA_Abort_IT>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 8089 	beq.w	8005d62 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0201 	bic.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2220      	movs	r2, #32
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c72:	4610      	mov	r0, r2
 8005c74:	4798      	blx	r3
 8005c76:	e074      	b.n	8005d62 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7c:	4a59      	ldr	r2, [pc, #356]	@ (8005de4 <I2C_ITError+0x25c>)
 8005c7e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7fe f8ed 	bl	8003e64 <HAL_DMA_Abort_IT>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d068      	beq.n	8005d62 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c9a:	2b40      	cmp	r3, #64	@ 0x40
 8005c9c:	d10b      	bne.n	8005cb6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0201 	bic.w	r2, r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005cd8:	4610      	mov	r0, r2
 8005cda:	4798      	blx	r3
 8005cdc:	e041      	b.n	8005d62 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b60      	cmp	r3, #96	@ 0x60
 8005ce8:	d125      	bne.n	8005d36 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d02:	2b40      	cmp	r3, #64	@ 0x40
 8005d04:	d10b      	bne.n	8005d1e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691a      	ldr	r2, [r3, #16]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0201 	bic.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fe fecb 	bl	8004aca <HAL_I2C_AbortCpltCallback>
 8005d34:	e015      	b.n	8005d62 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d40:	2b40      	cmp	r3, #64	@ 0x40
 8005d42:	d10b      	bne.n	8005d5c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4e:	b2d2      	uxtb	r2, r2
 8005d50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7fb fb9b 	bl	8001498 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d66:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10e      	bne.n	8005d90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d109      	bne.n	8005d90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d104      	bne.n	8005d90 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d007      	beq.n	8005da0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d9e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005da6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d113      	bne.n	8005ddc <I2C_ITError+0x254>
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	2b28      	cmp	r3, #40	@ 0x28
 8005db8:	d110      	bne.n	8005ddc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8005de8 <I2C_ITError+0x260>)
 8005dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fe fe5c 	bl	8004a94 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	08005ded 	.word	0x08005ded
 8005de8:	ffff0000 	.word	0xffff0000

08005dec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e04:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e06:	4b4b      	ldr	r3, [pc, #300]	@ (8005f34 <I2C_DMAAbort+0x148>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	08db      	lsrs	r3, r3, #3
 8005e0c:	4a4a      	ldr	r2, [pc, #296]	@ (8005f38 <I2C_DMAAbort+0x14c>)
 8005e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e12:	0a1a      	lsrs	r2, r3, #8
 8005e14:	4613      	mov	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4413      	add	r3, r2
 8005e1a:	00da      	lsls	r2, r3, #3
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d106      	bne.n	8005e34 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	f043 0220 	orr.w	r2, r3, #32
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005e32:	e00a      	b.n	8005e4a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	3b01      	subs	r3, #1
 8005e38:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e48:	d0ea      	beq.n	8005e20 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e56:	2200      	movs	r2, #0
 8005e58:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e66:	2200      	movs	r2, #0
 8005e68:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e78:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f022 0201 	bic.w	r2, r2, #1
 8005eae:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b60      	cmp	r3, #96	@ 0x60
 8005eba:	d10e      	bne.n	8005eda <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ed2:	6978      	ldr	r0, [r7, #20]
 8005ed4:	f7fe fdf9 	bl	8004aca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ed8:	e027      	b.n	8005f2a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005eda:	7cfb      	ldrb	r3, [r7, #19]
 8005edc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ee0:	2b28      	cmp	r3, #40	@ 0x28
 8005ee2:	d117      	bne.n	8005f14 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0201 	orr.w	r2, r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f02:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2200      	movs	r2, #0
 8005f08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2228      	movs	r2, #40	@ 0x28
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005f12:	e007      	b.n	8005f24 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2220      	movs	r2, #32
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f24:	6978      	ldr	r0, [r7, #20]
 8005f26:	f7fb fab7 	bl	8001498 <HAL_I2C_ErrorCallback>
}
 8005f2a:	bf00      	nop
 8005f2c:	3718      	adds	r7, #24
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000004 	.word	0x20000004
 8005f38:	14f8b589 	.word	0x14f8b589

08005f3c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005f48:	4b13      	ldr	r3, [pc, #76]	@ (8005f98 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	08db      	lsrs	r3, r3, #3
 8005f4e:	4a13      	ldr	r2, [pc, #76]	@ (8005f9c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005f50:	fba2 2303 	umull	r2, r3, r2, r3
 8005f54:	0a1a      	lsrs	r2, r3, #8
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d107      	bne.n	8005f7a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6e:	f043 0220 	orr.w	r2, r3, #32
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e008      	b.n	8005f8c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f88:	d0e9      	beq.n	8005f5e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bc80      	pop	{r7}
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	20000004 	.word	0x20000004
 8005f9c:	14f8b589 	.word	0x14f8b589

08005fa0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fac:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005fb0:	d103      	bne.n	8005fba <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005fb8:	e007      	b.n	8005fca <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbe:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005fc2:	d102      	bne.n	8005fca <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2208      	movs	r2, #8
 8005fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fd8:	4b02      	ldr	r3, [pc, #8]	@ (8005fe4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005fda:	681b      	ldr	r3, [r3, #0]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr
 8005fe4:	20000004 	.word	0x20000004

08005fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fec:	f7ff fff2 	bl	8005fd4 <HAL_RCC_GetHCLKFreq>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	4b05      	ldr	r3, [pc, #20]	@ (8006008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	0a1b      	lsrs	r3, r3, #8
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	4903      	ldr	r1, [pc, #12]	@ (800600c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ffe:	5ccb      	ldrb	r3, [r1, r3]
 8006000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006004:	4618      	mov	r0, r3
 8006006:	bd80      	pop	{r7, pc}
 8006008:	40021000 	.word	0x40021000
 800600c:	08007460 	.word	0x08007460

08006010 <_vsniprintf_r>:
 8006010:	b530      	push	{r4, r5, lr}
 8006012:	4614      	mov	r4, r2
 8006014:	2c00      	cmp	r4, #0
 8006016:	4605      	mov	r5, r0
 8006018:	461a      	mov	r2, r3
 800601a:	b09b      	sub	sp, #108	@ 0x6c
 800601c:	da05      	bge.n	800602a <_vsniprintf_r+0x1a>
 800601e:	238b      	movs	r3, #139	@ 0x8b
 8006020:	6003      	str	r3, [r0, #0]
 8006022:	f04f 30ff 	mov.w	r0, #4294967295
 8006026:	b01b      	add	sp, #108	@ 0x6c
 8006028:	bd30      	pop	{r4, r5, pc}
 800602a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800602e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006032:	f04f 0300 	mov.w	r3, #0
 8006036:	9319      	str	r3, [sp, #100]	@ 0x64
 8006038:	bf0c      	ite	eq
 800603a:	4623      	moveq	r3, r4
 800603c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006040:	9302      	str	r3, [sp, #8]
 8006042:	9305      	str	r3, [sp, #20]
 8006044:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006048:	9100      	str	r1, [sp, #0]
 800604a:	9104      	str	r1, [sp, #16]
 800604c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006050:	4669      	mov	r1, sp
 8006052:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006054:	f000 f996 	bl	8006384 <_svfiprintf_r>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	bfbc      	itt	lt
 800605c:	238b      	movlt	r3, #139	@ 0x8b
 800605e:	602b      	strlt	r3, [r5, #0]
 8006060:	2c00      	cmp	r4, #0
 8006062:	d0e0      	beq.n	8006026 <_vsniprintf_r+0x16>
 8006064:	2200      	movs	r2, #0
 8006066:	9b00      	ldr	r3, [sp, #0]
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e7dc      	b.n	8006026 <_vsniprintf_r+0x16>

0800606c <vsniprintf>:
 800606c:	b507      	push	{r0, r1, r2, lr}
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	4613      	mov	r3, r2
 8006072:	460a      	mov	r2, r1
 8006074:	4601      	mov	r1, r0
 8006076:	4803      	ldr	r0, [pc, #12]	@ (8006084 <vsniprintf+0x18>)
 8006078:	6800      	ldr	r0, [r0, #0]
 800607a:	f7ff ffc9 	bl	8006010 <_vsniprintf_r>
 800607e:	b003      	add	sp, #12
 8006080:	f85d fb04 	ldr.w	pc, [sp], #4
 8006084:	20000010 	.word	0x20000010

08006088 <__errno>:
 8006088:	4b01      	ldr	r3, [pc, #4]	@ (8006090 <__errno+0x8>)
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	20000010 	.word	0x20000010

08006094 <__libc_init_array>:
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	2600      	movs	r6, #0
 8006098:	4d0c      	ldr	r5, [pc, #48]	@ (80060cc <__libc_init_array+0x38>)
 800609a:	4c0d      	ldr	r4, [pc, #52]	@ (80060d0 <__libc_init_array+0x3c>)
 800609c:	1b64      	subs	r4, r4, r5
 800609e:	10a4      	asrs	r4, r4, #2
 80060a0:	42a6      	cmp	r6, r4
 80060a2:	d109      	bne.n	80060b8 <__libc_init_array+0x24>
 80060a4:	f000 fc76 	bl	8006994 <_init>
 80060a8:	2600      	movs	r6, #0
 80060aa:	4d0a      	ldr	r5, [pc, #40]	@ (80060d4 <__libc_init_array+0x40>)
 80060ac:	4c0a      	ldr	r4, [pc, #40]	@ (80060d8 <__libc_init_array+0x44>)
 80060ae:	1b64      	subs	r4, r4, r5
 80060b0:	10a4      	asrs	r4, r4, #2
 80060b2:	42a6      	cmp	r6, r4
 80060b4:	d105      	bne.n	80060c2 <__libc_init_array+0x2e>
 80060b6:	bd70      	pop	{r4, r5, r6, pc}
 80060b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060bc:	4798      	blx	r3
 80060be:	3601      	adds	r6, #1
 80060c0:	e7ee      	b.n	80060a0 <__libc_init_array+0xc>
 80060c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c6:	4798      	blx	r3
 80060c8:	3601      	adds	r6, #1
 80060ca:	e7f2      	b.n	80060b2 <__libc_init_array+0x1e>
 80060cc:	080074a4 	.word	0x080074a4
 80060d0:	080074a4 	.word	0x080074a4
 80060d4:	080074a4 	.word	0x080074a4
 80060d8:	080074a8 	.word	0x080074a8

080060dc <__retarget_lock_acquire_recursive>:
 80060dc:	4770      	bx	lr

080060de <__retarget_lock_release_recursive>:
 80060de:	4770      	bx	lr

080060e0 <_free_r>:
 80060e0:	b538      	push	{r3, r4, r5, lr}
 80060e2:	4605      	mov	r5, r0
 80060e4:	2900      	cmp	r1, #0
 80060e6:	d040      	beq.n	800616a <_free_r+0x8a>
 80060e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060ec:	1f0c      	subs	r4, r1, #4
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	bfb8      	it	lt
 80060f2:	18e4      	addlt	r4, r4, r3
 80060f4:	f000 f8de 	bl	80062b4 <__malloc_lock>
 80060f8:	4a1c      	ldr	r2, [pc, #112]	@ (800616c <_free_r+0x8c>)
 80060fa:	6813      	ldr	r3, [r2, #0]
 80060fc:	b933      	cbnz	r3, 800610c <_free_r+0x2c>
 80060fe:	6063      	str	r3, [r4, #4]
 8006100:	6014      	str	r4, [r2, #0]
 8006102:	4628      	mov	r0, r5
 8006104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006108:	f000 b8da 	b.w	80062c0 <__malloc_unlock>
 800610c:	42a3      	cmp	r3, r4
 800610e:	d908      	bls.n	8006122 <_free_r+0x42>
 8006110:	6820      	ldr	r0, [r4, #0]
 8006112:	1821      	adds	r1, r4, r0
 8006114:	428b      	cmp	r3, r1
 8006116:	bf01      	itttt	eq
 8006118:	6819      	ldreq	r1, [r3, #0]
 800611a:	685b      	ldreq	r3, [r3, #4]
 800611c:	1809      	addeq	r1, r1, r0
 800611e:	6021      	streq	r1, [r4, #0]
 8006120:	e7ed      	b.n	80060fe <_free_r+0x1e>
 8006122:	461a      	mov	r2, r3
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	b10b      	cbz	r3, 800612c <_free_r+0x4c>
 8006128:	42a3      	cmp	r3, r4
 800612a:	d9fa      	bls.n	8006122 <_free_r+0x42>
 800612c:	6811      	ldr	r1, [r2, #0]
 800612e:	1850      	adds	r0, r2, r1
 8006130:	42a0      	cmp	r0, r4
 8006132:	d10b      	bne.n	800614c <_free_r+0x6c>
 8006134:	6820      	ldr	r0, [r4, #0]
 8006136:	4401      	add	r1, r0
 8006138:	1850      	adds	r0, r2, r1
 800613a:	4283      	cmp	r3, r0
 800613c:	6011      	str	r1, [r2, #0]
 800613e:	d1e0      	bne.n	8006102 <_free_r+0x22>
 8006140:	6818      	ldr	r0, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	4408      	add	r0, r1
 8006146:	6010      	str	r0, [r2, #0]
 8006148:	6053      	str	r3, [r2, #4]
 800614a:	e7da      	b.n	8006102 <_free_r+0x22>
 800614c:	d902      	bls.n	8006154 <_free_r+0x74>
 800614e:	230c      	movs	r3, #12
 8006150:	602b      	str	r3, [r5, #0]
 8006152:	e7d6      	b.n	8006102 <_free_r+0x22>
 8006154:	6820      	ldr	r0, [r4, #0]
 8006156:	1821      	adds	r1, r4, r0
 8006158:	428b      	cmp	r3, r1
 800615a:	bf01      	itttt	eq
 800615c:	6819      	ldreq	r1, [r3, #0]
 800615e:	685b      	ldreq	r3, [r3, #4]
 8006160:	1809      	addeq	r1, r1, r0
 8006162:	6021      	streq	r1, [r4, #0]
 8006164:	6063      	str	r3, [r4, #4]
 8006166:	6054      	str	r4, [r2, #4]
 8006168:	e7cb      	b.n	8006102 <_free_r+0x22>
 800616a:	bd38      	pop	{r3, r4, r5, pc}
 800616c:	20000494 	.word	0x20000494

08006170 <sbrk_aligned>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	4e0f      	ldr	r6, [pc, #60]	@ (80061b0 <sbrk_aligned+0x40>)
 8006174:	460c      	mov	r4, r1
 8006176:	6831      	ldr	r1, [r6, #0]
 8006178:	4605      	mov	r5, r0
 800617a:	b911      	cbnz	r1, 8006182 <sbrk_aligned+0x12>
 800617c:	f000 fba8 	bl	80068d0 <_sbrk_r>
 8006180:	6030      	str	r0, [r6, #0]
 8006182:	4621      	mov	r1, r4
 8006184:	4628      	mov	r0, r5
 8006186:	f000 fba3 	bl	80068d0 <_sbrk_r>
 800618a:	1c43      	adds	r3, r0, #1
 800618c:	d103      	bne.n	8006196 <sbrk_aligned+0x26>
 800618e:	f04f 34ff 	mov.w	r4, #4294967295
 8006192:	4620      	mov	r0, r4
 8006194:	bd70      	pop	{r4, r5, r6, pc}
 8006196:	1cc4      	adds	r4, r0, #3
 8006198:	f024 0403 	bic.w	r4, r4, #3
 800619c:	42a0      	cmp	r0, r4
 800619e:	d0f8      	beq.n	8006192 <sbrk_aligned+0x22>
 80061a0:	1a21      	subs	r1, r4, r0
 80061a2:	4628      	mov	r0, r5
 80061a4:	f000 fb94 	bl	80068d0 <_sbrk_r>
 80061a8:	3001      	adds	r0, #1
 80061aa:	d1f2      	bne.n	8006192 <sbrk_aligned+0x22>
 80061ac:	e7ef      	b.n	800618e <sbrk_aligned+0x1e>
 80061ae:	bf00      	nop
 80061b0:	20000490 	.word	0x20000490

080061b4 <_malloc_r>:
 80061b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b8:	1ccd      	adds	r5, r1, #3
 80061ba:	f025 0503 	bic.w	r5, r5, #3
 80061be:	3508      	adds	r5, #8
 80061c0:	2d0c      	cmp	r5, #12
 80061c2:	bf38      	it	cc
 80061c4:	250c      	movcc	r5, #12
 80061c6:	2d00      	cmp	r5, #0
 80061c8:	4606      	mov	r6, r0
 80061ca:	db01      	blt.n	80061d0 <_malloc_r+0x1c>
 80061cc:	42a9      	cmp	r1, r5
 80061ce:	d904      	bls.n	80061da <_malloc_r+0x26>
 80061d0:	230c      	movs	r3, #12
 80061d2:	6033      	str	r3, [r6, #0]
 80061d4:	2000      	movs	r0, #0
 80061d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80062b0 <_malloc_r+0xfc>
 80061de:	f000 f869 	bl	80062b4 <__malloc_lock>
 80061e2:	f8d8 3000 	ldr.w	r3, [r8]
 80061e6:	461c      	mov	r4, r3
 80061e8:	bb44      	cbnz	r4, 800623c <_malloc_r+0x88>
 80061ea:	4629      	mov	r1, r5
 80061ec:	4630      	mov	r0, r6
 80061ee:	f7ff ffbf 	bl	8006170 <sbrk_aligned>
 80061f2:	1c43      	adds	r3, r0, #1
 80061f4:	4604      	mov	r4, r0
 80061f6:	d158      	bne.n	80062aa <_malloc_r+0xf6>
 80061f8:	f8d8 4000 	ldr.w	r4, [r8]
 80061fc:	4627      	mov	r7, r4
 80061fe:	2f00      	cmp	r7, #0
 8006200:	d143      	bne.n	800628a <_malloc_r+0xd6>
 8006202:	2c00      	cmp	r4, #0
 8006204:	d04b      	beq.n	800629e <_malloc_r+0xea>
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	4639      	mov	r1, r7
 800620a:	4630      	mov	r0, r6
 800620c:	eb04 0903 	add.w	r9, r4, r3
 8006210:	f000 fb5e 	bl	80068d0 <_sbrk_r>
 8006214:	4581      	cmp	r9, r0
 8006216:	d142      	bne.n	800629e <_malloc_r+0xea>
 8006218:	6821      	ldr	r1, [r4, #0]
 800621a:	4630      	mov	r0, r6
 800621c:	1a6d      	subs	r5, r5, r1
 800621e:	4629      	mov	r1, r5
 8006220:	f7ff ffa6 	bl	8006170 <sbrk_aligned>
 8006224:	3001      	adds	r0, #1
 8006226:	d03a      	beq.n	800629e <_malloc_r+0xea>
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	442b      	add	r3, r5
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	f8d8 3000 	ldr.w	r3, [r8]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	bb62      	cbnz	r2, 8006290 <_malloc_r+0xdc>
 8006236:	f8c8 7000 	str.w	r7, [r8]
 800623a:	e00f      	b.n	800625c <_malloc_r+0xa8>
 800623c:	6822      	ldr	r2, [r4, #0]
 800623e:	1b52      	subs	r2, r2, r5
 8006240:	d420      	bmi.n	8006284 <_malloc_r+0xd0>
 8006242:	2a0b      	cmp	r2, #11
 8006244:	d917      	bls.n	8006276 <_malloc_r+0xc2>
 8006246:	1961      	adds	r1, r4, r5
 8006248:	42a3      	cmp	r3, r4
 800624a:	6025      	str	r5, [r4, #0]
 800624c:	bf18      	it	ne
 800624e:	6059      	strne	r1, [r3, #4]
 8006250:	6863      	ldr	r3, [r4, #4]
 8006252:	bf08      	it	eq
 8006254:	f8c8 1000 	streq.w	r1, [r8]
 8006258:	5162      	str	r2, [r4, r5]
 800625a:	604b      	str	r3, [r1, #4]
 800625c:	4630      	mov	r0, r6
 800625e:	f000 f82f 	bl	80062c0 <__malloc_unlock>
 8006262:	f104 000b 	add.w	r0, r4, #11
 8006266:	1d23      	adds	r3, r4, #4
 8006268:	f020 0007 	bic.w	r0, r0, #7
 800626c:	1ac2      	subs	r2, r0, r3
 800626e:	bf1c      	itt	ne
 8006270:	1a1b      	subne	r3, r3, r0
 8006272:	50a3      	strne	r3, [r4, r2]
 8006274:	e7af      	b.n	80061d6 <_malloc_r+0x22>
 8006276:	6862      	ldr	r2, [r4, #4]
 8006278:	42a3      	cmp	r3, r4
 800627a:	bf0c      	ite	eq
 800627c:	f8c8 2000 	streq.w	r2, [r8]
 8006280:	605a      	strne	r2, [r3, #4]
 8006282:	e7eb      	b.n	800625c <_malloc_r+0xa8>
 8006284:	4623      	mov	r3, r4
 8006286:	6864      	ldr	r4, [r4, #4]
 8006288:	e7ae      	b.n	80061e8 <_malloc_r+0x34>
 800628a:	463c      	mov	r4, r7
 800628c:	687f      	ldr	r7, [r7, #4]
 800628e:	e7b6      	b.n	80061fe <_malloc_r+0x4a>
 8006290:	461a      	mov	r2, r3
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	42a3      	cmp	r3, r4
 8006296:	d1fb      	bne.n	8006290 <_malloc_r+0xdc>
 8006298:	2300      	movs	r3, #0
 800629a:	6053      	str	r3, [r2, #4]
 800629c:	e7de      	b.n	800625c <_malloc_r+0xa8>
 800629e:	230c      	movs	r3, #12
 80062a0:	4630      	mov	r0, r6
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	f000 f80c 	bl	80062c0 <__malloc_unlock>
 80062a8:	e794      	b.n	80061d4 <_malloc_r+0x20>
 80062aa:	6005      	str	r5, [r0, #0]
 80062ac:	e7d6      	b.n	800625c <_malloc_r+0xa8>
 80062ae:	bf00      	nop
 80062b0:	20000494 	.word	0x20000494

080062b4 <__malloc_lock>:
 80062b4:	4801      	ldr	r0, [pc, #4]	@ (80062bc <__malloc_lock+0x8>)
 80062b6:	f7ff bf11 	b.w	80060dc <__retarget_lock_acquire_recursive>
 80062ba:	bf00      	nop
 80062bc:	2000048c 	.word	0x2000048c

080062c0 <__malloc_unlock>:
 80062c0:	4801      	ldr	r0, [pc, #4]	@ (80062c8 <__malloc_unlock+0x8>)
 80062c2:	f7ff bf0c 	b.w	80060de <__retarget_lock_release_recursive>
 80062c6:	bf00      	nop
 80062c8:	2000048c 	.word	0x2000048c

080062cc <__ssputs_r>:
 80062cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d0:	461f      	mov	r7, r3
 80062d2:	688e      	ldr	r6, [r1, #8]
 80062d4:	4682      	mov	sl, r0
 80062d6:	42be      	cmp	r6, r7
 80062d8:	460c      	mov	r4, r1
 80062da:	4690      	mov	r8, r2
 80062dc:	680b      	ldr	r3, [r1, #0]
 80062de:	d82d      	bhi.n	800633c <__ssputs_r+0x70>
 80062e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80062e8:	d026      	beq.n	8006338 <__ssputs_r+0x6c>
 80062ea:	6965      	ldr	r5, [r4, #20]
 80062ec:	6909      	ldr	r1, [r1, #16]
 80062ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062f2:	eba3 0901 	sub.w	r9, r3, r1
 80062f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062fa:	1c7b      	adds	r3, r7, #1
 80062fc:	444b      	add	r3, r9
 80062fe:	106d      	asrs	r5, r5, #1
 8006300:	429d      	cmp	r5, r3
 8006302:	bf38      	it	cc
 8006304:	461d      	movcc	r5, r3
 8006306:	0553      	lsls	r3, r2, #21
 8006308:	d527      	bpl.n	800635a <__ssputs_r+0x8e>
 800630a:	4629      	mov	r1, r5
 800630c:	f7ff ff52 	bl	80061b4 <_malloc_r>
 8006310:	4606      	mov	r6, r0
 8006312:	b360      	cbz	r0, 800636e <__ssputs_r+0xa2>
 8006314:	464a      	mov	r2, r9
 8006316:	6921      	ldr	r1, [r4, #16]
 8006318:	f000 faf8 	bl	800690c <memcpy>
 800631c:	89a3      	ldrh	r3, [r4, #12]
 800631e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006326:	81a3      	strh	r3, [r4, #12]
 8006328:	6126      	str	r6, [r4, #16]
 800632a:	444e      	add	r6, r9
 800632c:	6026      	str	r6, [r4, #0]
 800632e:	463e      	mov	r6, r7
 8006330:	6165      	str	r5, [r4, #20]
 8006332:	eba5 0509 	sub.w	r5, r5, r9
 8006336:	60a5      	str	r5, [r4, #8]
 8006338:	42be      	cmp	r6, r7
 800633a:	d900      	bls.n	800633e <__ssputs_r+0x72>
 800633c:	463e      	mov	r6, r7
 800633e:	4632      	mov	r2, r6
 8006340:	4641      	mov	r1, r8
 8006342:	6820      	ldr	r0, [r4, #0]
 8006344:	f000 faaa 	bl	800689c <memmove>
 8006348:	2000      	movs	r0, #0
 800634a:	68a3      	ldr	r3, [r4, #8]
 800634c:	1b9b      	subs	r3, r3, r6
 800634e:	60a3      	str	r3, [r4, #8]
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	4433      	add	r3, r6
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635a:	462a      	mov	r2, r5
 800635c:	f000 fae4 	bl	8006928 <_realloc_r>
 8006360:	4606      	mov	r6, r0
 8006362:	2800      	cmp	r0, #0
 8006364:	d1e0      	bne.n	8006328 <__ssputs_r+0x5c>
 8006366:	4650      	mov	r0, sl
 8006368:	6921      	ldr	r1, [r4, #16]
 800636a:	f7ff feb9 	bl	80060e0 <_free_r>
 800636e:	230c      	movs	r3, #12
 8006370:	f8ca 3000 	str.w	r3, [sl]
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	f04f 30ff 	mov.w	r0, #4294967295
 800637a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800637e:	81a3      	strh	r3, [r4, #12]
 8006380:	e7e9      	b.n	8006356 <__ssputs_r+0x8a>
	...

08006384 <_svfiprintf_r>:
 8006384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006388:	4698      	mov	r8, r3
 800638a:	898b      	ldrh	r3, [r1, #12]
 800638c:	4607      	mov	r7, r0
 800638e:	061b      	lsls	r3, r3, #24
 8006390:	460d      	mov	r5, r1
 8006392:	4614      	mov	r4, r2
 8006394:	b09d      	sub	sp, #116	@ 0x74
 8006396:	d510      	bpl.n	80063ba <_svfiprintf_r+0x36>
 8006398:	690b      	ldr	r3, [r1, #16]
 800639a:	b973      	cbnz	r3, 80063ba <_svfiprintf_r+0x36>
 800639c:	2140      	movs	r1, #64	@ 0x40
 800639e:	f7ff ff09 	bl	80061b4 <_malloc_r>
 80063a2:	6028      	str	r0, [r5, #0]
 80063a4:	6128      	str	r0, [r5, #16]
 80063a6:	b930      	cbnz	r0, 80063b6 <_svfiprintf_r+0x32>
 80063a8:	230c      	movs	r3, #12
 80063aa:	603b      	str	r3, [r7, #0]
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295
 80063b0:	b01d      	add	sp, #116	@ 0x74
 80063b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b6:	2340      	movs	r3, #64	@ 0x40
 80063b8:	616b      	str	r3, [r5, #20]
 80063ba:	2300      	movs	r3, #0
 80063bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80063be:	2320      	movs	r3, #32
 80063c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80063c4:	2330      	movs	r3, #48	@ 0x30
 80063c6:	f04f 0901 	mov.w	r9, #1
 80063ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80063ce:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006568 <_svfiprintf_r+0x1e4>
 80063d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80063d6:	4623      	mov	r3, r4
 80063d8:	469a      	mov	sl, r3
 80063da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063de:	b10a      	cbz	r2, 80063e4 <_svfiprintf_r+0x60>
 80063e0:	2a25      	cmp	r2, #37	@ 0x25
 80063e2:	d1f9      	bne.n	80063d8 <_svfiprintf_r+0x54>
 80063e4:	ebba 0b04 	subs.w	fp, sl, r4
 80063e8:	d00b      	beq.n	8006402 <_svfiprintf_r+0x7e>
 80063ea:	465b      	mov	r3, fp
 80063ec:	4622      	mov	r2, r4
 80063ee:	4629      	mov	r1, r5
 80063f0:	4638      	mov	r0, r7
 80063f2:	f7ff ff6b 	bl	80062cc <__ssputs_r>
 80063f6:	3001      	adds	r0, #1
 80063f8:	f000 80a7 	beq.w	800654a <_svfiprintf_r+0x1c6>
 80063fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063fe:	445a      	add	r2, fp
 8006400:	9209      	str	r2, [sp, #36]	@ 0x24
 8006402:	f89a 3000 	ldrb.w	r3, [sl]
 8006406:	2b00      	cmp	r3, #0
 8006408:	f000 809f 	beq.w	800654a <_svfiprintf_r+0x1c6>
 800640c:	2300      	movs	r3, #0
 800640e:	f04f 32ff 	mov.w	r2, #4294967295
 8006412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006416:	f10a 0a01 	add.w	sl, sl, #1
 800641a:	9304      	str	r3, [sp, #16]
 800641c:	9307      	str	r3, [sp, #28]
 800641e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006422:	931a      	str	r3, [sp, #104]	@ 0x68
 8006424:	4654      	mov	r4, sl
 8006426:	2205      	movs	r2, #5
 8006428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800642c:	484e      	ldr	r0, [pc, #312]	@ (8006568 <_svfiprintf_r+0x1e4>)
 800642e:	f000 fa5f 	bl	80068f0 <memchr>
 8006432:	9a04      	ldr	r2, [sp, #16]
 8006434:	b9d8      	cbnz	r0, 800646e <_svfiprintf_r+0xea>
 8006436:	06d0      	lsls	r0, r2, #27
 8006438:	bf44      	itt	mi
 800643a:	2320      	movmi	r3, #32
 800643c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006440:	0711      	lsls	r1, r2, #28
 8006442:	bf44      	itt	mi
 8006444:	232b      	movmi	r3, #43	@ 0x2b
 8006446:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800644a:	f89a 3000 	ldrb.w	r3, [sl]
 800644e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006450:	d015      	beq.n	800647e <_svfiprintf_r+0xfa>
 8006452:	4654      	mov	r4, sl
 8006454:	2000      	movs	r0, #0
 8006456:	f04f 0c0a 	mov.w	ip, #10
 800645a:	9a07      	ldr	r2, [sp, #28]
 800645c:	4621      	mov	r1, r4
 800645e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006462:	3b30      	subs	r3, #48	@ 0x30
 8006464:	2b09      	cmp	r3, #9
 8006466:	d94b      	bls.n	8006500 <_svfiprintf_r+0x17c>
 8006468:	b1b0      	cbz	r0, 8006498 <_svfiprintf_r+0x114>
 800646a:	9207      	str	r2, [sp, #28]
 800646c:	e014      	b.n	8006498 <_svfiprintf_r+0x114>
 800646e:	eba0 0308 	sub.w	r3, r0, r8
 8006472:	fa09 f303 	lsl.w	r3, r9, r3
 8006476:	4313      	orrs	r3, r2
 8006478:	46a2      	mov	sl, r4
 800647a:	9304      	str	r3, [sp, #16]
 800647c:	e7d2      	b.n	8006424 <_svfiprintf_r+0xa0>
 800647e:	9b03      	ldr	r3, [sp, #12]
 8006480:	1d19      	adds	r1, r3, #4
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	9103      	str	r1, [sp, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	bfbb      	ittet	lt
 800648a:	425b      	neglt	r3, r3
 800648c:	f042 0202 	orrlt.w	r2, r2, #2
 8006490:	9307      	strge	r3, [sp, #28]
 8006492:	9307      	strlt	r3, [sp, #28]
 8006494:	bfb8      	it	lt
 8006496:	9204      	strlt	r2, [sp, #16]
 8006498:	7823      	ldrb	r3, [r4, #0]
 800649a:	2b2e      	cmp	r3, #46	@ 0x2e
 800649c:	d10a      	bne.n	80064b4 <_svfiprintf_r+0x130>
 800649e:	7863      	ldrb	r3, [r4, #1]
 80064a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80064a2:	d132      	bne.n	800650a <_svfiprintf_r+0x186>
 80064a4:	9b03      	ldr	r3, [sp, #12]
 80064a6:	3402      	adds	r4, #2
 80064a8:	1d1a      	adds	r2, r3, #4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	9203      	str	r2, [sp, #12]
 80064ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80064b2:	9305      	str	r3, [sp, #20]
 80064b4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800656c <_svfiprintf_r+0x1e8>
 80064b8:	2203      	movs	r2, #3
 80064ba:	4650      	mov	r0, sl
 80064bc:	7821      	ldrb	r1, [r4, #0]
 80064be:	f000 fa17 	bl	80068f0 <memchr>
 80064c2:	b138      	cbz	r0, 80064d4 <_svfiprintf_r+0x150>
 80064c4:	2240      	movs	r2, #64	@ 0x40
 80064c6:	9b04      	ldr	r3, [sp, #16]
 80064c8:	eba0 000a 	sub.w	r0, r0, sl
 80064cc:	4082      	lsls	r2, r0
 80064ce:	4313      	orrs	r3, r2
 80064d0:	3401      	adds	r4, #1
 80064d2:	9304      	str	r3, [sp, #16]
 80064d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d8:	2206      	movs	r2, #6
 80064da:	4825      	ldr	r0, [pc, #148]	@ (8006570 <_svfiprintf_r+0x1ec>)
 80064dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064e0:	f000 fa06 	bl	80068f0 <memchr>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d036      	beq.n	8006556 <_svfiprintf_r+0x1d2>
 80064e8:	4b22      	ldr	r3, [pc, #136]	@ (8006574 <_svfiprintf_r+0x1f0>)
 80064ea:	bb1b      	cbnz	r3, 8006534 <_svfiprintf_r+0x1b0>
 80064ec:	9b03      	ldr	r3, [sp, #12]
 80064ee:	3307      	adds	r3, #7
 80064f0:	f023 0307 	bic.w	r3, r3, #7
 80064f4:	3308      	adds	r3, #8
 80064f6:	9303      	str	r3, [sp, #12]
 80064f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064fa:	4433      	add	r3, r6
 80064fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80064fe:	e76a      	b.n	80063d6 <_svfiprintf_r+0x52>
 8006500:	460c      	mov	r4, r1
 8006502:	2001      	movs	r0, #1
 8006504:	fb0c 3202 	mla	r2, ip, r2, r3
 8006508:	e7a8      	b.n	800645c <_svfiprintf_r+0xd8>
 800650a:	2300      	movs	r3, #0
 800650c:	f04f 0c0a 	mov.w	ip, #10
 8006510:	4619      	mov	r1, r3
 8006512:	3401      	adds	r4, #1
 8006514:	9305      	str	r3, [sp, #20]
 8006516:	4620      	mov	r0, r4
 8006518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800651c:	3a30      	subs	r2, #48	@ 0x30
 800651e:	2a09      	cmp	r2, #9
 8006520:	d903      	bls.n	800652a <_svfiprintf_r+0x1a6>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0c6      	beq.n	80064b4 <_svfiprintf_r+0x130>
 8006526:	9105      	str	r1, [sp, #20]
 8006528:	e7c4      	b.n	80064b4 <_svfiprintf_r+0x130>
 800652a:	4604      	mov	r4, r0
 800652c:	2301      	movs	r3, #1
 800652e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006532:	e7f0      	b.n	8006516 <_svfiprintf_r+0x192>
 8006534:	ab03      	add	r3, sp, #12
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	462a      	mov	r2, r5
 800653a:	4638      	mov	r0, r7
 800653c:	4b0e      	ldr	r3, [pc, #56]	@ (8006578 <_svfiprintf_r+0x1f4>)
 800653e:	a904      	add	r1, sp, #16
 8006540:	f3af 8000 	nop.w
 8006544:	1c42      	adds	r2, r0, #1
 8006546:	4606      	mov	r6, r0
 8006548:	d1d6      	bne.n	80064f8 <_svfiprintf_r+0x174>
 800654a:	89ab      	ldrh	r3, [r5, #12]
 800654c:	065b      	lsls	r3, r3, #25
 800654e:	f53f af2d 	bmi.w	80063ac <_svfiprintf_r+0x28>
 8006552:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006554:	e72c      	b.n	80063b0 <_svfiprintf_r+0x2c>
 8006556:	ab03      	add	r3, sp, #12
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	462a      	mov	r2, r5
 800655c:	4638      	mov	r0, r7
 800655e:	4b06      	ldr	r3, [pc, #24]	@ (8006578 <_svfiprintf_r+0x1f4>)
 8006560:	a904      	add	r1, sp, #16
 8006562:	f000 f87d 	bl	8006660 <_printf_i>
 8006566:	e7ed      	b.n	8006544 <_svfiprintf_r+0x1c0>
 8006568:	08007468 	.word	0x08007468
 800656c:	0800746e 	.word	0x0800746e
 8006570:	08007472 	.word	0x08007472
 8006574:	00000000 	.word	0x00000000
 8006578:	080062cd 	.word	0x080062cd

0800657c <_printf_common>:
 800657c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006580:	4616      	mov	r6, r2
 8006582:	4698      	mov	r8, r3
 8006584:	688a      	ldr	r2, [r1, #8]
 8006586:	690b      	ldr	r3, [r1, #16]
 8006588:	4607      	mov	r7, r0
 800658a:	4293      	cmp	r3, r2
 800658c:	bfb8      	it	lt
 800658e:	4613      	movlt	r3, r2
 8006590:	6033      	str	r3, [r6, #0]
 8006592:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006596:	460c      	mov	r4, r1
 8006598:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800659c:	b10a      	cbz	r2, 80065a2 <_printf_common+0x26>
 800659e:	3301      	adds	r3, #1
 80065a0:	6033      	str	r3, [r6, #0]
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	0699      	lsls	r1, r3, #26
 80065a6:	bf42      	ittt	mi
 80065a8:	6833      	ldrmi	r3, [r6, #0]
 80065aa:	3302      	addmi	r3, #2
 80065ac:	6033      	strmi	r3, [r6, #0]
 80065ae:	6825      	ldr	r5, [r4, #0]
 80065b0:	f015 0506 	ands.w	r5, r5, #6
 80065b4:	d106      	bne.n	80065c4 <_printf_common+0x48>
 80065b6:	f104 0a19 	add.w	sl, r4, #25
 80065ba:	68e3      	ldr	r3, [r4, #12]
 80065bc:	6832      	ldr	r2, [r6, #0]
 80065be:	1a9b      	subs	r3, r3, r2
 80065c0:	42ab      	cmp	r3, r5
 80065c2:	dc2b      	bgt.n	800661c <_printf_common+0xa0>
 80065c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065c8:	6822      	ldr	r2, [r4, #0]
 80065ca:	3b00      	subs	r3, #0
 80065cc:	bf18      	it	ne
 80065ce:	2301      	movne	r3, #1
 80065d0:	0692      	lsls	r2, r2, #26
 80065d2:	d430      	bmi.n	8006636 <_printf_common+0xba>
 80065d4:	4641      	mov	r1, r8
 80065d6:	4638      	mov	r0, r7
 80065d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065dc:	47c8      	blx	r9
 80065de:	3001      	adds	r0, #1
 80065e0:	d023      	beq.n	800662a <_printf_common+0xae>
 80065e2:	6823      	ldr	r3, [r4, #0]
 80065e4:	6922      	ldr	r2, [r4, #16]
 80065e6:	f003 0306 	and.w	r3, r3, #6
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	bf14      	ite	ne
 80065ee:	2500      	movne	r5, #0
 80065f0:	6833      	ldreq	r3, [r6, #0]
 80065f2:	f04f 0600 	mov.w	r6, #0
 80065f6:	bf08      	it	eq
 80065f8:	68e5      	ldreq	r5, [r4, #12]
 80065fa:	f104 041a 	add.w	r4, r4, #26
 80065fe:	bf08      	it	eq
 8006600:	1aed      	subeq	r5, r5, r3
 8006602:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006606:	bf08      	it	eq
 8006608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800660c:	4293      	cmp	r3, r2
 800660e:	bfc4      	itt	gt
 8006610:	1a9b      	subgt	r3, r3, r2
 8006612:	18ed      	addgt	r5, r5, r3
 8006614:	42b5      	cmp	r5, r6
 8006616:	d11a      	bne.n	800664e <_printf_common+0xd2>
 8006618:	2000      	movs	r0, #0
 800661a:	e008      	b.n	800662e <_printf_common+0xb2>
 800661c:	2301      	movs	r3, #1
 800661e:	4652      	mov	r2, sl
 8006620:	4641      	mov	r1, r8
 8006622:	4638      	mov	r0, r7
 8006624:	47c8      	blx	r9
 8006626:	3001      	adds	r0, #1
 8006628:	d103      	bne.n	8006632 <_printf_common+0xb6>
 800662a:	f04f 30ff 	mov.w	r0, #4294967295
 800662e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006632:	3501      	adds	r5, #1
 8006634:	e7c1      	b.n	80065ba <_printf_common+0x3e>
 8006636:	2030      	movs	r0, #48	@ 0x30
 8006638:	18e1      	adds	r1, r4, r3
 800663a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006644:	4422      	add	r2, r4
 8006646:	3302      	adds	r3, #2
 8006648:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800664c:	e7c2      	b.n	80065d4 <_printf_common+0x58>
 800664e:	2301      	movs	r3, #1
 8006650:	4622      	mov	r2, r4
 8006652:	4641      	mov	r1, r8
 8006654:	4638      	mov	r0, r7
 8006656:	47c8      	blx	r9
 8006658:	3001      	adds	r0, #1
 800665a:	d0e6      	beq.n	800662a <_printf_common+0xae>
 800665c:	3601      	adds	r6, #1
 800665e:	e7d9      	b.n	8006614 <_printf_common+0x98>

08006660 <_printf_i>:
 8006660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006664:	7e0f      	ldrb	r7, [r1, #24]
 8006666:	4691      	mov	r9, r2
 8006668:	2f78      	cmp	r7, #120	@ 0x78
 800666a:	4680      	mov	r8, r0
 800666c:	460c      	mov	r4, r1
 800666e:	469a      	mov	sl, r3
 8006670:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006672:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006676:	d807      	bhi.n	8006688 <_printf_i+0x28>
 8006678:	2f62      	cmp	r7, #98	@ 0x62
 800667a:	d80a      	bhi.n	8006692 <_printf_i+0x32>
 800667c:	2f00      	cmp	r7, #0
 800667e:	f000 80d1 	beq.w	8006824 <_printf_i+0x1c4>
 8006682:	2f58      	cmp	r7, #88	@ 0x58
 8006684:	f000 80b8 	beq.w	80067f8 <_printf_i+0x198>
 8006688:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800668c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006690:	e03a      	b.n	8006708 <_printf_i+0xa8>
 8006692:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006696:	2b15      	cmp	r3, #21
 8006698:	d8f6      	bhi.n	8006688 <_printf_i+0x28>
 800669a:	a101      	add	r1, pc, #4	@ (adr r1, 80066a0 <_printf_i+0x40>)
 800669c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066a0:	080066f9 	.word	0x080066f9
 80066a4:	0800670d 	.word	0x0800670d
 80066a8:	08006689 	.word	0x08006689
 80066ac:	08006689 	.word	0x08006689
 80066b0:	08006689 	.word	0x08006689
 80066b4:	08006689 	.word	0x08006689
 80066b8:	0800670d 	.word	0x0800670d
 80066bc:	08006689 	.word	0x08006689
 80066c0:	08006689 	.word	0x08006689
 80066c4:	08006689 	.word	0x08006689
 80066c8:	08006689 	.word	0x08006689
 80066cc:	0800680b 	.word	0x0800680b
 80066d0:	08006737 	.word	0x08006737
 80066d4:	080067c5 	.word	0x080067c5
 80066d8:	08006689 	.word	0x08006689
 80066dc:	08006689 	.word	0x08006689
 80066e0:	0800682d 	.word	0x0800682d
 80066e4:	08006689 	.word	0x08006689
 80066e8:	08006737 	.word	0x08006737
 80066ec:	08006689 	.word	0x08006689
 80066f0:	08006689 	.word	0x08006689
 80066f4:	080067cd 	.word	0x080067cd
 80066f8:	6833      	ldr	r3, [r6, #0]
 80066fa:	1d1a      	adds	r2, r3, #4
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6032      	str	r2, [r6, #0]
 8006700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006704:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006708:	2301      	movs	r3, #1
 800670a:	e09c      	b.n	8006846 <_printf_i+0x1e6>
 800670c:	6833      	ldr	r3, [r6, #0]
 800670e:	6820      	ldr	r0, [r4, #0]
 8006710:	1d19      	adds	r1, r3, #4
 8006712:	6031      	str	r1, [r6, #0]
 8006714:	0606      	lsls	r6, r0, #24
 8006716:	d501      	bpl.n	800671c <_printf_i+0xbc>
 8006718:	681d      	ldr	r5, [r3, #0]
 800671a:	e003      	b.n	8006724 <_printf_i+0xc4>
 800671c:	0645      	lsls	r5, r0, #25
 800671e:	d5fb      	bpl.n	8006718 <_printf_i+0xb8>
 8006720:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006724:	2d00      	cmp	r5, #0
 8006726:	da03      	bge.n	8006730 <_printf_i+0xd0>
 8006728:	232d      	movs	r3, #45	@ 0x2d
 800672a:	426d      	negs	r5, r5
 800672c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006730:	230a      	movs	r3, #10
 8006732:	4858      	ldr	r0, [pc, #352]	@ (8006894 <_printf_i+0x234>)
 8006734:	e011      	b.n	800675a <_printf_i+0xfa>
 8006736:	6821      	ldr	r1, [r4, #0]
 8006738:	6833      	ldr	r3, [r6, #0]
 800673a:	0608      	lsls	r0, r1, #24
 800673c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006740:	d402      	bmi.n	8006748 <_printf_i+0xe8>
 8006742:	0649      	lsls	r1, r1, #25
 8006744:	bf48      	it	mi
 8006746:	b2ad      	uxthmi	r5, r5
 8006748:	2f6f      	cmp	r7, #111	@ 0x6f
 800674a:	6033      	str	r3, [r6, #0]
 800674c:	bf14      	ite	ne
 800674e:	230a      	movne	r3, #10
 8006750:	2308      	moveq	r3, #8
 8006752:	4850      	ldr	r0, [pc, #320]	@ (8006894 <_printf_i+0x234>)
 8006754:	2100      	movs	r1, #0
 8006756:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800675a:	6866      	ldr	r6, [r4, #4]
 800675c:	2e00      	cmp	r6, #0
 800675e:	60a6      	str	r6, [r4, #8]
 8006760:	db05      	blt.n	800676e <_printf_i+0x10e>
 8006762:	6821      	ldr	r1, [r4, #0]
 8006764:	432e      	orrs	r6, r5
 8006766:	f021 0104 	bic.w	r1, r1, #4
 800676a:	6021      	str	r1, [r4, #0]
 800676c:	d04b      	beq.n	8006806 <_printf_i+0x1a6>
 800676e:	4616      	mov	r6, r2
 8006770:	fbb5 f1f3 	udiv	r1, r5, r3
 8006774:	fb03 5711 	mls	r7, r3, r1, r5
 8006778:	5dc7      	ldrb	r7, [r0, r7]
 800677a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800677e:	462f      	mov	r7, r5
 8006780:	42bb      	cmp	r3, r7
 8006782:	460d      	mov	r5, r1
 8006784:	d9f4      	bls.n	8006770 <_printf_i+0x110>
 8006786:	2b08      	cmp	r3, #8
 8006788:	d10b      	bne.n	80067a2 <_printf_i+0x142>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	07df      	lsls	r7, r3, #31
 800678e:	d508      	bpl.n	80067a2 <_printf_i+0x142>
 8006790:	6923      	ldr	r3, [r4, #16]
 8006792:	6861      	ldr	r1, [r4, #4]
 8006794:	4299      	cmp	r1, r3
 8006796:	bfde      	ittt	le
 8006798:	2330      	movle	r3, #48	@ 0x30
 800679a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800679e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067a2:	1b92      	subs	r2, r2, r6
 80067a4:	6122      	str	r2, [r4, #16]
 80067a6:	464b      	mov	r3, r9
 80067a8:	4621      	mov	r1, r4
 80067aa:	4640      	mov	r0, r8
 80067ac:	f8cd a000 	str.w	sl, [sp]
 80067b0:	aa03      	add	r2, sp, #12
 80067b2:	f7ff fee3 	bl	800657c <_printf_common>
 80067b6:	3001      	adds	r0, #1
 80067b8:	d14a      	bne.n	8006850 <_printf_i+0x1f0>
 80067ba:	f04f 30ff 	mov.w	r0, #4294967295
 80067be:	b004      	add	sp, #16
 80067c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	f043 0320 	orr.w	r3, r3, #32
 80067ca:	6023      	str	r3, [r4, #0]
 80067cc:	2778      	movs	r7, #120	@ 0x78
 80067ce:	4832      	ldr	r0, [pc, #200]	@ (8006898 <_printf_i+0x238>)
 80067d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067d4:	6823      	ldr	r3, [r4, #0]
 80067d6:	6831      	ldr	r1, [r6, #0]
 80067d8:	061f      	lsls	r7, r3, #24
 80067da:	f851 5b04 	ldr.w	r5, [r1], #4
 80067de:	d402      	bmi.n	80067e6 <_printf_i+0x186>
 80067e0:	065f      	lsls	r7, r3, #25
 80067e2:	bf48      	it	mi
 80067e4:	b2ad      	uxthmi	r5, r5
 80067e6:	6031      	str	r1, [r6, #0]
 80067e8:	07d9      	lsls	r1, r3, #31
 80067ea:	bf44      	itt	mi
 80067ec:	f043 0320 	orrmi.w	r3, r3, #32
 80067f0:	6023      	strmi	r3, [r4, #0]
 80067f2:	b11d      	cbz	r5, 80067fc <_printf_i+0x19c>
 80067f4:	2310      	movs	r3, #16
 80067f6:	e7ad      	b.n	8006754 <_printf_i+0xf4>
 80067f8:	4826      	ldr	r0, [pc, #152]	@ (8006894 <_printf_i+0x234>)
 80067fa:	e7e9      	b.n	80067d0 <_printf_i+0x170>
 80067fc:	6823      	ldr	r3, [r4, #0]
 80067fe:	f023 0320 	bic.w	r3, r3, #32
 8006802:	6023      	str	r3, [r4, #0]
 8006804:	e7f6      	b.n	80067f4 <_printf_i+0x194>
 8006806:	4616      	mov	r6, r2
 8006808:	e7bd      	b.n	8006786 <_printf_i+0x126>
 800680a:	6833      	ldr	r3, [r6, #0]
 800680c:	6825      	ldr	r5, [r4, #0]
 800680e:	1d18      	adds	r0, r3, #4
 8006810:	6961      	ldr	r1, [r4, #20]
 8006812:	6030      	str	r0, [r6, #0]
 8006814:	062e      	lsls	r6, r5, #24
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	d501      	bpl.n	800681e <_printf_i+0x1be>
 800681a:	6019      	str	r1, [r3, #0]
 800681c:	e002      	b.n	8006824 <_printf_i+0x1c4>
 800681e:	0668      	lsls	r0, r5, #25
 8006820:	d5fb      	bpl.n	800681a <_printf_i+0x1ba>
 8006822:	8019      	strh	r1, [r3, #0]
 8006824:	2300      	movs	r3, #0
 8006826:	4616      	mov	r6, r2
 8006828:	6123      	str	r3, [r4, #16]
 800682a:	e7bc      	b.n	80067a6 <_printf_i+0x146>
 800682c:	6833      	ldr	r3, [r6, #0]
 800682e:	2100      	movs	r1, #0
 8006830:	1d1a      	adds	r2, r3, #4
 8006832:	6032      	str	r2, [r6, #0]
 8006834:	681e      	ldr	r6, [r3, #0]
 8006836:	6862      	ldr	r2, [r4, #4]
 8006838:	4630      	mov	r0, r6
 800683a:	f000 f859 	bl	80068f0 <memchr>
 800683e:	b108      	cbz	r0, 8006844 <_printf_i+0x1e4>
 8006840:	1b80      	subs	r0, r0, r6
 8006842:	6060      	str	r0, [r4, #4]
 8006844:	6863      	ldr	r3, [r4, #4]
 8006846:	6123      	str	r3, [r4, #16]
 8006848:	2300      	movs	r3, #0
 800684a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800684e:	e7aa      	b.n	80067a6 <_printf_i+0x146>
 8006850:	4632      	mov	r2, r6
 8006852:	4649      	mov	r1, r9
 8006854:	4640      	mov	r0, r8
 8006856:	6923      	ldr	r3, [r4, #16]
 8006858:	47d0      	blx	sl
 800685a:	3001      	adds	r0, #1
 800685c:	d0ad      	beq.n	80067ba <_printf_i+0x15a>
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	079b      	lsls	r3, r3, #30
 8006862:	d413      	bmi.n	800688c <_printf_i+0x22c>
 8006864:	68e0      	ldr	r0, [r4, #12]
 8006866:	9b03      	ldr	r3, [sp, #12]
 8006868:	4298      	cmp	r0, r3
 800686a:	bfb8      	it	lt
 800686c:	4618      	movlt	r0, r3
 800686e:	e7a6      	b.n	80067be <_printf_i+0x15e>
 8006870:	2301      	movs	r3, #1
 8006872:	4632      	mov	r2, r6
 8006874:	4649      	mov	r1, r9
 8006876:	4640      	mov	r0, r8
 8006878:	47d0      	blx	sl
 800687a:	3001      	adds	r0, #1
 800687c:	d09d      	beq.n	80067ba <_printf_i+0x15a>
 800687e:	3501      	adds	r5, #1
 8006880:	68e3      	ldr	r3, [r4, #12]
 8006882:	9903      	ldr	r1, [sp, #12]
 8006884:	1a5b      	subs	r3, r3, r1
 8006886:	42ab      	cmp	r3, r5
 8006888:	dcf2      	bgt.n	8006870 <_printf_i+0x210>
 800688a:	e7eb      	b.n	8006864 <_printf_i+0x204>
 800688c:	2500      	movs	r5, #0
 800688e:	f104 0619 	add.w	r6, r4, #25
 8006892:	e7f5      	b.n	8006880 <_printf_i+0x220>
 8006894:	08007479 	.word	0x08007479
 8006898:	0800748a 	.word	0x0800748a

0800689c <memmove>:
 800689c:	4288      	cmp	r0, r1
 800689e:	b510      	push	{r4, lr}
 80068a0:	eb01 0402 	add.w	r4, r1, r2
 80068a4:	d902      	bls.n	80068ac <memmove+0x10>
 80068a6:	4284      	cmp	r4, r0
 80068a8:	4623      	mov	r3, r4
 80068aa:	d807      	bhi.n	80068bc <memmove+0x20>
 80068ac:	1e43      	subs	r3, r0, #1
 80068ae:	42a1      	cmp	r1, r4
 80068b0:	d008      	beq.n	80068c4 <memmove+0x28>
 80068b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068ba:	e7f8      	b.n	80068ae <memmove+0x12>
 80068bc:	4601      	mov	r1, r0
 80068be:	4402      	add	r2, r0
 80068c0:	428a      	cmp	r2, r1
 80068c2:	d100      	bne.n	80068c6 <memmove+0x2a>
 80068c4:	bd10      	pop	{r4, pc}
 80068c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80068ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80068ce:	e7f7      	b.n	80068c0 <memmove+0x24>

080068d0 <_sbrk_r>:
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	2300      	movs	r3, #0
 80068d4:	4d05      	ldr	r5, [pc, #20]	@ (80068ec <_sbrk_r+0x1c>)
 80068d6:	4604      	mov	r4, r0
 80068d8:	4608      	mov	r0, r1
 80068da:	602b      	str	r3, [r5, #0]
 80068dc:	f7fc fd70 	bl	80033c0 <_sbrk>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d102      	bne.n	80068ea <_sbrk_r+0x1a>
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	b103      	cbz	r3, 80068ea <_sbrk_r+0x1a>
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	bd38      	pop	{r3, r4, r5, pc}
 80068ec:	20000488 	.word	0x20000488

080068f0 <memchr>:
 80068f0:	4603      	mov	r3, r0
 80068f2:	b510      	push	{r4, lr}
 80068f4:	b2c9      	uxtb	r1, r1
 80068f6:	4402      	add	r2, r0
 80068f8:	4293      	cmp	r3, r2
 80068fa:	4618      	mov	r0, r3
 80068fc:	d101      	bne.n	8006902 <memchr+0x12>
 80068fe:	2000      	movs	r0, #0
 8006900:	e003      	b.n	800690a <memchr+0x1a>
 8006902:	7804      	ldrb	r4, [r0, #0]
 8006904:	3301      	adds	r3, #1
 8006906:	428c      	cmp	r4, r1
 8006908:	d1f6      	bne.n	80068f8 <memchr+0x8>
 800690a:	bd10      	pop	{r4, pc}

0800690c <memcpy>:
 800690c:	440a      	add	r2, r1
 800690e:	4291      	cmp	r1, r2
 8006910:	f100 33ff 	add.w	r3, r0, #4294967295
 8006914:	d100      	bne.n	8006918 <memcpy+0xc>
 8006916:	4770      	bx	lr
 8006918:	b510      	push	{r4, lr}
 800691a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800691e:	4291      	cmp	r1, r2
 8006920:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006924:	d1f9      	bne.n	800691a <memcpy+0xe>
 8006926:	bd10      	pop	{r4, pc}

08006928 <_realloc_r>:
 8006928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800692c:	4607      	mov	r7, r0
 800692e:	4614      	mov	r4, r2
 8006930:	460d      	mov	r5, r1
 8006932:	b921      	cbnz	r1, 800693e <_realloc_r+0x16>
 8006934:	4611      	mov	r1, r2
 8006936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800693a:	f7ff bc3b 	b.w	80061b4 <_malloc_r>
 800693e:	b92a      	cbnz	r2, 800694c <_realloc_r+0x24>
 8006940:	f7ff fbce 	bl	80060e0 <_free_r>
 8006944:	4625      	mov	r5, r4
 8006946:	4628      	mov	r0, r5
 8006948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800694c:	f000 f81a 	bl	8006984 <_malloc_usable_size_r>
 8006950:	4284      	cmp	r4, r0
 8006952:	4606      	mov	r6, r0
 8006954:	d802      	bhi.n	800695c <_realloc_r+0x34>
 8006956:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800695a:	d8f4      	bhi.n	8006946 <_realloc_r+0x1e>
 800695c:	4621      	mov	r1, r4
 800695e:	4638      	mov	r0, r7
 8006960:	f7ff fc28 	bl	80061b4 <_malloc_r>
 8006964:	4680      	mov	r8, r0
 8006966:	b908      	cbnz	r0, 800696c <_realloc_r+0x44>
 8006968:	4645      	mov	r5, r8
 800696a:	e7ec      	b.n	8006946 <_realloc_r+0x1e>
 800696c:	42b4      	cmp	r4, r6
 800696e:	4622      	mov	r2, r4
 8006970:	4629      	mov	r1, r5
 8006972:	bf28      	it	cs
 8006974:	4632      	movcs	r2, r6
 8006976:	f7ff ffc9 	bl	800690c <memcpy>
 800697a:	4629      	mov	r1, r5
 800697c:	4638      	mov	r0, r7
 800697e:	f7ff fbaf 	bl	80060e0 <_free_r>
 8006982:	e7f1      	b.n	8006968 <_realloc_r+0x40>

08006984 <_malloc_usable_size_r>:
 8006984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006988:	1f18      	subs	r0, r3, #4
 800698a:	2b00      	cmp	r3, #0
 800698c:	bfbc      	itt	lt
 800698e:	580b      	ldrlt	r3, [r1, r0]
 8006990:	18c0      	addlt	r0, r0, r3
 8006992:	4770      	bx	lr

08006994 <_init>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	bf00      	nop
 8006998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699a:	bc08      	pop	{r3}
 800699c:	469e      	mov	lr, r3
 800699e:	4770      	bx	lr

080069a0 <_fini>:
 80069a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a2:	bf00      	nop
 80069a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069a6:	bc08      	pop	{r3}
 80069a8:	469e      	mov	lr, r3
 80069aa:	4770      	bx	lr
