
HVAC_CONTROL_WITH_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08004508  08004508  00005508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004868  08004868  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004868  08004868  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004868  08004868  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004868  08004868  00005868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800486c  0800486c  0000586c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004870  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000005c  080048cc  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080048cc  000062c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000085a8  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002115  00000000  00000000  0000e62d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  00010748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b3  00000000  00000000  00011048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001762c  00000000  00000000  000116fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e773  00000000  00000000  00028d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082c01  00000000  00000000  0003749a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba09b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000277c  00000000  00000000  000ba0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000bc85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080044f0 	.word	0x080044f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080044f0 	.word	0x080044f0

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <Blower_Relay_Pins_Init>:

#define PB12_LOW_SPEED_BLOWER    12
#define PB13_MEDIUM_SPEED_BLOWER 13
#define PB14_HIGH_SPEED_BLOWER   14

void Blower_Relay_Pins_Init(){
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80006f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <Blower_Relay_Pins_Init+0x40>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <Blower_Relay_Pins_Init+0x40>)
 80006fe:	f043 0308 	orr.w	r3, r3, #8
 8000702:	6193      	str	r3, [r2, #24]
    GPIOB->CRH&=~((0xFF<<16)|(0XFF<<20)|(0XFF<<24));
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <Blower_Relay_Pins_Init+0x44>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	4a0b      	ldr	r2, [pc, #44]	@ (8000738 <Blower_Relay_Pins_Init+0x44>)
 800070a:	b29b      	uxth	r3, r3
 800070c:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=((0x3<<16)|(0X3<<20)|(0X3<<24));
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <Blower_Relay_Pins_Init+0x44>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	4a09      	ldr	r2, [pc, #36]	@ (8000738 <Blower_Relay_Pins_Init+0x44>)
 8000714:	f043 734c 	orr.w	r3, r3, #53477376	@ 0x3300000
 8000718:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800071c:	6053      	str	r3, [r2, #4]
    GPIOB->ODR|=((1<<PB12_LOW_SPEED_BLOWER)|(1<<PB13_MEDIUM_SPEED_BLOWER)|(1<<PB14_HIGH_SPEED_BLOWER));
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <Blower_Relay_Pins_Init+0x44>)
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	4a05      	ldr	r2, [pc, #20]	@ (8000738 <Blower_Relay_Pins_Init+0x44>)
 8000724:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000728:	60d3      	str	r3, [r2, #12]
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000
 8000738:	40010c00 	.word	0x40010c00

0800073c <MX_I2C1_Init>:
 */

#include"extern_file_declarations.h"
uint8_t I2C_RX_FLAG=0,data[2];
 void MX_I2C1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_I2C1_Init+0x5c>)
 8000742:	4a16      	ldr	r2, [pc, #88]	@ (800079c <MX_I2C1_Init+0x60>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_I2C1_Init+0x5c>)
 8000748:	4a15      	ldr	r2, [pc, #84]	@ (80007a0 <MX_I2C1_Init+0x64>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_I2C1_Init+0x5c>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 170;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_I2C1_Init+0x5c>)
 8000754:	22aa      	movs	r2, #170	@ 0xaa
 8000756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_I2C1_Init+0x5c>)
 800075a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800075e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <MX_I2C1_Init+0x5c>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_I2C1_Init+0x5c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_I2C1_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_I2C1_Init+0x5c>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000778:	4807      	ldr	r0, [pc, #28]	@ (8000798 <MX_I2C1_Init+0x5c>)
 800077a:	f001 fb2b 	bl	8001dd4 <HAL_I2C_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000784:	f000 fb10 	bl	8000da8 <Error_Handler>
  }
  HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 8000788:	2202      	movs	r2, #2
 800078a:	4906      	ldr	r1, [pc, #24]	@ (80007a4 <MX_I2C1_Init+0x68>)
 800078c:	4802      	ldr	r0, [pc, #8]	@ (8000798 <MX_I2C1_Init+0x5c>)
 800078e:	f001 fc79 	bl	8002084 <HAL_I2C_Slave_Receive_IT>
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000080 	.word	0x20000080
 800079c:	40005400 	.word	0x40005400
 80007a0:	00061a80 	.word	0x00061a80
 80007a4:	2000007c 	.word	0x2000007c

080007a8 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	I2C_RX_FLAG=1;
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 80007b6:	2202      	movs	r2, #2
 80007b8:	4904      	ldr	r1, [pc, #16]	@ (80007cc <HAL_I2C_SlaveRxCpltCallback+0x24>)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 80007bc:	f001 fc62 	bl	8002084 <HAL_I2C_Slave_Receive_IT>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000078 	.word	0x20000078
 80007cc:	2000007c 	.word	0x2000007c
 80007d0:	20000080 	.word	0x20000080

080007d4 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000814 <HAL_I2C_ErrorCallback+0x40>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d112      	bne.n	800080c <HAL_I2C_ErrorCallback+0x38>
        // Reset I2C if it’s stuck
        __HAL_RCC_I2C1_FORCE_RESET();
 80007e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <HAL_I2C_ErrorCallback+0x44>)
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000818 <HAL_I2C_ErrorCallback+0x44>)
 80007ec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f0:	6113      	str	r3, [r2, #16]
        __HAL_RCC_I2C1_RELEASE_RESET();
 80007f2:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <HAL_I2C_ErrorCallback+0x44>)
 80007f4:	691b      	ldr	r3, [r3, #16]
 80007f6:	4a08      	ldr	r2, [pc, #32]	@ (8000818 <HAL_I2C_ErrorCallback+0x44>)
 80007f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80007fc:	6113      	str	r3, [r2, #16]

        MX_I2C1_Init();  // Re-init peripheral
 80007fe:	f7ff ff9d 	bl	800073c <MX_I2C1_Init>
        HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 8000802:	2202      	movs	r2, #2
 8000804:	4905      	ldr	r1, [pc, #20]	@ (800081c <HAL_I2C_ErrorCallback+0x48>)
 8000806:	4806      	ldr	r0, [pc, #24]	@ (8000820 <HAL_I2C_ErrorCallback+0x4c>)
 8000808:	f001 fc3c 	bl	8002084 <HAL_I2C_Slave_Receive_IT>
    }
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40005400 	.word	0x40005400
 8000818:	40021000 	.word	0x40021000
 800081c:	2000007c 	.word	0x2000007c
 8000820:	20000080 	.word	0x20000080

08000824 <Motor_control_pins_init>:
#define PB0_REVERSE 0
#define PB1_NEUTRAL 1
#define PB3_DRIVE 3
#define PB5_SPORT 5

void Motor_control_pins_init(){
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000828:	4b10      	ldr	r3, [pc, #64]	@ (800086c <Motor_control_pins_init+0x48>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a0f      	ldr	r2, [pc, #60]	@ (800086c <Motor_control_pins_init+0x48>)
 800082e:	f043 0308 	orr.w	r3, r3, #8
 8000832:	6193      	str	r3, [r2, #24]
    GPIOB->CRL&=~((0xFF<<0)|(0XFF<<4)|(0XFF<<12)|(0xff<<20));
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <Motor_control_pins_init+0x4c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0d      	ldr	r2, [pc, #52]	@ (8000870 <Motor_control_pins_init+0x4c>)
 800083a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800083e:	6013      	str	r3, [r2, #0]
    GPIOB->CRL|=((0x3<<0)|(0X3<<4)|(0X3<<12)|(0x3<<20));
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <Motor_control_pins_init+0x4c>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	490a      	ldr	r1, [pc, #40]	@ (8000870 <Motor_control_pins_init+0x4c>)
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <Motor_control_pins_init+0x50>)
 8000848:	4313      	orrs	r3, r2
 800084a:	600b      	str	r3, [r1, #0]
    GPIOB->ODR&=~((1<<PB0_REVERSE)|(1<<PB1_NEUTRAL)|(1<<PB3_DRIVE)|(1<<PB5_SPORT));
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <Motor_control_pins_init+0x4c>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	4a07      	ldr	r2, [pc, #28]	@ (8000870 <Motor_control_pins_init+0x4c>)
 8000852:	f023 032b 	bic.w	r3, r3, #43	@ 0x2b
 8000856:	60d3      	str	r3, [r2, #12]
    GPIOB->ODR|=((1<<PB1_NEUTRAL));
 8000858:	4b05      	ldr	r3, [pc, #20]	@ (8000870 <Motor_control_pins_init+0x4c>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	4a04      	ldr	r2, [pc, #16]	@ (8000870 <Motor_control_pins_init+0x4c>)
 800085e:	f043 0302 	orr.w	r3, r3, #2
 8000862:	60d3      	str	r3, [r2, #12]
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	40021000 	.word	0x40021000
 8000870:	40010c00 	.word	0x40010c00
 8000874:	00303033 	.word	0x00303033

08000878 <set_baudrate>:
    uint32_t tseg2;
    uint32_t sjw;
    float sample_point;  // in percentage
} CAN_BitTiming;

STATUS set_baudrate(uint32_t Baud_Rate){
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	f6ad 0d04 	subw	sp, sp, #2052	@ 0x804
 800087e:	af00      	add	r7, sp, #0
 8000880:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000884:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 8000888:	6018      	str	r0, [r3, #0]
    CAN_BitTiming table[100]; // store results
    int count = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
    uint32_t clk = get_APB1_freq();      // 36 MHz
 8000890:	f000 fd0e 	bl	80012b0 <get_APB1_freq>
 8000894:	f8c7 07e8 	str.w	r0, [r7, #2024]	@ 0x7e8
    uint32_t baud = Baud_Rate;      // 500 kbps
 8000898:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 800089c:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f8c7 37e4 	str.w	r3, [r7, #2020]	@ 0x7e4
    if (clk == 0 || Baud_Rate == 0) {
 80008a6:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	@ 0x7e8
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d006      	beq.n	80008bc <set_baudrate+0x44>
 80008ae:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80008b2:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <set_baudrate+0x48>
        return RY_NOT_OK;
 80008bc:	2300      	movs	r3, #0
 80008be:	e0f7      	b.n	8000ab0 <set_baudrate+0x238>
    }
    uint32_t target = clk / baud; // should be 16
 80008c0:	f8d7 27e8 	ldr.w	r2, [r7, #2024]	@ 0x7e8
 80008c4:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	@ 0x7e4
 80008c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008cc:	f8c7 37e0 	str.w	r3, [r7, #2016]	@ 0x7e0
    for (uint32_t prescaler = 1; prescaler <= 1024; prescaler++) {
 80008d0:	2301      	movs	r3, #1
 80008d2:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 80008d6:	e0c0      	b.n	8000a5a <set_baudrate+0x1e2>
        for (uint32_t tseg1 = 1; tseg1 <= 16; tseg1++) {
 80008d8:	2301      	movs	r3, #1
 80008da:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 80008de:	e0b2      	b.n	8000a46 <set_baudrate+0x1ce>
            for (uint32_t tseg2 = 1; tseg2 <= 8; tseg2++) {
 80008e0:	2301      	movs	r3, #1
 80008e2:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 80008e6:	e0a4      	b.n	8000a32 <set_baudrate+0x1ba>
            	uint32_t tq = 1 + tseg1 + tseg2;
 80008e8:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 80008ec:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 80008f0:	4413      	add	r3, r2
 80008f2:	3301      	adds	r3, #1
 80008f4:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
                if (prescaler * tq == target) {
 80008f8:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 80008fc:	f8d7 27dc 	ldr.w	r2, [r7, #2012]	@ 0x7dc
 8000900:	fb02 f303 	mul.w	r3, r2, r3
 8000904:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	@ 0x7e0
 8000908:	429a      	cmp	r2, r3
 800090a:	f040 808d 	bne.w	8000a28 <set_baudrate+0x1b0>
                    float sp = ((1.0f + tseg1) / tq) * 100.0f;
 800090e:	f8d7 07f4 	ldr.w	r0, [r7, #2036]	@ 0x7f4
 8000912:	f7ff fcd1 	bl	80002b8 <__aeabi_ui2f>
 8000916:	4603      	mov	r3, r0
 8000918:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fc1b 	bl	8000158 <__addsf3>
 8000922:	4603      	mov	r3, r0
 8000924:	461c      	mov	r4, r3
 8000926:	f8d7 07dc 	ldr.w	r0, [r7, #2012]	@ 0x7dc
 800092a:	f7ff fcc5 	bl	80002b8 <__aeabi_ui2f>
 800092e:	4603      	mov	r3, r0
 8000930:	4619      	mov	r1, r3
 8000932:	4620      	mov	r0, r4
 8000934:	f7ff fdcc 	bl	80004d0 <__aeabi_fdiv>
 8000938:	4603      	mov	r3, r0
 800093a:	4960      	ldr	r1, [pc, #384]	@ (8000abc <set_baudrate+0x244>)
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fd13 	bl	8000368 <__aeabi_fmul>
 8000942:	4603      	mov	r3, r0
 8000944:	f8c7 37d8 	str.w	r3, [r7, #2008]	@ 0x7d8
                    if (sp >= 70.0f && sp <= 80.0f) {
 8000948:	495d      	ldr	r1, [pc, #372]	@ (8000ac0 <set_baudrate+0x248>)
 800094a:	f8d7 07d8 	ldr.w	r0, [r7, #2008]	@ 0x7d8
 800094e:	f7ff febd 	bl	80006cc <__aeabi_fcmpge>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d067      	beq.n	8000a28 <set_baudrate+0x1b0>
 8000958:	495a      	ldr	r1, [pc, #360]	@ (8000ac4 <set_baudrate+0x24c>)
 800095a:	f8d7 07d8 	ldr.w	r0, [r7, #2008]	@ 0x7d8
 800095e:	f7ff feab 	bl	80006b8 <__aeabi_fcmple>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d05f      	beq.n	8000a28 <set_baudrate+0x1b0>
                        for (int sjw = 1; sjw <= tseg2; sjw++) {
 8000968:	2301      	movs	r3, #1
 800096a:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 800096e:	e055      	b.n	8000a1c <set_baudrate+0x1a4>
                            table[count].prescaler = prescaler;
 8000970:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 8000974:	b298      	uxth	r0, r3
 8000976:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 800097a:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 800097e:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8000982:	4613      	mov	r3, r2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	440b      	add	r3, r1
 800098c:	4602      	mov	r2, r0
 800098e:	801a      	strh	r2, [r3, #0]
                            table[count].tseg1 = tseg1;
 8000990:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000994:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 8000998:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 800099c:	4613      	mov	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	4413      	add	r3, r2
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	440b      	add	r3, r1
 80009a6:	3304      	adds	r3, #4
 80009a8:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 80009ac:	601a      	str	r2, [r3, #0]
                            table[count].tseg2 = tseg2;
 80009ae:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80009b2:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 80009b6:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 80009ba:	4613      	mov	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	440b      	add	r3, r1
 80009c4:	3308      	adds	r3, #8
 80009c6:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	@ 0x7f0
 80009ca:	601a      	str	r2, [r3, #0]
                            table[count].sjw = sjw;
 80009cc:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	@ 0x7ec
 80009d0:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80009d4:	f5a3 60ff 	sub.w	r0, r3, #2040	@ 0x7f8
 80009d8:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 80009dc:	4613      	mov	r3, r2
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	4413      	add	r3, r2
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	4403      	add	r3, r0
 80009e6:	330c      	adds	r3, #12
 80009e8:	6019      	str	r1, [r3, #0]
                            table[count].sample_point = sp;
 80009ea:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80009ee:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 80009f2:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 80009f6:	4613      	mov	r3, r2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	4413      	add	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	440b      	add	r3, r1
 8000a00:	3310      	adds	r3, #16
 8000a02:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	@ 0x7d8
 8000a06:	601a      	str	r2, [r3, #0]
                            count++;
 8000a08:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	@ 0x7fc
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
                        for (int sjw = 1; sjw <= tseg2; sjw++) {
 8000a12:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8000a16:	3301      	adds	r3, #1
 8000a18:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 8000a1c:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8000a20:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	@ 0x7f0
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d2a3      	bcs.n	8000970 <set_baudrate+0xf8>
            for (uint32_t tseg2 = 1; tseg2 <= 8; tseg2++) {
 8000a28:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 8000a32:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 8000a36:	2b08      	cmp	r3, #8
 8000a38:	f67f af56 	bls.w	80008e8 <set_baudrate+0x70>
        for (uint32_t tseg1 = 1; tseg1 <= 16; tseg1++) {
 8000a3c:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 8000a40:	3301      	adds	r3, #1
 8000a42:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 8000a46:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 8000a4a:	2b10      	cmp	r3, #16
 8000a4c:	f67f af48 	bls.w	80008e0 <set_baudrate+0x68>
    for (uint32_t prescaler = 1; prescaler <= 1024; prescaler++) {
 8000a50:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 8000a54:	3301      	adds	r3, #1
 8000a56:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 8000a5a:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 8000a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a62:	f67f af39 	bls.w	80008d8 <set_baudrate+0x60>
                    }
                }
            }
        }
    }
    CAN1->BTR|=((table[0].prescaler-1)<<0)|((table[0].sjw-1)<<24)|((table[0].tseg1-1)<<16)|((table[0].tseg2-1)<<20);
 8000a66:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <set_baudrate+0x250>)
 8000a68:	69da      	ldr	r2, [r3, #28]
 8000a6a:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000a6e:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	4619      	mov	r1, r3
 8000a78:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000a7c:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	061b      	lsls	r3, r3, #24
 8000a86:	4319      	orrs	r1, r3
 8000a88:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000a8c:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	041b      	lsls	r3, r3, #16
 8000a96:	4319      	orrs	r1, r3
 8000a98:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000a9c:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	051b      	lsls	r3, r3, #20
 8000aa6:	430b      	orrs	r3, r1
 8000aa8:	4907      	ldr	r1, [pc, #28]	@ (8000ac8 <set_baudrate+0x250>)
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	61cb      	str	r3, [r1, #28]
    return RY_OK;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f607 0704 	addw	r7, r7, #2052	@ 0x804
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd90      	pop	{r4, r7, pc}
 8000aba:	bf00      	nop
 8000abc:	42c80000 	.word	0x42c80000
 8000ac0:	428c0000 	.word	0x428c0000
 8000ac4:	42a00000 	.word	0x42a00000
 8000ac8:	40006400 	.word	0x40006400

08000acc <can_init>:
STATUS can_init(uint32_t Baud_Rate){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN;
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b84 <can_init+0xb8>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8000b84 <can_init+0xb8>)
 8000ada:	f043 0309 	orr.w	r3, r3, #9
 8000ade:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 8000ae0:	4b28      	ldr	r3, [pc, #160]	@ (8000b84 <can_init+0xb8>)
 8000ae2:	69db      	ldr	r3, [r3, #28]
 8000ae4:	4a27      	ldr	r2, [pc, #156]	@ (8000b84 <can_init+0xb8>)
 8000ae6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aea:	61d3      	str	r3, [r2, #28]
    AFIO->MAPR |= AFIO_MAPR_CAN_REMAP_REMAP2;
 8000aec:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <can_init+0xbc>)
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	4a25      	ldr	r2, [pc, #148]	@ (8000b88 <can_init+0xbc>)
 8000af2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af6:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~(0xF << 0);
 8000af8:	4b24      	ldr	r3, [pc, #144]	@ (8000b8c <can_init+0xc0>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	4a23      	ldr	r2, [pc, #140]	@ (8000b8c <can_init+0xc0>)
 8000afe:	f023 030f 	bic.w	r3, r3, #15
 8000b02:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |=  (0x4 << 0);
 8000b04:	4b21      	ldr	r3, [pc, #132]	@ (8000b8c <can_init+0xc0>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4a20      	ldr	r2, [pc, #128]	@ (8000b8c <can_init+0xc0>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~(0xF << 4);
 8000b10:	4b1e      	ldr	r3, [pc, #120]	@ (8000b8c <can_init+0xc0>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	4a1d      	ldr	r2, [pc, #116]	@ (8000b8c <can_init+0xc0>)
 8000b16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000b1a:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |=  (0xB << 4);
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <can_init+0xc0>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	4a1a      	ldr	r2, [pc, #104]	@ (8000b8c <can_init+0xc0>)
 8000b22:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000b26:	6053      	str	r3, [r2, #4]
	CAN1->MCR &= ~CAN_MCR_AWUM_Msk;
 8000b28:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <can_init+0xc4>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a18      	ldr	r2, [pc, #96]	@ (8000b90 <can_init+0xc4>)
 8000b2e:	f023 0320 	bic.w	r3, r3, #32
 8000b32:	6013      	str	r3, [r2, #0]
	CAN1->MCR &= ~CAN_MCR_SLEEP_Msk;
 8000b34:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <can_init+0xc4>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a15      	ldr	r2, [pc, #84]	@ (8000b90 <can_init+0xc4>)
 8000b3a:	f023 0302 	bic.w	r3, r3, #2
 8000b3e:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_MCR_INRQ_Msk;
 8000b40:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <can_init+0xc4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a12      	ldr	r2, [pc, #72]	@ (8000b90 <can_init+0xc4>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6013      	str	r3, [r2, #0]
	while (!(CAN1->MSR & CAN_MSR_INAK_Msk));
 8000b4c:	bf00      	nop
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <can_init+0xc4>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0f9      	beq.n	8000b4e <can_init+0x82>
	if(set_baudrate(Baud_Rate)==RY_NOT_OK)
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff fe8c 	bl	8000878 <set_baudrate>
	{
		RY_NOT_OK;
	}
	CAN1->MCR &= ~(1<<0);  // CLEAR INQR BIT TO LEAVE INTILAIZE MODE=
 8000b60:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <can_init+0xc4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <can_init+0xc4>)
 8000b66:	f023 0301 	bic.w	r3, r3, #1
 8000b6a:	6013      	str	r3, [r2, #0]
	while (CAN1->MSR & CAN_MSR_INAK_Msk);  // Wait for Normal Mode
 8000b6c:	bf00      	nop
 8000b6e:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <can_init+0xc4>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1f9      	bne.n	8000b6e <can_init+0xa2>
	return RY_OK;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40021000 	.word	0x40021000
 8000b88:	40010000 	.word	0x40010000
 8000b8c:	40010c00 	.word	0x40010c00
 8000b90:	40006400 	.word	0x40006400

08000b94 <Condensor_Relay_Pins_Init>:

#include"extern_file_declarations.h"

#define PB15_CONDENSOR   15

void Condensor_Relay_Pins_Init(){
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <Condensor_Relay_Pins_Init+0x3c>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd0 <Condensor_Relay_Pins_Init+0x3c>)
 8000b9e:	f043 0308 	orr.w	r3, r3, #8
 8000ba2:	6193      	str	r3, [r2, #24]
    GPIOB->CRH&=~((0xFF<<28));
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <Condensor_Relay_Pins_Init+0x40>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <Condensor_Relay_Pins_Init+0x40>)
 8000baa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000bae:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=((0x3<<28));
 8000bb0:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <Condensor_Relay_Pins_Init+0x40>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	@ (8000bd4 <Condensor_Relay_Pins_Init+0x40>)
 8000bb6:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000bba:	6053      	str	r3, [r2, #4]
    GPIOB->ODR|=((1<<PB15_CONDENSOR));
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <Condensor_Relay_Pins_Init+0x40>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	4a04      	ldr	r2, [pc, #16]	@ (8000bd4 <Condensor_Relay_Pins_Init+0x40>)
 8000bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010c00 	.word	0x40010c00

08000bd8 <clock_print_status>:
#include"I2C.h"
#include"Motor_Control_uint_pins.h"
#include"process.h"
CAN_FRAME frame;
I2C_HandleTypeDef hi2c1;
void clock_print_status(){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    uart_printf("\r\n=====================================\r\n");
 8000bdc:	4817      	ldr	r0, [pc, #92]	@ (8000c3c <clock_print_status+0x64>)
 8000bde:	f000 fd4a 	bl	8001676 <uart_printf>
    uart_printf("EVA DRIVE_MODE_SELECTOR & HVAC \r\n");
 8000be2:	4817      	ldr	r0, [pc, #92]	@ (8000c40 <clock_print_status+0x68>)
 8000be4:	f000 fd47 	bl	8001676 <uart_printf>
    uart_printf("=====================================\r\n");
 8000be8:	4816      	ldr	r0, [pc, #88]	@ (8000c44 <clock_print_status+0x6c>)
 8000bea:	f000 fd44 	bl	8001676 <uart_printf>
    uart_printf("System Clock: %lu MHz\r\n", get_SYSCLK_freq() / 1000000);
 8000bee:	f000 fae1 	bl	80011b4 <get_SYSCLK_freq>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a14      	ldr	r2, [pc, #80]	@ (8000c48 <clock_print_status+0x70>)
 8000bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfa:	0c9b      	lsrs	r3, r3, #18
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4813      	ldr	r0, [pc, #76]	@ (8000c4c <clock_print_status+0x74>)
 8000c00:	f000 fd39 	bl	8001676 <uart_printf>
    uart_printf("APB1 Clock: %lu MHz\r\n", get_APB1_freq() / 1000000);
 8000c04:	f000 fb54 	bl	80012b0 <get_APB1_freq>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c48 <clock_print_status+0x70>)
 8000c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c10:	0c9b      	lsrs	r3, r3, #18
 8000c12:	4619      	mov	r1, r3
 8000c14:	480e      	ldr	r0, [pc, #56]	@ (8000c50 <clock_print_status+0x78>)
 8000c16:	f000 fd2e 	bl	8001676 <uart_printf>
    uart_printf("APB2 Clock: %lu MHz\r\n", get_APB2_freq() / 1000000);
 8000c1a:	f000 fb6f 	bl	80012fc <get_APB2_freq>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4a09      	ldr	r2, [pc, #36]	@ (8000c48 <clock_print_status+0x70>)
 8000c22:	fba2 2303 	umull	r2, r3, r2, r3
 8000c26:	0c9b      	lsrs	r3, r3, #18
 8000c28:	4619      	mov	r1, r3
 8000c2a:	480a      	ldr	r0, [pc, #40]	@ (8000c54 <clock_print_status+0x7c>)
 8000c2c:	f000 fd23 	bl	8001676 <uart_printf>
    uart_printf("=====================================\r\n");
 8000c30:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <clock_print_status+0x6c>)
 8000c32:	f000 fd20 	bl	8001676 <uart_printf>
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08004508 	.word	0x08004508
 8000c40:	08004534 	.word	0x08004534
 8000c44:	08004558 	.word	0x08004558
 8000c48:	431bde83 	.word	0x431bde83
 8000c4c:	08004580 	.word	0x08004580
 8000c50:	08004598 	.word	0x08004598
 8000c54:	080045b0 	.word	0x080045b0

08000c58 <main>:
int main(){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af02      	add	r7, sp, #8
	HAL_Init();
 8000c5e:	f000 fd49 	bl	80016f4 <HAL_Init>
	system_clock_init_to_72MHZ();
 8000c62:	f000 fa51 	bl	8001108 <system_clock_init_to_72MHZ>
	if(uart_init(115200)==RY_NOT_OK){
 8000c66:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8000c6a:	f000 fc7b 	bl	8001564 <uart_init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d101      	bne.n	8000c78 <main+0x20>
	  Error_Handler();
 8000c74:	f000 f898 	bl	8000da8 <Error_Handler>
	}
	clock_print_status();
 8000c78:	f7ff ffae 	bl	8000bd8 <clock_print_status>
    uart_printf("UART1 initialization is ok ,baud_baudrate in kbps %d:\r\n", 115200);
 8000c7c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000c80:	483c      	ldr	r0, [pc, #240]	@ (8000d74 <main+0x11c>)
 8000c82:	f000 fcf8 	bl	8001676 <uart_printf>
    uart_printf("=========================================================\r\n");
 8000c86:	483c      	ldr	r0, [pc, #240]	@ (8000d78 <main+0x120>)
 8000c88:	f000 fcf5 	bl	8001676 <uart_printf>
    systick_init(1000);
 8000c8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c90:	f000 f9ea 	bl	8001068 <systick_init>
    uart_printf("systick clock initialized for milli second ");
 8000c94:	4839      	ldr	r0, [pc, #228]	@ (8000d7c <main+0x124>)
 8000c96:	f000 fcee 	bl	8001676 <uart_printf>
    uart_printf("=========================================================\r\n");
 8000c9a:	4837      	ldr	r0, [pc, #220]	@ (8000d78 <main+0x120>)
 8000c9c:	f000 fceb 	bl	8001676 <uart_printf>
	if(can_init(500000)==RY_NOT_OK){
 8000ca0:	4837      	ldr	r0, [pc, #220]	@ (8000d80 <main+0x128>)
 8000ca2:	f7ff ff13 	bl	8000acc <can_init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d107      	bne.n	8000cbc <main+0x64>
      uart_printf("CAN initialization is NOT oK\r\n");
 8000cac:	4835      	ldr	r0, [pc, #212]	@ (8000d84 <main+0x12c>)
 8000cae:	f000 fce2 	bl	8001676 <uart_printf>
	  uart_printf("======================================================\r\n");
 8000cb2:	4835      	ldr	r0, [pc, #212]	@ (8000d88 <main+0x130>)
 8000cb4:	f000 fcdf 	bl	8001676 <uart_printf>
	  Error_Handler();
 8000cb8:	f000 f876 	bl	8000da8 <Error_Handler>
	}
    uart_printf("CAN initialization is ok ,baud_baudrate in %d kbps:\r\n", 500);
 8000cbc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000cc0:	4832      	ldr	r0, [pc, #200]	@ (8000d8c <main+0x134>)
 8000cc2:	f000 fcd8 	bl	8001676 <uart_printf>
    uart_printf("=========================================================\r\n");
 8000cc6:	482c      	ldr	r0, [pc, #176]	@ (8000d78 <main+0x120>)
 8000cc8:	f000 fcd5 	bl	8001676 <uart_printf>
    Init_tasks();
 8000ccc:	f000 fb42 	bl	8001354 <Init_tasks>
    uart_printf("Task schedular is initialized\r\n");
 8000cd0:	482f      	ldr	r0, [pc, #188]	@ (8000d90 <main+0x138>)
 8000cd2:	f000 fcd0 	bl	8001676 <uart_printf>
    uart_printf("=========================================================\r\n");
 8000cd6:	4828      	ldr	r0, [pc, #160]	@ (8000d78 <main+0x120>)
 8000cd8:	f000 fccd 	bl	8001676 <uart_printf>
    Blower_Relay_Pins_Init();
 8000cdc:	f7ff fd0a 	bl	80006f4 <Blower_Relay_Pins_Init>
    uart_printf("Blower pins are initialized PIN12=%d PIN13=%d PIN14=%d\r\n",(GPIOB->IDR>>12&1),(GPIOB->IDR>>13&1),(GPIOB->IDR>>14&1));
 8000ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d94 <main+0x13c>)
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	0b1b      	lsrs	r3, r3, #12
 8000ce6:	f003 0101 	and.w	r1, r3, #1
 8000cea:	4b2a      	ldr	r3, [pc, #168]	@ (8000d94 <main+0x13c>)
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	0b5b      	lsrs	r3, r3, #13
 8000cf0:	f003 0201 	and.w	r2, r3, #1
 8000cf4:	4b27      	ldr	r3, [pc, #156]	@ (8000d94 <main+0x13c>)
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	0b9b      	lsrs	r3, r3, #14
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	4826      	ldr	r0, [pc, #152]	@ (8000d98 <main+0x140>)
 8000d00:	f000 fcb9 	bl	8001676 <uart_printf>
    uart_printf("=========================================================\r\n");
 8000d04:	481c      	ldr	r0, [pc, #112]	@ (8000d78 <main+0x120>)
 8000d06:	f000 fcb6 	bl	8001676 <uart_printf>
    Condensor_Relay_Pins_Init();
 8000d0a:	f7ff ff43 	bl	8000b94 <Condensor_Relay_Pins_Init>
    uart_printf("Condensor pins are initialized PIN15=%d \r\n",(GPIOB->IDR>>15&1));
 8000d0e:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <main+0x13c>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	0bdb      	lsrs	r3, r3, #15
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4820      	ldr	r0, [pc, #128]	@ (8000d9c <main+0x144>)
 8000d1c:	f000 fcab 	bl	8001676 <uart_printf>
    uart_printf("=========================================================\r\n");
 8000d20:	4815      	ldr	r0, [pc, #84]	@ (8000d78 <main+0x120>)
 8000d22:	f000 fca8 	bl	8001676 <uart_printf>
    Motor_control_pins_init();
 8000d26:	f7ff fd7d 	bl	8000824 <Motor_control_pins_init>
    uart_printf("Motor_control pins are initialized PIN0=%d PIN1=%d  PIN3=%d PIN5=%d\r\n",(GPIOB->IDR>>0&1),(GPIOB->IDR>>1&1),(GPIOB->IDR>>3&1),(GPIOB->IDR>>5&1));
 8000d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <main+0x13c>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f003 0101 	and.w	r1, r3, #1
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <main+0x13c>)
 8000d34:	689b      	ldr	r3, [r3, #8]
 8000d36:	085b      	lsrs	r3, r3, #1
 8000d38:	f003 0201 	and.w	r2, r3, #1
 8000d3c:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <main+0x13c>)
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	08db      	lsrs	r3, r3, #3
 8000d42:	f003 0001 	and.w	r0, r3, #1
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <main+0x13c>)
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	095b      	lsrs	r3, r3, #5
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	9300      	str	r3, [sp, #0]
 8000d52:	4603      	mov	r3, r0
 8000d54:	4812      	ldr	r0, [pc, #72]	@ (8000da0 <main+0x148>)
 8000d56:	f000 fc8e 	bl	8001676 <uart_printf>
    uart_printf("=========================================================\r\n");
 8000d5a:	4807      	ldr	r0, [pc, #28]	@ (8000d78 <main+0x120>)
 8000d5c:	f000 fc8b 	bl	8001676 <uart_printf>
    MX_I2C1_Init();
 8000d60:	f7ff fcec 	bl	800073c <MX_I2C1_Init>
    Register_task(50,Drive_mode_state);
 8000d64:	490f      	ldr	r1, [pc, #60]	@ (8000da4 <main+0x14c>)
 8000d66:	2032      	movs	r0, #50	@ 0x32
 8000d68:	f000 fb2a 	bl	80013c0 <Register_task>
    while(1){
    	Run_all_tasks();
 8000d6c:	f000 fb76 	bl	800145c <Run_all_tasks>
 8000d70:	e7fc      	b.n	8000d6c <main+0x114>
 8000d72:	bf00      	nop
 8000d74:	080045c8 	.word	0x080045c8
 8000d78:	08004600 	.word	0x08004600
 8000d7c:	0800463c 	.word	0x0800463c
 8000d80:	0007a120 	.word	0x0007a120
 8000d84:	08004668 	.word	0x08004668
 8000d88:	08004688 	.word	0x08004688
 8000d8c:	080046c4 	.word	0x080046c4
 8000d90:	080046fc 	.word	0x080046fc
 8000d94:	40010c00 	.word	0x40010c00
 8000d98:	0800471c 	.word	0x0800471c
 8000d9c:	08004758 	.word	0x08004758
 8000da0:	08004784 	.word	0x08004784
 8000da4:	08000e0d 	.word	0x08000e0d

08000da8 <Error_Handler>:
    }
}


void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <crc8>:
      |                              |--[Verify CRC32]-------------->|  ~5 µs
      |                              |--[Parse Command]-------------->|  ~1 µs
      |                              |--[Update GPIO ODR]------------>|  Output changes
      |                              |                               |
 * */
uint8_t crc8(uint8_t data) {
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
    uint8_t crc = 0x00; // initial value
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < 8; i++) {
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73bb      	strb	r3, [r7, #14]
 8000dc6:	e018      	b.n	8000dfa <crc8+0x46>
        if ((crc ^ data) & 0x80)
 8000dc8:	7bfa      	ldrb	r2, [r7, #15]
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	4053      	eors	r3, r2
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	da08      	bge.n	8000de8 <crc8+0x34>
            crc = (crc << 1) ^ 0x07; // polynomial 0x07
 8000dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	f083 0307 	eor.w	r3, r3, #7
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	73fb      	strb	r3, [r7, #15]
 8000de6:	e002      	b.n	8000dee <crc8+0x3a>
        else
            crc <<= 1;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	73fb      	strb	r3, [r7, #15]
        data <<= 1;
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++) {
 8000df4:	7bbb      	ldrb	r3, [r7, #14]
 8000df6:	3301      	adds	r3, #1
 8000df8:	73bb      	strb	r3, [r7, #14]
 8000dfa:	7bbb      	ldrb	r3, [r7, #14]
 8000dfc:	2b07      	cmp	r3, #7
 8000dfe:	d9e3      	bls.n	8000dc8 <crc8+0x14>
    }
    return crc;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <Drive_mode_state>:
void Drive_mode_state(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	if(I2C_RX_FLAG){
 8000e10:	4b2e      	ldr	r3, [pc, #184]	@ (8000ecc <Drive_mode_state+0xc0>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d057      	beq.n	8000ec8 <Drive_mode_state+0xbc>
		I2C_RX_FLAG=0;
 8000e18:	4b2c      	ldr	r3, [pc, #176]	@ (8000ecc <Drive_mode_state+0xc0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
		if(crc8(data[0])==data[1]){
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed0 <Drive_mode_state+0xc4>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ffc6 	bl	8000db4 <crc8>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4b28      	ldr	r3, [pc, #160]	@ (8000ed0 <Drive_mode_state+0xc4>)
 8000e2e:	785b      	ldrb	r3, [r3, #1]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d149      	bne.n	8000ec8 <Drive_mode_state+0xbc>
	    GPIOB->ODR &= ~((1<<PB0_REVERSE) | (1<<PB1_NEUTRAL) | (1<<PB3_DRIVE) | (1<<PB5_SPORT));
 8000e34:	4b27      	ldr	r3, [pc, #156]	@ (8000ed4 <Drive_mode_state+0xc8>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	4a26      	ldr	r2, [pc, #152]	@ (8000ed4 <Drive_mode_state+0xc8>)
 8000e3a:	f023 032b 	bic.w	r3, r3, #43	@ 0x2b
 8000e3e:	60d3      	str	r3, [r2, #12]
	    switch (data[0]) {
 8000e40:	4b23      	ldr	r3, [pc, #140]	@ (8000ed0 <Drive_mode_state+0xc4>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	3b44      	subs	r3, #68	@ 0x44
 8000e46:	2b0f      	cmp	r3, #15
 8000e48:	d83e      	bhi.n	8000ec8 <Drive_mode_state+0xbc>
 8000e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000e50 <Drive_mode_state+0x44>)
 8000e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e50:	08000ead 	.word	0x08000ead
 8000e54:	08000ec9 	.word	0x08000ec9
 8000e58:	08000ec9 	.word	0x08000ec9
 8000e5c:	08000ec9 	.word	0x08000ec9
 8000e60:	08000ec9 	.word	0x08000ec9
 8000e64:	08000ec9 	.word	0x08000ec9
 8000e68:	08000ec9 	.word	0x08000ec9
 8000e6c:	08000ec9 	.word	0x08000ec9
 8000e70:	08000ec9 	.word	0x08000ec9
 8000e74:	08000ec9 	.word	0x08000ec9
 8000e78:	08000e9f 	.word	0x08000e9f
 8000e7c:	08000ec9 	.word	0x08000ec9
 8000e80:	08000ec9 	.word	0x08000ec9
 8000e84:	08000ec9 	.word	0x08000ec9
 8000e88:	08000e91 	.word	0x08000e91
 8000e8c:	08000ebb 	.word	0x08000ebb
	        case 'R': GPIOB->ODR |= (1<<PB0_REVERSE); break;
 8000e90:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <Drive_mode_state+0xc8>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	4a0f      	ldr	r2, [pc, #60]	@ (8000ed4 <Drive_mode_state+0xc8>)
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	60d3      	str	r3, [r2, #12]
 8000e9c:	e014      	b.n	8000ec8 <Drive_mode_state+0xbc>
	        case 'N': GPIOB->ODR |= (1<<PB1_NEUTRAL); break;
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed4 <Drive_mode_state+0xc8>)
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8000ed4 <Drive_mode_state+0xc8>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	60d3      	str	r3, [r2, #12]
 8000eaa:	e00d      	b.n	8000ec8 <Drive_mode_state+0xbc>
	        case 'D': GPIOB->ODR |= (1<<PB3_DRIVE);   break;
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <Drive_mode_state+0xc8>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	4a08      	ldr	r2, [pc, #32]	@ (8000ed4 <Drive_mode_state+0xc8>)
 8000eb2:	f043 0308 	orr.w	r3, r3, #8
 8000eb6:	60d3      	str	r3, [r2, #12]
 8000eb8:	e006      	b.n	8000ec8 <Drive_mode_state+0xbc>
	        case 'S': GPIOB->ODR |= (1<<PB5_SPORT);   break;
 8000eba:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <Drive_mode_state+0xc8>)
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <Drive_mode_state+0xc8>)
 8000ec0:	f043 0320 	orr.w	r3, r3, #32
 8000ec4:	60d3      	str	r3, [r2, #12]
 8000ec6:	bf00      	nop
	    }
		}
	}
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000078 	.word	0x20000078
 8000ed0:	2000007c 	.word	0x2000007c
 8000ed4:	40010c00 	.word	0x40010c00

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <HAL_MspInit+0x5c>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	4a14      	ldr	r2, [pc, #80]	@ (8000f34 <HAL_MspInit+0x5c>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6193      	str	r3, [r2, #24]
 8000eea:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <HAL_MspInit+0x5c>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <HAL_MspInit+0x5c>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a0e      	ldr	r2, [pc, #56]	@ (8000f34 <HAL_MspInit+0x5c>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <HAL_MspInit+0x5c>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <HAL_MspInit+0x60>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <HAL_MspInit+0x60>)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010000 	.word	0x40010000

08000f3c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a1d      	ldr	r2, [pc, #116]	@ (8000fcc <HAL_I2C_MspInit+0x90>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d133      	bne.n	8000fc4 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_I2C_MspInit+0x94>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd0 <HAL_I2C_MspInit+0x94>)
 8000f62:	f043 0308 	orr.w	r3, r3, #8
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <HAL_I2C_MspInit+0x94>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0308 	and.w	r3, r3, #8
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f74:	23c0      	movs	r3, #192	@ 0xc0
 8000f76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f78:	2312      	movs	r3, #18
 8000f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4619      	mov	r1, r3
 8000f86:	4813      	ldr	r0, [pc, #76]	@ (8000fd4 <HAL_I2C_MspInit+0x98>)
 8000f88:	f000 fda0 	bl	8001acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f8c:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <HAL_I2C_MspInit+0x94>)
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd0 <HAL_I2C_MspInit+0x94>)
 8000f92:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f96:	61d3      	str	r3, [r2, #28]
 8000f98:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <HAL_I2C_MspInit+0x94>)
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	201f      	movs	r0, #31
 8000faa:	f000 fcd2 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fae:	201f      	movs	r0, #31
 8000fb0:	f000 fceb 	bl	800198a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2020      	movs	r0, #32
 8000fba:	f000 fcca 	bl	8001952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000fbe:	2020      	movs	r0, #32
 8000fc0:	f000 fce3 	bl	800198a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000fc4:	bf00      	nop
 8000fc6:	3720      	adds	r7, #32
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40005400 	.word	0x40005400
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010c00 	.word	0x40010c00

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <NMI_Handler+0x4>

08000fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <MemManage_Handler+0x4>

08000ff0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <UsageFault_Handler+0x4>

08001000 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f000 fbaa 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  milli_sec_tick++;
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <SysTick_Handler+0x18>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	4a02      	ldr	r2, [pc, #8]	@ (800103c <SysTick_Handler+0x18>)
 8001034:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000d4 	.word	0x200000d4

08001040 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <I2C1_EV_IRQHandler+0x10>)
 8001046:	f001 f88b 	bl	8002160 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000080 	.word	0x20000080

08001054 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <I2C1_ER_IRQHandler+0x10>)
 800105a:	f001 f9f2 	bl	8002442 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000080 	.word	0x20000080

08001068 <systick_init>:
 *  Created on: Sep 3, 2025
 *      Author: MadaYaswanth
 */

#include"extern_file_declarations.h"
void systick_init(uint32_t ticks_per_sec){
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
    // Reload value = (SystemCoreClock / ticks_per_sec) - 1
    SysTick->LOAD = (get_SYSCLK_freq() / ticks_per_sec) - 1;
 8001070:	f000 f8a0 	bl	80011b4 <get_SYSCLK_freq>
 8001074:	4602      	mov	r2, r0
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	fbb2 f3f3 	udiv	r3, r2, r3
 800107c:	4a06      	ldr	r2, [pc, #24]	@ (8001098 <systick_init+0x30>)
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]

    SysTick->VAL = 0;             // Clear current value
 8001082:	4b05      	ldr	r3, [pc, #20]	@ (8001098 <systick_init+0x30>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = (1 << 2) |    // CLKSOURCE = processor clock (AHB)
 8001088:	4b03      	ldr	r3, [pc, #12]	@ (8001098 <systick_init+0x30>)
 800108a:	2207      	movs	r2, #7
 800108c:	601a      	str	r2, [r3, #0]
                    (1 << 1) |    // TICKINT = enable SysTick interrupt
                    (1 << 0);     // ENABLE counter
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	@ (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010cc:	f002 fd8a 	bl	8003be4 <__errno>
 80010d0:	4603      	mov	r3, r0
 80010d2:	220c      	movs	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	@ (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20005000 	.word	0x20005000
 80010fc:	00000400 	.word	0x00000400
 8001100:	200000d8 	.word	0x200000d8
 8001104:	200002c8 	.word	0x200002c8

08001108 <system_clock_init_to_72MHZ>:
 *
 *  Created on: Sep 2, 2025
 *      Author: MadaYaswanth
 */
#include"main.h"
STATUS system_clock_init_to_72MHZ(){
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
	    // 1. Enable HSE (external crystal, e.g., 8MHz)
	    RCC->CR |= RCC_CR_HSEON;       // Turn on HSE
 800110c:	4b27      	ldr	r3, [pc, #156]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a26      	ldr	r2, [pc, #152]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 8001112:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001116:	6013      	str	r3, [r2, #0]
	    while (!(RCC->CR & RCC_CR_HSERDY)); // Wait until HSE is ready
 8001118:	bf00      	nop
 800111a:	4b24      	ldr	r3, [pc, #144]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0f9      	beq.n	800111a <system_clock_init_to_72MHZ+0x12>
	    FLASH->ACR |= FLASH_ACR_LATENCY_2;  // 2 wait states
 8001126:	4b22      	ldr	r3, [pc, #136]	@ (80011b0 <system_clock_init_to_72MHZ+0xa8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a21      	ldr	r2, [pc, #132]	@ (80011b0 <system_clock_init_to_72MHZ+0xa8>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6013      	str	r3, [r2, #0]
	    FLASH->ACR |= FLASH_ACR_PRFTBE;     // Enable prefetch
 8001132:	4b1f      	ldr	r3, [pc, #124]	@ (80011b0 <system_clock_init_to_72MHZ+0xa8>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1e      	ldr	r2, [pc, #120]	@ (80011b0 <system_clock_init_to_72MHZ+0xa8>)
 8001138:	f043 0310 	orr.w	r3, r3, #16
 800113c:	6013      	str	r3, [r2, #0]
	    // 2. Configure PLL to multiply HSE to 72 MHz
	    //    PLLMUL = 9 (8MHz * 9 = 72MHz)
	    RCC->CFGR |= RCC_CFGR_PLLMULL9; // PLL multiplier = 9
 800113e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4a1a      	ldr	r2, [pc, #104]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 8001144:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 8001148:	6053      	str	r3, [r2, #4]
	    // 3. Select HSE as PLL source
	    RCC->CFGR |= RCC_CFGR_PLLSRC;   // PLL source = HSE
 800114a:	4b18      	ldr	r3, [pc, #96]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4a17      	ldr	r2, [pc, #92]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001154:	6053      	str	r3, [r2, #4]
	    // 4. Set APB1 Prescaler to 2 (PCLK1 = 72MHz / 2 = 36MHz)
	    RCC->CFGR |= RCC_CFGR_PPRE1_2;  // APB1 prescaler = 2 (36MHz)
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	4a14      	ldr	r2, [pc, #80]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 800115c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001160:	6053      	str	r3, [r2, #4]
	    // 5. Set APB2 Prescaler to 1 (PCLK2 = 72MHz, no division)
	    RCC->CFGR &= ~RCC_CFGR_PPRE2;   // APB2 prescaler = 1 (72MHz)
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	4a11      	ldr	r2, [pc, #68]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 8001168:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800116c:	6053      	str	r3, [r2, #4]
	    // 6. Enable PLL and wait until ready
	    RCC->CR |= RCC_CR_PLLON;
 800116e:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a0e      	ldr	r2, [pc, #56]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 8001174:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001178:	6013      	str	r3, [r2, #0]
	    while (!(RCC->CR & RCC_CR_PLLRDY));
 800117a:	bf00      	nop
 800117c:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f9      	beq.n	800117c <system_clock_init_to_72MHZ+0x74>
	     // 7. Switch SYSCLK to PLL
	    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4a07      	ldr	r2, [pc, #28]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 800118e:	f043 0302 	orr.w	r3, r3, #2
 8001192:	6053      	str	r3, [r2, #4]
	    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8001194:	bf00      	nop
 8001196:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <system_clock_init_to_72MHZ+0xa4>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d1f9      	bne.n	8001196 <system_clock_init_to_72MHZ+0x8e>
}
 80011a2:	bf00      	nop
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40022000 	.word	0x40022000

080011b4 <get_SYSCLK_freq>:
uint32_t get_SYSCLK_freq(void) {
 80011b4:	b480      	push	{r7}
 80011b6:	b087      	sub	sp, #28
 80011b8:	af00      	add	r7, sp, #0
    uint32_t sysclk_source, pllmul, prediv, pllclk;
    uint32_t HSE_Value = 8000000; // External crystal (adjust if different)
 80011ba:	4b26      	ldr	r3, [pc, #152]	@ (8001254 <get_SYSCLK_freq+0xa0>)
 80011bc:	60bb      	str	r3, [r7, #8]
    uint32_t HSI_Value = 8000000; // Internal RC
 80011be:	4b25      	ldr	r3, [pc, #148]	@ (8001254 <get_SYSCLK_freq+0xa0>)
 80011c0:	607b      	str	r3, [r7, #4]
    sysclk_source = (RCC->CFGR >> 2) & 0x3;  // SWS bits
 80011c2:	4b25      	ldr	r3, [pc, #148]	@ (8001258 <get_SYSCLK_freq+0xa4>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	603b      	str	r3, [r7, #0]
    switch (sysclk_source) {
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d00d      	beq.n	80011f0 <get_SYSCLK_freq+0x3c>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d835      	bhi.n	8001246 <get_SYSCLK_freq+0x92>
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <get_SYSCLK_freq+0x34>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d002      	beq.n	80011ec <get_SYSCLK_freq+0x38>
 80011e6:	e02e      	b.n	8001246 <get_SYSCLK_freq+0x92>
        case 0x00: // HSI
            return HSI_Value;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	e02d      	b.n	8001248 <get_SYSCLK_freq+0x94>
        case 0x01: // HSE
            return HSE_Value;
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	e02b      	b.n	8001248 <get_SYSCLK_freq+0x94>
        case 0x02: // PLL
            // PLL source
            if (RCC->CFGR & (1 << 16)) {
 80011f0:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <get_SYSCLK_freq+0xa4>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d010      	beq.n	800121e <get_SYSCLK_freq+0x6a>
                // HSE as PLL source
                if (RCC->CFGR & (1 << 17))
 80011fc:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <get_SYSCLK_freq+0xa4>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <get_SYSCLK_freq+0x5a>
                    prediv = 2;   // HSE/2
 8001208:	2302      	movs	r3, #2
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	e001      	b.n	8001212 <get_SYSCLK_freq+0x5e>
                else
                    prediv = 1;   // HSE
 800120e:	2301      	movs	r3, #1
 8001210:	613b      	str	r3, [r7, #16]
                pllclk = HSE_Value / prediv;
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	e002      	b.n	8001224 <get_SYSCLK_freq+0x70>
            } else {
                // HSI/2 as PLL source
                pllclk = HSI_Value / 2; // 4 MHz
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	085b      	lsrs	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
            }

            // PLL multiplier
            pllmul = ((RCC->CFGR >> 18) & 0xF) + 2;
 8001224:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <get_SYSCLK_freq+0xa4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	0c9b      	lsrs	r3, r3, #18
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3302      	adds	r3, #2
 8001230:	617b      	str	r3, [r7, #20]
            // Note: value 0b1101 = x13, 0b1110 = x14, 0b1111 = x16
            if (pllmul == 15) pllmul = 16; // adjust for 0b1111 special case
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	2b0f      	cmp	r3, #15
 8001236:	d101      	bne.n	800123c <get_SYSCLK_freq+0x88>
 8001238:	2310      	movs	r3, #16
 800123a:	617b      	str	r3, [r7, #20]

            return pllclk * pllmul;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	fb02 f303 	mul.w	r3, r2, r3
 8001244:	e000      	b.n	8001248 <get_SYSCLK_freq+0x94>
        default:
            return HSI_Value; // fallback
 8001246:	687b      	ldr	r3, [r7, #4]
    }
}
 8001248:	4618      	mov	r0, r3
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	007a1200 	.word	0x007a1200
 8001258:	40021000 	.word	0x40021000

0800125c <get_AHB_freq>:
uint32_t get_AHB_freq(void) {
 800125c:	b5b0      	push	{r4, r5, r7, lr}
 800125e:	b092      	sub	sp, #72	@ 0x48
 8001260:	af00      	add	r7, sp, #0
    uint32_t presc_table[16] = {1,1,1,1,1,1,1,1,2,4,8,16,64,128,256,512};
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <get_AHB_freq+0x4c>)
 8001264:	1d3c      	adds	r4, r7, #4
 8001266:	461d      	mov	r5, r3
 8001268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001274:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t hpre = (RCC->CFGR >> 4) & 0xF;
 800127c:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <get_AHB_freq+0x50>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	647b      	str	r3, [r7, #68]	@ 0x44
    return get_SYSCLK_freq() / presc_table[hpre];
 8001288:	f7ff ff94 	bl	80011b4 <get_SYSCLK_freq>
 800128c:	4602      	mov	r2, r0
 800128e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	3348      	adds	r3, #72	@ 0x48
 8001294:	443b      	add	r3, r7
 8001296:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3748      	adds	r7, #72	@ 0x48
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bdb0      	pop	{r4, r5, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	080047cc 	.word	0x080047cc
 80012ac:	40021000 	.word	0x40021000

080012b0 <get_APB1_freq>:

uint32_t get_APB1_freq(void) {
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af00      	add	r7, sp, #0
    uint32_t presc_table[8] = {1,1,1,1,2,4,8,16};
 80012b6:	4b0f      	ldr	r3, [pc, #60]	@ (80012f4 <get_APB1_freq+0x44>)
 80012b8:	1d3c      	adds	r4, r7, #4
 80012ba:	461d      	mov	r5, r3
 80012bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t ppre1 = (RCC->CFGR >> 8) & 0x7;
 80012c8:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <get_APB1_freq+0x48>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
    return get_AHB_freq() / presc_table[ppre1];
 80012d4:	f7ff ffc2 	bl	800125c <get_AHB_freq>
 80012d8:	4602      	mov	r2, r0
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	3328      	adds	r3, #40	@ 0x28
 80012e0:	443b      	add	r3, r7
 80012e2:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80012e6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3728      	adds	r7, #40	@ 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bdb0      	pop	{r4, r5, r7, pc}
 80012f2:	bf00      	nop
 80012f4:	0800480c 	.word	0x0800480c
 80012f8:	40021000 	.word	0x40021000

080012fc <get_APB2_freq>:

uint32_t get_APB2_freq(void) {
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b08a      	sub	sp, #40	@ 0x28
 8001300:	af00      	add	r7, sp, #0
    uint32_t presc_table[8] = {1,1,1,1,2,4,8,16};
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <get_APB2_freq+0x44>)
 8001304:	1d3c      	adds	r4, r7, #4
 8001306:	461d      	mov	r5, r3
 8001308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t ppre2 = (RCC->CFGR >> 11) & 0x7;
 8001314:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <get_APB2_freq+0x48>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	0adb      	lsrs	r3, r3, #11
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	627b      	str	r3, [r7, #36]	@ 0x24
    return get_AHB_freq() / presc_table[ppre2];
 8001320:	f7ff ff9c 	bl	800125c <get_AHB_freq>
 8001324:	4602      	mov	r2, r0
 8001326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	3328      	adds	r3, #40	@ 0x28
 800132c:	443b      	add	r3, r7
 800132e:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001336:	4618      	mov	r0, r3
 8001338:	3728      	adds	r7, #40	@ 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bdb0      	pop	{r4, r5, r7, pc}
 800133e:	bf00      	nop
 8001340:	0800480c 	.word	0x0800480c
 8001344:	40021000 	.word	0x40021000

08001348 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <Init_tasks>:

#include"extern_file_declarations.h"
#define max_tasks 10
task_timer timer[max_tasks];

void Init_tasks(void){
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
	for(int i=0; i<max_tasks; i++){
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	e024      	b.n	80013aa <Init_tasks+0x56>
		timer[i].period_ms = 0;
 8001360:	4a16      	ldr	r2, [pc, #88]	@ (80013bc <Init_tasks+0x68>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	4413      	add	r3, r2
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
		timer[i].last_time_ms = 0;
 800136c:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <Init_tasks+0x68>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	4413      	add	r3, r2
 8001374:	3304      	adds	r3, #4
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
		timer[i].enable = 0;
 800137a:	4a10      	ldr	r2, [pc, #64]	@ (80013bc <Init_tasks+0x68>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	011b      	lsls	r3, r3, #4
 8001380:	4413      	add	r3, r2
 8001382:	330c      	adds	r3, #12
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
		timer[i].task_fn = 0;
 8001388:	4a0c      	ldr	r2, [pc, #48]	@ (80013bc <Init_tasks+0x68>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	4413      	add	r3, r2
 8001390:	3308      	adds	r3, #8
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
		timer[i].one_time_execute = 0;
 8001396:	4a09      	ldr	r2, [pc, #36]	@ (80013bc <Init_tasks+0x68>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	4413      	add	r3, r2
 800139e:	330d      	adds	r3, #13
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<max_tasks; i++){
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3301      	adds	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b09      	cmp	r3, #9
 80013ae:	ddd7      	ble.n	8001360 <Init_tasks+0xc>
	}
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	200000dc 	.word	0x200000dc

080013c0 <Register_task>:

int Register_task(uint32_t period_ms, TaskFunction task_fn){
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
	for(int i=0; i<max_tasks; i++){
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	e037      	b.n	8001440 <Register_task+0x80>
		if(!timer[i].enable && timer[i].task_fn == 0){
 80013d0:	4a20      	ldr	r2, [pc, #128]	@ (8001454 <Register_task+0x94>)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	330c      	adds	r3, #12
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d12c      	bne.n	800143a <Register_task+0x7a>
 80013e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001454 <Register_task+0x94>)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	4413      	add	r3, r2
 80013e8:	3308      	adds	r3, #8
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d124      	bne.n	800143a <Register_task+0x7a>
			timer[i].enable =1;
 80013f0:	4a18      	ldr	r2, [pc, #96]	@ (8001454 <Register_task+0x94>)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	4413      	add	r3, r2
 80013f8:	330c      	adds	r3, #12
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
			timer[i].last_time_ms = milli_sec_tick;
 80013fe:	4b16      	ldr	r3, [pc, #88]	@ (8001458 <Register_task+0x98>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4914      	ldr	r1, [pc, #80]	@ (8001454 <Register_task+0x94>)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	440b      	add	r3, r1
 800140a:	3304      	adds	r3, #4
 800140c:	601a      	str	r2, [r3, #0]
			timer[i].one_time_execute = 0;
 800140e:	4a11      	ldr	r2, [pc, #68]	@ (8001454 <Register_task+0x94>)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	011b      	lsls	r3, r3, #4
 8001414:	4413      	add	r3, r2
 8001416:	330d      	adds	r3, #13
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
			timer[i].period_ms = period_ms;
 800141c:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <Register_task+0x94>)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	4413      	add	r3, r2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	601a      	str	r2, [r3, #0]
			timer[i].task_fn = task_fn;
 8001428:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <Register_task+0x94>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	011b      	lsls	r3, r3, #4
 800142e:	4413      	add	r3, r2
 8001430:	3308      	adds	r3, #8
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	601a      	str	r2, [r3, #0]
			return i;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	e007      	b.n	800144a <Register_task+0x8a>
	for(int i=0; i<max_tasks; i++){
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3301      	adds	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b09      	cmp	r3, #9
 8001444:	ddc4      	ble.n	80013d0 <Register_task+0x10>
		}
	}
	return -1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	200000dc 	.word	0x200000dc
 8001458:	200000d4 	.word	0x200000d4

0800145c <Run_all_tasks>:
		}
	}
	return -1;
}

void Run_all_tasks(void){
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
	for(int i=0; i<max_tasks; i++){
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	e03c      	b.n	80014e2 <Run_all_tasks+0x86>
		if(timer[i].enable && timer[i].task_fn != 0){
 8001468:	4a22      	ldr	r2, [pc, #136]	@ (80014f4 <Run_all_tasks+0x98>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	330c      	adds	r3, #12
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d031      	beq.n	80014dc <Run_all_tasks+0x80>
 8001478:	4a1e      	ldr	r2, [pc, #120]	@ (80014f4 <Run_all_tasks+0x98>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	011b      	lsls	r3, r3, #4
 800147e:	4413      	add	r3, r2
 8001480:	3308      	adds	r3, #8
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d029      	beq.n	80014dc <Run_all_tasks+0x80>
			if(milli_sec_tick - timer[i].last_time_ms > timer[i].period_ms){
 8001488:	4b1b      	ldr	r3, [pc, #108]	@ (80014f8 <Run_all_tasks+0x9c>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	4919      	ldr	r1, [pc, #100]	@ (80014f4 <Run_all_tasks+0x98>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	440b      	add	r3, r1
 8001494:	3304      	adds	r3, #4
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	1ad2      	subs	r2, r2, r3
 800149a:	4916      	ldr	r1, [pc, #88]	@ (80014f4 <Run_all_tasks+0x98>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	440b      	add	r3, r1
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d919      	bls.n	80014dc <Run_all_tasks+0x80>
				timer[i].last_time_ms = milli_sec_tick;
 80014a8:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <Run_all_tasks+0x9c>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4911      	ldr	r1, [pc, #68]	@ (80014f4 <Run_all_tasks+0x98>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	440b      	add	r3, r1
 80014b4:	3304      	adds	r3, #4
 80014b6:	601a      	str	r2, [r3, #0]
				timer[i].task_fn();
 80014b8:	4a0e      	ldr	r2, [pc, #56]	@ (80014f4 <Run_all_tasks+0x98>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	011b      	lsls	r3, r3, #4
 80014be:	4413      	add	r3, r2
 80014c0:	3308      	adds	r3, #8
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4798      	blx	r3
				if(timer[i].one_time_execute==1){
 80014c6:	4a0b      	ldr	r2, [pc, #44]	@ (80014f4 <Run_all_tasks+0x98>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	011b      	lsls	r3, r3, #4
 80014cc:	4413      	add	r3, r2
 80014ce:	330d      	adds	r3, #13
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d102      	bne.n	80014dc <Run_all_tasks+0x80>
					Remove_task(i);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f810 	bl	80014fc <Remove_task>
	for(int i=0; i<max_tasks; i++){
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b09      	cmp	r3, #9
 80014e6:	ddbf      	ble.n	8001468 <Run_all_tasks+0xc>
				}
			}
		}
	}
}
 80014e8:	bf00      	nop
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200000dc 	.word	0x200000dc
 80014f8:	200000d4 	.word	0x200000d4

080014fc <Remove_task>:

void Remove_task(int task_id){
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	if(task_id>=0 && task_id<max_tasks){
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db24      	blt.n	8001554 <Remove_task+0x58>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b09      	cmp	r3, #9
 800150e:	dc21      	bgt.n	8001554 <Remove_task+0x58>
		timer[task_id].enable = 0;
 8001510:	4a13      	ldr	r2, [pc, #76]	@ (8001560 <Remove_task+0x64>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	4413      	add	r3, r2
 8001518:	330c      	adds	r3, #12
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
		timer[task_id].last_time_ms = 0;
 800151e:	4a10      	ldr	r2, [pc, #64]	@ (8001560 <Remove_task+0x64>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	4413      	add	r3, r2
 8001526:	3304      	adds	r3, #4
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
		timer[task_id].one_time_execute = 0;
 800152c:	4a0c      	ldr	r2, [pc, #48]	@ (8001560 <Remove_task+0x64>)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	4413      	add	r3, r2
 8001534:	330d      	adds	r3, #13
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
		timer[task_id].period_ms = 0;
 800153a:	4a09      	ldr	r2, [pc, #36]	@ (8001560 <Remove_task+0x64>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	4413      	add	r3, r2
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
		timer[task_id].task_fn = 0;
 8001546:	4a06      	ldr	r2, [pc, #24]	@ (8001560 <Remove_task+0x64>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	011b      	lsls	r3, r3, #4
 800154c:	4413      	add	r3, r2
 800154e:	3308      	adds	r3, #8
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
	}
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	200000dc 	.word	0x200000dc

08001564 <uart_init>:
#include <stdio.h>
#include <stdarg.h>
#include"extern_file_declarations.h"
#define UART_PRINTF_BUFFER_SIZE 100
extern uint32_t get_APB1_freq(void) ;
STATUS uart_init(uint32_t Baud_Rate){
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	 // Enable clocks
	    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;   // GPIOA
 800156c:	4b25      	ldr	r3, [pc, #148]	@ (8001604 <uart_init+0xa0>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a24      	ldr	r2, [pc, #144]	@ (8001604 <uart_init+0xa0>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6193      	str	r3, [r2, #24]
	    RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1
 8001578:	4b22      	ldr	r3, [pc, #136]	@ (8001604 <uart_init+0xa0>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a21      	ldr	r2, [pc, #132]	@ (8001604 <uart_init+0xa0>)
 800157e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001582:	6193      	str	r3, [r2, #24]
	    // PA9 = TX (AF push-pull), PA10 = RX (input floating)
	    GPIOA->CRH &= ~((0xF << (4 * 1)) | (0xF << (4 * 2))); // clear CNF/MODE for PA9, PA10
 8001584:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <uart_init+0xa4>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	4a1f      	ldr	r2, [pc, #124]	@ (8001608 <uart_init+0xa4>)
 800158a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800158e:	6053      	str	r3, [r2, #4]
	    GPIOA->CRH |=  (0xB << (4 * 1)); // PA9 = AF PP, 50 MHz
 8001590:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <uart_init+0xa4>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4a1c      	ldr	r2, [pc, #112]	@ (8001608 <uart_init+0xa4>)
 8001596:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800159a:	6053      	str	r3, [r2, #4]
	    GPIOA->CRH |=  (0x4 << (4 * 2)); // PA10 = input floating
 800159c:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <uart_init+0xa4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	4a19      	ldr	r2, [pc, #100]	@ (8001608 <uart_init+0xa4>)
 80015a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a6:	6053      	str	r3, [r2, #4]
	    // Reset USART1
	    USART1->CR1 = 0;
 80015a8:	4b18      	ldr	r3, [pc, #96]	@ (800160c <uart_init+0xa8>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
	    // Calculate baudrate divisor
	    uint32_t pclk2 = get_APB2_freq();
 80015ae:	f7ff fea5 	bl	80012fc <get_APB2_freq>
 80015b2:	60f8      	str	r0, [r7, #12]
	    if (pclk2 == 0 || Baud_Rate == 0) {
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d002      	beq.n	80015c0 <uart_init+0x5c>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <uart_init+0x60>
	        return RY_NOT_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e01b      	b.n	80015fc <uart_init+0x98>
	    }
	    uint32_t usartdiv = (pclk2 + (Baud_Rate/2)) / Baud_Rate; // nearest
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	085a      	lsrs	r2, r3, #1
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	441a      	add	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	60bb      	str	r3, [r7, #8]
	    USART1->BRR = usartdiv;
 80015d4:	4a0d      	ldr	r2, [pc, #52]	@ (800160c <uart_init+0xa8>)
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	6093      	str	r3, [r2, #8]
	    // Enable USART, TX, RX
	    USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 80015da:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <uart_init+0xa8>)
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	4a0b      	ldr	r2, [pc, #44]	@ (800160c <uart_init+0xa8>)
 80015e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015e4:	f043 030c 	orr.w	r3, r3, #12
 80015e8:	60d3      	str	r3, [r2, #12]

	    // Verify configuration
	    if (!(USART1->CR1 & USART_CR1_UE)) {
 80015ea:	4b08      	ldr	r3, [pc, #32]	@ (800160c <uart_init+0xa8>)
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <uart_init+0x96>
	        return RY_NOT_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <uart_init+0x98>
	    }
	    return RY_OK;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40021000 	.word	0x40021000
 8001608:	40010800 	.word	0x40010800
 800160c:	40013800 	.word	0x40013800

08001610 <uart_print>:
 * @brief  Send a single byte over UART1
 * @param  data: byte to send
 * @return UART_Status_t
 */
void uart_print(uint8_t data)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
    // Wait until TXE (Transmit Data Register Empty)
    while (!(USART1->SR & USART_SR_TXE)) {  }
 800161a:	bf00      	nop
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <uart_print+0x38>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f9      	beq.n	800161c <uart_print+0xc>
    USART1->DR = data;
 8001628:	4a07      	ldr	r2, [pc, #28]	@ (8001648 <uart_print+0x38>)
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	6053      	str	r3, [r2, #4]
    while (!(USART1->SR & USART_SR_TC)) {  }
 800162e:	bf00      	nop
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <uart_print+0x38>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f9      	beq.n	8001630 <uart_print+0x20>
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	40013800 	.word	0x40013800

0800164c <uart_print_str>:
void uart_print_str(const char *str)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001654:	e006      	b.n	8001664 <uart_print_str+0x18>
    	uart_print(*str++);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ffd6 	bl	8001610 <uart_print>
    while (*str) {
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1f4      	bne.n	8001656 <uart_print_str+0xa>
    }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <uart_printf>:
void uart_printf(const char *format, ...)
{
 8001676:	b40f      	push	{r0, r1, r2, r3}
 8001678:	b580      	push	{r7, lr}
 800167a:	b09a      	sub	sp, #104	@ 0x68
 800167c:	af00      	add	r7, sp, #0
    char buffer[UART_PRINTF_BUFFER_SIZE];
    va_list args;
    va_start(args, format);
 800167e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001682:	603b      	str	r3, [r7, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001684:	1d38      	adds	r0, r7, #4
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800168a:	2164      	movs	r1, #100	@ 0x64
 800168c:	f002 fa9c 	bl	8003bc8 <vsniprintf>
    va_end(args);
    uart_print_str(buffer);
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ffda 	bl	800164c <uart_print_str>
}
 8001698:	bf00      	nop
 800169a:	3768      	adds	r7, #104	@ 0x68
 800169c:	46bd      	mov	sp, r7
 800169e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016a2:	b004      	add	sp, #16
 80016a4:	4770      	bx	lr
	...

080016a8 <Reset_Handler>:
 80016a8:	f7ff fe4e 	bl	8001348 <SystemInit>
 80016ac:	480b      	ldr	r0, [pc, #44]	@ (80016dc <LoopFillZerobss+0xe>)
 80016ae:	490c      	ldr	r1, [pc, #48]	@ (80016e0 <LoopFillZerobss+0x12>)
 80016b0:	4a0c      	ldr	r2, [pc, #48]	@ (80016e4 <LoopFillZerobss+0x16>)
 80016b2:	2300      	movs	r3, #0
 80016b4:	e002      	b.n	80016bc <LoopCopyDataInit>

080016b6 <CopyDataInit>:
 80016b6:	58d4      	ldr	r4, [r2, r3]
 80016b8:	50c4      	str	r4, [r0, r3]
 80016ba:	3304      	adds	r3, #4

080016bc <LoopCopyDataInit>:
 80016bc:	18c4      	adds	r4, r0, r3
 80016be:	428c      	cmp	r4, r1
 80016c0:	d3f9      	bcc.n	80016b6 <CopyDataInit>
 80016c2:	4a09      	ldr	r2, [pc, #36]	@ (80016e8 <LoopFillZerobss+0x1a>)
 80016c4:	4c09      	ldr	r4, [pc, #36]	@ (80016ec <LoopFillZerobss+0x1e>)
 80016c6:	2300      	movs	r3, #0
 80016c8:	e001      	b.n	80016ce <LoopFillZerobss>

080016ca <FillZerobss>:
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	3204      	adds	r2, #4

080016ce <LoopFillZerobss>:
 80016ce:	42a2      	cmp	r2, r4
 80016d0:	d3fb      	bcc.n	80016ca <FillZerobss>
 80016d2:	f002 fa8d 	bl	8003bf0 <__libc_init_array>
 80016d6:	f7ff fabf 	bl	8000c58 <main>
 80016da:	4770      	bx	lr
 80016dc:	20000000 	.word	0x20000000
 80016e0:	2000005c 	.word	0x2000005c
 80016e4:	08004870 	.word	0x08004870
 80016e8:	2000005c 	.word	0x2000005c
 80016ec:	200002c8 	.word	0x200002c8

080016f0 <ADC1_2_IRQHandler>:
 80016f0:	e7fe      	b.n	80016f0 <ADC1_2_IRQHandler>
	...

080016f4 <HAL_Init>:
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <HAL_Init+0x28>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a07      	ldr	r2, [pc, #28]	@ (800171c <HAL_Init+0x28>)
 80016fe:	f043 0310 	orr.w	r3, r3, #16
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	2003      	movs	r0, #3
 8001706:	f000 f919 	bl	800193c <HAL_NVIC_SetPriorityGrouping>
 800170a:	200f      	movs	r0, #15
 800170c:	f000 f808 	bl	8001720 <HAL_InitTick>
 8001710:	f7ff fbe2 	bl	8000ed8 <HAL_MspInit>
 8001714:	2300      	movs	r3, #0
 8001716:	4618      	mov	r0, r3
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40022000 	.word	0x40022000

08001720 <HAL_InitTick>:
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_InitTick+0x54>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_InitTick+0x58>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001736:	fbb3 f3f1 	udiv	r3, r3, r1
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f931 	bl	80019a6 <HAL_SYSTICK_Config>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_InitTick+0x2e>
 800174a:	2301      	movs	r3, #1
 800174c:	e00e      	b.n	800176c <HAL_InitTick+0x4c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b0f      	cmp	r3, #15
 8001752:	d80a      	bhi.n	800176a <HAL_InitTick+0x4a>
 8001754:	2200      	movs	r2, #0
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f000 f8f9 	bl	8001952 <HAL_NVIC_SetPriority>
 8001760:	4a06      	ldr	r2, [pc, #24]	@ (800177c <HAL_InitTick+0x5c>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_InitTick+0x4c>
 800176a:	2301      	movs	r3, #1
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000000 	.word	0x20000000
 8001778:	20000008 	.word	0x20000008
 800177c:	20000004 	.word	0x20000004

08001780 <HAL_IncTick>:
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
 8001784:	4b05      	ldr	r3, [pc, #20]	@ (800179c <HAL_IncTick+0x1c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b05      	ldr	r3, [pc, #20]	@ (80017a0 <HAL_IncTick+0x20>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a03      	ldr	r2, [pc, #12]	@ (80017a0 <HAL_IncTick+0x20>)
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	20000008 	.word	0x20000008
 80017a0:	2000017c 	.word	0x2000017c

080017a4 <__NVIC_SetPriorityGrouping>:
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_GetPriorityGrouping>:
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4b04      	ldr	r3, [pc, #16]	@ (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4906      	ldr	r1, [pc, #24]	@ (800183c <__NVIC_EnableIRQ+0x34>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	@ (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	@ (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	@ 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
 80018ec:	4313      	orrs	r3, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	@ 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <SysTick_Config>:
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001908:	d301      	bcc.n	800190e <SysTick_Config+0x16>
 800190a:	2301      	movs	r3, #1
 800190c:	e00f      	b.n	800192e <SysTick_Config+0x36>
 800190e:	4a0a      	ldr	r2, [pc, #40]	@ (8001938 <SysTick_Config+0x40>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	6053      	str	r3, [r2, #4]
 8001916:	210f      	movs	r1, #15
 8001918:	f04f 30ff 	mov.w	r0, #4294967295
 800191c:	f7ff ff90 	bl	8001840 <__NVIC_SetPriority>
 8001920:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <SysTick_Config+0x40>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <SysTick_Config+0x40>)
 8001928:	2207      	movs	r2, #7
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	2300      	movs	r3, #0
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	e000e010 	.word	0xe000e010

0800193c <HAL_NVIC_SetPriorityGrouping>:
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff ff2d 	bl	80017a4 <__NVIC_SetPriorityGrouping>
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_SetPriority>:
 8001952:	b580      	push	{r7, lr}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	60b9      	str	r1, [r7, #8]
 800195c:	607a      	str	r2, [r7, #4]
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	f7ff ff42 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001968:	6178      	str	r0, [r7, #20]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	68b9      	ldr	r1, [r7, #8]
 800196e:	6978      	ldr	r0, [r7, #20]
 8001970:	f7ff ff90 	bl	8001894 <NVIC_EncodePriority>
 8001974:	4602      	mov	r2, r0
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff5f 	bl	8001840 <__NVIC_SetPriority>
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_EnableIRQ>:
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	71fb      	strb	r3, [r7, #7]
 8001994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff35 	bl	8001808 <__NVIC_EnableIRQ>
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_SYSTICK_Config>:
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ffa2 	bl	80018f8 <SysTick_Config>
 80019b4:	4603      	mov	r3, r0
 80019b6:	4618      	mov	r0, r3
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <HAL_DMA_Abort_IT>:
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d005      	beq.n	80019e4 <HAL_DMA_Abort_IT+0x24>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2204      	movs	r2, #4
 80019dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80019de:	2301      	movs	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
 80019e2:	e051      	b.n	8001a88 <HAL_DMA_Abort_IT+0xc8>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 020e 	bic.w	r2, r2, #14
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a22      	ldr	r2, [pc, #136]	@ (8001a94 <HAL_DMA_Abort_IT+0xd4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d029      	beq.n	8001a62 <HAL_DMA_Abort_IT+0xa2>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a21      	ldr	r2, [pc, #132]	@ (8001a98 <HAL_DMA_Abort_IT+0xd8>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d022      	beq.n	8001a5e <HAL_DMA_Abort_IT+0x9e>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001a9c <HAL_DMA_Abort_IT+0xdc>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d01a      	beq.n	8001a58 <HAL_DMA_Abort_IT+0x98>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa0 <HAL_DMA_Abort_IT+0xe0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d012      	beq.n	8001a52 <HAL_DMA_Abort_IT+0x92>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa4 <HAL_DMA_Abort_IT+0xe4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d00a      	beq.n	8001a4c <HAL_DMA_Abort_IT+0x8c>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa8 <HAL_DMA_Abort_IT+0xe8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d102      	bne.n	8001a46 <HAL_DMA_Abort_IT+0x86>
 8001a40:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a44:	e00e      	b.n	8001a64 <HAL_DMA_Abort_IT+0xa4>
 8001a46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a4a:	e00b      	b.n	8001a64 <HAL_DMA_Abort_IT+0xa4>
 8001a4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a50:	e008      	b.n	8001a64 <HAL_DMA_Abort_IT+0xa4>
 8001a52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a56:	e005      	b.n	8001a64 <HAL_DMA_Abort_IT+0xa4>
 8001a58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a5c:	e002      	b.n	8001a64 <HAL_DMA_Abort_IT+0xa4>
 8001a5e:	2310      	movs	r3, #16
 8001a60:	e000      	b.n	8001a64 <HAL_DMA_Abort_IT+0xa4>
 8001a62:	2301      	movs	r3, #1
 8001a64:	4a11      	ldr	r2, [pc, #68]	@ (8001aac <HAL_DMA_Abort_IT+0xec>)
 8001a66:	6053      	str	r3, [r2, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2020 	strb.w	r2, [r3, #32]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_DMA_Abort_IT+0xc8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4798      	blx	r3
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40020008 	.word	0x40020008
 8001a98:	4002001c 	.word	0x4002001c
 8001a9c:	40020030 	.word	0x40020030
 8001aa0:	40020044 	.word	0x40020044
 8001aa4:	40020058 	.word	0x40020058
 8001aa8:	4002006c 	.word	0x4002006c
 8001aac:	40020000 	.word	0x40020000

08001ab0 <HAL_DMA_GetState>:
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_GPIO_Init>:
 8001acc:	b480      	push	{r7}
 8001ace:	b08b      	sub	sp, #44	@ 0x2c
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
 8001ade:	e169      	b.n	8001db4 <HAL_GPIO_Init+0x2e8>
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	61fb      	str	r3, [r7, #28]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f040 8158 	bne.w	8001dae <HAL_GPIO_Init+0x2e2>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4a9a      	ldr	r2, [pc, #616]	@ (8001d6c <HAL_GPIO_Init+0x2a0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d05e      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b08:	4a98      	ldr	r2, [pc, #608]	@ (8001d6c <HAL_GPIO_Init+0x2a0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d875      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b0e:	4a98      	ldr	r2, [pc, #608]	@ (8001d70 <HAL_GPIO_Init+0x2a4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d058      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b14:	4a96      	ldr	r2, [pc, #600]	@ (8001d70 <HAL_GPIO_Init+0x2a4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d86f      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b1a:	4a96      	ldr	r2, [pc, #600]	@ (8001d74 <HAL_GPIO_Init+0x2a8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d052      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b20:	4a94      	ldr	r2, [pc, #592]	@ (8001d74 <HAL_GPIO_Init+0x2a8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d869      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b26:	4a94      	ldr	r2, [pc, #592]	@ (8001d78 <HAL_GPIO_Init+0x2ac>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d04c      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b2c:	4a92      	ldr	r2, [pc, #584]	@ (8001d78 <HAL_GPIO_Init+0x2ac>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d863      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b32:	4a92      	ldr	r2, [pc, #584]	@ (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d046      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b38:	4a90      	ldr	r2, [pc, #576]	@ (8001d7c <HAL_GPIO_Init+0x2b0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d85d      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b3e:	2b12      	cmp	r3, #18
 8001b40:	d82a      	bhi.n	8001b98 <HAL_GPIO_Init+0xcc>
 8001b42:	2b12      	cmp	r3, #18
 8001b44:	d859      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b46:	a201      	add	r2, pc, #4	@ (adr r2, 8001b4c <HAL_GPIO_Init+0x80>)
 8001b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4c:	08001bc7 	.word	0x08001bc7
 8001b50:	08001ba1 	.word	0x08001ba1
 8001b54:	08001bb3 	.word	0x08001bb3
 8001b58:	08001bf5 	.word	0x08001bf5
 8001b5c:	08001bfb 	.word	0x08001bfb
 8001b60:	08001bfb 	.word	0x08001bfb
 8001b64:	08001bfb 	.word	0x08001bfb
 8001b68:	08001bfb 	.word	0x08001bfb
 8001b6c:	08001bfb 	.word	0x08001bfb
 8001b70:	08001bfb 	.word	0x08001bfb
 8001b74:	08001bfb 	.word	0x08001bfb
 8001b78:	08001bfb 	.word	0x08001bfb
 8001b7c:	08001bfb 	.word	0x08001bfb
 8001b80:	08001bfb 	.word	0x08001bfb
 8001b84:	08001bfb 	.word	0x08001bfb
 8001b88:	08001bfb 	.word	0x08001bfb
 8001b8c:	08001bfb 	.word	0x08001bfb
 8001b90:	08001ba9 	.word	0x08001ba9
 8001b94:	08001bbd 	.word	0x08001bbd
 8001b98:	4a79      	ldr	r2, [pc, #484]	@ (8001d80 <HAL_GPIO_Init+0x2b4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b9e:	e02c      	b.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	623b      	str	r3, [r7, #32]
 8001ba6:	e029      	b.n	8001bfc <HAL_GPIO_Init+0x130>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	3304      	adds	r3, #4
 8001bae:	623b      	str	r3, [r7, #32]
 8001bb0:	e024      	b.n	8001bfc <HAL_GPIO_Init+0x130>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	623b      	str	r3, [r7, #32]
 8001bba:	e01f      	b.n	8001bfc <HAL_GPIO_Init+0x130>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	330c      	adds	r3, #12
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	e01a      	b.n	8001bfc <HAL_GPIO_Init+0x130>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <HAL_GPIO_Init+0x108>
 8001bce:	2304      	movs	r3, #4
 8001bd0:	623b      	str	r3, [r7, #32]
 8001bd2:	e013      	b.n	8001bfc <HAL_GPIO_Init+0x130>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d105      	bne.n	8001be8 <HAL_GPIO_Init+0x11c>
 8001bdc:	2308      	movs	r3, #8
 8001bde:	623b      	str	r3, [r7, #32]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	611a      	str	r2, [r3, #16]
 8001be6:	e009      	b.n	8001bfc <HAL_GPIO_Init+0x130>
 8001be8:	2308      	movs	r3, #8
 8001bea:	623b      	str	r3, [r7, #32]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	615a      	str	r2, [r3, #20]
 8001bf2:	e003      	b.n	8001bfc <HAL_GPIO_Init+0x130>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x130>
 8001bfa:	bf00      	nop
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2bff      	cmp	r3, #255	@ 0xff
 8001c00:	d801      	bhi.n	8001c06 <HAL_GPIO_Init+0x13a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	e001      	b.n	8001c0a <HAL_GPIO_Init+0x13e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2bff      	cmp	r3, #255	@ 0xff
 8001c10:	d802      	bhi.n	8001c18 <HAL_GPIO_Init+0x14c>
 8001c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	e002      	b.n	8001c1e <HAL_GPIO_Init+0x152>
 8001c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1a:	3b08      	subs	r3, #8
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	210f      	movs	r1, #15
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	6a39      	ldr	r1, [r7, #32]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 80b1 	beq.w	8001dae <HAL_GPIO_Init+0x2e2>
 8001c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001d84 <HAL_GPIO_Init+0x2b8>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a4c      	ldr	r2, [pc, #304]	@ (8001d84 <HAL_GPIO_Init+0x2b8>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b4a      	ldr	r3, [pc, #296]	@ (8001d84 <HAL_GPIO_Init+0x2b8>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	4a48      	ldr	r2, [pc, #288]	@ (8001d88 <HAL_GPIO_Init+0x2bc>)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a40      	ldr	r2, [pc, #256]	@ (8001d8c <HAL_GPIO_Init+0x2c0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d013      	beq.n	8001cb8 <HAL_GPIO_Init+0x1ec>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a3f      	ldr	r2, [pc, #252]	@ (8001d90 <HAL_GPIO_Init+0x2c4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d00d      	beq.n	8001cb4 <HAL_GPIO_Init+0x1e8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d94 <HAL_GPIO_Init+0x2c8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d007      	beq.n	8001cb0 <HAL_GPIO_Init+0x1e4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a3d      	ldr	r2, [pc, #244]	@ (8001d98 <HAL_GPIO_Init+0x2cc>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d101      	bne.n	8001cac <HAL_GPIO_Init+0x1e0>
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e006      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cac:	2304      	movs	r3, #4
 8001cae:	e004      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e002      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_GPIO_Init+0x1ee>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cbc:	f002 0203 	and.w	r2, r2, #3
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	4093      	lsls	r3, r2
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	492f      	ldr	r1, [pc, #188]	@ (8001d88 <HAL_GPIO_Init+0x2bc>)
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_GPIO_Init+0x226>
 8001ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	492c      	ldr	r1, [pc, #176]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	608b      	str	r3, [r1, #8]
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x234>
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	4928      	ldr	r1, [pc, #160]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <HAL_GPIO_Init+0x24e>
 8001d0c:	4b23      	ldr	r3, [pc, #140]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d0e:	68da      	ldr	r2, [r3, #12]
 8001d10:	4922      	ldr	r1, [pc, #136]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	60cb      	str	r3, [r1, #12]
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x25c>
 8001d1a:	4b20      	ldr	r3, [pc, #128]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	491e      	ldr	r1, [pc, #120]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	60cb      	str	r3, [r1, #12]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d006      	beq.n	8001d42 <HAL_GPIO_Init+0x276>
 8001d34:	4b19      	ldr	r3, [pc, #100]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	4918      	ldr	r1, [pc, #96]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x284>
 8001d42:	4b16      	ldr	r3, [pc, #88]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d44:	685a      	ldr	r2, [r3, #4]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	4914      	ldr	r1, [pc, #80]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d021      	beq.n	8001da0 <HAL_GPIO_Init+0x2d4>
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	490e      	ldr	r1, [pc, #56]	@ (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]
 8001d68:	e021      	b.n	8001dae <HAL_GPIO_Init+0x2e2>
 8001d6a:	bf00      	nop
 8001d6c:	10320000 	.word	0x10320000
 8001d70:	10310000 	.word	0x10310000
 8001d74:	10220000 	.word	0x10220000
 8001d78:	10210000 	.word	0x10210000
 8001d7c:	10120000 	.word	0x10120000
 8001d80:	10110000 	.word	0x10110000
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010000 	.word	0x40010000
 8001d8c:	40010800 	.word	0x40010800
 8001d90:	40010c00 	.word	0x40010c00
 8001d94:	40011000 	.word	0x40011000
 8001d98:	40011400 	.word	0x40011400
 8001d9c:	40010400 	.word	0x40010400
 8001da0:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <HAL_GPIO_Init+0x304>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	4909      	ldr	r1, [pc, #36]	@ (8001dd0 <HAL_GPIO_Init+0x304>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	600b      	str	r3, [r1, #0]
 8001dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db0:	3301      	adds	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f47f ae8e 	bne.w	8001ae0 <HAL_GPIO_Init+0x14>
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	372c      	adds	r7, #44	@ 0x2c
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	40010400 	.word	0x40010400

08001dd4 <HAL_I2C_Init>:
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_I2C_Init+0x12>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e12b      	b.n	800203e <HAL_I2C_Init+0x26a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d106      	bne.n	8001e00 <HAL_I2C_Init+0x2c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff f89e 	bl	8000f3c <HAL_I2C_MspInit>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2224      	movs	r2, #36	@ 0x24
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	f001 fe84 	bl	8003b44 <HAL_RCC_GetPCLK1Freq>
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4a81      	ldr	r2, [pc, #516]	@ (8002048 <HAL_I2C_Init+0x274>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d807      	bhi.n	8001e58 <HAL_I2C_Init+0x84>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4a80      	ldr	r2, [pc, #512]	@ (800204c <HAL_I2C_Init+0x278>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	bf94      	ite	ls
 8001e50:	2301      	movls	r3, #1
 8001e52:	2300      	movhi	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	e006      	b.n	8001e66 <HAL_I2C_Init+0x92>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4a7d      	ldr	r2, [pc, #500]	@ (8002050 <HAL_I2C_Init+0x27c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	bf94      	ite	ls
 8001e60:	2301      	movls	r3, #1
 8001e62:	2300      	movhi	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_Init+0x9a>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0e7      	b.n	800203e <HAL_I2C_Init+0x26a>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4a78      	ldr	r2, [pc, #480]	@ (8002054 <HAL_I2C_Init+0x280>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	0c9b      	lsrs	r3, r3, #18
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4a6a      	ldr	r2, [pc, #424]	@ (8002048 <HAL_I2C_Init+0x274>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d802      	bhi.n	8001ea8 <HAL_I2C_Init+0xd4>
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	e009      	b.n	8001ebc <HAL_I2C_Init+0xe8>
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	4a69      	ldr	r2, [pc, #420]	@ (8002058 <HAL_I2C_Init+0x284>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	099b      	lsrs	r3, r3, #6
 8001eba:	3301      	adds	r3, #1
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	430b      	orrs	r3, r1
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ece:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	495c      	ldr	r1, [pc, #368]	@ (8002048 <HAL_I2C_Init+0x274>)
 8001ed8:	428b      	cmp	r3, r1
 8001eda:	d819      	bhi.n	8001f10 <HAL_I2C_Init+0x13c>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e59      	subs	r1, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eea:	1c59      	adds	r1, r3, #1
 8001eec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001ef0:	400b      	ands	r3, r1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00a      	beq.n	8001f0c <HAL_I2C_Init+0x138>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	1e59      	subs	r1, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f04:	3301      	adds	r3, #1
 8001f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f0a:	e051      	b.n	8001fb0 <HAL_I2C_Init+0x1dc>
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	e04f      	b.n	8001fb0 <HAL_I2C_Init+0x1dc>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d111      	bne.n	8001f3c <HAL_I2C_Init+0x168>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	1e58      	subs	r0, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	440b      	add	r3, r1
 8001f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	bf0c      	ite	eq
 8001f34:	2301      	moveq	r3, #1
 8001f36:	2300      	movne	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	e012      	b.n	8001f62 <HAL_I2C_Init+0x18e>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	1e58      	subs	r0, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	0099      	lsls	r1, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_I2C_Init+0x196>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e022      	b.n	8001fb0 <HAL_I2C_Init+0x1dc>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10e      	bne.n	8001f90 <HAL_I2C_Init+0x1bc>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1e58      	subs	r0, r3, #1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6859      	ldr	r1, [r3, #4]
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	440b      	add	r3, r1
 8001f80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f84:	3301      	adds	r3, #1
 8001f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f8e:	e00f      	b.n	8001fb0 <HAL_I2C_Init+0x1dc>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1e58      	subs	r0, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6859      	ldr	r1, [r3, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	0099      	lsls	r1, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	6809      	ldr	r1, [r1, #0]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61cb      	str	r3, [r1, #28]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69da      	ldr	r2, [r3, #28]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001fde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6911      	ldr	r1, [r2, #16]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68d2      	ldr	r2, [r2, #12]
 8001fea:	4311      	orrs	r1, r2
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	6093      	str	r3, [r2, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	430a      	orrs	r2, r1
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	641a      	str	r2, [r3, #64]	@ 0x40
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	631a      	str	r2, [r3, #48]	@ 0x30
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800203c:	2300      	movs	r3, #0
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	000186a0 	.word	0x000186a0
 800204c:	001e847f 	.word	0x001e847f
 8002050:	003d08ff 	.word	0x003d08ff
 8002054:	431bde83 	.word	0x431bde83
 8002058:	10624dd3 	.word	0x10624dd3

0800205c <I2C_Flush_DR>:
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206e:	2b80      	cmp	r3, #128	@ 0x80
 8002070:	d103      	bne.n	800207a <I2C_Flush_DR+0x1e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr

08002084 <HAL_I2C_Slave_Receive_IT>:
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	4613      	mov	r3, r2
 8002090:	80fb      	strh	r3, [r7, #6]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b20      	cmp	r3, #32
 800209c:	d158      	bne.n	8002150 <HAL_I2C_Slave_Receive_IT+0xcc>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HAL_I2C_Slave_Receive_IT+0x26>
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_I2C_Slave_Receive_IT+0x2a>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e051      	b.n	8002152 <HAL_I2C_Slave_Receive_IT+0xce>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_I2C_Slave_Receive_IT+0x38>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e04a      	b.n	8002152 <HAL_I2C_Slave_Receive_IT+0xce>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d007      	beq.n	80020e2 <HAL_I2C_Slave_Receive_IT+0x5e>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2222      	movs	r2, #34	@ 0x22
 80020f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	641a      	str	r2, [r3, #64]	@ 0x40
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	625a      	str	r2, [r3, #36]	@ 0x24
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	88fa      	ldrh	r2, [r7, #6]
 8002112:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4a0e      	ldr	r2, [pc, #56]	@ (800215c <HAL_I2C_Slave_Receive_IT+0xd8>)
 8002122:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800214a:	605a      	str	r2, [r3, #4]
 800214c:	2300      	movs	r3, #0
 800214e:	e000      	b.n	8002152 <HAL_I2C_Slave_Receive_IT+0xce>
 8002150:	2302      	movs	r3, #2
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	ffff0000 	.word	0xffff0000

08002160 <HAL_I2C_EV_IRQHandler>:
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	2300      	movs	r3, #0
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002188:	73bb      	strb	r3, [r7, #14]
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	2b10      	cmp	r3, #16
 800218e:	d003      	beq.n	8002198 <HAL_I2C_EV_IRQHandler+0x38>
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	2b40      	cmp	r3, #64	@ 0x40
 8002194:	f040 80c1 	bne.w	800231a <HAL_I2C_EV_IRQHandler+0x1ba>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	61bb      	str	r3, [r7, #24]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10d      	bne.n	80021ce <HAL_I2C_EV_IRQHandler+0x6e>
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80021b8:	d003      	beq.n	80021c2 <HAL_I2C_EV_IRQHandler+0x62>
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80021c0:	d101      	bne.n	80021c6 <HAL_I2C_EV_IRQHandler+0x66>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <HAL_I2C_EV_IRQHandler+0x68>
 80021c6:	2300      	movs	r3, #0
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	f000 8132 	beq.w	8002432 <HAL_I2C_EV_IRQHandler+0x2d2>
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00c      	beq.n	80021f2 <HAL_I2C_EV_IRQHandler+0x92>
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	0a5b      	lsrs	r3, r3, #9
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d006      	beq.n	80021f2 <HAL_I2C_EV_IRQHandler+0x92>
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f001 fc89 	bl	8003afc <I2C_ConvertOtherXferOptions>
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fd87 	bl	8002cfe <I2C_Master_SB>
 80021f0:	e092      	b.n	8002318 <HAL_I2C_EV_IRQHandler+0x1b8>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <HAL_I2C_EV_IRQHandler+0xb2>
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	0a5b      	lsrs	r3, r3, #9
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_I2C_EV_IRQHandler+0xb2>
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fdfc 	bl	8002e08 <I2C_Master_ADD10>
 8002210:	e082      	b.n	8002318 <HAL_I2C_EV_IRQHandler+0x1b8>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	085b      	lsrs	r3, r3, #1
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <HAL_I2C_EV_IRQHandler+0xd2>
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	0a5b      	lsrs	r3, r3, #9
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_I2C_EV_IRQHandler+0xd2>
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 fe15 	bl	8002e5a <I2C_Master_ADDR>
 8002230:	e072      	b.n	8002318 <HAL_I2C_EV_IRQHandler+0x1b8>
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d03b      	beq.n	80022b6 <HAL_I2C_EV_IRQHandler+0x156>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800224c:	f000 80f3 	beq.w	8002436 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	09db      	lsrs	r3, r3, #7
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00f      	beq.n	800227c <HAL_I2C_EV_IRQHandler+0x11c>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	0a9b      	lsrs	r3, r3, #10
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d009      	beq.n	800227c <HAL_I2C_EV_IRQHandler+0x11c>
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d103      	bne.n	800227c <HAL_I2C_EV_IRQHandler+0x11c>
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f9df 	bl	8002638 <I2C_MasterTransmit_TXE>
 800227a:	e04d      	b.n	8002318 <HAL_I2C_EV_IRQHandler+0x1b8>
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80d6 	beq.w	8002436 <HAL_I2C_EV_IRQHandler+0x2d6>
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	0a5b      	lsrs	r3, r3, #9
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80cf 	beq.w	8002436 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002298:	7bbb      	ldrb	r3, [r7, #14]
 800229a:	2b21      	cmp	r3, #33	@ 0x21
 800229c:	d103      	bne.n	80022a6 <HAL_I2C_EV_IRQHandler+0x146>
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fa66 	bl	8002770 <I2C_MasterTransmit_BTF>
 80022a4:	e0c7      	b.n	8002436 <HAL_I2C_EV_IRQHandler+0x2d6>
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	2b40      	cmp	r3, #64	@ 0x40
 80022aa:	f040 80c4 	bne.w	8002436 <HAL_I2C_EV_IRQHandler+0x2d6>
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f000 fad4 	bl	800285c <I2C_MemoryTransmit_TXE_BTF>
 80022b4:	e0bf      	b.n	8002436 <HAL_I2C_EV_IRQHandler+0x2d6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022c4:	f000 80b7 	beq.w	8002436 <HAL_I2C_EV_IRQHandler+0x2d6>
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	099b      	lsrs	r3, r3, #6
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00f      	beq.n	80022f4 <HAL_I2C_EV_IRQHandler+0x194>
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	0a9b      	lsrs	r3, r3, #10
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d009      	beq.n	80022f4 <HAL_I2C_EV_IRQHandler+0x194>
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	089b      	lsrs	r3, r3, #2
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d103      	bne.n	80022f4 <HAL_I2C_EV_IRQHandler+0x194>
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 fb4d 	bl	800298c <I2C_MasterReceive_RXNE>
 80022f2:	e011      	b.n	8002318 <HAL_I2C_EV_IRQHandler+0x1b8>
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 809a 	beq.w	8002436 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	0a5b      	lsrs	r3, r3, #9
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8093 	beq.w	8002436 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fc03 	bl	8002b1c <I2C_MasterReceive_BTF>
 8002316:	e08e      	b.n	8002436 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002318:	e08d      	b.n	8002436 <HAL_I2C_EV_IRQHandler+0x2d6>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <HAL_I2C_EV_IRQHandler+0x1cc>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	e007      	b.n	800233c <HAL_I2C_EV_IRQHandler+0x1dc>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	61bb      	str	r3, [r7, #24]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	61fb      	str	r3, [r7, #28]
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	085b      	lsrs	r3, r3, #1
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d012      	beq.n	800236e <HAL_I2C_EV_IRQHandler+0x20e>
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	0a5b      	lsrs	r3, r3, #9
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00c      	beq.n	800236e <HAL_I2C_EV_IRQHandler+0x20e>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_I2C_EV_IRQHandler+0x204>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	69b9      	ldr	r1, [r7, #24]
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 ffce 	bl	8003308 <I2C_Slave_ADDR>
 800236c:	e066      	b.n	800243c <HAL_I2C_EV_IRQHandler+0x2dc>
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HAL_I2C_EV_IRQHandler+0x22e>
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	0a5b      	lsrs	r3, r3, #9
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_I2C_EV_IRQHandler+0x22e>
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f001 f808 	bl	800339c <I2C_Slave_STOPF>
 800238c:	e056      	b.n	800243c <HAL_I2C_EV_IRQHandler+0x2dc>
 800238e:	7bbb      	ldrb	r3, [r7, #14]
 8002390:	2b21      	cmp	r3, #33	@ 0x21
 8002392:	d002      	beq.n	800239a <HAL_I2C_EV_IRQHandler+0x23a>
 8002394:	7bbb      	ldrb	r3, [r7, #14]
 8002396:	2b29      	cmp	r3, #41	@ 0x29
 8002398:	d125      	bne.n	80023e6 <HAL_I2C_EV_IRQHandler+0x286>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	09db      	lsrs	r3, r3, #7
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00f      	beq.n	80023c6 <HAL_I2C_EV_IRQHandler+0x266>
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	0a9b      	lsrs	r3, r3, #10
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d009      	beq.n	80023c6 <HAL_I2C_EV_IRQHandler+0x266>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	089b      	lsrs	r3, r3, #2
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d103      	bne.n	80023c6 <HAL_I2C_EV_IRQHandler+0x266>
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 fee6 	bl	8003190 <I2C_SlaveTransmit_TXE>
 80023c4:	e039      	b.n	800243a <HAL_I2C_EV_IRQHandler+0x2da>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d033      	beq.n	800243a <HAL_I2C_EV_IRQHandler+0x2da>
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	0a5b      	lsrs	r3, r3, #9
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d02d      	beq.n	800243a <HAL_I2C_EV_IRQHandler+0x2da>
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 ff13 	bl	800320a <I2C_SlaveTransmit_BTF>
 80023e4:	e029      	b.n	800243a <HAL_I2C_EV_IRQHandler+0x2da>
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00f      	beq.n	8002412 <HAL_I2C_EV_IRQHandler+0x2b2>
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	0a9b      	lsrs	r3, r3, #10
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <HAL_I2C_EV_IRQHandler+0x2b2>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	089b      	lsrs	r3, r3, #2
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d103      	bne.n	8002412 <HAL_I2C_EV_IRQHandler+0x2b2>
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 ff1d 	bl	800324a <I2C_SlaveReceive_RXNE>
 8002410:	e014      	b.n	800243c <HAL_I2C_EV_IRQHandler+0x2dc>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	089b      	lsrs	r3, r3, #2
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00e      	beq.n	800243c <HAL_I2C_EV_IRQHandler+0x2dc>
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	0a5b      	lsrs	r3, r3, #9
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d008      	beq.n	800243c <HAL_I2C_EV_IRQHandler+0x2dc>
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 ff4b 	bl	80032c6 <I2C_SlaveReceive_BTF>
 8002430:	e004      	b.n	800243c <HAL_I2C_EV_IRQHandler+0x2dc>
 8002432:	bf00      	nop
 8002434:	e002      	b.n	800243c <HAL_I2C_EV_IRQHandler+0x2dc>
 8002436:	bf00      	nop
 8002438:	e000      	b.n	800243c <HAL_I2C_EV_IRQHandler+0x2dc>
 800243a:	bf00      	nop
 800243c:	3720      	adds	r7, #32
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_I2C_ER_IRQHandler>:
 8002442:	b580      	push	{r7, lr}
 8002444:	b08a      	sub	sp, #40	@ 0x28
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	623b      	str	r3, [r7, #32]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	2300      	movs	r3, #0
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002464:	76fb      	strb	r3, [r7, #27]
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d016      	beq.n	80024a0 <HAL_I2C_ER_IRQHandler+0x5e>
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d010      	beq.n	80024a0 <HAL_I2C_ER_IRQHandler+0x5e>
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	f043 0301 	orr.w	r3, r3, #1
 8002484:	627b      	str	r3, [r7, #36]	@ 0x24
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800248e:	615a      	str	r2, [r3, #20]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	0a5b      	lsrs	r3, r3, #9
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00e      	beq.n	80024ca <HAL_I2C_ER_IRQHandler+0x88>
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_I2C_ER_IRQHandler+0x88>
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	f043 0302 	orr.w	r3, r3, #2
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80024c8:	615a      	str	r2, [r3, #20]
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	0a9b      	lsrs	r3, r3, #10
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d03f      	beq.n	8002556 <HAL_I2C_ER_IRQHandler+0x114>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	0a1b      	lsrs	r3, r3, #8
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d039      	beq.n	8002556 <HAL_I2C_ER_IRQHandler+0x114>
 80024e2:	7efb      	ldrb	r3, [r7, #27]
 80024e4:	76bb      	strb	r3, [r7, #26]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024f4:	74fb      	strb	r3, [r7, #19]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	7ebb      	ldrb	r3, [r7, #26]
 80024fe:	2b20      	cmp	r3, #32
 8002500:	d112      	bne.n	8002528 <HAL_I2C_ER_IRQHandler+0xe6>
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10f      	bne.n	8002528 <HAL_I2C_ER_IRQHandler+0xe6>
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	2b21      	cmp	r3, #33	@ 0x21
 800250c:	d008      	beq.n	8002520 <HAL_I2C_ER_IRQHandler+0xde>
 800250e:	7cfb      	ldrb	r3, [r7, #19]
 8002510:	2b29      	cmp	r3, #41	@ 0x29
 8002512:	d005      	beq.n	8002520 <HAL_I2C_ER_IRQHandler+0xde>
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	2b28      	cmp	r3, #40	@ 0x28
 8002518:	d106      	bne.n	8002528 <HAL_I2C_ER_IRQHandler+0xe6>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b21      	cmp	r3, #33	@ 0x21
 800251e:	d103      	bne.n	8002528 <HAL_I2C_ER_IRQHandler+0xe6>
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f001 f86b 	bl	80035fc <I2C_Slave_AF>
 8002526:	e016      	b.n	8002556 <HAL_I2C_ER_IRQHandler+0x114>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002530:	615a      	str	r2, [r3, #20]
 8002532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24
 800253a:	7efb      	ldrb	r3, [r7, #27]
 800253c:	2b10      	cmp	r3, #16
 800253e:	d002      	beq.n	8002546 <HAL_I2C_ER_IRQHandler+0x104>
 8002540:	7efb      	ldrb	r3, [r7, #27]
 8002542:	2b40      	cmp	r3, #64	@ 0x40
 8002544:	d107      	bne.n	8002556 <HAL_I2C_ER_IRQHandler+0x114>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	0adb      	lsrs	r3, r3, #11
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00e      	beq.n	8002580 <HAL_I2C_ER_IRQHandler+0x13e>
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d008      	beq.n	8002580 <HAL_I2C_ER_IRQHandler+0x13e>
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	f043 0308 	orr.w	r3, r3, #8
 8002574:	627b      	str	r3, [r7, #36]	@ 0x24
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800257e:	615a      	str	r2, [r3, #20]
 8002580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002582:	2b00      	cmp	r3, #0
 8002584:	d008      	beq.n	8002598 <HAL_I2C_ER_IRQHandler+0x156>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	431a      	orrs	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	641a      	str	r2, [r3, #64]	@ 0x40
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f001 f8a6 	bl	80036e4 <I2C_ITError>
 8002598:	bf00      	nop
 800259a:	3728      	adds	r7, #40	@ 0x28
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_I2C_MasterTxCpltCallback>:
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <HAL_I2C_MasterRxCpltCallback>:
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <HAL_I2C_SlaveTxCpltCallback>:
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bc80      	pop	{r7}
 80025d4:	4770      	bx	lr

080025d6 <HAL_I2C_AddrCallback>:
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	460b      	mov	r3, r1
 80025e0:	70fb      	strb	r3, [r7, #3]
 80025e2:	4613      	mov	r3, r2
 80025e4:	803b      	strh	r3, [r7, #0]
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <HAL_I2C_ListenCpltCallback>:
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <HAL_I2C_MemTxCpltCallback>:
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_I2C_MemRxCpltCallback>:
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <HAL_I2C_AbortCpltCallback>:
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	bc80      	pop	{r7}
 8002636:	4770      	bx	lr

08002638 <I2C_MasterTransmit_TXE>:
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002646:	73fb      	strb	r3, [r7, #15]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800264e:	73bb      	strb	r3, [r7, #14]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265a:	2b00      	cmp	r3, #0
 800265c:	d150      	bne.n	8002700 <I2C_MasterTransmit_TXE+0xc8>
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	2b21      	cmp	r3, #33	@ 0x21
 8002662:	d14d      	bne.n	8002700 <I2C_MasterTransmit_TXE+0xc8>
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b08      	cmp	r3, #8
 8002668:	d01d      	beq.n	80026a6 <I2C_MasterTransmit_TXE+0x6e>
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	2b20      	cmp	r3, #32
 800266e:	d01a      	beq.n	80026a6 <I2C_MasterTransmit_TXE+0x6e>
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002676:	d016      	beq.n	80026a6 <I2C_MasterTransmit_TXE+0x6e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002686:	605a      	str	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2211      	movs	r2, #17
 800268c:	631a      	str	r2, [r3, #48]	@ 0x30
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff ff7e 	bl	80025a0 <HAL_I2C_MasterTxCpltCallback>
 80026a4:	e060      	b.n	8002768 <I2C_MasterTransmit_TXE+0x130>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2220      	movs	r2, #32
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b40      	cmp	r3, #64	@ 0x40
 80026de:	d107      	bne.n	80026f0 <I2C_MasterTransmit_TXE+0xb8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff ff8a 	bl	8002602 <HAL_I2C_MemTxCpltCallback>
 80026ee:	e03b      	b.n	8002768 <I2C_MasterTransmit_TXE+0x130>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff51 	bl	80025a0 <HAL_I2C_MasterTxCpltCallback>
 80026fe:	e033      	b.n	8002768 <I2C_MasterTransmit_TXE+0x130>
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b21      	cmp	r3, #33	@ 0x21
 8002704:	d005      	beq.n	8002712 <I2C_MasterTransmit_TXE+0xda>
 8002706:	7bbb      	ldrb	r3, [r7, #14]
 8002708:	2b40      	cmp	r3, #64	@ 0x40
 800270a:	d12d      	bne.n	8002768 <I2C_MasterTransmit_TXE+0x130>
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	2b22      	cmp	r3, #34	@ 0x22
 8002710:	d12a      	bne.n	8002768 <I2C_MasterTransmit_TXE+0x130>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d108      	bne.n	800272e <I2C_MasterTransmit_TXE+0xf6>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	e01c      	b.n	8002768 <I2C_MasterTransmit_TXE+0x130>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b40      	cmp	r3, #64	@ 0x40
 8002738:	d103      	bne.n	8002742 <I2C_MasterTransmit_TXE+0x10a>
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f88e 	bl	800285c <I2C_MemoryTransmit_TXE_BTF>
 8002740:	e012      	b.n	8002768 <I2C_MasterTransmit_TXE+0x130>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	611a      	str	r2, [r3, #16]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	625a      	str	r2, [r3, #36]	@ 0x24
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002766:	e7ff      	b.n	8002768 <I2C_MasterTransmit_TXE+0x130>
 8002768:	bf00      	nop
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <I2C_MasterTransmit_BTF>:
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b21      	cmp	r3, #33	@ 0x21
 8002788:	d164      	bne.n	8002854 <I2C_MasterTransmit_BTF+0xe4>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d012      	beq.n	80027ba <I2C_MasterTransmit_BTF+0x4a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	781a      	ldrb	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	611a      	str	r2, [r3, #16]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	625a      	str	r2, [r3, #36]	@ 0x24
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027b8:	e04c      	b.n	8002854 <I2C_MasterTransmit_BTF+0xe4>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b08      	cmp	r3, #8
 80027be:	d01d      	beq.n	80027fc <I2C_MasterTransmit_BTF+0x8c>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d01a      	beq.n	80027fc <I2C_MasterTransmit_BTF+0x8c>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027cc:	d016      	beq.n	80027fc <I2C_MasterTransmit_BTF+0x8c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2211      	movs	r2, #17
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff fed3 	bl	80025a0 <HAL_I2C_MasterTxCpltCallback>
 80027fa:	e02b      	b.n	8002854 <I2C_MasterTransmit_BTF+0xe4>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	631a      	str	r2, [r3, #48]	@ 0x30
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b40      	cmp	r3, #64	@ 0x40
 8002834:	d107      	bne.n	8002846 <I2C_MasterTransmit_BTF+0xd6>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff fedf 	bl	8002602 <HAL_I2C_MemTxCpltCallback>
 8002844:	e006      	b.n	8002854 <I2C_MasterTransmit_BTF+0xe4>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff fea6 	bl	80025a0 <HAL_I2C_MasterTxCpltCallback>
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <I2C_MemoryTransmit_TXE_BTF>:
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002870:	2b00      	cmp	r3, #0
 8002872:	d11d      	bne.n	80028b0 <I2C_MemoryTransmit_TXE_BTF+0x54>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002878:	2b01      	cmp	r3, #1
 800287a:	d10b      	bne.n	8002894 <I2C_MemoryTransmit_TXE_BTF+0x38>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002880:	b2da      	uxtb	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	611a      	str	r2, [r3, #16]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800288c:	1c9a      	adds	r2, r3, #2
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	651a      	str	r2, [r3, #80]	@ 0x50
 8002892:	e077      	b.n	8002984 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002898:	b29b      	uxth	r3, r3
 800289a:	121b      	asrs	r3, r3, #8
 800289c:	b2da      	uxtb	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	611a      	str	r2, [r3, #16]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80028ae:	e069      	b.n	8002984 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d10b      	bne.n	80028d0 <I2C_MemoryTransmit_TXE_BTF+0x74>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	611a      	str	r2, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80028ce:	e059      	b.n	8002984 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d152      	bne.n	800297e <I2C_MemoryTransmit_TXE_BTF+0x122>
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b22      	cmp	r3, #34	@ 0x22
 80028dc:	d10d      	bne.n	80028fa <I2C_MemoryTransmit_TXE_BTF+0x9e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80028f8:	e044      	b.n	8002984 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d015      	beq.n	8002930 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	2b21      	cmp	r3, #33	@ 0x21
 8002908:	d112      	bne.n	8002930 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	611a      	str	r2, [r3, #16]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291a:	1c5a      	adds	r2, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800292e:	e029      	b.n	8002984 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d124      	bne.n	8002984 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	2b21      	cmp	r3, #33	@ 0x21
 800293e:	d121      	bne.n	8002984 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	631a      	str	r2, [r3, #48]	@ 0x30
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2220      	movs	r2, #32
 800296a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff fe43 	bl	8002602 <HAL_I2C_MemTxCpltCallback>
 800297c:	e002      	b.n	8002984 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fb6c 	bl	800205c <I2C_Flush_DR>
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <I2C_MasterReceive_RXNE>:
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b22      	cmp	r3, #34	@ 0x22
 800299e:	f040 80b9 	bne.w	8002b14 <I2C_MasterReceive_RXNE+0x188>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b03      	cmp	r3, #3
 80029b4:	d921      	bls.n	80029fa <I2C_MasterReceive_RXNE+0x6e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	f040 8096 	bne.w	8002b14 <I2C_MasterReceive_RXNE+0x188>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	e08c      	b.n	8002b14 <I2C_MasterReceive_RXNE+0x188>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d07f      	beq.n	8002b02 <I2C_MasterReceive_RXNE+0x176>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d002      	beq.n	8002a0e <I2C_MasterReceive_RXNE+0x82>
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d179      	bne.n	8002b02 <I2C_MasterReceive_RXNE+0x176>
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f001 f842 	bl	8003a98 <I2C_WaitOnSTOPRequestThroughIT>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d14c      	bne.n	8002ab4 <I2C_MasterReceive_RXNE+0x128>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a38:	605a      	str	r2, [r3, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b40      	cmp	r3, #64	@ 0x40
 8002a72:	d10a      	bne.n	8002a8a <I2C_MasterReceive_RXNE+0xfe>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fdc6 	bl	8002614 <HAL_I2C_MemRxCpltCallback>
 8002a88:	e044      	b.n	8002b14 <I2C_MasterReceive_RXNE+0x188>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d002      	beq.n	8002a9e <I2C_MasterReceive_RXNE+0x112>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b20      	cmp	r3, #32
 8002a9c:	d103      	bne.n	8002aa6 <I2C_MasterReceive_RXNE+0x11a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aa4:	e002      	b.n	8002aac <I2C_MasterReceive_RXNE+0x120>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2212      	movs	r2, #18
 8002aaa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f7ff fd80 	bl	80025b2 <HAL_I2C_MasterRxCpltCallback>
 8002ab2:	e02f      	b.n	8002b14 <I2C_MasterReceive_RXNE+0x188>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ac2:	605a      	str	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	625a      	str	r2, [r3, #36]	@ 0x24
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2220      	movs	r2, #32
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fd fe6a 	bl	80007d4 <HAL_I2C_ErrorCallback>
 8002b00:	e008      	b.n	8002b14 <I2C_MasterReceive_RXNE+0x188>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	e7ff      	b.n	8002b14 <I2C_MasterReceive_RXNE+0x188>
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_MasterReceive_BTF>:
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d11b      	bne.n	8002b6c <I2C_MasterReceive_BTF+0x50>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b42:	605a      	str	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b6a:	e0c4      	b.n	8002cf6 <I2C_MasterReceive_BTF+0x1da>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d129      	bne.n	8002bca <I2C_MasterReceive_BTF+0xae>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685a      	ldr	r2, [r3, #4]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d00a      	beq.n	8002ba2 <I2C_MasterReceive_BTF+0x86>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d007      	beq.n	8002ba2 <I2C_MasterReceive_BTF+0x86>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bc8:	e095      	b.n	8002cf6 <I2C_MasterReceive_BTF+0x1da>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d17d      	bne.n	8002cd0 <I2C_MasterReceive_BTF+0x1b4>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d002      	beq.n	8002be0 <I2C_MasterReceive_BTF+0xc4>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b10      	cmp	r3, #16
 8002bde:	d108      	bne.n	8002bf2 <I2C_MasterReceive_BTF+0xd6>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e016      	b.n	8002c20 <I2C_MasterReceive_BTF+0x104>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d002      	beq.n	8002bfe <I2C_MasterReceive_BTF+0xe2>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d108      	bne.n	8002c10 <I2C_MasterReceive_BTF+0xf4>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	e007      	b.n	8002c20 <I2C_MasterReceive_BTF+0x104>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	701a      	strb	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002c7a:	605a      	str	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b40      	cmp	r3, #64	@ 0x40
 8002c8e:	d10a      	bne.n	8002ca6 <I2C_MasterReceive_BTF+0x18a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff fcb8 	bl	8002614 <HAL_I2C_MemRxCpltCallback>
 8002ca4:	e027      	b.n	8002cf6 <I2C_MasterReceive_BTF+0x1da>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d002      	beq.n	8002cba <I2C_MasterReceive_BTF+0x19e>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d103      	bne.n	8002cc2 <I2C_MasterReceive_BTF+0x1a6>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cc0:	e002      	b.n	8002cc8 <I2C_MasterReceive_BTF+0x1ac>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2212      	movs	r2, #18
 8002cc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff fc72 	bl	80025b2 <HAL_I2C_MasterRxCpltCallback>
 8002cce:	e012      	b.n	8002cf6 <I2C_MasterReceive_BTF+0x1da>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	691a      	ldr	r2, [r3, #16]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <I2C_Master_SB>:
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b40      	cmp	r3, #64	@ 0x40
 8002d10:	d117      	bne.n	8002d42 <I2C_Master_SB+0x44>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <I2C_Master_SB+0x30>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d2a:	611a      	str	r2, [r3, #16]
 8002d2c:	e067      	b.n	8002dfe <I2C_Master_SB+0x100>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]
 8002d40:	e05d      	b.n	8002dfe <I2C_Master_SB+0x100>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d4a:	d133      	bne.n	8002db4 <I2C_Master_SB+0xb6>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b21      	cmp	r3, #33	@ 0x21
 8002d56:	d109      	bne.n	8002d6c <I2C_Master_SB+0x6e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d68:	611a      	str	r2, [r3, #16]
 8002d6a:	e008      	b.n	8002d7e <I2C_Master_SB+0x80>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	611a      	str	r2, [r3, #16]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d004      	beq.n	8002d90 <I2C_Master_SB+0x92>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d108      	bne.n	8002da2 <I2C_Master_SB+0xa4>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d032      	beq.n	8002dfe <I2C_Master_SB+0x100>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d02d      	beq.n	8002dfe <I2C_Master_SB+0x100>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	e024      	b.n	8002dfe <I2C_Master_SB+0x100>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10e      	bne.n	8002dda <I2C_Master_SB+0xdc>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	11db      	asrs	r3, r3, #7
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f003 0306 	and.w	r3, r3, #6
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f063 030f 	orn	r3, r3, #15
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	611a      	str	r2, [r3, #16]
 8002dd8:	e011      	b.n	8002dfe <I2C_Master_SB+0x100>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d10d      	bne.n	8002dfe <I2C_Master_SB+0x100>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	11db      	asrs	r3, r3, #7
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f003 0306 	and.w	r3, r3, #6
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f063 030e 	orn	r3, r3, #14
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	611a      	str	r2, [r3, #16]
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <I2C_Master_ADD10>:
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	611a      	str	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d004      	beq.n	8002e2e <I2C_Master_ADD10+0x26>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d108      	bne.n	8002e40 <I2C_Master_ADD10+0x38>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00c      	beq.n	8002e50 <I2C_Master_ADD10+0x48>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d007      	beq.n	8002e50 <I2C_Master_ADD10+0x48>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr

08002e5a <I2C_Master_ADDR>:
 8002e5a:	b480      	push	{r7}
 8002e5c:	b091      	sub	sp, #68	@ 0x44
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b22      	cmp	r3, #34	@ 0x22
 8002e82:	f040 8174 	bne.w	800316e <I2C_Master_ADDR+0x314>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10f      	bne.n	8002eae <I2C_Master_ADDR+0x54>
 8002e8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002e92:	2b40      	cmp	r3, #64	@ 0x40
 8002e94:	d10b      	bne.n	8002eae <I2C_Master_ADDR+0x54>
 8002e96:	2300      	movs	r3, #0
 8002e98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eac:	e16b      	b.n	8003186 <I2C_Master_ADDR+0x32c>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d11d      	bne.n	8002ef2 <I2C_Master_ADDR+0x98>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002ebe:	d118      	bne.n	8002ef2 <I2C_Master_ADDR+0x98>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eea:	1c5a      	adds	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ef0:	e149      	b.n	8003186 <I2C_Master_ADDR+0x32c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d113      	bne.n	8002f24 <I2C_Master_ADDR+0xca>
 8002efc:	2300      	movs	r3, #0
 8002efe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	e120      	b.n	8003166 <I2C_Master_ADDR+0x30c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	f040 808a 	bne.w	8003044 <I2C_Master_ADDR+0x1ea>
 8002f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f32:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f36:	d137      	bne.n	8002fa8 <I2C_Master_ADDR+0x14e>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f56:	d113      	bne.n	8002f80 <I2C_Master_ADDR+0x126>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	e0f2      	b.n	8003166 <I2C_Master_ADDR+0x30c>
 8002f80:	2300      	movs	r3, #0
 8002f82:	623b      	str	r3, [r7, #32]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	623b      	str	r3, [r7, #32]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	623b      	str	r3, [r7, #32]
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	e0de      	b.n	8003166 <I2C_Master_ADDR+0x30c>
 8002fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002faa:	2b08      	cmp	r3, #8
 8002fac:	d02e      	beq.n	800300c <I2C_Master_ADDR+0x1b2>
 8002fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d02b      	beq.n	800300c <I2C_Master_ADDR+0x1b2>
 8002fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb6:	2b12      	cmp	r3, #18
 8002fb8:	d102      	bne.n	8002fc0 <I2C_Master_ADDR+0x166>
 8002fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d125      	bne.n	800300c <I2C_Master_ADDR+0x1b2>
 8002fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d00e      	beq.n	8002fe4 <I2C_Master_ADDR+0x18a>
 8002fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d00b      	beq.n	8002fe4 <I2C_Master_ADDR+0x18a>
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d008      	beq.n	8002fe4 <I2C_Master_ADDR+0x18a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	e007      	b.n	8002ff4 <I2C_Master_ADDR+0x19a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	e0ac      	b.n	8003166 <I2C_Master_ADDR+0x30c>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	2300      	movs	r3, #0
 800301e:	61bb      	str	r3, [r7, #24]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	61bb      	str	r3, [r7, #24]
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	e090      	b.n	8003166 <I2C_Master_ADDR+0x30c>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d158      	bne.n	8003100 <I2C_Master_ADDR+0x2a6>
 800304e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003050:	2b04      	cmp	r3, #4
 8003052:	d021      	beq.n	8003098 <I2C_Master_ADDR+0x23e>
 8003054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003056:	2b02      	cmp	r3, #2
 8003058:	d01e      	beq.n	8003098 <I2C_Master_ADDR+0x23e>
 800305a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800305c:	2b10      	cmp	r3, #16
 800305e:	d01b      	beq.n	8003098 <I2C_Master_ADDR+0x23e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800306e:	601a      	str	r2, [r3, #0]
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	e012      	b.n	80030be <I2C_Master_ADDR+0x264>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	613b      	str	r3, [r7, #16]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030cc:	d14b      	bne.n	8003166 <I2C_Master_ADDR+0x30c>
 80030ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030d4:	d00b      	beq.n	80030ee <I2C_Master_ADDR+0x294>
 80030d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d008      	beq.n	80030ee <I2C_Master_ADDR+0x294>
 80030dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d005      	beq.n	80030ee <I2C_Master_ADDR+0x294>
 80030e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d002      	beq.n	80030ee <I2C_Master_ADDR+0x294>
 80030e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ea:	2b20      	cmp	r3, #32
 80030ec:	d13b      	bne.n	8003166 <I2C_Master_ADDR+0x30c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	e032      	b.n	8003166 <I2C_Master_ADDR+0x30c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800311a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800311e:	d117      	bne.n	8003150 <I2C_Master_ADDR+0x2f6>
 8003120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003122:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003126:	d00b      	beq.n	8003140 <I2C_Master_ADDR+0x2e6>
 8003128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800312a:	2b01      	cmp	r3, #1
 800312c:	d008      	beq.n	8003140 <I2C_Master_ADDR+0x2e6>
 800312e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003130:	2b08      	cmp	r3, #8
 8003132:	d005      	beq.n	8003140 <I2C_Master_ADDR+0x2e6>
 8003134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003136:	2b10      	cmp	r3, #16
 8003138:	d002      	beq.n	8003140 <I2C_Master_ADDR+0x2e6>
 800313a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800313c:	2b20      	cmp	r3, #32
 800313e:	d107      	bne.n	8003150 <I2C_Master_ADDR+0x2f6>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800314e:	605a      	str	r2, [r3, #4]
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	651a      	str	r2, [r3, #80]	@ 0x50
 800316c:	e00b      	b.n	8003186 <I2C_Master_ADDR+0x32c>
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	e7ff      	b.n	8003186 <I2C_Master_ADDR+0x32c>
 8003186:	bf00      	nop
 8003188:	3744      	adds	r7, #68	@ 0x44
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <I2C_SlaveTransmit_TXE>:
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800319e:	73fb      	strb	r3, [r7, #15]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d02b      	beq.n	8003202 <I2C_SlaveTransmit_TXE+0x72>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ae:	781a      	ldrb	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	611a      	str	r2, [r3, #16]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	625a      	str	r2, [r3, #36]	@ 0x24
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d114      	bne.n	8003202 <I2C_SlaveTransmit_TXE+0x72>
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b29      	cmp	r3, #41	@ 0x29
 80031dc:	d111      	bne.n	8003202 <I2C_SlaveTransmit_TXE+0x72>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2221      	movs	r2, #33	@ 0x21
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2228      	movs	r2, #40	@ 0x28
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7ff f9e1 	bl	80025c4 <HAL_I2C_SlaveTxCpltCallback>
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <I2C_SlaveTransmit_BTF>:
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d011      	beq.n	8003240 <I2C_SlaveTransmit_BTF+0x36>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	781a      	ldrb	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	611a      	str	r2, [r3, #16]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	625a      	str	r2, [r3, #36]	@ 0x24
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <I2C_SlaveReceive_RXNE>:
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003258:	73fb      	strb	r3, [r7, #15]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d02c      	beq.n	80032be <I2C_SlaveReceive_RXNE+0x74>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	625a      	str	r2, [r3, #36]	@ 0x24
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	3b01      	subs	r3, #1
 8003284:	b29a      	uxth	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d114      	bne.n	80032be <I2C_SlaveReceive_RXNE+0x74>
 8003294:	7bfb      	ldrb	r3, [r7, #15]
 8003296:	2b2a      	cmp	r3, #42	@ 0x2a
 8003298:	d111      	bne.n	80032be <I2C_SlaveReceive_RXNE+0x74>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2222      	movs	r2, #34	@ 0x22
 80032ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2228      	movs	r2, #40	@ 0x28
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7fd fa75 	bl	80007a8 <HAL_I2C_SlaveRxCpltCallback>
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <I2C_SlaveReceive_BTF>:
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d012      	beq.n	80032fe <I2C_SlaveReceive_BTF+0x38>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	bc80      	pop	{r7}
 8003306:	4770      	bx	lr

08003308 <I2C_Slave_ADDR>:
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
 8003312:	2300      	movs	r3, #0
 8003314:	73fb      	strb	r3, [r7, #15]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003322:	2b28      	cmp	r3, #40	@ 0x28
 8003324:	d127      	bne.n	8003376 <I2C_Slave_ADDR+0x6e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <I2C_Slave_ADDR+0x3e>
 8003342:	2301      	movs	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	09db      	lsrs	r3, r3, #7
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d103      	bne.n	800335a <I2C_Slave_ADDR+0x52>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	81bb      	strh	r3, [r7, #12]
 8003358:	e002      	b.n	8003360 <I2C_Slave_ADDR+0x58>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	81bb      	strh	r3, [r7, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003368:	89ba      	ldrh	r2, [r7, #12]
 800336a:	7bfb      	ldrb	r3, [r7, #15]
 800336c:	4619      	mov	r1, r3
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7ff f931 	bl	80025d6 <HAL_I2C_AddrCallback>
 8003374:	e00e      	b.n	8003394 <I2C_Slave_ADDR+0x8c>
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	60bb      	str	r3, [r7, #8]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <I2C_Slave_STOPF>:
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033aa:	73fb      	strb	r3, [r7, #15]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033ba:	605a      	str	r2, [r3, #4]
 80033bc:	2300      	movs	r3, #0
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033f8:	d172      	bne.n	80034e0 <I2C_Slave_STOPF+0x144>
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	2b22      	cmp	r3, #34	@ 0x22
 80033fe:	d002      	beq.n	8003406 <I2C_Slave_STOPF+0x6a>
 8003400:	7bfb      	ldrb	r3, [r7, #15]
 8003402:	2b2a      	cmp	r3, #42	@ 0x2a
 8003404:	d135      	bne.n	8003472 <I2C_Slave_STOPF+0xd6>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	b29a      	uxth	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <I2C_Slave_STOPF+0x8e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	f043 0204 	orr.w	r2, r3, #4
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	641a      	str	r2, [r3, #64]	@ 0x40
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fb36 	bl	8001ab0 <HAL_DMA_GetState>
 8003444:	4603      	mov	r3, r0
 8003446:	2b01      	cmp	r3, #1
 8003448:	d049      	beq.n	80034de <I2C_Slave_STOPF+0x142>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344e:	4a69      	ldr	r2, [pc, #420]	@ (80035f4 <I2C_Slave_STOPF+0x258>)
 8003450:	635a      	str	r2, [r3, #52]	@ 0x34
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe fab2 	bl	80019c0 <HAL_DMA_Abort_IT>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d03d      	beq.n	80034de <I2C_Slave_STOPF+0x142>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800346c:	4610      	mov	r0, r2
 800346e:	4798      	blx	r3
 8003470:	e035      	b.n	80034de <I2C_Slave_STOPF+0x142>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	b29a      	uxth	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <I2C_Slave_STOPF+0xfa>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	f043 0204 	orr.w	r2, r3, #4
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	641a      	str	r2, [r3, #64]	@ 0x40
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe fb00 	bl	8001ab0 <HAL_DMA_GetState>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d014      	beq.n	80034e0 <I2C_Slave_STOPF+0x144>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ba:	4a4e      	ldr	r2, [pc, #312]	@ (80035f4 <I2C_Slave_STOPF+0x258>)
 80034bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fe fa7c 	bl	80019c0 <HAL_DMA_Abort_IT>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <I2C_Slave_STOPF+0x144>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034d8:	4610      	mov	r0, r2
 80034da:	4798      	blx	r3
 80034dc:	e000      	b.n	80034e0 <I2C_Slave_STOPF+0x144>
 80034de:	bf00      	nop
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d03e      	beq.n	8003568 <I2C_Slave_STOPF+0x1cc>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d112      	bne.n	800351e <I2C_Slave_STOPF+0x182>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003528:	2b40      	cmp	r3, #64	@ 0x40
 800352a:	d112      	bne.n	8003552 <I2C_Slave_STOPF+0x1b6>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	625a      	str	r2, [r3, #36]	@ 0x24
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <I2C_Slave_STOPF+0x1cc>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003560:	f043 0204 	orr.w	r2, r3, #4
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	641a      	str	r2, [r3, #64]	@ 0x40
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <I2C_Slave_STOPF+0x1dc>
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8b7 	bl	80036e4 <I2C_ITError>
 8003576:	e039      	b.n	80035ec <I2C_Slave_STOPF+0x250>
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	2b2a      	cmp	r3, #42	@ 0x2a
 800357c:	d109      	bne.n	8003592 <I2C_Slave_STOPF+0x1f6>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	631a      	str	r2, [r3, #48]	@ 0x30
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2228      	movs	r2, #40	@ 0x28
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7fd f90b 	bl	80007a8 <HAL_I2C_SlaveRxCpltCallback>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b28      	cmp	r3, #40	@ 0x28
 800359c:	d111      	bne.n	80035c2 <I2C_Slave_STOPF+0x226>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a15      	ldr	r2, [pc, #84]	@ (80035f8 <I2C_Slave_STOPF+0x25c>)
 80035a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7ff f818 	bl	80025f0 <HAL_I2C_ListenCpltCallback>
 80035c0:	e014      	b.n	80035ec <I2C_Slave_STOPF+0x250>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c6:	2b22      	cmp	r3, #34	@ 0x22
 80035c8:	d002      	beq.n	80035d0 <I2C_Slave_STOPF+0x234>
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
 80035cc:	2b22      	cmp	r3, #34	@ 0x22
 80035ce:	d10d      	bne.n	80035ec <I2C_Slave_STOPF+0x250>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7fd f8de 	bl	80007a8 <HAL_I2C_SlaveRxCpltCallback>
 80035ec:	bf00      	nop
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	08003949 	.word	0x08003949
 80035f8:	ffff0000 	.word	0xffff0000

080035fc <I2C_Slave_AF>:
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800360a:	73fb      	strb	r3, [r7, #15]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d002      	beq.n	800361e <I2C_Slave_AF+0x22>
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b20      	cmp	r3, #32
 800361c:	d129      	bne.n	8003672 <I2C_Slave_AF+0x76>
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	2b28      	cmp	r3, #40	@ 0x28
 8003622:	d126      	bne.n	8003672 <I2C_Slave_AF+0x76>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a2e      	ldr	r2, [pc, #184]	@ (80036e0 <I2C_Slave_AF+0xe4>)
 8003628:	62da      	str	r2, [r3, #44]	@ 0x2c
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003642:	615a      	str	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	631a      	str	r2, [r3, #48]	@ 0x30
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fe ffc0 	bl	80025f0 <HAL_I2C_ListenCpltCallback>
 8003670:	e031      	b.n	80036d6 <I2C_Slave_AF+0xda>
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	2b21      	cmp	r3, #33	@ 0x21
 8003676:	d129      	bne.n	80036cc <I2C_Slave_AF+0xd0>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a19      	ldr	r2, [pc, #100]	@ (80036e0 <I2C_Slave_AF+0xe4>)
 800367c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2221      	movs	r2, #33	@ 0x21
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036ac:	615a      	str	r2, [r3, #20]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fe fccc 	bl	800205c <I2C_Flush_DR>
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7fe ff7d 	bl	80025c4 <HAL_I2C_SlaveTxCpltCallback>
 80036ca:	e004      	b.n	80036d6 <I2C_Slave_AF+0xda>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036d4:	615a      	str	r2, [r3, #20]
 80036d6:	bf00      	nop
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	ffff0000 	.word	0xffff0000

080036e4 <I2C_ITError>:
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f2:	73fb      	strb	r3, [r7, #15]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036fa:	73bb      	strb	r3, [r7, #14]
 80036fc:	7bbb      	ldrb	r3, [r7, #14]
 80036fe:	2b10      	cmp	r3, #16
 8003700:	d002      	beq.n	8003708 <I2C_ITError+0x24>
 8003702:	7bbb      	ldrb	r3, [r7, #14]
 8003704:	2b40      	cmp	r3, #64	@ 0x40
 8003706:	d10a      	bne.n	800371e <I2C_ITError+0x3a>
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b22      	cmp	r3, #34	@ 0x22
 800370c:	d107      	bne.n	800371e <I2C_ITError+0x3a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003724:	2b28      	cmp	r3, #40	@ 0x28
 8003726:	d107      	bne.n	8003738 <I2C_ITError+0x54>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	@ 0x30
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2228      	movs	r2, #40	@ 0x28
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003736:	e015      	b.n	8003764 <I2C_ITError+0x80>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003742:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003746:	d00a      	beq.n	800375e <I2C_ITError+0x7a>
 8003748:	7bfb      	ldrb	r3, [r7, #15]
 800374a:	2b60      	cmp	r3, #96	@ 0x60
 800374c:	d007      	beq.n	800375e <I2C_ITError+0x7a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	631a      	str	r2, [r3, #48]	@ 0x30
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800376e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003772:	d162      	bne.n	800383a <I2C_ITError+0x156>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003782:	605a      	str	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003788:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b01      	cmp	r3, #1
 8003790:	d020      	beq.n	80037d4 <I2C_ITError+0xf0>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003796:	4a6a      	ldr	r2, [pc, #424]	@ (8003940 <I2C_ITError+0x25c>)
 8003798:	635a      	str	r2, [r3, #52]	@ 0x34
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe f90e 	bl	80019c0 <HAL_DMA_Abort_IT>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 8089 	beq.w	80038be <I2C_ITError+0x1da>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0201 	bic.w	r2, r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037ce:	4610      	mov	r0, r2
 80037d0:	4798      	blx	r3
 80037d2:	e074      	b.n	80038be <I2C_ITError+0x1da>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d8:	4a59      	ldr	r2, [pc, #356]	@ (8003940 <I2C_ITError+0x25c>)
 80037da:	635a      	str	r2, [r3, #52]	@ 0x34
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7fe f8ed 	bl	80019c0 <HAL_DMA_Abort_IT>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d068      	beq.n	80038be <I2C_ITError+0x1da>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f6:	2b40      	cmp	r3, #64	@ 0x40
 80037f8:	d10b      	bne.n	8003812 <I2C_ITError+0x12e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	625a      	str	r2, [r3, #36]	@ 0x24
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0201 	bic.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003834:	4610      	mov	r0, r2
 8003836:	4798      	blx	r3
 8003838:	e041      	b.n	80038be <I2C_ITError+0x1da>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b60      	cmp	r3, #96	@ 0x60
 8003844:	d125      	bne.n	8003892 <I2C_ITError+0x1ae>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	641a      	str	r2, [r3, #64]	@ 0x40
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385e:	2b40      	cmp	r3, #64	@ 0x40
 8003860:	d10b      	bne.n	800387a <I2C_ITError+0x196>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	b2d2      	uxtb	r2, r2
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	625a      	str	r2, [r3, #36]	@ 0x24
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fe fecb 	bl	8002626 <HAL_I2C_AbortCpltCallback>
 8003890:	e015      	b.n	80038be <I2C_ITError+0x1da>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800389c:	2b40      	cmp	r3, #64	@ 0x40
 800389e:	d10b      	bne.n	80038b8 <I2C_ITError+0x1d4>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	691a      	ldr	r2, [r3, #16]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7fc ff8b 	bl	80007d4 <HAL_I2C_ErrorCallback>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	60bb      	str	r3, [r7, #8]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10e      	bne.n	80038ec <I2C_ITError+0x208>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d109      	bne.n	80038ec <I2C_ITError+0x208>
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d104      	bne.n	80038ec <I2C_ITError+0x208>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <I2C_ITError+0x218>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003902:	73fb      	strb	r3, [r7, #15]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b04      	cmp	r3, #4
 800390e:	d113      	bne.n	8003938 <I2C_ITError+0x254>
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2b28      	cmp	r3, #40	@ 0x28
 8003914:	d110      	bne.n	8003938 <I2C_ITError+0x254>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a0a      	ldr	r2, [pc, #40]	@ (8003944 <I2C_ITError+0x260>)
 800391a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	631a      	str	r2, [r3, #48]	@ 0x30
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fe fe5c 	bl	80025f0 <HAL_I2C_ListenCpltCallback>
 8003938:	bf00      	nop
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	08003949 	.word	0x08003949
 8003944:	ffff0000 	.word	0xffff0000

08003948 <I2C_DMAAbort>:
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003960:	74fb      	strb	r3, [r7, #19]
 8003962:	4b4b      	ldr	r3, [pc, #300]	@ (8003a90 <I2C_DMAAbort+0x148>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	08db      	lsrs	r3, r3, #3
 8003968:	4a4a      	ldr	r2, [pc, #296]	@ (8003a94 <I2C_DMAAbort+0x14c>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	0a1a      	lsrs	r2, r3, #8
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	00da      	lsls	r2, r3, #3
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <I2C_DMAAbort+0x48>
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003986:	f043 0220 	orr.w	r2, r3, #32
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	641a      	str	r2, [r3, #64]	@ 0x40
 800398e:	e00a      	b.n	80039a6 <I2C_DMAAbort+0x5e>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	3b01      	subs	r3, #1
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039a4:	d0ea      	beq.n	800397c <I2C_DMAAbort+0x34>
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <I2C_DMAAbort+0x6e>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b2:	2200      	movs	r2, #0
 80039b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <I2C_DMAAbort+0x7e>
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c2:	2200      	movs	r2, #0
 80039c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d4:	601a      	str	r2, [r3, #0]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	2200      	movs	r2, #0
 80039da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <I2C_DMAAbort+0xa4>
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e8:	2200      	movs	r2, #0
 80039ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <I2C_DMAAbort+0xb4>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f8:	2200      	movs	r2, #0
 80039fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b60      	cmp	r3, #96	@ 0x60
 8003a16:	d10e      	bne.n	8003a36 <I2C_DMAAbort+0xee>
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a2e:	6978      	ldr	r0, [r7, #20]
 8003a30:	f7fe fdf9 	bl	8002626 <HAL_I2C_AbortCpltCallback>
 8003a34:	e027      	b.n	8003a86 <I2C_DMAAbort+0x13e>
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a3c:	2b28      	cmp	r3, #40	@ 0x28
 8003a3e:	d117      	bne.n	8003a70 <I2C_DMAAbort+0x128>
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2200      	movs	r2, #0
 8003a64:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2228      	movs	r2, #40	@ 0x28
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003a6e:	e007      	b.n	8003a80 <I2C_DMAAbort+0x138>
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a80:	6978      	ldr	r0, [r7, #20]
 8003a82:	f7fc fea7 	bl	80007d4 <HAL_I2C_ErrorCallback>
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000000 	.word	0x20000000
 8003a94:	14f8b589 	.word	0x14f8b589

08003a98 <I2C_WaitOnSTOPRequestThroughIT>:
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	4b13      	ldr	r3, [pc, #76]	@ (8003af4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	08db      	lsrs	r3, r3, #3
 8003aaa:	4a13      	ldr	r2, [pc, #76]	@ (8003af8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	0a1a      	lsrs	r2, r3, #8
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d107      	bne.n	8003ad6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	f043 0220 	orr.w	r2, r3, #32
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e008      	b.n	8003ae8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae4:	d0e9      	beq.n	8003aba <I2C_WaitOnSTOPRequestThroughIT+0x22>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000000 	.word	0x20000000
 8003af8:	14f8b589 	.word	0x14f8b589

08003afc <I2C_ConvertOtherXferOptions>:
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b08:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003b0c:	d103      	bne.n	8003b16 <I2C_ConvertOtherXferOptions+0x1a>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b14:	e007      	b.n	8003b26 <I2C_ConvertOtherXferOptions+0x2a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003b1e:	d102      	bne.n	8003b26 <I2C_ConvertOtherXferOptions+0x2a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2208      	movs	r2, #8
 8003b24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <HAL_RCC_GetHCLKFreq>:
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	4b02      	ldr	r3, [pc, #8]	@ (8003b40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	20000000 	.word	0x20000000

08003b44 <HAL_RCC_GetPCLK1Freq>:
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	f7ff fff2 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4b05      	ldr	r3, [pc, #20]	@ (8003b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	0a1b      	lsrs	r3, r3, #8
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	4903      	ldr	r1, [pc, #12]	@ (8003b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b5a:	5ccb      	ldrb	r3, [r1, r3]
 8003b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b60:	4618      	mov	r0, r3
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	0800482c 	.word	0x0800482c

08003b6c <_vsniprintf_r>:
 8003b6c:	b530      	push	{r4, r5, lr}
 8003b6e:	4614      	mov	r4, r2
 8003b70:	2c00      	cmp	r4, #0
 8003b72:	4605      	mov	r5, r0
 8003b74:	461a      	mov	r2, r3
 8003b76:	b09b      	sub	sp, #108	@ 0x6c
 8003b78:	da05      	bge.n	8003b86 <_vsniprintf_r+0x1a>
 8003b7a:	238b      	movs	r3, #139	@ 0x8b
 8003b7c:	6003      	str	r3, [r0, #0]
 8003b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b82:	b01b      	add	sp, #108	@ 0x6c
 8003b84:	bd30      	pop	{r4, r5, pc}
 8003b86:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003b8a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	9319      	str	r3, [sp, #100]	@ 0x64
 8003b94:	bf0c      	ite	eq
 8003b96:	4623      	moveq	r3, r4
 8003b98:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003b9c:	9302      	str	r3, [sp, #8]
 8003b9e:	9305      	str	r3, [sp, #20]
 8003ba0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ba4:	9100      	str	r1, [sp, #0]
 8003ba6:	9104      	str	r1, [sp, #16]
 8003ba8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003bac:	4669      	mov	r1, sp
 8003bae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003bb0:	f000 f996 	bl	8003ee0 <_svfiprintf_r>
 8003bb4:	1c43      	adds	r3, r0, #1
 8003bb6:	bfbc      	itt	lt
 8003bb8:	238b      	movlt	r3, #139	@ 0x8b
 8003bba:	602b      	strlt	r3, [r5, #0]
 8003bbc:	2c00      	cmp	r4, #0
 8003bbe:	d0e0      	beq.n	8003b82 <_vsniprintf_r+0x16>
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	9b00      	ldr	r3, [sp, #0]
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	e7dc      	b.n	8003b82 <_vsniprintf_r+0x16>

08003bc8 <vsniprintf>:
 8003bc8:	b507      	push	{r0, r1, r2, lr}
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	460a      	mov	r2, r1
 8003bd0:	4601      	mov	r1, r0
 8003bd2:	4803      	ldr	r0, [pc, #12]	@ (8003be0 <vsniprintf+0x18>)
 8003bd4:	6800      	ldr	r0, [r0, #0]
 8003bd6:	f7ff ffc9 	bl	8003b6c <_vsniprintf_r>
 8003bda:	b003      	add	sp, #12
 8003bdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003be0:	2000000c 	.word	0x2000000c

08003be4 <__errno>:
 8003be4:	4b01      	ldr	r3, [pc, #4]	@ (8003bec <__errno+0x8>)
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	2000000c 	.word	0x2000000c

08003bf0 <__libc_init_array>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	2600      	movs	r6, #0
 8003bf4:	4d0c      	ldr	r5, [pc, #48]	@ (8003c28 <__libc_init_array+0x38>)
 8003bf6:	4c0d      	ldr	r4, [pc, #52]	@ (8003c2c <__libc_init_array+0x3c>)
 8003bf8:	1b64      	subs	r4, r4, r5
 8003bfa:	10a4      	asrs	r4, r4, #2
 8003bfc:	42a6      	cmp	r6, r4
 8003bfe:	d109      	bne.n	8003c14 <__libc_init_array+0x24>
 8003c00:	f000 fc76 	bl	80044f0 <_init>
 8003c04:	2600      	movs	r6, #0
 8003c06:	4d0a      	ldr	r5, [pc, #40]	@ (8003c30 <__libc_init_array+0x40>)
 8003c08:	4c0a      	ldr	r4, [pc, #40]	@ (8003c34 <__libc_init_array+0x44>)
 8003c0a:	1b64      	subs	r4, r4, r5
 8003c0c:	10a4      	asrs	r4, r4, #2
 8003c0e:	42a6      	cmp	r6, r4
 8003c10:	d105      	bne.n	8003c1e <__libc_init_array+0x2e>
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c18:	4798      	blx	r3
 8003c1a:	3601      	adds	r6, #1
 8003c1c:	e7ee      	b.n	8003bfc <__libc_init_array+0xc>
 8003c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c22:	4798      	blx	r3
 8003c24:	3601      	adds	r6, #1
 8003c26:	e7f2      	b.n	8003c0e <__libc_init_array+0x1e>
 8003c28:	08004868 	.word	0x08004868
 8003c2c:	08004868 	.word	0x08004868
 8003c30:	08004868 	.word	0x08004868
 8003c34:	0800486c 	.word	0x0800486c

08003c38 <__retarget_lock_acquire_recursive>:
 8003c38:	4770      	bx	lr

08003c3a <__retarget_lock_release_recursive>:
 8003c3a:	4770      	bx	lr

08003c3c <_free_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4605      	mov	r5, r0
 8003c40:	2900      	cmp	r1, #0
 8003c42:	d040      	beq.n	8003cc6 <_free_r+0x8a>
 8003c44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c48:	1f0c      	subs	r4, r1, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	bfb8      	it	lt
 8003c4e:	18e4      	addlt	r4, r4, r3
 8003c50:	f000 f8de 	bl	8003e10 <__malloc_lock>
 8003c54:	4a1c      	ldr	r2, [pc, #112]	@ (8003cc8 <_free_r+0x8c>)
 8003c56:	6813      	ldr	r3, [r2, #0]
 8003c58:	b933      	cbnz	r3, 8003c68 <_free_r+0x2c>
 8003c5a:	6063      	str	r3, [r4, #4]
 8003c5c:	6014      	str	r4, [r2, #0]
 8003c5e:	4628      	mov	r0, r5
 8003c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c64:	f000 b8da 	b.w	8003e1c <__malloc_unlock>
 8003c68:	42a3      	cmp	r3, r4
 8003c6a:	d908      	bls.n	8003c7e <_free_r+0x42>
 8003c6c:	6820      	ldr	r0, [r4, #0]
 8003c6e:	1821      	adds	r1, r4, r0
 8003c70:	428b      	cmp	r3, r1
 8003c72:	bf01      	itttt	eq
 8003c74:	6819      	ldreq	r1, [r3, #0]
 8003c76:	685b      	ldreq	r3, [r3, #4]
 8003c78:	1809      	addeq	r1, r1, r0
 8003c7a:	6021      	streq	r1, [r4, #0]
 8003c7c:	e7ed      	b.n	8003c5a <_free_r+0x1e>
 8003c7e:	461a      	mov	r2, r3
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	b10b      	cbz	r3, 8003c88 <_free_r+0x4c>
 8003c84:	42a3      	cmp	r3, r4
 8003c86:	d9fa      	bls.n	8003c7e <_free_r+0x42>
 8003c88:	6811      	ldr	r1, [r2, #0]
 8003c8a:	1850      	adds	r0, r2, r1
 8003c8c:	42a0      	cmp	r0, r4
 8003c8e:	d10b      	bne.n	8003ca8 <_free_r+0x6c>
 8003c90:	6820      	ldr	r0, [r4, #0]
 8003c92:	4401      	add	r1, r0
 8003c94:	1850      	adds	r0, r2, r1
 8003c96:	4283      	cmp	r3, r0
 8003c98:	6011      	str	r1, [r2, #0]
 8003c9a:	d1e0      	bne.n	8003c5e <_free_r+0x22>
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	4408      	add	r0, r1
 8003ca2:	6010      	str	r0, [r2, #0]
 8003ca4:	6053      	str	r3, [r2, #4]
 8003ca6:	e7da      	b.n	8003c5e <_free_r+0x22>
 8003ca8:	d902      	bls.n	8003cb0 <_free_r+0x74>
 8003caa:	230c      	movs	r3, #12
 8003cac:	602b      	str	r3, [r5, #0]
 8003cae:	e7d6      	b.n	8003c5e <_free_r+0x22>
 8003cb0:	6820      	ldr	r0, [r4, #0]
 8003cb2:	1821      	adds	r1, r4, r0
 8003cb4:	428b      	cmp	r3, r1
 8003cb6:	bf01      	itttt	eq
 8003cb8:	6819      	ldreq	r1, [r3, #0]
 8003cba:	685b      	ldreq	r3, [r3, #4]
 8003cbc:	1809      	addeq	r1, r1, r0
 8003cbe:	6021      	streq	r1, [r4, #0]
 8003cc0:	6063      	str	r3, [r4, #4]
 8003cc2:	6054      	str	r4, [r2, #4]
 8003cc4:	e7cb      	b.n	8003c5e <_free_r+0x22>
 8003cc6:	bd38      	pop	{r3, r4, r5, pc}
 8003cc8:	200002c4 	.word	0x200002c4

08003ccc <sbrk_aligned>:
 8003ccc:	b570      	push	{r4, r5, r6, lr}
 8003cce:	4e0f      	ldr	r6, [pc, #60]	@ (8003d0c <sbrk_aligned+0x40>)
 8003cd0:	460c      	mov	r4, r1
 8003cd2:	6831      	ldr	r1, [r6, #0]
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	b911      	cbnz	r1, 8003cde <sbrk_aligned+0x12>
 8003cd8:	f000 fba8 	bl	800442c <_sbrk_r>
 8003cdc:	6030      	str	r0, [r6, #0]
 8003cde:	4621      	mov	r1, r4
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	f000 fba3 	bl	800442c <_sbrk_r>
 8003ce6:	1c43      	adds	r3, r0, #1
 8003ce8:	d103      	bne.n	8003cf2 <sbrk_aligned+0x26>
 8003cea:	f04f 34ff 	mov.w	r4, #4294967295
 8003cee:	4620      	mov	r0, r4
 8003cf0:	bd70      	pop	{r4, r5, r6, pc}
 8003cf2:	1cc4      	adds	r4, r0, #3
 8003cf4:	f024 0403 	bic.w	r4, r4, #3
 8003cf8:	42a0      	cmp	r0, r4
 8003cfa:	d0f8      	beq.n	8003cee <sbrk_aligned+0x22>
 8003cfc:	1a21      	subs	r1, r4, r0
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f000 fb94 	bl	800442c <_sbrk_r>
 8003d04:	3001      	adds	r0, #1
 8003d06:	d1f2      	bne.n	8003cee <sbrk_aligned+0x22>
 8003d08:	e7ef      	b.n	8003cea <sbrk_aligned+0x1e>
 8003d0a:	bf00      	nop
 8003d0c:	200002c0 	.word	0x200002c0

08003d10 <_malloc_r>:
 8003d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d14:	1ccd      	adds	r5, r1, #3
 8003d16:	f025 0503 	bic.w	r5, r5, #3
 8003d1a:	3508      	adds	r5, #8
 8003d1c:	2d0c      	cmp	r5, #12
 8003d1e:	bf38      	it	cc
 8003d20:	250c      	movcc	r5, #12
 8003d22:	2d00      	cmp	r5, #0
 8003d24:	4606      	mov	r6, r0
 8003d26:	db01      	blt.n	8003d2c <_malloc_r+0x1c>
 8003d28:	42a9      	cmp	r1, r5
 8003d2a:	d904      	bls.n	8003d36 <_malloc_r+0x26>
 8003d2c:	230c      	movs	r3, #12
 8003d2e:	6033      	str	r3, [r6, #0]
 8003d30:	2000      	movs	r0, #0
 8003d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e0c <_malloc_r+0xfc>
 8003d3a:	f000 f869 	bl	8003e10 <__malloc_lock>
 8003d3e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d42:	461c      	mov	r4, r3
 8003d44:	bb44      	cbnz	r4, 8003d98 <_malloc_r+0x88>
 8003d46:	4629      	mov	r1, r5
 8003d48:	4630      	mov	r0, r6
 8003d4a:	f7ff ffbf 	bl	8003ccc <sbrk_aligned>
 8003d4e:	1c43      	adds	r3, r0, #1
 8003d50:	4604      	mov	r4, r0
 8003d52:	d158      	bne.n	8003e06 <_malloc_r+0xf6>
 8003d54:	f8d8 4000 	ldr.w	r4, [r8]
 8003d58:	4627      	mov	r7, r4
 8003d5a:	2f00      	cmp	r7, #0
 8003d5c:	d143      	bne.n	8003de6 <_malloc_r+0xd6>
 8003d5e:	2c00      	cmp	r4, #0
 8003d60:	d04b      	beq.n	8003dfa <_malloc_r+0xea>
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	4639      	mov	r1, r7
 8003d66:	4630      	mov	r0, r6
 8003d68:	eb04 0903 	add.w	r9, r4, r3
 8003d6c:	f000 fb5e 	bl	800442c <_sbrk_r>
 8003d70:	4581      	cmp	r9, r0
 8003d72:	d142      	bne.n	8003dfa <_malloc_r+0xea>
 8003d74:	6821      	ldr	r1, [r4, #0]
 8003d76:	4630      	mov	r0, r6
 8003d78:	1a6d      	subs	r5, r5, r1
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	f7ff ffa6 	bl	8003ccc <sbrk_aligned>
 8003d80:	3001      	adds	r0, #1
 8003d82:	d03a      	beq.n	8003dfa <_malloc_r+0xea>
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	442b      	add	r3, r5
 8003d88:	6023      	str	r3, [r4, #0]
 8003d8a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	bb62      	cbnz	r2, 8003dec <_malloc_r+0xdc>
 8003d92:	f8c8 7000 	str.w	r7, [r8]
 8003d96:	e00f      	b.n	8003db8 <_malloc_r+0xa8>
 8003d98:	6822      	ldr	r2, [r4, #0]
 8003d9a:	1b52      	subs	r2, r2, r5
 8003d9c:	d420      	bmi.n	8003de0 <_malloc_r+0xd0>
 8003d9e:	2a0b      	cmp	r2, #11
 8003da0:	d917      	bls.n	8003dd2 <_malloc_r+0xc2>
 8003da2:	1961      	adds	r1, r4, r5
 8003da4:	42a3      	cmp	r3, r4
 8003da6:	6025      	str	r5, [r4, #0]
 8003da8:	bf18      	it	ne
 8003daa:	6059      	strne	r1, [r3, #4]
 8003dac:	6863      	ldr	r3, [r4, #4]
 8003dae:	bf08      	it	eq
 8003db0:	f8c8 1000 	streq.w	r1, [r8]
 8003db4:	5162      	str	r2, [r4, r5]
 8003db6:	604b      	str	r3, [r1, #4]
 8003db8:	4630      	mov	r0, r6
 8003dba:	f000 f82f 	bl	8003e1c <__malloc_unlock>
 8003dbe:	f104 000b 	add.w	r0, r4, #11
 8003dc2:	1d23      	adds	r3, r4, #4
 8003dc4:	f020 0007 	bic.w	r0, r0, #7
 8003dc8:	1ac2      	subs	r2, r0, r3
 8003dca:	bf1c      	itt	ne
 8003dcc:	1a1b      	subne	r3, r3, r0
 8003dce:	50a3      	strne	r3, [r4, r2]
 8003dd0:	e7af      	b.n	8003d32 <_malloc_r+0x22>
 8003dd2:	6862      	ldr	r2, [r4, #4]
 8003dd4:	42a3      	cmp	r3, r4
 8003dd6:	bf0c      	ite	eq
 8003dd8:	f8c8 2000 	streq.w	r2, [r8]
 8003ddc:	605a      	strne	r2, [r3, #4]
 8003dde:	e7eb      	b.n	8003db8 <_malloc_r+0xa8>
 8003de0:	4623      	mov	r3, r4
 8003de2:	6864      	ldr	r4, [r4, #4]
 8003de4:	e7ae      	b.n	8003d44 <_malloc_r+0x34>
 8003de6:	463c      	mov	r4, r7
 8003de8:	687f      	ldr	r7, [r7, #4]
 8003dea:	e7b6      	b.n	8003d5a <_malloc_r+0x4a>
 8003dec:	461a      	mov	r2, r3
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	42a3      	cmp	r3, r4
 8003df2:	d1fb      	bne.n	8003dec <_malloc_r+0xdc>
 8003df4:	2300      	movs	r3, #0
 8003df6:	6053      	str	r3, [r2, #4]
 8003df8:	e7de      	b.n	8003db8 <_malloc_r+0xa8>
 8003dfa:	230c      	movs	r3, #12
 8003dfc:	4630      	mov	r0, r6
 8003dfe:	6033      	str	r3, [r6, #0]
 8003e00:	f000 f80c 	bl	8003e1c <__malloc_unlock>
 8003e04:	e794      	b.n	8003d30 <_malloc_r+0x20>
 8003e06:	6005      	str	r5, [r0, #0]
 8003e08:	e7d6      	b.n	8003db8 <_malloc_r+0xa8>
 8003e0a:	bf00      	nop
 8003e0c:	200002c4 	.word	0x200002c4

08003e10 <__malloc_lock>:
 8003e10:	4801      	ldr	r0, [pc, #4]	@ (8003e18 <__malloc_lock+0x8>)
 8003e12:	f7ff bf11 	b.w	8003c38 <__retarget_lock_acquire_recursive>
 8003e16:	bf00      	nop
 8003e18:	200002bc 	.word	0x200002bc

08003e1c <__malloc_unlock>:
 8003e1c:	4801      	ldr	r0, [pc, #4]	@ (8003e24 <__malloc_unlock+0x8>)
 8003e1e:	f7ff bf0c 	b.w	8003c3a <__retarget_lock_release_recursive>
 8003e22:	bf00      	nop
 8003e24:	200002bc 	.word	0x200002bc

08003e28 <__ssputs_r>:
 8003e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e2c:	461f      	mov	r7, r3
 8003e2e:	688e      	ldr	r6, [r1, #8]
 8003e30:	4682      	mov	sl, r0
 8003e32:	42be      	cmp	r6, r7
 8003e34:	460c      	mov	r4, r1
 8003e36:	4690      	mov	r8, r2
 8003e38:	680b      	ldr	r3, [r1, #0]
 8003e3a:	d82d      	bhi.n	8003e98 <__ssputs_r+0x70>
 8003e3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003e44:	d026      	beq.n	8003e94 <__ssputs_r+0x6c>
 8003e46:	6965      	ldr	r5, [r4, #20]
 8003e48:	6909      	ldr	r1, [r1, #16]
 8003e4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e4e:	eba3 0901 	sub.w	r9, r3, r1
 8003e52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e56:	1c7b      	adds	r3, r7, #1
 8003e58:	444b      	add	r3, r9
 8003e5a:	106d      	asrs	r5, r5, #1
 8003e5c:	429d      	cmp	r5, r3
 8003e5e:	bf38      	it	cc
 8003e60:	461d      	movcc	r5, r3
 8003e62:	0553      	lsls	r3, r2, #21
 8003e64:	d527      	bpl.n	8003eb6 <__ssputs_r+0x8e>
 8003e66:	4629      	mov	r1, r5
 8003e68:	f7ff ff52 	bl	8003d10 <_malloc_r>
 8003e6c:	4606      	mov	r6, r0
 8003e6e:	b360      	cbz	r0, 8003eca <__ssputs_r+0xa2>
 8003e70:	464a      	mov	r2, r9
 8003e72:	6921      	ldr	r1, [r4, #16]
 8003e74:	f000 faf8 	bl	8004468 <memcpy>
 8003e78:	89a3      	ldrh	r3, [r4, #12]
 8003e7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003e7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e82:	81a3      	strh	r3, [r4, #12]
 8003e84:	6126      	str	r6, [r4, #16]
 8003e86:	444e      	add	r6, r9
 8003e88:	6026      	str	r6, [r4, #0]
 8003e8a:	463e      	mov	r6, r7
 8003e8c:	6165      	str	r5, [r4, #20]
 8003e8e:	eba5 0509 	sub.w	r5, r5, r9
 8003e92:	60a5      	str	r5, [r4, #8]
 8003e94:	42be      	cmp	r6, r7
 8003e96:	d900      	bls.n	8003e9a <__ssputs_r+0x72>
 8003e98:	463e      	mov	r6, r7
 8003e9a:	4632      	mov	r2, r6
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	6820      	ldr	r0, [r4, #0]
 8003ea0:	f000 faaa 	bl	80043f8 <memmove>
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	68a3      	ldr	r3, [r4, #8]
 8003ea8:	1b9b      	subs	r3, r3, r6
 8003eaa:	60a3      	str	r3, [r4, #8]
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	4433      	add	r3, r6
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eb6:	462a      	mov	r2, r5
 8003eb8:	f000 fae4 	bl	8004484 <_realloc_r>
 8003ebc:	4606      	mov	r6, r0
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	d1e0      	bne.n	8003e84 <__ssputs_r+0x5c>
 8003ec2:	4650      	mov	r0, sl
 8003ec4:	6921      	ldr	r1, [r4, #16]
 8003ec6:	f7ff feb9 	bl	8003c3c <_free_r>
 8003eca:	230c      	movs	r3, #12
 8003ecc:	f8ca 3000 	str.w	r3, [sl]
 8003ed0:	89a3      	ldrh	r3, [r4, #12]
 8003ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eda:	81a3      	strh	r3, [r4, #12]
 8003edc:	e7e9      	b.n	8003eb2 <__ssputs_r+0x8a>
	...

08003ee0 <_svfiprintf_r>:
 8003ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ee4:	4698      	mov	r8, r3
 8003ee6:	898b      	ldrh	r3, [r1, #12]
 8003ee8:	4607      	mov	r7, r0
 8003eea:	061b      	lsls	r3, r3, #24
 8003eec:	460d      	mov	r5, r1
 8003eee:	4614      	mov	r4, r2
 8003ef0:	b09d      	sub	sp, #116	@ 0x74
 8003ef2:	d510      	bpl.n	8003f16 <_svfiprintf_r+0x36>
 8003ef4:	690b      	ldr	r3, [r1, #16]
 8003ef6:	b973      	cbnz	r3, 8003f16 <_svfiprintf_r+0x36>
 8003ef8:	2140      	movs	r1, #64	@ 0x40
 8003efa:	f7ff ff09 	bl	8003d10 <_malloc_r>
 8003efe:	6028      	str	r0, [r5, #0]
 8003f00:	6128      	str	r0, [r5, #16]
 8003f02:	b930      	cbnz	r0, 8003f12 <_svfiprintf_r+0x32>
 8003f04:	230c      	movs	r3, #12
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0c:	b01d      	add	sp, #116	@ 0x74
 8003f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f12:	2340      	movs	r3, #64	@ 0x40
 8003f14:	616b      	str	r3, [r5, #20]
 8003f16:	2300      	movs	r3, #0
 8003f18:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f1a:	2320      	movs	r3, #32
 8003f1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f20:	2330      	movs	r3, #48	@ 0x30
 8003f22:	f04f 0901 	mov.w	r9, #1
 8003f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f2a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80040c4 <_svfiprintf_r+0x1e4>
 8003f2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f32:	4623      	mov	r3, r4
 8003f34:	469a      	mov	sl, r3
 8003f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f3a:	b10a      	cbz	r2, 8003f40 <_svfiprintf_r+0x60>
 8003f3c:	2a25      	cmp	r2, #37	@ 0x25
 8003f3e:	d1f9      	bne.n	8003f34 <_svfiprintf_r+0x54>
 8003f40:	ebba 0b04 	subs.w	fp, sl, r4
 8003f44:	d00b      	beq.n	8003f5e <_svfiprintf_r+0x7e>
 8003f46:	465b      	mov	r3, fp
 8003f48:	4622      	mov	r2, r4
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	4638      	mov	r0, r7
 8003f4e:	f7ff ff6b 	bl	8003e28 <__ssputs_r>
 8003f52:	3001      	adds	r0, #1
 8003f54:	f000 80a7 	beq.w	80040a6 <_svfiprintf_r+0x1c6>
 8003f58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f5a:	445a      	add	r2, fp
 8003f5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 809f 	beq.w	80040a6 <_svfiprintf_r+0x1c6>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f72:	f10a 0a01 	add.w	sl, sl, #1
 8003f76:	9304      	str	r3, [sp, #16]
 8003f78:	9307      	str	r3, [sp, #28]
 8003f7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f80:	4654      	mov	r4, sl
 8003f82:	2205      	movs	r2, #5
 8003f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f88:	484e      	ldr	r0, [pc, #312]	@ (80040c4 <_svfiprintf_r+0x1e4>)
 8003f8a:	f000 fa5f 	bl	800444c <memchr>
 8003f8e:	9a04      	ldr	r2, [sp, #16]
 8003f90:	b9d8      	cbnz	r0, 8003fca <_svfiprintf_r+0xea>
 8003f92:	06d0      	lsls	r0, r2, #27
 8003f94:	bf44      	itt	mi
 8003f96:	2320      	movmi	r3, #32
 8003f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f9c:	0711      	lsls	r1, r2, #28
 8003f9e:	bf44      	itt	mi
 8003fa0:	232b      	movmi	r3, #43	@ 0x2b
 8003fa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8003faa:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fac:	d015      	beq.n	8003fda <_svfiprintf_r+0xfa>
 8003fae:	4654      	mov	r4, sl
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f04f 0c0a 	mov.w	ip, #10
 8003fb6:	9a07      	ldr	r2, [sp, #28]
 8003fb8:	4621      	mov	r1, r4
 8003fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fbe:	3b30      	subs	r3, #48	@ 0x30
 8003fc0:	2b09      	cmp	r3, #9
 8003fc2:	d94b      	bls.n	800405c <_svfiprintf_r+0x17c>
 8003fc4:	b1b0      	cbz	r0, 8003ff4 <_svfiprintf_r+0x114>
 8003fc6:	9207      	str	r2, [sp, #28]
 8003fc8:	e014      	b.n	8003ff4 <_svfiprintf_r+0x114>
 8003fca:	eba0 0308 	sub.w	r3, r0, r8
 8003fce:	fa09 f303 	lsl.w	r3, r9, r3
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	46a2      	mov	sl, r4
 8003fd6:	9304      	str	r3, [sp, #16]
 8003fd8:	e7d2      	b.n	8003f80 <_svfiprintf_r+0xa0>
 8003fda:	9b03      	ldr	r3, [sp, #12]
 8003fdc:	1d19      	adds	r1, r3, #4
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	9103      	str	r1, [sp, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	bfbb      	ittet	lt
 8003fe6:	425b      	neglt	r3, r3
 8003fe8:	f042 0202 	orrlt.w	r2, r2, #2
 8003fec:	9307      	strge	r3, [sp, #28]
 8003fee:	9307      	strlt	r3, [sp, #28]
 8003ff0:	bfb8      	it	lt
 8003ff2:	9204      	strlt	r2, [sp, #16]
 8003ff4:	7823      	ldrb	r3, [r4, #0]
 8003ff6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ff8:	d10a      	bne.n	8004010 <_svfiprintf_r+0x130>
 8003ffa:	7863      	ldrb	r3, [r4, #1]
 8003ffc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ffe:	d132      	bne.n	8004066 <_svfiprintf_r+0x186>
 8004000:	9b03      	ldr	r3, [sp, #12]
 8004002:	3402      	adds	r4, #2
 8004004:	1d1a      	adds	r2, r3, #4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	9203      	str	r2, [sp, #12]
 800400a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800400e:	9305      	str	r3, [sp, #20]
 8004010:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80040c8 <_svfiprintf_r+0x1e8>
 8004014:	2203      	movs	r2, #3
 8004016:	4650      	mov	r0, sl
 8004018:	7821      	ldrb	r1, [r4, #0]
 800401a:	f000 fa17 	bl	800444c <memchr>
 800401e:	b138      	cbz	r0, 8004030 <_svfiprintf_r+0x150>
 8004020:	2240      	movs	r2, #64	@ 0x40
 8004022:	9b04      	ldr	r3, [sp, #16]
 8004024:	eba0 000a 	sub.w	r0, r0, sl
 8004028:	4082      	lsls	r2, r0
 800402a:	4313      	orrs	r3, r2
 800402c:	3401      	adds	r4, #1
 800402e:	9304      	str	r3, [sp, #16]
 8004030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004034:	2206      	movs	r2, #6
 8004036:	4825      	ldr	r0, [pc, #148]	@ (80040cc <_svfiprintf_r+0x1ec>)
 8004038:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800403c:	f000 fa06 	bl	800444c <memchr>
 8004040:	2800      	cmp	r0, #0
 8004042:	d036      	beq.n	80040b2 <_svfiprintf_r+0x1d2>
 8004044:	4b22      	ldr	r3, [pc, #136]	@ (80040d0 <_svfiprintf_r+0x1f0>)
 8004046:	bb1b      	cbnz	r3, 8004090 <_svfiprintf_r+0x1b0>
 8004048:	9b03      	ldr	r3, [sp, #12]
 800404a:	3307      	adds	r3, #7
 800404c:	f023 0307 	bic.w	r3, r3, #7
 8004050:	3308      	adds	r3, #8
 8004052:	9303      	str	r3, [sp, #12]
 8004054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004056:	4433      	add	r3, r6
 8004058:	9309      	str	r3, [sp, #36]	@ 0x24
 800405a:	e76a      	b.n	8003f32 <_svfiprintf_r+0x52>
 800405c:	460c      	mov	r4, r1
 800405e:	2001      	movs	r0, #1
 8004060:	fb0c 3202 	mla	r2, ip, r2, r3
 8004064:	e7a8      	b.n	8003fb8 <_svfiprintf_r+0xd8>
 8004066:	2300      	movs	r3, #0
 8004068:	f04f 0c0a 	mov.w	ip, #10
 800406c:	4619      	mov	r1, r3
 800406e:	3401      	adds	r4, #1
 8004070:	9305      	str	r3, [sp, #20]
 8004072:	4620      	mov	r0, r4
 8004074:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004078:	3a30      	subs	r2, #48	@ 0x30
 800407a:	2a09      	cmp	r2, #9
 800407c:	d903      	bls.n	8004086 <_svfiprintf_r+0x1a6>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0c6      	beq.n	8004010 <_svfiprintf_r+0x130>
 8004082:	9105      	str	r1, [sp, #20]
 8004084:	e7c4      	b.n	8004010 <_svfiprintf_r+0x130>
 8004086:	4604      	mov	r4, r0
 8004088:	2301      	movs	r3, #1
 800408a:	fb0c 2101 	mla	r1, ip, r1, r2
 800408e:	e7f0      	b.n	8004072 <_svfiprintf_r+0x192>
 8004090:	ab03      	add	r3, sp, #12
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	462a      	mov	r2, r5
 8004096:	4638      	mov	r0, r7
 8004098:	4b0e      	ldr	r3, [pc, #56]	@ (80040d4 <_svfiprintf_r+0x1f4>)
 800409a:	a904      	add	r1, sp, #16
 800409c:	f3af 8000 	nop.w
 80040a0:	1c42      	adds	r2, r0, #1
 80040a2:	4606      	mov	r6, r0
 80040a4:	d1d6      	bne.n	8004054 <_svfiprintf_r+0x174>
 80040a6:	89ab      	ldrh	r3, [r5, #12]
 80040a8:	065b      	lsls	r3, r3, #25
 80040aa:	f53f af2d 	bmi.w	8003f08 <_svfiprintf_r+0x28>
 80040ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040b0:	e72c      	b.n	8003f0c <_svfiprintf_r+0x2c>
 80040b2:	ab03      	add	r3, sp, #12
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	462a      	mov	r2, r5
 80040b8:	4638      	mov	r0, r7
 80040ba:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <_svfiprintf_r+0x1f4>)
 80040bc:	a904      	add	r1, sp, #16
 80040be:	f000 f87d 	bl	80041bc <_printf_i>
 80040c2:	e7ed      	b.n	80040a0 <_svfiprintf_r+0x1c0>
 80040c4:	08004834 	.word	0x08004834
 80040c8:	0800483a 	.word	0x0800483a
 80040cc:	0800483e 	.word	0x0800483e
 80040d0:	00000000 	.word	0x00000000
 80040d4:	08003e29 	.word	0x08003e29

080040d8 <_printf_common>:
 80040d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040dc:	4616      	mov	r6, r2
 80040de:	4698      	mov	r8, r3
 80040e0:	688a      	ldr	r2, [r1, #8]
 80040e2:	690b      	ldr	r3, [r1, #16]
 80040e4:	4607      	mov	r7, r0
 80040e6:	4293      	cmp	r3, r2
 80040e8:	bfb8      	it	lt
 80040ea:	4613      	movlt	r3, r2
 80040ec:	6033      	str	r3, [r6, #0]
 80040ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80040f2:	460c      	mov	r4, r1
 80040f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040f8:	b10a      	cbz	r2, 80040fe <_printf_common+0x26>
 80040fa:	3301      	adds	r3, #1
 80040fc:	6033      	str	r3, [r6, #0]
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	0699      	lsls	r1, r3, #26
 8004102:	bf42      	ittt	mi
 8004104:	6833      	ldrmi	r3, [r6, #0]
 8004106:	3302      	addmi	r3, #2
 8004108:	6033      	strmi	r3, [r6, #0]
 800410a:	6825      	ldr	r5, [r4, #0]
 800410c:	f015 0506 	ands.w	r5, r5, #6
 8004110:	d106      	bne.n	8004120 <_printf_common+0x48>
 8004112:	f104 0a19 	add.w	sl, r4, #25
 8004116:	68e3      	ldr	r3, [r4, #12]
 8004118:	6832      	ldr	r2, [r6, #0]
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	42ab      	cmp	r3, r5
 800411e:	dc2b      	bgt.n	8004178 <_printf_common+0xa0>
 8004120:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004124:	6822      	ldr	r2, [r4, #0]
 8004126:	3b00      	subs	r3, #0
 8004128:	bf18      	it	ne
 800412a:	2301      	movne	r3, #1
 800412c:	0692      	lsls	r2, r2, #26
 800412e:	d430      	bmi.n	8004192 <_printf_common+0xba>
 8004130:	4641      	mov	r1, r8
 8004132:	4638      	mov	r0, r7
 8004134:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004138:	47c8      	blx	r9
 800413a:	3001      	adds	r0, #1
 800413c:	d023      	beq.n	8004186 <_printf_common+0xae>
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	6922      	ldr	r2, [r4, #16]
 8004142:	f003 0306 	and.w	r3, r3, #6
 8004146:	2b04      	cmp	r3, #4
 8004148:	bf14      	ite	ne
 800414a:	2500      	movne	r5, #0
 800414c:	6833      	ldreq	r3, [r6, #0]
 800414e:	f04f 0600 	mov.w	r6, #0
 8004152:	bf08      	it	eq
 8004154:	68e5      	ldreq	r5, [r4, #12]
 8004156:	f104 041a 	add.w	r4, r4, #26
 800415a:	bf08      	it	eq
 800415c:	1aed      	subeq	r5, r5, r3
 800415e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004162:	bf08      	it	eq
 8004164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004168:	4293      	cmp	r3, r2
 800416a:	bfc4      	itt	gt
 800416c:	1a9b      	subgt	r3, r3, r2
 800416e:	18ed      	addgt	r5, r5, r3
 8004170:	42b5      	cmp	r5, r6
 8004172:	d11a      	bne.n	80041aa <_printf_common+0xd2>
 8004174:	2000      	movs	r0, #0
 8004176:	e008      	b.n	800418a <_printf_common+0xb2>
 8004178:	2301      	movs	r3, #1
 800417a:	4652      	mov	r2, sl
 800417c:	4641      	mov	r1, r8
 800417e:	4638      	mov	r0, r7
 8004180:	47c8      	blx	r9
 8004182:	3001      	adds	r0, #1
 8004184:	d103      	bne.n	800418e <_printf_common+0xb6>
 8004186:	f04f 30ff 	mov.w	r0, #4294967295
 800418a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800418e:	3501      	adds	r5, #1
 8004190:	e7c1      	b.n	8004116 <_printf_common+0x3e>
 8004192:	2030      	movs	r0, #48	@ 0x30
 8004194:	18e1      	adds	r1, r4, r3
 8004196:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041a0:	4422      	add	r2, r4
 80041a2:	3302      	adds	r3, #2
 80041a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041a8:	e7c2      	b.n	8004130 <_printf_common+0x58>
 80041aa:	2301      	movs	r3, #1
 80041ac:	4622      	mov	r2, r4
 80041ae:	4641      	mov	r1, r8
 80041b0:	4638      	mov	r0, r7
 80041b2:	47c8      	blx	r9
 80041b4:	3001      	adds	r0, #1
 80041b6:	d0e6      	beq.n	8004186 <_printf_common+0xae>
 80041b8:	3601      	adds	r6, #1
 80041ba:	e7d9      	b.n	8004170 <_printf_common+0x98>

080041bc <_printf_i>:
 80041bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041c0:	7e0f      	ldrb	r7, [r1, #24]
 80041c2:	4691      	mov	r9, r2
 80041c4:	2f78      	cmp	r7, #120	@ 0x78
 80041c6:	4680      	mov	r8, r0
 80041c8:	460c      	mov	r4, r1
 80041ca:	469a      	mov	sl, r3
 80041cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041d2:	d807      	bhi.n	80041e4 <_printf_i+0x28>
 80041d4:	2f62      	cmp	r7, #98	@ 0x62
 80041d6:	d80a      	bhi.n	80041ee <_printf_i+0x32>
 80041d8:	2f00      	cmp	r7, #0
 80041da:	f000 80d1 	beq.w	8004380 <_printf_i+0x1c4>
 80041de:	2f58      	cmp	r7, #88	@ 0x58
 80041e0:	f000 80b8 	beq.w	8004354 <_printf_i+0x198>
 80041e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041ec:	e03a      	b.n	8004264 <_printf_i+0xa8>
 80041ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041f2:	2b15      	cmp	r3, #21
 80041f4:	d8f6      	bhi.n	80041e4 <_printf_i+0x28>
 80041f6:	a101      	add	r1, pc, #4	@ (adr r1, 80041fc <_printf_i+0x40>)
 80041f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041fc:	08004255 	.word	0x08004255
 8004200:	08004269 	.word	0x08004269
 8004204:	080041e5 	.word	0x080041e5
 8004208:	080041e5 	.word	0x080041e5
 800420c:	080041e5 	.word	0x080041e5
 8004210:	080041e5 	.word	0x080041e5
 8004214:	08004269 	.word	0x08004269
 8004218:	080041e5 	.word	0x080041e5
 800421c:	080041e5 	.word	0x080041e5
 8004220:	080041e5 	.word	0x080041e5
 8004224:	080041e5 	.word	0x080041e5
 8004228:	08004367 	.word	0x08004367
 800422c:	08004293 	.word	0x08004293
 8004230:	08004321 	.word	0x08004321
 8004234:	080041e5 	.word	0x080041e5
 8004238:	080041e5 	.word	0x080041e5
 800423c:	08004389 	.word	0x08004389
 8004240:	080041e5 	.word	0x080041e5
 8004244:	08004293 	.word	0x08004293
 8004248:	080041e5 	.word	0x080041e5
 800424c:	080041e5 	.word	0x080041e5
 8004250:	08004329 	.word	0x08004329
 8004254:	6833      	ldr	r3, [r6, #0]
 8004256:	1d1a      	adds	r2, r3, #4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6032      	str	r2, [r6, #0]
 800425c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004260:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004264:	2301      	movs	r3, #1
 8004266:	e09c      	b.n	80043a2 <_printf_i+0x1e6>
 8004268:	6833      	ldr	r3, [r6, #0]
 800426a:	6820      	ldr	r0, [r4, #0]
 800426c:	1d19      	adds	r1, r3, #4
 800426e:	6031      	str	r1, [r6, #0]
 8004270:	0606      	lsls	r6, r0, #24
 8004272:	d501      	bpl.n	8004278 <_printf_i+0xbc>
 8004274:	681d      	ldr	r5, [r3, #0]
 8004276:	e003      	b.n	8004280 <_printf_i+0xc4>
 8004278:	0645      	lsls	r5, r0, #25
 800427a:	d5fb      	bpl.n	8004274 <_printf_i+0xb8>
 800427c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004280:	2d00      	cmp	r5, #0
 8004282:	da03      	bge.n	800428c <_printf_i+0xd0>
 8004284:	232d      	movs	r3, #45	@ 0x2d
 8004286:	426d      	negs	r5, r5
 8004288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800428c:	230a      	movs	r3, #10
 800428e:	4858      	ldr	r0, [pc, #352]	@ (80043f0 <_printf_i+0x234>)
 8004290:	e011      	b.n	80042b6 <_printf_i+0xfa>
 8004292:	6821      	ldr	r1, [r4, #0]
 8004294:	6833      	ldr	r3, [r6, #0]
 8004296:	0608      	lsls	r0, r1, #24
 8004298:	f853 5b04 	ldr.w	r5, [r3], #4
 800429c:	d402      	bmi.n	80042a4 <_printf_i+0xe8>
 800429e:	0649      	lsls	r1, r1, #25
 80042a0:	bf48      	it	mi
 80042a2:	b2ad      	uxthmi	r5, r5
 80042a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80042a6:	6033      	str	r3, [r6, #0]
 80042a8:	bf14      	ite	ne
 80042aa:	230a      	movne	r3, #10
 80042ac:	2308      	moveq	r3, #8
 80042ae:	4850      	ldr	r0, [pc, #320]	@ (80043f0 <_printf_i+0x234>)
 80042b0:	2100      	movs	r1, #0
 80042b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042b6:	6866      	ldr	r6, [r4, #4]
 80042b8:	2e00      	cmp	r6, #0
 80042ba:	60a6      	str	r6, [r4, #8]
 80042bc:	db05      	blt.n	80042ca <_printf_i+0x10e>
 80042be:	6821      	ldr	r1, [r4, #0]
 80042c0:	432e      	orrs	r6, r5
 80042c2:	f021 0104 	bic.w	r1, r1, #4
 80042c6:	6021      	str	r1, [r4, #0]
 80042c8:	d04b      	beq.n	8004362 <_printf_i+0x1a6>
 80042ca:	4616      	mov	r6, r2
 80042cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80042d0:	fb03 5711 	mls	r7, r3, r1, r5
 80042d4:	5dc7      	ldrb	r7, [r0, r7]
 80042d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042da:	462f      	mov	r7, r5
 80042dc:	42bb      	cmp	r3, r7
 80042de:	460d      	mov	r5, r1
 80042e0:	d9f4      	bls.n	80042cc <_printf_i+0x110>
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d10b      	bne.n	80042fe <_printf_i+0x142>
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	07df      	lsls	r7, r3, #31
 80042ea:	d508      	bpl.n	80042fe <_printf_i+0x142>
 80042ec:	6923      	ldr	r3, [r4, #16]
 80042ee:	6861      	ldr	r1, [r4, #4]
 80042f0:	4299      	cmp	r1, r3
 80042f2:	bfde      	ittt	le
 80042f4:	2330      	movle	r3, #48	@ 0x30
 80042f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042fe:	1b92      	subs	r2, r2, r6
 8004300:	6122      	str	r2, [r4, #16]
 8004302:	464b      	mov	r3, r9
 8004304:	4621      	mov	r1, r4
 8004306:	4640      	mov	r0, r8
 8004308:	f8cd a000 	str.w	sl, [sp]
 800430c:	aa03      	add	r2, sp, #12
 800430e:	f7ff fee3 	bl	80040d8 <_printf_common>
 8004312:	3001      	adds	r0, #1
 8004314:	d14a      	bne.n	80043ac <_printf_i+0x1f0>
 8004316:	f04f 30ff 	mov.w	r0, #4294967295
 800431a:	b004      	add	sp, #16
 800431c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	f043 0320 	orr.w	r3, r3, #32
 8004326:	6023      	str	r3, [r4, #0]
 8004328:	2778      	movs	r7, #120	@ 0x78
 800432a:	4832      	ldr	r0, [pc, #200]	@ (80043f4 <_printf_i+0x238>)
 800432c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	6831      	ldr	r1, [r6, #0]
 8004334:	061f      	lsls	r7, r3, #24
 8004336:	f851 5b04 	ldr.w	r5, [r1], #4
 800433a:	d402      	bmi.n	8004342 <_printf_i+0x186>
 800433c:	065f      	lsls	r7, r3, #25
 800433e:	bf48      	it	mi
 8004340:	b2ad      	uxthmi	r5, r5
 8004342:	6031      	str	r1, [r6, #0]
 8004344:	07d9      	lsls	r1, r3, #31
 8004346:	bf44      	itt	mi
 8004348:	f043 0320 	orrmi.w	r3, r3, #32
 800434c:	6023      	strmi	r3, [r4, #0]
 800434e:	b11d      	cbz	r5, 8004358 <_printf_i+0x19c>
 8004350:	2310      	movs	r3, #16
 8004352:	e7ad      	b.n	80042b0 <_printf_i+0xf4>
 8004354:	4826      	ldr	r0, [pc, #152]	@ (80043f0 <_printf_i+0x234>)
 8004356:	e7e9      	b.n	800432c <_printf_i+0x170>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	f023 0320 	bic.w	r3, r3, #32
 800435e:	6023      	str	r3, [r4, #0]
 8004360:	e7f6      	b.n	8004350 <_printf_i+0x194>
 8004362:	4616      	mov	r6, r2
 8004364:	e7bd      	b.n	80042e2 <_printf_i+0x126>
 8004366:	6833      	ldr	r3, [r6, #0]
 8004368:	6825      	ldr	r5, [r4, #0]
 800436a:	1d18      	adds	r0, r3, #4
 800436c:	6961      	ldr	r1, [r4, #20]
 800436e:	6030      	str	r0, [r6, #0]
 8004370:	062e      	lsls	r6, r5, #24
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	d501      	bpl.n	800437a <_printf_i+0x1be>
 8004376:	6019      	str	r1, [r3, #0]
 8004378:	e002      	b.n	8004380 <_printf_i+0x1c4>
 800437a:	0668      	lsls	r0, r5, #25
 800437c:	d5fb      	bpl.n	8004376 <_printf_i+0x1ba>
 800437e:	8019      	strh	r1, [r3, #0]
 8004380:	2300      	movs	r3, #0
 8004382:	4616      	mov	r6, r2
 8004384:	6123      	str	r3, [r4, #16]
 8004386:	e7bc      	b.n	8004302 <_printf_i+0x146>
 8004388:	6833      	ldr	r3, [r6, #0]
 800438a:	2100      	movs	r1, #0
 800438c:	1d1a      	adds	r2, r3, #4
 800438e:	6032      	str	r2, [r6, #0]
 8004390:	681e      	ldr	r6, [r3, #0]
 8004392:	6862      	ldr	r2, [r4, #4]
 8004394:	4630      	mov	r0, r6
 8004396:	f000 f859 	bl	800444c <memchr>
 800439a:	b108      	cbz	r0, 80043a0 <_printf_i+0x1e4>
 800439c:	1b80      	subs	r0, r0, r6
 800439e:	6060      	str	r0, [r4, #4]
 80043a0:	6863      	ldr	r3, [r4, #4]
 80043a2:	6123      	str	r3, [r4, #16]
 80043a4:	2300      	movs	r3, #0
 80043a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043aa:	e7aa      	b.n	8004302 <_printf_i+0x146>
 80043ac:	4632      	mov	r2, r6
 80043ae:	4649      	mov	r1, r9
 80043b0:	4640      	mov	r0, r8
 80043b2:	6923      	ldr	r3, [r4, #16]
 80043b4:	47d0      	blx	sl
 80043b6:	3001      	adds	r0, #1
 80043b8:	d0ad      	beq.n	8004316 <_printf_i+0x15a>
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	079b      	lsls	r3, r3, #30
 80043be:	d413      	bmi.n	80043e8 <_printf_i+0x22c>
 80043c0:	68e0      	ldr	r0, [r4, #12]
 80043c2:	9b03      	ldr	r3, [sp, #12]
 80043c4:	4298      	cmp	r0, r3
 80043c6:	bfb8      	it	lt
 80043c8:	4618      	movlt	r0, r3
 80043ca:	e7a6      	b.n	800431a <_printf_i+0x15e>
 80043cc:	2301      	movs	r3, #1
 80043ce:	4632      	mov	r2, r6
 80043d0:	4649      	mov	r1, r9
 80043d2:	4640      	mov	r0, r8
 80043d4:	47d0      	blx	sl
 80043d6:	3001      	adds	r0, #1
 80043d8:	d09d      	beq.n	8004316 <_printf_i+0x15a>
 80043da:	3501      	adds	r5, #1
 80043dc:	68e3      	ldr	r3, [r4, #12]
 80043de:	9903      	ldr	r1, [sp, #12]
 80043e0:	1a5b      	subs	r3, r3, r1
 80043e2:	42ab      	cmp	r3, r5
 80043e4:	dcf2      	bgt.n	80043cc <_printf_i+0x210>
 80043e6:	e7eb      	b.n	80043c0 <_printf_i+0x204>
 80043e8:	2500      	movs	r5, #0
 80043ea:	f104 0619 	add.w	r6, r4, #25
 80043ee:	e7f5      	b.n	80043dc <_printf_i+0x220>
 80043f0:	08004845 	.word	0x08004845
 80043f4:	08004856 	.word	0x08004856

080043f8 <memmove>:
 80043f8:	4288      	cmp	r0, r1
 80043fa:	b510      	push	{r4, lr}
 80043fc:	eb01 0402 	add.w	r4, r1, r2
 8004400:	d902      	bls.n	8004408 <memmove+0x10>
 8004402:	4284      	cmp	r4, r0
 8004404:	4623      	mov	r3, r4
 8004406:	d807      	bhi.n	8004418 <memmove+0x20>
 8004408:	1e43      	subs	r3, r0, #1
 800440a:	42a1      	cmp	r1, r4
 800440c:	d008      	beq.n	8004420 <memmove+0x28>
 800440e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004412:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004416:	e7f8      	b.n	800440a <memmove+0x12>
 8004418:	4601      	mov	r1, r0
 800441a:	4402      	add	r2, r0
 800441c:	428a      	cmp	r2, r1
 800441e:	d100      	bne.n	8004422 <memmove+0x2a>
 8004420:	bd10      	pop	{r4, pc}
 8004422:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004426:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800442a:	e7f7      	b.n	800441c <memmove+0x24>

0800442c <_sbrk_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	2300      	movs	r3, #0
 8004430:	4d05      	ldr	r5, [pc, #20]	@ (8004448 <_sbrk_r+0x1c>)
 8004432:	4604      	mov	r4, r0
 8004434:	4608      	mov	r0, r1
 8004436:	602b      	str	r3, [r5, #0]
 8004438:	f7fc fe30 	bl	800109c <_sbrk>
 800443c:	1c43      	adds	r3, r0, #1
 800443e:	d102      	bne.n	8004446 <_sbrk_r+0x1a>
 8004440:	682b      	ldr	r3, [r5, #0]
 8004442:	b103      	cbz	r3, 8004446 <_sbrk_r+0x1a>
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	bd38      	pop	{r3, r4, r5, pc}
 8004448:	200002b8 	.word	0x200002b8

0800444c <memchr>:
 800444c:	4603      	mov	r3, r0
 800444e:	b510      	push	{r4, lr}
 8004450:	b2c9      	uxtb	r1, r1
 8004452:	4402      	add	r2, r0
 8004454:	4293      	cmp	r3, r2
 8004456:	4618      	mov	r0, r3
 8004458:	d101      	bne.n	800445e <memchr+0x12>
 800445a:	2000      	movs	r0, #0
 800445c:	e003      	b.n	8004466 <memchr+0x1a>
 800445e:	7804      	ldrb	r4, [r0, #0]
 8004460:	3301      	adds	r3, #1
 8004462:	428c      	cmp	r4, r1
 8004464:	d1f6      	bne.n	8004454 <memchr+0x8>
 8004466:	bd10      	pop	{r4, pc}

08004468 <memcpy>:
 8004468:	440a      	add	r2, r1
 800446a:	4291      	cmp	r1, r2
 800446c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004470:	d100      	bne.n	8004474 <memcpy+0xc>
 8004472:	4770      	bx	lr
 8004474:	b510      	push	{r4, lr}
 8004476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800447a:	4291      	cmp	r1, r2
 800447c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004480:	d1f9      	bne.n	8004476 <memcpy+0xe>
 8004482:	bd10      	pop	{r4, pc}

08004484 <_realloc_r>:
 8004484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004488:	4607      	mov	r7, r0
 800448a:	4614      	mov	r4, r2
 800448c:	460d      	mov	r5, r1
 800448e:	b921      	cbnz	r1, 800449a <_realloc_r+0x16>
 8004490:	4611      	mov	r1, r2
 8004492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004496:	f7ff bc3b 	b.w	8003d10 <_malloc_r>
 800449a:	b92a      	cbnz	r2, 80044a8 <_realloc_r+0x24>
 800449c:	f7ff fbce 	bl	8003c3c <_free_r>
 80044a0:	4625      	mov	r5, r4
 80044a2:	4628      	mov	r0, r5
 80044a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044a8:	f000 f81a 	bl	80044e0 <_malloc_usable_size_r>
 80044ac:	4284      	cmp	r4, r0
 80044ae:	4606      	mov	r6, r0
 80044b0:	d802      	bhi.n	80044b8 <_realloc_r+0x34>
 80044b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044b6:	d8f4      	bhi.n	80044a2 <_realloc_r+0x1e>
 80044b8:	4621      	mov	r1, r4
 80044ba:	4638      	mov	r0, r7
 80044bc:	f7ff fc28 	bl	8003d10 <_malloc_r>
 80044c0:	4680      	mov	r8, r0
 80044c2:	b908      	cbnz	r0, 80044c8 <_realloc_r+0x44>
 80044c4:	4645      	mov	r5, r8
 80044c6:	e7ec      	b.n	80044a2 <_realloc_r+0x1e>
 80044c8:	42b4      	cmp	r4, r6
 80044ca:	4622      	mov	r2, r4
 80044cc:	4629      	mov	r1, r5
 80044ce:	bf28      	it	cs
 80044d0:	4632      	movcs	r2, r6
 80044d2:	f7ff ffc9 	bl	8004468 <memcpy>
 80044d6:	4629      	mov	r1, r5
 80044d8:	4638      	mov	r0, r7
 80044da:	f7ff fbaf 	bl	8003c3c <_free_r>
 80044de:	e7f1      	b.n	80044c4 <_realloc_r+0x40>

080044e0 <_malloc_usable_size_r>:
 80044e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044e4:	1f18      	subs	r0, r3, #4
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	bfbc      	itt	lt
 80044ea:	580b      	ldrlt	r3, [r1, r0]
 80044ec:	18c0      	addlt	r0, r0, r3
 80044ee:	4770      	bx	lr

080044f0 <_init>:
 80044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f2:	bf00      	nop
 80044f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f6:	bc08      	pop	{r3}
 80044f8:	469e      	mov	lr, r3
 80044fa:	4770      	bx	lr

080044fc <_fini>:
 80044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fe:	bf00      	nop
 8004500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004502:	bc08      	pop	{r3}
 8004504:	469e      	mov	lr, r3
 8004506:	4770      	bx	lr
