
HVAC_CONTROL_WITH_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066ac  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  080067bc  080067bc  000077bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cdc  08006cdc  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006cdc  08006cdc  00007cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ce4  08006ce4  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce4  08006ce4  00007ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ce8  08006ce8  00007ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006cec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  20000060  08006d48  00008060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08006d48  00008570  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b23  00000000  00000000  00008085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000249a  00000000  00000000  00011ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00014048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000779  00000000  00000000  00014a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182e3  00000000  00000000  00015199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104ab  00000000  00000000  0002d47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083757  00000000  00000000  0003d927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c107e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db8  00000000  00000000  000c10c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  000c3e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080067a4 	.word	0x080067a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080067a4 	.word	0x080067a4

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_d2iz>:
 800082c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000830:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000834:	d215      	bcs.n	8000862 <__aeabi_d2iz+0x36>
 8000836:	d511      	bpl.n	800085c <__aeabi_d2iz+0x30>
 8000838:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800083c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000840:	d912      	bls.n	8000868 <__aeabi_d2iz+0x3c>
 8000842:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000846:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800084a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800084e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000852:	fa23 f002 	lsr.w	r0, r3, r2
 8000856:	bf18      	it	ne
 8000858:	4240      	negne	r0, r0
 800085a:	4770      	bx	lr
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	4770      	bx	lr
 8000862:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000866:	d105      	bne.n	8000874 <__aeabi_d2iz+0x48>
 8000868:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800086c:	bf08      	it	eq
 800086e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <__aeabi_frsub>:
 800087c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000880:	e002      	b.n	8000888 <__addsf3>
 8000882:	bf00      	nop

08000884 <__aeabi_fsub>:
 8000884:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000888 <__addsf3>:
 8000888:	0042      	lsls	r2, r0, #1
 800088a:	bf1f      	itttt	ne
 800088c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000890:	ea92 0f03 	teqne	r2, r3
 8000894:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000898:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800089c:	d06a      	beq.n	8000974 <__addsf3+0xec>
 800089e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80008a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80008a6:	bfc1      	itttt	gt
 80008a8:	18d2      	addgt	r2, r2, r3
 80008aa:	4041      	eorgt	r1, r0
 80008ac:	4048      	eorgt	r0, r1
 80008ae:	4041      	eorgt	r1, r0
 80008b0:	bfb8      	it	lt
 80008b2:	425b      	neglt	r3, r3
 80008b4:	2b19      	cmp	r3, #25
 80008b6:	bf88      	it	hi
 80008b8:	4770      	bxhi	lr
 80008ba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80008be:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008c2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80008c6:	bf18      	it	ne
 80008c8:	4240      	negne	r0, r0
 80008ca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008ce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80008d2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80008d6:	bf18      	it	ne
 80008d8:	4249      	negne	r1, r1
 80008da:	ea92 0f03 	teq	r2, r3
 80008de:	d03f      	beq.n	8000960 <__addsf3+0xd8>
 80008e0:	f1a2 0201 	sub.w	r2, r2, #1
 80008e4:	fa41 fc03 	asr.w	ip, r1, r3
 80008e8:	eb10 000c 	adds.w	r0, r0, ip
 80008ec:	f1c3 0320 	rsb	r3, r3, #32
 80008f0:	fa01 f103 	lsl.w	r1, r1, r3
 80008f4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008f8:	d502      	bpl.n	8000900 <__addsf3+0x78>
 80008fa:	4249      	negs	r1, r1
 80008fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000900:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000904:	d313      	bcc.n	800092e <__addsf3+0xa6>
 8000906:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800090a:	d306      	bcc.n	800091a <__addsf3+0x92>
 800090c:	0840      	lsrs	r0, r0, #1
 800090e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000912:	f102 0201 	add.w	r2, r2, #1
 8000916:	2afe      	cmp	r2, #254	@ 0xfe
 8000918:	d251      	bcs.n	80009be <__addsf3+0x136>
 800091a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800091e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000922:	bf08      	it	eq
 8000924:	f020 0001 	biceq.w	r0, r0, #1
 8000928:	ea40 0003 	orr.w	r0, r0, r3
 800092c:	4770      	bx	lr
 800092e:	0049      	lsls	r1, r1, #1
 8000930:	eb40 0000 	adc.w	r0, r0, r0
 8000934:	3a01      	subs	r2, #1
 8000936:	bf28      	it	cs
 8000938:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800093c:	d2ed      	bcs.n	800091a <__addsf3+0x92>
 800093e:	fab0 fc80 	clz	ip, r0
 8000942:	f1ac 0c08 	sub.w	ip, ip, #8
 8000946:	ebb2 020c 	subs.w	r2, r2, ip
 800094a:	fa00 f00c 	lsl.w	r0, r0, ip
 800094e:	bfaa      	itet	ge
 8000950:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000954:	4252      	neglt	r2, r2
 8000956:	4318      	orrge	r0, r3
 8000958:	bfbc      	itt	lt
 800095a:	40d0      	lsrlt	r0, r2
 800095c:	4318      	orrlt	r0, r3
 800095e:	4770      	bx	lr
 8000960:	f092 0f00 	teq	r2, #0
 8000964:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000968:	bf06      	itte	eq
 800096a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800096e:	3201      	addeq	r2, #1
 8000970:	3b01      	subne	r3, #1
 8000972:	e7b5      	b.n	80008e0 <__addsf3+0x58>
 8000974:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000978:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800097c:	bf18      	it	ne
 800097e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000982:	d021      	beq.n	80009c8 <__addsf3+0x140>
 8000984:	ea92 0f03 	teq	r2, r3
 8000988:	d004      	beq.n	8000994 <__addsf3+0x10c>
 800098a:	f092 0f00 	teq	r2, #0
 800098e:	bf08      	it	eq
 8000990:	4608      	moveq	r0, r1
 8000992:	4770      	bx	lr
 8000994:	ea90 0f01 	teq	r0, r1
 8000998:	bf1c      	itt	ne
 800099a:	2000      	movne	r0, #0
 800099c:	4770      	bxne	lr
 800099e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80009a2:	d104      	bne.n	80009ae <__addsf3+0x126>
 80009a4:	0040      	lsls	r0, r0, #1
 80009a6:	bf28      	it	cs
 80009a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80009ac:	4770      	bx	lr
 80009ae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80009b2:	bf3c      	itt	cc
 80009b4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80009b8:	4770      	bxcc	lr
 80009ba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009be:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80009c2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c6:	4770      	bx	lr
 80009c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80009cc:	bf16      	itet	ne
 80009ce:	4608      	movne	r0, r1
 80009d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80009d4:	4601      	movne	r1, r0
 80009d6:	0242      	lsls	r2, r0, #9
 80009d8:	bf06      	itte	eq
 80009da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80009de:	ea90 0f01 	teqeq	r0, r1
 80009e2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80009e6:	4770      	bx	lr

080009e8 <__aeabi_ui2f>:
 80009e8:	f04f 0300 	mov.w	r3, #0
 80009ec:	e004      	b.n	80009f8 <__aeabi_i2f+0x8>
 80009ee:	bf00      	nop

080009f0 <__aeabi_i2f>:
 80009f0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80009f4:	bf48      	it	mi
 80009f6:	4240      	negmi	r0, r0
 80009f8:	ea5f 0c00 	movs.w	ip, r0
 80009fc:	bf08      	it	eq
 80009fe:	4770      	bxeq	lr
 8000a00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000a04:	4601      	mov	r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	e01c      	b.n	8000a46 <__aeabi_l2f+0x2a>

08000a0c <__aeabi_ul2f>:
 8000a0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a10:	bf08      	it	eq
 8000a12:	4770      	bxeq	lr
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	e00a      	b.n	8000a30 <__aeabi_l2f+0x14>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_l2f>:
 8000a1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000a20:	bf08      	it	eq
 8000a22:	4770      	bxeq	lr
 8000a24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000a28:	d502      	bpl.n	8000a30 <__aeabi_l2f+0x14>
 8000a2a:	4240      	negs	r0, r0
 8000a2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a30:	ea5f 0c01 	movs.w	ip, r1
 8000a34:	bf02      	ittt	eq
 8000a36:	4684      	moveq	ip, r0
 8000a38:	4601      	moveq	r1, r0
 8000a3a:	2000      	moveq	r0, #0
 8000a3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000a40:	bf08      	it	eq
 8000a42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000a4a:	fabc f28c 	clz	r2, ip
 8000a4e:	3a08      	subs	r2, #8
 8000a50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a54:	db10      	blt.n	8000a78 <__aeabi_l2f+0x5c>
 8000a56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a5a:	4463      	add	r3, ip
 8000a5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a60:	f1c2 0220 	rsb	r2, r2, #32
 8000a64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000a68:	fa20 f202 	lsr.w	r2, r0, r2
 8000a6c:	eb43 0002 	adc.w	r0, r3, r2
 8000a70:	bf08      	it	eq
 8000a72:	f020 0001 	biceq.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	f102 0220 	add.w	r2, r2, #32
 8000a7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a80:	f1c2 0220 	rsb	r2, r2, #32
 8000a84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000a88:	fa21 f202 	lsr.w	r2, r1, r2
 8000a8c:	eb43 0002 	adc.w	r0, r3, r2
 8000a90:	bf08      	it	eq
 8000a92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_fmul>:
 8000a98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aa6:	ea92 0f0c 	teqne	r2, ip
 8000aaa:	ea93 0f0c 	teqne	r3, ip
 8000aae:	d06f      	beq.n	8000b90 <__aeabi_fmul+0xf8>
 8000ab0:	441a      	add	r2, r3
 8000ab2:	ea80 0c01 	eor.w	ip, r0, r1
 8000ab6:	0240      	lsls	r0, r0, #9
 8000ab8:	bf18      	it	ne
 8000aba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000abe:	d01e      	beq.n	8000afe <__aeabi_fmul+0x66>
 8000ac0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ac4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ac8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000acc:	fba0 3101 	umull	r3, r1, r0, r1
 8000ad0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ad4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ad8:	bf3e      	ittt	cc
 8000ada:	0049      	lslcc	r1, r1, #1
 8000adc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ae0:	005b      	lslcc	r3, r3, #1
 8000ae2:	ea40 0001 	orr.w	r0, r0, r1
 8000ae6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000aea:	2afd      	cmp	r2, #253	@ 0xfd
 8000aec:	d81d      	bhi.n	8000b2a <__aeabi_fmul+0x92>
 8000aee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000af2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000af6:	bf08      	it	eq
 8000af8:	f020 0001 	biceq.w	r0, r0, #1
 8000afc:	4770      	bx	lr
 8000afe:	f090 0f00 	teq	r0, #0
 8000b02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b06:	bf08      	it	eq
 8000b08:	0249      	lsleq	r1, r1, #9
 8000b0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b12:	3a7f      	subs	r2, #127	@ 0x7f
 8000b14:	bfc2      	ittt	gt
 8000b16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b1e:	4770      	bxgt	lr
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	3a01      	subs	r2, #1
 8000b2a:	dc5d      	bgt.n	8000be8 <__aeabi_fmul+0x150>
 8000b2c:	f112 0f19 	cmn.w	r2, #25
 8000b30:	bfdc      	itt	le
 8000b32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bxle	lr
 8000b38:	f1c2 0200 	rsb	r2, r2, #0
 8000b3c:	0041      	lsls	r1, r0, #1
 8000b3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000b42:	f1c2 0220 	rsb	r2, r2, #32
 8000b46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b4e:	f140 0000 	adc.w	r0, r0, #0
 8000b52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b56:	bf08      	it	eq
 8000b58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b5c:	4770      	bx	lr
 8000b5e:	f092 0f00 	teq	r2, #0
 8000b62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b66:	bf02      	ittt	eq
 8000b68:	0040      	lsleq	r0, r0, #1
 8000b6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b6e:	3a01      	subeq	r2, #1
 8000b70:	d0f9      	beq.n	8000b66 <__aeabi_fmul+0xce>
 8000b72:	ea40 000c 	orr.w	r0, r0, ip
 8000b76:	f093 0f00 	teq	r3, #0
 8000b7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b7e:	bf02      	ittt	eq
 8000b80:	0049      	lsleq	r1, r1, #1
 8000b82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000b86:	3b01      	subeq	r3, #1
 8000b88:	d0f9      	beq.n	8000b7e <__aeabi_fmul+0xe6>
 8000b8a:	ea41 010c 	orr.w	r1, r1, ip
 8000b8e:	e78f      	b.n	8000ab0 <__aeabi_fmul+0x18>
 8000b90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b94:	ea92 0f0c 	teq	r2, ip
 8000b98:	bf18      	it	ne
 8000b9a:	ea93 0f0c 	teqne	r3, ip
 8000b9e:	d00a      	beq.n	8000bb6 <__aeabi_fmul+0x11e>
 8000ba0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ba4:	bf18      	it	ne
 8000ba6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000baa:	d1d8      	bne.n	8000b5e <__aeabi_fmul+0xc6>
 8000bac:	ea80 0001 	eor.w	r0, r0, r1
 8000bb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000bb4:	4770      	bx	lr
 8000bb6:	f090 0f00 	teq	r0, #0
 8000bba:	bf17      	itett	ne
 8000bbc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	f091 0f00 	teqne	r1, #0
 8000bc6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000bca:	d014      	beq.n	8000bf6 <__aeabi_fmul+0x15e>
 8000bcc:	ea92 0f0c 	teq	r2, ip
 8000bd0:	d101      	bne.n	8000bd6 <__aeabi_fmul+0x13e>
 8000bd2:	0242      	lsls	r2, r0, #9
 8000bd4:	d10f      	bne.n	8000bf6 <__aeabi_fmul+0x15e>
 8000bd6:	ea93 0f0c 	teq	r3, ip
 8000bda:	d103      	bne.n	8000be4 <__aeabi_fmul+0x14c>
 8000bdc:	024b      	lsls	r3, r1, #9
 8000bde:	bf18      	it	ne
 8000be0:	4608      	movne	r0, r1
 8000be2:	d108      	bne.n	8000bf6 <__aeabi_fmul+0x15e>
 8000be4:	ea80 0001 	eor.w	r0, r0, r1
 8000be8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bfa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_fdiv>:
 8000c00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c08:	bf1e      	ittt	ne
 8000c0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c0e:	ea92 0f0c 	teqne	r2, ip
 8000c12:	ea93 0f0c 	teqne	r3, ip
 8000c16:	d069      	beq.n	8000cec <__aeabi_fdiv+0xec>
 8000c18:	eba2 0203 	sub.w	r2, r2, r3
 8000c1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000c20:	0249      	lsls	r1, r1, #9
 8000c22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c26:	d037      	beq.n	8000c98 <__aeabi_fdiv+0x98>
 8000c28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c34:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c38:	428b      	cmp	r3, r1
 8000c3a:	bf38      	it	cc
 8000c3c:	005b      	lslcc	r3, r3, #1
 8000c3e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000c42:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000c46:	428b      	cmp	r3, r1
 8000c48:	bf24      	itt	cs
 8000c4a:	1a5b      	subcs	r3, r3, r1
 8000c4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c54:	bf24      	itt	cs
 8000c56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c62:	bf24      	itt	cs
 8000c64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c70:	bf24      	itt	cs
 8000c72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c7a:	011b      	lsls	r3, r3, #4
 8000c7c:	bf18      	it	ne
 8000c7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000c82:	d1e0      	bne.n	8000c46 <__aeabi_fdiv+0x46>
 8000c84:	2afd      	cmp	r2, #253	@ 0xfd
 8000c86:	f63f af50 	bhi.w	8000b2a <__aeabi_fmul+0x92>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ca0:	327f      	adds	r2, #127	@ 0x7f
 8000ca2:	bfc2      	ittt	gt
 8000ca4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ca8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cac:	4770      	bxgt	lr
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	f04f 0300 	mov.w	r3, #0
 8000cb6:	3a01      	subs	r2, #1
 8000cb8:	e737      	b.n	8000b2a <__aeabi_fmul+0x92>
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000cc2:	bf02      	ittt	eq
 8000cc4:	0040      	lsleq	r0, r0, #1
 8000cc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cca:	3a01      	subeq	r2, #1
 8000ccc:	d0f9      	beq.n	8000cc2 <__aeabi_fdiv+0xc2>
 8000cce:	ea40 000c 	orr.w	r0, r0, ip
 8000cd2:	f093 0f00 	teq	r3, #0
 8000cd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cda:	bf02      	ittt	eq
 8000cdc:	0049      	lsleq	r1, r1, #1
 8000cde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ce2:	3b01      	subeq	r3, #1
 8000ce4:	d0f9      	beq.n	8000cda <__aeabi_fdiv+0xda>
 8000ce6:	ea41 010c 	orr.w	r1, r1, ip
 8000cea:	e795      	b.n	8000c18 <__aeabi_fdiv+0x18>
 8000cec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cf0:	ea92 0f0c 	teq	r2, ip
 8000cf4:	d108      	bne.n	8000d08 <__aeabi_fdiv+0x108>
 8000cf6:	0242      	lsls	r2, r0, #9
 8000cf8:	f47f af7d 	bne.w	8000bf6 <__aeabi_fmul+0x15e>
 8000cfc:	ea93 0f0c 	teq	r3, ip
 8000d00:	f47f af70 	bne.w	8000be4 <__aeabi_fmul+0x14c>
 8000d04:	4608      	mov	r0, r1
 8000d06:	e776      	b.n	8000bf6 <__aeabi_fmul+0x15e>
 8000d08:	ea93 0f0c 	teq	r3, ip
 8000d0c:	d104      	bne.n	8000d18 <__aeabi_fdiv+0x118>
 8000d0e:	024b      	lsls	r3, r1, #9
 8000d10:	f43f af4c 	beq.w	8000bac <__aeabi_fmul+0x114>
 8000d14:	4608      	mov	r0, r1
 8000d16:	e76e      	b.n	8000bf6 <__aeabi_fmul+0x15e>
 8000d18:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d1c:	bf18      	it	ne
 8000d1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d22:	d1ca      	bne.n	8000cba <__aeabi_fdiv+0xba>
 8000d24:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000d28:	f47f af5c 	bne.w	8000be4 <__aeabi_fmul+0x14c>
 8000d2c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000d30:	f47f af3c 	bne.w	8000bac <__aeabi_fmul+0x114>
 8000d34:	e75f      	b.n	8000bf6 <__aeabi_fmul+0x15e>
 8000d36:	bf00      	nop

08000d38 <__gesf2>:
 8000d38:	f04f 3cff 	mov.w	ip, #4294967295
 8000d3c:	e006      	b.n	8000d4c <__cmpsf2+0x4>
 8000d3e:	bf00      	nop

08000d40 <__lesf2>:
 8000d40:	f04f 0c01 	mov.w	ip, #1
 8000d44:	e002      	b.n	8000d4c <__cmpsf2+0x4>
 8000d46:	bf00      	nop

08000d48 <__cmpsf2>:
 8000d48:	f04f 0c01 	mov.w	ip, #1
 8000d4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	bf18      	it	ne
 8000d5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d62:	d011      	beq.n	8000d88 <__cmpsf2+0x40>
 8000d64:	b001      	add	sp, #4
 8000d66:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d6a:	bf18      	it	ne
 8000d6c:	ea90 0f01 	teqne	r0, r1
 8000d70:	bf58      	it	pl
 8000d72:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d76:	bf88      	it	hi
 8000d78:	17c8      	asrhi	r0, r1, #31
 8000d7a:	bf38      	it	cc
 8000d7c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d80:	bf18      	it	ne
 8000d82:	f040 0001 	orrne.w	r0, r0, #1
 8000d86:	4770      	bx	lr
 8000d88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d8c:	d102      	bne.n	8000d94 <__cmpsf2+0x4c>
 8000d8e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d92:	d105      	bne.n	8000da0 <__cmpsf2+0x58>
 8000d94:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d98:	d1e4      	bne.n	8000d64 <__cmpsf2+0x1c>
 8000d9a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d9e:	d0e1      	beq.n	8000d64 <__cmpsf2+0x1c>
 8000da0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <__aeabi_cfrcmple>:
 8000da8:	4684      	mov	ip, r0
 8000daa:	4608      	mov	r0, r1
 8000dac:	4661      	mov	r1, ip
 8000dae:	e7ff      	b.n	8000db0 <__aeabi_cfcmpeq>

08000db0 <__aeabi_cfcmpeq>:
 8000db0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000db2:	f7ff ffc9 	bl	8000d48 <__cmpsf2>
 8000db6:	2800      	cmp	r0, #0
 8000db8:	bf48      	it	mi
 8000dba:	f110 0f00 	cmnmi.w	r0, #0
 8000dbe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dc0 <__aeabi_fcmpeq>:
 8000dc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc4:	f7ff fff4 	bl	8000db0 <__aeabi_cfcmpeq>
 8000dc8:	bf0c      	ite	eq
 8000dca:	2001      	moveq	r0, #1
 8000dcc:	2000      	movne	r0, #0
 8000dce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_fcmplt>:
 8000dd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd8:	f7ff ffea 	bl	8000db0 <__aeabi_cfcmpeq>
 8000ddc:	bf34      	ite	cc
 8000dde:	2001      	movcc	r0, #1
 8000de0:	2000      	movcs	r0, #0
 8000de2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000de6:	bf00      	nop

08000de8 <__aeabi_fcmple>:
 8000de8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dec:	f7ff ffe0 	bl	8000db0 <__aeabi_cfcmpeq>
 8000df0:	bf94      	ite	ls
 8000df2:	2001      	movls	r0, #1
 8000df4:	2000      	movhi	r0, #0
 8000df6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfa:	bf00      	nop

08000dfc <__aeabi_fcmpge>:
 8000dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e00:	f7ff ffd2 	bl	8000da8 <__aeabi_cfrcmple>
 8000e04:	bf94      	ite	ls
 8000e06:	2001      	movls	r0, #1
 8000e08:	2000      	movhi	r0, #0
 8000e0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e0e:	bf00      	nop

08000e10 <__aeabi_fcmpgt>:
 8000e10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e14:	f7ff ffc8 	bl	8000da8 <__aeabi_cfrcmple>
 8000e18:	bf34      	ite	cc
 8000e1a:	2001      	movcc	r0, #1
 8000e1c:	2000      	movcs	r0, #0
 8000e1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e22:	bf00      	nop

08000e24 <__aeabi_ldivmod>:
 8000e24:	b97b      	cbnz	r3, 8000e46 <__aeabi_ldivmod+0x22>
 8000e26:	b972      	cbnz	r2, 8000e46 <__aeabi_ldivmod+0x22>
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	bfbe      	ittt	lt
 8000e2c:	2000      	movlt	r0, #0
 8000e2e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000e32:	e006      	blt.n	8000e42 <__aeabi_ldivmod+0x1e>
 8000e34:	bf08      	it	eq
 8000e36:	2800      	cmpeq	r0, #0
 8000e38:	bf1c      	itt	ne
 8000e3a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000e3e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e42:	f000 b9f5 	b.w	8001230 <__aeabi_idiv0>
 8000e46:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e4a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e4e:	2900      	cmp	r1, #0
 8000e50:	db09      	blt.n	8000e66 <__aeabi_ldivmod+0x42>
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db1a      	blt.n	8000e8c <__aeabi_ldivmod+0x68>
 8000e56:	f000 f86b 	bl	8000f30 <__udivmoddi4>
 8000e5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e62:	b004      	add	sp, #16
 8000e64:	4770      	bx	lr
 8000e66:	4240      	negs	r0, r0
 8000e68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db1b      	blt.n	8000ea8 <__aeabi_ldivmod+0x84>
 8000e70:	f000 f85e 	bl	8000f30 <__udivmoddi4>
 8000e74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e7c:	b004      	add	sp, #16
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	4252      	negs	r2, r2
 8000e86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e8a:	4770      	bx	lr
 8000e8c:	4252      	negs	r2, r2
 8000e8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e92:	f000 f84d 	bl	8000f30 <__udivmoddi4>
 8000e96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e9e:	b004      	add	sp, #16
 8000ea0:	4240      	negs	r0, r0
 8000ea2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ea6:	4770      	bx	lr
 8000ea8:	4252      	negs	r2, r2
 8000eaa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eae:	f000 f83f 	bl	8000f30 <__udivmoddi4>
 8000eb2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eba:	b004      	add	sp, #16
 8000ebc:	4252      	negs	r2, r2
 8000ebe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_d2lz>:
 8000ec4:	b538      	push	{r3, r4, r5, lr}
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4604      	mov	r4, r0
 8000ecc:	460d      	mov	r5, r1
 8000ece:	f7ff fc85 	bl	80007dc <__aeabi_dcmplt>
 8000ed2:	b928      	cbnz	r0, 8000ee0 <__aeabi_d2lz+0x1c>
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000edc:	f000 b80a 	b.w	8000ef4 <__aeabi_d2ulz>
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ee6:	f000 f805 	bl	8000ef4 <__aeabi_d2ulz>
 8000eea:	4240      	negs	r0, r0
 8000eec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ef0:	bd38      	pop	{r3, r4, r5, pc}
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_d2ulz>:
 8000ef4:	b5d0      	push	{r4, r6, r7, lr}
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <__aeabi_d2ulz+0x34>)
 8000efa:	4606      	mov	r6, r0
 8000efc:	460f      	mov	r7, r1
 8000efe:	f7ff f927 	bl	8000150 <__aeabi_dmul>
 8000f02:	f000 f997 	bl	8001234 <__aeabi_d2uiz>
 8000f06:	4604      	mov	r4, r0
 8000f08:	f7ff fb8e 	bl	8000628 <__aeabi_ui2d>
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4b07      	ldr	r3, [pc, #28]	@ (8000f2c <__aeabi_d2ulz+0x38>)
 8000f10:	f7ff f91e 	bl	8000150 <__aeabi_dmul>
 8000f14:	4602      	mov	r2, r0
 8000f16:	460b      	mov	r3, r1
 8000f18:	4630      	mov	r0, r6
 8000f1a:	4639      	mov	r1, r7
 8000f1c:	f7ff fa46 	bl	80003ac <__aeabi_dsub>
 8000f20:	f000 f988 	bl	8001234 <__aeabi_d2uiz>
 8000f24:	4621      	mov	r1, r4
 8000f26:	bdd0      	pop	{r4, r6, r7, pc}
 8000f28:	3df00000 	.word	0x3df00000
 8000f2c:	41f00000 	.word	0x41f00000

08000f30 <__udivmoddi4>:
 8000f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f34:	9d08      	ldr	r5, [sp, #32]
 8000f36:	468e      	mov	lr, r1
 8000f38:	4604      	mov	r4, r0
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d14a      	bne.n	8000fd6 <__udivmoddi4+0xa6>
 8000f40:	428a      	cmp	r2, r1
 8000f42:	4617      	mov	r7, r2
 8000f44:	d962      	bls.n	800100c <__udivmoddi4+0xdc>
 8000f46:	fab2 f682 	clz	r6, r2
 8000f4a:	b14e      	cbz	r6, 8000f60 <__udivmoddi4+0x30>
 8000f4c:	f1c6 0320 	rsb	r3, r6, #32
 8000f50:	fa01 f806 	lsl.w	r8, r1, r6
 8000f54:	fa20 f303 	lsr.w	r3, r0, r3
 8000f58:	40b7      	lsls	r7, r6
 8000f5a:	ea43 0808 	orr.w	r8, r3, r8
 8000f5e:	40b4      	lsls	r4, r6
 8000f60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f64:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f68:	fa1f fc87 	uxth.w	ip, r7
 8000f6c:	fb0e 8811 	mls	r8, lr, r1, r8
 8000f70:	fb01 f20c 	mul.w	r2, r1, ip
 8000f74:	0c23      	lsrs	r3, r4, #16
 8000f76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d909      	bls.n	8000f92 <__udivmoddi4+0x62>
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	f101 30ff 	add.w	r0, r1, #4294967295
 8000f84:	f080 80eb 	bcs.w	800115e <__udivmoddi4+0x22e>
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	f240 80e8 	bls.w	800115e <__udivmoddi4+0x22e>
 8000f8e:	3902      	subs	r1, #2
 8000f90:	443b      	add	r3, r7
 8000f92:	1a9a      	subs	r2, r3, r2
 8000f94:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f98:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fa0:	b2a3      	uxth	r3, r4
 8000fa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fa6:	459c      	cmp	ip, r3
 8000fa8:	d909      	bls.n	8000fbe <__udivmoddi4+0x8e>
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fb0:	f080 80d7 	bcs.w	8001162 <__udivmoddi4+0x232>
 8000fb4:	459c      	cmp	ip, r3
 8000fb6:	f240 80d4 	bls.w	8001162 <__udivmoddi4+0x232>
 8000fba:	443b      	add	r3, r7
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	eba3 030c 	sub.w	r3, r3, ip
 8000fc8:	b11d      	cbz	r5, 8000fd2 <__udivmoddi4+0xa2>
 8000fca:	2200      	movs	r2, #0
 8000fcc:	40f3      	lsrs	r3, r6
 8000fce:	e9c5 3200 	strd	r3, r2, [r5]
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d905      	bls.n	8000fe6 <__udivmoddi4+0xb6>
 8000fda:	b10d      	cbz	r5, 8000fe0 <__udivmoddi4+0xb0>
 8000fdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e7f5      	b.n	8000fd2 <__udivmoddi4+0xa2>
 8000fe6:	fab3 f183 	clz	r1, r3
 8000fea:	2900      	cmp	r1, #0
 8000fec:	d146      	bne.n	800107c <__udivmoddi4+0x14c>
 8000fee:	4573      	cmp	r3, lr
 8000ff0:	d302      	bcc.n	8000ff8 <__udivmoddi4+0xc8>
 8000ff2:	4282      	cmp	r2, r0
 8000ff4:	f200 8108 	bhi.w	8001208 <__udivmoddi4+0x2d8>
 8000ff8:	1a84      	subs	r4, r0, r2
 8000ffa:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ffe:	2001      	movs	r0, #1
 8001000:	4690      	mov	r8, r2
 8001002:	2d00      	cmp	r5, #0
 8001004:	d0e5      	beq.n	8000fd2 <__udivmoddi4+0xa2>
 8001006:	e9c5 4800 	strd	r4, r8, [r5]
 800100a:	e7e2      	b.n	8000fd2 <__udivmoddi4+0xa2>
 800100c:	2a00      	cmp	r2, #0
 800100e:	f000 8091 	beq.w	8001134 <__udivmoddi4+0x204>
 8001012:	fab2 f682 	clz	r6, r2
 8001016:	2e00      	cmp	r6, #0
 8001018:	f040 80a5 	bne.w	8001166 <__udivmoddi4+0x236>
 800101c:	1a8a      	subs	r2, r1, r2
 800101e:	2101      	movs	r1, #1
 8001020:	0c03      	lsrs	r3, r0, #16
 8001022:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001026:	b280      	uxth	r0, r0
 8001028:	b2bc      	uxth	r4, r7
 800102a:	fbb2 fcfe 	udiv	ip, r2, lr
 800102e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001036:	fb04 f20c 	mul.w	r2, r4, ip
 800103a:	429a      	cmp	r2, r3
 800103c:	d907      	bls.n	800104e <__udivmoddi4+0x11e>
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001044:	d202      	bcs.n	800104c <__udivmoddi4+0x11c>
 8001046:	429a      	cmp	r2, r3
 8001048:	f200 80e3 	bhi.w	8001212 <__udivmoddi4+0x2e2>
 800104c:	46c4      	mov	ip, r8
 800104e:	1a9b      	subs	r3, r3, r2
 8001050:	fbb3 f2fe 	udiv	r2, r3, lr
 8001054:	fb0e 3312 	mls	r3, lr, r2, r3
 8001058:	fb02 f404 	mul.w	r4, r2, r4
 800105c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001060:	429c      	cmp	r4, r3
 8001062:	d907      	bls.n	8001074 <__udivmoddi4+0x144>
 8001064:	18fb      	adds	r3, r7, r3
 8001066:	f102 30ff 	add.w	r0, r2, #4294967295
 800106a:	d202      	bcs.n	8001072 <__udivmoddi4+0x142>
 800106c:	429c      	cmp	r4, r3
 800106e:	f200 80cd 	bhi.w	800120c <__udivmoddi4+0x2dc>
 8001072:	4602      	mov	r2, r0
 8001074:	1b1b      	subs	r3, r3, r4
 8001076:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800107a:	e7a5      	b.n	8000fc8 <__udivmoddi4+0x98>
 800107c:	f1c1 0620 	rsb	r6, r1, #32
 8001080:	408b      	lsls	r3, r1
 8001082:	fa22 f706 	lsr.w	r7, r2, r6
 8001086:	431f      	orrs	r7, r3
 8001088:	fa2e fa06 	lsr.w	sl, lr, r6
 800108c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001090:	fbba f8f9 	udiv	r8, sl, r9
 8001094:	fa0e fe01 	lsl.w	lr, lr, r1
 8001098:	fa20 f306 	lsr.w	r3, r0, r6
 800109c:	fb09 aa18 	mls	sl, r9, r8, sl
 80010a0:	fa1f fc87 	uxth.w	ip, r7
 80010a4:	ea43 030e 	orr.w	r3, r3, lr
 80010a8:	fa00 fe01 	lsl.w	lr, r0, r1
 80010ac:	fb08 f00c 	mul.w	r0, r8, ip
 80010b0:	0c1c      	lsrs	r4, r3, #16
 80010b2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80010b6:	42a0      	cmp	r0, r4
 80010b8:	fa02 f201 	lsl.w	r2, r2, r1
 80010bc:	d90a      	bls.n	80010d4 <__udivmoddi4+0x1a4>
 80010be:	193c      	adds	r4, r7, r4
 80010c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80010c4:	f080 809e 	bcs.w	8001204 <__udivmoddi4+0x2d4>
 80010c8:	42a0      	cmp	r0, r4
 80010ca:	f240 809b 	bls.w	8001204 <__udivmoddi4+0x2d4>
 80010ce:	f1a8 0802 	sub.w	r8, r8, #2
 80010d2:	443c      	add	r4, r7
 80010d4:	1a24      	subs	r4, r4, r0
 80010d6:	b298      	uxth	r0, r3
 80010d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80010dc:	fb09 4413 	mls	r4, r9, r3, r4
 80010e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80010e4:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80010e8:	45a4      	cmp	ip, r4
 80010ea:	d909      	bls.n	8001100 <__udivmoddi4+0x1d0>
 80010ec:	193c      	adds	r4, r7, r4
 80010ee:	f103 30ff 	add.w	r0, r3, #4294967295
 80010f2:	f080 8085 	bcs.w	8001200 <__udivmoddi4+0x2d0>
 80010f6:	45a4      	cmp	ip, r4
 80010f8:	f240 8082 	bls.w	8001200 <__udivmoddi4+0x2d0>
 80010fc:	3b02      	subs	r3, #2
 80010fe:	443c      	add	r4, r7
 8001100:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001104:	eba4 040c 	sub.w	r4, r4, ip
 8001108:	fba0 8c02 	umull	r8, ip, r0, r2
 800110c:	4564      	cmp	r4, ip
 800110e:	4643      	mov	r3, r8
 8001110:	46e1      	mov	r9, ip
 8001112:	d364      	bcc.n	80011de <__udivmoddi4+0x2ae>
 8001114:	d061      	beq.n	80011da <__udivmoddi4+0x2aa>
 8001116:	b15d      	cbz	r5, 8001130 <__udivmoddi4+0x200>
 8001118:	ebbe 0203 	subs.w	r2, lr, r3
 800111c:	eb64 0409 	sbc.w	r4, r4, r9
 8001120:	fa04 f606 	lsl.w	r6, r4, r6
 8001124:	fa22 f301 	lsr.w	r3, r2, r1
 8001128:	431e      	orrs	r6, r3
 800112a:	40cc      	lsrs	r4, r1
 800112c:	e9c5 6400 	strd	r6, r4, [r5]
 8001130:	2100      	movs	r1, #0
 8001132:	e74e      	b.n	8000fd2 <__udivmoddi4+0xa2>
 8001134:	fbb1 fcf2 	udiv	ip, r1, r2
 8001138:	0c01      	lsrs	r1, r0, #16
 800113a:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800113e:	b280      	uxth	r0, r0
 8001140:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001144:	463b      	mov	r3, r7
 8001146:	fbb1 f1f7 	udiv	r1, r1, r7
 800114a:	4638      	mov	r0, r7
 800114c:	463c      	mov	r4, r7
 800114e:	46b8      	mov	r8, r7
 8001150:	46be      	mov	lr, r7
 8001152:	2620      	movs	r6, #32
 8001154:	eba2 0208 	sub.w	r2, r2, r8
 8001158:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800115c:	e765      	b.n	800102a <__udivmoddi4+0xfa>
 800115e:	4601      	mov	r1, r0
 8001160:	e717      	b.n	8000f92 <__udivmoddi4+0x62>
 8001162:	4610      	mov	r0, r2
 8001164:	e72b      	b.n	8000fbe <__udivmoddi4+0x8e>
 8001166:	f1c6 0120 	rsb	r1, r6, #32
 800116a:	fa2e fc01 	lsr.w	ip, lr, r1
 800116e:	40b7      	lsls	r7, r6
 8001170:	fa0e fe06 	lsl.w	lr, lr, r6
 8001174:	fa20 f101 	lsr.w	r1, r0, r1
 8001178:	ea41 010e 	orr.w	r1, r1, lr
 800117c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001180:	fbbc f8fe 	udiv	r8, ip, lr
 8001184:	b2bc      	uxth	r4, r7
 8001186:	fb0e cc18 	mls	ip, lr, r8, ip
 800118a:	fb08 f904 	mul.w	r9, r8, r4
 800118e:	0c0a      	lsrs	r2, r1, #16
 8001190:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001194:	40b0      	lsls	r0, r6
 8001196:	4591      	cmp	r9, r2
 8001198:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800119c:	b280      	uxth	r0, r0
 800119e:	d93e      	bls.n	800121e <__udivmoddi4+0x2ee>
 80011a0:	18ba      	adds	r2, r7, r2
 80011a2:	f108 3cff 	add.w	ip, r8, #4294967295
 80011a6:	d201      	bcs.n	80011ac <__udivmoddi4+0x27c>
 80011a8:	4591      	cmp	r9, r2
 80011aa:	d81f      	bhi.n	80011ec <__udivmoddi4+0x2bc>
 80011ac:	eba2 0209 	sub.w	r2, r2, r9
 80011b0:	fbb2 f9fe 	udiv	r9, r2, lr
 80011b4:	fb09 f804 	mul.w	r8, r9, r4
 80011b8:	fb0e 2a19 	mls	sl, lr, r9, r2
 80011bc:	b28a      	uxth	r2, r1
 80011be:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80011c2:	4542      	cmp	r2, r8
 80011c4:	d229      	bcs.n	800121a <__udivmoddi4+0x2ea>
 80011c6:	18ba      	adds	r2, r7, r2
 80011c8:	f109 31ff 	add.w	r1, r9, #4294967295
 80011cc:	d2c2      	bcs.n	8001154 <__udivmoddi4+0x224>
 80011ce:	4542      	cmp	r2, r8
 80011d0:	d2c0      	bcs.n	8001154 <__udivmoddi4+0x224>
 80011d2:	f1a9 0102 	sub.w	r1, r9, #2
 80011d6:	443a      	add	r2, r7
 80011d8:	e7bc      	b.n	8001154 <__udivmoddi4+0x224>
 80011da:	45c6      	cmp	lr, r8
 80011dc:	d29b      	bcs.n	8001116 <__udivmoddi4+0x1e6>
 80011de:	ebb8 0302 	subs.w	r3, r8, r2
 80011e2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80011e6:	3801      	subs	r0, #1
 80011e8:	46e1      	mov	r9, ip
 80011ea:	e794      	b.n	8001116 <__udivmoddi4+0x1e6>
 80011ec:	eba7 0909 	sub.w	r9, r7, r9
 80011f0:	444a      	add	r2, r9
 80011f2:	fbb2 f9fe 	udiv	r9, r2, lr
 80011f6:	f1a8 0c02 	sub.w	ip, r8, #2
 80011fa:	fb09 f804 	mul.w	r8, r9, r4
 80011fe:	e7db      	b.n	80011b8 <__udivmoddi4+0x288>
 8001200:	4603      	mov	r3, r0
 8001202:	e77d      	b.n	8001100 <__udivmoddi4+0x1d0>
 8001204:	46d0      	mov	r8, sl
 8001206:	e765      	b.n	80010d4 <__udivmoddi4+0x1a4>
 8001208:	4608      	mov	r0, r1
 800120a:	e6fa      	b.n	8001002 <__udivmoddi4+0xd2>
 800120c:	443b      	add	r3, r7
 800120e:	3a02      	subs	r2, #2
 8001210:	e730      	b.n	8001074 <__udivmoddi4+0x144>
 8001212:	f1ac 0c02 	sub.w	ip, ip, #2
 8001216:	443b      	add	r3, r7
 8001218:	e719      	b.n	800104e <__udivmoddi4+0x11e>
 800121a:	4649      	mov	r1, r9
 800121c:	e79a      	b.n	8001154 <__udivmoddi4+0x224>
 800121e:	eba2 0209 	sub.w	r2, r2, r9
 8001222:	fbb2 f9fe 	udiv	r9, r2, lr
 8001226:	46c4      	mov	ip, r8
 8001228:	fb09 f804 	mul.w	r8, r9, r4
 800122c:	e7c4      	b.n	80011b8 <__udivmoddi4+0x288>
 800122e:	bf00      	nop

08001230 <__aeabi_idiv0>:
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <__aeabi_d2uiz>:
 8001234:	004a      	lsls	r2, r1, #1
 8001236:	d211      	bcs.n	800125c <__aeabi_d2uiz+0x28>
 8001238:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800123c:	d211      	bcs.n	8001262 <__aeabi_d2uiz+0x2e>
 800123e:	d50d      	bpl.n	800125c <__aeabi_d2uiz+0x28>
 8001240:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8001244:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001248:	d40e      	bmi.n	8001268 <__aeabi_d2uiz+0x34>
 800124a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800124e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001252:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8001256:	fa23 f002 	lsr.w	r0, r3, r2
 800125a:	4770      	bx	lr
 800125c:	f04f 0000 	mov.w	r0, #0
 8001260:	4770      	bx	lr
 8001262:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001266:	d102      	bne.n	800126e <__aeabi_d2uiz+0x3a>
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	4770      	bx	lr
 800126e:	f04f 0000 	mov.w	r0, #0
 8001272:	4770      	bx	lr

08001274 <Blower_Relay_Pins_Init>:

#define PB12_LOW_SPEED_BLOWER    12
#define PB13_MEDIUM_SPEED_BLOWER 13
#define PB14_HIGH_SPEED_BLOWER   14

void Blower_Relay_Pins_Init(){
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8001278:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <Blower_Relay_Pins_Init+0x40>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <Blower_Relay_Pins_Init+0x40>)
 800127e:	f043 0308 	orr.w	r3, r3, #8
 8001282:	6193      	str	r3, [r2, #24]
    GPIOB->CRH&=~((0xFF<<16)|(0XFF<<20)|(0XFF<<24));
 8001284:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <Blower_Relay_Pins_Init+0x44>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	4a0b      	ldr	r2, [pc, #44]	@ (80012b8 <Blower_Relay_Pins_Init+0x44>)
 800128a:	b29b      	uxth	r3, r3
 800128c:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=((0x3<<16)|(0X3<<20)|(0X3<<24));
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <Blower_Relay_Pins_Init+0x44>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4a09      	ldr	r2, [pc, #36]	@ (80012b8 <Blower_Relay_Pins_Init+0x44>)
 8001294:	f043 734c 	orr.w	r3, r3, #53477376	@ 0x3300000
 8001298:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800129c:	6053      	str	r3, [r2, #4]
    GPIOB->ODR|=((1<<PB12_LOW_SPEED_BLOWER)|(1<<PB13_MEDIUM_SPEED_BLOWER)|(1<<PB14_HIGH_SPEED_BLOWER));
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <Blower_Relay_Pins_Init+0x44>)
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <Blower_Relay_Pins_Init+0x44>)
 80012a4:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 80012a8:	60d3      	str	r3, [r2, #12]
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010c00 	.word	0x40010c00

080012bc <MX_I2C1_Init>:
 */

#include"extern_file_declarations.h"
uint8_t I2C_RX_FLAG=0,data[2];
 void MX_I2C1_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c0:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <MX_I2C1_Init+0x5c>)
 80012c2:	4a16      	ldr	r2, [pc, #88]	@ (800131c <MX_I2C1_Init+0x60>)
 80012c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80012c6:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <MX_I2C1_Init+0x5c>)
 80012c8:	4a15      	ldr	r2, [pc, #84]	@ (8001320 <MX_I2C1_Init+0x64>)
 80012ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012cc:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <MX_I2C1_Init+0x5c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 170;
 80012d2:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_I2C1_Init+0x5c>)
 80012d4:	22aa      	movs	r2, #170	@ 0xaa
 80012d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <MX_I2C1_Init+0x5c>)
 80012da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <MX_I2C1_Init+0x5c>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_I2C1_Init+0x5c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <MX_I2C1_Init+0x5c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_I2C1_Init+0x5c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f8:	4807      	ldr	r0, [pc, #28]	@ (8001318 <MX_I2C1_Init+0x5c>)
 80012fa:	f002 fec5 	bl	8004088 <HAL_I2C_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001304:	f001 fe04 	bl	8002f10 <Error_Handler>
  }
  HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 8001308:	2202      	movs	r2, #2
 800130a:	4906      	ldr	r1, [pc, #24]	@ (8001324 <MX_I2C1_Init+0x68>)
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <MX_I2C1_Init+0x5c>)
 800130e:	f003 f813 	bl	8004338 <HAL_I2C_Slave_Receive_IT>
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000328 	.word	0x20000328
 800131c:	40005400 	.word	0x40005400
 8001320:	00061a80 	.word	0x00061a80
 8001324:	20000080 	.word	0x20000080

08001328 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	I2C_RX_FLAG=1;
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 8001336:	2202      	movs	r2, #2
 8001338:	4904      	ldr	r1, [pc, #16]	@ (800134c <HAL_I2C_SlaveRxCpltCallback+0x24>)
 800133a:	4805      	ldr	r0, [pc, #20]	@ (8001350 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 800133c:	f002 fffc 	bl	8004338 <HAL_I2C_Slave_Receive_IT>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	2000007c 	.word	0x2000007c
 800134c:	20000080 	.word	0x20000080
 8001350:	20000328 	.word	0x20000328

08001354 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0c      	ldr	r2, [pc, #48]	@ (8001394 <HAL_I2C_ErrorCallback+0x40>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d112      	bne.n	800138c <HAL_I2C_ErrorCallback+0x38>
        // Reset I2C if it’s stuck
        __HAL_RCC_I2C1_FORCE_RESET();
 8001366:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <HAL_I2C_ErrorCallback+0x44>)
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	4a0b      	ldr	r2, [pc, #44]	@ (8001398 <HAL_I2C_ErrorCallback+0x44>)
 800136c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001370:	6113      	str	r3, [r2, #16]
        __HAL_RCC_I2C1_RELEASE_RESET();
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_I2C_ErrorCallback+0x44>)
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	4a08      	ldr	r2, [pc, #32]	@ (8001398 <HAL_I2C_ErrorCallback+0x44>)
 8001378:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800137c:	6113      	str	r3, [r2, #16]

        MX_I2C1_Init();  // Re-init peripheral
 800137e:	f7ff ff9d 	bl	80012bc <MX_I2C1_Init>
        HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 8001382:	2202      	movs	r2, #2
 8001384:	4905      	ldr	r1, [pc, #20]	@ (800139c <HAL_I2C_ErrorCallback+0x48>)
 8001386:	4806      	ldr	r0, [pc, #24]	@ (80013a0 <HAL_I2C_ErrorCallback+0x4c>)
 8001388:	f002 ffd6 	bl	8004338 <HAL_I2C_Slave_Receive_IT>
    }
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40005400 	.word	0x40005400
 8001398:	40021000 	.word	0x40021000
 800139c:	20000080 	.word	0x20000080
 80013a0:	20000328 	.word	0x20000328

080013a4 <matel_mcu_process_can_frame>:
#include"MCU_ELECTROCATLYST.h"
#include"can.h"
#include"uart.h"

DBC_AllMessages_t msg;
void matel_mcu_process_can_frame(can_frame_t *frame){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	switch(frame->id){
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80013b4:	f000 8083 	beq.w	80014be <matel_mcu_process_can_frame+0x11a>
 80013b8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80013bc:	f200 8080 	bhi.w	80014c0 <matel_mcu_process_can_frame+0x11c>
 80013c0:	4a41      	ldr	r2, [pc, #260]	@ (80014c8 <matel_mcu_process_can_frame+0x124>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d074      	beq.n	80014b0 <matel_mcu_process_can_frame+0x10c>
 80013c6:	4a40      	ldr	r2, [pc, #256]	@ (80014c8 <matel_mcu_process_can_frame+0x124>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d879      	bhi.n	80014c0 <matel_mcu_process_can_frame+0x11c>
 80013cc:	4a3f      	ldr	r2, [pc, #252]	@ (80014cc <matel_mcu_process_can_frame+0x128>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d067      	beq.n	80014a2 <matel_mcu_process_can_frame+0xfe>
 80013d2:	4a3e      	ldr	r2, [pc, #248]	@ (80014cc <matel_mcu_process_can_frame+0x128>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d873      	bhi.n	80014c0 <matel_mcu_process_can_frame+0x11c>
 80013d8:	4a3d      	ldr	r2, [pc, #244]	@ (80014d0 <matel_mcu_process_can_frame+0x12c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d05a      	beq.n	8001494 <matel_mcu_process_can_frame+0xf0>
 80013de:	4a3c      	ldr	r2, [pc, #240]	@ (80014d0 <matel_mcu_process_can_frame+0x12c>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d86d      	bhi.n	80014c0 <matel_mcu_process_can_frame+0x11c>
 80013e4:	2bb3      	cmp	r3, #179	@ 0xb3
 80013e6:	d82d      	bhi.n	8001444 <matel_mcu_process_can_frame+0xa0>
 80013e8:	2ba1      	cmp	r3, #161	@ 0xa1
 80013ea:	d369      	bcc.n	80014c0 <matel_mcu_process_can_frame+0x11c>
 80013ec:	3ba1      	subs	r3, #161	@ 0xa1
 80013ee:	2b12      	cmp	r3, #18
 80013f0:	d866      	bhi.n	80014c0 <matel_mcu_process_can_frame+0x11c>
 80013f2:	a201      	add	r2, pc, #4	@ (adr r2, 80013f8 <matel_mcu_process_can_frame+0x54>)
 80013f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f8:	0800144f 	.word	0x0800144f
 80013fc:	080014c1 	.word	0x080014c1
 8001400:	080014c1 	.word	0x080014c1
 8001404:	080014c1 	.word	0x080014c1
 8001408:	080014c1 	.word	0x080014c1
 800140c:	080014c1 	.word	0x080014c1
 8001410:	080014c1 	.word	0x080014c1
 8001414:	080014c1 	.word	0x080014c1
 8001418:	080014c1 	.word	0x080014c1
 800141c:	080014c1 	.word	0x080014c1
 8001420:	080014c1 	.word	0x080014c1
 8001424:	080014c1 	.word	0x080014c1
 8001428:	080014c1 	.word	0x080014c1
 800142c:	0800145d 	.word	0x0800145d
 8001430:	0800146b 	.word	0x0800146b
 8001434:	080014c1 	.word	0x080014c1
 8001438:	080014c1 	.word	0x080014c1
 800143c:	080014c1 	.word	0x080014c1
 8001440:	08001479 	.word	0x08001479
 8001444:	f240 32aa 	movw	r2, #938	@ 0x3aa
 8001448:	4293      	cmp	r3, r2
 800144a:	d01c      	beq.n	8001486 <matel_mcu_process_can_frame+0xe2>
	                                             break;
	case Matel_VECTOR__INDEPENDENT_SIG_MSG_0xC0000000:
		                                       break;
	}

}
 800144c:	e038      	b.n	80014c0 <matel_mcu_process_can_frame+0x11c>
	case Matel_MCU_POWER_CAN_STD_ID_A1:decode_MCU_POWER_One(frame->data,&msg.MCU_POWER_One);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3307      	adds	r3, #7
 8001452:	4920      	ldr	r1, [pc, #128]	@ (80014d4 <matel_mcu_process_can_frame+0x130>)
 8001454:	4618      	mov	r0, r3
 8001456:	f000 ffb7 	bl	80023c8 <decode_MCU_POWER_One>
		                                break;
 800145a:	e031      	b.n	80014c0 <matel_mcu_process_can_frame+0x11c>
	case Matel_MCU_FAULT_one_CAN_STD_ID_AE:decode_MCU_FAULT_One(frame->data, &msg.MCU_FAULT_One);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3307      	adds	r3, #7
 8001460:	491d      	ldr	r1, [pc, #116]	@ (80014d8 <matel_mcu_process_can_frame+0x134>)
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fea2 	bl	80021ac <decode_MCU_FAULT_One>
		                                  break;
 8001468:	e02a      	b.n	80014c0 <matel_mcu_process_can_frame+0x11c>
	case Matel_MCU_FAULT_two_CAN_STD_ID_AF:decode_MCU_FAULT_two(frame->data,&msg.MCU_FAULT_two);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3307      	adds	r3, #7
 800146e:	491b      	ldr	r1, [pc, #108]	@ (80014dc <matel_mcu_process_can_frame+0x138>)
 8001470:	4618      	mov	r0, r3
 8001472:	f000 fd9d 	bl	8001fb0 <decode_MCU_FAULT_two>
		                                  break;
 8001476:	e023      	b.n	80014c0 <matel_mcu_process_can_frame+0x11c>
	case Matel_MCU_Fault_Code_CAN_STD_ID_B3:decode_MCU_Fault_Code(frame->data, &msg.MCU_Fault_Code);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3307      	adds	r3, #7
 800147c:	4918      	ldr	r1, [pc, #96]	@ (80014e0 <matel_mcu_process_can_frame+0x13c>)
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f9c8 	bl	8001814 <decode_MCU_Fault_Code>
		                                   break;
 8001484:	e01c      	b.n	80014c0 <matel_mcu_process_can_frame+0x11c>
	case Matel_CANFRAME3_CAN_STD_ID_3AA:decode_CANFRAME3(frame->data, &msg.CANFRAME3);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3307      	adds	r3, #7
 800148a:	4916      	ldr	r1, [pc, #88]	@ (80014e4 <matel_mcu_process_can_frame+0x140>)
 800148c:	4618      	mov	r0, r3
 800148e:	f000 fc1f 	bl	8001cd0 <decode_CANFRAME3>
		                                   break;
 8001492:	e015      	b.n	80014c0 <matel_mcu_process_can_frame+0x11c>
	case Matel_MCU_Stat_One_CAN_EXTD_ID_18265040:decode_MCU_Stat_One(frame->data, &msg.MCU_Stat_One);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3307      	adds	r3, #7
 8001498:	4913      	ldr	r1, [pc, #76]	@ (80014e8 <matel_mcu_process_can_frame+0x144>)
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fccc 	bl	8001e38 <decode_MCU_Stat_One>
		                                  break;
 80014a0:	e00e      	b.n	80014c0 <matel_mcu_process_can_frame+0x11c>
	case Matel_MCU_Stat_Two_CAN_EXTD_ID_18275040:decode_MCU_Stat_Two(frame->data, &msg.MCU_Stat_Two);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3307      	adds	r3, #7
 80014a6:	4911      	ldr	r1, [pc, #68]	@ (80014ec <matel_mcu_process_can_frame+0x148>)
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f935 	bl	8001718 <decode_MCU_Stat_Two>
		                                       break;
 80014ae:	e007      	b.n	80014c0 <matel_mcu_process_can_frame+0x11c>
	case Matel_MCU_HearthBeat_CAN_EXTD_ID_18963257:decode_HearthBeat(frame->data, &msg.HearthBeat);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3307      	adds	r3, #7
 80014b4:	490e      	ldr	r1, [pc, #56]	@ (80014f0 <matel_mcu_process_can_frame+0x14c>)
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fb3a 	bl	8001b30 <decode_HearthBeat>
	                                             break;
 80014bc:	e000      	b.n	80014c0 <matel_mcu_process_can_frame+0x11c>
		                                       break;
 80014be:	bf00      	nop
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	18963257 	.word	0x18963257
 80014cc:	18275040 	.word	0x18275040
 80014d0:	18265040 	.word	0x18265040
 80014d4:	20000300 	.word	0x20000300
 80014d8:	20000280 	.word	0x20000280
 80014dc:	20000208 	.word	0x20000208
 80014e0:	200000a0 	.word	0x200000a0
 80014e4:	200001c0 	.word	0x200001c0
 80014e8:	200001e8 	.word	0x200001e8
 80014ec:	20000088 	.word	0x20000088
 80014f0:	20000160 	.word	0x20000160

080014f4 <extract_motorola_u64>:
	uint64_t mask = (~0ULL) << len;
	return (int64_t)(v | mask);
	}
	return (int64_t)v;
}
static uint64_t extract_motorola_u64(const uint8_t *data, int start, int len) {
 80014f4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80014f8:	b08b      	sub	sp, #44	@ 0x2c
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	60f8      	str	r0, [r7, #12]
 80014fe:	60b9      	str	r1, [r7, #8]
 8001500:	607a      	str	r2, [r7, #4]
	if (len <= 0 || len > 64) return 0;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	dd02      	ble.n	800150e <extract_motorola_u64+0x1a>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b40      	cmp	r3, #64	@ 0x40
 800150c:	dd04      	ble.n	8001518 <extract_motorola_u64+0x24>
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	e051      	b.n	80015bc <extract_motorola_u64+0xc8>
	uint64_t value = 0;
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int cur_byte = start / 8;
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	da00      	bge.n	800152c <extract_motorola_u64+0x38>
 800152a:	3307      	adds	r3, #7
 800152c:	10db      	asrs	r3, r3, #3
 800152e:	61fb      	str	r3, [r7, #28]
	int cur_bit = start % 8; // 7 = MSB of byte
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	425a      	negs	r2, r3
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	f002 0207 	and.w	r2, r2, #7
 800153c:	bf58      	it	pl
 800153e:	4253      	negpl	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < len; i++) {
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	e033      	b.n	80015b0 <extract_motorola_u64+0xbc>
	uint8_t bit = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	74fb      	strb	r3, [r7, #19]
	if (cur_byte >= 0 && cur_byte < 8) bit = (data[cur_byte] >> cur_bit) & 1U;
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b00      	cmp	r3, #0
 8001550:	db0e      	blt.n	8001570 <extract_motorola_u64+0x7c>
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	2b07      	cmp	r3, #7
 8001556:	dc0b      	bgt.n	8001570 <extract_motorola_u64+0x7c>
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4413      	add	r3, r2
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	461a      	mov	r2, r3
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	fa42 f303 	asr.w	r3, r2, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	74fb      	strb	r3, [r7, #19]
	value = (value << 1) | (uint64_t)bit;
 8001570:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001574:	eb12 0a02 	adds.w	sl, r2, r2
 8001578:	eb43 0b03 	adc.w	fp, r3, r3
 800157c:	4652      	mov	r2, sl
 800157e:	465b      	mov	r3, fp
 8001580:	7cf9      	ldrb	r1, [r7, #19]
 8001582:	2000      	movs	r0, #0
 8001584:	460c      	mov	r4, r1
 8001586:	4605      	mov	r5, r0
 8001588:	ea42 0804 	orr.w	r8, r2, r4
 800158c:	ea43 0905 	orr.w	r9, r3, r5
 8001590:	e9c7 8908 	strd	r8, r9, [r7, #32]
	cur_bit--;
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	3b01      	subs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
	if (cur_bit < 0) { cur_byte++; cur_bit = 7; }
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b00      	cmp	r3, #0
 800159e:	da04      	bge.n	80015aa <extract_motorola_u64+0xb6>
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	3301      	adds	r3, #1
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	2307      	movs	r3, #7
 80015a8:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < len; i++) {
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dbc7      	blt.n	8001548 <extract_motorola_u64+0x54>
	}
	return value;
 80015b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	372c      	adds	r7, #44	@ 0x2c
 80015c2:	46bd      	mov	sp, r7
 80015c4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80015c8:	4770      	bx	lr

080015ca <extract_little_endian_u64>:


// Helper: extract Intel-format (little-endian) up to 64 bits
static uint64_t extract_little_endian_u64(const uint8_t *data, int start_bit, int length) {
 80015ca:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80015ce:	b092      	sub	sp, #72	@ 0x48
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6278      	str	r0, [r7, #36]	@ 0x24
 80015d4:	6239      	str	r1, [r7, #32]
 80015d6:	61fa      	str	r2, [r7, #28]
    if (length == 0 || length > 64) return 0;
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <extract_little_endian_u64+0x1a>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	2b40      	cmp	r3, #64	@ 0x40
 80015e2:	dd04      	ble.n	80015ee <extract_little_endian_u64+0x24>
 80015e4:	f04f 0500 	mov.w	r5, #0
 80015e8:	f04f 0600 	mov.w	r6, #0
 80015ec:	e08a      	b.n	8001704 <extract_little_endian_u64+0x13a>
    if (start_bit > 63) return 0;
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80015f2:	dd04      	ble.n	80015fe <extract_little_endian_u64+0x34>
 80015f4:	f04f 0500 	mov.w	r5, #0
 80015f8:	f04f 0600 	mov.w	r6, #0
 80015fc:	e082      	b.n	8001704 <extract_little_endian_u64+0x13a>
    if (start_bit + length > 64) return 0; // field overflows 64-bit
 80015fe:	6a3a      	ldr	r2, [r7, #32]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	4413      	add	r3, r2
 8001604:	2b40      	cmp	r3, #64	@ 0x40
 8001606:	dd04      	ble.n	8001612 <extract_little_endian_u64+0x48>
 8001608:	f04f 0500 	mov.w	r5, #0
 800160c:	f04f 0600 	mov.w	r6, #0
 8001610:	e078      	b.n	8001704 <extract_little_endian_u64+0x13a>

    // Build 64-bit value where bit 63..0 correspond to b63..b0
    uint64_t v = 0;
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    for (int i = 0; i < 8; ++i) {
 800161e:	2300      	movs	r3, #0
 8001620:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001622:	e020      	b.n	8001666 <extract_little_endian_u64+0x9c>
        v = (v << 8) | (uint64_t)data[i];
 8001624:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001628:	f04f 0000 	mov.w	r0, #0
 800162c:	f04f 0100 	mov.w	r1, #0
 8001630:	0219      	lsls	r1, r3, #8
 8001632:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8001636:	0210      	lsls	r0, r2, #8
 8001638:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	4413      	add	r3, r2
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2200      	movs	r2, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	60fa      	str	r2, [r7, #12]
 8001648:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800164c:	461a      	mov	r2, r3
 800164e:	4302      	orrs	r2, r0
 8001650:	603a      	str	r2, [r7, #0]
 8001652:	4623      	mov	r3, r4
 8001654:	430b      	orrs	r3, r1
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	e9d7 3400 	ldrd	r3, r4, [r7]
 800165c:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
    for (int i = 0; i < 8; ++i) {
 8001660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001662:	3301      	adds	r3, #1
 8001664:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001668:	2b07      	cmp	r3, #7
 800166a:	dddb      	ble.n	8001624 <extract_little_endian_u64+0x5a>
    }

    // Shift right by start_bit (LSB index) and mask 'length' bits
    if (length == 64) return v; // whole 64 bits
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	2b40      	cmp	r3, #64	@ 0x40
 8001670:	d102      	bne.n	8001678 <extract_little_endian_u64+0xae>
 8001672:	e9d7 5610 	ldrd	r5, r6, [r7, #64]	@ 0x40
 8001676:	e045      	b.n	8001704 <extract_little_endian_u64+0x13a>
    uint64_t shifted = v >> start_bit;
 8001678:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800167c:	6a39      	ldr	r1, [r7, #32]
 800167e:	f1c1 0420 	rsb	r4, r1, #32
 8001682:	f1a1 0020 	sub.w	r0, r1, #32
 8001686:	fa22 fa01 	lsr.w	sl, r2, r1
 800168a:	fa03 f404 	lsl.w	r4, r3, r4
 800168e:	ea4a 0a04 	orr.w	sl, sl, r4
 8001692:	fa23 f000 	lsr.w	r0, r3, r0
 8001696:	ea4a 0a00 	orr.w	sl, sl, r0
 800169a:	fa23 fb01 	lsr.w	fp, r3, r1
 800169e:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
    uint64_t mask = (length == 64) ? ~0ULL : ((1ULL << length) - 1ULL);
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	2b40      	cmp	r3, #64	@ 0x40
 80016a6:	d01b      	beq.n	80016e0 <extract_little_endian_u64+0x116>
 80016a8:	f04f 0201 	mov.w	r2, #1
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	69f9      	ldr	r1, [r7, #28]
 80016b2:	f1a1 0420 	sub.w	r4, r1, #32
 80016b6:	f1c1 0020 	rsb	r0, r1, #32
 80016ba:	fa03 f901 	lsl.w	r9, r3, r1
 80016be:	fa02 f404 	lsl.w	r4, r2, r4
 80016c2:	ea49 0904 	orr.w	r9, r9, r4
 80016c6:	fa22 f000 	lsr.w	r0, r2, r0
 80016ca:	ea49 0900 	orr.w	r9, r9, r0
 80016ce:	fa02 f801 	lsl.w	r8, r2, r1
 80016d2:	f118 33ff 	adds.w	r3, r8, #4294967295
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	f149 33ff 	adc.w	r3, r9, #4294967295
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e005      	b.n	80016ec <extract_little_endian_u64+0x122>
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
 80016e4:	f04f 34ff 	mov.w	r4, #4294967295
 80016e8:	e9c7 3404 	strd	r3, r4, [r7, #16]
 80016ec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016f0:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
    return shifted & mask;
 80016f4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80016f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80016fc:	ea00 0502 	and.w	r5, r0, r2
 8001700:	ea01 0603 	and.w	r6, r1, r3
}
 8001704:	462a      	mov	r2, r5
 8001706:	4633      	mov	r3, r6
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	3748      	adds	r7, #72	@ 0x48
 800170e:	46bd      	mov	sp, r7
 8001710:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001714:	4770      	bx	lr
	...

08001718 <decode_MCU_Stat_Two>:


// Implementations of decode functions follow (using extract helpers)


void decode_MCU_Stat_Two(const uint8_t *data, MCU_Stat_Two_t *out) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
	if (!out) return;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d062      	beq.n	80017ee <decode_MCU_Stat_Two+0xd6>
	// MCU_Odometer_Val: little-endian start=32 len=32 factor=0.1 offset=0.0
	uint64_t raw0 = extract_little_endian_u64(data, 32, 32);
 8001728:	2220      	movs	r2, #32
 800172a:	2120      	movs	r1, #32
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff4c 	bl	80015ca <extract_little_endian_u64>
 8001732:	e9c7 0106 	strd	r0, r1, [r7, #24]
	out->MCU_Odometer_Val = (double)raw0 * 0.1 + 0.0;
 8001736:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800173a:	f7fe ffb9 	bl	80006b0 <__aeabi_ul2d>
 800173e:	a32e      	add	r3, pc, #184	@ (adr r3, 80017f8 <decode_MCU_Stat_Two+0xe0>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe fd04 	bl	8000150 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	f7fe fe2a 	bl	80003b0 <__adddf3>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	6839      	ldr	r1, [r7, #0]
 8001762:	e9c1 2300 	strd	r2, r3, [r1]
	// MCU_VCU_State: little-endian start=24 len=8
	uint64_t raw1 = extract_little_endian_u64(data, 16, 16);
 8001766:	2210      	movs	r2, #16
 8001768:	2110      	movs	r1, #16
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff ff2d 	bl	80015ca <extract_little_endian_u64>
 8001770:	e9c7 0104 	strd	r0, r1, [r7, #16]
	out->MCU_VCU_State = (double)raw1;
 8001774:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001778:	f7fe ff9a 	bl	80006b0 <__aeabi_ul2d>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	6839      	ldr	r1, [r7, #0]
 8001782:	e9c1 2302 	strd	r2, r3, [r1, #8]
	// MCU_Motor_RPM: little-endian start=0 len=16 offset=-16384
	uint64_t raw2 = extract_little_endian_u64(data, 0, 16);
 8001786:	2210      	movs	r2, #16
 8001788:	2100      	movs	r1, #0
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff1d 	bl	80015ca <extract_little_endian_u64>
 8001790:	e9c7 0102 	strd	r0, r1, [r7, #8]
	out->MCU_Motor_RPM = (double)raw2 + -16384.0;
 8001794:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001798:	f7fe ff8a 	bl	80006b0 <__aeabi_ul2d>
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <decode_MCU_Stat_Two+0xe8>)
 80017a2:	f7fe fe03 	bl	80003ac <__aeabi_dsub>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	6839      	ldr	r1, [r7, #0]
 80017ac:	e9c1 2304 	strd	r2, r3, [r1, #16]

	uart_print_str(" Odometer: \n\r");
 80017b0:	4814      	ldr	r0, [pc, #80]	@ (8001804 <decode_MCU_Stat_Two+0xec>)
 80017b2:	f001 ff93 	bl	80036dc <uart_print_str>
	uart_send_double(out->MCU_Odometer_Val,3);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017bc:	2203      	movs	r2, #3
 80017be:	f001 ffa3 	bl	8003708 <uart_send_double>
	uart_print_str("\n\rMCU_VCU_State: \n\r");
 80017c2:	4811      	ldr	r0, [pc, #68]	@ (8001808 <decode_MCU_Stat_Two+0xf0>)
 80017c4:	f001 ff8a 	bl	80036dc <uart_print_str>
	uart_send_double(out->MCU_VCU_State,3);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80017ce:	2203      	movs	r2, #3
 80017d0:	f001 ff9a 	bl	8003708 <uart_send_double>
	uart_print_str("\n\r MCU_Motor_RPM \rn:");
 80017d4:	480d      	ldr	r0, [pc, #52]	@ (800180c <decode_MCU_Stat_Two+0xf4>)
 80017d6:	f001 ff81 	bl	80036dc <uart_print_str>
	uart_send_double(out->MCU_Motor_RPM,3);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80017e0:	2203      	movs	r2, #3
 80017e2:	f001 ff91 	bl	8003708 <uart_send_double>
	uart_print_str("============================================\n\r");
 80017e6:	480a      	ldr	r0, [pc, #40]	@ (8001810 <decode_MCU_Stat_Two+0xf8>)
 80017e8:	f001 ff78 	bl	80036dc <uart_print_str>
 80017ec:	e000      	b.n	80017f0 <decode_MCU_Stat_Two+0xd8>
	if (!out) return;
 80017ee:	bf00      	nop
}
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	9999999a 	.word	0x9999999a
 80017fc:	3fb99999 	.word	0x3fb99999
 8001800:	40d00000 	.word	0x40d00000
 8001804:	080067bc 	.word	0x080067bc
 8001808:	080067cc 	.word	0x080067cc
 800180c:	080067e0 	.word	0x080067e0
 8001810:	080067f8 	.word	0x080067f8

08001814 <decode_MCU_Fault_Code>:


void decode_MCU_Fault_Code(const uint8_t *data, MCU_Fault_Code_t *out) {
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
	if (!out) return;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 8181 	beq.w	8001b28 <decode_MCU_Fault_Code+0x314>
	// sequential 8-bit little-endian signals
	out->MCU_Fault_Code_0 = (double)extract_little_endian_u64(data, 0, 8);
 8001826:	2208      	movs	r2, #8
 8001828:	2100      	movs	r1, #0
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fecd 	bl	80015ca <extract_little_endian_u64>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7fe ff3a 	bl	80006b0 <__aeabi_ul2d>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	6839      	ldr	r1, [r7, #0]
 8001842:	e9c1 2300 	strd	r2, r3, [r1]
	out->MCU_Fault_Code_1 = (double)extract_little_endian_u64(data, 8, 8);
 8001846:	2208      	movs	r2, #8
 8001848:	2108      	movs	r1, #8
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff febd 	bl	80015ca <extract_little_endian_u64>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f7fe ff2a 	bl	80006b0 <__aeabi_ul2d>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	6839      	ldr	r1, [r7, #0]
 8001862:	e9c1 2302 	strd	r2, r3, [r1, #8]
	out->MCU_Fault_Code_2 = (double)extract_little_endian_u64(data, 16, 8);
 8001866:	2208      	movs	r2, #8
 8001868:	2110      	movs	r1, #16
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fead 	bl	80015ca <extract_little_endian_u64>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f7fe ff1a 	bl	80006b0 <__aeabi_ul2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	6839      	ldr	r1, [r7, #0]
 8001882:	e9c1 2304 	strd	r2, r3, [r1, #16]
	out->MCU_Fault_Code_3 = (double)extract_little_endian_u64(data, 24, 8);
 8001886:	2208      	movs	r2, #8
 8001888:	2118      	movs	r1, #24
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff fe9d 	bl	80015ca <extract_little_endian_u64>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f7fe ff0a 	bl	80006b0 <__aeabi_ul2d>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	6839      	ldr	r1, [r7, #0]
 80018a2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	out->MCU_Fault_Code_4 = (double)extract_little_endian_u64(data, 32, 8);
 80018a6:	2208      	movs	r2, #8
 80018a8:	2120      	movs	r1, #32
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fe8d 	bl	80015ca <extract_little_endian_u64>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7fe fefa 	bl	80006b0 <__aeabi_ul2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	6839      	ldr	r1, [r7, #0]
 80018c2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	out->MCU_Fault_Code_5 = (double)extract_little_endian_u64(data, 40, 8);
 80018c6:	2208      	movs	r2, #8
 80018c8:	2128      	movs	r1, #40	@ 0x28
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fe7d 	bl	80015ca <extract_little_endian_u64>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7fe feea 	bl	80006b0 <__aeabi_ul2d>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	6839      	ldr	r1, [r7, #0]
 80018e2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	out->MCU_Fault_Code_6 = (double)extract_little_endian_u64(data, 48, 8);
 80018e6:	2208      	movs	r2, #8
 80018e8:	2130      	movs	r1, #48	@ 0x30
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fe6d 	bl	80015ca <extract_little_endian_u64>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	f7fe feda 	bl	80006b0 <__aeabi_ul2d>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	6839      	ldr	r1, [r7, #0]
 8001902:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	out->MCU_Fault_Code_7 = (double)extract_little_endian_u64(data, 56, 8);
 8001906:	2208      	movs	r2, #8
 8001908:	2138      	movs	r1, #56	@ 0x38
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff fe5d 	bl	80015ca <extract_little_endian_u64>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	f7fe feca 	bl	80006b0 <__aeabi_ul2d>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	6839      	ldr	r1, [r7, #0]
 8001922:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	out->MCU_Fault_Code_8 = (double)extract_little_endian_u64(data, 64, 8);
 8001926:	2208      	movs	r2, #8
 8001928:	2140      	movs	r1, #64	@ 0x40
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff fe4d 	bl	80015ca <extract_little_endian_u64>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	f7fe feba 	bl	80006b0 <__aeabi_ul2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	6839      	ldr	r1, [r7, #0]
 8001942:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	out->MCU_Fault_Code_9 = (double)extract_little_endian_u64(data, 72, 8);
 8001946:	2208      	movs	r2, #8
 8001948:	2148      	movs	r1, #72	@ 0x48
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff fe3d 	bl	80015ca <extract_little_endian_u64>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f7fe feaa 	bl	80006b0 <__aeabi_ul2d>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	6839      	ldr	r1, [r7, #0]
 8001962:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	out->MCU_Fault_Code_10 = (double)extract_little_endian_u64(data, 80, 8);
 8001966:	2208      	movs	r2, #8
 8001968:	2150      	movs	r1, #80	@ 0x50
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff fe2d 	bl	80015ca <extract_little_endian_u64>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	f7fe fe9a 	bl	80006b0 <__aeabi_ul2d>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	6839      	ldr	r1, [r7, #0]
 8001982:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	out->MCU_Fault_Code_11 = (double)extract_little_endian_u64(data, 88, 8);
 8001986:	2208      	movs	r2, #8
 8001988:	2158      	movs	r1, #88	@ 0x58
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff fe1d 	bl	80015ca <extract_little_endian_u64>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f7fe fe8a 	bl	80006b0 <__aeabi_ul2d>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	6839      	ldr	r1, [r7, #0]
 80019a2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	out->MCU_Fault_Code_12 = (double)extract_little_endian_u64(data, 96, 8);
 80019a6:	2208      	movs	r2, #8
 80019a8:	2160      	movs	r1, #96	@ 0x60
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff fe0d 	bl	80015ca <extract_little_endian_u64>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	f7fe fe7a 	bl	80006b0 <__aeabi_ul2d>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	6839      	ldr	r1, [r7, #0]
 80019c2:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	out->MCU_Fault_Code_13 = (double)extract_little_endian_u64(data, 104, 8);
 80019c6:	2208      	movs	r2, #8
 80019c8:	2168      	movs	r1, #104	@ 0x68
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fdfd 	bl	80015ca <extract_little_endian_u64>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	f7fe fe6a 	bl	80006b0 <__aeabi_ul2d>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	6839      	ldr	r1, [r7, #0]
 80019e2:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	out->MCU_Fault_Code_14 = (double)extract_little_endian_u64(data, 112, 8);
 80019e6:	2208      	movs	r2, #8
 80019e8:	2170      	movs	r1, #112	@ 0x70
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fded 	bl	80015ca <extract_little_endian_u64>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7fe fe5a 	bl	80006b0 <__aeabi_ul2d>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	6839      	ldr	r1, [r7, #0]
 8001a02:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	out->MCU_Fault_Code_15 = (double)extract_little_endian_u64(data, 120, 8);
 8001a06:	2208      	movs	r2, #8
 8001a08:	2178      	movs	r1, #120	@ 0x78
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff fddd 	bl	80015ca <extract_little_endian_u64>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7fe fe4a 	bl	80006b0 <__aeabi_ul2d>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	6839      	ldr	r1, [r7, #0]
 8001a22:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	out->MCU_Fault_Code_16 = (double)extract_little_endian_u64(data, 128, 8);
 8001a26:	2208      	movs	r2, #8
 8001a28:	2180      	movs	r1, #128	@ 0x80
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fdcd 	bl	80015ca <extract_little_endian_u64>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	f7fe fe3a 	bl	80006b0 <__aeabi_ul2d>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	6839      	ldr	r1, [r7, #0]
 8001a42:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
	out->MCU_Fault_Code_17 = (double)extract_little_endian_u64(data, 136, 8);
 8001a46:	2208      	movs	r2, #8
 8001a48:	2188      	movs	r1, #136	@ 0x88
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff fdbd 	bl	80015ca <extract_little_endian_u64>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7fe fe2a 	bl	80006b0 <__aeabi_ul2d>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	out->MCU_Fault_Code_18 = (double)extract_little_endian_u64(data, 144, 8);
 8001a66:	2208      	movs	r2, #8
 8001a68:	2190      	movs	r1, #144	@ 0x90
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff fdad 	bl	80015ca <extract_little_endian_u64>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7fe fe1a 	bl	80006b0 <__aeabi_ul2d>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	6839      	ldr	r1, [r7, #0]
 8001a82:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
	out->MCU_Fault_Code_19 = (double)extract_little_endian_u64(data, 152, 8);
 8001a86:	2208      	movs	r2, #8
 8001a88:	2198      	movs	r1, #152	@ 0x98
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff fd9d 	bl	80015ca <extract_little_endian_u64>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7fe fe0a 	bl	80006b0 <__aeabi_ul2d>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	6839      	ldr	r1, [r7, #0]
 8001aa2:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98
	out->MCU_Fault_Code_20 = (double)extract_little_endian_u64(data, 160, 8);
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	21a0      	movs	r1, #160	@ 0xa0
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff fd8d 	bl	80015ca <extract_little_endian_u64>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7fe fdfa 	bl	80006b0 <__aeabi_ul2d>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	6839      	ldr	r1, [r7, #0]
 8001ac2:	e9c1 2328 	strd	r2, r3, [r1, #160]	@ 0xa0
	out->MCU_Fault_Code_21 = (double)extract_little_endian_u64(data, 168, 8);
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	21a8      	movs	r1, #168	@ 0xa8
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff fd7d 	bl	80015ca <extract_little_endian_u64>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7fe fdea 	bl	80006b0 <__aeabi_ul2d>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	6839      	ldr	r1, [r7, #0]
 8001ae2:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8
	out->MCU_Fault_Code_22 = (double)extract_little_endian_u64(data, 176, 8);
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	21b0      	movs	r1, #176	@ 0xb0
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff fd6d 	bl	80015ca <extract_little_endian_u64>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f7fe fdda 	bl	80006b0 <__aeabi_ul2d>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	6839      	ldr	r1, [r7, #0]
 8001b02:	e9c1 232c 	strd	r2, r3, [r1, #176]	@ 0xb0
	out->MCU_Fault_Code_23 = (double)extract_little_endian_u64(data, 184, 8);
 8001b06:	2208      	movs	r2, #8
 8001b08:	21b8      	movs	r1, #184	@ 0xb8
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff fd5d 	bl	80015ca <extract_little_endian_u64>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7fe fdca 	bl	80006b0 <__aeabi_ul2d>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	6839      	ldr	r1, [r7, #0]
 8001b22:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
 8001b26:	e000      	b.n	8001b2a <decode_MCU_Fault_Code+0x316>
	if (!out) return;
 8001b28:	bf00      	nop
}
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <decode_HearthBeat>:


void decode_HearthBeat(const uint8_t *data, HearthBeat_t *out) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
if (!out) return;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80c1 	beq.w	8001cc4 <decode_HearthBeat+0x194>
out->HeartBeat_Stat0 = (double)extract_little_endian_u64(data, 0, 1);
 8001b42:	2201      	movs	r2, #1
 8001b44:	2100      	movs	r1, #0
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fd3f 	bl	80015ca <extract_little_endian_u64>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	f7fe fdac 	bl	80006b0 <__aeabi_ul2d>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	6839      	ldr	r1, [r7, #0]
 8001b5e:	e9c1 2300 	strd	r2, r3, [r1]
out->HeartBeat_Stat1 = (double)extract_little_endian_u64(data, 1, 1);
 8001b62:	2201      	movs	r2, #1
 8001b64:	2101      	movs	r1, #1
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff fd2f 	bl	80015ca <extract_little_endian_u64>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7fe fd9c 	bl	80006b0 <__aeabi_ul2d>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	6839      	ldr	r1, [r7, #0]
 8001b7e:	e9c1 2302 	strd	r2, r3, [r1, #8]
out->HeartBeat_Stat2 = (double)extract_little_endian_u64(data, 2, 1);
 8001b82:	2201      	movs	r2, #1
 8001b84:	2102      	movs	r1, #2
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fd1f 	bl	80015ca <extract_little_endian_u64>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f7fe fd8c 	bl	80006b0 <__aeabi_ul2d>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	6839      	ldr	r1, [r7, #0]
 8001b9e:	e9c1 2304 	strd	r2, r3, [r1, #16]
out->HeartBeat_Stat3 = (double)extract_little_endian_u64(data, 3, 1);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	2103      	movs	r1, #3
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fd0f 	bl	80015ca <extract_little_endian_u64>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f7fe fd7c 	bl	80006b0 <__aeabi_ul2d>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	460b      	mov	r3, r1
 8001bbc:	6839      	ldr	r1, [r7, #0]
 8001bbe:	e9c1 2306 	strd	r2, r3, [r1, #24]
out->HeartBeat_Stat4 = (double)extract_little_endian_u64(data, 4, 1);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	2104      	movs	r1, #4
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fcff 	bl	80015ca <extract_little_endian_u64>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4610      	mov	r0, r2
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	f7fe fd6c 	bl	80006b0 <__aeabi_ul2d>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	6839      	ldr	r1, [r7, #0]
 8001bde:	e9c1 2308 	strd	r2, r3, [r1, #32]
out->HeartBeat_Stat5 = (double)extract_little_endian_u64(data, 5, 1);
 8001be2:	2201      	movs	r2, #1
 8001be4:	2105      	movs	r1, #5
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fcef 	bl	80015ca <extract_little_endian_u64>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f7fe fd5c 	bl	80006b0 <__aeabi_ul2d>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	6839      	ldr	r1, [r7, #0]
 8001bfe:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
out->HeartBeat_Stat6 = (double)extract_little_endian_u64(data, 6, 1);
 8001c02:	2201      	movs	r2, #1
 8001c04:	2106      	movs	r1, #6
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fcdf 	bl	80015ca <extract_little_endian_u64>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7fe fd4c 	bl	80006b0 <__aeabi_ul2d>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	6839      	ldr	r1, [r7, #0]
 8001c1e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
out->HeartBeat_Stat7 = (double)extract_little_endian_u64(data, 7, 1);
 8001c22:	2201      	movs	r2, #1
 8001c24:	2107      	movs	r1, #7
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fccf 	bl	80015ca <extract_little_endian_u64>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	f7fe fd3c 	bl	80006b0 <__aeabi_ul2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	6839      	ldr	r1, [r7, #0]
 8001c3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
out->HeartBeat_Stat8 = (double)extract_little_endian_u64(data, 8, 1);
 8001c42:	2201      	movs	r2, #1
 8001c44:	2108      	movs	r1, #8
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff fcbf 	bl	80015ca <extract_little_endian_u64>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe fd2c 	bl	80006b0 <__aeabi_ul2d>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	6839      	ldr	r1, [r7, #0]
 8001c5e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
out->HeartBeat_Stat9 = (double)extract_little_endian_u64(data, 9, 1);
 8001c62:	2201      	movs	r2, #1
 8001c64:	2109      	movs	r1, #9
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff fcaf 	bl	80015ca <extract_little_endian_u64>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7fe fd1c 	bl	80006b0 <__aeabi_ul2d>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	6839      	ldr	r1, [r7, #0]
 8001c7e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
out->HeartBeat_Stat10 = (double)extract_little_endian_u64(data, 10, 1);
 8001c82:	2201      	movs	r2, #1
 8001c84:	210a      	movs	r1, #10
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fc9f 	bl	80015ca <extract_little_endian_u64>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	f7fe fd0c 	bl	80006b0 <__aeabi_ul2d>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	6839      	ldr	r1, [r7, #0]
 8001c9e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
out->HeartBeat_Stat11 = (double)extract_little_endian_u64(data, 11, 1);
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	210b      	movs	r1, #11
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fc8f 	bl	80015ca <extract_little_endian_u64>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f7fe fcfc 	bl	80006b0 <__aeabi_ul2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	6839      	ldr	r1, [r7, #0]
 8001cbe:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
 8001cc2:	e000      	b.n	8001cc6 <decode_HearthBeat+0x196>
if (!out) return;
 8001cc4:	bf00      	nop
}
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	0000      	movs	r0, r0
	...

08001cd0 <decode_CANFRAME3>:


void decode_CANFRAME3(const uint8_t *data, CANFRAME3_t *out) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
if (!out) return;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 8097 	beq.w	8001e10 <decode_CANFRAME3+0x140>
out->CANFRAME3_sig0 = (double)extract_motorola_u64(data, 7, 17)*0.01-500;
 8001ce2:	2211      	movs	r2, #17
 8001ce4:	2107      	movs	r1, #7
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fc04 	bl	80014f4 <extract_motorola_u64>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe fcdc 	bl	80006b0 <__aeabi_ul2d>
 8001cf8:	a347      	add	r3, pc, #284	@ (adr r3, 8001e18 <decode_CANFRAME3+0x148>)
 8001cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfe:	f7fe fa27 	bl	8000150 <__aeabi_dmul>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	4b46      	ldr	r3, [pc, #280]	@ (8001e28 <decode_CANFRAME3+0x158>)
 8001d10:	f7fe fb4c 	bl	80003ac <__aeabi_dsub>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	6839      	ldr	r1, [r7, #0]
 8001d1a:	e9c1 2300 	strd	r2, r3, [r1]
uart_send_double(out->CANFRAME3_sig0,3);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d24:	2203      	movs	r2, #3
 8001d26:	f001 fcef 	bl	8003708 <uart_send_double>
uart_print_str("\n\r");
 8001d2a:	4840      	ldr	r0, [pc, #256]	@ (8001e2c <decode_CANFRAME3+0x15c>)
 8001d2c:	f001 fcd6 	bl	80036dc <uart_print_str>
out->CANFRAME3_sig1 = (double)extract_motorola_u64(data, 35, 9);
 8001d30:	2209      	movs	r2, #9
 8001d32:	2123      	movs	r1, #35	@ 0x23
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff fbdd 	bl	80014f4 <extract_motorola_u64>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7fe fcb5 	bl	80006b0 <__aeabi_ul2d>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	6839      	ldr	r1, [r7, #0]
 8001d4c:	e9c1 2302 	strd	r2, r3, [r1, #8]
uart_send_double(out->CANFRAME3_sig1,3);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d56:	2203      	movs	r2, #3
 8001d58:	f001 fcd6 	bl	8003708 <uart_send_double>
uart_print_str("\n\r");
 8001d5c:	4833      	ldr	r0, [pc, #204]	@ (8001e2c <decode_CANFRAME3+0x15c>)
 8001d5e:	f001 fcbd 	bl	80036dc <uart_print_str>
out->CANFRAME3_sig2 = (double)extract_motorola_u64(data, 41, 8);
 8001d62:	2208      	movs	r2, #8
 8001d64:	2129      	movs	r1, #41	@ 0x29
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff fbc4 	bl	80014f4 <extract_motorola_u64>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	f7fe fc9c 	bl	80006b0 <__aeabi_ul2d>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	6839      	ldr	r1, [r7, #0]
 8001d7e:	e9c1 2304 	strd	r2, r3, [r1, #16]
uart_send_double(out->CANFRAME3_sig2,3);
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d88:	2203      	movs	r2, #3
 8001d8a:	f001 fcbd 	bl	8003708 <uart_send_double>
uart_print_str("\n\r");
 8001d8e:	4827      	ldr	r0, [pc, #156]	@ (8001e2c <decode_CANFRAME3+0x15c>)
 8001d90:	f001 fca4 	bl	80036dc <uart_print_str>
out->CANFRAME3_sig3 = (double)extract_motorola_u64(data, 28, 9);
 8001d94:	2209      	movs	r2, #9
 8001d96:	211c      	movs	r1, #28
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff fbab 	bl	80014f4 <extract_motorola_u64>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7fe fc83 	bl	80006b0 <__aeabi_ul2d>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	6839      	ldr	r1, [r7, #0]
 8001db0:	e9c1 2306 	strd	r2, r3, [r1, #24]
uart_send_double(out->CANFRAME3_sig3,3);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001dba:	2203      	movs	r2, #3
 8001dbc:	f001 fca4 	bl	8003708 <uart_send_double>
uart_print_str("\n\r");
 8001dc0:	481a      	ldr	r0, [pc, #104]	@ (8001e2c <decode_CANFRAME3+0x15c>)
 8001dc2:	f001 fc8b 	bl	80036dc <uart_print_str>
uart_print_str("============================================\n\r");
 8001dc6:	481a      	ldr	r0, [pc, #104]	@ (8001e30 <decode_CANFRAME3+0x160>)
 8001dc8:	f001 fc88 	bl	80036dc <uart_print_str>

out->CANFRAME3_sig4 = (double)extract_motorola_u64(data, 22, 10)*0.1;
 8001dcc:	220a      	movs	r2, #10
 8001dce:	2116      	movs	r1, #22
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f7ff fb8f 	bl	80014f4 <extract_motorola_u64>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe fc67 	bl	80006b0 <__aeabi_ul2d>
 8001de2:	a30f      	add	r3, pc, #60	@ (adr r3, 8001e20 <decode_CANFRAME3+0x150>)
 8001de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de8:	f7fe f9b2 	bl	8000150 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	6839      	ldr	r1, [r7, #0]
 8001df2:	e9c1 2308 	strd	r2, r3, [r1, #32]
uart_send_double(out->CANFRAME3_sig4,3);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	f001 fc83 	bl	8003708 <uart_send_double>
uart_print_str("\n\r");
 8001e02:	480a      	ldr	r0, [pc, #40]	@ (8001e2c <decode_CANFRAME3+0x15c>)
 8001e04:	f001 fc6a 	bl	80036dc <uart_print_str>

uart_print_str("done \n\r");
 8001e08:	480a      	ldr	r0, [pc, #40]	@ (8001e34 <decode_CANFRAME3+0x164>)
 8001e0a:	f001 fc67 	bl	80036dc <uart_print_str>
 8001e0e:	e000      	b.n	8001e12 <decode_CANFRAME3+0x142>
if (!out) return;
 8001e10:	bf00      	nop

}
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	47ae147b 	.word	0x47ae147b
 8001e1c:	3f847ae1 	.word	0x3f847ae1
 8001e20:	9999999a 	.word	0x9999999a
 8001e24:	3fb99999 	.word	0x3fb99999
 8001e28:	407f4000 	.word	0x407f4000
 8001e2c:	08006828 	.word	0x08006828
 8001e30:	080067f8 	.word	0x080067f8
 8001e34:	0800682c 	.word	0x0800682c

08001e38 <decode_MCU_Stat_One>:


void decode_MCU_Stat_One(const uint8_t *data, MCU_Stat_One_t *out) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
if (!out) return;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8094 	beq.w	8001f72 <decode_MCU_Stat_One+0x13a>
out->MCU_Stat_One_sig0 = (int)extract_little_endian_u64(data, 8, 8)-40;
 8001e4a:	2208      	movs	r2, #8
 8001e4c:	2108      	movs	r1, #8
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff fbbb 	bl	80015ca <extract_little_endian_u64>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4613      	mov	r3, r2
 8001e5a:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	601a      	str	r2, [r3, #0]
out->MCU_Stat_One_sig1 = (int)extract_little_endian_u64(data, 0, 8)-40;
 8001e62:	2208      	movs	r2, #8
 8001e64:	2100      	movs	r1, #0
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fbaf 	bl	80015ca <extract_little_endian_u64>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4613      	mov	r3, r2
 8001e72:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	605a      	str	r2, [r3, #4]
out->MCU_Stat_One_sig2 = (double)extract_little_endian_u64(data, 16, 16)*0.1;
 8001e7a:	2210      	movs	r2, #16
 8001e7c:	2110      	movs	r1, #16
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fba3 	bl	80015ca <extract_little_endian_u64>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f7fe fc10 	bl	80006b0 <__aeabi_ul2d>
 8001e90:	a33b      	add	r3, pc, #236	@ (adr r3, 8001f80 <decode_MCU_Stat_One+0x148>)
 8001e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e96:	f7fe f95b 	bl	8000150 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	6839      	ldr	r1, [r7, #0]
 8001ea0:	e9c1 2302 	strd	r2, r3, [r1, #8]
out->MCU_Stat_One_sig3 = (int)extract_little_endian_u64(data, 56, 3);
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	2138      	movs	r1, #56	@ 0x38
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff fb8e 	bl	80015ca <extract_little_endian_u64>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	611a      	str	r2, [r3, #16]
out->MCU_Stat_One_sig4 = (int)extract_little_endian_u64(data, 48, 8);
 8001eb6:	2208      	movs	r2, #8
 8001eb8:	2130      	movs	r1, #48	@ 0x30
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fb85 	bl	80015ca <extract_little_endian_u64>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	615a      	str	r2, [r3, #20]
out->MCU_Stat_One_sig5 = (int)extract_little_endian_u64(data, 40, 8);
 8001ec8:	2208      	movs	r2, #8
 8001eca:	2128      	movs	r1, #40	@ 0x28
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff fb7c 	bl	80015ca <extract_little_endian_u64>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	619a      	str	r2, [r3, #24]
out->MCU_Stat_One_sig6 = (int)extract_little_endian_u64(data, 32, 8);
 8001eda:	2208      	movs	r2, #8
 8001edc:	2120      	movs	r1, #32
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff fb73 	bl	80015ca <extract_little_endian_u64>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	61da      	str	r2, [r3, #28]
uart_print_str("\n\r MCU_Motor_Temp: ");
 8001eec:	4826      	ldr	r0, [pc, #152]	@ (8001f88 <decode_MCU_Stat_One+0x150>)
 8001eee:	f001 fbf5 	bl	80036dc <uart_print_str>
uart_printf("%d ",out->MCU_Stat_One_sig0);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4824      	ldr	r0, [pc, #144]	@ (8001f8c <decode_MCU_Stat_One+0x154>)
 8001efa:	f001 fcf9 	bl	80038f0 <uart_printf>
uart_print_str("\n\r MCU_PCB_Temp: ");
 8001efe:	4824      	ldr	r0, [pc, #144]	@ (8001f90 <decode_MCU_Stat_One+0x158>)
 8001f00:	f001 fbec 	bl	80036dc <uart_print_str>
uart_printf("%d ",out->MCU_Stat_One_sig1);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4820      	ldr	r0, [pc, #128]	@ (8001f8c <decode_MCU_Stat_One+0x154>)
 8001f0c:	f001 fcf0 	bl	80038f0 <uart_printf>
uart_print_str("\n\r MCU_RMS_Current");
 8001f10:	4820      	ldr	r0, [pc, #128]	@ (8001f94 <decode_MCU_Stat_One+0x15c>)
 8001f12:	f001 fbe3 	bl	80036dc <uart_print_str>
uart_send_double(out->MCU_Stat_One_sig2,3);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	f001 fbf3 	bl	8003708 <uart_send_double>
uart_print_str("\n\r MCU_Drive_Mode: ");
 8001f22:	481d      	ldr	r0, [pc, #116]	@ (8001f98 <decode_MCU_Stat_One+0x160>)
 8001f24:	f001 fbda 	bl	80036dc <uart_print_str>
uart_printf("%d ",out->MCU_Stat_One_sig3);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4817      	ldr	r0, [pc, #92]	@ (8001f8c <decode_MCU_Stat_One+0x154>)
 8001f30:	f001 fcde 	bl	80038f0 <uart_printf>
uart_print_str("\n\r MCU_Speed_Kmph: ");
 8001f34:	4819      	ldr	r0, [pc, #100]	@ (8001f9c <decode_MCU_Stat_One+0x164>)
 8001f36:	f001 fbd1 	bl	80036dc <uart_print_str>
uart_printf("%d ",out->MCU_Stat_One_sig4);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4812      	ldr	r0, [pc, #72]	@ (8001f8c <decode_MCU_Stat_One+0x154>)
 8001f42:	f001 fcd5 	bl	80038f0 <uart_printf>
uart_print_str("\n\r MCU_Brake_perc: ");
 8001f46:	4816      	ldr	r0, [pc, #88]	@ (8001fa0 <decode_MCU_Stat_One+0x168>)
 8001f48:	f001 fbc8 	bl	80036dc <uart_print_str>
uart_printf("%d ",out->MCU_Stat_One_sig5);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	4619      	mov	r1, r3
 8001f52:	480e      	ldr	r0, [pc, #56]	@ (8001f8c <decode_MCU_Stat_One+0x154>)
 8001f54:	f001 fccc 	bl	80038f0 <uart_printf>
uart_print_str("\n\r MCU_Throttle_perc: ");
 8001f58:	4812      	ldr	r0, [pc, #72]	@ (8001fa4 <decode_MCU_Stat_One+0x16c>)
 8001f5a:	f001 fbbf 	bl	80036dc <uart_print_str>
uart_printf("%d \n\r",out->MCU_Stat_One_sig6);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4619      	mov	r1, r3
 8001f64:	4810      	ldr	r0, [pc, #64]	@ (8001fa8 <decode_MCU_Stat_One+0x170>)
 8001f66:	f001 fcc3 	bl	80038f0 <uart_printf>
uart_print_str("============================================\n\r");
 8001f6a:	4810      	ldr	r0, [pc, #64]	@ (8001fac <decode_MCU_Stat_One+0x174>)
 8001f6c:	f001 fbb6 	bl	80036dc <uart_print_str>
 8001f70:	e000      	b.n	8001f74 <decode_MCU_Stat_One+0x13c>
if (!out) return;
 8001f72:	bf00      	nop
}
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	f3af 8000 	nop.w
 8001f80:	9999999a 	.word	0x9999999a
 8001f84:	3fb99999 	.word	0x3fb99999
 8001f88:	08006834 	.word	0x08006834
 8001f8c:	08006848 	.word	0x08006848
 8001f90:	0800684c 	.word	0x0800684c
 8001f94:	08006860 	.word	0x08006860
 8001f98:	08006874 	.word	0x08006874
 8001f9c:	08006888 	.word	0x08006888
 8001fa0:	0800689c 	.word	0x0800689c
 8001fa4:	080068b0 	.word	0x080068b0
 8001fa8:	080068c8 	.word	0x080068c8
 8001fac:	080067f8 	.word	0x080067f8

08001fb0 <decode_MCU_FAULT_two>:


void decode_MCU_FAULT_two(const uint8_t *data, MCU_FAULT_two_t *out) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
if (!out) return;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80f1 	beq.w	80021a4 <decode_MCU_FAULT_two+0x1f4>
out->MCU_FAULT_two_sig0 = (double)extract_little_endian_u64(data, 0, 8);
 8001fc2:	2208      	movs	r2, #8
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff faff 	bl	80015ca <extract_little_endian_u64>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f7fe fb6c 	bl	80006b0 <__aeabi_ul2d>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	6839      	ldr	r1, [r7, #0]
 8001fde:	e9c1 2300 	strd	r2, r3, [r1]
out->MCU_FAULT_two_sig1 = (double)extract_little_endian_u64(data, 8, 8);
 8001fe2:	2208      	movs	r2, #8
 8001fe4:	2108      	movs	r1, #8
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff faef 	bl	80015ca <extract_little_endian_u64>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f7fe fb5c 	bl	80006b0 <__aeabi_ul2d>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	6839      	ldr	r1, [r7, #0]
 8001ffe:	e9c1 2302 	strd	r2, r3, [r1, #8]
out->MCU_FAULT_two_sig2 = (double)extract_little_endian_u64(data, 16, 8);
 8002002:	2208      	movs	r2, #8
 8002004:	2110      	movs	r1, #16
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fadf 	bl	80015ca <extract_little_endian_u64>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	f7fe fb4c 	bl	80006b0 <__aeabi_ul2d>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	6839      	ldr	r1, [r7, #0]
 800201e:	e9c1 2304 	strd	r2, r3, [r1, #16]
out->MCU_FAULT_two_sig3 = (double)extract_little_endian_u64(data, 24, 8);
 8002022:	2208      	movs	r2, #8
 8002024:	2118      	movs	r1, #24
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff facf 	bl	80015ca <extract_little_endian_u64>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f7fe fb3c 	bl	80006b0 <__aeabi_ul2d>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	6839      	ldr	r1, [r7, #0]
 800203e:	e9c1 2306 	strd	r2, r3, [r1, #24]
out->MCU_FAULT_two_sig4 = (double)extract_little_endian_u64(data, 32, 8);
 8002042:	2208      	movs	r2, #8
 8002044:	2120      	movs	r1, #32
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fabf 	bl	80015ca <extract_little_endian_u64>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	f7fe fb2c 	bl	80006b0 <__aeabi_ul2d>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	6839      	ldr	r1, [r7, #0]
 800205e:	e9c1 2308 	strd	r2, r3, [r1, #32]
out->MCU_FAULT_two_sig5 = (double)extract_little_endian_u64(data, 40, 8);
 8002062:	2208      	movs	r2, #8
 8002064:	2128      	movs	r1, #40	@ 0x28
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff faaf 	bl	80015ca <extract_little_endian_u64>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	4610      	mov	r0, r2
 8002072:	4619      	mov	r1, r3
 8002074:	f7fe fb1c 	bl	80006b0 <__aeabi_ul2d>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	6839      	ldr	r1, [r7, #0]
 800207e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
out->MCU_FAULT_two_sig6 = (double)extract_little_endian_u64(data, 48, 8);
 8002082:	2208      	movs	r2, #8
 8002084:	2130      	movs	r1, #48	@ 0x30
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fa9f 	bl	80015ca <extract_little_endian_u64>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4610      	mov	r0, r2
 8002092:	4619      	mov	r1, r3
 8002094:	f7fe fb0c 	bl	80006b0 <__aeabi_ul2d>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	6839      	ldr	r1, [r7, #0]
 800209e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
out->MCU_FAULT_two_sig7 = (double)extract_little_endian_u64(data, 56, 8);
 80020a2:	2208      	movs	r2, #8
 80020a4:	2138      	movs	r1, #56	@ 0x38
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff fa8f 	bl	80015ca <extract_little_endian_u64>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	f7fe fafc 	bl	80006b0 <__aeabi_ul2d>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	6839      	ldr	r1, [r7, #0]
 80020be:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
out->MCU_FAULT_two_sig8 = (double)extract_little_endian_u64(data, 64, 8);
 80020c2:	2208      	movs	r2, #8
 80020c4:	2140      	movs	r1, #64	@ 0x40
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fa7f 	bl	80015ca <extract_little_endian_u64>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4610      	mov	r0, r2
 80020d2:	4619      	mov	r1, r3
 80020d4:	f7fe faec 	bl	80006b0 <__aeabi_ul2d>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	6839      	ldr	r1, [r7, #0]
 80020de:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
out->MCU_FAULT_two_sig9 = (double)extract_little_endian_u64(data, 72, 8);
 80020e2:	2208      	movs	r2, #8
 80020e4:	2148      	movs	r1, #72	@ 0x48
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fa6f 	bl	80015ca <extract_little_endian_u64>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4610      	mov	r0, r2
 80020f2:	4619      	mov	r1, r3
 80020f4:	f7fe fadc 	bl	80006b0 <__aeabi_ul2d>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	6839      	ldr	r1, [r7, #0]
 80020fe:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
out->MCU_FAULT_two_sig10 = (double)extract_little_endian_u64(data, 80, 8);
 8002102:	2208      	movs	r2, #8
 8002104:	2150      	movs	r1, #80	@ 0x50
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff fa5f 	bl	80015ca <extract_little_endian_u64>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	f7fe facc 	bl	80006b0 <__aeabi_ul2d>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	6839      	ldr	r1, [r7, #0]
 800211e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
out->MCU_FAULT_two_sig11 = (double)extract_little_endian_u64(data, 88, 8);
 8002122:	2208      	movs	r2, #8
 8002124:	2158      	movs	r1, #88	@ 0x58
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fa4f 	bl	80015ca <extract_little_endian_u64>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	f7fe fabc 	bl	80006b0 <__aeabi_ul2d>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	6839      	ldr	r1, [r7, #0]
 800213e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
out->MCU_FAULT_two_sig12 = (double)extract_little_endian_u64(data, 96, 8);
 8002142:	2208      	movs	r2, #8
 8002144:	2160      	movs	r1, #96	@ 0x60
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fa3f 	bl	80015ca <extract_little_endian_u64>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	f7fe faac 	bl	80006b0 <__aeabi_ul2d>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	6839      	ldr	r1, [r7, #0]
 800215e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
out->MCU_FAULT_two_sig13 = (double)extract_little_endian_u64(data, 104, 8);
 8002162:	2208      	movs	r2, #8
 8002164:	2168      	movs	r1, #104	@ 0x68
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff fa2f 	bl	80015ca <extract_little_endian_u64>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	f7fe fa9c 	bl	80006b0 <__aeabi_ul2d>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	6839      	ldr	r1, [r7, #0]
 800217e:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
out->MCU_FAULT_two_sig14 = (double)extract_little_endian_u64(data, 112, 8);
 8002182:	2208      	movs	r2, #8
 8002184:	2170      	movs	r1, #112	@ 0x70
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7ff fa1f 	bl	80015ca <extract_little_endian_u64>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	f7fe fa8c 	bl	80006b0 <__aeabi_ul2d>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	6839      	ldr	r1, [r7, #0]
 800219e:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
 80021a2:	e000      	b.n	80021a6 <decode_MCU_FAULT_two+0x1f6>
if (!out) return;
 80021a4:	bf00      	nop
}
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <decode_MCU_FAULT_One>:


void decode_MCU_FAULT_One(const uint8_t *data, MCU_FAULT_One_t *out) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
if (!out) return;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 8101 	beq.w	80023c0 <decode_MCU_FAULT_One+0x214>
out->MCU_FAULT_One_sig0 = (double)extract_little_endian_u64(data, 0, 8);
 80021be:	2208      	movs	r2, #8
 80021c0:	2100      	movs	r1, #0
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff fa01 	bl	80015ca <extract_little_endian_u64>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f7fe fa6e 	bl	80006b0 <__aeabi_ul2d>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	6839      	ldr	r1, [r7, #0]
 80021da:	e9c1 2300 	strd	r2, r3, [r1]
out->MCU_FAULT_One_sig1 = (double)extract_little_endian_u64(data, 8, 8);
 80021de:	2208      	movs	r2, #8
 80021e0:	2108      	movs	r1, #8
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff f9f1 	bl	80015ca <extract_little_endian_u64>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	f7fe fa5e 	bl	80006b0 <__aeabi_ul2d>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	6839      	ldr	r1, [r7, #0]
 80021fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
out->MCU_FAULT_One_sig2 = (double)extract_little_endian_u64(data, 16, 8);
 80021fe:	2208      	movs	r2, #8
 8002200:	2110      	movs	r1, #16
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff f9e1 	bl	80015ca <extract_little_endian_u64>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4610      	mov	r0, r2
 800220e:	4619      	mov	r1, r3
 8002210:	f7fe fa4e 	bl	80006b0 <__aeabi_ul2d>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	6839      	ldr	r1, [r7, #0]
 800221a:	e9c1 2304 	strd	r2, r3, [r1, #16]
out->MCU_FAULT_One_sig3 = (double)extract_little_endian_u64(data, 24, 8);
 800221e:	2208      	movs	r2, #8
 8002220:	2118      	movs	r1, #24
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff f9d1 	bl	80015ca <extract_little_endian_u64>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f7fe fa3e 	bl	80006b0 <__aeabi_ul2d>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	6839      	ldr	r1, [r7, #0]
 800223a:	e9c1 2306 	strd	r2, r3, [r1, #24]
out->MCU_FAULT_One_sig4 = (double)extract_little_endian_u64(data, 32, 8);
 800223e:	2208      	movs	r2, #8
 8002240:	2120      	movs	r1, #32
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff f9c1 	bl	80015ca <extract_little_endian_u64>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	f7fe fa2e 	bl	80006b0 <__aeabi_ul2d>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	6839      	ldr	r1, [r7, #0]
 800225a:	e9c1 2308 	strd	r2, r3, [r1, #32]
out->MCU_FAULT_One_sig5 = (double)extract_little_endian_u64(data, 40, 8);
 800225e:	2208      	movs	r2, #8
 8002260:	2128      	movs	r1, #40	@ 0x28
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7ff f9b1 	bl	80015ca <extract_little_endian_u64>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	f7fe fa1e 	bl	80006b0 <__aeabi_ul2d>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	6839      	ldr	r1, [r7, #0]
 800227a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
out->MCU_FAULT_One_sig6 = (double)extract_little_endian_u64(data, 48, 8);
 800227e:	2208      	movs	r2, #8
 8002280:	2130      	movs	r1, #48	@ 0x30
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff f9a1 	bl	80015ca <extract_little_endian_u64>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4610      	mov	r0, r2
 800228e:	4619      	mov	r1, r3
 8002290:	f7fe fa0e 	bl	80006b0 <__aeabi_ul2d>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	6839      	ldr	r1, [r7, #0]
 800229a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
out->MCU_FAULT_One_sig7 = (double)extract_little_endian_u64(data, 56, 8);
 800229e:	2208      	movs	r2, #8
 80022a0:	2138      	movs	r1, #56	@ 0x38
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff f991 	bl	80015ca <extract_little_endian_u64>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	f7fe f9fe 	bl	80006b0 <__aeabi_ul2d>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	6839      	ldr	r1, [r7, #0]
 80022ba:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
out->MCU_FAULT_One_sig8 = (double)extract_little_endian_u64(data, 64, 8);
 80022be:	2208      	movs	r2, #8
 80022c0:	2140      	movs	r1, #64	@ 0x40
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff f981 	bl	80015ca <extract_little_endian_u64>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4610      	mov	r0, r2
 80022ce:	4619      	mov	r1, r3
 80022d0:	f7fe f9ee 	bl	80006b0 <__aeabi_ul2d>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	6839      	ldr	r1, [r7, #0]
 80022da:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
out->MCU_FAULT_One_sig9 = (double)extract_little_endian_u64(data, 72, 8);
 80022de:	2208      	movs	r2, #8
 80022e0:	2148      	movs	r1, #72	@ 0x48
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff f971 	bl	80015ca <extract_little_endian_u64>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4610      	mov	r0, r2
 80022ee:	4619      	mov	r1, r3
 80022f0:	f7fe f9de 	bl	80006b0 <__aeabi_ul2d>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	6839      	ldr	r1, [r7, #0]
 80022fa:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
out->MCU_FAULT_One_sig10 = (double)extract_little_endian_u64(data, 80, 8);
 80022fe:	2208      	movs	r2, #8
 8002300:	2150      	movs	r1, #80	@ 0x50
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff f961 	bl	80015ca <extract_little_endian_u64>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4610      	mov	r0, r2
 800230e:	4619      	mov	r1, r3
 8002310:	f7fe f9ce 	bl	80006b0 <__aeabi_ul2d>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	6839      	ldr	r1, [r7, #0]
 800231a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
out->MCU_FAULT_One_sig11 = (double)extract_little_endian_u64(data, 88, 8);
 800231e:	2208      	movs	r2, #8
 8002320:	2158      	movs	r1, #88	@ 0x58
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff f951 	bl	80015ca <extract_little_endian_u64>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	f7fe f9be 	bl	80006b0 <__aeabi_ul2d>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
out->MCU_FAULT_One_sig12 = (double)extract_little_endian_u64(data, 96, 8);
 800233e:	2208      	movs	r2, #8
 8002340:	2160      	movs	r1, #96	@ 0x60
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff f941 	bl	80015ca <extract_little_endian_u64>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	f7fe f9ae 	bl	80006b0 <__aeabi_ul2d>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	6839      	ldr	r1, [r7, #0]
 800235a:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
out->MCU_FAULT_One_sig13 = (double)extract_little_endian_u64(data, 104, 8);
 800235e:	2208      	movs	r2, #8
 8002360:	2168      	movs	r1, #104	@ 0x68
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff f931 	bl	80015ca <extract_little_endian_u64>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f7fe f99e 	bl	80006b0 <__aeabi_ul2d>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	6839      	ldr	r1, [r7, #0]
 800237a:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
out->MCU_FAULT_One_sig14 = (double)extract_little_endian_u64(data, 112, 8);
 800237e:	2208      	movs	r2, #8
 8002380:	2170      	movs	r1, #112	@ 0x70
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff f921 	bl	80015ca <extract_little_endian_u64>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	f7fe f98e 	bl	80006b0 <__aeabi_ul2d>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	6839      	ldr	r1, [r7, #0]
 800239a:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
out->MCU_FAULT_One_sig15 = (double)extract_little_endian_u64(data, 120, 8);
 800239e:	2208      	movs	r2, #8
 80023a0:	2178      	movs	r1, #120	@ 0x78
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff f911 	bl	80015ca <extract_little_endian_u64>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	f7fe f97e 	bl	80006b0 <__aeabi_ul2d>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	6839      	ldr	r1, [r7, #0]
 80023ba:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
 80023be:	e000      	b.n	80023c2 <decode_MCU_FAULT_One+0x216>
if (!out) return;
 80023c0:	bf00      	nop
}
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <decode_MCU_POWER_One>:


void decode_MCU_POWER_One(const uint8_t *data, MCU_POWER_One_t *out) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
//if (!out) return;

out->power_sig0 = (double)extract_motorola_u64(data, 38, 10)*0.1-37.3;
 80023d2:	220a      	movs	r2, #10
 80023d4:	2126      	movs	r1, #38	@ 0x26
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff f88c 	bl	80014f4 <extract_motorola_u64>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	f7fe f964 	bl	80006b0 <__aeabi_ul2d>
 80023e8:	a353      	add	r3, pc, #332	@ (adr r3, 8002538 <decode_MCU_POWER_One+0x170>)
 80023ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ee:	f7fd feaf 	bl	8000150 <__aeabi_dmul>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	a351      	add	r3, pc, #324	@ (adr r3, 8002540 <decode_MCU_POWER_One+0x178>)
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	f7fd ffd4 	bl	80003ac <__aeabi_dsub>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	6839      	ldr	r1, [r7, #0]
 800240a:	e9c1 2300 	strd	r2, r3, [r1]
out->power_sig1 = (double)extract_motorola_u64(data, 7, 10)*0.1;
 800240e:	220a      	movs	r2, #10
 8002410:	2107      	movs	r1, #7
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff f86e 	bl	80014f4 <extract_motorola_u64>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	f7fe f946 	bl	80006b0 <__aeabi_ul2d>
 8002424:	a344      	add	r3, pc, #272	@ (adr r3, 8002538 <decode_MCU_POWER_One+0x170>)
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	f7fd fe91 	bl	8000150 <__aeabi_dmul>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	6839      	ldr	r1, [r7, #0]
 8002434:	e9c1 2302 	strd	r2, r3, [r1, #8]
out->power_sig2 = (double)extract_motorola_u64(data, 16, 10)*0.1-65;
 8002438:	220a      	movs	r2, #10
 800243a:	2110      	movs	r1, #16
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff f859 	bl	80014f4 <extract_motorola_u64>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	f7fe f931 	bl	80006b0 <__aeabi_ul2d>
 800244e:	a33a      	add	r3, pc, #232	@ (adr r3, 8002538 <decode_MCU_POWER_One+0x170>)
 8002450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002454:	f7fd fe7c 	bl	8000150 <__aeabi_dmul>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	4b3a      	ldr	r3, [pc, #232]	@ (8002550 <decode_MCU_POWER_One+0x188>)
 8002466:	f7fd ffa1 	bl	80003ac <__aeabi_dsub>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	6839      	ldr	r1, [r7, #0]
 8002470:	e9c1 2304 	strd	r2, r3, [r1, #16]
out->power_sig3 = (uint64_t)extract_motorola_u64(data, 44, 15)-16384;
 8002474:	220f      	movs	r2, #15
 8002476:	212c      	movs	r1, #44	@ 0x2c
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff f83b 	bl	80014f4 <extract_motorola_u64>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4613      	mov	r3, r2
 8002484:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8002488:	461a      	mov	r2, r3
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	619a      	str	r2, [r3, #24]
out->power_sig4 = (double)extract_motorola_u64(data, 13, 13)*0.1-409.6;
 800248e:	220d      	movs	r2, #13
 8002490:	210d      	movs	r1, #13
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff f82e 	bl	80014f4 <extract_motorola_u64>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	f7fe f906 	bl	80006b0 <__aeabi_ul2d>
 80024a4:	a324      	add	r3, pc, #144	@ (adr r3, 8002538 <decode_MCU_POWER_One+0x170>)
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	f7fd fe51 	bl	8000150 <__aeabi_dmul>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	a324      	add	r3, pc, #144	@ (adr r3, 8002548 <decode_MCU_POWER_One+0x180>)
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f7fd ff76 	bl	80003ac <__aeabi_dsub>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	6839      	ldr	r1, [r7, #0]
 80024c6:	e9c1 2308 	strd	r2, r3, [r1, #32]
uart_print_str("torque_requested: ");
 80024ca:	4822      	ldr	r0, [pc, #136]	@ (8002554 <decode_MCU_POWER_One+0x18c>)
 80024cc:	f001 f906 	bl	80036dc <uart_print_str>
uart_send_double(out->power_sig0,3);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024d6:	2203      	movs	r2, #3
 80024d8:	f001 f916 	bl	8003708 <uart_send_double>
uart_print_str("\n\rDC V0L: ");
 80024dc:	481e      	ldr	r0, [pc, #120]	@ (8002558 <decode_MCU_POWER_One+0x190>)
 80024de:	f001 f8fd 	bl	80036dc <uart_print_str>
uart_send_double(out->power_sig1,3);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80024e8:	2203      	movs	r2, #3
 80024ea:	f001 f90d 	bl	8003708 <uart_send_double>
uart_print_str("\n\rEST_TORQ :");
 80024ee:	481b      	ldr	r0, [pc, #108]	@ (800255c <decode_MCU_POWER_One+0x194>)
 80024f0:	f001 f8f4 	bl	80036dc <uart_print_str>
uart_send_double(out->power_sig2,3);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80024fa:	2203      	movs	r2, #3
 80024fc:	f001 f904 	bl	8003708 <uart_send_double>
uart_print_str("\n\rRPM: ");
 8002500:	4817      	ldr	r0, [pc, #92]	@ (8002560 <decode_MCU_POWER_One+0x198>)
 8002502:	f001 f8eb 	bl	80036dc <uart_print_str>
uart_printf("%ld ",out->power_sig3);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	4619      	mov	r1, r3
 800250c:	4815      	ldr	r0, [pc, #84]	@ (8002564 <decode_MCU_POWER_One+0x19c>)
 800250e:	f001 f9ef 	bl	80038f0 <uart_printf>
uart_print_str("\n\rDC_CUR");
 8002512:	4815      	ldr	r0, [pc, #84]	@ (8002568 <decode_MCU_POWER_One+0x1a0>)
 8002514:	f001 f8e2 	bl	80036dc <uart_print_str>
uart_send_double(out->power_sig4,3);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800251e:	2203      	movs	r2, #3
 8002520:	f001 f8f2 	bl	8003708 <uart_send_double>
uart_print_str("\n\r");
 8002524:	4811      	ldr	r0, [pc, #68]	@ (800256c <decode_MCU_POWER_One+0x1a4>)
 8002526:	f001 f8d9 	bl	80036dc <uart_print_str>
uart_print_str("============================================\n\r");
 800252a:	4811      	ldr	r0, [pc, #68]	@ (8002570 <decode_MCU_POWER_One+0x1a8>)
 800252c:	f001 f8d6 	bl	80036dc <uart_print_str>

}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	9999999a 	.word	0x9999999a
 800253c:	3fb99999 	.word	0x3fb99999
 8002540:	66666666 	.word	0x66666666
 8002544:	4042a666 	.word	0x4042a666
 8002548:	9999999a 	.word	0x9999999a
 800254c:	40799999 	.word	0x40799999
 8002550:	40504000 	.word	0x40504000
 8002554:	080068d0 	.word	0x080068d0
 8002558:	080068e4 	.word	0x080068e4
 800255c:	080068f0 	.word	0x080068f0
 8002560:	08006900 	.word	0x08006900
 8002564:	08006908 	.word	0x08006908
 8002568:	08006910 	.word	0x08006910
 800256c:	08006828 	.word	0x08006828
 8002570:	080067f8 	.word	0x080067f8

08002574 <Motor_control_pins_init>:
#define PB0_REVERSE 0
#define PB1_NEUTRAL 1
#define PB3_DRIVE 3
#define PB5_SPORT 5

void Motor_control_pins_init(){
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8002578:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <Motor_control_pins_init+0x48>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	4a0f      	ldr	r2, [pc, #60]	@ (80025bc <Motor_control_pins_init+0x48>)
 800257e:	f043 0308 	orr.w	r3, r3, #8
 8002582:	6193      	str	r3, [r2, #24]
    GPIOB->CRL&=~((0xFF<<0)|(0XFF<<4)|(0XFF<<12)|(0xff<<20));
 8002584:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <Motor_control_pins_init+0x4c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0d      	ldr	r2, [pc, #52]	@ (80025c0 <Motor_control_pins_init+0x4c>)
 800258a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800258e:	6013      	str	r3, [r2, #0]
    GPIOB->CRL|=((0x3<<0)|(0X3<<4)|(0X3<<12)|(0x3<<20));
 8002590:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <Motor_control_pins_init+0x4c>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	490a      	ldr	r1, [pc, #40]	@ (80025c0 <Motor_control_pins_init+0x4c>)
 8002596:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <Motor_control_pins_init+0x50>)
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
    GPIOB->ODR&=~((1<<PB0_REVERSE)|(1<<PB1_NEUTRAL)|(1<<PB3_DRIVE)|(1<<PB5_SPORT));
 800259c:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <Motor_control_pins_init+0x4c>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4a07      	ldr	r2, [pc, #28]	@ (80025c0 <Motor_control_pins_init+0x4c>)
 80025a2:	f023 032b 	bic.w	r3, r3, #43	@ 0x2b
 80025a6:	60d3      	str	r3, [r2, #12]
    GPIOB->ODR|=((1<<PB1_NEUTRAL));
 80025a8:	4b05      	ldr	r3, [pc, #20]	@ (80025c0 <Motor_control_pins_init+0x4c>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a04      	ldr	r2, [pc, #16]	@ (80025c0 <Motor_control_pins_init+0x4c>)
 80025ae:	f043 0302 	orr.w	r3, r3, #2
 80025b2:	60d3      	str	r3, [r2, #12]
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010c00 	.word	0x40010c00
 80025c4:	00303033 	.word	0x00303033

080025c8 <set_baudrate>:
    uint32_t tseg2;
    uint32_t sjw;
    float sample_point;  // in percentage
} CAN_BitTiming;

STATUS set_baudrate(uint32_t Baud_Rate){
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	f6ad 0d04 	subw	sp, sp, #2052	@ 0x804
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80025d4:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 80025d8:	6018      	str	r0, [r3, #0]
    CAN_BitTiming table[100]; // store results
    int count = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
    uint32_t clk = get_APB1_freq();      // 36 MHz
 80025e0:	f000 feae 	bl	8003340 <get_APB1_freq>
 80025e4:	f8c7 07e8 	str.w	r0, [r7, #2024]	@ 0x7e8
    uint32_t baud = Baud_Rate;      // 500 kbps
 80025e8:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80025ec:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f8c7 37e4 	str.w	r3, [r7, #2020]	@ 0x7e4
    if (clk == 0 || Baud_Rate == 0) {
 80025f6:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	@ 0x7e8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <set_baudrate+0x44>
 80025fe:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002602:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <set_baudrate+0x48>
        return RY_NOT_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	e0f7      	b.n	8002800 <set_baudrate+0x238>
    }
    uint32_t target = clk / baud; // should be 16
 8002610:	f8d7 27e8 	ldr.w	r2, [r7, #2024]	@ 0x7e8
 8002614:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	@ 0x7e4
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	f8c7 37e0 	str.w	r3, [r7, #2016]	@ 0x7e0
    for (uint32_t prescaler = 1; prescaler <= 1024; prescaler++) {
 8002620:	2301      	movs	r3, #1
 8002622:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 8002626:	e0c0      	b.n	80027aa <set_baudrate+0x1e2>
        for (uint32_t tseg1 = 1; tseg1 <= 16; tseg1++) {
 8002628:	2301      	movs	r3, #1
 800262a:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 800262e:	e0b2      	b.n	8002796 <set_baudrate+0x1ce>
            for (uint32_t tseg2 = 1; tseg2 <= 8; tseg2++) {
 8002630:	2301      	movs	r3, #1
 8002632:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 8002636:	e0a4      	b.n	8002782 <set_baudrate+0x1ba>
            	uint32_t tq = 1 + tseg1 + tseg2;
 8002638:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 800263c:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 8002640:	4413      	add	r3, r2
 8002642:	3301      	adds	r3, #1
 8002644:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
                if (prescaler * tq == target) {
 8002648:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 800264c:	f8d7 27dc 	ldr.w	r2, [r7, #2012]	@ 0x7dc
 8002650:	fb02 f303 	mul.w	r3, r2, r3
 8002654:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	@ 0x7e0
 8002658:	429a      	cmp	r2, r3
 800265a:	f040 808d 	bne.w	8002778 <set_baudrate+0x1b0>
                    float sp = ((1.0f + tseg1) / tq) * 100.0f;
 800265e:	f8d7 07f4 	ldr.w	r0, [r7, #2036]	@ 0x7f4
 8002662:	f7fe f9c1 	bl	80009e8 <__aeabi_ui2f>
 8002666:	4603      	mov	r3, r0
 8002668:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe f90b 	bl	8000888 <__addsf3>
 8002672:	4603      	mov	r3, r0
 8002674:	461c      	mov	r4, r3
 8002676:	f8d7 07dc 	ldr.w	r0, [r7, #2012]	@ 0x7dc
 800267a:	f7fe f9b5 	bl	80009e8 <__aeabi_ui2f>
 800267e:	4603      	mov	r3, r0
 8002680:	4619      	mov	r1, r3
 8002682:	4620      	mov	r0, r4
 8002684:	f7fe fabc 	bl	8000c00 <__aeabi_fdiv>
 8002688:	4603      	mov	r3, r0
 800268a:	4960      	ldr	r1, [pc, #384]	@ (800280c <set_baudrate+0x244>)
 800268c:	4618      	mov	r0, r3
 800268e:	f7fe fa03 	bl	8000a98 <__aeabi_fmul>
 8002692:	4603      	mov	r3, r0
 8002694:	f8c7 37d8 	str.w	r3, [r7, #2008]	@ 0x7d8
                    if (sp >= 70.0f && sp <= 80.0f) {
 8002698:	495d      	ldr	r1, [pc, #372]	@ (8002810 <set_baudrate+0x248>)
 800269a:	f8d7 07d8 	ldr.w	r0, [r7, #2008]	@ 0x7d8
 800269e:	f7fe fbad 	bl	8000dfc <__aeabi_fcmpge>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d067      	beq.n	8002778 <set_baudrate+0x1b0>
 80026a8:	495a      	ldr	r1, [pc, #360]	@ (8002814 <set_baudrate+0x24c>)
 80026aa:	f8d7 07d8 	ldr.w	r0, [r7, #2008]	@ 0x7d8
 80026ae:	f7fe fb9b 	bl	8000de8 <__aeabi_fcmple>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d05f      	beq.n	8002778 <set_baudrate+0x1b0>
                        for (int sjw = 1; sjw <= tseg2; sjw++) {
 80026b8:	2301      	movs	r3, #1
 80026ba:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 80026be:	e055      	b.n	800276c <set_baudrate+0x1a4>
                            table[count].prescaler = prescaler;
 80026c0:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 80026c4:	b298      	uxth	r0, r3
 80026c6:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80026ca:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 80026ce:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	4602      	mov	r2, r0
 80026de:	801a      	strh	r2, [r3, #0]
                            table[count].tseg1 = tseg1;
 80026e0:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80026e4:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 80026e8:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	3304      	adds	r3, #4
 80026f8:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 80026fc:	601a      	str	r2, [r3, #0]
                            table[count].tseg2 = tseg2;
 80026fe:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002702:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 8002706:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	3308      	adds	r3, #8
 8002716:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	@ 0x7f0
 800271a:	601a      	str	r2, [r3, #0]
                            table[count].sjw = sjw;
 800271c:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	@ 0x7ec
 8002720:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002724:	f5a3 60ff 	sub.w	r0, r3, #2040	@ 0x7f8
 8002728:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4403      	add	r3, r0
 8002736:	330c      	adds	r3, #12
 8002738:	6019      	str	r1, [r3, #0]
                            table[count].sample_point = sp;
 800273a:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 800273e:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 8002742:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8002746:	4613      	mov	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3310      	adds	r3, #16
 8002752:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	@ 0x7d8
 8002756:	601a      	str	r2, [r3, #0]
                            count++;
 8002758:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	@ 0x7fc
 800275c:	3301      	adds	r3, #1
 800275e:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
                        for (int sjw = 1; sjw <= tseg2; sjw++) {
 8002762:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8002766:	3301      	adds	r3, #1
 8002768:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 800276c:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8002770:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	@ 0x7f0
 8002774:	429a      	cmp	r2, r3
 8002776:	d2a3      	bcs.n	80026c0 <set_baudrate+0xf8>
            for (uint32_t tseg2 = 1; tseg2 <= 8; tseg2++) {
 8002778:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 800277c:	3301      	adds	r3, #1
 800277e:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 8002782:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 8002786:	2b08      	cmp	r3, #8
 8002788:	f67f af56 	bls.w	8002638 <set_baudrate+0x70>
        for (uint32_t tseg1 = 1; tseg1 <= 16; tseg1++) {
 800278c:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 8002790:	3301      	adds	r3, #1
 8002792:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 8002796:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 800279a:	2b10      	cmp	r3, #16
 800279c:	f67f af48 	bls.w	8002630 <set_baudrate+0x68>
    for (uint32_t prescaler = 1; prescaler <= 1024; prescaler++) {
 80027a0:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 80027a4:	3301      	adds	r3, #1
 80027a6:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 80027aa:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 80027ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027b2:	f67f af39 	bls.w	8002628 <set_baudrate+0x60>
                    }
                }
            }
        }
    }
    CAN1->BTR|=((table[0].prescaler-1)<<0)|((table[0].sjw-1)<<24)|((table[0].tseg1-1)<<16)|((table[0].tseg2-1)<<20);
 80027b6:	4b18      	ldr	r3, [pc, #96]	@ (8002818 <set_baudrate+0x250>)
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80027be:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	4619      	mov	r1, r3
 80027c8:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80027cc:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	4319      	orrs	r1, r3
 80027d8:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80027dc:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	041b      	lsls	r3, r3, #16
 80027e6:	4319      	orrs	r1, r3
 80027e8:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80027ec:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	051b      	lsls	r3, r3, #20
 80027f6:	430b      	orrs	r3, r1
 80027f8:	4907      	ldr	r1, [pc, #28]	@ (8002818 <set_baudrate+0x250>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	61cb      	str	r3, [r1, #28]
    return RY_OK;
 80027fe:	2301      	movs	r3, #1
}
 8002800:	4618      	mov	r0, r3
 8002802:	f607 0704 	addw	r7, r7, #2052	@ 0x804
 8002806:	46bd      	mov	sp, r7
 8002808:	bd90      	pop	{r4, r7, pc}
 800280a:	bf00      	nop
 800280c:	42c80000 	.word	0x42c80000
 8002810:	428c0000 	.word	0x428c0000
 8002814:	42a00000 	.word	0x42a00000
 8002818:	40006400 	.word	0x40006400

0800281c <can_init>:
STATUS can_init(uint32_t Baud_Rate){
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN;
 8002824:	4b2b      	ldr	r3, [pc, #172]	@ (80028d4 <can_init+0xb8>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	4a2a      	ldr	r2, [pc, #168]	@ (80028d4 <can_init+0xb8>)
 800282a:	f043 0309 	orr.w	r3, r3, #9
 800282e:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 8002830:	4b28      	ldr	r3, [pc, #160]	@ (80028d4 <can_init+0xb8>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	4a27      	ldr	r2, [pc, #156]	@ (80028d4 <can_init+0xb8>)
 8002836:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800283a:	61d3      	str	r3, [r2, #28]
    AFIO->MAPR |= AFIO_MAPR_CAN_REMAP_REMAP2;
 800283c:	4b26      	ldr	r3, [pc, #152]	@ (80028d8 <can_init+0xbc>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a25      	ldr	r2, [pc, #148]	@ (80028d8 <can_init+0xbc>)
 8002842:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002846:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~(0xF << 0);
 8002848:	4b24      	ldr	r3, [pc, #144]	@ (80028dc <can_init+0xc0>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a23      	ldr	r2, [pc, #140]	@ (80028dc <can_init+0xc0>)
 800284e:	f023 030f 	bic.w	r3, r3, #15
 8002852:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |=  (0x4 << 0);
 8002854:	4b21      	ldr	r3, [pc, #132]	@ (80028dc <can_init+0xc0>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4a20      	ldr	r2, [pc, #128]	@ (80028dc <can_init+0xc0>)
 800285a:	f043 0304 	orr.w	r3, r3, #4
 800285e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~(0xF << 4);
 8002860:	4b1e      	ldr	r3, [pc, #120]	@ (80028dc <can_init+0xc0>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a1d      	ldr	r2, [pc, #116]	@ (80028dc <can_init+0xc0>)
 8002866:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800286a:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |=  (0xB << 4);
 800286c:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <can_init+0xc0>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a1a      	ldr	r2, [pc, #104]	@ (80028dc <can_init+0xc0>)
 8002872:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002876:	6053      	str	r3, [r2, #4]
	CAN1->MCR &= ~CAN_MCR_AWUM_Msk;
 8002878:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <can_init+0xc4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a18      	ldr	r2, [pc, #96]	@ (80028e0 <can_init+0xc4>)
 800287e:	f023 0320 	bic.w	r3, r3, #32
 8002882:	6013      	str	r3, [r2, #0]
	CAN1->MCR &= ~CAN_MCR_SLEEP_Msk;
 8002884:	4b16      	ldr	r3, [pc, #88]	@ (80028e0 <can_init+0xc4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a15      	ldr	r2, [pc, #84]	@ (80028e0 <can_init+0xc4>)
 800288a:	f023 0302 	bic.w	r3, r3, #2
 800288e:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_MCR_INRQ_Msk;
 8002890:	4b13      	ldr	r3, [pc, #76]	@ (80028e0 <can_init+0xc4>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a12      	ldr	r2, [pc, #72]	@ (80028e0 <can_init+0xc4>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6013      	str	r3, [r2, #0]
	while (!(CAN1->MSR & CAN_MSR_INAK_Msk));
 800289c:	bf00      	nop
 800289e:	4b10      	ldr	r3, [pc, #64]	@ (80028e0 <can_init+0xc4>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f9      	beq.n	800289e <can_init+0x82>
	if(set_baudrate(Baud_Rate)==RY_NOT_OK)
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff fe8c 	bl	80025c8 <set_baudrate>
	{
		RY_NOT_OK;
	}
	CAN1->MCR &= ~(1<<0);  // CLEAR INQR BIT TO LEAVE INTILAIZE MODE=
 80028b0:	4b0b      	ldr	r3, [pc, #44]	@ (80028e0 <can_init+0xc4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	@ (80028e0 <can_init+0xc4>)
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	6013      	str	r3, [r2, #0]
	while (CAN1->MSR & CAN_MSR_INAK_Msk);  // Wait for Normal Mode
 80028bc:	bf00      	nop
 80028be:	4b08      	ldr	r3, [pc, #32]	@ (80028e0 <can_init+0xc4>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f9      	bne.n	80028be <can_init+0xa2>
//	CAN1->sFilterRegister[0].FR2 = 0x00000000;  // Mask = 0
//
//	CAN1->FA1R |= 1;                  // Enable filter 0
//
//	CAN1->FMR &= ~CAN_FMR_FINIT;
	return RY_OK;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40010000 	.word	0x40010000
 80028dc:	40010c00 	.word	0x40010c00
 80028e0:	40006400 	.word	0x40006400

080028e4 <configure_can_filters>:
			 CAN1->sTxMailBox[mail_box].TDHR|=(frame.data[i]<<((i-4)*8));
		 }
	 }
	CAN1->sTxMailBox[mail_box].TIR |= (1<<0);
	}
void configure_can_filters(const uint32_t *std_ids, uint8_t std_cnt,const uint32_t *ext_ids, uint8_t ext_cnt) {
 80028e4:	b480      	push	{r7}
 80028e6:	b08f      	sub	sp, #60	@ 0x3c
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	461a      	mov	r2, r3
 80028f0:	460b      	mov	r3, r1
 80028f2:	72fb      	strb	r3, [r7, #11]
 80028f4:	4613      	mov	r3, r2
 80028f6:	72bb      	strb	r3, [r7, #10]

    uint8_t bank = 0;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Enter filter init mode
    CAN1->FMR |= CAN_FMR_FINIT;
 80028fe:	4b91      	ldr	r3, [pc, #580]	@ (8002b44 <configure_can_filters+0x260>)
 8002900:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002904:	4a8f      	ldr	r2, [pc, #572]	@ (8002b44 <configure_can_filters+0x260>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

    // --- Standard IDs: use banks from 0 upwards ---
    for (uint8_t i = 0; i < std_cnt; i += 2) {
 800290e:	2300      	movs	r3, #0
 8002910:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8002914:	e079      	b.n	8002a0a <configure_can_filters+0x126>
        if (bank >= CAN_MAX_FILTER_BANKS) break;
 8002916:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800291a:	2b0d      	cmp	r3, #13
 800291c:	d87b      	bhi.n	8002a16 <configure_can_filters+0x132>

        // Deactivate bank while configuring
        CAN1->FA1R &= ~(1u << bank);
 800291e:	4b89      	ldr	r3, [pc, #548]	@ (8002b44 <configure_can_filters+0x260>)
 8002920:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002924:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002928:	2101      	movs	r1, #1
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	4984      	ldr	r1, [pc, #528]	@ (8002b44 <configure_can_filters+0x260>)
 8002932:	4013      	ands	r3, r2
 8002934:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c

        // Identifier list mode (exact IDs)
        CAN1->FM1R |= (1u << bank);
 8002938:	4b82      	ldr	r3, [pc, #520]	@ (8002b44 <configure_can_filters+0x260>)
 800293a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800293e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002942:	2101      	movs	r1, #1
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	497e      	ldr	r1, [pc, #504]	@ (8002b44 <configure_can_filters+0x260>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3204 	str.w	r3, [r1, #516]	@ 0x204

        // 32-bit scale
        CAN1->FS1R |= (1u << bank);
 8002950:	4b7c      	ldr	r3, [pc, #496]	@ (8002b44 <configure_can_filters+0x260>)
 8002952:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002956:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800295a:	2101      	movs	r1, #1
 800295c:	fa01 f303 	lsl.w	r3, r1, r3
 8002960:	4978      	ldr	r1, [pc, #480]	@ (8002b44 <configure_can_filters+0x260>)
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 320c 	str.w	r3, [r1, #524]	@ 0x20c

        // Assign to FIFO0
        CAN1->FFA1R &= ~(1u << bank);
 8002968:	4b76      	ldr	r3, [pc, #472]	@ (8002b44 <configure_can_filters+0x260>)
 800296a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800296e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	4972      	ldr	r1, [pc, #456]	@ (8002b44 <configure_can_filters+0x260>)
 800297c:	4013      	ands	r3, r2
 800297e:	f8c1 3214 	str.w	r3, [r1, #532]	@ 0x214

        // Prepare two 32-bit slots (FR1 and FR2)
        uint32_t fr1 = 0, fr2 = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
 8002986:	2300      	movs	r3, #0
 8002988:	633b      	str	r3, [r7, #48]	@ 0x30

        // first ID into FR1
        uint32_t id1 = (std_ids[i] & 0x7FFu) << 21; // std ID in bits [31:21]
 800298a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	055b      	lsls	r3, r3, #21
 8002998:	623b      	str	r3, [r7, #32]
        fr1 = id1;
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24

        // second ID into FR2 (if exists)
        if ((i + 1) < std_cnt) {
 800299e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	7afb      	ldrb	r3, [r7, #11]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	da0a      	bge.n	80029c0 <configure_can_filters+0xdc>
            uint32_t id2 = (std_ids[i + 1] & 0x7FFu) << 21;
 80029aa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80029ae:	3301      	adds	r3, #1
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4413      	add	r3, r2
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	055b      	lsls	r3, r3, #21
 80029ba:	61fb      	str	r3, [r7, #28]
            fr2 = id2;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        CAN1->sFilterRegister[bank].FR1 = fr1;
 80029c0:	4960      	ldr	r1, [pc, #384]	@ (8002b44 <configure_can_filters+0x260>)
 80029c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80029c6:	3348      	adds	r3, #72	@ 0x48
 80029c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        CAN1->sFilterRegister[bank].FR2 = fr2;
 80029ce:	4a5d      	ldr	r2, [pc, #372]	@ (8002b44 <configure_can_filters+0x260>)
 80029d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80029d4:	3348      	adds	r3, #72	@ 0x48
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029dc:	605a      	str	r2, [r3, #4]

        // Activate bank
        CAN1->FA1R |= (1u << bank);
 80029de:	4b59      	ldr	r3, [pc, #356]	@ (8002b44 <configure_can_filters+0x260>)
 80029e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80029e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80029e8:	2101      	movs	r1, #1
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	4955      	ldr	r1, [pc, #340]	@ (8002b44 <configure_can_filters+0x260>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
        bank++;
 80029f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80029fa:	3301      	adds	r3, #1
 80029fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    for (uint8_t i = 0; i < std_cnt; i += 2) {
 8002a00:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002a04:	3302      	adds	r3, #2
 8002a06:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8002a0a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8002a0e:	7afb      	ldrb	r3, [r7, #11]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d380      	bcc.n	8002916 <configure_can_filters+0x32>
 8002a14:	e000      	b.n	8002a18 <configure_can_filters+0x134>
        if (bank >= CAN_MAX_FILTER_BANKS) break;
 8002a16:	bf00      	nop
    }

    // --- Extended IDs: continue with remaining banks ---
    for (uint8_t j = 0; j < ext_cnt; j += 2) {
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002a1e:	e07c      	b.n	8002b1a <configure_can_filters+0x236>
        if (bank >= CAN_MAX_FILTER_BANKS) break;
 8002a20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a24:	2b0d      	cmp	r3, #13
 8002a26:	d87f      	bhi.n	8002b28 <configure_can_filters+0x244>

        // Deactivate bank while configuring
        CAN1->FA1R &= ~(1u << bank);
 8002a28:	4b46      	ldr	r3, [pc, #280]	@ (8002b44 <configure_can_filters+0x260>)
 8002a2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002a2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a32:	2101      	movs	r1, #1
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	4942      	ldr	r1, [pc, #264]	@ (8002b44 <configure_can_filters+0x260>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c

        // Identifier list mode
        CAN1->FM1R |= (1u << bank);
 8002a42:	4b40      	ldr	r3, [pc, #256]	@ (8002b44 <configure_can_filters+0x260>)
 8002a44:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002a48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	493c      	ldr	r1, [pc, #240]	@ (8002b44 <configure_can_filters+0x260>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3204 	str.w	r3, [r1, #516]	@ 0x204

        // 32-bit scale
        CAN1->FS1R |= (1u << bank);
 8002a5a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b44 <configure_can_filters+0x260>)
 8002a5c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002a60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a64:	2101      	movs	r1, #1
 8002a66:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6a:	4936      	ldr	r1, [pc, #216]	@ (8002b44 <configure_can_filters+0x260>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 320c 	str.w	r3, [r1, #524]	@ 0x20c

        // Assign to FIFO1 for extended IDs
        CAN1->FFA1R |= (1u << bank);
 8002a72:	4b34      	ldr	r3, [pc, #208]	@ (8002b44 <configure_can_filters+0x260>)
 8002a74:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002a78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	4930      	ldr	r1, [pc, #192]	@ (8002b44 <configure_can_filters+0x260>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3214 	str.w	r3, [r1, #532]	@ 0x214

        uint32_t fr1 = 0, fr2 = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	62bb      	str	r3, [r7, #40]	@ 0x28

        // FR1: ext id1 encoded as (ID << 3) + IDE bit in bit2
        uint32_t e1 = ((ext_ids[j] & 0x1FFFFFFFu) << 3) | (1u << 2);
 8002a92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	f043 0304 	orr.w	r3, r3, #4
 8002aa4:	617b      	str	r3, [r7, #20]
        fr1 = e1;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	61bb      	str	r3, [r7, #24]

        if ((j + 1) < ext_cnt) {
 8002aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	7abb      	ldrb	r3, [r7, #10]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	da0c      	bge.n	8002ad0 <configure_can_filters+0x1ec>
            uint32_t e2 = ((ext_ids[j + 1] & 0x1FFFFFFFu) << 3) | (1u << 2);
 8002ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002aba:	3301      	adds	r3, #1
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	613b      	str	r3, [r7, #16]
            fr2 = e2;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

        CAN1->sFilterRegister[bank].FR1 = fr1;
 8002ad0:	491c      	ldr	r1, [pc, #112]	@ (8002b44 <configure_can_filters+0x260>)
 8002ad2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002ad6:	3348      	adds	r3, #72	@ 0x48
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        CAN1->sFilterRegister[bank].FR2 = fr2;
 8002ade:	4a19      	ldr	r2, [pc, #100]	@ (8002b44 <configure_can_filters+0x260>)
 8002ae0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002ae4:	3348      	adds	r3, #72	@ 0x48
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002aec:	605a      	str	r2, [r3, #4]

        // Activate bank
        CAN1->FA1R |= (1u << bank);
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <configure_can_filters+0x260>)
 8002af0:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002af4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002af8:	2101      	movs	r1, #1
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	4911      	ldr	r1, [pc, #68]	@ (8002b44 <configure_can_filters+0x260>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 321c 	str.w	r3, [r1, #540]	@ 0x21c
        bank++;
 8002b06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    for (uint8_t j = 0; j < ext_cnt; j += 2) {
 8002b10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b14:	3302      	adds	r3, #2
 8002b16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002b1a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002b1e:	7abb      	ldrb	r3, [r7, #10]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	f4ff af7d 	bcc.w	8002a20 <configure_can_filters+0x13c>
 8002b26:	e000      	b.n	8002b2a <configure_can_filters+0x246>
        if (bank >= CAN_MAX_FILTER_BANKS) break;
 8002b28:	bf00      	nop
    }

    // Leave filter init mode
    CAN1->FMR &= ~CAN_FMR_FINIT;
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <configure_can_filters+0x260>)
 8002b2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b30:	4a04      	ldr	r2, [pc, #16]	@ (8002b44 <configure_can_filters+0x260>)
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
}
 8002b3a:	bf00      	nop
 8002b3c:	373c      	adds	r7, #60	@ 0x3c
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	40006400 	.word	0x40006400

08002b48 <CAN_MessagePending>:
 * @param fifo_number The FIFO to check (0 for FIFO0, 1 for FIFO1).
 * @param rx_message A pointer to the CanRxMsg structure to store the received data.
 * @return 1 if a message was successfully received, 0 otherwise.
 */
uint8_t CAN_MessagePending(uint8_t fifo)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
    if (fifo == 0)
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <CAN_MessagePending+0x24>
        return (CAN1->RF0R & CAN_RF0R_FMP0_Msk) ? 1 : 0;
 8002b58:	4b0b      	ldr	r3, [pc, #44]	@ (8002b88 <CAN_MessagePending+0x40>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	bf14      	ite	ne
 8002b64:	2301      	movne	r3, #1
 8002b66:	2300      	moveq	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	e008      	b.n	8002b7e <CAN_MessagePending+0x36>
    else
        return (CAN1->RF1R & CAN_RF1R_FMP1_Msk) ? 1 : 0;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <CAN_MessagePending+0x40>)
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr
 8002b88:	40006400 	.word	0x40006400

08002b8c <can_rx>:

uint8_t can_rx(can_frame_t *RxMessage,uint8_t fifo_number){
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	460b      	mov	r3, r1
 8002b96:	70fb      	strb	r3, [r7, #3]
	  RxMessage->ide = (uint8_t)0x04 & CAN1->sFIFOMailBox[fifo_number].RIR;
 8002b98:	4a44      	ldr	r2, [pc, #272]	@ (8002cac <can_rx+0x120>)
 8002b9a:	78fb      	ldrb	r3, [r7, #3]
 8002b9c:	331b      	adds	r3, #27
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	4413      	add	r3, r2
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	711a      	strb	r2, [r3, #4]
	  if (RxMessage->ide == 0)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	791b      	ldrb	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10b      	bne.n	8002bd0 <can_rx+0x44>
	  {
	    RxMessage->id = (uint32_t)0x000007FF & (CAN1->sFIFOMailBox[fifo_number].RIR >> 21);
 8002bb8:	4a3c      	ldr	r2, [pc, #240]	@ (8002cac <can_rx+0x120>)
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	331b      	adds	r3, #27
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	4413      	add	r3, r2
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0d5b      	lsrs	r3, r3, #21
 8002bc6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e00a      	b.n	8002be6 <can_rx+0x5a>
	  }
	  else
	  {
	    RxMessage->id = (uint32_t)0x1FFFFFFF & (CAN1->sFIFOMailBox[fifo_number].RIR >> 3);
 8002bd0:	4a36      	ldr	r2, [pc, #216]	@ (8002cac <can_rx+0x120>)
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	331b      	adds	r3, #27
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	4413      	add	r3, r2
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	601a      	str	r2, [r3, #0]
	  }

	  RxMessage->rtr = (uint8_t)0x02 & CAN1->sFIFOMailBox[fifo_number].RIR;
 8002be6:	4a31      	ldr	r2, [pc, #196]	@ (8002cac <can_rx+0x120>)
 8002be8:	78fb      	ldrb	r3, [r7, #3]
 8002bea:	331b      	adds	r3, #27
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	4413      	add	r3, r2
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	715a      	strb	r2, [r3, #5]
	  /* Get the DLC */
	  RxMessage->dlc = (uint8_t)0x0F & CAN1->sFIFOMailBox[fifo_number].RDTR;
 8002bfe:	4a2b      	ldr	r2, [pc, #172]	@ (8002cac <can_rx+0x120>)
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	331b      	adds	r3, #27
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	4413      	add	r3, r2
 8002c08:	3304      	adds	r3, #4
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	719a      	strb	r2, [r3, #6]
	  /* Get the data field */
	  for(uint8_t i=0;i< RxMessage->dlc;i++){
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]
 8002c1c:	e027      	b.n	8002c6e <can_rx+0xe2>
		  if(i<4){
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d810      	bhi.n	8002c46 <can_rx+0xba>
			  RxMessage->data[i] = (CAN1->sFIFOMailBox[fifo_number].RDLR>>(i*8));
 8002c24:	4a21      	ldr	r2, [pc, #132]	@ (8002cac <can_rx+0x120>)
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	40da      	lsrs	r2, r3
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	b2d1      	uxtb	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	4413      	add	r3, r2
 8002c40:	460a      	mov	r2, r1
 8002c42:	71da      	strb	r2, [r3, #7]
 8002c44:	e010      	b.n	8002c68 <can_rx+0xdc>
		  }else{
			  RxMessage->data[i] = (CAN1->sFIFOMailBox[fifo_number].RDHR>>(((i-4)*8)));
 8002c46:	4a19      	ldr	r2, [pc, #100]	@ (8002cac <can_rx+0x120>)
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	011b      	lsls	r3, r3, #4
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	3b04      	subs	r3, #4
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	40da      	lsrs	r2, r3
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	b2d1      	uxtb	r1, r2
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	4413      	add	r3, r2
 8002c64:	460a      	mov	r2, r1
 8002c66:	71da      	strb	r2, [r3, #7]
	  for(uint8_t i=0;i< RxMessage->dlc;i++){
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	799b      	ldrb	r3, [r3, #6]
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d3d2      	bcc.n	8002c1e <can_rx+0x92>

		  }
	  }
	  if (fifo_number == 0)
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d106      	bne.n	8002c8c <can_rx+0x100>
	  {
		  CAN1->RF0R |= CAN_RF0R_RFOM0;
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <can_rx+0x120>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <can_rx+0x120>)
 8002c84:	f043 0320 	orr.w	r3, r3, #32
 8002c88:	60d3      	str	r3, [r2, #12]
 8002c8a:	e008      	b.n	8002c9e <can_rx+0x112>
	  }
	  else if (fifo_number == 1)
 8002c8c:	78fb      	ldrb	r3, [r7, #3]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d105      	bne.n	8002c9e <can_rx+0x112>
	  {
		  CAN1->RF1R |= CAN_RF1R_RFOM1;
 8002c92:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <can_rx+0x120>)
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	4a05      	ldr	r2, [pc, #20]	@ (8002cac <can_rx+0x120>)
 8002c98:	f043 0320 	orr.w	r3, r3, #32
 8002c9c:	6113      	str	r3, [r2, #16]
	  }
	  return 1;
 8002c9e:	2301      	movs	r3, #1
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40006400 	.word	0x40006400

08002cb0 <Condensor_Relay_Pins_Init>:

#include"extern_file_declarations.h"

#define PB15_CONDENSOR   15

void Condensor_Relay_Pins_Init(){
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cec <Condensor_Relay_Pins_Init+0x3c>)
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	4a0c      	ldr	r2, [pc, #48]	@ (8002cec <Condensor_Relay_Pins_Init+0x3c>)
 8002cba:	f043 0308 	orr.w	r3, r3, #8
 8002cbe:	6193      	str	r3, [r2, #24]
    GPIOB->CRH&=~((0xFF<<28));
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf0 <Condensor_Relay_Pins_Init+0x40>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf0 <Condensor_Relay_Pins_Init+0x40>)
 8002cc6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002cca:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=((0x3<<28));
 8002ccc:	4b08      	ldr	r3, [pc, #32]	@ (8002cf0 <Condensor_Relay_Pins_Init+0x40>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4a07      	ldr	r2, [pc, #28]	@ (8002cf0 <Condensor_Relay_Pins_Init+0x40>)
 8002cd2:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8002cd6:	6053      	str	r3, [r2, #4]
    GPIOB->ODR|=((1<<PB15_CONDENSOR));
 8002cd8:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <Condensor_Relay_Pins_Init+0x40>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4a04      	ldr	r2, [pc, #16]	@ (8002cf0 <Condensor_Relay_Pins_Init+0x40>)
 8002cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ce2:	60d3      	str	r3, [r2, #12]
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40010c00 	.word	0x40010c00

08002cf4 <clock_print_status>:
#include"Motor_Control_uint_pins.h"
#include"process.h"
#include"MCU_ELECTROCATALYST_MESSAGES.h"
CAN_FRAME frame;
I2C_HandleTypeDef hi2c1;
void clock_print_status(){
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
    uart_printf("\r\n=====================================\r\n");
 8002cf8:	4817      	ldr	r0, [pc, #92]	@ (8002d58 <clock_print_status+0x64>)
 8002cfa:	f000 fdf9 	bl	80038f0 <uart_printf>
    uart_printf("EVA DRIVE_MODE_SELECTOR & HVAC \r\n");
 8002cfe:	4817      	ldr	r0, [pc, #92]	@ (8002d5c <clock_print_status+0x68>)
 8002d00:	f000 fdf6 	bl	80038f0 <uart_printf>
    uart_printf("=====================================\r\n");
 8002d04:	4816      	ldr	r0, [pc, #88]	@ (8002d60 <clock_print_status+0x6c>)
 8002d06:	f000 fdf3 	bl	80038f0 <uart_printf>
    uart_printf("System Clock: %lu MHz\r\n", get_SYSCLK_freq() / 1000000);
 8002d0a:	f000 fa9b 	bl	8003244 <get_SYSCLK_freq>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4a14      	ldr	r2, [pc, #80]	@ (8002d64 <clock_print_status+0x70>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	0c9b      	lsrs	r3, r3, #18
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4813      	ldr	r0, [pc, #76]	@ (8002d68 <clock_print_status+0x74>)
 8002d1c:	f000 fde8 	bl	80038f0 <uart_printf>
    uart_printf("APB1 Clock: %lu MHz\r\n", get_APB1_freq() / 1000000);
 8002d20:	f000 fb0e 	bl	8003340 <get_APB1_freq>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4a0f      	ldr	r2, [pc, #60]	@ (8002d64 <clock_print_status+0x70>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	0c9b      	lsrs	r3, r3, #18
 8002d2e:	4619      	mov	r1, r3
 8002d30:	480e      	ldr	r0, [pc, #56]	@ (8002d6c <clock_print_status+0x78>)
 8002d32:	f000 fddd 	bl	80038f0 <uart_printf>
    uart_printf("APB2 Clock: %lu MHz\r\n", get_APB2_freq() / 1000000);
 8002d36:	f000 fb29 	bl	800338c <get_APB2_freq>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4a09      	ldr	r2, [pc, #36]	@ (8002d64 <clock_print_status+0x70>)
 8002d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d42:	0c9b      	lsrs	r3, r3, #18
 8002d44:	4619      	mov	r1, r3
 8002d46:	480a      	ldr	r0, [pc, #40]	@ (8002d70 <clock_print_status+0x7c>)
 8002d48:	f000 fdd2 	bl	80038f0 <uart_printf>
    uart_printf("=====================================\r\n");
 8002d4c:	4804      	ldr	r0, [pc, #16]	@ (8002d60 <clock_print_status+0x6c>)
 8002d4e:	f000 fdcf 	bl	80038f0 <uart_printf>
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	0800691c 	.word	0x0800691c
 8002d5c:	08006948 	.word	0x08006948
 8002d60:	0800696c 	.word	0x0800696c
 8002d64:	431bde83 	.word	0x431bde83
 8002d68:	08006994 	.word	0x08006994
 8002d6c:	080069ac 	.word	0x080069ac
 8002d70:	080069c4 	.word	0x080069c4

08002d74 <can_ids_filter_configure>:
\
void can_ids_filter_configure(){
 8002d74:	b5b0      	push	{r4, r5, r7, lr}
 8002d76:	b08a      	sub	sp, #40	@ 0x28
 8002d78:	af00      	add	r7, sp, #0
    /* Standard IDs array - terminated with 0x0000 */
    uint32_t standard_rx_ids[] = {
 8002d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002db0 <can_ids_filter_configure+0x3c>)
 8002d7c:	f107 0414 	add.w	r4, r7, #20
 8002d80:	461d      	mov	r5, r3
 8002d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d86:	682b      	ldr	r3, [r5, #0]
 8002d88:	6023      	str	r3, [r4, #0]
			Matel_MCU_Fault_Code_CAN_STD_ID_B3,
			Matel_CANFRAME3_CAN_STD_ID_3AA,
    };

    /* Extended IDs array - terminated with 0x00000000 */
    uint32_t extended_rx_ids[] = {
 8002d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002db4 <can_ids_filter_configure+0x40>)
 8002d8c:	1d3c      	adds	r4, r7, #4
 8002d8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    		Matel_MCU_Stat_One_CAN_EXTD_ID_18265040,
			Matel_MCU_Stat_Two_CAN_EXTD_ID_18275040,
			Matel_MCU_HearthBeat_CAN_EXTD_ID_18963257,
			Matel_VECTOR__INDEPENDENT_SIG_MSG_0xC0000000
    };
    configure_can_filters(standard_rx_ids,sizeof(standard_rx_ids)/sizeof(standard_rx_ids[0]),extended_rx_ids,sizeof(extended_rx_ids)/sizeof(extended_rx_ids[0]));
 8002d94:	1d3a      	adds	r2, r7, #4
 8002d96:	f107 0014 	add.w	r0, r7, #20
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	2105      	movs	r1, #5
 8002d9e:	f7ff fda1 	bl	80028e4 <configure_can_filters>
    uart_printf("[INFO] Configuring CAN filters for CT4 MCU messages...\r\n");
 8002da2:	4805      	ldr	r0, [pc, #20]	@ (8002db8 <can_ids_filter_configure+0x44>)
 8002da4:	f000 fda4 	bl	80038f0 <uart_printf>
}
 8002da8:	bf00      	nop
 8002daa:	3728      	adds	r7, #40	@ 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bdb0      	pop	{r4, r5, r7, pc}
 8002db0:	08006a18 	.word	0x08006a18
 8002db4:	08006a2c 	.word	0x08006a2c
 8002db8:	080069dc 	.word	0x080069dc

08002dbc <main>:
int main(){
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af02      	add	r7, sp, #8
	HAL_Init();
 8002dc2:	f000 fdf1 	bl	80039a8 <HAL_Init>
	system_clock_init_to_72MHZ();
 8002dc6:	f000 f9e7 	bl	8003198 <system_clock_init_to_72MHZ>
	if(uart_init(115200)==RY_NOT_OK){
 8002dca:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8002dce:	f000 fc11 	bl	80035f4 <uart_init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <main+0x20>
	  Error_Handler();
 8002dd8:	f000 f89a 	bl	8002f10 <Error_Handler>
	}
	clock_print_status();
 8002ddc:	f7ff ff8a 	bl	8002cf4 <clock_print_status>
    uart_printf("UART1 initialization is ok ,baud_baudrate in kbps %d:\r\n", 115200);
 8002de0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002de4:	483d      	ldr	r0, [pc, #244]	@ (8002edc <main+0x120>)
 8002de6:	f000 fd83 	bl	80038f0 <uart_printf>
    uart_printf("=========================================================\r\n");
 8002dea:	483d      	ldr	r0, [pc, #244]	@ (8002ee0 <main+0x124>)
 8002dec:	f000 fd80 	bl	80038f0 <uart_printf>
    systick_init(1000);
 8002df0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002df4:	f000 f980 	bl	80030f8 <systick_init>
    uart_printf("systick clock initialized for milli second ");
 8002df8:	483a      	ldr	r0, [pc, #232]	@ (8002ee4 <main+0x128>)
 8002dfa:	f000 fd79 	bl	80038f0 <uart_printf>
    uart_printf("=========================================================\r\n");
 8002dfe:	4838      	ldr	r0, [pc, #224]	@ (8002ee0 <main+0x124>)
 8002e00:	f000 fd76 	bl	80038f0 <uart_printf>
	if(can_init(500000)==RY_NOT_OK){
 8002e04:	4838      	ldr	r0, [pc, #224]	@ (8002ee8 <main+0x12c>)
 8002e06:	f7ff fd09 	bl	800281c <can_init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d107      	bne.n	8002e20 <main+0x64>
      uart_printf("CAN initialization is NOT oK\r\n");
 8002e10:	4836      	ldr	r0, [pc, #216]	@ (8002eec <main+0x130>)
 8002e12:	f000 fd6d 	bl	80038f0 <uart_printf>
	  uart_printf("======================================================\r\n");
 8002e16:	4836      	ldr	r0, [pc, #216]	@ (8002ef0 <main+0x134>)
 8002e18:	f000 fd6a 	bl	80038f0 <uart_printf>
	  Error_Handler();
 8002e1c:	f000 f878 	bl	8002f10 <Error_Handler>
	}
	can_ids_filter_configure();
 8002e20:	f7ff ffa8 	bl	8002d74 <can_ids_filter_configure>
    uart_printf("CAN initialization is ok ,baud_baudrate in %d kbps:\r\n", 500);
 8002e24:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002e28:	4832      	ldr	r0, [pc, #200]	@ (8002ef4 <main+0x138>)
 8002e2a:	f000 fd61 	bl	80038f0 <uart_printf>
    uart_printf("=========================================================\r\n");
 8002e2e:	482c      	ldr	r0, [pc, #176]	@ (8002ee0 <main+0x124>)
 8002e30:	f000 fd5e 	bl	80038f0 <uart_printf>
    Init_tasks();
 8002e34:	f000 fad6 	bl	80033e4 <Init_tasks>
    uart_printf("Task schedular is initialized\r\n");
 8002e38:	482f      	ldr	r0, [pc, #188]	@ (8002ef8 <main+0x13c>)
 8002e3a:	f000 fd59 	bl	80038f0 <uart_printf>
    uart_printf("=========================================================\r\n");
 8002e3e:	4828      	ldr	r0, [pc, #160]	@ (8002ee0 <main+0x124>)
 8002e40:	f000 fd56 	bl	80038f0 <uart_printf>
    Blower_Relay_Pins_Init();
 8002e44:	f7fe fa16 	bl	8001274 <Blower_Relay_Pins_Init>
    uart_printf("Blower pins are initialized PIN12=%d PIN13=%d PIN14=%d\r\n",(GPIOB->IDR>>12&1),(GPIOB->IDR>>13&1),(GPIOB->IDR>>14&1));
 8002e48:	4b2c      	ldr	r3, [pc, #176]	@ (8002efc <main+0x140>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	0b1b      	lsrs	r3, r3, #12
 8002e4e:	f003 0101 	and.w	r1, r3, #1
 8002e52:	4b2a      	ldr	r3, [pc, #168]	@ (8002efc <main+0x140>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	0b5b      	lsrs	r3, r3, #13
 8002e58:	f003 0201 	and.w	r2, r3, #1
 8002e5c:	4b27      	ldr	r3, [pc, #156]	@ (8002efc <main+0x140>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	0b9b      	lsrs	r3, r3, #14
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	4826      	ldr	r0, [pc, #152]	@ (8002f00 <main+0x144>)
 8002e68:	f000 fd42 	bl	80038f0 <uart_printf>
    uart_printf("=========================================================\r\n");
 8002e6c:	481c      	ldr	r0, [pc, #112]	@ (8002ee0 <main+0x124>)
 8002e6e:	f000 fd3f 	bl	80038f0 <uart_printf>
    Condensor_Relay_Pins_Init();
 8002e72:	f7ff ff1d 	bl	8002cb0 <Condensor_Relay_Pins_Init>
    uart_printf("Condensor pins are initialized PIN15=%d \r\n",(GPIOB->IDR>>15&1));
 8002e76:	4b21      	ldr	r3, [pc, #132]	@ (8002efc <main+0x140>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	0bdb      	lsrs	r3, r3, #15
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	4619      	mov	r1, r3
 8002e82:	4820      	ldr	r0, [pc, #128]	@ (8002f04 <main+0x148>)
 8002e84:	f000 fd34 	bl	80038f0 <uart_printf>
    uart_printf("=========================================================\r\n");
 8002e88:	4815      	ldr	r0, [pc, #84]	@ (8002ee0 <main+0x124>)
 8002e8a:	f000 fd31 	bl	80038f0 <uart_printf>
    Motor_control_pins_init();
 8002e8e:	f7ff fb71 	bl	8002574 <Motor_control_pins_init>
    uart_printf("Motor_control pins are initialized PIN0=%d PIN1=%d  PIN3=%d PIN5=%d\r\n",(GPIOB->IDR>>0&1),(GPIOB->IDR>>1&1),(GPIOB->IDR>>3&1),(GPIOB->IDR>>5&1));
 8002e92:	4b1a      	ldr	r3, [pc, #104]	@ (8002efc <main+0x140>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0101 	and.w	r1, r3, #1
 8002e9a:	4b18      	ldr	r3, [pc, #96]	@ (8002efc <main+0x140>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	085b      	lsrs	r3, r3, #1
 8002ea0:	f003 0201 	and.w	r2, r3, #1
 8002ea4:	4b15      	ldr	r3, [pc, #84]	@ (8002efc <main+0x140>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	08db      	lsrs	r3, r3, #3
 8002eaa:	f003 0001 	and.w	r0, r3, #1
 8002eae:	4b13      	ldr	r3, [pc, #76]	@ (8002efc <main+0x140>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	4603      	mov	r3, r0
 8002ebc:	4812      	ldr	r0, [pc, #72]	@ (8002f08 <main+0x14c>)
 8002ebe:	f000 fd17 	bl	80038f0 <uart_printf>
    uart_printf("=========================================================\r\n");
 8002ec2:	4807      	ldr	r0, [pc, #28]	@ (8002ee0 <main+0x124>)
 8002ec4:	f000 fd14 	bl	80038f0 <uart_printf>
    MX_I2C1_Init();
 8002ec8:	f7fe f9f8 	bl	80012bc <MX_I2C1_Init>
//    Register_task(50,Drive_mode_state);
    Register_task(20,process_can_messages);
 8002ecc:	490f      	ldr	r1, [pc, #60]	@ (8002f0c <main+0x150>)
 8002ece:	2014      	movs	r0, #20
 8002ed0:	f000 fabe 	bl	8003450 <Register_task>
    while(1){
    	Run_all_tasks();
 8002ed4:	f000 fb0a 	bl	80034ec <Run_all_tasks>
 8002ed8:	e7fc      	b.n	8002ed4 <main+0x118>
 8002eda:	bf00      	nop
 8002edc:	08006a3c 	.word	0x08006a3c
 8002ee0:	08006a74 	.word	0x08006a74
 8002ee4:	08006ab0 	.word	0x08006ab0
 8002ee8:	0007a120 	.word	0x0007a120
 8002eec:	08006adc 	.word	0x08006adc
 8002ef0:	08006afc 	.word	0x08006afc
 8002ef4:	08006b38 	.word	0x08006b38
 8002ef8:	08006b70 	.word	0x08006b70
 8002efc:	40010c00 	.word	0x40010c00
 8002f00:	08006b90 	.word	0x08006b90
 8002f04:	08006bcc 	.word	0x08006bcc
 8002f08:	08006bf8 	.word	0x08006bf8
 8002f0c:	08002f1d 	.word	0x08002f1d

08002f10 <Error_Handler>:
    }
}


void Error_Handler(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <process_can_messages>:
	    }
		}
	}
}
void process_can_messages(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
   can_frame_t rx_frame;

   if (CAN_MessagePending(0))
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7ff fe10 	bl	8002b48 <CAN_MessagePending>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d008      	beq.n	8002f40 <process_can_messages+0x24>
   {
	   can_rx(&rx_frame,0);
 8002f2e:	463b      	mov	r3, r7
 8002f30:	2100      	movs	r1, #0
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fe2a 	bl	8002b8c <can_rx>
       matel_mcu_process_can_frame(&rx_frame);
 8002f38:	463b      	mov	r3, r7
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe fa32 	bl	80013a4 <matel_mcu_process_can_frame>
//       send_can(rx_frame);
   }
   if (CAN_MessagePending(1))
 8002f40:	2001      	movs	r0, #1
 8002f42:	f7ff fe01 	bl	8002b48 <CAN_MessagePending>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <process_can_messages+0x42>
   {
	   can_rx(&rx_frame,1);
 8002f4c:	463b      	mov	r3, r7
 8002f4e:	2101      	movs	r1, #1
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fe1b 	bl	8002b8c <can_rx>
       matel_mcu_process_can_frame(&rx_frame);
 8002f56:	463b      	mov	r3, r7
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe fa23 	bl	80013a4 <matel_mcu_process_can_frame>
//       send_can(rx_frame);
   }
}
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f6e:	4b15      	ldr	r3, [pc, #84]	@ (8002fc4 <HAL_MspInit+0x5c>)
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	4a14      	ldr	r2, [pc, #80]	@ (8002fc4 <HAL_MspInit+0x5c>)
 8002f74:	f043 0301 	orr.w	r3, r3, #1
 8002f78:	6193      	str	r3, [r2, #24]
 8002f7a:	4b12      	ldr	r3, [pc, #72]	@ (8002fc4 <HAL_MspInit+0x5c>)
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc4 <HAL_MspInit+0x5c>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8002fc4 <HAL_MspInit+0x5c>)
 8002f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f90:	61d3      	str	r3, [r2, #28]
 8002f92:	4b0c      	ldr	r3, [pc, #48]	@ (8002fc4 <HAL_MspInit+0x5c>)
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f9a:	607b      	str	r3, [r7, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fc8 <HAL_MspInit+0x60>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	4a04      	ldr	r2, [pc, #16]	@ (8002fc8 <HAL_MspInit+0x60>)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40010000 	.word	0x40010000

08002fcc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 0310 	add.w	r3, r7, #16
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800305c <HAL_I2C_MspInit+0x90>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d133      	bne.n	8003054 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fec:	4b1c      	ldr	r3, [pc, #112]	@ (8003060 <HAL_I2C_MspInit+0x94>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8003060 <HAL_I2C_MspInit+0x94>)
 8002ff2:	f043 0308 	orr.w	r3, r3, #8
 8002ff6:	6193      	str	r3, [r2, #24]
 8002ff8:	4b19      	ldr	r3, [pc, #100]	@ (8003060 <HAL_I2C_MspInit+0x94>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0308 	and.w	r3, r3, #8
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003004:	23c0      	movs	r3, #192	@ 0xc0
 8003006:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003008:	2312      	movs	r3, #18
 800300a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800300c:	2303      	movs	r3, #3
 800300e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003010:	f107 0310 	add.w	r3, r7, #16
 8003014:	4619      	mov	r1, r3
 8003016:	4813      	ldr	r0, [pc, #76]	@ (8003064 <HAL_I2C_MspInit+0x98>)
 8003018:	f000 feb2 	bl	8003d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800301c:	4b10      	ldr	r3, [pc, #64]	@ (8003060 <HAL_I2C_MspInit+0x94>)
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	4a0f      	ldr	r2, [pc, #60]	@ (8003060 <HAL_I2C_MspInit+0x94>)
 8003022:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003026:	61d3      	str	r3, [r2, #28]
 8003028:	4b0d      	ldr	r3, [pc, #52]	@ (8003060 <HAL_I2C_MspInit+0x94>)
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003034:	2200      	movs	r2, #0
 8003036:	2100      	movs	r1, #0
 8003038:	201f      	movs	r0, #31
 800303a:	f000 fde4 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800303e:	201f      	movs	r0, #31
 8003040:	f000 fdfd 	bl	8003c3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003044:	2200      	movs	r2, #0
 8003046:	2100      	movs	r1, #0
 8003048:	2020      	movs	r0, #32
 800304a:	f000 fddc 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800304e:	2020      	movs	r0, #32
 8003050:	f000 fdf5 	bl	8003c3e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003054:	bf00      	nop
 8003056:	3720      	adds	r7, #32
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	40005400 	.word	0x40005400
 8003060:	40021000 	.word	0x40021000
 8003064:	40010c00 	.word	0x40010c00

08003068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800306c:	bf00      	nop
 800306e:	e7fd      	b.n	800306c <NMI_Handler+0x4>

08003070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003074:	bf00      	nop
 8003076:	e7fd      	b.n	8003074 <HardFault_Handler+0x4>

08003078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800307c:	bf00      	nop
 800307e:	e7fd      	b.n	800307c <MemManage_Handler+0x4>

08003080 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <BusFault_Handler+0x4>

08003088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <UsageFault_Handler+0x4>

08003090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr

080030a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030b8:	f000 fcbc 	bl	8003a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  milli_sec_tick++;
 80030bc:	4b03      	ldr	r3, [pc, #12]	@ (80030cc <SysTick_Handler+0x18>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3301      	adds	r3, #1
 80030c2:	4a02      	ldr	r2, [pc, #8]	@ (80030cc <SysTick_Handler+0x18>)
 80030c4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	2000037c 	.word	0x2000037c

080030d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80030d4:	4802      	ldr	r0, [pc, #8]	@ (80030e0 <I2C1_EV_IRQHandler+0x10>)
 80030d6:	f001 f99d 	bl	8004414 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000328 	.word	0x20000328

080030e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80030e8:	4802      	ldr	r0, [pc, #8]	@ (80030f4 <I2C1_ER_IRQHandler+0x10>)
 80030ea:	f001 fb04 	bl	80046f6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000328 	.word	0x20000328

080030f8 <systick_init>:
 *  Created on: Sep 3, 2025
 *      Author: MadaYaswanth
 */

#include"extern_file_declarations.h"
void systick_init(uint32_t ticks_per_sec){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
    // Reload value = (SystemCoreClock / ticks_per_sec) - 1
    SysTick->LOAD = (get_SYSCLK_freq() / ticks_per_sec) - 1;
 8003100:	f000 f8a0 	bl	8003244 <get_SYSCLK_freq>
 8003104:	4602      	mov	r2, r0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	fbb2 f3f3 	udiv	r3, r2, r3
 800310c:	4a06      	ldr	r2, [pc, #24]	@ (8003128 <systick_init+0x30>)
 800310e:	3b01      	subs	r3, #1
 8003110:	6053      	str	r3, [r2, #4]

    SysTick->VAL = 0;             // Clear current value
 8003112:	4b05      	ldr	r3, [pc, #20]	@ (8003128 <systick_init+0x30>)
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = (1 << 2) |    // CLKSOURCE = processor clock (AHB)
 8003118:	4b03      	ldr	r3, [pc, #12]	@ (8003128 <systick_init+0x30>)
 800311a:	2207      	movs	r2, #7
 800311c:	601a      	str	r2, [r3, #0]
                    (1 << 1) |    // TICKINT = enable SysTick interrupt
                    (1 << 0);     // ENABLE counter
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	e000e010 	.word	0xe000e010

0800312c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003134:	4a14      	ldr	r2, [pc, #80]	@ (8003188 <_sbrk+0x5c>)
 8003136:	4b15      	ldr	r3, [pc, #84]	@ (800318c <_sbrk+0x60>)
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003140:	4b13      	ldr	r3, [pc, #76]	@ (8003190 <_sbrk+0x64>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d102      	bne.n	800314e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003148:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <_sbrk+0x64>)
 800314a:	4a12      	ldr	r2, [pc, #72]	@ (8003194 <_sbrk+0x68>)
 800314c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800314e:	4b10      	ldr	r3, [pc, #64]	@ (8003190 <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	429a      	cmp	r2, r3
 800315a:	d207      	bcs.n	800316c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800315c:	f002 fe9c 	bl	8005e98 <__errno>
 8003160:	4603      	mov	r3, r0
 8003162:	220c      	movs	r2, #12
 8003164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
 800316a:	e009      	b.n	8003180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800316c:	4b08      	ldr	r3, [pc, #32]	@ (8003190 <_sbrk+0x64>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003172:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <_sbrk+0x64>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	4a05      	ldr	r2, [pc, #20]	@ (8003190 <_sbrk+0x64>)
 800317c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800317e:	68fb      	ldr	r3, [r7, #12]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	20005000 	.word	0x20005000
 800318c:	00000400 	.word	0x00000400
 8003190:	20000380 	.word	0x20000380
 8003194:	20000570 	.word	0x20000570

08003198 <system_clock_init_to_72MHZ>:
 *
 *  Created on: Sep 2, 2025
 *      Author: MadaYaswanth
 */
#include"main.h"
STATUS system_clock_init_to_72MHZ(){
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
	    // 1. Enable HSE (external crystal, e.g., 8MHz)
	    RCC->CR |= RCC_CR_HSEON;       // Turn on HSE
 800319c:	4b27      	ldr	r3, [pc, #156]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a26      	ldr	r2, [pc, #152]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 80031a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
	    while (!(RCC->CR & RCC_CR_HSERDY)); // Wait until HSE is ready
 80031a8:	bf00      	nop
 80031aa:	4b24      	ldr	r3, [pc, #144]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d0f9      	beq.n	80031aa <system_clock_init_to_72MHZ+0x12>
	    FLASH->ACR |= FLASH_ACR_LATENCY_2;  // 2 wait states
 80031b6:	4b22      	ldr	r3, [pc, #136]	@ (8003240 <system_clock_init_to_72MHZ+0xa8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a21      	ldr	r2, [pc, #132]	@ (8003240 <system_clock_init_to_72MHZ+0xa8>)
 80031bc:	f043 0304 	orr.w	r3, r3, #4
 80031c0:	6013      	str	r3, [r2, #0]
	    FLASH->ACR |= FLASH_ACR_PRFTBE;     // Enable prefetch
 80031c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003240 <system_clock_init_to_72MHZ+0xa8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003240 <system_clock_init_to_72MHZ+0xa8>)
 80031c8:	f043 0310 	orr.w	r3, r3, #16
 80031cc:	6013      	str	r3, [r2, #0]
	    // 2. Configure PLL to multiply HSE to 72 MHz
	    //    PLLMUL = 9 (8MHz * 9 = 72MHz)
	    RCC->CFGR |= RCC_CFGR_PLLMULL9; // PLL multiplier = 9
 80031ce:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4a1a      	ldr	r2, [pc, #104]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 80031d4:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 80031d8:	6053      	str	r3, [r2, #4]
	    // 3. Select HSE as PLL source
	    RCC->CFGR |= RCC_CFGR_PLLSRC;   // PLL source = HSE
 80031da:	4b18      	ldr	r3, [pc, #96]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4a17      	ldr	r2, [pc, #92]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031e4:	6053      	str	r3, [r2, #4]
	    // 4. Set APB1 Prescaler to 2 (PCLK1 = 72MHz / 2 = 36MHz)
	    RCC->CFGR |= RCC_CFGR_PPRE1_2;  // APB1 prescaler = 2 (36MHz)
 80031e6:	4b15      	ldr	r3, [pc, #84]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4a14      	ldr	r2, [pc, #80]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 80031ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031f0:	6053      	str	r3, [r2, #4]
	    // 5. Set APB2 Prescaler to 1 (PCLK2 = 72MHz, no division)
	    RCC->CFGR &= ~RCC_CFGR_PPRE2;   // APB2 prescaler = 1 (72MHz)
 80031f2:	4b12      	ldr	r3, [pc, #72]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4a11      	ldr	r2, [pc, #68]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 80031f8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80031fc:	6053      	str	r3, [r2, #4]
	    // 6. Enable PLL and wait until ready
	    RCC->CR |= RCC_CR_PLLON;
 80031fe:	4b0f      	ldr	r3, [pc, #60]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a0e      	ldr	r2, [pc, #56]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 8003204:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003208:	6013      	str	r3, [r2, #0]
	    while (!(RCC->CR & RCC_CR_PLLRDY));
 800320a:	bf00      	nop
 800320c:	4b0b      	ldr	r3, [pc, #44]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f9      	beq.n	800320c <system_clock_init_to_72MHZ+0x74>
	     // 7. Switch SYSCLK to PLL
	    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003218:	4b08      	ldr	r3, [pc, #32]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a07      	ldr	r2, [pc, #28]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 800321e:	f043 0302 	orr.w	r3, r3, #2
 8003222:	6053      	str	r3, [r2, #4]
	    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8003224:	bf00      	nop
 8003226:	4b05      	ldr	r3, [pc, #20]	@ (800323c <system_clock_init_to_72MHZ+0xa4>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b08      	cmp	r3, #8
 8003230:	d1f9      	bne.n	8003226 <system_clock_init_to_72MHZ+0x8e>
}
 8003232:	bf00      	nop
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	bc80      	pop	{r7}
 800323a:	4770      	bx	lr
 800323c:	40021000 	.word	0x40021000
 8003240:	40022000 	.word	0x40022000

08003244 <get_SYSCLK_freq>:
uint32_t get_SYSCLK_freq(void) {
 8003244:	b480      	push	{r7}
 8003246:	b087      	sub	sp, #28
 8003248:	af00      	add	r7, sp, #0
    uint32_t sysclk_source, pllmul, prediv, pllclk;
    uint32_t HSE_Value = 8000000; // External crystal (adjust if different)
 800324a:	4b26      	ldr	r3, [pc, #152]	@ (80032e4 <get_SYSCLK_freq+0xa0>)
 800324c:	60bb      	str	r3, [r7, #8]
    uint32_t HSI_Value = 8000000; // Internal RC
 800324e:	4b25      	ldr	r3, [pc, #148]	@ (80032e4 <get_SYSCLK_freq+0xa0>)
 8003250:	607b      	str	r3, [r7, #4]
    sysclk_source = (RCC->CFGR >> 2) & 0x3;  // SWS bits
 8003252:	4b25      	ldr	r3, [pc, #148]	@ (80032e8 <get_SYSCLK_freq+0xa4>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	603b      	str	r3, [r7, #0]
    switch (sysclk_source) {
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d00d      	beq.n	8003280 <get_SYSCLK_freq+0x3c>
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d835      	bhi.n	80032d6 <get_SYSCLK_freq+0x92>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <get_SYSCLK_freq+0x34>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d002      	beq.n	800327c <get_SYSCLK_freq+0x38>
 8003276:	e02e      	b.n	80032d6 <get_SYSCLK_freq+0x92>
        case 0x00: // HSI
            return HSI_Value;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	e02d      	b.n	80032d8 <get_SYSCLK_freq+0x94>
        case 0x01: // HSE
            return HSE_Value;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	e02b      	b.n	80032d8 <get_SYSCLK_freq+0x94>
        case 0x02: // PLL
            // PLL source
            if (RCC->CFGR & (1 << 16)) {
 8003280:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <get_SYSCLK_freq+0xa4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d010      	beq.n	80032ae <get_SYSCLK_freq+0x6a>
                // HSE as PLL source
                if (RCC->CFGR & (1 << 17))
 800328c:	4b16      	ldr	r3, [pc, #88]	@ (80032e8 <get_SYSCLK_freq+0xa4>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <get_SYSCLK_freq+0x5a>
                    prediv = 2;   // HSE/2
 8003298:	2302      	movs	r3, #2
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	e001      	b.n	80032a2 <get_SYSCLK_freq+0x5e>
                else
                    prediv = 1;   // HSE
 800329e:	2301      	movs	r3, #1
 80032a0:	613b      	str	r3, [r7, #16]
                pllclk = HSE_Value / prediv;
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	e002      	b.n	80032b4 <get_SYSCLK_freq+0x70>
            } else {
                // HSI/2 as PLL source
                pllclk = HSI_Value / 2; // 4 MHz
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	085b      	lsrs	r3, r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
            }

            // PLL multiplier
            pllmul = ((RCC->CFGR >> 18) & 0xF) + 2;
 80032b4:	4b0c      	ldr	r3, [pc, #48]	@ (80032e8 <get_SYSCLK_freq+0xa4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	0c9b      	lsrs	r3, r3, #18
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	3302      	adds	r3, #2
 80032c0:	617b      	str	r3, [r7, #20]
            // Note: value 0b1101 = x13, 0b1110 = x14, 0b1111 = x16
            if (pllmul == 15) pllmul = 16; // adjust for 0b1111 special case
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b0f      	cmp	r3, #15
 80032c6:	d101      	bne.n	80032cc <get_SYSCLK_freq+0x88>
 80032c8:	2310      	movs	r3, #16
 80032ca:	617b      	str	r3, [r7, #20]

            return pllclk * pllmul;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	fb02 f303 	mul.w	r3, r2, r3
 80032d4:	e000      	b.n	80032d8 <get_SYSCLK_freq+0x94>
        default:
            return HSI_Value; // fallback
 80032d6:	687b      	ldr	r3, [r7, #4]
    }
}
 80032d8:	4618      	mov	r0, r3
 80032da:	371c      	adds	r7, #28
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	007a1200 	.word	0x007a1200
 80032e8:	40021000 	.word	0x40021000

080032ec <get_AHB_freq>:
uint32_t get_AHB_freq(void) {
 80032ec:	b5b0      	push	{r4, r5, r7, lr}
 80032ee:	b092      	sub	sp, #72	@ 0x48
 80032f0:	af00      	add	r7, sp, #0
    uint32_t presc_table[16] = {1,1,1,1,1,1,1,1,2,4,8,16,64,128,256,512};
 80032f2:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <get_AHB_freq+0x4c>)
 80032f4:	1d3c      	adds	r4, r7, #4
 80032f6:	461d      	mov	r5, r3
 80032f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003304:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t hpre = (RCC->CFGR >> 4) & 0xF;
 800330c:	4b0b      	ldr	r3, [pc, #44]	@ (800333c <get_AHB_freq+0x50>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	647b      	str	r3, [r7, #68]	@ 0x44
    return get_SYSCLK_freq() / presc_table[hpre];
 8003318:	f7ff ff94 	bl	8003244 <get_SYSCLK_freq>
 800331c:	4602      	mov	r2, r0
 800331e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	3348      	adds	r3, #72	@ 0x48
 8003324:	443b      	add	r3, r7
 8003326:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800332a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800332e:	4618      	mov	r0, r3
 8003330:	3748      	adds	r7, #72	@ 0x48
 8003332:	46bd      	mov	sp, r7
 8003334:	bdb0      	pop	{r4, r5, r7, pc}
 8003336:	bf00      	nop
 8003338:	08006c40 	.word	0x08006c40
 800333c:	40021000 	.word	0x40021000

08003340 <get_APB1_freq>:

uint32_t get_APB1_freq(void) {
 8003340:	b5b0      	push	{r4, r5, r7, lr}
 8003342:	b08a      	sub	sp, #40	@ 0x28
 8003344:	af00      	add	r7, sp, #0
    uint32_t presc_table[8] = {1,1,1,1,2,4,8,16};
 8003346:	4b0f      	ldr	r3, [pc, #60]	@ (8003384 <get_APB1_freq+0x44>)
 8003348:	1d3c      	adds	r4, r7, #4
 800334a:	461d      	mov	r5, r3
 800334c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800334e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003350:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t ppre1 = (RCC->CFGR >> 8) & 0x7;
 8003358:	4b0b      	ldr	r3, [pc, #44]	@ (8003388 <get_APB1_freq+0x48>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	0a1b      	lsrs	r3, r3, #8
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24
    return get_AHB_freq() / presc_table[ppre1];
 8003364:	f7ff ffc2 	bl	80032ec <get_AHB_freq>
 8003368:	4602      	mov	r2, r0
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	3328      	adds	r3, #40	@ 0x28
 8003370:	443b      	add	r3, r7
 8003372:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800337a:	4618      	mov	r0, r3
 800337c:	3728      	adds	r7, #40	@ 0x28
 800337e:	46bd      	mov	sp, r7
 8003380:	bdb0      	pop	{r4, r5, r7, pc}
 8003382:	bf00      	nop
 8003384:	08006c80 	.word	0x08006c80
 8003388:	40021000 	.word	0x40021000

0800338c <get_APB2_freq>:

uint32_t get_APB2_freq(void) {
 800338c:	b5b0      	push	{r4, r5, r7, lr}
 800338e:	b08a      	sub	sp, #40	@ 0x28
 8003390:	af00      	add	r7, sp, #0
    uint32_t presc_table[8] = {1,1,1,1,2,4,8,16};
 8003392:	4b0f      	ldr	r3, [pc, #60]	@ (80033d0 <get_APB2_freq+0x44>)
 8003394:	1d3c      	adds	r4, r7, #4
 8003396:	461d      	mov	r5, r3
 8003398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800339a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800339c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t ppre2 = (RCC->CFGR >> 11) & 0x7;
 80033a4:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <get_APB2_freq+0x48>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	0adb      	lsrs	r3, r3, #11
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
    return get_AHB_freq() / presc_table[ppre2];
 80033b0:	f7ff ff9c 	bl	80032ec <get_AHB_freq>
 80033b4:	4602      	mov	r2, r0
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	3328      	adds	r3, #40	@ 0x28
 80033bc:	443b      	add	r3, r7
 80033be:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80033c2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3728      	adds	r7, #40	@ 0x28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bdb0      	pop	{r4, r5, r7, pc}
 80033ce:	bf00      	nop
 80033d0:	08006c80 	.word	0x08006c80
 80033d4:	40021000 	.word	0x40021000

080033d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033dc:	bf00      	nop
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <Init_tasks>:

#include"extern_file_declarations.h"
#define max_tasks 10
task_timer timer[max_tasks];

void Init_tasks(void){
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
	for(int i=0; i<max_tasks; i++){
 80033ea:	2300      	movs	r3, #0
 80033ec:	607b      	str	r3, [r7, #4]
 80033ee:	e024      	b.n	800343a <Init_tasks+0x56>
		timer[i].period_ms = 0;
 80033f0:	4a16      	ldr	r2, [pc, #88]	@ (800344c <Init_tasks+0x68>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	4413      	add	r3, r2
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
		timer[i].last_time_ms = 0;
 80033fc:	4a13      	ldr	r2, [pc, #76]	@ (800344c <Init_tasks+0x68>)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	4413      	add	r3, r2
 8003404:	3304      	adds	r3, #4
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
		timer[i].enable = 0;
 800340a:	4a10      	ldr	r2, [pc, #64]	@ (800344c <Init_tasks+0x68>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	4413      	add	r3, r2
 8003412:	330c      	adds	r3, #12
 8003414:	2200      	movs	r2, #0
 8003416:	701a      	strb	r2, [r3, #0]
		timer[i].task_fn = 0;
 8003418:	4a0c      	ldr	r2, [pc, #48]	@ (800344c <Init_tasks+0x68>)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	4413      	add	r3, r2
 8003420:	3308      	adds	r3, #8
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
		timer[i].one_time_execute = 0;
 8003426:	4a09      	ldr	r2, [pc, #36]	@ (800344c <Init_tasks+0x68>)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	4413      	add	r3, r2
 800342e:	330d      	adds	r3, #13
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<max_tasks; i++){
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3301      	adds	r3, #1
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b09      	cmp	r3, #9
 800343e:	ddd7      	ble.n	80033f0 <Init_tasks+0xc>
	}
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	20000384 	.word	0x20000384

08003450 <Register_task>:

int Register_task(uint32_t period_ms, TaskFunction task_fn){
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
	for(int i=0; i<max_tasks; i++){
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	e037      	b.n	80034d0 <Register_task+0x80>
		if(!timer[i].enable && timer[i].task_fn == 0){
 8003460:	4a20      	ldr	r2, [pc, #128]	@ (80034e4 <Register_task+0x94>)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	4413      	add	r3, r2
 8003468:	330c      	adds	r3, #12
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d12c      	bne.n	80034ca <Register_task+0x7a>
 8003470:	4a1c      	ldr	r2, [pc, #112]	@ (80034e4 <Register_task+0x94>)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	4413      	add	r3, r2
 8003478:	3308      	adds	r3, #8
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d124      	bne.n	80034ca <Register_task+0x7a>
			timer[i].enable =1;
 8003480:	4a18      	ldr	r2, [pc, #96]	@ (80034e4 <Register_task+0x94>)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	4413      	add	r3, r2
 8003488:	330c      	adds	r3, #12
 800348a:	2201      	movs	r2, #1
 800348c:	701a      	strb	r2, [r3, #0]
			timer[i].last_time_ms = milli_sec_tick;
 800348e:	4b16      	ldr	r3, [pc, #88]	@ (80034e8 <Register_task+0x98>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4914      	ldr	r1, [pc, #80]	@ (80034e4 <Register_task+0x94>)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	440b      	add	r3, r1
 800349a:	3304      	adds	r3, #4
 800349c:	601a      	str	r2, [r3, #0]
			timer[i].one_time_execute = 0;
 800349e:	4a11      	ldr	r2, [pc, #68]	@ (80034e4 <Register_task+0x94>)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	4413      	add	r3, r2
 80034a6:	330d      	adds	r3, #13
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
			timer[i].period_ms = period_ms;
 80034ac:	4a0d      	ldr	r2, [pc, #52]	@ (80034e4 <Register_task+0x94>)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	4413      	add	r3, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	601a      	str	r2, [r3, #0]
			timer[i].task_fn = task_fn;
 80034b8:	4a0a      	ldr	r2, [pc, #40]	@ (80034e4 <Register_task+0x94>)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	4413      	add	r3, r2
 80034c0:	3308      	adds	r3, #8
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	601a      	str	r2, [r3, #0]
			return i;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	e007      	b.n	80034da <Register_task+0x8a>
	for(int i=0; i<max_tasks; i++){
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	3301      	adds	r3, #1
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b09      	cmp	r3, #9
 80034d4:	ddc4      	ble.n	8003460 <Register_task+0x10>
		}
	}
	return -1;
 80034d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	20000384 	.word	0x20000384
 80034e8:	2000037c 	.word	0x2000037c

080034ec <Run_all_tasks>:
		}
	}
	return -1;
}

void Run_all_tasks(void){
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
	for(int i=0; i<max_tasks; i++){
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	e03c      	b.n	8003572 <Run_all_tasks+0x86>
		if(timer[i].enable && timer[i].task_fn != 0){
 80034f8:	4a22      	ldr	r2, [pc, #136]	@ (8003584 <Run_all_tasks+0x98>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	4413      	add	r3, r2
 8003500:	330c      	adds	r3, #12
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d031      	beq.n	800356c <Run_all_tasks+0x80>
 8003508:	4a1e      	ldr	r2, [pc, #120]	@ (8003584 <Run_all_tasks+0x98>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	4413      	add	r3, r2
 8003510:	3308      	adds	r3, #8
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d029      	beq.n	800356c <Run_all_tasks+0x80>
			if(milli_sec_tick - timer[i].last_time_ms > timer[i].period_ms){
 8003518:	4b1b      	ldr	r3, [pc, #108]	@ (8003588 <Run_all_tasks+0x9c>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	4919      	ldr	r1, [pc, #100]	@ (8003584 <Run_all_tasks+0x98>)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	440b      	add	r3, r1
 8003524:	3304      	adds	r3, #4
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	1ad2      	subs	r2, r2, r3
 800352a:	4916      	ldr	r1, [pc, #88]	@ (8003584 <Run_all_tasks+0x98>)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	440b      	add	r3, r1
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d919      	bls.n	800356c <Run_all_tasks+0x80>
				timer[i].last_time_ms = milli_sec_tick;
 8003538:	4b13      	ldr	r3, [pc, #76]	@ (8003588 <Run_all_tasks+0x9c>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	4911      	ldr	r1, [pc, #68]	@ (8003584 <Run_all_tasks+0x98>)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	440b      	add	r3, r1
 8003544:	3304      	adds	r3, #4
 8003546:	601a      	str	r2, [r3, #0]
				timer[i].task_fn();
 8003548:	4a0e      	ldr	r2, [pc, #56]	@ (8003584 <Run_all_tasks+0x98>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	4413      	add	r3, r2
 8003550:	3308      	adds	r3, #8
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4798      	blx	r3
				if(timer[i].one_time_execute==1){
 8003556:	4a0b      	ldr	r2, [pc, #44]	@ (8003584 <Run_all_tasks+0x98>)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	4413      	add	r3, r2
 800355e:	330d      	adds	r3, #13
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d102      	bne.n	800356c <Run_all_tasks+0x80>
					Remove_task(i);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f810 	bl	800358c <Remove_task>
	for(int i=0; i<max_tasks; i++){
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3301      	adds	r3, #1
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b09      	cmp	r3, #9
 8003576:	ddbf      	ble.n	80034f8 <Run_all_tasks+0xc>
				}
			}
		}
	}
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000384 	.word	0x20000384
 8003588:	2000037c 	.word	0x2000037c

0800358c <Remove_task>:

void Remove_task(int task_id){
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
	if(task_id>=0 && task_id<max_tasks){
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	db24      	blt.n	80035e4 <Remove_task+0x58>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b09      	cmp	r3, #9
 800359e:	dc21      	bgt.n	80035e4 <Remove_task+0x58>
		timer[task_id].enable = 0;
 80035a0:	4a13      	ldr	r2, [pc, #76]	@ (80035f0 <Remove_task+0x64>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	4413      	add	r3, r2
 80035a8:	330c      	adds	r3, #12
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]
		timer[task_id].last_time_ms = 0;
 80035ae:	4a10      	ldr	r2, [pc, #64]	@ (80035f0 <Remove_task+0x64>)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	4413      	add	r3, r2
 80035b6:	3304      	adds	r3, #4
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
		timer[task_id].one_time_execute = 0;
 80035bc:	4a0c      	ldr	r2, [pc, #48]	@ (80035f0 <Remove_task+0x64>)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	4413      	add	r3, r2
 80035c4:	330d      	adds	r3, #13
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
		timer[task_id].period_ms = 0;
 80035ca:	4a09      	ldr	r2, [pc, #36]	@ (80035f0 <Remove_task+0x64>)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	4413      	add	r3, r2
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
		timer[task_id].task_fn = 0;
 80035d6:	4a06      	ldr	r2, [pc, #24]	@ (80035f0 <Remove_task+0x64>)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	4413      	add	r3, r2
 80035de:	3308      	adds	r3, #8
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
	}
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20000384 	.word	0x20000384

080035f4 <uart_init>:
#include <stdio.h>
#include <stdarg.h>
#include"extern_file_declarations.h"
#define UART_PRINTF_BUFFER_SIZE 100
extern uint32_t get_APB1_freq(void) ;
STATUS uart_init(uint32_t Baud_Rate){
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	 // Enable clocks
	    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;   // GPIOA
 80035fc:	4b25      	ldr	r3, [pc, #148]	@ (8003694 <uart_init+0xa0>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	4a24      	ldr	r2, [pc, #144]	@ (8003694 <uart_init+0xa0>)
 8003602:	f043 0304 	orr.w	r3, r3, #4
 8003606:	6193      	str	r3, [r2, #24]
	    RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1
 8003608:	4b22      	ldr	r3, [pc, #136]	@ (8003694 <uart_init+0xa0>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	4a21      	ldr	r2, [pc, #132]	@ (8003694 <uart_init+0xa0>)
 800360e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003612:	6193      	str	r3, [r2, #24]
	    // PA9 = TX (AF push-pull), PA10 = RX (input floating)
	    GPIOA->CRH &= ~((0xF << (4 * 1)) | (0xF << (4 * 2))); // clear CNF/MODE for PA9, PA10
 8003614:	4b20      	ldr	r3, [pc, #128]	@ (8003698 <uart_init+0xa4>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	4a1f      	ldr	r2, [pc, #124]	@ (8003698 <uart_init+0xa4>)
 800361a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800361e:	6053      	str	r3, [r2, #4]
	    GPIOA->CRH |=  (0xB << (4 * 1)); // PA9 = AF PP, 50 MHz
 8003620:	4b1d      	ldr	r3, [pc, #116]	@ (8003698 <uart_init+0xa4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	4a1c      	ldr	r2, [pc, #112]	@ (8003698 <uart_init+0xa4>)
 8003626:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800362a:	6053      	str	r3, [r2, #4]
	    GPIOA->CRH |=  (0x4 << (4 * 2)); // PA10 = input floating
 800362c:	4b1a      	ldr	r3, [pc, #104]	@ (8003698 <uart_init+0xa4>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a19      	ldr	r2, [pc, #100]	@ (8003698 <uart_init+0xa4>)
 8003632:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003636:	6053      	str	r3, [r2, #4]
	    // Reset USART1
	    USART1->CR1 = 0;
 8003638:	4b18      	ldr	r3, [pc, #96]	@ (800369c <uart_init+0xa8>)
 800363a:	2200      	movs	r2, #0
 800363c:	60da      	str	r2, [r3, #12]
	    // Calculate baudrate divisor
	    uint32_t pclk2 = get_APB2_freq();
 800363e:	f7ff fea5 	bl	800338c <get_APB2_freq>
 8003642:	60f8      	str	r0, [r7, #12]
	    if (pclk2 == 0 || Baud_Rate == 0) {
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <uart_init+0x5c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <uart_init+0x60>
	        return RY_NOT_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e01b      	b.n	800368c <uart_init+0x98>
	    }
	    uint32_t usartdiv = (pclk2 + (Baud_Rate/2)) / Baud_Rate; // nearest
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	085a      	lsrs	r2, r3, #1
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	441a      	add	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003662:	60bb      	str	r3, [r7, #8]
	    USART1->BRR = usartdiv;
 8003664:	4a0d      	ldr	r2, [pc, #52]	@ (800369c <uart_init+0xa8>)
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	6093      	str	r3, [r2, #8]
	    // Enable USART, TX, RX
	    USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 800366a:	4b0c      	ldr	r3, [pc, #48]	@ (800369c <uart_init+0xa8>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	4a0b      	ldr	r2, [pc, #44]	@ (800369c <uart_init+0xa8>)
 8003670:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003674:	f043 030c 	orr.w	r3, r3, #12
 8003678:	60d3      	str	r3, [r2, #12]

	    // Verify configuration
	    if (!(USART1->CR1 & USART_CR1_UE)) {
 800367a:	4b08      	ldr	r3, [pc, #32]	@ (800369c <uart_init+0xa8>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <uart_init+0x96>
	        return RY_NOT_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e000      	b.n	800368c <uart_init+0x98>
	    }
	    return RY_OK;
 800368a:	2301      	movs	r3, #1
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000
 8003698:	40010800 	.word	0x40010800
 800369c:	40013800 	.word	0x40013800

080036a0 <uart_print>:
 * @brief  Send a single byte over UART1
 * @param  data: byte to send
 * @return UART_Status_t
 */
void uart_print(uint8_t data)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	71fb      	strb	r3, [r7, #7]
    // Wait until TXE (Transmit Data Register Empty)
    while (!(USART1->SR & USART_SR_TXE)) {  }
 80036aa:	bf00      	nop
 80036ac:	4b0a      	ldr	r3, [pc, #40]	@ (80036d8 <uart_print+0x38>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0f9      	beq.n	80036ac <uart_print+0xc>
    USART1->DR = data;
 80036b8:	4a07      	ldr	r2, [pc, #28]	@ (80036d8 <uart_print+0x38>)
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	6053      	str	r3, [r2, #4]
    while (!(USART1->SR & USART_SR_TC)) {  }
 80036be:	bf00      	nop
 80036c0:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <uart_print+0x38>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f9      	beq.n	80036c0 <uart_print+0x20>
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	40013800 	.word	0x40013800

080036dc <uart_print_str>:
void uart_print_str(const char *str)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
    while (*str) {
 80036e4:	e006      	b.n	80036f4 <uart_print_str+0x18>
    	uart_print(*str++);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff ffd6 	bl	80036a0 <uart_print>
    while (*str) {
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f4      	bne.n	80036e6 <uart_print_str+0xa>
    }
}
 80036fc:	bf00      	nop
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <uart_send_double>:
void uart_send_double(double value, uint8_t decimal_places)
{
 8003708:	b5b0      	push	{r4, r5, r7, lr}
 800370a:	b09c      	sub	sp, #112	@ 0x70
 800370c:	af00      	add	r7, sp, #0
 800370e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	71fb      	strb	r3, [r7, #7]
    char buf[32]; // Larger buffer for double
    int i = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // Handle negative
    if (value < 0) {
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003726:	f7fd f859 	bl	80007dc <__aeabi_dcmplt>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00d      	beq.n	800374c <uart_send_double+0x44>
        buf[i++] = '-';
 8003730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003736:	3370      	adds	r3, #112	@ 0x70
 8003738:	443b      	add	r3, r7
 800373a:	222d      	movs	r2, #45	@ 0x2d
 800373c:	f803 2c4c 	strb.w	r2, [r3, #-76]
        value = -value;
 8003740:	68bc      	ldr	r4, [r7, #8]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8003748:	e9c7 4502 	strd	r4, r5, [r7, #8]
    }

    // Integer part
    long long int_part = (long long)value;
 800374c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003750:	f7fd fbb8 	bl	8000ec4 <__aeabi_d2lz>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    double frac = value - (double)int_part;
 800375c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8003760:	f7fc ffae 	bl	80006c0 <__aeabi_l2d>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800376c:	f7fc fe1e 	bl	80003ac <__aeabi_dsub>
 8003770:	4602      	mov	r2, r0
 8003772:	460b      	mov	r3, r1
 8003774:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58

    // Convert integer part to string
    char int_buf[20];
    int j = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	657b      	str	r3, [r7, #84]	@ 0x54
    do {
        int_buf[j++] = '0' + (int_part % 10);
 800377c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8003780:	f04f 020a 	mov.w	r2, #10
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	f7fd fb4c 	bl	8000e24 <__aeabi_ldivmod>
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003790:	1c59      	adds	r1, r3, #1
 8003792:	6579      	str	r1, [r7, #84]	@ 0x54
 8003794:	3230      	adds	r2, #48	@ 0x30
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	3370      	adds	r3, #112	@ 0x70
 800379a:	443b      	add	r3, r7
 800379c:	f803 2c60 	strb.w	r2, [r3, #-96]
        int_part /= 10;
 80037a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80037a4:	f04f 020a 	mov.w	r2, #10
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	f7fd fb3a 	bl	8000e24 <__aeabi_ldivmod>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    } while (int_part > 0);
 80037b8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80037bc:	2a01      	cmp	r2, #1
 80037be:	f173 0300 	sbcs.w	r3, r3, #0
 80037c2:	dadb      	bge.n	800377c <uart_send_double+0x74>

    // Reverse digits into buf
    for (int k = j - 1; k >= 0; k--) {
 80037c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c6:	3b01      	subs	r3, #1
 80037c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80037ca:	e00e      	b.n	80037ea <uart_send_double+0xe2>
        buf[i++] = int_buf[k];
 80037cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037d2:	f107 0110 	add.w	r1, r7, #16
 80037d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80037d8:	440a      	add	r2, r1
 80037da:	7812      	ldrb	r2, [r2, #0]
 80037dc:	3370      	adds	r3, #112	@ 0x70
 80037de:	443b      	add	r3, r7
 80037e0:	f803 2c4c 	strb.w	r2, [r3, #-76]
    for (int k = j - 1; k >= 0; k--) {
 80037e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037e6:	3b01      	subs	r3, #1
 80037e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80037ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	daed      	bge.n	80037cc <uart_send_double+0xc4>
    }

    buf[i++] = '.'; // decimal point
 80037f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037f6:	3370      	adds	r3, #112	@ 0x70
 80037f8:	443b      	add	r3, r7
 80037fa:	222e      	movs	r2, #46	@ 0x2e
 80037fc:	f803 2c4c 	strb.w	r2, [r3, #-76]

    // Fractional part
    for (int k = 0; k < decimal_places; k++) {
 8003800:	2300      	movs	r3, #0
 8003802:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003804:	e02b      	b.n	800385e <uart_send_double+0x156>
        frac *= 10;
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	4b22      	ldr	r3, [pc, #136]	@ (8003894 <uart_send_double+0x18c>)
 800380c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8003810:	f7fc fc9e 	bl	8000150 <__aeabi_dmul>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
        int digit = (int)frac;
 800381c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8003820:	f7fd f804 	bl	800082c <__aeabi_d2iz>
 8003824:	4603      	mov	r3, r0
 8003826:	647b      	str	r3, [r7, #68]	@ 0x44
        buf[i++] = '0' + digit;
 8003828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800382a:	b2da      	uxtb	r2, r3
 800382c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800382e:	1c59      	adds	r1, r3, #1
 8003830:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8003832:	3230      	adds	r2, #48	@ 0x30
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	3370      	adds	r3, #112	@ 0x70
 8003838:	443b      	add	r3, r7
 800383a:	f803 2c4c 	strb.w	r2, [r3, #-76]
        frac -= digit;
 800383e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8003840:	f7fc ff02 	bl	8000648 <__aeabi_i2d>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800384c:	f7fc fdae 	bl	80003ac <__aeabi_dsub>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (int k = 0; k < decimal_places; k++) {
 8003858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800385a:	3301      	adds	r3, #1
 800385c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003862:	429a      	cmp	r2, r3
 8003864:	dbcf      	blt.n	8003806 <uart_send_double+0xfe>
    }

    // Send string over UART
    for (int k = 0; k < i; k++) {
 8003866:	2300      	movs	r3, #0
 8003868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800386a:	e00a      	b.n	8003882 <uart_send_double+0x17a>
    	uart_print(buf[k]);
 800386c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003872:	4413      	add	r3, r2
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff ff12 	bl	80036a0 <uart_print>
    for (int k = 0; k < i; k++) {
 800387c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800387e:	3301      	adds	r3, #1
 8003880:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003882:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003884:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003886:	429a      	cmp	r2, r3
 8003888:	dbf0      	blt.n	800386c <uart_send_double+0x164>
    }
}
 800388a:	bf00      	nop
 800388c:	bf00      	nop
 800388e:	3770      	adds	r7, #112	@ 0x70
 8003890:	46bd      	mov	sp, r7
 8003892:	bdb0      	pop	{r4, r5, r7, pc}
 8003894:	40240000 	.word	0x40240000

08003898 <uart_send>:
void uart_send(const char *buf, size_t len) {
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < len; ++i) {
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e00f      	b.n	80038c8 <uart_send+0x30>
        // Wait until TXE (transmit data register empty)
        while (!(USART1->SR & (1U << 7))) { /* busy wait */ } // TXE bit
 80038a8:	bf00      	nop
 80038aa:	4b10      	ldr	r3, [pc, #64]	@ (80038ec <uart_send+0x54>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0f9      	beq.n	80038aa <uart_send+0x12>
        // Write data (DR is 8-bit)
        USART1->DR = (uint8_t)buf[i];
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4413      	add	r3, r2
 80038bc:	781a      	ldrb	r2, [r3, #0]
 80038be:	4b0b      	ldr	r3, [pc, #44]	@ (80038ec <uart_send+0x54>)
 80038c0:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < len; ++i) {
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3301      	adds	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d3eb      	bcc.n	80038a8 <uart_send+0x10>
    }
    // Optionally wait for TC (transmission complete) if you need to ensure fully shifted out:
    while (!(USART1->SR & (1U << 6))) { /* wait TC */ } // TC bit
 80038d0:	bf00      	nop
 80038d2:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <uart_send+0x54>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f9      	beq.n	80038d2 <uart_send+0x3a>
}
 80038de:	bf00      	nop
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40013800 	.word	0x40013800

080038f0 <uart_printf>:
void uart_printf(const char *format, ...)
{
 80038f0:	b40f      	push	{r0, r1, r2, r3}
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b0c2      	sub	sp, #264	@ 0x108
 80038f6:	af00      	add	r7, sp, #0
    char buf[256];
    va_list ap;
    va_start(ap, format);
 80038f8:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80038fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003900:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003904:	601a      	str	r2, [r3, #0]
    int n = vsnprintf(buf, sizeof(buf), format, ap);
 8003906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800390a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800390e:	1d38      	adds	r0, r7, #4
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003916:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800391a:	f002 faaf 	bl	8005e7c <vsniprintf>
 800391e:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    va_end(ap);
    if (n > 0) {
 8003922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003926:	2b00      	cmp	r3, #0
 8003928:	dd0f      	ble.n	800394a <uart_printf+0x5a>
        // truncate if too long
        if ((size_t)n > sizeof(buf)) n = sizeof(buf);
 800392a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800392e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003932:	d903      	bls.n	800393c <uart_printf+0x4c>
 8003934:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003938:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        uart_send(buf, (size_t)n);
 800393c:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ffa7 	bl	8003898 <uart_send>
    }
}
 800394a:	bf00      	nop
 800394c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8003950:	46bd      	mov	sp, r7
 8003952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003956:	b004      	add	sp, #16
 8003958:	4770      	bx	lr
	...

0800395c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800395c:	f7ff fd3c 	bl	80033d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003960:	480b      	ldr	r0, [pc, #44]	@ (8003990 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003962:	490c      	ldr	r1, [pc, #48]	@ (8003994 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003964:	4a0c      	ldr	r2, [pc, #48]	@ (8003998 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003968:	e002      	b.n	8003970 <LoopCopyDataInit>

0800396a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800396a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800396c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800396e:	3304      	adds	r3, #4

08003970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003974:	d3f9      	bcc.n	800396a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003976:	4a09      	ldr	r2, [pc, #36]	@ (800399c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003978:	4c09      	ldr	r4, [pc, #36]	@ (80039a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800397a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800397c:	e001      	b.n	8003982 <LoopFillZerobss>

0800397e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800397e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003980:	3204      	adds	r2, #4

08003982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003984:	d3fb      	bcc.n	800397e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003986:	f002 fa8d 	bl	8005ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800398a:	f7ff fa17 	bl	8002dbc <main>
  bx lr
 800398e:	4770      	bx	lr
  ldr r0, =_sdata
 8003990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003994:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8003998:	08006cec 	.word	0x08006cec
  ldr r2, =_sbss
 800399c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80039a0:	20000570 	.word	0x20000570

080039a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039a4:	e7fe      	b.n	80039a4 <ADC1_2_IRQHandler>
	...

080039a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039ac:	4b08      	ldr	r3, [pc, #32]	@ (80039d0 <HAL_Init+0x28>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a07      	ldr	r2, [pc, #28]	@ (80039d0 <HAL_Init+0x28>)
 80039b2:	f043 0310 	orr.w	r3, r3, #16
 80039b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b8:	2003      	movs	r0, #3
 80039ba:	f000 f919 	bl	8003bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039be:	200f      	movs	r0, #15
 80039c0:	f000 f808 	bl	80039d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039c4:	f7ff fad0 	bl	8002f68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40022000 	.word	0x40022000

080039d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039dc:	4b12      	ldr	r3, [pc, #72]	@ (8003a28 <HAL_InitTick+0x54>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4b12      	ldr	r3, [pc, #72]	@ (8003a2c <HAL_InitTick+0x58>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	4619      	mov	r1, r3
 80039e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 f931 	bl	8003c5a <HAL_SYSTICK_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e00e      	b.n	8003a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2b0f      	cmp	r3, #15
 8003a06:	d80a      	bhi.n	8003a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a08:	2200      	movs	r2, #0
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a10:	f000 f8f9 	bl	8003c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a14:	4a06      	ldr	r2, [pc, #24]	@ (8003a30 <HAL_InitTick+0x5c>)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e000      	b.n	8003a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	20000008 	.word	0x20000008
 8003a30:	20000004 	.word	0x20000004

08003a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a38:	4b05      	ldr	r3, [pc, #20]	@ (8003a50 <HAL_IncTick+0x1c>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4b05      	ldr	r3, [pc, #20]	@ (8003a54 <HAL_IncTick+0x20>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4413      	add	r3, r2
 8003a44:	4a03      	ldr	r2, [pc, #12]	@ (8003a54 <HAL_IncTick+0x20>)
 8003a46:	6013      	str	r3, [r2, #0]
}
 8003a48:	bf00      	nop
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr
 8003a50:	20000008 	.word	0x20000008
 8003a54:	20000424 	.word	0x20000424

08003a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a68:	4b0c      	ldr	r3, [pc, #48]	@ (8003a9c <__NVIC_SetPriorityGrouping+0x44>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a74:	4013      	ands	r3, r2
 8003a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a8a:	4a04      	ldr	r2, [pc, #16]	@ (8003a9c <__NVIC_SetPriorityGrouping+0x44>)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	60d3      	str	r3, [r2, #12]
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	e000ed00 	.word	0xe000ed00

08003aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aa4:	4b04      	ldr	r3, [pc, #16]	@ (8003ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	0a1b      	lsrs	r3, r3, #8
 8003aaa:	f003 0307 	and.w	r3, r3, #7
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	e000ed00 	.word	0xe000ed00

08003abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	db0b      	blt.n	8003ae6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	f003 021f 	and.w	r2, r3, #31
 8003ad4:	4906      	ldr	r1, [pc, #24]	@ (8003af0 <__NVIC_EnableIRQ+0x34>)
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	2001      	movs	r0, #1
 8003ade:	fa00 f202 	lsl.w	r2, r0, r2
 8003ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr
 8003af0:	e000e100 	.word	0xe000e100

08003af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	db0a      	blt.n	8003b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	490c      	ldr	r1, [pc, #48]	@ (8003b40 <__NVIC_SetPriority+0x4c>)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	0112      	lsls	r2, r2, #4
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	440b      	add	r3, r1
 8003b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b1c:	e00a      	b.n	8003b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4908      	ldr	r1, [pc, #32]	@ (8003b44 <__NVIC_SetPriority+0x50>)
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	3b04      	subs	r3, #4
 8003b2c:	0112      	lsls	r2, r2, #4
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	440b      	add	r3, r1
 8003b32:	761a      	strb	r2, [r3, #24]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	e000e100 	.word	0xe000e100
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	@ 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f1c3 0307 	rsb	r3, r3, #7
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	bf28      	it	cs
 8003b66:	2304      	movcs	r3, #4
 8003b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	2b06      	cmp	r3, #6
 8003b70:	d902      	bls.n	8003b78 <NVIC_EncodePriority+0x30>
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3b03      	subs	r3, #3
 8003b76:	e000      	b.n	8003b7a <NVIC_EncodePriority+0x32>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43da      	mvns	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b90:	f04f 31ff 	mov.w	r1, #4294967295
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9a:	43d9      	mvns	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba0:	4313      	orrs	r3, r2
         );
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3724      	adds	r7, #36	@ 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bbc:	d301      	bcc.n	8003bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e00f      	b.n	8003be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bec <SysTick_Config+0x40>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bca:	210f      	movs	r1, #15
 8003bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd0:	f7ff ff90 	bl	8003af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bd4:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <SysTick_Config+0x40>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bda:	4b04      	ldr	r3, [pc, #16]	@ (8003bec <SysTick_Config+0x40>)
 8003bdc:	2207      	movs	r2, #7
 8003bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	e000e010 	.word	0xe000e010

08003bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff ff2d 	bl	8003a58 <__NVIC_SetPriorityGrouping>
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c18:	f7ff ff42 	bl	8003aa0 <__NVIC_GetPriorityGrouping>
 8003c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	6978      	ldr	r0, [r7, #20]
 8003c24:	f7ff ff90 	bl	8003b48 <NVIC_EncodePriority>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff ff5f 	bl	8003af4 <__NVIC_SetPriority>
}
 8003c36:	bf00      	nop
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4603      	mov	r3, r0
 8003c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff ff35 	bl	8003abc <__NVIC_EnableIRQ>
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ffa2 	bl	8003bac <SysTick_Config>
 8003c68:	4603      	mov	r3, r0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d005      	beq.n	8003c98 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2204      	movs	r2, #4
 8003c90:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
 8003c96:	e051      	b.n	8003d3c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 020e 	bic.w	r2, r2, #14
 8003ca6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0201 	bic.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a22      	ldr	r2, [pc, #136]	@ (8003d48 <HAL_DMA_Abort_IT+0xd4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d029      	beq.n	8003d16 <HAL_DMA_Abort_IT+0xa2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a21      	ldr	r2, [pc, #132]	@ (8003d4c <HAL_DMA_Abort_IT+0xd8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d022      	beq.n	8003d12 <HAL_DMA_Abort_IT+0x9e>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d50 <HAL_DMA_Abort_IT+0xdc>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d01a      	beq.n	8003d0c <HAL_DMA_Abort_IT+0x98>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a1e      	ldr	r2, [pc, #120]	@ (8003d54 <HAL_DMA_Abort_IT+0xe0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d012      	beq.n	8003d06 <HAL_DMA_Abort_IT+0x92>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d58 <HAL_DMA_Abort_IT+0xe4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00a      	beq.n	8003d00 <HAL_DMA_Abort_IT+0x8c>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1b      	ldr	r2, [pc, #108]	@ (8003d5c <HAL_DMA_Abort_IT+0xe8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d102      	bne.n	8003cfa <HAL_DMA_Abort_IT+0x86>
 8003cf4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003cf8:	e00e      	b.n	8003d18 <HAL_DMA_Abort_IT+0xa4>
 8003cfa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cfe:	e00b      	b.n	8003d18 <HAL_DMA_Abort_IT+0xa4>
 8003d00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d04:	e008      	b.n	8003d18 <HAL_DMA_Abort_IT+0xa4>
 8003d06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d0a:	e005      	b.n	8003d18 <HAL_DMA_Abort_IT+0xa4>
 8003d0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d10:	e002      	b.n	8003d18 <HAL_DMA_Abort_IT+0xa4>
 8003d12:	2310      	movs	r3, #16
 8003d14:	e000      	b.n	8003d18 <HAL_DMA_Abort_IT+0xa4>
 8003d16:	2301      	movs	r3, #1
 8003d18:	4a11      	ldr	r2, [pc, #68]	@ (8003d60 <HAL_DMA_Abort_IT+0xec>)
 8003d1a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	4798      	blx	r3
    } 
  }
  return status;
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40020008 	.word	0x40020008
 8003d4c:	4002001c 	.word	0x4002001c
 8003d50:	40020030 	.word	0x40020030
 8003d54:	40020044 	.word	0x40020044
 8003d58:	40020058 	.word	0x40020058
 8003d5c:	4002006c 	.word	0x4002006c
 8003d60:	40020000 	.word	0x40020000

08003d64 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003d72:	b2db      	uxtb	r3, r3
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
	...

08003d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b08b      	sub	sp, #44	@ 0x2c
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d92:	e169      	b.n	8004068 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d94:	2201      	movs	r2, #1
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	f040 8158 	bne.w	8004062 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4a9a      	ldr	r2, [pc, #616]	@ (8004020 <HAL_GPIO_Init+0x2a0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d05e      	beq.n	8003e7a <HAL_GPIO_Init+0xfa>
 8003dbc:	4a98      	ldr	r2, [pc, #608]	@ (8004020 <HAL_GPIO_Init+0x2a0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d875      	bhi.n	8003eae <HAL_GPIO_Init+0x12e>
 8003dc2:	4a98      	ldr	r2, [pc, #608]	@ (8004024 <HAL_GPIO_Init+0x2a4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d058      	beq.n	8003e7a <HAL_GPIO_Init+0xfa>
 8003dc8:	4a96      	ldr	r2, [pc, #600]	@ (8004024 <HAL_GPIO_Init+0x2a4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d86f      	bhi.n	8003eae <HAL_GPIO_Init+0x12e>
 8003dce:	4a96      	ldr	r2, [pc, #600]	@ (8004028 <HAL_GPIO_Init+0x2a8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d052      	beq.n	8003e7a <HAL_GPIO_Init+0xfa>
 8003dd4:	4a94      	ldr	r2, [pc, #592]	@ (8004028 <HAL_GPIO_Init+0x2a8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d869      	bhi.n	8003eae <HAL_GPIO_Init+0x12e>
 8003dda:	4a94      	ldr	r2, [pc, #592]	@ (800402c <HAL_GPIO_Init+0x2ac>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d04c      	beq.n	8003e7a <HAL_GPIO_Init+0xfa>
 8003de0:	4a92      	ldr	r2, [pc, #584]	@ (800402c <HAL_GPIO_Init+0x2ac>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d863      	bhi.n	8003eae <HAL_GPIO_Init+0x12e>
 8003de6:	4a92      	ldr	r2, [pc, #584]	@ (8004030 <HAL_GPIO_Init+0x2b0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d046      	beq.n	8003e7a <HAL_GPIO_Init+0xfa>
 8003dec:	4a90      	ldr	r2, [pc, #576]	@ (8004030 <HAL_GPIO_Init+0x2b0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d85d      	bhi.n	8003eae <HAL_GPIO_Init+0x12e>
 8003df2:	2b12      	cmp	r3, #18
 8003df4:	d82a      	bhi.n	8003e4c <HAL_GPIO_Init+0xcc>
 8003df6:	2b12      	cmp	r3, #18
 8003df8:	d859      	bhi.n	8003eae <HAL_GPIO_Init+0x12e>
 8003dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8003e00 <HAL_GPIO_Init+0x80>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e7b 	.word	0x08003e7b
 8003e04:	08003e55 	.word	0x08003e55
 8003e08:	08003e67 	.word	0x08003e67
 8003e0c:	08003ea9 	.word	0x08003ea9
 8003e10:	08003eaf 	.word	0x08003eaf
 8003e14:	08003eaf 	.word	0x08003eaf
 8003e18:	08003eaf 	.word	0x08003eaf
 8003e1c:	08003eaf 	.word	0x08003eaf
 8003e20:	08003eaf 	.word	0x08003eaf
 8003e24:	08003eaf 	.word	0x08003eaf
 8003e28:	08003eaf 	.word	0x08003eaf
 8003e2c:	08003eaf 	.word	0x08003eaf
 8003e30:	08003eaf 	.word	0x08003eaf
 8003e34:	08003eaf 	.word	0x08003eaf
 8003e38:	08003eaf 	.word	0x08003eaf
 8003e3c:	08003eaf 	.word	0x08003eaf
 8003e40:	08003eaf 	.word	0x08003eaf
 8003e44:	08003e5d 	.word	0x08003e5d
 8003e48:	08003e71 	.word	0x08003e71
 8003e4c:	4a79      	ldr	r2, [pc, #484]	@ (8004034 <HAL_GPIO_Init+0x2b4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e52:	e02c      	b.n	8003eae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	623b      	str	r3, [r7, #32]
          break;
 8003e5a:	e029      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	3304      	adds	r3, #4
 8003e62:	623b      	str	r3, [r7, #32]
          break;
 8003e64:	e024      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	623b      	str	r3, [r7, #32]
          break;
 8003e6e:	e01f      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	330c      	adds	r3, #12
 8003e76:	623b      	str	r3, [r7, #32]
          break;
 8003e78:	e01a      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e82:	2304      	movs	r3, #4
 8003e84:	623b      	str	r3, [r7, #32]
          break;
 8003e86:	e013      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d105      	bne.n	8003e9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e90:	2308      	movs	r3, #8
 8003e92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	611a      	str	r2, [r3, #16]
          break;
 8003e9a:	e009      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	615a      	str	r2, [r3, #20]
          break;
 8003ea6:	e003      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	623b      	str	r3, [r7, #32]
          break;
 8003eac:	e000      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
          break;
 8003eae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2bff      	cmp	r3, #255	@ 0xff
 8003eb4:	d801      	bhi.n	8003eba <HAL_GPIO_Init+0x13a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	e001      	b.n	8003ebe <HAL_GPIO_Init+0x13e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2bff      	cmp	r3, #255	@ 0xff
 8003ec4:	d802      	bhi.n	8003ecc <HAL_GPIO_Init+0x14c>
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	e002      	b.n	8003ed2 <HAL_GPIO_Init+0x152>
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ece:	3b08      	subs	r3, #8
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	210f      	movs	r1, #15
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	6a39      	ldr	r1, [r7, #32]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eec:	431a      	orrs	r2, r3
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 80b1 	beq.w	8004062 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f00:	4b4d      	ldr	r3, [pc, #308]	@ (8004038 <HAL_GPIO_Init+0x2b8>)
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	4a4c      	ldr	r2, [pc, #304]	@ (8004038 <HAL_GPIO_Init+0x2b8>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6193      	str	r3, [r2, #24]
 8003f0c:	4b4a      	ldr	r3, [pc, #296]	@ (8004038 <HAL_GPIO_Init+0x2b8>)
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f18:	4a48      	ldr	r2, [pc, #288]	@ (800403c <HAL_GPIO_Init+0x2bc>)
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	3302      	adds	r3, #2
 8003f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	220f      	movs	r2, #15
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a40      	ldr	r2, [pc, #256]	@ (8004040 <HAL_GPIO_Init+0x2c0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d013      	beq.n	8003f6c <HAL_GPIO_Init+0x1ec>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a3f      	ldr	r2, [pc, #252]	@ (8004044 <HAL_GPIO_Init+0x2c4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00d      	beq.n	8003f68 <HAL_GPIO_Init+0x1e8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a3e      	ldr	r2, [pc, #248]	@ (8004048 <HAL_GPIO_Init+0x2c8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d007      	beq.n	8003f64 <HAL_GPIO_Init+0x1e4>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a3d      	ldr	r2, [pc, #244]	@ (800404c <HAL_GPIO_Init+0x2cc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d101      	bne.n	8003f60 <HAL_GPIO_Init+0x1e0>
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e006      	b.n	8003f6e <HAL_GPIO_Init+0x1ee>
 8003f60:	2304      	movs	r3, #4
 8003f62:	e004      	b.n	8003f6e <HAL_GPIO_Init+0x1ee>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e002      	b.n	8003f6e <HAL_GPIO_Init+0x1ee>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_GPIO_Init+0x1ee>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f70:	f002 0203 	and.w	r2, r2, #3
 8003f74:	0092      	lsls	r2, r2, #2
 8003f76:	4093      	lsls	r3, r2
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f7e:	492f      	ldr	r1, [pc, #188]	@ (800403c <HAL_GPIO_Init+0x2bc>)
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	089b      	lsrs	r3, r3, #2
 8003f84:	3302      	adds	r3, #2
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d006      	beq.n	8003fa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f98:	4b2d      	ldr	r3, [pc, #180]	@ (8004050 <HAL_GPIO_Init+0x2d0>)
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	492c      	ldr	r1, [pc, #176]	@ (8004050 <HAL_GPIO_Init+0x2d0>)
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	608b      	str	r3, [r1, #8]
 8003fa4:	e006      	b.n	8003fb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	43db      	mvns	r3, r3
 8003fae:	4928      	ldr	r1, [pc, #160]	@ (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d006      	beq.n	8003fce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003fc0:	4b23      	ldr	r3, [pc, #140]	@ (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	4922      	ldr	r1, [pc, #136]	@ (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60cb      	str	r3, [r1, #12]
 8003fcc:	e006      	b.n	8003fdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003fce:	4b20      	ldr	r3, [pc, #128]	@ (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	491e      	ldr	r1, [pc, #120]	@ (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d006      	beq.n	8003ff6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003fe8:	4b19      	ldr	r3, [pc, #100]	@ (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	4918      	ldr	r1, [pc, #96]	@ (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	604b      	str	r3, [r1, #4]
 8003ff4:	e006      	b.n	8004004 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ff6:	4b16      	ldr	r3, [pc, #88]	@ (8004050 <HAL_GPIO_Init+0x2d0>)
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	4914      	ldr	r1, [pc, #80]	@ (8004050 <HAL_GPIO_Init+0x2d0>)
 8004000:	4013      	ands	r3, r2
 8004002:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d021      	beq.n	8004054 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004010:	4b0f      	ldr	r3, [pc, #60]	@ (8004050 <HAL_GPIO_Init+0x2d0>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	490e      	ldr	r1, [pc, #56]	@ (8004050 <HAL_GPIO_Init+0x2d0>)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	4313      	orrs	r3, r2
 800401a:	600b      	str	r3, [r1, #0]
 800401c:	e021      	b.n	8004062 <HAL_GPIO_Init+0x2e2>
 800401e:	bf00      	nop
 8004020:	10320000 	.word	0x10320000
 8004024:	10310000 	.word	0x10310000
 8004028:	10220000 	.word	0x10220000
 800402c:	10210000 	.word	0x10210000
 8004030:	10120000 	.word	0x10120000
 8004034:	10110000 	.word	0x10110000
 8004038:	40021000 	.word	0x40021000
 800403c:	40010000 	.word	0x40010000
 8004040:	40010800 	.word	0x40010800
 8004044:	40010c00 	.word	0x40010c00
 8004048:	40011000 	.word	0x40011000
 800404c:	40011400 	.word	0x40011400
 8004050:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004054:	4b0b      	ldr	r3, [pc, #44]	@ (8004084 <HAL_GPIO_Init+0x304>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	43db      	mvns	r3, r3
 800405c:	4909      	ldr	r1, [pc, #36]	@ (8004084 <HAL_GPIO_Init+0x304>)
 800405e:	4013      	ands	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	3301      	adds	r3, #1
 8004066:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	f47f ae8e 	bne.w	8003d94 <HAL_GPIO_Init+0x14>
  }
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	372c      	adds	r7, #44	@ 0x2c
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr
 8004084:	40010400 	.word	0x40010400

08004088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e12b      	b.n	80042f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fe ff8c 	bl	8002fcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2224      	movs	r2, #36	@ 0x24
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040ec:	f001 fe84 	bl	8005df8 <HAL_RCC_GetPCLK1Freq>
 80040f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4a81      	ldr	r2, [pc, #516]	@ (80042fc <HAL_I2C_Init+0x274>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d807      	bhi.n	800410c <HAL_I2C_Init+0x84>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4a80      	ldr	r2, [pc, #512]	@ (8004300 <HAL_I2C_Init+0x278>)
 8004100:	4293      	cmp	r3, r2
 8004102:	bf94      	ite	ls
 8004104:	2301      	movls	r3, #1
 8004106:	2300      	movhi	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	e006      	b.n	800411a <HAL_I2C_Init+0x92>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4a7d      	ldr	r2, [pc, #500]	@ (8004304 <HAL_I2C_Init+0x27c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	bf94      	ite	ls
 8004114:	2301      	movls	r3, #1
 8004116:	2300      	movhi	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e0e7      	b.n	80042f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4a78      	ldr	r2, [pc, #480]	@ (8004308 <HAL_I2C_Init+0x280>)
 8004126:	fba2 2303 	umull	r2, r3, r2, r3
 800412a:	0c9b      	lsrs	r3, r3, #18
 800412c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	4a6a      	ldr	r2, [pc, #424]	@ (80042fc <HAL_I2C_Init+0x274>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d802      	bhi.n	800415c <HAL_I2C_Init+0xd4>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	3301      	adds	r3, #1
 800415a:	e009      	b.n	8004170 <HAL_I2C_Init+0xe8>
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004162:	fb02 f303 	mul.w	r3, r2, r3
 8004166:	4a69      	ldr	r2, [pc, #420]	@ (800430c <HAL_I2C_Init+0x284>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	099b      	lsrs	r3, r3, #6
 800416e:	3301      	adds	r3, #1
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	430b      	orrs	r3, r1
 8004176:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004182:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	495c      	ldr	r1, [pc, #368]	@ (80042fc <HAL_I2C_Init+0x274>)
 800418c:	428b      	cmp	r3, r1
 800418e:	d819      	bhi.n	80041c4 <HAL_I2C_Init+0x13c>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1e59      	subs	r1, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	fbb1 f3f3 	udiv	r3, r1, r3
 800419e:	1c59      	adds	r1, r3, #1
 80041a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80041a4:	400b      	ands	r3, r1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_I2C_Init+0x138>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1e59      	subs	r1, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80041b8:	3301      	adds	r3, #1
 80041ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041be:	e051      	b.n	8004264 <HAL_I2C_Init+0x1dc>
 80041c0:	2304      	movs	r3, #4
 80041c2:	e04f      	b.n	8004264 <HAL_I2C_Init+0x1dc>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d111      	bne.n	80041f0 <HAL_I2C_Init+0x168>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	1e58      	subs	r0, r3, #1
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6859      	ldr	r1, [r3, #4]
 80041d4:	460b      	mov	r3, r1
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	440b      	add	r3, r1
 80041da:	fbb0 f3f3 	udiv	r3, r0, r3
 80041de:	3301      	adds	r3, #1
 80041e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	e012      	b.n	8004216 <HAL_I2C_Init+0x18e>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1e58      	subs	r0, r3, #1
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6859      	ldr	r1, [r3, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	0099      	lsls	r1, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	fbb0 f3f3 	udiv	r3, r0, r3
 8004206:	3301      	adds	r3, #1
 8004208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800420c:	2b00      	cmp	r3, #0
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_I2C_Init+0x196>
 800421a:	2301      	movs	r3, #1
 800421c:	e022      	b.n	8004264 <HAL_I2C_Init+0x1dc>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10e      	bne.n	8004244 <HAL_I2C_Init+0x1bc>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	1e58      	subs	r0, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6859      	ldr	r1, [r3, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	440b      	add	r3, r1
 8004234:	fbb0 f3f3 	udiv	r3, r0, r3
 8004238:	3301      	adds	r3, #1
 800423a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004242:	e00f      	b.n	8004264 <HAL_I2C_Init+0x1dc>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	1e58      	subs	r0, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6859      	ldr	r1, [r3, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	0099      	lsls	r1, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	fbb0 f3f3 	udiv	r3, r0, r3
 800425a:	3301      	adds	r3, #1
 800425c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004260:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	6809      	ldr	r1, [r1, #0]
 8004268:	4313      	orrs	r3, r2
 800426a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69da      	ldr	r2, [r3, #28]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004292:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6911      	ldr	r1, [r2, #16]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68d2      	ldr	r2, [r2, #12]
 800429e:	4311      	orrs	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	000186a0 	.word	0x000186a0
 8004300:	001e847f 	.word	0x001e847f
 8004304:	003d08ff 	.word	0x003d08ff
 8004308:	431bde83 	.word	0x431bde83
 800430c:	10624dd3 	.word	0x10624dd3

08004310 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004322:	2b80      	cmp	r3, #128	@ 0x80
 8004324:	d103      	bne.n	800432e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2200      	movs	r2, #0
 800432c:	611a      	str	r2, [r3, #16]
  }
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	4613      	mov	r3, r2
 8004344:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b20      	cmp	r3, #32
 8004350:	d158      	bne.n	8004404 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <HAL_I2C_Slave_Receive_IT+0x26>
 8004358:	88fb      	ldrh	r3, [r7, #6]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e051      	b.n	8004406 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <HAL_I2C_Slave_Receive_IT+0x38>
 800436c:	2302      	movs	r3, #2
 800436e:	e04a      	b.n	8004406 <HAL_I2C_Slave_Receive_IT+0xce>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b01      	cmp	r3, #1
 8004384:	d007      	beq.n	8004396 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0201 	orr.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043a4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2222      	movs	r2, #34	@ 0x22
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2220      	movs	r2, #32
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	88fa      	ldrh	r2, [r7, #6]
 80043c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4a0e      	ldr	r2, [pc, #56]	@ (8004410 <HAL_I2C_Slave_Receive_IT+0xd8>)
 80043d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043e6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80043fe:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	e000      	b.n	8004406 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8004404:	2302      	movs	r3, #2
  }
}
 8004406:	4618      	mov	r0, r3
 8004408:	3714      	adds	r7, #20
 800440a:	46bd      	mov	sp, r7
 800440c:	bc80      	pop	{r7}
 800440e:	4770      	bx	lr
 8004410:	ffff0000 	.word	0xffff0000

08004414 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b088      	sub	sp, #32
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004434:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800443c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	2b10      	cmp	r3, #16
 8004442:	d003      	beq.n	800444c <HAL_I2C_EV_IRQHandler+0x38>
 8004444:	7bfb      	ldrb	r3, [r7, #15]
 8004446:	2b40      	cmp	r3, #64	@ 0x40
 8004448:	f040 80c1 	bne.w	80045ce <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10d      	bne.n	8004482 <HAL_I2C_EV_IRQHandler+0x6e>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800446c:	d003      	beq.n	8004476 <HAL_I2C_EV_IRQHandler+0x62>
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004474:	d101      	bne.n	800447a <HAL_I2C_EV_IRQHandler+0x66>
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <HAL_I2C_EV_IRQHandler+0x68>
 800447a:	2300      	movs	r3, #0
 800447c:	2b01      	cmp	r3, #1
 800447e:	f000 8132 	beq.w	80046e6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00c      	beq.n	80044a6 <HAL_I2C_EV_IRQHandler+0x92>
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	0a5b      	lsrs	r3, r3, #9
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d006      	beq.n	80044a6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f001 fc89 	bl	8005db0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fd87 	bl	8004fb2 <I2C_Master_SB>
 80044a4:	e092      	b.n	80045cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	08db      	lsrs	r3, r3, #3
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_I2C_EV_IRQHandler+0xb2>
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	0a5b      	lsrs	r3, r3, #9
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fdfc 	bl	80050bc <I2C_Master_ADD10>
 80044c4:	e082      	b.n	80045cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	085b      	lsrs	r3, r3, #1
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <HAL_I2C_EV_IRQHandler+0xd2>
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	0a5b      	lsrs	r3, r3, #9
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fe15 	bl	800510e <I2C_Master_ADDR>
 80044e4:	e072      	b.n	80045cc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	089b      	lsrs	r3, r3, #2
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d03b      	beq.n	800456a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004500:	f000 80f3 	beq.w	80046ea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	09db      	lsrs	r3, r3, #7
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00f      	beq.n	8004530 <HAL_I2C_EV_IRQHandler+0x11c>
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	0a9b      	lsrs	r3, r3, #10
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d009      	beq.n	8004530 <HAL_I2C_EV_IRQHandler+0x11c>
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	089b      	lsrs	r3, r3, #2
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d103      	bne.n	8004530 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f9df 	bl	80048ec <I2C_MasterTransmit_TXE>
 800452e:	e04d      	b.n	80045cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	089b      	lsrs	r3, r3, #2
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80d6 	beq.w	80046ea <HAL_I2C_EV_IRQHandler+0x2d6>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	0a5b      	lsrs	r3, r3, #9
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 80cf 	beq.w	80046ea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800454c:	7bbb      	ldrb	r3, [r7, #14]
 800454e:	2b21      	cmp	r3, #33	@ 0x21
 8004550:	d103      	bne.n	800455a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fa66 	bl	8004a24 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004558:	e0c7      	b.n	80046ea <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	2b40      	cmp	r3, #64	@ 0x40
 800455e:	f040 80c4 	bne.w	80046ea <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fad4 	bl	8004b10 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004568:	e0bf      	b.n	80046ea <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004574:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004578:	f000 80b7 	beq.w	80046ea <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	099b      	lsrs	r3, r3, #6
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00f      	beq.n	80045a8 <HAL_I2C_EV_IRQHandler+0x194>
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	0a9b      	lsrs	r3, r3, #10
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d009      	beq.n	80045a8 <HAL_I2C_EV_IRQHandler+0x194>
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	089b      	lsrs	r3, r3, #2
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d103      	bne.n	80045a8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 fb4d 	bl	8004c40 <I2C_MasterReceive_RXNE>
 80045a6:	e011      	b.n	80045cc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	089b      	lsrs	r3, r3, #2
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 809a 	beq.w	80046ea <HAL_I2C_EV_IRQHandler+0x2d6>
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	0a5b      	lsrs	r3, r3, #9
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 8093 	beq.w	80046ea <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fc03 	bl	8004dd0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ca:	e08e      	b.n	80046ea <HAL_I2C_EV_IRQHandler+0x2d6>
 80045cc:	e08d      	b.n	80046ea <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d004      	beq.n	80045e0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	61fb      	str	r3, [r7, #28]
 80045de:	e007      	b.n	80045f0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	085b      	lsrs	r3, r3, #1
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d012      	beq.n	8004622 <HAL_I2C_EV_IRQHandler+0x20e>
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	0a5b      	lsrs	r3, r3, #9
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00c      	beq.n	8004622 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004618:	69b9      	ldr	r1, [r7, #24]
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 ffce 	bl	80055bc <I2C_Slave_ADDR>
 8004620:	e066      	b.n	80046f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_I2C_EV_IRQHandler+0x22e>
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	0a5b      	lsrs	r3, r3, #9
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f001 f808 	bl	8005650 <I2C_Slave_STOPF>
 8004640:	e056      	b.n	80046f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004642:	7bbb      	ldrb	r3, [r7, #14]
 8004644:	2b21      	cmp	r3, #33	@ 0x21
 8004646:	d002      	beq.n	800464e <HAL_I2C_EV_IRQHandler+0x23a>
 8004648:	7bbb      	ldrb	r3, [r7, #14]
 800464a:	2b29      	cmp	r3, #41	@ 0x29
 800464c:	d125      	bne.n	800469a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	09db      	lsrs	r3, r3, #7
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00f      	beq.n	800467a <HAL_I2C_EV_IRQHandler+0x266>
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	0a9b      	lsrs	r3, r3, #10
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <HAL_I2C_EV_IRQHandler+0x266>
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	089b      	lsrs	r3, r3, #2
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d103      	bne.n	800467a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fee6 	bl	8005444 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004678:	e039      	b.n	80046ee <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	089b      	lsrs	r3, r3, #2
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d033      	beq.n	80046ee <HAL_I2C_EV_IRQHandler+0x2da>
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	0a5b      	lsrs	r3, r3, #9
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d02d      	beq.n	80046ee <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 ff13 	bl	80054be <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004698:	e029      	b.n	80046ee <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	099b      	lsrs	r3, r3, #6
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00f      	beq.n	80046c6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	0a9b      	lsrs	r3, r3, #10
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	089b      	lsrs	r3, r3, #2
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 ff1d 	bl	80054fe <I2C_SlaveReceive_RXNE>
 80046c4:	e014      	b.n	80046f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00e      	beq.n	80046f0 <HAL_I2C_EV_IRQHandler+0x2dc>
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	0a5b      	lsrs	r3, r3, #9
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d008      	beq.n	80046f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 ff4b 	bl	800557a <I2C_SlaveReceive_BTF>
 80046e4:	e004      	b.n	80046f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80046e6:	bf00      	nop
 80046e8:	e002      	b.n	80046f0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ea:	bf00      	nop
 80046ec:	e000      	b.n	80046f0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046ee:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b08a      	sub	sp, #40	@ 0x28
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800470e:	2300      	movs	r3, #0
 8004710:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004718:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800471a:	6a3b      	ldr	r3, [r7, #32]
 800471c:	0a1b      	lsrs	r3, r3, #8
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d016      	beq.n	8004754 <HAL_I2C_ER_IRQHandler+0x5e>
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	0a1b      	lsrs	r3, r3, #8
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d010      	beq.n	8004754 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004742:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004752:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	0a5b      	lsrs	r3, r3, #9
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00e      	beq.n	800477e <HAL_I2C_ER_IRQHandler+0x88>
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	0a1b      	lsrs	r3, r3, #8
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	f043 0302 	orr.w	r3, r3, #2
 8004772:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 800477c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	0a9b      	lsrs	r3, r3, #10
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d03f      	beq.n	800480a <HAL_I2C_ER_IRQHandler+0x114>
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d039      	beq.n	800480a <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8004796:	7efb      	ldrb	r3, [r7, #27]
 8004798:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ae:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80047b0:	7ebb      	ldrb	r3, [r7, #26]
 80047b2:	2b20      	cmp	r3, #32
 80047b4:	d112      	bne.n	80047dc <HAL_I2C_ER_IRQHandler+0xe6>
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10f      	bne.n	80047dc <HAL_I2C_ER_IRQHandler+0xe6>
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	2b21      	cmp	r3, #33	@ 0x21
 80047c0:	d008      	beq.n	80047d4 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80047c2:	7cfb      	ldrb	r3, [r7, #19]
 80047c4:	2b29      	cmp	r3, #41	@ 0x29
 80047c6:	d005      	beq.n	80047d4 <HAL_I2C_ER_IRQHandler+0xde>
 80047c8:	7cfb      	ldrb	r3, [r7, #19]
 80047ca:	2b28      	cmp	r3, #40	@ 0x28
 80047cc:	d106      	bne.n	80047dc <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b21      	cmp	r3, #33	@ 0x21
 80047d2:	d103      	bne.n	80047dc <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f001 f86b 	bl	80058b0 <I2C_Slave_AF>
 80047da:	e016      	b.n	800480a <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047e4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	f043 0304 	orr.w	r3, r3, #4
 80047ec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047ee:	7efb      	ldrb	r3, [r7, #27]
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d002      	beq.n	80047fa <HAL_I2C_ER_IRQHandler+0x104>
 80047f4:	7efb      	ldrb	r3, [r7, #27]
 80047f6:	2b40      	cmp	r3, #64	@ 0x40
 80047f8:	d107      	bne.n	800480a <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004808:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	0adb      	lsrs	r3, r3, #11
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00e      	beq.n	8004834 <HAL_I2C_ER_IRQHandler+0x13e>
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	0a1b      	lsrs	r3, r3, #8
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d008      	beq.n	8004834 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	f043 0308 	orr.w	r3, r3, #8
 8004828:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004832:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f001 f8a6 	bl	8005998 <I2C_ITError>
  }
}
 800484c:	bf00      	nop
 800484e:	3728      	adds	r7, #40	@ 0x28
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	bc80      	pop	{r7}
 8004864:	4770      	bx	lr

08004866 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	bc80      	pop	{r7}
 8004888:	4770      	bx	lr

0800488a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	460b      	mov	r3, r1
 8004894:	70fb      	strb	r3, [r7, #3]
 8004896:	4613      	mov	r3, r2
 8004898:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr

080048b6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bc80      	pop	{r7}
 80048c6:	4770      	bx	lr

080048c8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bc80      	pop	{r7}
 80048d8:	4770      	bx	lr

080048da <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr

080048ec <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004902:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004908:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800490e:	2b00      	cmp	r3, #0
 8004910:	d150      	bne.n	80049b4 <I2C_MasterTransmit_TXE+0xc8>
 8004912:	7bfb      	ldrb	r3, [r7, #15]
 8004914:	2b21      	cmp	r3, #33	@ 0x21
 8004916:	d14d      	bne.n	80049b4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b08      	cmp	r3, #8
 800491c:	d01d      	beq.n	800495a <I2C_MasterTransmit_TXE+0x6e>
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b20      	cmp	r3, #32
 8004922:	d01a      	beq.n	800495a <I2C_MasterTransmit_TXE+0x6e>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800492a:	d016      	beq.n	800495a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800493a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2211      	movs	r2, #17
 8004940:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff ff7e 	bl	8004854 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004958:	e060      	b.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004968:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004978:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b40      	cmp	r3, #64	@ 0x40
 8004992:	d107      	bne.n	80049a4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff ff8a 	bl	80048b6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049a2:	e03b      	b.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff ff51 	bl	8004854 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049b2:	e033      	b.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	2b21      	cmp	r3, #33	@ 0x21
 80049b8:	d005      	beq.n	80049c6 <I2C_MasterTransmit_TXE+0xda>
 80049ba:	7bbb      	ldrb	r3, [r7, #14]
 80049bc:	2b40      	cmp	r3, #64	@ 0x40
 80049be:	d12d      	bne.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b22      	cmp	r3, #34	@ 0x22
 80049c4:	d12a      	bne.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d108      	bne.n	80049e2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049de:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80049e0:	e01c      	b.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b40      	cmp	r3, #64	@ 0x40
 80049ec:	d103      	bne.n	80049f6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f88e 	bl	8004b10 <I2C_MemoryTransmit_TXE_BTF>
}
 80049f4:	e012      	b.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fa:	781a      	ldrb	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004a1a:	e7ff      	b.n	8004a1c <I2C_MasterTransmit_TXE+0x130>
 8004a1c:	bf00      	nop
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b21      	cmp	r3, #33	@ 0x21
 8004a3c:	d164      	bne.n	8004b08 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d012      	beq.n	8004a6e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	781a      	ldrb	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004a6c:	e04c      	b.n	8004b08 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d01d      	beq.n	8004ab0 <I2C_MasterTransmit_BTF+0x8c>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b20      	cmp	r3, #32
 8004a78:	d01a      	beq.n	8004ab0 <I2C_MasterTransmit_BTF+0x8c>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a80:	d016      	beq.n	8004ab0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a90:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2211      	movs	r2, #17
 8004a96:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fed3 	bl	8004854 <HAL_I2C_MasterTxCpltCallback>
}
 8004aae:	e02b      	b.n	8004b08 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004abe:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ace:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b40      	cmp	r3, #64	@ 0x40
 8004ae8:	d107      	bne.n	8004afa <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fedf 	bl	80048b6 <HAL_I2C_MemTxCpltCallback>
}
 8004af8:	e006      	b.n	8004b08 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff fea6 	bl	8004854 <HAL_I2C_MasterTxCpltCallback>
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d11d      	bne.n	8004b64 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d10b      	bne.n	8004b48 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b40:	1c9a      	adds	r2, r3, #2
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004b46:	e077      	b.n	8004c38 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	121b      	asrs	r3, r3, #8
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b62:	e069      	b.n	8004c38 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d10b      	bne.n	8004b84 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b82:	e059      	b.n	8004c38 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d152      	bne.n	8004c32 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b22      	cmp	r3, #34	@ 0x22
 8004b90:	d10d      	bne.n	8004bae <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ba0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bac:	e044      	b.n	8004c38 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d015      	beq.n	8004be4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b21      	cmp	r3, #33	@ 0x21
 8004bbc:	d112      	bne.n	8004be4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc2:	781a      	ldrb	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004be2:	e029      	b.n	8004c38 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d124      	bne.n	8004c38 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b21      	cmp	r3, #33	@ 0x21
 8004bf2:	d121      	bne.n	8004c38 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c02:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c12:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff fe43 	bl	80048b6 <HAL_I2C_MemTxCpltCallback>
}
 8004c30:	e002      	b.n	8004c38 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff fb6c 	bl	8004310 <I2C_Flush_DR>
}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b22      	cmp	r3, #34	@ 0x22
 8004c52:	f040 80b9 	bne.w	8004dc8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d921      	bls.n	8004cae <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	b2d2      	uxtb	r2, r2
 8004c76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7c:	1c5a      	adds	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	2b03      	cmp	r3, #3
 8004c98:	f040 8096 	bne.w	8004dc8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004caa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004cac:	e08c      	b.n	8004dc8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d07f      	beq.n	8004db6 <I2C_MasterReceive_RXNE+0x176>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d002      	beq.n	8004cc2 <I2C_MasterReceive_RXNE+0x82>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d179      	bne.n	8004db6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f001 f842 	bl	8005d4c <I2C_WaitOnSTOPRequestThroughIT>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d14c      	bne.n	8004d68 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cdc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691a      	ldr	r2, [r3, #16]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d00:	1c5a      	adds	r2, r3, #1
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	b29a      	uxth	r2, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2220      	movs	r2, #32
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b40      	cmp	r3, #64	@ 0x40
 8004d26:	d10a      	bne.n	8004d3e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7ff fdc6 	bl	80048c8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d3c:	e044      	b.n	8004dc8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d002      	beq.n	8004d52 <I2C_MasterReceive_RXNE+0x112>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b20      	cmp	r3, #32
 8004d50:	d103      	bne.n	8004d5a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d58:	e002      	b.n	8004d60 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2212      	movs	r2, #18
 8004d5e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff fd80 	bl	8004866 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d66:	e02f      	b.n	8004dc8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d76:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	b2d2      	uxtb	r2, r2
 8004d84:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fc fad0 	bl	8001354 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004db4:	e008      	b.n	8004dc8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dc4:	605a      	str	r2, [r3, #4]
}
 8004dc6:	e7ff      	b.n	8004dc8 <I2C_MasterReceive_RXNE+0x188>
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ddc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d11b      	bne.n	8004e20 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004df6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e02:	b2d2      	uxtb	r2, r2
 8004e04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3b01      	subs	r3, #1
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e1e:	e0c4      	b.n	8004faa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d129      	bne.n	8004e7e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e38:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d00a      	beq.n	8004e56 <I2C_MasterReceive_BTF+0x86>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d007      	beq.n	8004e56 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e54:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	1c5a      	adds	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004e7c:	e095      	b.n	8004faa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d17d      	bne.n	8004f84 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d002      	beq.n	8004e94 <I2C_MasterReceive_BTF+0xc4>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d108      	bne.n	8004ea6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	e016      	b.n	8004ed4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d002      	beq.n	8004eb2 <I2C_MasterReceive_BTF+0xe2>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d108      	bne.n	8004ec4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e007      	b.n	8004ed4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ed2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691a      	ldr	r2, [r3, #16]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0c:	1c5a      	adds	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f2e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b40      	cmp	r3, #64	@ 0x40
 8004f42:	d10a      	bne.n	8004f5a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7ff fcb8 	bl	80048c8 <HAL_I2C_MemRxCpltCallback>
}
 8004f58:	e027      	b.n	8004faa <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d002      	beq.n	8004f6e <I2C_MasterReceive_BTF+0x19e>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b20      	cmp	r3, #32
 8004f6c:	d103      	bne.n	8004f76 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f74:	e002      	b.n	8004f7c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2212      	movs	r2, #18
 8004f7a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f7ff fc72 	bl	8004866 <HAL_I2C_MasterRxCpltCallback>
}
 8004f82:	e012      	b.n	8004faa <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	691a      	ldr	r2, [r3, #16]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004faa:	bf00      	nop
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b40      	cmp	r3, #64	@ 0x40
 8004fc4:	d117      	bne.n	8004ff6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fde:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004fe0:	e067      	b.n	80050b2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	611a      	str	r2, [r3, #16]
}
 8004ff4:	e05d      	b.n	80050b2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ffe:	d133      	bne.n	8005068 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b21      	cmp	r3, #33	@ 0x21
 800500a:	d109      	bne.n	8005020 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005010:	b2db      	uxtb	r3, r3
 8005012:	461a      	mov	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800501c:	611a      	str	r2, [r3, #16]
 800501e:	e008      	b.n	8005032 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005024:	b2db      	uxtb	r3, r3
 8005026:	f043 0301 	orr.w	r3, r3, #1
 800502a:	b2da      	uxtb	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <I2C_Master_SB+0x92>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800503e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005040:	2b00      	cmp	r3, #0
 8005042:	d108      	bne.n	8005056 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	2b00      	cmp	r3, #0
 800504a:	d032      	beq.n	80050b2 <I2C_Master_SB+0x100>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005052:	2b00      	cmp	r3, #0
 8005054:	d02d      	beq.n	80050b2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005064:	605a      	str	r2, [r3, #4]
}
 8005066:	e024      	b.n	80050b2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10e      	bne.n	800508e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005074:	b29b      	uxth	r3, r3
 8005076:	11db      	asrs	r3, r3, #7
 8005078:	b2db      	uxtb	r3, r3
 800507a:	f003 0306 	and.w	r3, r3, #6
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f063 030f 	orn	r3, r3, #15
 8005084:	b2da      	uxtb	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	611a      	str	r2, [r3, #16]
}
 800508c:	e011      	b.n	80050b2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005092:	2b01      	cmp	r3, #1
 8005094:	d10d      	bne.n	80050b2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509a:	b29b      	uxth	r3, r3
 800509c:	11db      	asrs	r3, r3, #7
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f003 0306 	and.w	r3, r3, #6
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	f063 030e 	orn	r3, r3, #14
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	611a      	str	r2, [r3, #16]
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr

080050bc <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d004      	beq.n	80050e2 <I2C_Master_ADD10+0x26>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d108      	bne.n	80050f4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00c      	beq.n	8005104 <I2C_Master_ADD10+0x48>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005102:	605a      	str	r2, [r3, #4]
  }
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr

0800510e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800510e:	b480      	push	{r7}
 8005110:	b091      	sub	sp, #68	@ 0x44
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800511c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b22      	cmp	r3, #34	@ 0x22
 8005136:	f040 8174 	bne.w	8005422 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10f      	bne.n	8005162 <I2C_Master_ADDR+0x54>
 8005142:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005146:	2b40      	cmp	r3, #64	@ 0x40
 8005148:	d10b      	bne.n	8005162 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514a:	2300      	movs	r3, #0
 800514c:	633b      	str	r3, [r7, #48]	@ 0x30
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	633b      	str	r3, [r7, #48]	@ 0x30
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	633b      	str	r3, [r7, #48]	@ 0x30
 800515e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005160:	e16b      	b.n	800543a <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005166:	2b00      	cmp	r3, #0
 8005168:	d11d      	bne.n	80051a6 <I2C_Master_ADDR+0x98>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005172:	d118      	bne.n	80051a6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005174:	2300      	movs	r3, #0
 8005176:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005198:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80051a4:	e149      	b.n	800543a <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d113      	bne.n	80051d8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b0:	2300      	movs	r3, #0
 80051b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	e120      	b.n	800541a <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b01      	cmp	r3, #1
 80051e0:	f040 808a 	bne.w	80052f8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80051e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051ea:	d137      	bne.n	800525c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051fa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800520a:	d113      	bne.n	8005234 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800521a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800521c:	2300      	movs	r3, #0
 800521e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	e0f2      	b.n	800541a <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005234:	2300      	movs	r3, #0
 8005236:	623b      	str	r3, [r7, #32]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	623b      	str	r3, [r7, #32]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	699b      	ldr	r3, [r3, #24]
 8005246:	623b      	str	r3, [r7, #32]
 8005248:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	e0de      	b.n	800541a <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800525c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525e:	2b08      	cmp	r3, #8
 8005260:	d02e      	beq.n	80052c0 <I2C_Master_ADDR+0x1b2>
 8005262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005264:	2b20      	cmp	r3, #32
 8005266:	d02b      	beq.n	80052c0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800526a:	2b12      	cmp	r3, #18
 800526c:	d102      	bne.n	8005274 <I2C_Master_ADDR+0x166>
 800526e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005270:	2b01      	cmp	r3, #1
 8005272:	d125      	bne.n	80052c0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005276:	2b04      	cmp	r3, #4
 8005278:	d00e      	beq.n	8005298 <I2C_Master_ADDR+0x18a>
 800527a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527c:	2b02      	cmp	r3, #2
 800527e:	d00b      	beq.n	8005298 <I2C_Master_ADDR+0x18a>
 8005280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005282:	2b10      	cmp	r3, #16
 8005284:	d008      	beq.n	8005298 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	e007      	b.n	80052a8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052a6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052a8:	2300      	movs	r3, #0
 80052aa:	61fb      	str	r3, [r7, #28]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	61fb      	str	r3, [r7, #28]
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	e0ac      	b.n	800541a <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052ce:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d0:	2300      	movs	r3, #0
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	61bb      	str	r3, [r7, #24]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	e090      	b.n	800541a <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d158      	bne.n	80053b4 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005304:	2b04      	cmp	r3, #4
 8005306:	d021      	beq.n	800534c <I2C_Master_ADDR+0x23e>
 8005308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530a:	2b02      	cmp	r3, #2
 800530c:	d01e      	beq.n	800534c <I2C_Master_ADDR+0x23e>
 800530e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005310:	2b10      	cmp	r3, #16
 8005312:	d01b      	beq.n	800534c <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005322:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e012      	b.n	8005372 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800535a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800535c:	2300      	movs	r3, #0
 800535e:	613b      	str	r3, [r7, #16]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800537c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005380:	d14b      	bne.n	800541a <I2C_Master_ADDR+0x30c>
 8005382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005384:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005388:	d00b      	beq.n	80053a2 <I2C_Master_ADDR+0x294>
 800538a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538c:	2b01      	cmp	r3, #1
 800538e:	d008      	beq.n	80053a2 <I2C_Master_ADDR+0x294>
 8005390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005392:	2b08      	cmp	r3, #8
 8005394:	d005      	beq.n	80053a2 <I2C_Master_ADDR+0x294>
 8005396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005398:	2b10      	cmp	r3, #16
 800539a:	d002      	beq.n	80053a2 <I2C_Master_ADDR+0x294>
 800539c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539e:	2b20      	cmp	r3, #32
 80053a0:	d13b      	bne.n	800541a <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053b0:	605a      	str	r2, [r3, #4]
 80053b2:	e032      	b.n	800541a <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053c2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053d2:	d117      	bne.n	8005404 <I2C_Master_ADDR+0x2f6>
 80053d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053da:	d00b      	beq.n	80053f4 <I2C_Master_ADDR+0x2e6>
 80053dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d008      	beq.n	80053f4 <I2C_Master_ADDR+0x2e6>
 80053e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d005      	beq.n	80053f4 <I2C_Master_ADDR+0x2e6>
 80053e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ea:	2b10      	cmp	r3, #16
 80053ec:	d002      	beq.n	80053f4 <I2C_Master_ADDR+0x2e6>
 80053ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d107      	bne.n	8005404 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005402:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005420:	e00b      	b.n	800543a <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005422:	2300      	movs	r3, #0
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	60bb      	str	r3, [r7, #8]
 8005436:	68bb      	ldr	r3, [r7, #8]
}
 8005438:	e7ff      	b.n	800543a <I2C_Master_ADDR+0x32c>
 800543a:	bf00      	nop
 800543c:	3744      	adds	r7, #68	@ 0x44
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr

08005444 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005452:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d02b      	beq.n	80054b6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	781a      	ldrb	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005478:	b29b      	uxth	r3, r3
 800547a:	3b01      	subs	r3, #1
 800547c:	b29a      	uxth	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d114      	bne.n	80054b6 <I2C_SlaveTransmit_TXE+0x72>
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	2b29      	cmp	r3, #41	@ 0x29
 8005490:	d111      	bne.n	80054b6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2221      	movs	r2, #33	@ 0x21
 80054a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2228      	movs	r2, #40	@ 0x28
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7ff f9e1 	bl	8004878 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80054b6:	bf00      	nop
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d011      	beq.n	80054f4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d4:	781a      	ldrb	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr

080054fe <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800550c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d02c      	beq.n	8005572 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005534:	b29b      	uxth	r3, r3
 8005536:	3b01      	subs	r3, #1
 8005538:	b29a      	uxth	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d114      	bne.n	8005572 <I2C_SlaveReceive_RXNE+0x74>
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b2a      	cmp	r3, #42	@ 0x2a
 800554c:	d111      	bne.n	8005572 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800555c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2222      	movs	r2, #34	@ 0x22
 8005562:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2228      	movs	r2, #40	@ 0x28
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f7fb fedb 	bl	8001328 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	d012      	beq.n	80055b2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691a      	ldr	r2, [r3, #16]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559e:	1c5a      	adds	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr

080055bc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80055d6:	2b28      	cmp	r3, #40	@ 0x28
 80055d8:	d127      	bne.n	800562a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055e8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	089b      	lsrs	r3, r3, #2
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80055f6:	2301      	movs	r3, #1
 80055f8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	09db      	lsrs	r3, r3, #7
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d103      	bne.n	800560e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	81bb      	strh	r3, [r7, #12]
 800560c:	e002      	b.n	8005614 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800561c:	89ba      	ldrh	r2, [r7, #12]
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	4619      	mov	r1, r3
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff f931 	bl	800488a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005628:	e00e      	b.n	8005648 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800562a:	2300      	movs	r3, #0
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	60bb      	str	r3, [r7, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	699b      	ldr	r3, [r3, #24]
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005648:	bf00      	nop
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800565e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800566e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005670:	2300      	movs	r3, #0
 8005672:	60bb      	str	r3, [r7, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	60bb      	str	r3, [r7, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800569c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056ac:	d172      	bne.n	8005794 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
 80056b0:	2b22      	cmp	r3, #34	@ 0x22
 80056b2:	d002      	beq.n	80056ba <I2C_Slave_STOPF+0x6a>
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80056b8:	d135      	bne.n	8005726 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d6:	f043 0204 	orr.w	r2, r3, #4
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fe fb36 	bl	8003d64 <HAL_DMA_GetState>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d049      	beq.n	8005792 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005702:	4a69      	ldr	r2, [pc, #420]	@ (80058a8 <I2C_Slave_STOPF+0x258>)
 8005704:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570a:	4618      	mov	r0, r3
 800570c:	f7fe fab2 	bl	8003c74 <HAL_DMA_Abort_IT>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d03d      	beq.n	8005792 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005720:	4610      	mov	r0, r2
 8005722:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005724:	e035      	b.n	8005792 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	b29a      	uxth	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005738:	b29b      	uxth	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d005      	beq.n	800574a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005742:	f043 0204 	orr.w	r2, r3, #4
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005758:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe fb00 	bl	8003d64 <HAL_DMA_GetState>
 8005764:	4603      	mov	r3, r0
 8005766:	2b01      	cmp	r3, #1
 8005768:	d014      	beq.n	8005794 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800576e:	4a4e      	ldr	r2, [pc, #312]	@ (80058a8 <I2C_Slave_STOPF+0x258>)
 8005770:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe fa7c 	bl	8003c74 <HAL_DMA_Abort_IT>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800578c:	4610      	mov	r0, r2
 800578e:	4798      	blx	r3
 8005790:	e000      	b.n	8005794 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005792:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d03e      	beq.n	800581c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d112      	bne.n	80057d2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691a      	ldr	r2, [r3, #16]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057be:	1c5a      	adds	r2, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057dc:	2b40      	cmp	r3, #64	@ 0x40
 80057de:	d112      	bne.n	8005806 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005814:	f043 0204 	orr.w	r2, r3, #4
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d003      	beq.n	800582c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f8b7 	bl	8005998 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800582a:	e039      	b.n	80058a0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005830:	d109      	bne.n	8005846 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2228      	movs	r2, #40	@ 0x28
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7fb fd71 	bl	8001328 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b28      	cmp	r3, #40	@ 0x28
 8005850:	d111      	bne.n	8005876 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a15      	ldr	r2, [pc, #84]	@ (80058ac <I2C_Slave_STOPF+0x25c>)
 8005856:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff f818 	bl	80048a4 <HAL_I2C_ListenCpltCallback>
}
 8005874:	e014      	b.n	80058a0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	2b22      	cmp	r3, #34	@ 0x22
 800587c:	d002      	beq.n	8005884 <I2C_Slave_STOPF+0x234>
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	2b22      	cmp	r3, #34	@ 0x22
 8005882:	d10d      	bne.n	80058a0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2220      	movs	r2, #32
 800588e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fb fd44 	bl	8001328 <HAL_I2C_SlaveRxCpltCallback>
}
 80058a0:	bf00      	nop
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	08005bfd 	.word	0x08005bfd
 80058ac:	ffff0000 	.word	0xffff0000

080058b0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058be:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d002      	beq.n	80058d2 <I2C_Slave_AF+0x22>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	d129      	bne.n	8005926 <I2C_Slave_AF+0x76>
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	2b28      	cmp	r3, #40	@ 0x28
 80058d6:	d126      	bne.n	8005926 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a2e      	ldr	r2, [pc, #184]	@ (8005994 <I2C_Slave_AF+0xe4>)
 80058dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058ec:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058f6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005906:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f7fe ffc0 	bl	80048a4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005924:	e031      	b.n	800598a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	2b21      	cmp	r3, #33	@ 0x21
 800592a:	d129      	bne.n	8005980 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a19      	ldr	r2, [pc, #100]	@ (8005994 <I2C_Slave_AF+0xe4>)
 8005930:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2221      	movs	r2, #33	@ 0x21
 8005936:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005956:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005960:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005970:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f7fe fccc 	bl	8004310 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7fe ff7d 	bl	8004878 <HAL_I2C_SlaveTxCpltCallback>
}
 800597e:	e004      	b.n	800598a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005988:	615a      	str	r2, [r3, #20]
}
 800598a:	bf00      	nop
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	ffff0000 	.word	0xffff0000

08005998 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059b0:	7bbb      	ldrb	r3, [r7, #14]
 80059b2:	2b10      	cmp	r3, #16
 80059b4:	d002      	beq.n	80059bc <I2C_ITError+0x24>
 80059b6:	7bbb      	ldrb	r3, [r7, #14]
 80059b8:	2b40      	cmp	r3, #64	@ 0x40
 80059ba:	d10a      	bne.n	80059d2 <I2C_ITError+0x3a>
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	2b22      	cmp	r3, #34	@ 0x22
 80059c0:	d107      	bne.n	80059d2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059d0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059d2:	7bfb      	ldrb	r3, [r7, #15]
 80059d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80059d8:	2b28      	cmp	r3, #40	@ 0x28
 80059da:	d107      	bne.n	80059ec <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2228      	movs	r2, #40	@ 0x28
 80059e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80059ea:	e015      	b.n	8005a18 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059fa:	d00a      	beq.n	8005a12 <I2C_ITError+0x7a>
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	2b60      	cmp	r3, #96	@ 0x60
 8005a00:	d007      	beq.n	8005a12 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a26:	d162      	bne.n	8005aee <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a36:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a3c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d020      	beq.n	8005a88 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a4a:	4a6a      	ldr	r2, [pc, #424]	@ (8005bf4 <I2C_ITError+0x25c>)
 8005a4c:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe f90e 	bl	8003c74 <HAL_DMA_Abort_IT>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 8089 	beq.w	8005b72 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0201 	bic.w	r2, r2, #1
 8005a6e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005a82:	4610      	mov	r0, r2
 8005a84:	4798      	blx	r3
 8005a86:	e074      	b.n	8005b72 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8c:	4a59      	ldr	r2, [pc, #356]	@ (8005bf4 <I2C_ITError+0x25c>)
 8005a8e:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fe f8ed 	bl	8003c74 <HAL_DMA_Abort_IT>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d068      	beq.n	8005b72 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aaa:	2b40      	cmp	r3, #64	@ 0x40
 8005aac:	d10b      	bne.n	8005ac6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	691a      	ldr	r2, [r3, #16]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab8:	b2d2      	uxtb	r2, r2
 8005aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0201 	bic.w	r2, r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ae8:	4610      	mov	r0, r2
 8005aea:	4798      	blx	r3
 8005aec:	e041      	b.n	8005b72 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b60      	cmp	r3, #96	@ 0x60
 8005af8:	d125      	bne.n	8005b46 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b12:	2b40      	cmp	r3, #64	@ 0x40
 8005b14:	d10b      	bne.n	8005b2e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	691a      	ldr	r2, [r3, #16]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0201 	bic.w	r2, r2, #1
 8005b3c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fe fecb 	bl	80048da <HAL_I2C_AbortCpltCallback>
 8005b44:	e015      	b.n	8005b72 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b50:	2b40      	cmp	r3, #64	@ 0x40
 8005b52:	d10b      	bne.n	8005b6c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7fb fbf1 	bl	8001354 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10e      	bne.n	8005ba0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d109      	bne.n	8005ba0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d104      	bne.n	8005ba0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d007      	beq.n	8005bb0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005bae:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bb6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d113      	bne.n	8005bec <I2C_ITError+0x254>
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	2b28      	cmp	r3, #40	@ 0x28
 8005bc8:	d110      	bne.n	8005bec <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8005bf8 <I2C_ITError+0x260>)
 8005bce:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fe fe5c 	bl	80048a4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	08005bfd 	.word	0x08005bfd
 8005bf8:	ffff0000 	.word	0xffff0000

08005bfc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c14:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c16:	4b4b      	ldr	r3, [pc, #300]	@ (8005d44 <I2C_DMAAbort+0x148>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	08db      	lsrs	r3, r3, #3
 8005c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8005d48 <I2C_DMAAbort+0x14c>)
 8005c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c22:	0a1a      	lsrs	r2, r3, #8
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	00da      	lsls	r2, r3, #3
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3a:	f043 0220 	orr.w	r2, r3, #32
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005c42:	e00a      	b.n	8005c5a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c58:	d0ea      	beq.n	8005c30 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c66:	2200      	movs	r2, #0
 8005c68:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c76:	2200      	movs	r2, #0
 8005c78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c88:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d003      	beq.n	8005ca0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cac:	2200      	movs	r2, #0
 8005cae:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0201 	bic.w	r2, r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b60      	cmp	r3, #96	@ 0x60
 8005cca:	d10e      	bne.n	8005cea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ce2:	6978      	ldr	r0, [r7, #20]
 8005ce4:	f7fe fdf9 	bl	80048da <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ce8:	e027      	b.n	8005d3a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cea:	7cfb      	ldrb	r3, [r7, #19]
 8005cec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005cf0:	2b28      	cmp	r3, #40	@ 0x28
 8005cf2:	d117      	bne.n	8005d24 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d12:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2200      	movs	r2, #0
 8005d18:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2228      	movs	r2, #40	@ 0x28
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005d22:	e007      	b.n	8005d34 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005d34:	6978      	ldr	r0, [r7, #20]
 8005d36:	f7fb fb0d 	bl	8001354 <HAL_I2C_ErrorCallback>
}
 8005d3a:	bf00      	nop
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20000000 	.word	0x20000000
 8005d48:	14f8b589 	.word	0x14f8b589

08005d4c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d58:	4b13      	ldr	r3, [pc, #76]	@ (8005da8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	08db      	lsrs	r3, r3, #3
 8005d5e:	4a13      	ldr	r2, [pc, #76]	@ (8005dac <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005d60:	fba2 2303 	umull	r2, r3, r2, r3
 8005d64:	0a1a      	lsrs	r2, r3, #8
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3b01      	subs	r3, #1
 8005d72:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d107      	bne.n	8005d8a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	f043 0220 	orr.w	r2, r3, #32
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e008      	b.n	8005d9c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d98:	d0e9      	beq.n	8005d6e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	20000000 	.word	0x20000000
 8005dac:	14f8b589 	.word	0x14f8b589

08005db0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005dc0:	d103      	bne.n	8005dca <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005dc8:	e007      	b.n	8005dda <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005dd2:	d102      	bne.n	8005dda <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2208      	movs	r2, #8
 8005dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr

08005de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005de8:	4b02      	ldr	r3, [pc, #8]	@ (8005df4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005dea:	681b      	ldr	r3, [r3, #0]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bc80      	pop	{r7}
 8005df2:	4770      	bx	lr
 8005df4:	20000000 	.word	0x20000000

08005df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005dfc:	f7ff fff2 	bl	8005de4 <HAL_RCC_GetHCLKFreq>
 8005e00:	4602      	mov	r2, r0
 8005e02:	4b05      	ldr	r3, [pc, #20]	@ (8005e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	0a1b      	lsrs	r3, r3, #8
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	4903      	ldr	r1, [pc, #12]	@ (8005e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e0e:	5ccb      	ldrb	r3, [r1, r3]
 8005e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40021000 	.word	0x40021000
 8005e1c:	08006ca0 	.word	0x08006ca0

08005e20 <_vsniprintf_r>:
 8005e20:	b530      	push	{r4, r5, lr}
 8005e22:	4614      	mov	r4, r2
 8005e24:	2c00      	cmp	r4, #0
 8005e26:	4605      	mov	r5, r0
 8005e28:	461a      	mov	r2, r3
 8005e2a:	b09b      	sub	sp, #108	@ 0x6c
 8005e2c:	da05      	bge.n	8005e3a <_vsniprintf_r+0x1a>
 8005e2e:	238b      	movs	r3, #139	@ 0x8b
 8005e30:	6003      	str	r3, [r0, #0]
 8005e32:	f04f 30ff 	mov.w	r0, #4294967295
 8005e36:	b01b      	add	sp, #108	@ 0x6c
 8005e38:	bd30      	pop	{r4, r5, pc}
 8005e3a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005e3e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005e42:	f04f 0300 	mov.w	r3, #0
 8005e46:	9319      	str	r3, [sp, #100]	@ 0x64
 8005e48:	bf0c      	ite	eq
 8005e4a:	4623      	moveq	r3, r4
 8005e4c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e50:	9302      	str	r3, [sp, #8]
 8005e52:	9305      	str	r3, [sp, #20]
 8005e54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e58:	9100      	str	r1, [sp, #0]
 8005e5a:	9104      	str	r1, [sp, #16]
 8005e5c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005e60:	4669      	mov	r1, sp
 8005e62:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8005e64:	f000 f996 	bl	8006194 <_svfiprintf_r>
 8005e68:	1c43      	adds	r3, r0, #1
 8005e6a:	bfbc      	itt	lt
 8005e6c:	238b      	movlt	r3, #139	@ 0x8b
 8005e6e:	602b      	strlt	r3, [r5, #0]
 8005e70:	2c00      	cmp	r4, #0
 8005e72:	d0e0      	beq.n	8005e36 <_vsniprintf_r+0x16>
 8005e74:	2200      	movs	r2, #0
 8005e76:	9b00      	ldr	r3, [sp, #0]
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	e7dc      	b.n	8005e36 <_vsniprintf_r+0x16>

08005e7c <vsniprintf>:
 8005e7c:	b507      	push	{r0, r1, r2, lr}
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	4613      	mov	r3, r2
 8005e82:	460a      	mov	r2, r1
 8005e84:	4601      	mov	r1, r0
 8005e86:	4803      	ldr	r0, [pc, #12]	@ (8005e94 <vsniprintf+0x18>)
 8005e88:	6800      	ldr	r0, [r0, #0]
 8005e8a:	f7ff ffc9 	bl	8005e20 <_vsniprintf_r>
 8005e8e:	b003      	add	sp, #12
 8005e90:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e94:	2000000c 	.word	0x2000000c

08005e98 <__errno>:
 8005e98:	4b01      	ldr	r3, [pc, #4]	@ (8005ea0 <__errno+0x8>)
 8005e9a:	6818      	ldr	r0, [r3, #0]
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	2000000c 	.word	0x2000000c

08005ea4 <__libc_init_array>:
 8005ea4:	b570      	push	{r4, r5, r6, lr}
 8005ea6:	2600      	movs	r6, #0
 8005ea8:	4d0c      	ldr	r5, [pc, #48]	@ (8005edc <__libc_init_array+0x38>)
 8005eaa:	4c0d      	ldr	r4, [pc, #52]	@ (8005ee0 <__libc_init_array+0x3c>)
 8005eac:	1b64      	subs	r4, r4, r5
 8005eae:	10a4      	asrs	r4, r4, #2
 8005eb0:	42a6      	cmp	r6, r4
 8005eb2:	d109      	bne.n	8005ec8 <__libc_init_array+0x24>
 8005eb4:	f000 fc76 	bl	80067a4 <_init>
 8005eb8:	2600      	movs	r6, #0
 8005eba:	4d0a      	ldr	r5, [pc, #40]	@ (8005ee4 <__libc_init_array+0x40>)
 8005ebc:	4c0a      	ldr	r4, [pc, #40]	@ (8005ee8 <__libc_init_array+0x44>)
 8005ebe:	1b64      	subs	r4, r4, r5
 8005ec0:	10a4      	asrs	r4, r4, #2
 8005ec2:	42a6      	cmp	r6, r4
 8005ec4:	d105      	bne.n	8005ed2 <__libc_init_array+0x2e>
 8005ec6:	bd70      	pop	{r4, r5, r6, pc}
 8005ec8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ecc:	4798      	blx	r3
 8005ece:	3601      	adds	r6, #1
 8005ed0:	e7ee      	b.n	8005eb0 <__libc_init_array+0xc>
 8005ed2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed6:	4798      	blx	r3
 8005ed8:	3601      	adds	r6, #1
 8005eda:	e7f2      	b.n	8005ec2 <__libc_init_array+0x1e>
 8005edc:	08006ce4 	.word	0x08006ce4
 8005ee0:	08006ce4 	.word	0x08006ce4
 8005ee4:	08006ce4 	.word	0x08006ce4
 8005ee8:	08006ce8 	.word	0x08006ce8

08005eec <__retarget_lock_acquire_recursive>:
 8005eec:	4770      	bx	lr

08005eee <__retarget_lock_release_recursive>:
 8005eee:	4770      	bx	lr

08005ef0 <_free_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	2900      	cmp	r1, #0
 8005ef6:	d040      	beq.n	8005f7a <_free_r+0x8a>
 8005ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005efc:	1f0c      	subs	r4, r1, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	bfb8      	it	lt
 8005f02:	18e4      	addlt	r4, r4, r3
 8005f04:	f000 f8de 	bl	80060c4 <__malloc_lock>
 8005f08:	4a1c      	ldr	r2, [pc, #112]	@ (8005f7c <_free_r+0x8c>)
 8005f0a:	6813      	ldr	r3, [r2, #0]
 8005f0c:	b933      	cbnz	r3, 8005f1c <_free_r+0x2c>
 8005f0e:	6063      	str	r3, [r4, #4]
 8005f10:	6014      	str	r4, [r2, #0]
 8005f12:	4628      	mov	r0, r5
 8005f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f18:	f000 b8da 	b.w	80060d0 <__malloc_unlock>
 8005f1c:	42a3      	cmp	r3, r4
 8005f1e:	d908      	bls.n	8005f32 <_free_r+0x42>
 8005f20:	6820      	ldr	r0, [r4, #0]
 8005f22:	1821      	adds	r1, r4, r0
 8005f24:	428b      	cmp	r3, r1
 8005f26:	bf01      	itttt	eq
 8005f28:	6819      	ldreq	r1, [r3, #0]
 8005f2a:	685b      	ldreq	r3, [r3, #4]
 8005f2c:	1809      	addeq	r1, r1, r0
 8005f2e:	6021      	streq	r1, [r4, #0]
 8005f30:	e7ed      	b.n	8005f0e <_free_r+0x1e>
 8005f32:	461a      	mov	r2, r3
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	b10b      	cbz	r3, 8005f3c <_free_r+0x4c>
 8005f38:	42a3      	cmp	r3, r4
 8005f3a:	d9fa      	bls.n	8005f32 <_free_r+0x42>
 8005f3c:	6811      	ldr	r1, [r2, #0]
 8005f3e:	1850      	adds	r0, r2, r1
 8005f40:	42a0      	cmp	r0, r4
 8005f42:	d10b      	bne.n	8005f5c <_free_r+0x6c>
 8005f44:	6820      	ldr	r0, [r4, #0]
 8005f46:	4401      	add	r1, r0
 8005f48:	1850      	adds	r0, r2, r1
 8005f4a:	4283      	cmp	r3, r0
 8005f4c:	6011      	str	r1, [r2, #0]
 8005f4e:	d1e0      	bne.n	8005f12 <_free_r+0x22>
 8005f50:	6818      	ldr	r0, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	4408      	add	r0, r1
 8005f56:	6010      	str	r0, [r2, #0]
 8005f58:	6053      	str	r3, [r2, #4]
 8005f5a:	e7da      	b.n	8005f12 <_free_r+0x22>
 8005f5c:	d902      	bls.n	8005f64 <_free_r+0x74>
 8005f5e:	230c      	movs	r3, #12
 8005f60:	602b      	str	r3, [r5, #0]
 8005f62:	e7d6      	b.n	8005f12 <_free_r+0x22>
 8005f64:	6820      	ldr	r0, [r4, #0]
 8005f66:	1821      	adds	r1, r4, r0
 8005f68:	428b      	cmp	r3, r1
 8005f6a:	bf01      	itttt	eq
 8005f6c:	6819      	ldreq	r1, [r3, #0]
 8005f6e:	685b      	ldreq	r3, [r3, #4]
 8005f70:	1809      	addeq	r1, r1, r0
 8005f72:	6021      	streq	r1, [r4, #0]
 8005f74:	6063      	str	r3, [r4, #4]
 8005f76:	6054      	str	r4, [r2, #4]
 8005f78:	e7cb      	b.n	8005f12 <_free_r+0x22>
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	2000056c 	.word	0x2000056c

08005f80 <sbrk_aligned>:
 8005f80:	b570      	push	{r4, r5, r6, lr}
 8005f82:	4e0f      	ldr	r6, [pc, #60]	@ (8005fc0 <sbrk_aligned+0x40>)
 8005f84:	460c      	mov	r4, r1
 8005f86:	6831      	ldr	r1, [r6, #0]
 8005f88:	4605      	mov	r5, r0
 8005f8a:	b911      	cbnz	r1, 8005f92 <sbrk_aligned+0x12>
 8005f8c:	f000 fba8 	bl	80066e0 <_sbrk_r>
 8005f90:	6030      	str	r0, [r6, #0]
 8005f92:	4621      	mov	r1, r4
 8005f94:	4628      	mov	r0, r5
 8005f96:	f000 fba3 	bl	80066e0 <_sbrk_r>
 8005f9a:	1c43      	adds	r3, r0, #1
 8005f9c:	d103      	bne.n	8005fa6 <sbrk_aligned+0x26>
 8005f9e:	f04f 34ff 	mov.w	r4, #4294967295
 8005fa2:	4620      	mov	r0, r4
 8005fa4:	bd70      	pop	{r4, r5, r6, pc}
 8005fa6:	1cc4      	adds	r4, r0, #3
 8005fa8:	f024 0403 	bic.w	r4, r4, #3
 8005fac:	42a0      	cmp	r0, r4
 8005fae:	d0f8      	beq.n	8005fa2 <sbrk_aligned+0x22>
 8005fb0:	1a21      	subs	r1, r4, r0
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f000 fb94 	bl	80066e0 <_sbrk_r>
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d1f2      	bne.n	8005fa2 <sbrk_aligned+0x22>
 8005fbc:	e7ef      	b.n	8005f9e <sbrk_aligned+0x1e>
 8005fbe:	bf00      	nop
 8005fc0:	20000568 	.word	0x20000568

08005fc4 <_malloc_r>:
 8005fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fc8:	1ccd      	adds	r5, r1, #3
 8005fca:	f025 0503 	bic.w	r5, r5, #3
 8005fce:	3508      	adds	r5, #8
 8005fd0:	2d0c      	cmp	r5, #12
 8005fd2:	bf38      	it	cc
 8005fd4:	250c      	movcc	r5, #12
 8005fd6:	2d00      	cmp	r5, #0
 8005fd8:	4606      	mov	r6, r0
 8005fda:	db01      	blt.n	8005fe0 <_malloc_r+0x1c>
 8005fdc:	42a9      	cmp	r1, r5
 8005fde:	d904      	bls.n	8005fea <_malloc_r+0x26>
 8005fe0:	230c      	movs	r3, #12
 8005fe2:	6033      	str	r3, [r6, #0]
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80060c0 <_malloc_r+0xfc>
 8005fee:	f000 f869 	bl	80060c4 <__malloc_lock>
 8005ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ff6:	461c      	mov	r4, r3
 8005ff8:	bb44      	cbnz	r4, 800604c <_malloc_r+0x88>
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	f7ff ffbf 	bl	8005f80 <sbrk_aligned>
 8006002:	1c43      	adds	r3, r0, #1
 8006004:	4604      	mov	r4, r0
 8006006:	d158      	bne.n	80060ba <_malloc_r+0xf6>
 8006008:	f8d8 4000 	ldr.w	r4, [r8]
 800600c:	4627      	mov	r7, r4
 800600e:	2f00      	cmp	r7, #0
 8006010:	d143      	bne.n	800609a <_malloc_r+0xd6>
 8006012:	2c00      	cmp	r4, #0
 8006014:	d04b      	beq.n	80060ae <_malloc_r+0xea>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	4639      	mov	r1, r7
 800601a:	4630      	mov	r0, r6
 800601c:	eb04 0903 	add.w	r9, r4, r3
 8006020:	f000 fb5e 	bl	80066e0 <_sbrk_r>
 8006024:	4581      	cmp	r9, r0
 8006026:	d142      	bne.n	80060ae <_malloc_r+0xea>
 8006028:	6821      	ldr	r1, [r4, #0]
 800602a:	4630      	mov	r0, r6
 800602c:	1a6d      	subs	r5, r5, r1
 800602e:	4629      	mov	r1, r5
 8006030:	f7ff ffa6 	bl	8005f80 <sbrk_aligned>
 8006034:	3001      	adds	r0, #1
 8006036:	d03a      	beq.n	80060ae <_malloc_r+0xea>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	442b      	add	r3, r5
 800603c:	6023      	str	r3, [r4, #0]
 800603e:	f8d8 3000 	ldr.w	r3, [r8]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	bb62      	cbnz	r2, 80060a0 <_malloc_r+0xdc>
 8006046:	f8c8 7000 	str.w	r7, [r8]
 800604a:	e00f      	b.n	800606c <_malloc_r+0xa8>
 800604c:	6822      	ldr	r2, [r4, #0]
 800604e:	1b52      	subs	r2, r2, r5
 8006050:	d420      	bmi.n	8006094 <_malloc_r+0xd0>
 8006052:	2a0b      	cmp	r2, #11
 8006054:	d917      	bls.n	8006086 <_malloc_r+0xc2>
 8006056:	1961      	adds	r1, r4, r5
 8006058:	42a3      	cmp	r3, r4
 800605a:	6025      	str	r5, [r4, #0]
 800605c:	bf18      	it	ne
 800605e:	6059      	strne	r1, [r3, #4]
 8006060:	6863      	ldr	r3, [r4, #4]
 8006062:	bf08      	it	eq
 8006064:	f8c8 1000 	streq.w	r1, [r8]
 8006068:	5162      	str	r2, [r4, r5]
 800606a:	604b      	str	r3, [r1, #4]
 800606c:	4630      	mov	r0, r6
 800606e:	f000 f82f 	bl	80060d0 <__malloc_unlock>
 8006072:	f104 000b 	add.w	r0, r4, #11
 8006076:	1d23      	adds	r3, r4, #4
 8006078:	f020 0007 	bic.w	r0, r0, #7
 800607c:	1ac2      	subs	r2, r0, r3
 800607e:	bf1c      	itt	ne
 8006080:	1a1b      	subne	r3, r3, r0
 8006082:	50a3      	strne	r3, [r4, r2]
 8006084:	e7af      	b.n	8005fe6 <_malloc_r+0x22>
 8006086:	6862      	ldr	r2, [r4, #4]
 8006088:	42a3      	cmp	r3, r4
 800608a:	bf0c      	ite	eq
 800608c:	f8c8 2000 	streq.w	r2, [r8]
 8006090:	605a      	strne	r2, [r3, #4]
 8006092:	e7eb      	b.n	800606c <_malloc_r+0xa8>
 8006094:	4623      	mov	r3, r4
 8006096:	6864      	ldr	r4, [r4, #4]
 8006098:	e7ae      	b.n	8005ff8 <_malloc_r+0x34>
 800609a:	463c      	mov	r4, r7
 800609c:	687f      	ldr	r7, [r7, #4]
 800609e:	e7b6      	b.n	800600e <_malloc_r+0x4a>
 80060a0:	461a      	mov	r2, r3
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	42a3      	cmp	r3, r4
 80060a6:	d1fb      	bne.n	80060a0 <_malloc_r+0xdc>
 80060a8:	2300      	movs	r3, #0
 80060aa:	6053      	str	r3, [r2, #4]
 80060ac:	e7de      	b.n	800606c <_malloc_r+0xa8>
 80060ae:	230c      	movs	r3, #12
 80060b0:	4630      	mov	r0, r6
 80060b2:	6033      	str	r3, [r6, #0]
 80060b4:	f000 f80c 	bl	80060d0 <__malloc_unlock>
 80060b8:	e794      	b.n	8005fe4 <_malloc_r+0x20>
 80060ba:	6005      	str	r5, [r0, #0]
 80060bc:	e7d6      	b.n	800606c <_malloc_r+0xa8>
 80060be:	bf00      	nop
 80060c0:	2000056c 	.word	0x2000056c

080060c4 <__malloc_lock>:
 80060c4:	4801      	ldr	r0, [pc, #4]	@ (80060cc <__malloc_lock+0x8>)
 80060c6:	f7ff bf11 	b.w	8005eec <__retarget_lock_acquire_recursive>
 80060ca:	bf00      	nop
 80060cc:	20000564 	.word	0x20000564

080060d0 <__malloc_unlock>:
 80060d0:	4801      	ldr	r0, [pc, #4]	@ (80060d8 <__malloc_unlock+0x8>)
 80060d2:	f7ff bf0c 	b.w	8005eee <__retarget_lock_release_recursive>
 80060d6:	bf00      	nop
 80060d8:	20000564 	.word	0x20000564

080060dc <__ssputs_r>:
 80060dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e0:	461f      	mov	r7, r3
 80060e2:	688e      	ldr	r6, [r1, #8]
 80060e4:	4682      	mov	sl, r0
 80060e6:	42be      	cmp	r6, r7
 80060e8:	460c      	mov	r4, r1
 80060ea:	4690      	mov	r8, r2
 80060ec:	680b      	ldr	r3, [r1, #0]
 80060ee:	d82d      	bhi.n	800614c <__ssputs_r+0x70>
 80060f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80060f8:	d026      	beq.n	8006148 <__ssputs_r+0x6c>
 80060fa:	6965      	ldr	r5, [r4, #20]
 80060fc:	6909      	ldr	r1, [r1, #16]
 80060fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006102:	eba3 0901 	sub.w	r9, r3, r1
 8006106:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800610a:	1c7b      	adds	r3, r7, #1
 800610c:	444b      	add	r3, r9
 800610e:	106d      	asrs	r5, r5, #1
 8006110:	429d      	cmp	r5, r3
 8006112:	bf38      	it	cc
 8006114:	461d      	movcc	r5, r3
 8006116:	0553      	lsls	r3, r2, #21
 8006118:	d527      	bpl.n	800616a <__ssputs_r+0x8e>
 800611a:	4629      	mov	r1, r5
 800611c:	f7ff ff52 	bl	8005fc4 <_malloc_r>
 8006120:	4606      	mov	r6, r0
 8006122:	b360      	cbz	r0, 800617e <__ssputs_r+0xa2>
 8006124:	464a      	mov	r2, r9
 8006126:	6921      	ldr	r1, [r4, #16]
 8006128:	f000 faf8 	bl	800671c <memcpy>
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006136:	81a3      	strh	r3, [r4, #12]
 8006138:	6126      	str	r6, [r4, #16]
 800613a:	444e      	add	r6, r9
 800613c:	6026      	str	r6, [r4, #0]
 800613e:	463e      	mov	r6, r7
 8006140:	6165      	str	r5, [r4, #20]
 8006142:	eba5 0509 	sub.w	r5, r5, r9
 8006146:	60a5      	str	r5, [r4, #8]
 8006148:	42be      	cmp	r6, r7
 800614a:	d900      	bls.n	800614e <__ssputs_r+0x72>
 800614c:	463e      	mov	r6, r7
 800614e:	4632      	mov	r2, r6
 8006150:	4641      	mov	r1, r8
 8006152:	6820      	ldr	r0, [r4, #0]
 8006154:	f000 faaa 	bl	80066ac <memmove>
 8006158:	2000      	movs	r0, #0
 800615a:	68a3      	ldr	r3, [r4, #8]
 800615c:	1b9b      	subs	r3, r3, r6
 800615e:	60a3      	str	r3, [r4, #8]
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	4433      	add	r3, r6
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800616a:	462a      	mov	r2, r5
 800616c:	f000 fae4 	bl	8006738 <_realloc_r>
 8006170:	4606      	mov	r6, r0
 8006172:	2800      	cmp	r0, #0
 8006174:	d1e0      	bne.n	8006138 <__ssputs_r+0x5c>
 8006176:	4650      	mov	r0, sl
 8006178:	6921      	ldr	r1, [r4, #16]
 800617a:	f7ff feb9 	bl	8005ef0 <_free_r>
 800617e:	230c      	movs	r3, #12
 8006180:	f8ca 3000 	str.w	r3, [sl]
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	f04f 30ff 	mov.w	r0, #4294967295
 800618a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	e7e9      	b.n	8006166 <__ssputs_r+0x8a>
	...

08006194 <_svfiprintf_r>:
 8006194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006198:	4698      	mov	r8, r3
 800619a:	898b      	ldrh	r3, [r1, #12]
 800619c:	4607      	mov	r7, r0
 800619e:	061b      	lsls	r3, r3, #24
 80061a0:	460d      	mov	r5, r1
 80061a2:	4614      	mov	r4, r2
 80061a4:	b09d      	sub	sp, #116	@ 0x74
 80061a6:	d510      	bpl.n	80061ca <_svfiprintf_r+0x36>
 80061a8:	690b      	ldr	r3, [r1, #16]
 80061aa:	b973      	cbnz	r3, 80061ca <_svfiprintf_r+0x36>
 80061ac:	2140      	movs	r1, #64	@ 0x40
 80061ae:	f7ff ff09 	bl	8005fc4 <_malloc_r>
 80061b2:	6028      	str	r0, [r5, #0]
 80061b4:	6128      	str	r0, [r5, #16]
 80061b6:	b930      	cbnz	r0, 80061c6 <_svfiprintf_r+0x32>
 80061b8:	230c      	movs	r3, #12
 80061ba:	603b      	str	r3, [r7, #0]
 80061bc:	f04f 30ff 	mov.w	r0, #4294967295
 80061c0:	b01d      	add	sp, #116	@ 0x74
 80061c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c6:	2340      	movs	r3, #64	@ 0x40
 80061c8:	616b      	str	r3, [r5, #20]
 80061ca:	2300      	movs	r3, #0
 80061cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80061ce:	2320      	movs	r3, #32
 80061d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80061d4:	2330      	movs	r3, #48	@ 0x30
 80061d6:	f04f 0901 	mov.w	r9, #1
 80061da:	f8cd 800c 	str.w	r8, [sp, #12]
 80061de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006378 <_svfiprintf_r+0x1e4>
 80061e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80061e6:	4623      	mov	r3, r4
 80061e8:	469a      	mov	sl, r3
 80061ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061ee:	b10a      	cbz	r2, 80061f4 <_svfiprintf_r+0x60>
 80061f0:	2a25      	cmp	r2, #37	@ 0x25
 80061f2:	d1f9      	bne.n	80061e8 <_svfiprintf_r+0x54>
 80061f4:	ebba 0b04 	subs.w	fp, sl, r4
 80061f8:	d00b      	beq.n	8006212 <_svfiprintf_r+0x7e>
 80061fa:	465b      	mov	r3, fp
 80061fc:	4622      	mov	r2, r4
 80061fe:	4629      	mov	r1, r5
 8006200:	4638      	mov	r0, r7
 8006202:	f7ff ff6b 	bl	80060dc <__ssputs_r>
 8006206:	3001      	adds	r0, #1
 8006208:	f000 80a7 	beq.w	800635a <_svfiprintf_r+0x1c6>
 800620c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800620e:	445a      	add	r2, fp
 8006210:	9209      	str	r2, [sp, #36]	@ 0x24
 8006212:	f89a 3000 	ldrb.w	r3, [sl]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f000 809f 	beq.w	800635a <_svfiprintf_r+0x1c6>
 800621c:	2300      	movs	r3, #0
 800621e:	f04f 32ff 	mov.w	r2, #4294967295
 8006222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006226:	f10a 0a01 	add.w	sl, sl, #1
 800622a:	9304      	str	r3, [sp, #16]
 800622c:	9307      	str	r3, [sp, #28]
 800622e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006232:	931a      	str	r3, [sp, #104]	@ 0x68
 8006234:	4654      	mov	r4, sl
 8006236:	2205      	movs	r2, #5
 8006238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800623c:	484e      	ldr	r0, [pc, #312]	@ (8006378 <_svfiprintf_r+0x1e4>)
 800623e:	f000 fa5f 	bl	8006700 <memchr>
 8006242:	9a04      	ldr	r2, [sp, #16]
 8006244:	b9d8      	cbnz	r0, 800627e <_svfiprintf_r+0xea>
 8006246:	06d0      	lsls	r0, r2, #27
 8006248:	bf44      	itt	mi
 800624a:	2320      	movmi	r3, #32
 800624c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006250:	0711      	lsls	r1, r2, #28
 8006252:	bf44      	itt	mi
 8006254:	232b      	movmi	r3, #43	@ 0x2b
 8006256:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800625a:	f89a 3000 	ldrb.w	r3, [sl]
 800625e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006260:	d015      	beq.n	800628e <_svfiprintf_r+0xfa>
 8006262:	4654      	mov	r4, sl
 8006264:	2000      	movs	r0, #0
 8006266:	f04f 0c0a 	mov.w	ip, #10
 800626a:	9a07      	ldr	r2, [sp, #28]
 800626c:	4621      	mov	r1, r4
 800626e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006272:	3b30      	subs	r3, #48	@ 0x30
 8006274:	2b09      	cmp	r3, #9
 8006276:	d94b      	bls.n	8006310 <_svfiprintf_r+0x17c>
 8006278:	b1b0      	cbz	r0, 80062a8 <_svfiprintf_r+0x114>
 800627a:	9207      	str	r2, [sp, #28]
 800627c:	e014      	b.n	80062a8 <_svfiprintf_r+0x114>
 800627e:	eba0 0308 	sub.w	r3, r0, r8
 8006282:	fa09 f303 	lsl.w	r3, r9, r3
 8006286:	4313      	orrs	r3, r2
 8006288:	46a2      	mov	sl, r4
 800628a:	9304      	str	r3, [sp, #16]
 800628c:	e7d2      	b.n	8006234 <_svfiprintf_r+0xa0>
 800628e:	9b03      	ldr	r3, [sp, #12]
 8006290:	1d19      	adds	r1, r3, #4
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	9103      	str	r1, [sp, #12]
 8006296:	2b00      	cmp	r3, #0
 8006298:	bfbb      	ittet	lt
 800629a:	425b      	neglt	r3, r3
 800629c:	f042 0202 	orrlt.w	r2, r2, #2
 80062a0:	9307      	strge	r3, [sp, #28]
 80062a2:	9307      	strlt	r3, [sp, #28]
 80062a4:	bfb8      	it	lt
 80062a6:	9204      	strlt	r2, [sp, #16]
 80062a8:	7823      	ldrb	r3, [r4, #0]
 80062aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80062ac:	d10a      	bne.n	80062c4 <_svfiprintf_r+0x130>
 80062ae:	7863      	ldrb	r3, [r4, #1]
 80062b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80062b2:	d132      	bne.n	800631a <_svfiprintf_r+0x186>
 80062b4:	9b03      	ldr	r3, [sp, #12]
 80062b6:	3402      	adds	r4, #2
 80062b8:	1d1a      	adds	r2, r3, #4
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	9203      	str	r2, [sp, #12]
 80062be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80062c2:	9305      	str	r3, [sp, #20]
 80062c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800637c <_svfiprintf_r+0x1e8>
 80062c8:	2203      	movs	r2, #3
 80062ca:	4650      	mov	r0, sl
 80062cc:	7821      	ldrb	r1, [r4, #0]
 80062ce:	f000 fa17 	bl	8006700 <memchr>
 80062d2:	b138      	cbz	r0, 80062e4 <_svfiprintf_r+0x150>
 80062d4:	2240      	movs	r2, #64	@ 0x40
 80062d6:	9b04      	ldr	r3, [sp, #16]
 80062d8:	eba0 000a 	sub.w	r0, r0, sl
 80062dc:	4082      	lsls	r2, r0
 80062de:	4313      	orrs	r3, r2
 80062e0:	3401      	adds	r4, #1
 80062e2:	9304      	str	r3, [sp, #16]
 80062e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e8:	2206      	movs	r2, #6
 80062ea:	4825      	ldr	r0, [pc, #148]	@ (8006380 <_svfiprintf_r+0x1ec>)
 80062ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80062f0:	f000 fa06 	bl	8006700 <memchr>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d036      	beq.n	8006366 <_svfiprintf_r+0x1d2>
 80062f8:	4b22      	ldr	r3, [pc, #136]	@ (8006384 <_svfiprintf_r+0x1f0>)
 80062fa:	bb1b      	cbnz	r3, 8006344 <_svfiprintf_r+0x1b0>
 80062fc:	9b03      	ldr	r3, [sp, #12]
 80062fe:	3307      	adds	r3, #7
 8006300:	f023 0307 	bic.w	r3, r3, #7
 8006304:	3308      	adds	r3, #8
 8006306:	9303      	str	r3, [sp, #12]
 8006308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800630a:	4433      	add	r3, r6
 800630c:	9309      	str	r3, [sp, #36]	@ 0x24
 800630e:	e76a      	b.n	80061e6 <_svfiprintf_r+0x52>
 8006310:	460c      	mov	r4, r1
 8006312:	2001      	movs	r0, #1
 8006314:	fb0c 3202 	mla	r2, ip, r2, r3
 8006318:	e7a8      	b.n	800626c <_svfiprintf_r+0xd8>
 800631a:	2300      	movs	r3, #0
 800631c:	f04f 0c0a 	mov.w	ip, #10
 8006320:	4619      	mov	r1, r3
 8006322:	3401      	adds	r4, #1
 8006324:	9305      	str	r3, [sp, #20]
 8006326:	4620      	mov	r0, r4
 8006328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800632c:	3a30      	subs	r2, #48	@ 0x30
 800632e:	2a09      	cmp	r2, #9
 8006330:	d903      	bls.n	800633a <_svfiprintf_r+0x1a6>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d0c6      	beq.n	80062c4 <_svfiprintf_r+0x130>
 8006336:	9105      	str	r1, [sp, #20]
 8006338:	e7c4      	b.n	80062c4 <_svfiprintf_r+0x130>
 800633a:	4604      	mov	r4, r0
 800633c:	2301      	movs	r3, #1
 800633e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006342:	e7f0      	b.n	8006326 <_svfiprintf_r+0x192>
 8006344:	ab03      	add	r3, sp, #12
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	462a      	mov	r2, r5
 800634a:	4638      	mov	r0, r7
 800634c:	4b0e      	ldr	r3, [pc, #56]	@ (8006388 <_svfiprintf_r+0x1f4>)
 800634e:	a904      	add	r1, sp, #16
 8006350:	f3af 8000 	nop.w
 8006354:	1c42      	adds	r2, r0, #1
 8006356:	4606      	mov	r6, r0
 8006358:	d1d6      	bne.n	8006308 <_svfiprintf_r+0x174>
 800635a:	89ab      	ldrh	r3, [r5, #12]
 800635c:	065b      	lsls	r3, r3, #25
 800635e:	f53f af2d 	bmi.w	80061bc <_svfiprintf_r+0x28>
 8006362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006364:	e72c      	b.n	80061c0 <_svfiprintf_r+0x2c>
 8006366:	ab03      	add	r3, sp, #12
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	462a      	mov	r2, r5
 800636c:	4638      	mov	r0, r7
 800636e:	4b06      	ldr	r3, [pc, #24]	@ (8006388 <_svfiprintf_r+0x1f4>)
 8006370:	a904      	add	r1, sp, #16
 8006372:	f000 f87d 	bl	8006470 <_printf_i>
 8006376:	e7ed      	b.n	8006354 <_svfiprintf_r+0x1c0>
 8006378:	08006ca8 	.word	0x08006ca8
 800637c:	08006cae 	.word	0x08006cae
 8006380:	08006cb2 	.word	0x08006cb2
 8006384:	00000000 	.word	0x00000000
 8006388:	080060dd 	.word	0x080060dd

0800638c <_printf_common>:
 800638c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006390:	4616      	mov	r6, r2
 8006392:	4698      	mov	r8, r3
 8006394:	688a      	ldr	r2, [r1, #8]
 8006396:	690b      	ldr	r3, [r1, #16]
 8006398:	4607      	mov	r7, r0
 800639a:	4293      	cmp	r3, r2
 800639c:	bfb8      	it	lt
 800639e:	4613      	movlt	r3, r2
 80063a0:	6033      	str	r3, [r6, #0]
 80063a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063a6:	460c      	mov	r4, r1
 80063a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063ac:	b10a      	cbz	r2, 80063b2 <_printf_common+0x26>
 80063ae:	3301      	adds	r3, #1
 80063b0:	6033      	str	r3, [r6, #0]
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	0699      	lsls	r1, r3, #26
 80063b6:	bf42      	ittt	mi
 80063b8:	6833      	ldrmi	r3, [r6, #0]
 80063ba:	3302      	addmi	r3, #2
 80063bc:	6033      	strmi	r3, [r6, #0]
 80063be:	6825      	ldr	r5, [r4, #0]
 80063c0:	f015 0506 	ands.w	r5, r5, #6
 80063c4:	d106      	bne.n	80063d4 <_printf_common+0x48>
 80063c6:	f104 0a19 	add.w	sl, r4, #25
 80063ca:	68e3      	ldr	r3, [r4, #12]
 80063cc:	6832      	ldr	r2, [r6, #0]
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	42ab      	cmp	r3, r5
 80063d2:	dc2b      	bgt.n	800642c <_printf_common+0xa0>
 80063d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063d8:	6822      	ldr	r2, [r4, #0]
 80063da:	3b00      	subs	r3, #0
 80063dc:	bf18      	it	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	0692      	lsls	r2, r2, #26
 80063e2:	d430      	bmi.n	8006446 <_printf_common+0xba>
 80063e4:	4641      	mov	r1, r8
 80063e6:	4638      	mov	r0, r7
 80063e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063ec:	47c8      	blx	r9
 80063ee:	3001      	adds	r0, #1
 80063f0:	d023      	beq.n	800643a <_printf_common+0xae>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	6922      	ldr	r2, [r4, #16]
 80063f6:	f003 0306 	and.w	r3, r3, #6
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	bf14      	ite	ne
 80063fe:	2500      	movne	r5, #0
 8006400:	6833      	ldreq	r3, [r6, #0]
 8006402:	f04f 0600 	mov.w	r6, #0
 8006406:	bf08      	it	eq
 8006408:	68e5      	ldreq	r5, [r4, #12]
 800640a:	f104 041a 	add.w	r4, r4, #26
 800640e:	bf08      	it	eq
 8006410:	1aed      	subeq	r5, r5, r3
 8006412:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006416:	bf08      	it	eq
 8006418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800641c:	4293      	cmp	r3, r2
 800641e:	bfc4      	itt	gt
 8006420:	1a9b      	subgt	r3, r3, r2
 8006422:	18ed      	addgt	r5, r5, r3
 8006424:	42b5      	cmp	r5, r6
 8006426:	d11a      	bne.n	800645e <_printf_common+0xd2>
 8006428:	2000      	movs	r0, #0
 800642a:	e008      	b.n	800643e <_printf_common+0xb2>
 800642c:	2301      	movs	r3, #1
 800642e:	4652      	mov	r2, sl
 8006430:	4641      	mov	r1, r8
 8006432:	4638      	mov	r0, r7
 8006434:	47c8      	blx	r9
 8006436:	3001      	adds	r0, #1
 8006438:	d103      	bne.n	8006442 <_printf_common+0xb6>
 800643a:	f04f 30ff 	mov.w	r0, #4294967295
 800643e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006442:	3501      	adds	r5, #1
 8006444:	e7c1      	b.n	80063ca <_printf_common+0x3e>
 8006446:	2030      	movs	r0, #48	@ 0x30
 8006448:	18e1      	adds	r1, r4, r3
 800644a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006454:	4422      	add	r2, r4
 8006456:	3302      	adds	r3, #2
 8006458:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800645c:	e7c2      	b.n	80063e4 <_printf_common+0x58>
 800645e:	2301      	movs	r3, #1
 8006460:	4622      	mov	r2, r4
 8006462:	4641      	mov	r1, r8
 8006464:	4638      	mov	r0, r7
 8006466:	47c8      	blx	r9
 8006468:	3001      	adds	r0, #1
 800646a:	d0e6      	beq.n	800643a <_printf_common+0xae>
 800646c:	3601      	adds	r6, #1
 800646e:	e7d9      	b.n	8006424 <_printf_common+0x98>

08006470 <_printf_i>:
 8006470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006474:	7e0f      	ldrb	r7, [r1, #24]
 8006476:	4691      	mov	r9, r2
 8006478:	2f78      	cmp	r7, #120	@ 0x78
 800647a:	4680      	mov	r8, r0
 800647c:	460c      	mov	r4, r1
 800647e:	469a      	mov	sl, r3
 8006480:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006482:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006486:	d807      	bhi.n	8006498 <_printf_i+0x28>
 8006488:	2f62      	cmp	r7, #98	@ 0x62
 800648a:	d80a      	bhi.n	80064a2 <_printf_i+0x32>
 800648c:	2f00      	cmp	r7, #0
 800648e:	f000 80d1 	beq.w	8006634 <_printf_i+0x1c4>
 8006492:	2f58      	cmp	r7, #88	@ 0x58
 8006494:	f000 80b8 	beq.w	8006608 <_printf_i+0x198>
 8006498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800649c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064a0:	e03a      	b.n	8006518 <_printf_i+0xa8>
 80064a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064a6:	2b15      	cmp	r3, #21
 80064a8:	d8f6      	bhi.n	8006498 <_printf_i+0x28>
 80064aa:	a101      	add	r1, pc, #4	@ (adr r1, 80064b0 <_printf_i+0x40>)
 80064ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064b0:	08006509 	.word	0x08006509
 80064b4:	0800651d 	.word	0x0800651d
 80064b8:	08006499 	.word	0x08006499
 80064bc:	08006499 	.word	0x08006499
 80064c0:	08006499 	.word	0x08006499
 80064c4:	08006499 	.word	0x08006499
 80064c8:	0800651d 	.word	0x0800651d
 80064cc:	08006499 	.word	0x08006499
 80064d0:	08006499 	.word	0x08006499
 80064d4:	08006499 	.word	0x08006499
 80064d8:	08006499 	.word	0x08006499
 80064dc:	0800661b 	.word	0x0800661b
 80064e0:	08006547 	.word	0x08006547
 80064e4:	080065d5 	.word	0x080065d5
 80064e8:	08006499 	.word	0x08006499
 80064ec:	08006499 	.word	0x08006499
 80064f0:	0800663d 	.word	0x0800663d
 80064f4:	08006499 	.word	0x08006499
 80064f8:	08006547 	.word	0x08006547
 80064fc:	08006499 	.word	0x08006499
 8006500:	08006499 	.word	0x08006499
 8006504:	080065dd 	.word	0x080065dd
 8006508:	6833      	ldr	r3, [r6, #0]
 800650a:	1d1a      	adds	r2, r3, #4
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6032      	str	r2, [r6, #0]
 8006510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006514:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006518:	2301      	movs	r3, #1
 800651a:	e09c      	b.n	8006656 <_printf_i+0x1e6>
 800651c:	6833      	ldr	r3, [r6, #0]
 800651e:	6820      	ldr	r0, [r4, #0]
 8006520:	1d19      	adds	r1, r3, #4
 8006522:	6031      	str	r1, [r6, #0]
 8006524:	0606      	lsls	r6, r0, #24
 8006526:	d501      	bpl.n	800652c <_printf_i+0xbc>
 8006528:	681d      	ldr	r5, [r3, #0]
 800652a:	e003      	b.n	8006534 <_printf_i+0xc4>
 800652c:	0645      	lsls	r5, r0, #25
 800652e:	d5fb      	bpl.n	8006528 <_printf_i+0xb8>
 8006530:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006534:	2d00      	cmp	r5, #0
 8006536:	da03      	bge.n	8006540 <_printf_i+0xd0>
 8006538:	232d      	movs	r3, #45	@ 0x2d
 800653a:	426d      	negs	r5, r5
 800653c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006540:	230a      	movs	r3, #10
 8006542:	4858      	ldr	r0, [pc, #352]	@ (80066a4 <_printf_i+0x234>)
 8006544:	e011      	b.n	800656a <_printf_i+0xfa>
 8006546:	6821      	ldr	r1, [r4, #0]
 8006548:	6833      	ldr	r3, [r6, #0]
 800654a:	0608      	lsls	r0, r1, #24
 800654c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006550:	d402      	bmi.n	8006558 <_printf_i+0xe8>
 8006552:	0649      	lsls	r1, r1, #25
 8006554:	bf48      	it	mi
 8006556:	b2ad      	uxthmi	r5, r5
 8006558:	2f6f      	cmp	r7, #111	@ 0x6f
 800655a:	6033      	str	r3, [r6, #0]
 800655c:	bf14      	ite	ne
 800655e:	230a      	movne	r3, #10
 8006560:	2308      	moveq	r3, #8
 8006562:	4850      	ldr	r0, [pc, #320]	@ (80066a4 <_printf_i+0x234>)
 8006564:	2100      	movs	r1, #0
 8006566:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800656a:	6866      	ldr	r6, [r4, #4]
 800656c:	2e00      	cmp	r6, #0
 800656e:	60a6      	str	r6, [r4, #8]
 8006570:	db05      	blt.n	800657e <_printf_i+0x10e>
 8006572:	6821      	ldr	r1, [r4, #0]
 8006574:	432e      	orrs	r6, r5
 8006576:	f021 0104 	bic.w	r1, r1, #4
 800657a:	6021      	str	r1, [r4, #0]
 800657c:	d04b      	beq.n	8006616 <_printf_i+0x1a6>
 800657e:	4616      	mov	r6, r2
 8006580:	fbb5 f1f3 	udiv	r1, r5, r3
 8006584:	fb03 5711 	mls	r7, r3, r1, r5
 8006588:	5dc7      	ldrb	r7, [r0, r7]
 800658a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800658e:	462f      	mov	r7, r5
 8006590:	42bb      	cmp	r3, r7
 8006592:	460d      	mov	r5, r1
 8006594:	d9f4      	bls.n	8006580 <_printf_i+0x110>
 8006596:	2b08      	cmp	r3, #8
 8006598:	d10b      	bne.n	80065b2 <_printf_i+0x142>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	07df      	lsls	r7, r3, #31
 800659e:	d508      	bpl.n	80065b2 <_printf_i+0x142>
 80065a0:	6923      	ldr	r3, [r4, #16]
 80065a2:	6861      	ldr	r1, [r4, #4]
 80065a4:	4299      	cmp	r1, r3
 80065a6:	bfde      	ittt	le
 80065a8:	2330      	movle	r3, #48	@ 0x30
 80065aa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065ae:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065b2:	1b92      	subs	r2, r2, r6
 80065b4:	6122      	str	r2, [r4, #16]
 80065b6:	464b      	mov	r3, r9
 80065b8:	4621      	mov	r1, r4
 80065ba:	4640      	mov	r0, r8
 80065bc:	f8cd a000 	str.w	sl, [sp]
 80065c0:	aa03      	add	r2, sp, #12
 80065c2:	f7ff fee3 	bl	800638c <_printf_common>
 80065c6:	3001      	adds	r0, #1
 80065c8:	d14a      	bne.n	8006660 <_printf_i+0x1f0>
 80065ca:	f04f 30ff 	mov.w	r0, #4294967295
 80065ce:	b004      	add	sp, #16
 80065d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d4:	6823      	ldr	r3, [r4, #0]
 80065d6:	f043 0320 	orr.w	r3, r3, #32
 80065da:	6023      	str	r3, [r4, #0]
 80065dc:	2778      	movs	r7, #120	@ 0x78
 80065de:	4832      	ldr	r0, [pc, #200]	@ (80066a8 <_printf_i+0x238>)
 80065e0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	6831      	ldr	r1, [r6, #0]
 80065e8:	061f      	lsls	r7, r3, #24
 80065ea:	f851 5b04 	ldr.w	r5, [r1], #4
 80065ee:	d402      	bmi.n	80065f6 <_printf_i+0x186>
 80065f0:	065f      	lsls	r7, r3, #25
 80065f2:	bf48      	it	mi
 80065f4:	b2ad      	uxthmi	r5, r5
 80065f6:	6031      	str	r1, [r6, #0]
 80065f8:	07d9      	lsls	r1, r3, #31
 80065fa:	bf44      	itt	mi
 80065fc:	f043 0320 	orrmi.w	r3, r3, #32
 8006600:	6023      	strmi	r3, [r4, #0]
 8006602:	b11d      	cbz	r5, 800660c <_printf_i+0x19c>
 8006604:	2310      	movs	r3, #16
 8006606:	e7ad      	b.n	8006564 <_printf_i+0xf4>
 8006608:	4826      	ldr	r0, [pc, #152]	@ (80066a4 <_printf_i+0x234>)
 800660a:	e7e9      	b.n	80065e0 <_printf_i+0x170>
 800660c:	6823      	ldr	r3, [r4, #0]
 800660e:	f023 0320 	bic.w	r3, r3, #32
 8006612:	6023      	str	r3, [r4, #0]
 8006614:	e7f6      	b.n	8006604 <_printf_i+0x194>
 8006616:	4616      	mov	r6, r2
 8006618:	e7bd      	b.n	8006596 <_printf_i+0x126>
 800661a:	6833      	ldr	r3, [r6, #0]
 800661c:	6825      	ldr	r5, [r4, #0]
 800661e:	1d18      	adds	r0, r3, #4
 8006620:	6961      	ldr	r1, [r4, #20]
 8006622:	6030      	str	r0, [r6, #0]
 8006624:	062e      	lsls	r6, r5, #24
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	d501      	bpl.n	800662e <_printf_i+0x1be>
 800662a:	6019      	str	r1, [r3, #0]
 800662c:	e002      	b.n	8006634 <_printf_i+0x1c4>
 800662e:	0668      	lsls	r0, r5, #25
 8006630:	d5fb      	bpl.n	800662a <_printf_i+0x1ba>
 8006632:	8019      	strh	r1, [r3, #0]
 8006634:	2300      	movs	r3, #0
 8006636:	4616      	mov	r6, r2
 8006638:	6123      	str	r3, [r4, #16]
 800663a:	e7bc      	b.n	80065b6 <_printf_i+0x146>
 800663c:	6833      	ldr	r3, [r6, #0]
 800663e:	2100      	movs	r1, #0
 8006640:	1d1a      	adds	r2, r3, #4
 8006642:	6032      	str	r2, [r6, #0]
 8006644:	681e      	ldr	r6, [r3, #0]
 8006646:	6862      	ldr	r2, [r4, #4]
 8006648:	4630      	mov	r0, r6
 800664a:	f000 f859 	bl	8006700 <memchr>
 800664e:	b108      	cbz	r0, 8006654 <_printf_i+0x1e4>
 8006650:	1b80      	subs	r0, r0, r6
 8006652:	6060      	str	r0, [r4, #4]
 8006654:	6863      	ldr	r3, [r4, #4]
 8006656:	6123      	str	r3, [r4, #16]
 8006658:	2300      	movs	r3, #0
 800665a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800665e:	e7aa      	b.n	80065b6 <_printf_i+0x146>
 8006660:	4632      	mov	r2, r6
 8006662:	4649      	mov	r1, r9
 8006664:	4640      	mov	r0, r8
 8006666:	6923      	ldr	r3, [r4, #16]
 8006668:	47d0      	blx	sl
 800666a:	3001      	adds	r0, #1
 800666c:	d0ad      	beq.n	80065ca <_printf_i+0x15a>
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	079b      	lsls	r3, r3, #30
 8006672:	d413      	bmi.n	800669c <_printf_i+0x22c>
 8006674:	68e0      	ldr	r0, [r4, #12]
 8006676:	9b03      	ldr	r3, [sp, #12]
 8006678:	4298      	cmp	r0, r3
 800667a:	bfb8      	it	lt
 800667c:	4618      	movlt	r0, r3
 800667e:	e7a6      	b.n	80065ce <_printf_i+0x15e>
 8006680:	2301      	movs	r3, #1
 8006682:	4632      	mov	r2, r6
 8006684:	4649      	mov	r1, r9
 8006686:	4640      	mov	r0, r8
 8006688:	47d0      	blx	sl
 800668a:	3001      	adds	r0, #1
 800668c:	d09d      	beq.n	80065ca <_printf_i+0x15a>
 800668e:	3501      	adds	r5, #1
 8006690:	68e3      	ldr	r3, [r4, #12]
 8006692:	9903      	ldr	r1, [sp, #12]
 8006694:	1a5b      	subs	r3, r3, r1
 8006696:	42ab      	cmp	r3, r5
 8006698:	dcf2      	bgt.n	8006680 <_printf_i+0x210>
 800669a:	e7eb      	b.n	8006674 <_printf_i+0x204>
 800669c:	2500      	movs	r5, #0
 800669e:	f104 0619 	add.w	r6, r4, #25
 80066a2:	e7f5      	b.n	8006690 <_printf_i+0x220>
 80066a4:	08006cb9 	.word	0x08006cb9
 80066a8:	08006cca 	.word	0x08006cca

080066ac <memmove>:
 80066ac:	4288      	cmp	r0, r1
 80066ae:	b510      	push	{r4, lr}
 80066b0:	eb01 0402 	add.w	r4, r1, r2
 80066b4:	d902      	bls.n	80066bc <memmove+0x10>
 80066b6:	4284      	cmp	r4, r0
 80066b8:	4623      	mov	r3, r4
 80066ba:	d807      	bhi.n	80066cc <memmove+0x20>
 80066bc:	1e43      	subs	r3, r0, #1
 80066be:	42a1      	cmp	r1, r4
 80066c0:	d008      	beq.n	80066d4 <memmove+0x28>
 80066c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066ca:	e7f8      	b.n	80066be <memmove+0x12>
 80066cc:	4601      	mov	r1, r0
 80066ce:	4402      	add	r2, r0
 80066d0:	428a      	cmp	r2, r1
 80066d2:	d100      	bne.n	80066d6 <memmove+0x2a>
 80066d4:	bd10      	pop	{r4, pc}
 80066d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066de:	e7f7      	b.n	80066d0 <memmove+0x24>

080066e0 <_sbrk_r>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	2300      	movs	r3, #0
 80066e4:	4d05      	ldr	r5, [pc, #20]	@ (80066fc <_sbrk_r+0x1c>)
 80066e6:	4604      	mov	r4, r0
 80066e8:	4608      	mov	r0, r1
 80066ea:	602b      	str	r3, [r5, #0]
 80066ec:	f7fc fd1e 	bl	800312c <_sbrk>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d102      	bne.n	80066fa <_sbrk_r+0x1a>
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	b103      	cbz	r3, 80066fa <_sbrk_r+0x1a>
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	20000560 	.word	0x20000560

08006700 <memchr>:
 8006700:	4603      	mov	r3, r0
 8006702:	b510      	push	{r4, lr}
 8006704:	b2c9      	uxtb	r1, r1
 8006706:	4402      	add	r2, r0
 8006708:	4293      	cmp	r3, r2
 800670a:	4618      	mov	r0, r3
 800670c:	d101      	bne.n	8006712 <memchr+0x12>
 800670e:	2000      	movs	r0, #0
 8006710:	e003      	b.n	800671a <memchr+0x1a>
 8006712:	7804      	ldrb	r4, [r0, #0]
 8006714:	3301      	adds	r3, #1
 8006716:	428c      	cmp	r4, r1
 8006718:	d1f6      	bne.n	8006708 <memchr+0x8>
 800671a:	bd10      	pop	{r4, pc}

0800671c <memcpy>:
 800671c:	440a      	add	r2, r1
 800671e:	4291      	cmp	r1, r2
 8006720:	f100 33ff 	add.w	r3, r0, #4294967295
 8006724:	d100      	bne.n	8006728 <memcpy+0xc>
 8006726:	4770      	bx	lr
 8006728:	b510      	push	{r4, lr}
 800672a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800672e:	4291      	cmp	r1, r2
 8006730:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006734:	d1f9      	bne.n	800672a <memcpy+0xe>
 8006736:	bd10      	pop	{r4, pc}

08006738 <_realloc_r>:
 8006738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800673c:	4607      	mov	r7, r0
 800673e:	4614      	mov	r4, r2
 8006740:	460d      	mov	r5, r1
 8006742:	b921      	cbnz	r1, 800674e <_realloc_r+0x16>
 8006744:	4611      	mov	r1, r2
 8006746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800674a:	f7ff bc3b 	b.w	8005fc4 <_malloc_r>
 800674e:	b92a      	cbnz	r2, 800675c <_realloc_r+0x24>
 8006750:	f7ff fbce 	bl	8005ef0 <_free_r>
 8006754:	4625      	mov	r5, r4
 8006756:	4628      	mov	r0, r5
 8006758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800675c:	f000 f81a 	bl	8006794 <_malloc_usable_size_r>
 8006760:	4284      	cmp	r4, r0
 8006762:	4606      	mov	r6, r0
 8006764:	d802      	bhi.n	800676c <_realloc_r+0x34>
 8006766:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800676a:	d8f4      	bhi.n	8006756 <_realloc_r+0x1e>
 800676c:	4621      	mov	r1, r4
 800676e:	4638      	mov	r0, r7
 8006770:	f7ff fc28 	bl	8005fc4 <_malloc_r>
 8006774:	4680      	mov	r8, r0
 8006776:	b908      	cbnz	r0, 800677c <_realloc_r+0x44>
 8006778:	4645      	mov	r5, r8
 800677a:	e7ec      	b.n	8006756 <_realloc_r+0x1e>
 800677c:	42b4      	cmp	r4, r6
 800677e:	4622      	mov	r2, r4
 8006780:	4629      	mov	r1, r5
 8006782:	bf28      	it	cs
 8006784:	4632      	movcs	r2, r6
 8006786:	f7ff ffc9 	bl	800671c <memcpy>
 800678a:	4629      	mov	r1, r5
 800678c:	4638      	mov	r0, r7
 800678e:	f7ff fbaf 	bl	8005ef0 <_free_r>
 8006792:	e7f1      	b.n	8006778 <_realloc_r+0x40>

08006794 <_malloc_usable_size_r>:
 8006794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006798:	1f18      	subs	r0, r3, #4
 800679a:	2b00      	cmp	r3, #0
 800679c:	bfbc      	itt	lt
 800679e:	580b      	ldrlt	r3, [r1, r0]
 80067a0:	18c0      	addlt	r0, r0, r3
 80067a2:	4770      	bx	lr

080067a4 <_init>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	bf00      	nop
 80067a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067aa:	bc08      	pop	{r3}
 80067ac:	469e      	mov	lr, r3
 80067ae:	4770      	bx	lr

080067b0 <_fini>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	bf00      	nop
 80067b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b6:	bc08      	pop	{r3}
 80067b8:	469e      	mov	lr, r3
 80067ba:	4770      	bx	lr
