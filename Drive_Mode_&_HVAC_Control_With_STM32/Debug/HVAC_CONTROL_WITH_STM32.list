
HVAC_CONTROL_WITH_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c50  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e54  08009d60  08009d60  0000ad60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abb4  0800abb4  0000c1f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800abb4  0800abb4  0000bbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abbc  0800abbc  0000c1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800abbc  0800abbc  0000bbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800abc0  0800abc0  0000bbc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800abc4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  200001f8  0800adbc  0000c1f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  0800adbc  0000c798  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ccf3  00000000  00000000  0000c221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c93  00000000  00000000  00018f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0001bba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008fe  00000000  00000000  0001c780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019793  00000000  00000000  0001d07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130de  00000000  00000000  00036811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d5d  00000000  00000000  000498ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf64c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f5c  00000000  00000000  000cf690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  000d35ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009d48 	.word	0x08009d48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08009d48 	.word	0x08009d48

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <Blower_Relay_Pins_Init>:

#define PB12_LOW_SPEED_BLOWER    12
#define PB13_MEDIUM_SPEED_BLOWER 13
#define PB14_HIGH_SPEED_BLOWER   14

void Blower_Relay_Pins_Init(){
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8001034:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <Blower_Relay_Pins_Init+0x44>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a0e      	ldr	r2, [pc, #56]	@ (8001074 <Blower_Relay_Pins_Init+0x44>)
 800103a:	f043 0308 	orr.w	r3, r3, #8
 800103e:	6193      	str	r3, [r2, #24]
    GPIOB->CRH&=~((0xF<<16)|(0XF<<20)|(0XF<<24));
 8001040:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <Blower_Relay_Pins_Init+0x48>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	4a0c      	ldr	r2, [pc, #48]	@ (8001078 <Blower_Relay_Pins_Init+0x48>)
 8001046:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 800104a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800104e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=((0x3<<16)|(0X3<<20)|(0X3<<24));
 8001050:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <Blower_Relay_Pins_Init+0x48>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	4a08      	ldr	r2, [pc, #32]	@ (8001078 <Blower_Relay_Pins_Init+0x48>)
 8001056:	f043 734c 	orr.w	r3, r3, #53477376	@ 0x3300000
 800105a:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800105e:	6053      	str	r3, [r2, #4]
    GPIOB->ODR|=((1<<PB12_LOW_SPEED_BLOWER)|(1<<PB13_MEDIUM_SPEED_BLOWER)|(1<<PB14_HIGH_SPEED_BLOWER));
 8001060:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <Blower_Relay_Pins_Init+0x48>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <Blower_Relay_Pins_Init+0x48>)
 8001066:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800106a:	60d3      	str	r3, [r2, #12]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	40021000 	.word	0x40021000
 8001078:	40010c00 	.word	0x40010c00

0800107c <Switch_Pins_int>:
extern uint32_t milli_sec_tick;
uint32_t LastDebounceTime = 0;  // The Last Time The Output Pin Was Toggled
uint32_t DebounceDelay = 50;    // The Ddebounce Time; increase it if the output still flickers
switch_state_t BtnState=SW_STATE_NEUTRAL;               // The Current Reading From The Input Pin
switch_state_t LastBtnState = SW_STATE_NEUTRAL;       // The previous reading from The Input Pin
void Switch_Pins_int(){
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8001080:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <Switch_Pins_int+0x60>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a15      	ldr	r2, [pc, #84]	@ (80010dc <Switch_Pins_int+0x60>)
 8001086:	f043 0308 	orr.w	r3, r3, #8
 800108a:	6193      	str	r3, [r2, #24]
    GPIOB->CRL&=~(0xf<<28);//PB7 as input//FORWARD
 800108c:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <Switch_Pins_int+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a13      	ldr	r2, [pc, #76]	@ (80010e0 <Switch_Pins_int+0x64>)
 8001092:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001096:	6013      	str	r3, [r2, #0]
    GPIOB->CRL|=(0b10<<30);
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <Switch_Pins_int+0x64>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a10      	ldr	r2, [pc, #64]	@ (80010e0 <Switch_Pins_int+0x64>)
 800109e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010a2:	6013      	str	r3, [r2, #0]
    GPIOB->ODR|=(1<<7);
 80010a4:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <Switch_Pins_int+0x64>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	@ (80010e0 <Switch_Pins_int+0x64>)
 80010aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ae:	60d3      	str	r3, [r2, #12]
    GPIOB->CRL&=~(0XF<<24);// PB6 REVERSE
 80010b0:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <Switch_Pins_int+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0a      	ldr	r2, [pc, #40]	@ (80010e0 <Switch_Pins_int+0x64>)
 80010b6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80010ba:	6013      	str	r3, [r2, #0]
    GPIOB->CRL|=(0b10<<26);
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <Switch_Pins_int+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a07      	ldr	r2, [pc, #28]	@ (80010e0 <Switch_Pins_int+0x64>)
 80010c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80010c6:	6013      	str	r3, [r2, #0]
    GPIOB->ODR|=(1<<6);
 80010c8:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <Switch_Pins_int+0x64>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <Switch_Pins_int+0x64>)
 80010ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40010c00 	.word	0x40010c00

080010e4 <read_switch_raw>:
switch_state_t read_switch_raw(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
    uint8_t fwd =!(GPIOB->IDR>>7&1);
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <read_switch_raw+0x6c>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	09db      	lsrs	r3, r3, #7
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bf0c      	ite	eq
 80010f8:	2301      	moveq	r3, #1
 80010fa:	2300      	movne	r3, #0
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	71fb      	strb	r3, [r7, #7]
    uint8_t rev =!(GPIOB->IDR>>6&1);
 8001100:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <read_switch_raw+0x6c>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	099b      	lsrs	r3, r3, #6
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	bf0c      	ite	eq
 800110e:	2301      	moveq	r3, #1
 8001110:	2300      	movne	r3, #0
 8001112:	b2db      	uxtb	r3, r3
 8001114:	71bb      	strb	r3, [r7, #6]

    if (fwd && !rev) return SW_STATE_FORWARD;
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d004      	beq.n	8001126 <read_switch_raw+0x42>
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <read_switch_raw+0x42>
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <read_switch_raw+0x62>
    if (!fwd && rev) return SW_STATE_REVERSE;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d104      	bne.n	8001136 <read_switch_raw+0x52>
 800112c:	79bb      	ldrb	r3, [r7, #6]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <read_switch_raw+0x52>
 8001132:	2302      	movs	r3, #2
 8001134:	e007      	b.n	8001146 <read_switch_raw+0x62>
    if (!fwd && !rev) return SW_STATE_NEUTRAL;
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d104      	bne.n	8001146 <read_switch_raw+0x62>
 800113c:	79bb      	ldrb	r3, [r7, #6]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <read_switch_raw+0x62>
 8001142:	2300      	movs	r3, #0
 8001144:	e7ff      	b.n	8001146 <read_switch_raw+0x62>
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr
 8001150:	40010c00 	.word	0x40010c00

08001154 <Switch_update>:
// Debounce state machine (call periodically from main loop)
switch_state_t Switch_update(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
    uint8_t TempBtnReading;
    TempBtnReading =read_switch_raw();// R_BIT(GPIOC->IDR,13); // read the state of the switch into a local variable:
 800115a:	f7ff ffc3 	bl	80010e4 <read_switch_raw>
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
    if(TempBtnReading != LastBtnState) // If the switch changed, due to noise or pressing:
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <Switch_update+0x54>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	429a      	cmp	r2, r3
 800116a:	d003      	beq.n	8001174 <Switch_update+0x20>
    {
        LastDebounceTime = milli_sec_tick; // reset the debouncing timer
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <Switch_update+0x58>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0f      	ldr	r2, [pc, #60]	@ (80011b0 <Switch_update+0x5c>)
 8001172:	6013      	str	r3, [r2, #0]
    }
    if((milli_sec_tick - LastDebounceTime) > DebounceDelay)
 8001174:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <Switch_update+0x58>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b0d      	ldr	r3, [pc, #52]	@ (80011b0 <Switch_update+0x5c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	1ad2      	subs	r2, r2, r3
 800117e:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <Switch_update+0x60>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d907      	bls.n	8001196 <Switch_update+0x42>
    {
        if(TempBtnReading != BtnState)
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <Switch_update+0x64>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	79fa      	ldrb	r2, [r7, #7]
 800118c:	429a      	cmp	r2, r3
 800118e:	d002      	beq.n	8001196 <Switch_update+0x42>
        {
            BtnState = TempBtnReading;
 8001190:	4a09      	ldr	r2, [pc, #36]	@ (80011b8 <Switch_update+0x64>)
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	7013      	strb	r3, [r2, #0]
        }
    }
    LastBtnState = TempBtnReading;
 8001196:	4a04      	ldr	r2, [pc, #16]	@ (80011a8 <Switch_update+0x54>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	7013      	strb	r3, [r2, #0]
    return BtnState;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <Switch_update+0x64>)
 800119e:	781b      	ldrb	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000219 	.word	0x20000219
 80011ac:	20000590 	.word	0x20000590
 80011b0:	20000214 	.word	0x20000214
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000218 	.word	0x20000218

080011bc <MX_I2C1_Init>:
 */

#include"extern_file_declarations.h"
uint8_t I2C_RX_FLAG=0,data[2];
 void MX_I2C1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <MX_I2C1_Init+0x5c>)
 80011c2:	4a16      	ldr	r2, [pc, #88]	@ (800121c <MX_I2C1_Init+0x60>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011c6:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <MX_I2C1_Init+0x5c>)
 80011c8:	4a15      	ldr	r2, [pc, #84]	@ (8001220 <MX_I2C1_Init+0x64>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_I2C1_Init+0x5c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 170;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_I2C1_Init+0x5c>)
 80011d4:	22aa      	movs	r2, #170	@ 0xaa
 80011d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_I2C1_Init+0x5c>)
 80011da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <MX_I2C1_Init+0x5c>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <MX_I2C1_Init+0x5c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <MX_I2C1_Init+0x5c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <MX_I2C1_Init+0x5c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f8:	4807      	ldr	r0, [pc, #28]	@ (8001218 <MX_I2C1_Init+0x5c>)
 80011fa:	f004 f867 	bl	80052cc <HAL_I2C_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001204:	f002 f9d4 	bl	80035b0 <Error_Handler>
  }
  HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 8001208:	2202      	movs	r2, #2
 800120a:	4906      	ldr	r1, [pc, #24]	@ (8001224 <MX_I2C1_Init+0x68>)
 800120c:	4802      	ldr	r0, [pc, #8]	@ (8001218 <MX_I2C1_Init+0x5c>)
 800120e:	f004 f9b5 	bl	800557c <HAL_I2C_Slave_Receive_IT>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000538 	.word	0x20000538
 800121c:	40005400 	.word	0x40005400
 8001220:	00061a80 	.word	0x00061a80
 8001224:	2000021c 	.word	0x2000021c

08001228 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	I2C_RX_FLAG=1;
 8001230:	4b05      	ldr	r3, [pc, #20]	@ (8001248 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 8001236:	2202      	movs	r2, #2
 8001238:	4904      	ldr	r1, [pc, #16]	@ (800124c <HAL_I2C_SlaveRxCpltCallback+0x24>)
 800123a:	4805      	ldr	r0, [pc, #20]	@ (8001250 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 800123c:	f004 f99e 	bl	800557c <HAL_I2C_Slave_Receive_IT>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000021a 	.word	0x2000021a
 800124c:	2000021c 	.word	0x2000021c
 8001250:	20000538 	.word	0x20000538

08001254 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0c      	ldr	r2, [pc, #48]	@ (8001294 <HAL_I2C_ErrorCallback+0x40>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d112      	bne.n	800128c <HAL_I2C_ErrorCallback+0x38>
        // Reset I2C if it’s stuck
        __HAL_RCC_I2C1_FORCE_RESET();
 8001266:	4b0c      	ldr	r3, [pc, #48]	@ (8001298 <HAL_I2C_ErrorCallback+0x44>)
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	4a0b      	ldr	r2, [pc, #44]	@ (8001298 <HAL_I2C_ErrorCallback+0x44>)
 800126c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001270:	6113      	str	r3, [r2, #16]
        __HAL_RCC_I2C1_RELEASE_RESET();
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <HAL_I2C_ErrorCallback+0x44>)
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	4a08      	ldr	r2, [pc, #32]	@ (8001298 <HAL_I2C_ErrorCallback+0x44>)
 8001278:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800127c:	6113      	str	r3, [r2, #16]

        MX_I2C1_Init();  // Re-init peripheral
 800127e:	f7ff ff9d 	bl	80011bc <MX_I2C1_Init>
        HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 8001282:	2202      	movs	r2, #2
 8001284:	4905      	ldr	r1, [pc, #20]	@ (800129c <HAL_I2C_ErrorCallback+0x48>)
 8001286:	4806      	ldr	r0, [pc, #24]	@ (80012a0 <HAL_I2C_ErrorCallback+0x4c>)
 8001288:	f004 f978 	bl	800557c <HAL_I2C_Slave_Receive_IT>
    }
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40005400 	.word	0x40005400
 8001298:	40021000 	.word	0x40021000
 800129c:	2000021c 	.word	0x2000021c
 80012a0:	20000538 	.word	0x20000538

080012a4 <Process_Jbd_Bms_Messages>:
#include"can.h"
#include"uart.h"
JBD_BMS_MSG_t Bms_Frames;


void Process_Jbd_Bms_Messages(can_frame_t *frame){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 switch(frame->id){
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012b4:	2b0c      	cmp	r3, #12
 80012b6:	f200 80cc 	bhi.w	8001452 <Process_Jbd_Bms_Messages+0x1ae>
 80012ba:	a201      	add	r2, pc, #4	@ (adr r2, 80012c0 <Process_Jbd_Bms_Messages+0x1c>)
 80012bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c0:	080012f5 	.word	0x080012f5
 80012c4:	0800130d 	.word	0x0800130d
 80012c8:	08001325 	.word	0x08001325
 80012cc:	08001341 	.word	0x08001341
 80012d0:	0800135d 	.word	0x0800135d
 80012d4:	08001379 	.word	0x08001379
 80012d8:	08001395 	.word	0x08001395
 80012dc:	080013b1 	.word	0x080013b1
 80012e0:	080013cd 	.word	0x080013cd
 80012e4:	080013e3 	.word	0x080013e3
 80012e8:	080013ff 	.word	0x080013ff
 80012ec:	0800141b 	.word	0x0800141b
 80012f0:	08001437 	.word	0x08001437
 case 0x100:decode_CAN_0x100(frame->data,&Bms_Frames.Id_0x100);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3307      	adds	r3, #7
 80012f8:	4958      	ldr	r1, [pc, #352]	@ (800145c <Process_Jbd_Bms_Messages+0x1b8>)
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f8c8 	bl	8001490 <decode_CAN_0x100>
 Bms_Frames.Id_0x100.rx_or_not=1;
 8001300:	4a56      	ldr	r2, [pc, #344]	@ (800145c <Process_Jbd_Bms_Messages+0x1b8>)
 8001302:	7b93      	ldrb	r3, [r2, #14]
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	7393      	strb	r3, [r2, #14]
	 	 	 break;
 800130a:	e0a3      	b.n	8001454 <Process_Jbd_Bms_Messages+0x1b0>
 case 0x101:decode_CAN_0x101(frame->data,&Bms_Frames.Id_0x101);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3307      	adds	r3, #7
 8001310:	4953      	ldr	r1, [pc, #332]	@ (8001460 <Process_Jbd_Bms_Messages+0x1bc>)
 8001312:	4618      	mov	r0, r3
 8001314:	f000 f93a 	bl	800158c <decode_CAN_0x101>
 Bms_Frames.Id_0x101.rx_or_not=1;
 8001318:	4a50      	ldr	r2, [pc, #320]	@ (800145c <Process_Jbd_Bms_Messages+0x1b8>)
 800131a:	7e93      	ldrb	r3, [r2, #26]
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	7693      	strb	r3, [r2, #26]
	 	 	 break;
 8001322:	e097      	b.n	8001454 <Process_Jbd_Bms_Messages+0x1b0>
 case 0x102:decode_CAN_0x102(frame->data,&Bms_Frames.Id_0x102);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3307      	adds	r3, #7
 8001328:	494e      	ldr	r1, [pc, #312]	@ (8001464 <Process_Jbd_Bms_Messages+0x1c0>)
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f9c4 	bl	80016b8 <decode_CAN_0x102>
 Bms_Frames.Id_0x102.rx_or_not=1;
 8001330:	4a4a      	ldr	r2, [pc, #296]	@ (800145c <Process_Jbd_Bms_Messages+0x1b8>)
 8001332:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
	 	 	 break;
 800133e:	e089      	b.n	8001454 <Process_Jbd_Bms_Messages+0x1b0>
 case 0x103:decode_CAN_0x103(frame->data,&Bms_Frames.Id_0x103);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3307      	adds	r3, #7
 8001344:	4948      	ldr	r1, [pc, #288]	@ (8001468 <Process_Jbd_Bms_Messages+0x1c4>)
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f972 	bl	8001630 <decode_CAN_0x103>
 Bms_Frames.Id_0x103.rx_or_not=1;
 800134c:	4a43      	ldr	r2, [pc, #268]	@ (800145c <Process_Jbd_Bms_Messages+0x1b8>)
 800134e:	f892 304c 	ldrb.w	r3, [r2, #76]	@ 0x4c
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
	 	 	 break;
 800135a:	e07b      	b.n	8001454 <Process_Jbd_Bms_Messages+0x1b0>
 case 0x104:decode_CAN_0x104(frame->data,&Bms_Frames.Id_0x104);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3307      	adds	r3, #7
 8001360:	4942      	ldr	r1, [pc, #264]	@ (800146c <Process_Jbd_Bms_Messages+0x1c8>)
 8001362:	4618      	mov	r0, r3
 8001364:	f000 fa1a 	bl	800179c <decode_CAN_0x104>
 Bms_Frames.Id_0x104.rx_or_not=1;
 8001368:	4a3c      	ldr	r2, [pc, #240]	@ (800145c <Process_Jbd_Bms_Messages+0x1b8>)
 800136a:	f892 3052 	ldrb.w	r3, [r2, #82]	@ 0x52
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
	 	 	 break;
 8001376:	e06d      	b.n	8001454 <Process_Jbd_Bms_Messages+0x1b0>
 case 0x105:decode_CAN_0x105(frame->data,&Bms_Frames.Id_0x105);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3307      	adds	r3, #7
 800137c:	493c      	ldr	r1, [pc, #240]	@ (8001470 <Process_Jbd_Bms_Messages+0x1cc>)
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fa2e 	bl	80017e0 <decode_CAN_0x105>
 Bms_Frames.Id_0x105.rx_or_not=1;
 8001384:	4a35      	ldr	r2, [pc, #212]	@ (800145c <Process_Jbd_Bms_Messages+0x1b8>)
 8001386:	f892 3062 	ldrb.w	r3, [r2, #98]	@ 0x62
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	f882 3062 	strb.w	r3, [r2, #98]	@ 0x62
	 	 	 break;
 8001392:	e05f      	b.n	8001454 <Process_Jbd_Bms_Messages+0x1b0>
 case 0x106:decode_CAN_0x106(frame->data,&Bms_Frames.Id_0x106);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3307      	adds	r3, #7
 8001398:	4936      	ldr	r1, [pc, #216]	@ (8001474 <Process_Jbd_Bms_Messages+0x1d0>)
 800139a:	4618      	mov	r0, r3
 800139c:	f000 fa98 	bl	80018d0 <decode_CAN_0x106>
 Bms_Frames.Id_0x106.rx_or_not=1;
 80013a0:	4a2e      	ldr	r2, [pc, #184]	@ (800145c <Process_Jbd_Bms_Messages+0x1b8>)
 80013a2:	f892 3072 	ldrb.w	r3, [r2, #114]	@ 0x72
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	f882 3072 	strb.w	r3, [r2, #114]	@ 0x72
	 	 	 break;
 80013ae:	e051      	b.n	8001454 <Process_Jbd_Bms_Messages+0x1b0>
 case 0x107:decode_CAN_0x107(frame->data,&Bms_Frames.Id_0x107);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3307      	adds	r3, #7
 80013b4:	4930      	ldr	r1, [pc, #192]	@ (8001478 <Process_Jbd_Bms_Messages+0x1d4>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fb02 	bl	80019c0 <decode_CAN_0x107>
 Bms_Frames.Id_0x107.rx_or_not=1;
 80013bc:	4a27      	ldr	r2, [pc, #156]	@ (800145c <Process_Jbd_Bms_Messages+0x1b8>)
 80013be:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	f882 3082 	strb.w	r3, [r2, #130]	@ 0x82
	 	 	 break;
 80013ca:	e043      	b.n	8001454 <Process_Jbd_Bms_Messages+0x1b0>
 case 0x108:decode_CAN_0x108(frame->data,&Bms_Frames.Id_0x108);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3307      	adds	r3, #7
 80013d0:	492a      	ldr	r1, [pc, #168]	@ (800147c <Process_Jbd_Bms_Messages+0x1d8>)
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 fb6c 	bl	8001ab0 <decode_CAN_0x108>
 Bms_Frames.Id_0x108.rx_or_not=1;
 80013d8:	4b20      	ldr	r3, [pc, #128]	@ (800145c <Process_Jbd_Bms_Messages+0x1b8>)
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	 	 	 break;
 80013e0:	e038      	b.n	8001454 <Process_Jbd_Bms_Messages+0x1b0>
 case 0x109:decode_CAN_0x109(frame->data,&Bms_Frames.Id_0x109);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3307      	adds	r3, #7
 80013e6:	4926      	ldr	r1, [pc, #152]	@ (8001480 <Process_Jbd_Bms_Messages+0x1dc>)
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fbd9 	bl	8001ba0 <decode_CAN_0x109>
 Bms_Frames.Id_0x109.rx_or_not=1;
 80013ee:	4a1b      	ldr	r2, [pc, #108]	@ (800145c <Process_Jbd_Bms_Messages+0x1b8>)
 80013f0:	f892 30a2 	ldrb.w	r3, [r2, #162]	@ 0xa2
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	f882 30a2 	strb.w	r3, [r2, #162]	@ 0xa2
	 	 	 break;
 80013fc:	e02a      	b.n	8001454 <Process_Jbd_Bms_Messages+0x1b0>
 case 0x10A:decode_CAN_0x10A(frame->data,&Bms_Frames.Id_0x10A);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3307      	adds	r3, #7
 8001402:	4920      	ldr	r1, [pc, #128]	@ (8001484 <Process_Jbd_Bms_Messages+0x1e0>)
 8001404:	4618      	mov	r0, r3
 8001406:	f000 fc43 	bl	8001c90 <decode_CAN_0x10A>
 Bms_Frames.Id_0x10A.rx_or_not=1;
 800140a:	4a14      	ldr	r2, [pc, #80]	@ (800145c <Process_Jbd_Bms_Messages+0x1b8>)
 800140c:	f892 30b2 	ldrb.w	r3, [r2, #178]	@ 0xb2
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	f882 30b2 	strb.w	r3, [r2, #178]	@ 0xb2
	 	 	 break;
 8001418:	e01c      	b.n	8001454 <Process_Jbd_Bms_Messages+0x1b0>
 case 0X10B:decode_CAN_0x10B(frame->data,&Bms_Frames.Id_0x10B);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3307      	adds	r3, #7
 800141e:	491a      	ldr	r1, [pc, #104]	@ (8001488 <Process_Jbd_Bms_Messages+0x1e4>)
 8001420:	4618      	mov	r0, r3
 8001422:	f000 fcad 	bl	8001d80 <decode_CAN_0x10B>
 Bms_Frames.Id_0x10B.rx_or_not=1;
 8001426:	4a0d      	ldr	r2, [pc, #52]	@ (800145c <Process_Jbd_Bms_Messages+0x1b8>)
 8001428:	f892 30c2 	ldrb.w	r3, [r2, #194]	@ 0xc2
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	f882 30c2 	strb.w	r3, [r2, #194]	@ 0xc2
	 	 	 break;
 8001434:	e00e      	b.n	8001454 <Process_Jbd_Bms_Messages+0x1b0>
 case 0X10C:decode_CAN_0x10C(frame->data,&Bms_Frames.Id_0x10C);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3307      	adds	r3, #7
 800143a:	4914      	ldr	r1, [pc, #80]	@ (800148c <Process_Jbd_Bms_Messages+0x1e8>)
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fd17 	bl	8001e70 <decode_CAN_0x10C>
 Bms_Frames.Id_0x10C.rx_or_not=1;
 8001442:	4a06      	ldr	r2, [pc, #24]	@ (800145c <Process_Jbd_Bms_Messages+0x1b8>)
 8001444:	f892 30d2 	ldrb.w	r3, [r2, #210]	@ 0xd2
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	f882 30d2 	strb.w	r3, [r2, #210]	@ 0xd2
	 	 	 break;
 8001450:	e000      	b.n	8001454 <Process_Jbd_Bms_Messages+0x1b0>
 default :break;
 8001452:	bf00      	nop
 }
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000220 	.word	0x20000220
 8001460:	20000230 	.word	0x20000230
 8001464:	2000023c 	.word	0x2000023c
 8001468:	20000264 	.word	0x20000264
 800146c:	2000026e 	.word	0x2000026e
 8001470:	20000274 	.word	0x20000274
 8001474:	20000284 	.word	0x20000284
 8001478:	20000294 	.word	0x20000294
 800147c:	200002a4 	.word	0x200002a4
 8001480:	200002b4 	.word	0x200002b4
 8001484:	200002c4 	.word	0x200002c4
 8001488:	200002d4 	.word	0x200002d4
 800148c:	200002e4 	.word	0x200002e4

08001490 <decode_CAN_0x100>:
 */


#include"JBD_BMS_MESSAGES.h"
#include"uart.h"
void decode_CAN_0x100(const uint8_t *data, CAN_BMS_0x100_t *msg) {
 8001490:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af04      	add	r7, sp, #16
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
    msg->Total_Voltage = ((data[0] << 8) | data[1]) * 0.01f;   // 10 mV → V
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	021b      	lsls	r3, r3, #8
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	3201      	adds	r2, #1
 80014a6:	7812      	ldrb	r2, [r2, #0]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fba6 	bl	8000bfc <__aeabi_i2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4934      	ldr	r1, [pc, #208]	@ (8001584 <decode_CAN_0x100+0xf4>)
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fbf5 	bl	8000ca4 <__aeabi_fmul>
 80014ba:	4603      	mov	r3, r0
 80014bc:	461a      	mov	r2, r3
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	601a      	str	r2, [r3, #0]
    msg->Charge_and_Discharge_Current =(float)((int16_t)((data[2] << 8) | data[3])) * 0.01f;  // 10 mA → A
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3302      	adds	r3, #2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b21b      	sxth	r3, r3
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3303      	adds	r3, #3
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b21b      	sxth	r3, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fb8e 	bl	8000bfc <__aeabi_i2f>
 80014e0:	4603      	mov	r3, r0
 80014e2:	4928      	ldr	r1, [pc, #160]	@ (8001584 <decode_CAN_0x100+0xf4>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fbdd 	bl	8000ca4 <__aeabi_fmul>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	605a      	str	r2, [r3, #4]
    msg->Remaining_Capacity= (float)(((int16_t)(data[4] << 8) | data[5])) * 0.01f; // 10 mAh → Ah
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3304      	adds	r3, #4
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	021b      	lsls	r3, r3, #8
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3305      	adds	r3, #5
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4313      	orrs	r3, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fb77 	bl	8000bfc <__aeabi_i2f>
 800150e:	4603      	mov	r3, r0
 8001510:	491c      	ldr	r1, [pc, #112]	@ (8001584 <decode_CAN_0x100+0xf4>)
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fbc6 	bl	8000ca4 <__aeabi_fmul>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	609a      	str	r2, [r3, #8]
    msg->CRC_Check   = (data[6] << 8) | data[7];
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3306      	adds	r3, #6
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b21b      	sxth	r3, r3
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3307      	adds	r3, #7
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	b21b      	sxth	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	b21b      	sxth	r3, r3
 8001538:	b29a      	uxth	r2, r3
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	819a      	strh	r2, [r3, #12]
    uart_printf("Total_Voltage=%.2f Vol Charge_and_Discharge_Current=%.2f A Remaining_Capacity=%.2f Ah\n\r",msg->Total_Voltage,msg->Charge_and_Discharge_Current,msg->Remaining_Capacity);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ff70 	bl	8000428 <__aeabi_f2d>
 8001548:	4680      	mov	r8, r0
 800154a:	4689      	mov	r9, r1
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4618      	mov	r0, r3
 8001552:	f7fe ff69 	bl	8000428 <__aeabi_f2d>
 8001556:	4604      	mov	r4, r0
 8001558:	460d      	mov	r5, r1
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ff62 	bl	8000428 <__aeabi_f2d>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800156c:	e9cd 4500 	strd	r4, r5, [sp]
 8001570:	4642      	mov	r2, r8
 8001572:	464b      	mov	r3, r9
 8001574:	4804      	ldr	r0, [pc, #16]	@ (8001588 <decode_CAN_0x100+0xf8>)
 8001576:	f003 fadb 	bl	8004b30 <uart_printf>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001584:	3c23d70a 	.word	0x3c23d70a
 8001588:	08009d60 	.word	0x08009d60

0800158c <decode_CAN_0x101>:
void decode_CAN_0x101(const uint8_t *data, CAN_BMS_0x101_t *msg) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af02      	add	r7, sp, #8
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
    msg->Full_Capacity = ((data[0] << 8) | data[1]) * 0.01f;  // 10 mAh → Ah
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	3201      	adds	r2, #1
 80015a0:	7812      	ldrb	r2, [r2, #0]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fb29 	bl	8000bfc <__aeabi_i2f>
 80015aa:	4603      	mov	r3, r0
 80015ac:	491e      	ldr	r1, [pc, #120]	@ (8001628 <decode_CAN_0x101+0x9c>)
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fb78 	bl	8000ca4 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	461a      	mov	r2, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	601a      	str	r2, [r3, #0]
    msg->No_Cycles        = (data[2] << 8) | data[3];
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3302      	adds	r3, #2
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	021b      	lsls	r3, r3, #8
 80015c6:	b21a      	sxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3303      	adds	r3, #3
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b21b      	sxth	r3, r3
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	809a      	strh	r2, [r3, #4]
    msg->RSOC          = (uint8_t)(((data[4] << 8) | data[5]) & 0xFF); // RSOC in %
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3305      	adds	r3, #5
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	80da      	strh	r2, [r3, #6]
    msg->CRC_Check        = (data[6] << 8) | data[7];
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3306      	adds	r3, #6
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3307      	adds	r3, #7
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	b29a      	uxth	r2, r3
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	811a      	strh	r2, [r3, #8]
    uart_printf("Full_Capacity=%.2f Ah RSOC=%d %\n\r",msg->Full_Capacity,msg->RSOC);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe ff0d 	bl	8000428 <__aeabi_f2d>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	6839      	ldr	r1, [r7, #0]
 8001614:	88c9      	ldrh	r1, [r1, #6]
 8001616:	9100      	str	r1, [sp, #0]
 8001618:	4804      	ldr	r0, [pc, #16]	@ (800162c <decode_CAN_0x101+0xa0>)
 800161a:	f003 fa89 	bl	8004b30 <uart_printf>

}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	3c23d70a 	.word	0x3c23d70a
 800162c:	08009db8 	.word	0x08009db8

08001630 <decode_CAN_0x103>:
    msg->cell_voltage[start_cell - 1] = (data[0] << 8) | data[1];
    msg->cell_voltage[start_cell] = (data[2] << 8) | data[3];
    msg->cell_voltage[start_cell + 1] = (data[4] << 8) | data[5];
    msg->crc_check = (data[6] << 8) | data[7];
}
void decode_CAN_0x103(const uint8_t *data, CAN_BMS_0x103_t *msg) {
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
    // Decode MOS tube status (Bytes 0-1)
    msg->FET_Control_Status = (data[0] << 8) | data[1];
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b21b      	sxth	r3, r3
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	b21a      	sxth	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3301      	adds	r3, #1
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b21b      	sxth	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b21b      	sxth	r3, r3
 8001650:	b29a      	uxth	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	801a      	strh	r2, [r3, #0]
    // Decode Production date (Bytes 2-3)
    msg->Production_Date = (data[2] << 8) | data[3];
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3302      	adds	r3, #2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b21b      	sxth	r3, r3
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3303      	adds	r3, #3
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b21b      	sxth	r3, r3
 800166a:	4313      	orrs	r3, r2
 800166c:	b21a      	sxth	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	805a      	strh	r2, [r3, #2]
    // Decode Software version (Bytes 4-5)
    msg->Software_Version = (data[4] << 8) | data[5];
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3304      	adds	r3, #4
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b21b      	sxth	r3, r3
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	b21a      	sxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3305      	adds	r3, #5
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	b21b      	sxth	r3, r3
 8001686:	4313      	orrs	r3, r2
 8001688:	b21b      	sxth	r3, r3
 800168a:	b29a      	uxth	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	809a      	strh	r2, [r3, #4]
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3306      	adds	r3, #6
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b21b      	sxth	r3, r3
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	b21a      	sxth	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3307      	adds	r3, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	80da      	strh	r2, [r3, #6]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <decode_CAN_0x102>:
void decode_CAN_0x102(const uint8_t *data, CAN_BMS_0x102_t *msg) {
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
    // Decode equalization status for cells 1-16 (BYTE0 - BYTE1)
    uint16_t status_low_byte = (data[0] << 8) | data[1];
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3301      	adds	r3, #1
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	4313      	orrs	r3, r2
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 16; ++i) {
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	e012      	b.n	8001706 <decode_CAN_0x102+0x4e>
        msg->Equlization_Low_byte[i] = (status_low_byte >> i) & 1;
 80016e0:	89fa      	ldrh	r2, [r7, #14]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	fa42 f303 	asr.w	r3, r2, r3
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf14      	ite	ne
 80016f0:	2301      	movne	r3, #1
 80016f2:	2300      	moveq	r3, #0
 80016f4:	b2d9      	uxtb	r1, r3
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	4413      	add	r3, r2
 80016fc:	460a      	mov	r2, r1
 80016fe:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 16; ++i) {
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	dde9      	ble.n	80016e0 <decode_CAN_0x102+0x28>
    }
    // Decode equalization status for cells 17-33 (BYTE2 - BYTE3)
    uint16_t status_high_byte = (data[2] << 8) | data[3];
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3302      	adds	r3, #2
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	b21b      	sxth	r3, r3
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b21a      	sxth	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3303      	adds	r3, #3
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b21b      	sxth	r3, r3
 8001720:	4313      	orrs	r3, r2
 8001722:	b21b      	sxth	r3, r3
 8001724:	81bb      	strh	r3, [r7, #12]
    for (int i = 0; i < 17; ++i) {
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	e011      	b.n	8001750 <decode_CAN_0x102+0x98>
        msg->Equlization_Low_byte[16 + i] = (status_high_byte >> i) & 1;
 800172c:	89ba      	ldrh	r2, [r7, #12]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	fa42 f303 	asr.w	r3, r2, r3
 8001734:	f003 0201 	and.w	r2, r3, #1
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	3310      	adds	r3, #16
 800173c:	2a00      	cmp	r2, #0
 800173e:	bf14      	ite	ne
 8001740:	2201      	movne	r2, #1
 8001742:	2200      	moveq	r2, #0
 8001744:	b2d1      	uxtb	r1, r2
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < 17; ++i) {
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	3301      	adds	r3, #1
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	2b10      	cmp	r3, #16
 8001754:	ddea      	ble.n	800172c <decode_CAN_0x102+0x74>
    }
    // Decode protection status (BYTE4 - BYTE5)
    msg->Protection_Status = (data[4] << 8) | data[5];
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3304      	adds	r3, #4
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	b21b      	sxth	r3, r3
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b21a      	sxth	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3305      	adds	r3, #5
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b21b      	sxth	r3, r3
 800176a:	4313      	orrs	r3, r2
 800176c:	b21b      	sxth	r3, r3
 800176e:	b29a      	uxth	r2, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	845a      	strh	r2, [r3, #34]	@ 0x22
    // Decode CRC_16 check value (BYTE6 - BYTE7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	3306      	adds	r3, #6
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b21b      	sxth	r3, r3
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21a      	sxth	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3307      	adds	r3, #7
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b21b      	sxth	r3, r3
 8001788:	4313      	orrs	r3, r2
 800178a:	b21b      	sxth	r3, r3
 800178c:	b29a      	uxth	r2, r3
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 8001792:	bf00      	nop
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <decode_CAN_0x104>:
void decode_CAN_0x104(const uint8_t *data, CAN_BMS_0x104_t *msg) {
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
    // Decode Number of battery strings (BYTE0)
    msg->Number_Of_Battery_Strings = data[0];
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	781a      	ldrb	r2, [r3, #0]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	701a      	strb	r2, [r3, #0]
    // Decode Number of NTC probes (BYTE1)
    msg->NTC_Number_Probes = data[1];
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3301      	adds	r3, #1
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	705a      	strb	r2, [r3, #1]
    // Decode CRC_16 check value (Bytes 2-3)
    // Assuming a 16-bit CRC value from bytes 2 and 3
    msg->CRC_Check = (data[2] << 8) | data[3];
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3302      	adds	r3, #2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b21b      	sxth	r3, r3
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3303      	adds	r3, #3
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	4313      	orrs	r3, r2
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	805a      	strh	r2, [r3, #2]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <decode_CAN_0x105>:
void decode_CAN_0x105(const uint8_t *data, CAN_BMS_0x105_t *msg) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
    // Decode temperature value of NTC1 (Bytes 0-1)
    // The raw value is in 0.1K.
    // Convert to Celsius: (Value * 0.1) - 273.15
    uint16_t raw_ntc1_temp = (data[0] << 8) | data[1];
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3301      	adds	r3, #1
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b21b      	sxth	r3, r3
 80017fc:	4313      	orrs	r3, r2
 80017fe:	b21b      	sxth	r3, r3
 8001800:	81fb      	strh	r3, [r7, #14]
    msg->NTC1 = (raw_ntc1_temp * 0.1f) - 273.15f;
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff f9f9 	bl	8000bfc <__aeabi_i2f>
 800180a:	4603      	mov	r3, r0
 800180c:	492e      	ldr	r1, [pc, #184]	@ (80018c8 <decode_CAN_0x105+0xe8>)
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fa48 	bl	8000ca4 <__aeabi_fmul>
 8001814:	4603      	mov	r3, r0
 8001816:	492d      	ldr	r1, [pc, #180]	@ (80018cc <decode_CAN_0x105+0xec>)
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff f939 	bl	8000a90 <__aeabi_fsub>
 800181e:	4603      	mov	r3, r0
 8001820:	461a      	mov	r2, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	601a      	str	r2, [r3, #0]
    // Decode temperature value of NTC2 (Bytes 2-3)
    uint16_t raw_ntc2_temp = (data[2] << 8) | data[3];
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3302      	adds	r3, #2
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b21b      	sxth	r3, r3
 800182e:	021b      	lsls	r3, r3, #8
 8001830:	b21a      	sxth	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	3303      	adds	r3, #3
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b21b      	sxth	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	b21b      	sxth	r3, r3
 800183e:	81bb      	strh	r3, [r7, #12]
    msg->NTC2 = (raw_ntc2_temp * 0.1f) - 273.15f;
 8001840:	89bb      	ldrh	r3, [r7, #12]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f9da 	bl	8000bfc <__aeabi_i2f>
 8001848:	4603      	mov	r3, r0
 800184a:	491f      	ldr	r1, [pc, #124]	@ (80018c8 <decode_CAN_0x105+0xe8>)
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fa29 	bl	8000ca4 <__aeabi_fmul>
 8001852:	4603      	mov	r3, r0
 8001854:	491d      	ldr	r1, [pc, #116]	@ (80018cc <decode_CAN_0x105+0xec>)
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f91a 	bl	8000a90 <__aeabi_fsub>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	605a      	str	r2, [r3, #4]
    // Decode temperature value of NTC3 (Bytes 4-5)
    uint16_t raw_ntc3_temp = (data[4] << 8) | data[5];
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3304      	adds	r3, #4
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b21b      	sxth	r3, r3
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b21a      	sxth	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3305      	adds	r3, #5
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b21b      	sxth	r3, r3
 8001878:	4313      	orrs	r3, r2
 800187a:	b21b      	sxth	r3, r3
 800187c:	817b      	strh	r3, [r7, #10]
    msg->NTC3 = (raw_ntc3_temp * 0.1f) - 273.15f;
 800187e:	897b      	ldrh	r3, [r7, #10]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f9bb 	bl	8000bfc <__aeabi_i2f>
 8001886:	4603      	mov	r3, r0
 8001888:	490f      	ldr	r1, [pc, #60]	@ (80018c8 <decode_CAN_0x105+0xe8>)
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fa0a 	bl	8000ca4 <__aeabi_fmul>
 8001890:	4603      	mov	r3, r0
 8001892:	490e      	ldr	r1, [pc, #56]	@ (80018cc <decode_CAN_0x105+0xec>)
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff f8fb 	bl	8000a90 <__aeabi_fsub>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	609a      	str	r2, [r3, #8]
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3306      	adds	r3, #6
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3307      	adds	r3, #7
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	819a      	strh	r2, [r3, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	3dcccccd 	.word	0x3dcccccd
 80018cc:	43889333 	.word	0x43889333

080018d0 <decode_CAN_0x106>:
void decode_CAN_0x106(const uint8_t *data, CAN_BMS_0x106_t *msg) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
    // Decode temperature value of NTC4 (Bytes 0-1)
    // The raw value is in 0.1K.
    // Convert to Celsius: (Value * 0.1) - 273.15
    uint16_t raw_ntc4_temp = (data[0] << 8) | data[1];
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	b21b      	sxth	r3, r3
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	b21a      	sxth	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3301      	adds	r3, #1
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	81fb      	strh	r3, [r7, #14]
    msg->NTC4 = (raw_ntc4_temp * 0.1f) - 273.15f;
 80018f2:	89fb      	ldrh	r3, [r7, #14]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff f981 	bl	8000bfc <__aeabi_i2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	492e      	ldr	r1, [pc, #184]	@ (80019b8 <decode_CAN_0x106+0xe8>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f9d0 	bl	8000ca4 <__aeabi_fmul>
 8001904:	4603      	mov	r3, r0
 8001906:	492d      	ldr	r1, [pc, #180]	@ (80019bc <decode_CAN_0x106+0xec>)
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff f8c1 	bl	8000a90 <__aeabi_fsub>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	601a      	str	r2, [r3, #0]
    // Decode temperature value of NTC5 (Bytes 2-3)
    uint16_t raw_ntc5_temp = (data[2] << 8) | data[3];
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3302      	adds	r3, #2
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b21b      	sxth	r3, r3
 800191e:	021b      	lsls	r3, r3, #8
 8001920:	b21a      	sxth	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3303      	adds	r3, #3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	b21b      	sxth	r3, r3
 800192a:	4313      	orrs	r3, r2
 800192c:	b21b      	sxth	r3, r3
 800192e:	81bb      	strh	r3, [r7, #12]
    msg->NTC5 = (raw_ntc5_temp * 0.1f) - 273.15f;
 8001930:	89bb      	ldrh	r3, [r7, #12]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f962 	bl	8000bfc <__aeabi_i2f>
 8001938:	4603      	mov	r3, r0
 800193a:	491f      	ldr	r1, [pc, #124]	@ (80019b8 <decode_CAN_0x106+0xe8>)
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff f9b1 	bl	8000ca4 <__aeabi_fmul>
 8001942:	4603      	mov	r3, r0
 8001944:	491d      	ldr	r1, [pc, #116]	@ (80019bc <decode_CAN_0x106+0xec>)
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff f8a2 	bl	8000a90 <__aeabi_fsub>
 800194c:	4603      	mov	r3, r0
 800194e:	461a      	mov	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	605a      	str	r2, [r3, #4]
    // Decode temperature value of NTC6 (Bytes 4-5)
    uint16_t raw_ntc6_temp = (data[4] << 8) | data[5];
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3304      	adds	r3, #4
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b21b      	sxth	r3, r3
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b21a      	sxth	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3305      	adds	r3, #5
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b21b      	sxth	r3, r3
 8001968:	4313      	orrs	r3, r2
 800196a:	b21b      	sxth	r3, r3
 800196c:	817b      	strh	r3, [r7, #10]
    msg->NTC6 = (raw_ntc6_temp * 0.1f) - 273.15f;
 800196e:	897b      	ldrh	r3, [r7, #10]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f943 	bl	8000bfc <__aeabi_i2f>
 8001976:	4603      	mov	r3, r0
 8001978:	490f      	ldr	r1, [pc, #60]	@ (80019b8 <decode_CAN_0x106+0xe8>)
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f992 	bl	8000ca4 <__aeabi_fmul>
 8001980:	4603      	mov	r3, r0
 8001982:	490e      	ldr	r1, [pc, #56]	@ (80019bc <decode_CAN_0x106+0xec>)
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f883 	bl	8000a90 <__aeabi_fsub>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	609a      	str	r2, [r3, #8]
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3306      	adds	r3, #6
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b21b      	sxth	r3, r3
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	b21a      	sxth	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3307      	adds	r3, #7
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	819a      	strh	r2, [r3, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	3dcccccd 	.word	0x3dcccccd
 80019bc:	43889333 	.word	0x43889333

080019c0 <decode_CAN_0x107>:
void decode_CAN_0x107(const uint8_t *data, CAN_BMS_0x107_t *msg) {
 80019c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af04      	add	r7, sp, #16
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
    // Decode Cell1 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
    msg->CELL1 = (float)((data[0] << 8) | data[1])/1000.f;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	3201      	adds	r2, #1
 80019d6:	7812      	ldrb	r2, [r2, #0]
 80019d8:	4313      	orrs	r3, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff f90e 	bl	8000bfc <__aeabi_i2f>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4931      	ldr	r1, [pc, #196]	@ (8001aa8 <decode_CAN_0x107+0xe8>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fa11 	bl	8000e0c <__aeabi_fdiv>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	601a      	str	r2, [r3, #0]
    // Decode Cell2 voltage (Bytes 2-3)
    msg->CELL2 = (float)((data[2] << 8) | data[3])/1000.0f;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3302      	adds	r3, #2
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	021b      	lsls	r3, r3, #8
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	3203      	adds	r2, #3
 80019fe:	7812      	ldrb	r2, [r2, #0]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f8fa 	bl	8000bfc <__aeabi_i2f>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4927      	ldr	r1, [pc, #156]	@ (8001aa8 <decode_CAN_0x107+0xe8>)
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff f9fd 	bl	8000e0c <__aeabi_fdiv>
 8001a12:	4603      	mov	r3, r0
 8001a14:	461a      	mov	r2, r3
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	605a      	str	r2, [r3, #4]
    // Decode Cell3 voltage (Bytes 4-5)
    msg->CELL3 = (float)((data[4] << 8) | data[5])/1000.0f;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	3205      	adds	r2, #5
 8001a26:	7812      	ldrb	r2, [r2, #0]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff f8e6 	bl	8000bfc <__aeabi_i2f>
 8001a30:	4603      	mov	r3, r0
 8001a32:	491d      	ldr	r1, [pc, #116]	@ (8001aa8 <decode_CAN_0x107+0xe8>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff f9e9 	bl	8000e0c <__aeabi_fdiv>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	609a      	str	r2, [r3, #8]
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3306      	adds	r3, #6
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	021b      	lsls	r3, r3, #8
 8001a4c:	b21a      	sxth	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3307      	adds	r3, #7
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	4313      	orrs	r3, r2
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	819a      	strh	r2, [r3, #12]
    uart_printf("CELL1=%.2f v CELL2=%.2f v CELL3=%.2f v \n\r",msg->CELL1,msg->CELL2,msg->CELL3);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fcdf 	bl	8000428 <__aeabi_f2d>
 8001a6a:	4680      	mov	r8, r0
 8001a6c:	4689      	mov	r9, r1
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fcd8 	bl	8000428 <__aeabi_f2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fcd1 	bl	8000428 <__aeabi_f2d>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a8e:	e9cd 4500 	strd	r4, r5, [sp]
 8001a92:	4642      	mov	r2, r8
 8001a94:	464b      	mov	r3, r9
 8001a96:	4805      	ldr	r0, [pc, #20]	@ (8001aac <decode_CAN_0x107+0xec>)
 8001a98:	f003 f84a 	bl	8004b30 <uart_printf>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aa6:	bf00      	nop
 8001aa8:	447a0000 	.word	0x447a0000
 8001aac:	08009ddc 	.word	0x08009ddc

08001ab0 <decode_CAN_0x108>:

void decode_CAN_0x108(const uint8_t *data, CAN_BMS_0x108_t *msg) {
 8001ab0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af04      	add	r7, sp, #16
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
    // Decode Cell4 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
    msg->CELL4 =  (float)((data[0] << 8) | data[1])/1000.f;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	3201      	adds	r2, #1
 8001ac6:	7812      	ldrb	r2, [r2, #0]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff f896 	bl	8000bfc <__aeabi_i2f>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4931      	ldr	r1, [pc, #196]	@ (8001b98 <decode_CAN_0x108+0xe8>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff f999 	bl	8000e0c <__aeabi_fdiv>
 8001ada:	4603      	mov	r3, r0
 8001adc:	461a      	mov	r2, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	601a      	str	r2, [r3, #0]

    // Decode Cell5 voltage (Bytes 2-3)
    msg->CELL5 =(float)((data[2] << 8) | data[3])/1000.0f;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	3203      	adds	r2, #3
 8001aee:	7812      	ldrb	r2, [r2, #0]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f882 	bl	8000bfc <__aeabi_i2f>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4927      	ldr	r1, [pc, #156]	@ (8001b98 <decode_CAN_0x108+0xe8>)
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff f985 	bl	8000e0c <__aeabi_fdiv>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	605a      	str	r2, [r3, #4]
    // Decode Cell6 voltage (Bytes 4-5)
    msg->CELL6 = (float)((data[4] << 8) | data[5])/1000.0f;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	3205      	adds	r2, #5
 8001b16:	7812      	ldrb	r2, [r2, #0]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f86e 	bl	8000bfc <__aeabi_i2f>
 8001b20:	4603      	mov	r3, r0
 8001b22:	491d      	ldr	r1, [pc, #116]	@ (8001b98 <decode_CAN_0x108+0xe8>)
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff f971 	bl	8000e0c <__aeabi_fdiv>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	609a      	str	r2, [r3, #8]

    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3306      	adds	r3, #6
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	b21a      	sxth	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3307      	adds	r3, #7
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4313      	orrs	r3, r2
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	819a      	strh	r2, [r3, #12]
    uart_printf("CELL4=%.2f v CELL5=%.2f v CELL6=%.2f v \n\r",msg->CELL4,msg->CELL5,msg->CELL6);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fc67 	bl	8000428 <__aeabi_f2d>
 8001b5a:	4680      	mov	r8, r0
 8001b5c:	4689      	mov	r9, r1
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fc60 	bl	8000428 <__aeabi_f2d>
 8001b68:	4604      	mov	r4, r0
 8001b6a:	460d      	mov	r5, r1
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fc59 	bl	8000428 <__aeabi_f2d>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001b7e:	e9cd 4500 	strd	r4, r5, [sp]
 8001b82:	4642      	mov	r2, r8
 8001b84:	464b      	mov	r3, r9
 8001b86:	4805      	ldr	r0, [pc, #20]	@ (8001b9c <decode_CAN_0x108+0xec>)
 8001b88:	f002 ffd2 	bl	8004b30 <uart_printf>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b96:	bf00      	nop
 8001b98:	447a0000 	.word	0x447a0000
 8001b9c:	08009e08 	.word	0x08009e08

08001ba0 <decode_CAN_0x109>:
void decode_CAN_0x109(const uint8_t *data, CAN_BMS_0x109_t *msg) {
 8001ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af04      	add	r7, sp, #16
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
    // Decode Cell6 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
    msg->CELL7 = (float)((data[0] << 8) | data[1])/1000.f;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	3201      	adds	r2, #1
 8001bb6:	7812      	ldrb	r2, [r2, #0]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f81e 	bl	8000bfc <__aeabi_i2f>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4931      	ldr	r1, [pc, #196]	@ (8001c88 <decode_CAN_0x109+0xe8>)
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff f921 	bl	8000e0c <__aeabi_fdiv>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	601a      	str	r2, [r3, #0]
    // Decode Cell7 voltage (Bytes 2-3)
    msg->CELL8 = (float)((data[2] << 8) | data[3])/1000.0f;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	3203      	adds	r2, #3
 8001bde:	7812      	ldrb	r2, [r2, #0]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f80a 	bl	8000bfc <__aeabi_i2f>
 8001be8:	4603      	mov	r3, r0
 8001bea:	4927      	ldr	r1, [pc, #156]	@ (8001c88 <decode_CAN_0x109+0xe8>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff f90d 	bl	8000e0c <__aeabi_fdiv>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	605a      	str	r2, [r3, #4]

    // Decode Cell8 voltage (Bytes 4-5)
    msg->CELL9 = (float)((data[4] << 8) | data[5])/1000.0f;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	3205      	adds	r2, #5
 8001c06:	7812      	ldrb	r2, [r2, #0]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fff6 	bl	8000bfc <__aeabi_i2f>
 8001c10:	4603      	mov	r3, r0
 8001c12:	491d      	ldr	r1, [pc, #116]	@ (8001c88 <decode_CAN_0x109+0xe8>)
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff f8f9 	bl	8000e0c <__aeabi_fdiv>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	609a      	str	r2, [r3, #8]

    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3306      	adds	r3, #6
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	b21a      	sxth	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3307      	adds	r3, #7
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	4313      	orrs	r3, r2
 8001c38:	b21b      	sxth	r3, r3
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	819a      	strh	r2, [r3, #12]
    uart_printf("CELL7=%.2f v CELL8=%.2f v CELL9=%.2f v \n\r",msg->CELL7,msg->CELL8,msg->CELL9);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fbef 	bl	8000428 <__aeabi_f2d>
 8001c4a:	4680      	mov	r8, r0
 8001c4c:	4689      	mov	r9, r1
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fbe8 	bl	8000428 <__aeabi_f2d>
 8001c58:	4604      	mov	r4, r0
 8001c5a:	460d      	mov	r5, r1
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fbe1 	bl	8000428 <__aeabi_f2d>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c6e:	e9cd 4500 	strd	r4, r5, [sp]
 8001c72:	4642      	mov	r2, r8
 8001c74:	464b      	mov	r3, r9
 8001c76:	4805      	ldr	r0, [pc, #20]	@ (8001c8c <decode_CAN_0x109+0xec>)
 8001c78:	f002 ff5a 	bl	8004b30 <uart_printf>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c86:	bf00      	nop
 8001c88:	447a0000 	.word	0x447a0000
 8001c8c:	08009e34 	.word	0x08009e34

08001c90 <decode_CAN_0x10A>:
void decode_CAN_0x10A(const uint8_t *data, CAN_BMS_0x10A_t *msg) {
 8001c90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af04      	add	r7, sp, #16
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
    // Decode Cell10 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
    msg->CELL10 =  (float)((data[0] << 8) | data[1])/1000.f;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	3201      	adds	r2, #1
 8001ca6:	7812      	ldrb	r2, [r2, #0]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe ffa6 	bl	8000bfc <__aeabi_i2f>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4931      	ldr	r1, [pc, #196]	@ (8001d78 <decode_CAN_0x10A+0xe8>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff f8a9 	bl	8000e0c <__aeabi_fdiv>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	601a      	str	r2, [r3, #0]

    // Decode Cell11 voltage (Bytes 2-3)
    msg->CELL11 = (float)((data[2] << 8) | data[3])/1000.0f;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	3203      	adds	r2, #3
 8001cce:	7812      	ldrb	r2, [r2, #0]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe ff92 	bl	8000bfc <__aeabi_i2f>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4927      	ldr	r1, [pc, #156]	@ (8001d78 <decode_CAN_0x10A+0xe8>)
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff f895 	bl	8000e0c <__aeabi_fdiv>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	605a      	str	r2, [r3, #4]

    // Decode Cell12 voltage (Bytes 4-5)
    msg->CELL12 = (float)((data[4] << 8) | data[5])/1000.0f;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3304      	adds	r3, #4
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	3205      	adds	r2, #5
 8001cf6:	7812      	ldrb	r2, [r2, #0]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe ff7e 	bl	8000bfc <__aeabi_i2f>
 8001d00:	4603      	mov	r3, r0
 8001d02:	491d      	ldr	r1, [pc, #116]	@ (8001d78 <decode_CAN_0x10A+0xe8>)
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff f881 	bl	8000e0c <__aeabi_fdiv>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	609a      	str	r2, [r3, #8]

    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	3306      	adds	r3, #6
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b21b      	sxth	r3, r3
 8001d1a:	021b      	lsls	r3, r3, #8
 8001d1c:	b21a      	sxth	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3307      	adds	r3, #7
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	b21b      	sxth	r3, r3
 8001d26:	4313      	orrs	r3, r2
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	819a      	strh	r2, [r3, #12]
    uart_printf("CELL10=%.2f v CELL11=%.2f v CELL12=%.2f v \n\r",msg->CELL10,msg->CELL11,msg->CELL12);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fb77 	bl	8000428 <__aeabi_f2d>
 8001d3a:	4680      	mov	r8, r0
 8001d3c:	4689      	mov	r9, r1
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fb70 	bl	8000428 <__aeabi_f2d>
 8001d48:	4604      	mov	r4, r0
 8001d4a:	460d      	mov	r5, r1
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fb69 	bl	8000428 <__aeabi_f2d>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001d5e:	e9cd 4500 	strd	r4, r5, [sp]
 8001d62:	4642      	mov	r2, r8
 8001d64:	464b      	mov	r3, r9
 8001d66:	4805      	ldr	r0, [pc, #20]	@ (8001d7c <decode_CAN_0x10A+0xec>)
 8001d68:	f002 fee2 	bl	8004b30 <uart_printf>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d76:	bf00      	nop
 8001d78:	447a0000 	.word	0x447a0000
 8001d7c:	08009e60 	.word	0x08009e60

08001d80 <decode_CAN_0x10B>:
void decode_CAN_0x10B(const uint8_t *data, CAN_BMS_0x10B_t *msg) {
 8001d80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af04      	add	r7, sp, #16
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
    // Decode Cell13 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
    msg->CELL13 =  (float)((data[0] << 8) | data[1])/1000.f;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	3201      	adds	r2, #1
 8001d96:	7812      	ldrb	r2, [r2, #0]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe ff2e 	bl	8000bfc <__aeabi_i2f>
 8001da0:	4603      	mov	r3, r0
 8001da2:	4931      	ldr	r1, [pc, #196]	@ (8001e68 <decode_CAN_0x10B+0xe8>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff f831 	bl	8000e0c <__aeabi_fdiv>
 8001daa:	4603      	mov	r3, r0
 8001dac:	461a      	mov	r2, r3
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	601a      	str	r2, [r3, #0]
    // Decode Cell14 voltage (Bytes 2-3)
    msg->CELL14 = (float)((data[2] << 8) | data[3])/1000.0f;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3302      	adds	r3, #2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	3203      	adds	r2, #3
 8001dbe:	7812      	ldrb	r2, [r2, #0]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe ff1a 	bl	8000bfc <__aeabi_i2f>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4927      	ldr	r1, [pc, #156]	@ (8001e68 <decode_CAN_0x10B+0xe8>)
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff f81d 	bl	8000e0c <__aeabi_fdiv>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
    // Decode Cell15 voltage (Bytes 4-5)
    msg->CELL15 = (float)((data[4] << 8) | data[5])/1000.0f;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	3205      	adds	r2, #5
 8001de6:	7812      	ldrb	r2, [r2, #0]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe ff06 	bl	8000bfc <__aeabi_i2f>
 8001df0:	4603      	mov	r3, r0
 8001df2:	491d      	ldr	r1, [pc, #116]	@ (8001e68 <decode_CAN_0x10B+0xe8>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f809 	bl	8000e0c <__aeabi_fdiv>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	609a      	str	r2, [r3, #8]
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3306      	adds	r3, #6
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b21b      	sxth	r3, r3
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	b21a      	sxth	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3307      	adds	r3, #7
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	b21b      	sxth	r3, r3
 8001e16:	4313      	orrs	r3, r2
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	819a      	strh	r2, [r3, #12]
    uart_printf("CELL13=%.2f v CELL14=%.2f v CELL15=%.2f v \n\r",msg->CELL13,msg->CELL14,msg->CELL15);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe faff 	bl	8000428 <__aeabi_f2d>
 8001e2a:	4680      	mov	r8, r0
 8001e2c:	4689      	mov	r9, r1
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe faf8 	bl	8000428 <__aeabi_f2d>
 8001e38:	4604      	mov	r4, r0
 8001e3a:	460d      	mov	r5, r1
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe faf1 	bl	8000428 <__aeabi_f2d>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001e4e:	e9cd 4500 	strd	r4, r5, [sp]
 8001e52:	4642      	mov	r2, r8
 8001e54:	464b      	mov	r3, r9
 8001e56:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <decode_CAN_0x10B+0xec>)
 8001e58:	f002 fe6a 	bl	8004b30 <uart_printf>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e66:	bf00      	nop
 8001e68:	447a0000 	.word	0x447a0000
 8001e6c:	08009e90 	.word	0x08009e90

08001e70 <decode_CAN_0x10C>:
void decode_CAN_0x10C(const uint8_t *data, CAN_BMS_0x10C_t *msg) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
    // Decode Cell16 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
    msg->CELL16 =  (float)((data[0] << 8) | data[1])/1000.f;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	3201      	adds	r2, #1
 8001e84:	7812      	ldrb	r2, [r2, #0]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe feb7 	bl	8000bfc <__aeabi_i2f>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	4926      	ldr	r1, [pc, #152]	@ (8001f2c <decode_CAN_0x10C+0xbc>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe ffba 	bl	8000e0c <__aeabi_fdiv>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	601a      	str	r2, [r3, #0]

    // Decode Cell17 voltage (Bytes 2-3)
    msg->CELL17 = (float)((data[2] << 8) | data[3])/1000.0f;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3302      	adds	r3, #2
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	3203      	adds	r2, #3
 8001eac:	7812      	ldrb	r2, [r2, #0]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fea3 	bl	8000bfc <__aeabi_i2f>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	491c      	ldr	r1, [pc, #112]	@ (8001f2c <decode_CAN_0x10C+0xbc>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe ffa6 	bl	8000e0c <__aeabi_fdiv>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	605a      	str	r2, [r3, #4]

    // Decode Cell3 voltage (Bytes 4-5)
    msg->CELL18 = (float)((data[4] << 8) | data[5])/1000.0f;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	3205      	adds	r2, #5
 8001ed4:	7812      	ldrb	r2, [r2, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fe8f 	bl	8000bfc <__aeabi_i2f>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4912      	ldr	r1, [pc, #72]	@ (8001f2c <decode_CAN_0x10C+0xbc>)
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe ff92 	bl	8000e0c <__aeabi_fdiv>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	461a      	mov	r2, r3
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	609a      	str	r2, [r3, #8]

    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3306      	adds	r3, #6
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	b21b      	sxth	r3, r3
 8001ef8:	021b      	lsls	r3, r3, #8
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3307      	adds	r3, #7
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	b21b      	sxth	r3, r3
 8001f04:	4313      	orrs	r3, r2
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	819a      	strh	r2, [r3, #12]
    uart_printf("CELL16=%.2f v \n\r",msg->CELL16);
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fa88 	bl	8000428 <__aeabi_f2d>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4804      	ldr	r0, [pc, #16]	@ (8001f30 <decode_CAN_0x10C+0xc0>)
 8001f1e:	f002 fe07 	bl	8004b30 <uart_printf>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	447a0000 	.word	0x447a0000
 8001f30:	08009ec0 	.word	0x08009ec0

08001f34 <matel_mcu_process_can_frame>:
#include"MCU_ELECTROCATLYST.h"
#include"can.h"
#include"uart.h"

DBC_AllMessages_t msg;
void matel_mcu_process_can_frame(can_frame_t *frame){
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	switch(frame->id){
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a48      	ldr	r2, [pc, #288]	@ (8002064 <matel_mcu_process_can_frame+0x130>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d07e      	beq.n	8002044 <matel_mcu_process_can_frame+0x110>
 8001f46:	4a47      	ldr	r2, [pc, #284]	@ (8002064 <matel_mcu_process_can_frame+0x130>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	f200 8087 	bhi.w	800205c <matel_mcu_process_can_frame+0x128>
 8001f4e:	2bb3      	cmp	r3, #179	@ 0xb3
 8001f50:	d82e      	bhi.n	8001fb0 <matel_mcu_process_can_frame+0x7c>
 8001f52:	2ba1      	cmp	r3, #161	@ 0xa1
 8001f54:	f0c0 8082 	bcc.w	800205c <matel_mcu_process_can_frame+0x128>
 8001f58:	3ba1      	subs	r3, #161	@ 0xa1
 8001f5a:	2b12      	cmp	r3, #18
 8001f5c:	d87e      	bhi.n	800205c <matel_mcu_process_can_frame+0x128>
 8001f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8001f64 <matel_mcu_process_can_frame+0x30>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08001fb9 	.word	0x08001fb9
 8001f68:	0800205d 	.word	0x0800205d
 8001f6c:	0800205d 	.word	0x0800205d
 8001f70:	0800205d 	.word	0x0800205d
 8001f74:	0800205d 	.word	0x0800205d
 8001f78:	0800205d 	.word	0x0800205d
 8001f7c:	0800205d 	.word	0x0800205d
 8001f80:	0800205d 	.word	0x0800205d
 8001f84:	0800205d 	.word	0x0800205d
 8001f88:	0800205d 	.word	0x0800205d
 8001f8c:	0800205d 	.word	0x0800205d
 8001f90:	0800205d 	.word	0x0800205d
 8001f94:	0800205d 	.word	0x0800205d
 8001f98:	08001fd5 	.word	0x08001fd5
 8001f9c:	08001ff1 	.word	0x08001ff1
 8001fa0:	0800205d 	.word	0x0800205d
 8001fa4:	0800205d 	.word	0x0800205d
 8001fa8:	0800205d 	.word	0x0800205d
 8001fac:	0800200d 	.word	0x0800200d
 8001fb0:	4a2d      	ldr	r2, [pc, #180]	@ (8002068 <matel_mcu_process_can_frame+0x134>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d038      	beq.n	8002028 <matel_mcu_process_can_frame+0xf4>
                                 msg.MCU_Stat_Two.rx_or_not=1;
		                                       break;

	}

}
 8001fb6:	e051      	b.n	800205c <matel_mcu_process_can_frame+0x128>
	case Matel_MCU_POWER_CAN_STD_ID_A1:decode_MCU_POWER_One(frame->data,&msg.MCU_POWER_One);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3307      	adds	r3, #7
 8001fbc:	492b      	ldr	r1, [pc, #172]	@ (800206c <matel_mcu_process_can_frame+0x138>)
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fc0e 	bl	80027e0 <decode_MCU_POWER_One>
	                              msg.MCU_POWER_One.rx_or_not=1;
 8001fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8002070 <matel_mcu_process_can_frame+0x13c>)
 8001fc6:	f892 31f8 	ldrb.w	r3, [r2, #504]	@ 0x1f8
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	f882 31f8 	strb.w	r3, [r2, #504]	@ 0x1f8
		                                break;
 8001fd2:	e043      	b.n	800205c <matel_mcu_process_can_frame+0x128>
	case Matel_MCU_FAULT_one_CAN_STD_ID_AE:decode_MCU_FAULT_One(frame->data, &msg.MCU_FAULT_One);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3307      	adds	r3, #7
 8001fd8:	4926      	ldr	r1, [pc, #152]	@ (8002074 <matel_mcu_process_can_frame+0x140>)
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fa67 	bl	80024ae <decode_MCU_FAULT_One>
                                  msg.MCU_FAULT_One.rx_or_not=1;
 8001fe0:	4a23      	ldr	r2, [pc, #140]	@ (8002070 <matel_mcu_process_can_frame+0x13c>)
 8001fe2:	f892 31c8 	ldrb.w	r3, [r2, #456]	@ 0x1c8
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	f882 31c8 	strb.w	r3, [r2, #456]	@ 0x1c8
		                                  break;
 8001fee:	e035      	b.n	800205c <matel_mcu_process_can_frame+0x128>
	case Matel_MCU_FAULT_two_CAN_STD_ID_AF:decode_MCU_FAULT_two(frame->data,&msg.MCU_FAULT_two);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3307      	adds	r3, #7
 8001ff4:	4920      	ldr	r1, [pc, #128]	@ (8002078 <matel_mcu_process_can_frame+0x144>)
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 faf7 	bl	80025ea <decode_MCU_FAULT_two>
                                   msg.MCU_FAULT_two.rx_or_not=1;
 8001ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8002070 <matel_mcu_process_can_frame+0x13c>)
 8001ffe:	f892 3184 	ldrb.w	r3, [r2, #388]	@ 0x184
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	f882 3184 	strb.w	r3, [r2, #388]	@ 0x184
		                                  break;
 800200a:	e027      	b.n	800205c <matel_mcu_process_can_frame+0x128>
	case Matel_MCU_Fault_Code_CAN_STD_ID_B3:decode_MCU_Fault_Code(frame->data, &msg.MCU_Fault_Code);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3307      	adds	r3, #7
 8002010:	491a      	ldr	r1, [pc, #104]	@ (800207c <matel_mcu_process_can_frame+0x148>)
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f96e 	bl	80022f4 <decode_MCU_Fault_Code>
                                    msg.MCU_Fault_Code.rx_or_not=1;
 8002018:	4a15      	ldr	r2, [pc, #84]	@ (8002070 <matel_mcu_process_can_frame+0x13c>)
 800201a:	f892 3080 	ldrb.w	r3, [r2, #128]	@ 0x80
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
		                                   break;
 8002026:	e019      	b.n	800205c <matel_mcu_process_can_frame+0x128>
	case Matel_MCU_Stat_One_CAN_EXTD_ID_18265040:decode_MCU_Stat_One(frame->data, &msg.MCU_Stat_One);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3307      	adds	r3, #7
 800202c:	4914      	ldr	r1, [pc, #80]	@ (8002080 <matel_mcu_process_can_frame+0x14c>)
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fb72 	bl	8002718 <decode_MCU_Stat_One>
                                     msg.MCU_Stat_One.rx_or_not=1;
 8002034:	4a0e      	ldr	r2, [pc, #56]	@ (8002070 <matel_mcu_process_can_frame+0x13c>)
 8002036:	f892 3140 	ldrb.w	r3, [r2, #320]	@ 0x140
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	f882 3140 	strb.w	r3, [r2, #320]	@ 0x140
		                                  break;
 8002042:	e00b      	b.n	800205c <matel_mcu_process_can_frame+0x128>
	case Matel_MCU_Stat_Two_CAN_EXTD_ID_18275040:decode_MCU_Stat_Two(frame->data, &msg.MCU_Stat_Two);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3307      	adds	r3, #7
 8002048:	4909      	ldr	r1, [pc, #36]	@ (8002070 <matel_mcu_process_can_frame+0x13c>)
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f8f8 	bl	8002240 <decode_MCU_Stat_Two>
                                 msg.MCU_Stat_Two.rx_or_not=1;
 8002050:	4a07      	ldr	r2, [pc, #28]	@ (8002070 <matel_mcu_process_can_frame+0x13c>)
 8002052:	7e13      	ldrb	r3, [r2, #24]
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	7613      	strb	r3, [r2, #24]
		                                       break;
 800205a:	bf00      	nop
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	18275040 	.word	0x18275040
 8002068:	18265040 	.word	0x18265040
 800206c:	20000508 	.word	0x20000508
 8002070:	20000338 	.word	0x20000338
 8002074:	200004c0 	.word	0x200004c0
 8002078:	20000480 	.word	0x20000480
 800207c:	20000358 	.word	0x20000358
 8002080:	20000458 	.word	0x20000458

08002084 <extract_motorola_u64>:
	uint64_t mask = (~0ULL) << len;
	return (int64_t)(v | mask);
	}
	return (int64_t)v;
}
static uint64_t extract_motorola_u64(const uint8_t *data, int start, int len) {
 8002084:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002088:	b08b      	sub	sp, #44	@ 0x2c
 800208a:	af00      	add	r7, sp, #0
 800208c:	60f8      	str	r0, [r7, #12]
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
	if (len <= 0 || len > 64) return 0;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	dd02      	ble.n	800209e <extract_motorola_u64+0x1a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b40      	cmp	r3, #64	@ 0x40
 800209c:	dd04      	ble.n	80020a8 <extract_motorola_u64+0x24>
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	e051      	b.n	800214c <extract_motorola_u64+0xc8>
	uint64_t value = 0;
 80020a8:	f04f 0200 	mov.w	r2, #0
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int cur_byte = start / 8;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	da00      	bge.n	80020bc <extract_motorola_u64+0x38>
 80020ba:	3307      	adds	r3, #7
 80020bc:	10db      	asrs	r3, r3, #3
 80020be:	61fb      	str	r3, [r7, #28]
	int cur_bit = start % 8; // 7 = MSB of byte
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	425a      	negs	r2, r3
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	f002 0207 	and.w	r2, r2, #7
 80020cc:	bf58      	it	pl
 80020ce:	4253      	negpl	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < len; i++) {
 80020d2:	2300      	movs	r3, #0
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	e033      	b.n	8002140 <extract_motorola_u64+0xbc>
	uint8_t bit = 0;
 80020d8:	2300      	movs	r3, #0
 80020da:	74fb      	strb	r3, [r7, #19]
	if (cur_byte >= 0 && cur_byte < 8) bit = (data[cur_byte] >> cur_bit) & 1U;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0e      	blt.n	8002100 <extract_motorola_u64+0x7c>
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	2b07      	cmp	r3, #7
 80020e6:	dc0b      	bgt.n	8002100 <extract_motorola_u64+0x7c>
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4413      	add	r3, r2
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	fa42 f303 	asr.w	r3, r2, r3
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	74fb      	strb	r3, [r7, #19]
	value = (value << 1) | (uint64_t)bit;
 8002100:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002104:	eb12 0a02 	adds.w	sl, r2, r2
 8002108:	eb43 0b03 	adc.w	fp, r3, r3
 800210c:	4652      	mov	r2, sl
 800210e:	465b      	mov	r3, fp
 8002110:	7cf9      	ldrb	r1, [r7, #19]
 8002112:	2000      	movs	r0, #0
 8002114:	460c      	mov	r4, r1
 8002116:	4605      	mov	r5, r0
 8002118:	ea42 0804 	orr.w	r8, r2, r4
 800211c:	ea43 0905 	orr.w	r9, r3, r5
 8002120:	e9c7 8908 	strd	r8, r9, [r7, #32]
	cur_bit--;
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	3b01      	subs	r3, #1
 8002128:	61bb      	str	r3, [r7, #24]
	if (cur_bit < 0) { cur_byte++; cur_bit = 7; }
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	da04      	bge.n	800213a <extract_motorola_u64+0xb6>
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	3301      	adds	r3, #1
 8002134:	61fb      	str	r3, [r7, #28]
 8002136:	2307      	movs	r3, #7
 8002138:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < len; i++) {
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3301      	adds	r3, #1
 800213e:	617b      	str	r3, [r7, #20]
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	429a      	cmp	r2, r3
 8002146:	dbc7      	blt.n	80020d8 <extract_motorola_u64+0x54>
	}
	return value;
 8002148:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	372c      	adds	r7, #44	@ 0x2c
 8002152:	46bd      	mov	sp, r7
 8002154:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002158:	4770      	bx	lr

0800215a <extract_little_endian_u64>:
static uint64_t extract_little_endian_u64(const uint8_t *data, int start, int len) {
 800215a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800215e:	b08d      	sub	sp, #52	@ 0x34
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
if (len <= 0 || len > 64) return 0;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	dd02      	ble.n	8002174 <extract_little_endian_u64+0x1a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b40      	cmp	r3, #64	@ 0x40
 8002172:	dd04      	ble.n	800217e <extract_little_endian_u64+0x24>
 8002174:	f04f 0200 	mov.w	r2, #0
 8002178:	f04f 0300 	mov.w	r3, #0
 800217c:	e056      	b.n	800222c <extract_little_endian_u64+0xd2>
uint64_t value = 0;
 800217e:	f04f 0200 	mov.w	r2, #0
 8002182:	f04f 0300 	mov.w	r3, #0
 8002186:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
for (int i = 0; i < len; i++) {
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
 800218e:	e047      	b.n	8002220 <extract_little_endian_u64+0xc6>
int bit_index = start + i;
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	4413      	add	r3, r2
 8002196:	61fb      	str	r3, [r7, #28]
int byte_index = bit_index / 8;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	2b00      	cmp	r3, #0
 800219c:	da00      	bge.n	80021a0 <extract_little_endian_u64+0x46>
 800219e:	3307      	adds	r3, #7
 80021a0:	10db      	asrs	r3, r3, #3
 80021a2:	61bb      	str	r3, [r7, #24]
int bit_in_byte = bit_index % 8;
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	425a      	negs	r2, r3
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	f002 0207 	and.w	r2, r2, #7
 80021b0:	bf58      	it	pl
 80021b2:	4253      	negpl	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
uint8_t bit = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
if (byte_index >= 0 && byte_index < 8) bit = (data[byte_index] >> bit_in_byte) & 1U;
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	db0f      	blt.n	80021e2 <extract_little_endian_u64+0x88>
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b07      	cmp	r3, #7
 80021c6:	dc0c      	bgt.n	80021e2 <extract_little_endian_u64+0x88>
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4413      	add	r3, r2
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	fa42 f303 	asr.w	r3, r2, r3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
value |= ((uint64_t)bit << i);
 80021e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021e6:	2200      	movs	r2, #0
 80021e8:	4698      	mov	r8, r3
 80021ea:	4691      	mov	r9, r2
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	f1a3 0120 	sub.w	r1, r3, #32
 80021f2:	f1c3 0220 	rsb	r2, r3, #32
 80021f6:	fa09 f503 	lsl.w	r5, r9, r3
 80021fa:	fa08 f101 	lsl.w	r1, r8, r1
 80021fe:	430d      	orrs	r5, r1
 8002200:	fa28 f202 	lsr.w	r2, r8, r2
 8002204:	4315      	orrs	r5, r2
 8002206:	fa08 f403 	lsl.w	r4, r8, r3
 800220a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800220e:	ea42 0a04 	orr.w	sl, r2, r4
 8002212:	ea43 0b05 	orr.w	fp, r3, r5
 8002216:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
for (int i = 0; i < len; i++) {
 800221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221c:	3301      	adds	r3, #1
 800221e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	dbb3      	blt.n	8002190 <extract_little_endian_u64+0x36>
}
return value;
 8002228:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
}
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	3734      	adds	r7, #52	@ 0x34
 8002232:	46bd      	mov	sp, r7
 8002234:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002238:	4770      	bx	lr
 800223a:	0000      	movs	r0, r0
 800223c:	0000      	movs	r0, r0
	...

08002240 <decode_MCU_Stat_Two>:

// Implementations of decode functions follow (using extract helpers)


void decode_MCU_Stat_Two(const uint8_t *data, MCU_Stat_Two_t *out) {
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
	if (!out) return;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d044      	beq.n	80022da <decode_MCU_Stat_Two+0x9a>
	uint64_t raw0 = extract_little_endian_u64(data, 32, 32);
 8002250:	2220      	movs	r2, #32
 8002252:	2120      	movs	r1, #32
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff80 	bl	800215a <extract_little_endian_u64>
 800225a:	e9c7 0106 	strd	r0, r1, [r7, #24]
	out->MCU_Odometer_Val = (double)raw0 * 0.1 + 0.0;
 800225e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002262:	f7fe f903 	bl	800046c <__aeabi_ul2d>
 8002266:	a320      	add	r3, pc, #128	@ (adr r3, 80022e8 <decode_MCU_Stat_Two+0xa8>)
 8002268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226c:	f7fe f934 	bl	80004d8 <__aeabi_dmul>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	f7fd ff74 	bl	800016c <__adddf3>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	6839      	ldr	r1, [r7, #0]
 800228a:	e9c1 2300 	strd	r2, r3, [r1]
	uint64_t raw1 = extract_little_endian_u64(data, 16, 16);
 800228e:	2210      	movs	r2, #16
 8002290:	2110      	movs	r1, #16
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ff61 	bl	800215a <extract_little_endian_u64>
 8002298:	e9c7 0104 	strd	r0, r1, [r7, #16]
	out->MCU_VCU_State = (double)raw1;
 800229c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022a0:	f7fe f8e4 	bl	800046c <__aeabi_ul2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	6839      	ldr	r1, [r7, #0]
 80022aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
	uint64_t raw2 = extract_little_endian_u64(data, 0, 16);
 80022ae:	2210      	movs	r2, #16
 80022b0:	2100      	movs	r1, #0
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ff51 	bl	800215a <extract_little_endian_u64>
 80022b8:	e9c7 0102 	strd	r0, r1, [r7, #8]
	out->MCU_Motor_RPM = (double)raw2  -16384.0;
 80022bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022c0:	f7fe f8d4 	bl	800046c <__aeabi_ul2d>
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <decode_MCU_Stat_Two+0xb0>)
 80022ca:	f7fd ff4d 	bl	8000168 <__aeabi_dsub>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	6839      	ldr	r1, [r7, #0]
 80022d4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80022d8:	e000      	b.n	80022dc <decode_MCU_Stat_Two+0x9c>
	if (!out) return;
 80022da:	bf00      	nop
}
 80022dc:	3720      	adds	r7, #32
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	f3af 8000 	nop.w
 80022e8:	9999999a 	.word	0x9999999a
 80022ec:	3fb99999 	.word	0x3fb99999
 80022f0:	40d00000 	.word	0x40d00000

080022f4 <decode_MCU_Fault_Code>:


void decode_MCU_Fault_Code(const uint8_t *data, MCU_Fault_Code_t *out) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
	if (!out) return;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80d0 	beq.w	80024a6 <decode_MCU_Fault_Code+0x1b2>
	// sequential 8-bit little-endian signals
	out->MCU_Fault_Code_0 = (int)extract_motorola_u64(data, 30, 1);
 8002306:	2201      	movs	r2, #1
 8002308:	211e      	movs	r1, #30
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff feba 	bl	8002084 <extract_motorola_u64>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	601a      	str	r2, [r3, #0]
	out->MCU_Fault_Code_1 = (int)extract_motorola_u64(data, 31, 1);
 8002318:	2201      	movs	r2, #1
 800231a:	211f      	movs	r1, #31
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff feb1 	bl	8002084 <extract_motorola_u64>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	605a      	str	r2, [r3, #4]
	out->MCU_Fault_Code_2 = (int)extract_motorola_u64(data, 16,1);
 800232a:	2201      	movs	r2, #1
 800232c:	2110      	movs	r1, #16
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fea8 	bl	8002084 <extract_motorola_u64>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	609a      	str	r2, [r3, #8]
	out->MCU_Fault_Code_3 = (int)extract_motorola_u64(data, 17, 1);
 800233c:	2201      	movs	r2, #1
 800233e:	2111      	movs	r1, #17
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff fe9f 	bl	8002084 <extract_motorola_u64>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	60da      	str	r2, [r3, #12]
	out->MCU_Fault_Code_4 = (int)extract_motorola_u64(data, 18, 1);
 800234e:	2201      	movs	r2, #1
 8002350:	2112      	movs	r1, #18
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff fe96 	bl	8002084 <extract_motorola_u64>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	611a      	str	r2, [r3, #16]
	out->MCU_Fault_Code_5 = (int)extract_motorola_u64(data, 19, 1);
 8002360:	2201      	movs	r2, #1
 8002362:	2113      	movs	r1, #19
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff fe8d 	bl	8002084 <extract_motorola_u64>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	615a      	str	r2, [r3, #20]
	out->MCU_Fault_Code_6 = (int)extract_motorola_u64(data, 20, 1);
 8002372:	2201      	movs	r2, #1
 8002374:	2114      	movs	r1, #20
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff fe84 	bl	8002084 <extract_motorola_u64>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	619a      	str	r2, [r3, #24]
	out->MCU_Fault_Code_7 = (int)extract_motorola_u64(data, 21, 1);
 8002384:	2201      	movs	r2, #1
 8002386:	2115      	movs	r1, #21
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff fe7b 	bl	8002084 <extract_motorola_u64>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	61da      	str	r2, [r3, #28]
	out->MCU_Fault_Code_8 = (int)extract_motorola_u64(data, 22, 1);
 8002396:	2201      	movs	r2, #1
 8002398:	2116      	movs	r1, #22
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fe72 	bl	8002084 <extract_motorola_u64>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	621a      	str	r2, [r3, #32]
	out->MCU_Fault_Code_9 = (int)extract_motorola_u64(data,23, 1);
 80023a8:	2201      	movs	r2, #1
 80023aa:	2117      	movs	r1, #23
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff fe69 	bl	8002084 <extract_motorola_u64>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	625a      	str	r2, [r3, #36]	@ 0x24
	out->MCU_Fault_Code_10 = (int)extract_motorola_u64(data, 8, 1);
 80023ba:	2201      	movs	r2, #1
 80023bc:	2108      	movs	r1, #8
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff fe60 	bl	8002084 <extract_motorola_u64>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
	out->MCU_Fault_Code_11 = (int)extract_motorola_u64(data, 9, 1);
 80023cc:	2201      	movs	r2, #1
 80023ce:	2109      	movs	r1, #9
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff fe57 	bl	8002084 <extract_motorola_u64>
 80023d6:	4602      	mov	r2, r0
 80023d8:	460b      	mov	r3, r1
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	out->MCU_Fault_Code_12 = (int)extract_motorola_u64(data, 10, 1);
 80023de:	2201      	movs	r2, #1
 80023e0:	210a      	movs	r1, #10
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7ff fe4e 	bl	8002084 <extract_motorola_u64>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30
	out->MCU_Fault_Code_13 = (int)extract_motorola_u64(data, 11, 1);
 80023f0:	2201      	movs	r2, #1
 80023f2:	210b      	movs	r1, #11
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff fe45 	bl	8002084 <extract_motorola_u64>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	635a      	str	r2, [r3, #52]	@ 0x34
	out->MCU_Fault_Code_14 = (int)extract_motorola_u64(data, 12, 1);
 8002402:	2201      	movs	r2, #1
 8002404:	210c      	movs	r1, #12
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fe3c 	bl	8002084 <extract_motorola_u64>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	639a      	str	r2, [r3, #56]	@ 0x38
	out->MCU_Fault_Code_15 = (int)extract_motorola_u64(data, 13, 1);
 8002414:	2201      	movs	r2, #1
 8002416:	210d      	movs	r1, #13
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fe33 	bl	8002084 <extract_motorola_u64>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	63da      	str	r2, [r3, #60]	@ 0x3c
	out->MCU_Fault_Code_16 = (int)extract_motorola_u64(data, 14, 1);
 8002426:	2201      	movs	r2, #1
 8002428:	210e      	movs	r1, #14
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fe2a 	bl	8002084 <extract_motorola_u64>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	641a      	str	r2, [r3, #64]	@ 0x40
	out->MCU_Fault_Code_17 = (int)extract_motorola_u64(data, 15, 1);
 8002438:	2201      	movs	r2, #1
 800243a:	210f      	movs	r1, #15
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff fe21 	bl	8002084 <extract_motorola_u64>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	645a      	str	r2, [r3, #68]	@ 0x44
	out->MCU_Fault_Code_18 = (int)extract_motorola_u64(data, 0, 1);
 800244a:	2201      	movs	r2, #1
 800244c:	2100      	movs	r1, #0
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff fe18 	bl	8002084 <extract_motorola_u64>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	649a      	str	r2, [r3, #72]	@ 0x48
	out->MCU_Fault_Code_19 = (int)extract_motorola_u64(data, 7, 3);
 800245c:	2203      	movs	r2, #3
 800245e:	2107      	movs	r1, #7
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff fe0f 	bl	8002084 <extract_motorola_u64>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	64da      	str	r2, [r3, #76]	@ 0x4c
	out->MCU_Fault_Code_20 = (int)extract_motorola_u64(data, 1, 1);
 800246e:	2201      	movs	r2, #1
 8002470:	2101      	movs	r1, #1
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff fe06 	bl	8002084 <extract_motorola_u64>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	651a      	str	r2, [r3, #80]	@ 0x50
	out->MCU_Fault_Code_21 = (int)extract_motorola_u64(data, 2,1);
 8002480:	2201      	movs	r2, #1
 8002482:	2102      	movs	r1, #2
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7ff fdfd 	bl	8002084 <extract_motorola_u64>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	655a      	str	r2, [r3, #84]	@ 0x54
	out->MCU_Fault_Code_22 = (int)extract_motorola_u64(data, 4, 3);
 8002492:	2203      	movs	r2, #3
 8002494:	2104      	movs	r1, #4
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fdf4 	bl	8002084 <extract_motorola_u64>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	659a      	str	r2, [r3, #88]	@ 0x58
 80024a4:	e000      	b.n	80024a8 <decode_MCU_Fault_Code+0x1b4>
	if (!out) return;
 80024a6:	bf00      	nop

}
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <decode_MCU_FAULT_One>:
void decode_MCU_FAULT_One(const uint8_t *data, MCU_FAULT_One_t *out) {
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
if (!out) return;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8091 	beq.w	80025e2 <decode_MCU_FAULT_One+0x134>
out->MCU_FAULT_One_sig0 = (int)extract_motorola_u64(data, 27, 1);
 80024c0:	2201      	movs	r2, #1
 80024c2:	211b      	movs	r1, #27
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff fddd 	bl	8002084 <extract_motorola_u64>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	601a      	str	r2, [r3, #0]
out->MCU_FAULT_One_sig1 = (int)extract_motorola_u64(data, 28, 1);
 80024d2:	2201      	movs	r2, #1
 80024d4:	211c      	movs	r1, #28
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff fdd4 	bl	8002084 <extract_motorola_u64>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	605a      	str	r2, [r3, #4]
out->MCU_FAULT_One_sig2 = (int)extract_motorola_u64(data, 39, 1);
 80024e4:	2201      	movs	r2, #1
 80024e6:	2127      	movs	r1, #39	@ 0x27
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff fdcb 	bl	8002084 <extract_motorola_u64>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	609a      	str	r2, [r3, #8]
out->MCU_FAULT_One_sig3 = (int)extract_motorola_u64(data, 4, 1);
 80024f6:	2201      	movs	r2, #1
 80024f8:	2104      	movs	r1, #4
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff fdc2 	bl	8002084 <extract_motorola_u64>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	60da      	str	r2, [r3, #12]
out->MCU_FAULT_One_sig4 = (int)extract_motorola_u64(data, 2, 1);
 8002508:	2201      	movs	r2, #1
 800250a:	2102      	movs	r1, #2
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff fdb9 	bl	8002084 <extract_motorola_u64>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	611a      	str	r2, [r3, #16]
out->MCU_FAULT_One_sig5 = (int)extract_motorola_u64(data, 18, 6);
 800251a:	2206      	movs	r2, #6
 800251c:	2112      	movs	r1, #18
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fdb0 	bl	8002084 <extract_motorola_u64>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	615a      	str	r2, [r3, #20]
out->MCU_FAULT_One_sig6 = (int)extract_motorola_u64(data, 6, 1);
 800252c:	2201      	movs	r2, #1
 800252e:	2106      	movs	r1, #6
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff fda7 	bl	8002084 <extract_motorola_u64>
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	619a      	str	r2, [r3, #24]
out->MCU_FAULT_One_sig7 = (int)extract_motorola_u64(data, 9, 2);
 800253e:	2202      	movs	r2, #2
 8002540:	2109      	movs	r1, #9
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff fd9e 	bl	8002084 <extract_motorola_u64>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	61da      	str	r2, [r3, #28]
out->MCU_FAULT_One_sig8 = (int)extract_motorola_u64(data, 11, 2);
 8002550:	2202      	movs	r2, #2
 8002552:	210b      	movs	r1, #11
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff fd95 	bl	8002084 <extract_motorola_u64>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	621a      	str	r2, [r3, #32]
out->MCU_FAULT_One_sig9 = (int)extract_motorola_u64(data, 1, 1);
 8002562:	2201      	movs	r2, #1
 8002564:	2101      	movs	r1, #1
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff fd8c 	bl	8002084 <extract_motorola_u64>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	625a      	str	r2, [r3, #36]	@ 0x24
out->MCU_FAULT_One_sig10 = (int)extract_motorola_u64(data, 21, 1);
 8002574:	2201      	movs	r2, #1
 8002576:	2115      	movs	r1, #21
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff fd83 	bl	8002084 <extract_motorola_u64>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	629a      	str	r2, [r3, #40]	@ 0x28
out->MCU_FAULT_One_sig11 = (int)extract_motorola_u64(data, 7, 1);
 8002586:	2201      	movs	r2, #1
 8002588:	2107      	movs	r1, #7
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff fd7a 	bl	8002084 <extract_motorola_u64>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	62da      	str	r2, [r3, #44]	@ 0x2c
out->MCU_FAULT_One_sig12 = (int)extract_motorola_u64(data, 15, 4);
 8002598:	2204      	movs	r2, #4
 800259a:	210f      	movs	r1, #15
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff fd71 	bl	8002084 <extract_motorola_u64>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	631a      	str	r2, [r3, #48]	@ 0x30
out->MCU_FAULT_One_sig13 = (int)extract_motorola_u64(data, 23, 2);
 80025aa:	2202      	movs	r2, #2
 80025ac:	2117      	movs	r1, #23
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff fd68 	bl	8002084 <extract_motorola_u64>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	635a      	str	r2, [r3, #52]	@ 0x34
out->MCU_FAULT_One_sig14 = (int)extract_motorola_u64(data, 3, 1);
 80025bc:	2201      	movs	r2, #1
 80025be:	2103      	movs	r1, #3
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff fd5f 	bl	8002084 <extract_motorola_u64>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	639a      	str	r2, [r3, #56]	@ 0x38
out->MCU_FAULT_One_sig15 = (int)extract_motorola_u64(data, 5, 1);
 80025ce:	2201      	movs	r2, #1
 80025d0:	2105      	movs	r1, #5
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff fd56 	bl	8002084 <extract_motorola_u64>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025e0:	e000      	b.n	80025e4 <decode_MCU_FAULT_One+0x136>
if (!out) return;
 80025e2:	bf00      	nop
}
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <decode_MCU_FAULT_two>:
void decode_MCU_FAULT_two(const uint8_t *data, MCU_FAULT_two_t *out) {
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
if (!out) return;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8088 	beq.w	800270c <decode_MCU_FAULT_two+0x122>
	out->MCU_FAULT_two_sig0 = (int)extract_motorola_u64(data, 9, 3);
 80025fc:	2203      	movs	r2, #3
 80025fe:	2109      	movs	r1, #9
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff fd3f 	bl	8002084 <extract_motorola_u64>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	601a      	str	r2, [r3, #0]
	out->MCU_FAULT_two_sig1 = (int)extract_motorola_u64(data, 10, 1);
 800260e:	2201      	movs	r2, #1
 8002610:	210a      	movs	r1, #10
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff fd36 	bl	8002084 <extract_motorola_u64>
 8002618:	4602      	mov	r2, r0
 800261a:	460b      	mov	r3, r1
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	605a      	str	r2, [r3, #4]
	out->MCU_FAULT_two_sig2 = (int)extract_motorola_u64(data, 11, 1);
 8002620:	2201      	movs	r2, #1
 8002622:	210b      	movs	r1, #11
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff fd2d 	bl	8002084 <extract_motorola_u64>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	609a      	str	r2, [r3, #8]
	out->MCU_FAULT_two_sig3 = (int)extract_motorola_u64(data, 12, 1);
 8002632:	2201      	movs	r2, #1
 8002634:	210c      	movs	r1, #12
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff fd24 	bl	8002084 <extract_motorola_u64>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	60da      	str	r2, [r3, #12]
	out->MCU_FAULT_two_sig4 = (int)extract_motorola_u64(data, 13, 1);
 8002644:	2201      	movs	r2, #1
 8002646:	210d      	movs	r1, #13
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff fd1b 	bl	8002084 <extract_motorola_u64>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	611a      	str	r2, [r3, #16]
	out->MCU_FAULT_two_sig5 = (int)extract_motorola_u64(data, 14, 1);
 8002656:	2201      	movs	r2, #1
 8002658:	210e      	movs	r1, #14
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7ff fd12 	bl	8002084 <extract_motorola_u64>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	615a      	str	r2, [r3, #20]
	out->MCU_FAULT_two_sig6 = (int)extract_motorola_u64(data, 15, 1);
 8002668:	2201      	movs	r2, #1
 800266a:	210f      	movs	r1, #15
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff fd09 	bl	8002084 <extract_motorola_u64>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	619a      	str	r2, [r3, #24]
	out->MCU_FAULT_two_sig7 = (int)extract_motorola_u64(data, 0, 1);
 800267a:	2201      	movs	r2, #1
 800267c:	2100      	movs	r1, #0
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff fd00 	bl	8002084 <extract_motorola_u64>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	61da      	str	r2, [r3, #28]
	out->MCU_FAULT_two_sig8 = (int)extract_motorola_u64(data, 1, 1);
 800268c:	2201      	movs	r2, #1
 800268e:	2101      	movs	r1, #1
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff fcf7 	bl	8002084 <extract_motorola_u64>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	621a      	str	r2, [r3, #32]
	out->MCU_FAULT_two_sig9 = (int)extract_motorola_u64(data, 2, 1);
 800269e:	2201      	movs	r2, #1
 80026a0:	2102      	movs	r1, #2
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff fcee 	bl	8002084 <extract_motorola_u64>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	625a      	str	r2, [r3, #36]	@ 0x24
	out->MCU_FAULT_two_sig10 = (int)extract_motorola_u64(data, 3, 1);
 80026b0:	2201      	movs	r2, #1
 80026b2:	2103      	movs	r1, #3
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff fce5 	bl	8002084 <extract_motorola_u64>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	629a      	str	r2, [r3, #40]	@ 0x28
	out->MCU_FAULT_two_sig11 = (int)extract_motorola_u64(data, 4, 1);
 80026c2:	2201      	movs	r2, #1
 80026c4:	2104      	movs	r1, #4
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f7ff fcdc 	bl	8002084 <extract_motorola_u64>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	out->MCU_FAULT_two_sig12 = (int)extract_motorola_u64(data, 5, 1);
 80026d4:	2201      	movs	r2, #1
 80026d6:	2105      	movs	r1, #5
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff fcd3 	bl	8002084 <extract_motorola_u64>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	631a      	str	r2, [r3, #48]	@ 0x30
	out->MCU_FAULT_two_sig13 = (int)extract_motorola_u64(data, 6, 1);
 80026e6:	2201      	movs	r2, #1
 80026e8:	2106      	movs	r1, #6
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff fcca 	bl	8002084 <extract_motorola_u64>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	635a      	str	r2, [r3, #52]	@ 0x34
	out->MCU_FAULT_two_sig14 = (int)extract_motorola_u64(data, 7, 1);
 80026f8:	2201      	movs	r2, #1
 80026fa:	2107      	movs	r1, #7
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fcc1 	bl	8002084 <extract_motorola_u64>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	639a      	str	r2, [r3, #56]	@ 0x38
 800270a:	e000      	b.n	800270e <decode_MCU_FAULT_two+0x124>
if (!out) return;
 800270c:	bf00      	nop

}
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	0000      	movs	r0, r0
	...

08002718 <decode_MCU_Stat_One>:
out->HeartBeat_Stat10 = (double)extract_little_endian_u64(data, 10, 1);
out->HeartBeat_Stat11 = (double)extract_little_endian_u64(data, 11, 1);
}


void decode_MCU_Stat_One(const uint8_t *data, MCU_Stat_One_t *out) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
	if (!out) return;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d051      	beq.n	80027cc <decode_MCU_Stat_One+0xb4>
	out->MCU_Stat_One_sig0 = (int)extract_little_endian_u64(data, 8, 8)-40;
 8002728:	2208      	movs	r2, #8
 800272a:	2108      	movs	r1, #8
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff fd14 	bl	800215a <extract_little_endian_u64>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4613      	mov	r3, r2
 8002738:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	601a      	str	r2, [r3, #0]
	out->MCU_Stat_One_sig1 = (int)extract_little_endian_u64(data, 0, 8)-40;
 8002740:	2208      	movs	r2, #8
 8002742:	2100      	movs	r1, #0
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff fd08 	bl	800215a <extract_little_endian_u64>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4613      	mov	r3, r2
 8002750:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	605a      	str	r2, [r3, #4]
	out->MCU_Stat_One_sig2 = (double)extract_little_endian_u64(data, 16, 16)*0.1;
 8002758:	2210      	movs	r2, #16
 800275a:	2110      	movs	r1, #16
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff fcfc 	bl	800215a <extract_little_endian_u64>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4610      	mov	r0, r2
 8002768:	4619      	mov	r1, r3
 800276a:	f7fd fe7f 	bl	800046c <__aeabi_ul2d>
 800276e:	a31a      	add	r3, pc, #104	@ (adr r3, 80027d8 <decode_MCU_Stat_One+0xc0>)
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	f7fd feb0 	bl	80004d8 <__aeabi_dmul>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	6839      	ldr	r1, [r7, #0]
 800277e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	out->MCU_Stat_One_sig3 = (int)extract_little_endian_u64(data, 56, 3);
 8002782:	2203      	movs	r2, #3
 8002784:	2138      	movs	r1, #56	@ 0x38
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff fce7 	bl	800215a <extract_little_endian_u64>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	611a      	str	r2, [r3, #16]
	out->MCU_Stat_One_sig4 = (int)extract_little_endian_u64(data, 48, 8);
 8002794:	2208      	movs	r2, #8
 8002796:	2130      	movs	r1, #48	@ 0x30
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff fcde 	bl	800215a <extract_little_endian_u64>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	615a      	str	r2, [r3, #20]
	out->MCU_Stat_One_sig5 = (int)extract_little_endian_u64(data, 40, 8);
 80027a6:	2208      	movs	r2, #8
 80027a8:	2128      	movs	r1, #40	@ 0x28
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff fcd5 	bl	800215a <extract_little_endian_u64>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	619a      	str	r2, [r3, #24]
	out->MCU_Stat_One_sig6 = (int)extract_little_endian_u64(data, 32, 8);
 80027b8:	2208      	movs	r2, #8
 80027ba:	2120      	movs	r1, #32
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff fccc 	bl	800215a <extract_little_endian_u64>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	61da      	str	r2, [r3, #28]
 80027ca:	e000      	b.n	80027ce <decode_MCU_Stat_One+0xb6>
	if (!out) return;
 80027cc:	bf00      	nop
}
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	f3af 8000 	nop.w
 80027d8:	9999999a 	.word	0x9999999a
 80027dc:	3fb99999 	.word	0x3fb99999

080027e0 <decode_MCU_POWER_One>:


void decode_MCU_POWER_One(const uint8_t *data, MCU_POWER_One_t *out) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
//if (!out) return;

out->power_sig0 = (double)extract_motorola_u64(data, 38, 10)*0.1-37.3;
 80027ea:	220a      	movs	r2, #10
 80027ec:	2126      	movs	r1, #38	@ 0x26
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7ff fc48 	bl	8002084 <extract_motorola_u64>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4610      	mov	r0, r2
 80027fa:	4619      	mov	r1, r3
 80027fc:	f7fd fe36 	bl	800046c <__aeabi_ul2d>
 8002800:	a33b      	add	r3, pc, #236	@ (adr r3, 80028f0 <decode_MCU_POWER_One+0x110>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	f7fd fe67 	bl	80004d8 <__aeabi_dmul>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	a339      	add	r3, pc, #228	@ (adr r3, 80028f8 <decode_MCU_POWER_One+0x118>)
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	f7fd fca6 	bl	8000168 <__aeabi_dsub>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	6839      	ldr	r1, [r7, #0]
 8002822:	e9c1 2300 	strd	r2, r3, [r1]
out->power_sig1 = (double)extract_motorola_u64(data, 7, 10)*0.1;
 8002826:	220a      	movs	r2, #10
 8002828:	2107      	movs	r1, #7
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff fc2a 	bl	8002084 <extract_motorola_u64>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4610      	mov	r0, r2
 8002836:	4619      	mov	r1, r3
 8002838:	f7fd fe18 	bl	800046c <__aeabi_ul2d>
 800283c:	a32c      	add	r3, pc, #176	@ (adr r3, 80028f0 <decode_MCU_POWER_One+0x110>)
 800283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002842:	f7fd fe49 	bl	80004d8 <__aeabi_dmul>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	6839      	ldr	r1, [r7, #0]
 800284c:	e9c1 2302 	strd	r2, r3, [r1, #8]
out->power_sig2 = (double)extract_motorola_u64(data, 16, 10)*0.1-65;
 8002850:	220a      	movs	r2, #10
 8002852:	2110      	movs	r1, #16
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff fc15 	bl	8002084 <extract_motorola_u64>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	f7fd fe03 	bl	800046c <__aeabi_ul2d>
 8002866:	a322      	add	r3, pc, #136	@ (adr r3, 80028f0 <decode_MCU_POWER_One+0x110>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f7fd fe34 	bl	80004d8 <__aeabi_dmul>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f04f 0200 	mov.w	r2, #0
 800287c:	4b22      	ldr	r3, [pc, #136]	@ (8002908 <decode_MCU_POWER_One+0x128>)
 800287e:	f7fd fc73 	bl	8000168 <__aeabi_dsub>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	6839      	ldr	r1, [r7, #0]
 8002888:	e9c1 2304 	strd	r2, r3, [r1, #16]
out->power_sig3 = (uint64_t)extract_motorola_u64(data, 44, 15)-16384;
 800288c:	220f      	movs	r2, #15
 800288e:	212c      	movs	r1, #44	@ 0x2c
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff fbf7 	bl	8002084 <extract_motorola_u64>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4613      	mov	r3, r2
 800289c:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80028a0:	461a      	mov	r2, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	619a      	str	r2, [r3, #24]
out->power_sig4 = (double)extract_motorola_u64(data, 13, 13)*0.1-409.6;
 80028a6:	220d      	movs	r2, #13
 80028a8:	210d      	movs	r1, #13
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f7ff fbea 	bl	8002084 <extract_motorola_u64>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f7fd fdd8 	bl	800046c <__aeabi_ul2d>
 80028bc:	a30c      	add	r3, pc, #48	@ (adr r3, 80028f0 <decode_MCU_POWER_One+0x110>)
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	f7fd fe09 	bl	80004d8 <__aeabi_dmul>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8002900 <decode_MCU_POWER_One+0x120>)
 80028d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d4:	f7fd fc48 	bl	8000168 <__aeabi_dsub>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	6839      	ldr	r1, [r7, #0]
 80028de:	e9c1 2308 	strd	r2, r3, [r1, #32]


}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	f3af 8000 	nop.w
 80028f0:	9999999a 	.word	0x9999999a
 80028f4:	3fb99999 	.word	0x3fb99999
 80028f8:	66666666 	.word	0x66666666
 80028fc:	4042a666 	.word	0x4042a666
 8002900:	9999999a 	.word	0x9999999a
 8002904:	40799999 	.word	0x40799999
 8002908:	40504000 	.word	0x40504000

0800290c <Motor_control_pins_init>:
    GPIOB->CRL&=~((0xF<<0)|(0XF<<4)|(0XF<<12)|(0xf<<20));
    GPIOB->CRL|=((0x3<<0)|(0X3<<4)|(0X3<<12)|(0x3<<20));
    GPIOB->ODR&=~((1<<PB0_REVERSE)|(1<<PB1_NEUTRAL)|(1<<PB3_DRIVE)|(1<<PB5_SPORT));
    GPIOB->ODR|=((1<<PB1_NEUTRAL));
}
void Motor_control_pins_init(){
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8002910:	4b12      	ldr	r3, [pc, #72]	@ (800295c <Motor_control_pins_init+0x50>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	4a11      	ldr	r2, [pc, #68]	@ (800295c <Motor_control_pins_init+0x50>)
 8002916:	f043 0308 	orr.w	r3, r3, #8
 800291a:	6193      	str	r3, [r2, #24]
    GPIOB->CRL&=~((0x4<<0)|(0X4<<4)|(0X4<<12));
 800291c:	4b10      	ldr	r3, [pc, #64]	@ (8002960 <Motor_control_pins_init+0x54>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0f      	ldr	r2, [pc, #60]	@ (8002960 <Motor_control_pins_init+0x54>)
 8002922:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002926:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800292a:	6013      	str	r3, [r2, #0]
    GPIOB->CRL|=((0x3<<0)|(0X3<<4)|(0X3<<12));
 800292c:	4b0c      	ldr	r3, [pc, #48]	@ (8002960 <Motor_control_pins_init+0x54>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a0b      	ldr	r2, [pc, #44]	@ (8002960 <Motor_control_pins_init+0x54>)
 8002932:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8002936:	f043 0333 	orr.w	r3, r3, #51	@ 0x33
 800293a:	6013      	str	r3, [r2, #0]
    GPIOB->ODR|=((1<<PB0_REVERSE)|(1<<PB1_NEUTRAL)|(1<<PB3_DRIVE));
 800293c:	4b08      	ldr	r3, [pc, #32]	@ (8002960 <Motor_control_pins_init+0x54>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4a07      	ldr	r2, [pc, #28]	@ (8002960 <Motor_control_pins_init+0x54>)
 8002942:	f043 030b 	orr.w	r3, r3, #11
 8002946:	60d3      	str	r3, [r2, #12]
    GPIOB->ODR&=~((1<<PB1_NEUTRAL));
 8002948:	4b05      	ldr	r3, [pc, #20]	@ (8002960 <Motor_control_pins_init+0x54>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4a04      	ldr	r2, [pc, #16]	@ (8002960 <Motor_control_pins_init+0x54>)
 800294e:	f023 0302 	bic.w	r3, r3, #2
 8002952:	60d3      	str	r3, [r2, #12]
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40021000 	.word	0x40021000
 8002960:	40010c00 	.word	0x40010c00

08002964 <set_baudrate>:
    uint32_t tseg2;
    uint32_t sjw;
    float sample_point;  // in percentage
} CAN_BitTiming;

STATUS set_baudrate(uint32_t Baud_Rate){
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	f6ad 0d04 	subw	sp, sp, #2052	@ 0x804
 800296a:	af00      	add	r7, sp, #0
 800296c:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002970:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 8002974:	6018      	str	r0, [r3, #0]
    CAN_BitTiming table[100]; // store results
    int count = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
    uint32_t clk = get_APB1_freq();      // 36 MHz
 800297c:	f001 fe24 	bl	80045c8 <get_APB1_freq>
 8002980:	f8c7 07e8 	str.w	r0, [r7, #2024]	@ 0x7e8
    uint32_t baud = Baud_Rate;      // 500 kbps
 8002984:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002988:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8c7 37e4 	str.w	r3, [r7, #2020]	@ 0x7e4
    if (clk == 0 || Baud_Rate == 0) {
 8002992:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	@ 0x7e8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d006      	beq.n	80029a8 <set_baudrate+0x44>
 800299a:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 800299e:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <set_baudrate+0x48>
        return RY_NOT_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e0f7      	b.n	8002b9c <set_baudrate+0x238>
    }
    uint32_t target = clk / baud; // should be 16
 80029ac:	f8d7 27e8 	ldr.w	r2, [r7, #2024]	@ 0x7e8
 80029b0:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	@ 0x7e4
 80029b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b8:	f8c7 37e0 	str.w	r3, [r7, #2016]	@ 0x7e0
    for (uint32_t prescaler = 1; prescaler <= 1024; prescaler++) {
 80029bc:	2301      	movs	r3, #1
 80029be:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 80029c2:	e0c0      	b.n	8002b46 <set_baudrate+0x1e2>
        for (uint32_t tseg1 = 1; tseg1 <= 16; tseg1++) {
 80029c4:	2301      	movs	r3, #1
 80029c6:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 80029ca:	e0b2      	b.n	8002b32 <set_baudrate+0x1ce>
            for (uint32_t tseg2 = 1; tseg2 <= 8; tseg2++) {
 80029cc:	2301      	movs	r3, #1
 80029ce:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 80029d2:	e0a4      	b.n	8002b1e <set_baudrate+0x1ba>
            	uint32_t tq = 1 + tseg1 + tseg2;
 80029d4:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 80029d8:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 80029dc:	4413      	add	r3, r2
 80029de:	3301      	adds	r3, #1
 80029e0:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
                if (prescaler * tq == target) {
 80029e4:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 80029e8:	f8d7 27dc 	ldr.w	r2, [r7, #2012]	@ 0x7dc
 80029ec:	fb02 f303 	mul.w	r3, r2, r3
 80029f0:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	@ 0x7e0
 80029f4:	429a      	cmp	r2, r3
 80029f6:	f040 808d 	bne.w	8002b14 <set_baudrate+0x1b0>
                    float sp = ((1.0f + tseg1) / tq) * 100.0f;
 80029fa:	f8d7 07f4 	ldr.w	r0, [r7, #2036]	@ 0x7f4
 80029fe:	f7fe f8f9 	bl	8000bf4 <__aeabi_ui2f>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe f843 	bl	8000a94 <__addsf3>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461c      	mov	r4, r3
 8002a12:	f8d7 07dc 	ldr.w	r0, [r7, #2012]	@ 0x7dc
 8002a16:	f7fe f8ed 	bl	8000bf4 <__aeabi_ui2f>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4620      	mov	r0, r4
 8002a20:	f7fe f9f4 	bl	8000e0c <__aeabi_fdiv>
 8002a24:	4603      	mov	r3, r0
 8002a26:	4960      	ldr	r1, [pc, #384]	@ (8002ba8 <set_baudrate+0x244>)
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe f93b 	bl	8000ca4 <__aeabi_fmul>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f8c7 37d8 	str.w	r3, [r7, #2008]	@ 0x7d8
                    if (sp >= 70.0f && sp <= 80.0f) {
 8002a34:	495d      	ldr	r1, [pc, #372]	@ (8002bac <set_baudrate+0x248>)
 8002a36:	f8d7 07d8 	ldr.w	r0, [r7, #2008]	@ 0x7d8
 8002a3a:	f7fe fae5 	bl	8001008 <__aeabi_fcmpge>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d067      	beq.n	8002b14 <set_baudrate+0x1b0>
 8002a44:	495a      	ldr	r1, [pc, #360]	@ (8002bb0 <set_baudrate+0x24c>)
 8002a46:	f8d7 07d8 	ldr.w	r0, [r7, #2008]	@ 0x7d8
 8002a4a:	f7fe fad3 	bl	8000ff4 <__aeabi_fcmple>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d05f      	beq.n	8002b14 <set_baudrate+0x1b0>
                        for (int sjw = 1; sjw <= tseg2; sjw++) {
 8002a54:	2301      	movs	r3, #1
 8002a56:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 8002a5a:	e055      	b.n	8002b08 <set_baudrate+0x1a4>
                            table[count].prescaler = prescaler;
 8002a5c:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 8002a60:	b298      	uxth	r0, r3
 8002a62:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002a66:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 8002a6a:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	4602      	mov	r2, r0
 8002a7a:	801a      	strh	r2, [r3, #0]
                            table[count].tseg1 = tseg1;
 8002a7c:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002a80:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 8002a84:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	3304      	adds	r3, #4
 8002a94:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 8002a98:	601a      	str	r2, [r3, #0]
                            table[count].tseg2 = tseg2;
 8002a9a:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002a9e:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 8002aa2:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	@ 0x7f0
 8002ab6:	601a      	str	r2, [r3, #0]
                            table[count].sjw = sjw;
 8002ab8:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	@ 0x7ec
 8002abc:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002ac0:	f5a3 60ff 	sub.w	r0, r3, #2040	@ 0x7f8
 8002ac4:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4403      	add	r3, r0
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	6019      	str	r1, [r3, #0]
                            table[count].sample_point = sp;
 8002ad6:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002ada:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 8002ade:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	3310      	adds	r3, #16
 8002aee:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	@ 0x7d8
 8002af2:	601a      	str	r2, [r3, #0]
                            count++;
 8002af4:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	@ 0x7fc
 8002af8:	3301      	adds	r3, #1
 8002afa:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
                        for (int sjw = 1; sjw <= tseg2; sjw++) {
 8002afe:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8002b02:	3301      	adds	r3, #1
 8002b04:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 8002b08:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8002b0c:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	@ 0x7f0
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d2a3      	bcs.n	8002a5c <set_baudrate+0xf8>
            for (uint32_t tseg2 = 1; tseg2 <= 8; tseg2++) {
 8002b14:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 8002b1e:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	f67f af56 	bls.w	80029d4 <set_baudrate+0x70>
        for (uint32_t tseg1 = 1; tseg1 <= 16; tseg1++) {
 8002b28:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 8002b32:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 8002b36:	2b10      	cmp	r3, #16
 8002b38:	f67f af48 	bls.w	80029cc <set_baudrate+0x68>
    for (uint32_t prescaler = 1; prescaler <= 1024; prescaler++) {
 8002b3c:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 8002b40:	3301      	adds	r3, #1
 8002b42:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 8002b46:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b4e:	f67f af39 	bls.w	80029c4 <set_baudrate+0x60>
                    }
                }
            }
        }
    }
    CAN1->BTR|=((table[0].prescaler-1)<<0)|((table[0].sjw-1)<<24)|((table[0].tseg1-1)<<16)|((table[0].tseg2-1)<<20);
 8002b52:	4b18      	ldr	r3, [pc, #96]	@ (8002bb4 <set_baudrate+0x250>)
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002b5a:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	4619      	mov	r1, r3
 8002b64:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002b68:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	4319      	orrs	r1, r3
 8002b74:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002b78:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	4319      	orrs	r1, r3
 8002b84:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8002b88:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	051b      	lsls	r3, r3, #20
 8002b92:	430b      	orrs	r3, r1
 8002b94:	4907      	ldr	r1, [pc, #28]	@ (8002bb4 <set_baudrate+0x250>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	61cb      	str	r3, [r1, #28]
    return RY_OK;//0x001e0003
 8002b9a:	2301      	movs	r3, #1
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f607 0704 	addw	r7, r7, #2052	@ 0x804
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd90      	pop	{r4, r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	42c80000 	.word	0x42c80000
 8002bac:	428c0000 	.word	0x428c0000
 8002bb0:	42a00000 	.word	0x42a00000
 8002bb4:	40006400 	.word	0x40006400

08002bb8 <Gpio_init>:
void Gpio_init(){
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
    RCC->APB1ENR|=RCC_APB1ENR_CAN1EN;
 8002bbc:	4b19      	ldr	r3, [pc, #100]	@ (8002c24 <Gpio_init+0x6c>)
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	4a18      	ldr	r2, [pc, #96]	@ (8002c24 <Gpio_init+0x6c>)
 8002bc2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bc6:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR|=RCC_APB2ENR_AFIOEN;
 8002bc8:	4b16      	ldr	r3, [pc, #88]	@ (8002c24 <Gpio_init+0x6c>)
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	@ (8002c24 <Gpio_init+0x6c>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR|=RCC_APB2ENR_IOPBEN;
 8002bd4:	4b13      	ldr	r3, [pc, #76]	@ (8002c24 <Gpio_init+0x6c>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	4a12      	ldr	r2, [pc, #72]	@ (8002c24 <Gpio_init+0x6c>)
 8002bda:	f043 0308 	orr.w	r3, r3, #8
 8002bde:	6193      	str	r3, [r2, #24]
    GPIOB->CRH &= ~(0xF << 4); // Clear bits for PB9
 8002be0:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <Gpio_init+0x70>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	4a10      	ldr	r2, [pc, #64]	@ (8002c28 <Gpio_init+0x70>)
 8002be6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bea:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~(0xF << 0); // Clear bits for PB8
 8002bec:	4b0e      	ldr	r3, [pc, #56]	@ (8002c28 <Gpio_init+0x70>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002c28 <Gpio_init+0x70>)
 8002bf2:	f023 030f 	bic.w	r3, r3, #15
 8002bf6:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=(1<<2);
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c28 <Gpio_init+0x70>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4a0a      	ldr	r2, [pc, #40]	@ (8002c28 <Gpio_init+0x70>)
 8002bfe:	f043 0304 	orr.w	r3, r3, #4
 8002c02:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=(0Xb0);
 8002c04:	4b08      	ldr	r3, [pc, #32]	@ (8002c28 <Gpio_init+0x70>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a07      	ldr	r2, [pc, #28]	@ (8002c28 <Gpio_init+0x70>)
 8002c0a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8002c0e:	6053      	str	r3, [r2, #4]
    AFIO->MAPR|=AFIO_MAPR_CAN_REMAP_REMAP2;
 8002c10:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <Gpio_init+0x74>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4a05      	ldr	r2, [pc, #20]	@ (8002c2c <Gpio_init+0x74>)
 8002c16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c1a:	6053      	str	r3, [r2, #4]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40010c00 	.word	0x40010c00
 8002c2c:	40010000 	.word	0x40010000

08002c30 <can_init>:
STATUS can_init(uint32_t Baud_Rate){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
	Gpio_init();
 8002c38:	f7ff ffbe 	bl	8002bb8 <Gpio_init>
	CAN1->MCR &= ~CAN_MCR_AWUM_Msk;
 8002c3c:	4b37      	ldr	r3, [pc, #220]	@ (8002d1c <can_init+0xec>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a36      	ldr	r2, [pc, #216]	@ (8002d1c <can_init+0xec>)
 8002c42:	f023 0320 	bic.w	r3, r3, #32
 8002c46:	6013      	str	r3, [r2, #0]
	CAN1->MCR &= ~CAN_MCR_SLEEP_Msk;
 8002c48:	4b34      	ldr	r3, [pc, #208]	@ (8002d1c <can_init+0xec>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a33      	ldr	r2, [pc, #204]	@ (8002d1c <can_init+0xec>)
 8002c4e:	f023 0302 	bic.w	r3, r3, #2
 8002c52:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_MCR_INRQ_Msk;
 8002c54:	4b31      	ldr	r3, [pc, #196]	@ (8002d1c <can_init+0xec>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a30      	ldr	r2, [pc, #192]	@ (8002d1c <can_init+0xec>)
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	6013      	str	r3, [r2, #0]
	while (!(CAN1->MSR & CAN_MSR_INAK_Msk));
 8002c60:	bf00      	nop
 8002c62:	4b2e      	ldr	r3, [pc, #184]	@ (8002d1c <can_init+0xec>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f9      	beq.n	8002c62 <can_init+0x32>
	if(set_baudrate(Baud_Rate)==RY_NOT_OK)
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff fe78 	bl	8002964 <set_baudrate>
	{
		RY_NOT_OK;
	}
    CAN1->MCR |= CAN_MCR_ABOM;   // <-- This must be here
 8002c74:	4b29      	ldr	r3, [pc, #164]	@ (8002d1c <can_init+0xec>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a28      	ldr	r2, [pc, #160]	@ (8002d1c <can_init+0xec>)
 8002c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c7e:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_MCR_ABOM;   // auto bus-off recovery
 8002c80:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <can_init+0xec>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a25      	ldr	r2, [pc, #148]	@ (8002d1c <can_init+0xec>)
 8002c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c8a:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_MCR_TXFP;   // FIFO priority
 8002c8c:	4b23      	ldr	r3, [pc, #140]	@ (8002d1c <can_init+0xec>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a22      	ldr	r2, [pc, #136]	@ (8002d1c <can_init+0xec>)
 8002c92:	f043 0304 	orr.w	r3, r3, #4
 8002c96:	6013      	str	r3, [r2, #0]
	CAN1->MCR &= ~(1<<0);  // CLEAR INQR BIT TO LEAVE INTILAIZE MODE=
 8002c98:	4b20      	ldr	r3, [pc, #128]	@ (8002d1c <can_init+0xec>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a1f      	ldr	r2, [pc, #124]	@ (8002d1c <can_init+0xec>)
 8002c9e:	f023 0301 	bic.w	r3, r3, #1
 8002ca2:	6013      	str	r3, [r2, #0]
	while (CAN1->MSR & CAN_MSR_INAK_Msk);  // Wait for Normal Mode
 8002ca4:	bf00      	nop
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d1c <can_init+0xec>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f9      	bne.n	8002ca6 <can_init+0x76>
	CAN1->FMR |= CAN_FMR_FINIT;       // Enter filter init mode
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d1c <can_init+0xec>)
 8002cb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002cb8:	4a18      	ldr	r2, [pc, #96]	@ (8002d1c <can_init+0xec>)
 8002cba:	f043 0301 	orr.w	r3, r3, #1
 8002cbe:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

	CAN1->FA1R = 0;                   // Disable all filters
 8002cc2:	4b16      	ldr	r3, [pc, #88]	@ (8002d1c <can_init+0xec>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	CAN1->FM1R = 0;                   // Identifier Mask mode
 8002cca:	4b14      	ldr	r3, [pc, #80]	@ (8002d1c <can_init+0xec>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	CAN1->FS1R = 1;                   // 32-bit scale
 8002cd2:	4b12      	ldr	r3, [pc, #72]	@ (8002d1c <can_init+0xec>)
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	CAN1->FFA1R = 0;                  // Assign to FIFO0
 8002cda:	4b10      	ldr	r3, [pc, #64]	@ (8002d1c <can_init+0xec>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	CAN1->sFilterRegister[0].FR1 = 0x00000000;  // ID = 0
 8002ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8002d1c <can_init+0xec>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
	CAN1->sFilterRegister[0].FR2 = 0x00000000;  // Mask = 0
 8002cea:	4b0c      	ldr	r3, [pc, #48]	@ (8002d1c <can_init+0xec>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244

	CAN1->FA1R |= 1;                  // Enable filter 0
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <can_init+0xec>)
 8002cf4:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8002cf8:	4a08      	ldr	r2, [pc, #32]	@ (8002d1c <can_init+0xec>)
 8002cfa:	f043 0301 	orr.w	r3, r3, #1
 8002cfe:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

	CAN1->FMR &= ~CAN_FMR_FINIT;
 8002d02:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <can_init+0xec>)
 8002d04:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d08:	4a04      	ldr	r2, [pc, #16]	@ (8002d1c <can_init+0xec>)
 8002d0a:	f023 0301 	bic.w	r3, r3, #1
 8002d0e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	return RY_OK;
 8002d12:	2301      	movs	r3, #1
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40006400 	.word	0x40006400

08002d20 <check_can_bus>:
void check_can_bus(void) {
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
	 uint32_t esr = CAN1->ESR;
 8002d26:	4b31      	ldr	r3, [pc, #196]	@ (8002dec <check_can_bus+0xcc>)
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	607b      	str	r3, [r7, #4]
	uint8_t bus_off = (CAN1->ESR & CAN_ESR_BOFF) ? 1 : 0;
 8002d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8002dec <check_can_bus+0xcc>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bf14      	ite	ne
 8002d38:	2301      	movne	r3, #1
 8002d3a:	2300      	moveq	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	70fb      	strb	r3, [r7, #3]
	uint8_t error_passive = (CAN1->ESR & CAN_ESR_EPVF) ? 1 : 0;
 8002d40:	4b2a      	ldr	r3, [pc, #168]	@ (8002dec <check_can_bus+0xcc>)
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf14      	ite	ne
 8002d4c:	2301      	movne	r3, #1
 8002d4e:	2300      	moveq	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	70bb      	strb	r3, [r7, #2]
	uint8_t error_warning = (CAN1->ESR & CAN_ESR_EWGF) ? 1 : 0;
 8002d54:	4b25      	ldr	r3, [pc, #148]	@ (8002dec <check_can_bus+0xcc>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bf14      	ite	ne
 8002d60:	2301      	movne	r3, #1
 8002d62:	2300      	moveq	r3, #0
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	707b      	strb	r3, [r7, #1]

	// Determine bus_ok
	if (bus_off) bus_ok = 0;
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <check_can_bus+0x56>
 8002d6e:	4b20      	ldr	r3, [pc, #128]	@ (8002df0 <check_can_bus+0xd0>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
 8002d74:	e010      	b.n	8002d98 <check_can_bus+0x78>
	else if (error_passive) bus_ok = 0;
 8002d76:	78bb      	ldrb	r3, [r7, #2]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <check_can_bus+0x64>
 8002d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002df0 <check_can_bus+0xd0>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e009      	b.n	8002d98 <check_can_bus+0x78>
	else if (error_warning) bus_ok = 0;
 8002d84:	787b      	ldrb	r3, [r7, #1]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <check_can_bus+0x72>
 8002d8a:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <check_can_bus+0xd0>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	701a      	strb	r2, [r3, #0]
 8002d90:	e002      	b.n	8002d98 <check_can_bus+0x78>
	else bus_ok = 1;
 8002d92:	4b17      	ldr	r3, [pc, #92]	@ (8002df0 <check_can_bus+0xd0>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
	   // Optional: force soft reset if bus-off persists and ABOM not enabled
	     if ((esr & CAN_ESR_BOFF) && !(CAN1->MCR & CAN_MCR_ABOM)) {
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d01f      	beq.n	8002de2 <check_can_bus+0xc2>
 8002da2:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <check_can_bus+0xcc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d119      	bne.n	8002de2 <check_can_bus+0xc2>
	         CAN1->MCR |= CAN_MCR_INRQ;
 8002dae:	4b0f      	ldr	r3, [pc, #60]	@ (8002dec <check_can_bus+0xcc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a0e      	ldr	r2, [pc, #56]	@ (8002dec <check_can_bus+0xcc>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6013      	str	r3, [r2, #0]
	         while (!(CAN1->MSR & CAN_MSR_INAK));
 8002dba:	bf00      	nop
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <check_can_bus+0xcc>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f9      	beq.n	8002dbc <check_can_bus+0x9c>
	         CAN1->MCR &= ~CAN_MCR_INRQ;
 8002dc8:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <check_can_bus+0xcc>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a07      	ldr	r2, [pc, #28]	@ (8002dec <check_can_bus+0xcc>)
 8002dce:	f023 0301 	bic.w	r3, r3, #1
 8002dd2:	6013      	str	r3, [r2, #0]
	         while (CAN1->MSR & CAN_MSR_INAK);
 8002dd4:	bf00      	nop
 8002dd6:	4b05      	ldr	r3, [pc, #20]	@ (8002dec <check_can_bus+0xcc>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f9      	bne.n	8002dd6 <check_can_bus+0xb6>
	     }
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	40006400 	.word	0x40006400
 8002df0:	20000004 	.word	0x20000004

08002df4 <send_can_remote_frame>:
			 CAN1->sTxMailBox[mail_box].TDHR|=(frame.data[i]<<((i-4)*8));
		 }
	 }
	CAN1->sTxMailBox[mail_box].TIR |= (1<<0);
	}
void send_can_remote_frame(can_frame_t frame){
 8002df4:	b490      	push	{r4, r7}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	463c      	mov	r4, r7
 8002dfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t tme_mask = CAN1->TSR & (CAN_TSR_TME0 | CAN_TSR_TME1 | CAN_TSR_TME2);
 8002e00:	4b49      	ldr	r3, [pc, #292]	@ (8002f28 <send_can_remote_frame+0x134>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 53e0 	and.w	r3, r3, #469762048	@ 0x1c000000
 8002e08:	613b      	str	r3, [r7, #16]
		int mail_box = 0;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
	    if (tme_mask & CAN_TSR_TME0) {
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <send_can_remote_frame+0x2a>
	        mail_box = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	e00e      	b.n	8002e3c <send_can_remote_frame+0x48>
	    } else if (tme_mask & CAN_TSR_TME1) {
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <send_can_remote_frame+0x3a>
	        mail_box = 1;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e006      	b.n	8002e3c <send_can_remote_frame+0x48>
	    } else if (tme_mask & CAN_TSR_TME2) {
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <send_can_remote_frame+0x48>
	        mail_box = 2;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	617b      	str	r3, [r7, #20]
	    }
		CAN1->sTxMailBox[mail_box].TIR = 0x00000000;
 8002e3c:	4a3a      	ldr	r2, [pc, #232]	@ (8002f28 <send_can_remote_frame+0x134>)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3318      	adds	r3, #24
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	4413      	add	r3, r2
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
		if(frame.ide==0){
 8002e4a:	793b      	ldrb	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10f      	bne.n	8002e70 <send_can_remote_frame+0x7c>
			CAN1->sTxMailBox[mail_box].TIR |= (frame.id<<21);
 8002e50:	4a35      	ldr	r2, [pc, #212]	@ (8002f28 <send_can_remote_frame+0x134>)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3318      	adds	r3, #24
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	4413      	add	r3, r2
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	055b      	lsls	r3, r3, #21
 8002e60:	4931      	ldr	r1, [pc, #196]	@ (8002f28 <send_can_remote_frame+0x134>)
 8002e62:	431a      	orrs	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	3318      	adds	r3, #24
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	440b      	add	r3, r1
 8002e6c:	601a      	str	r2, [r3, #0]
 8002e6e:	e010      	b.n	8002e92 <send_can_remote_frame+0x9e>

		}else{
			CAN1->sTxMailBox[mail_box].TIR |= (frame.id<<3)|(1<<2);
 8002e70:	4a2d      	ldr	r2, [pc, #180]	@ (8002f28 <send_can_remote_frame+0x134>)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	3318      	adds	r3, #24
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	4413      	add	r3, r2
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4313      	orrs	r3, r2
 8002e82:	4929      	ldr	r1, [pc, #164]	@ (8002f28 <send_can_remote_frame+0x134>)
 8002e84:	f043 0204 	orr.w	r2, r3, #4
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	3318      	adds	r3, #24
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	440b      	add	r3, r1
 8002e90:	601a      	str	r2, [r3, #0]

		}
	    CAN1->sTxMailBox[mail_box].TDTR = (frame.dlc & 0x0F);
 8002e92:	79bb      	ldrb	r3, [r7, #6]
 8002e94:	4924      	ldr	r1, [pc, #144]	@ (8002f28 <send_can_remote_frame+0x134>)
 8002e96:	f003 020f 	and.w	r2, r3, #15
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	3318      	adds	r3, #24
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mail_box].TIR |= 1<<1;
 8002ea6:	4a20      	ldr	r2, [pc, #128]	@ (8002f28 <send_can_remote_frame+0x134>)
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	3318      	adds	r3, #24
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	4413      	add	r3, r2
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	491d      	ldr	r1, [pc, #116]	@ (8002f28 <send_can_remote_frame+0x134>)
 8002eb4:	f043 0202 	orr.w	r2, r3, #2
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	3318      	adds	r3, #24
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	440b      	add	r3, r1
 8002ec0:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mail_box].TDTR &= ~(0xF<<0);
 8002ec2:	4a19      	ldr	r2, [pc, #100]	@ (8002f28 <send_can_remote_frame+0x134>)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	3318      	adds	r3, #24
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	4413      	add	r3, r2
 8002ecc:	3304      	adds	r3, #4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4915      	ldr	r1, [pc, #84]	@ (8002f28 <send_can_remote_frame+0x134>)
 8002ed2:	f023 020f 	bic.w	r2, r3, #15
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	3318      	adds	r3, #24
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	440b      	add	r3, r1
 8002ede:	3304      	adds	r3, #4
 8002ee0:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mail_box].TDTR |= (frame.dlc<<0);
 8002ee2:	4a11      	ldr	r2, [pc, #68]	@ (8002f28 <send_can_remote_frame+0x134>)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3318      	adds	r3, #24
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	4413      	add	r3, r2
 8002eec:	3304      	adds	r3, #4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	79ba      	ldrb	r2, [r7, #6]
 8002ef2:	490d      	ldr	r1, [pc, #52]	@ (8002f28 <send_can_remote_frame+0x134>)
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	3318      	adds	r3, #24
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	440b      	add	r3, r1
 8002efe:	3304      	adds	r3, #4
 8002f00:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mail_box].TIR |= (1<<0);
 8002f02:	4a09      	ldr	r2, [pc, #36]	@ (8002f28 <send_can_remote_frame+0x134>)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3318      	adds	r3, #24
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	4413      	add	r3, r2
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4906      	ldr	r1, [pc, #24]	@ (8002f28 <send_can_remote_frame+0x134>)
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3318      	adds	r3, #24
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	440b      	add	r3, r1
 8002f1c:	601a      	str	r2, [r3, #0]
}
 8002f1e:	bf00      	nop
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc90      	pop	{r4, r7}
 8002f26:	4770      	bx	lr
 8002f28:	40006400 	.word	0x40006400

08002f2c <CAN_MessagePending>:
 * @param fifo_number The FIFO to check (0 for FIFO0, 1 for FIFO1).
 * @param rx_message A pointer to the CanRxMsg structure to store the received data.
 * @return 1 if a message was successfully received, 0 otherwise.
 */
uint8_t CAN_MessagePending(uint8_t fifo)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	71fb      	strb	r3, [r7, #7]
    if (fifo == 0)
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d106      	bne.n	8002f4a <CAN_MessagePending+0x1e>
        return (CAN1->RF0R & CAN_RF0R_FMP0_Msk);
 8002f3c:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <CAN_MessagePending+0x34>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	e005      	b.n	8002f56 <CAN_MessagePending+0x2a>
    else
        return (CAN1->RF1R & CAN_RF1R_FMP1_Msk);
 8002f4a:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <CAN_MessagePending+0x34>)
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	b2db      	uxtb	r3, r3
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	40006400 	.word	0x40006400

08002f64 <can_rx>:

uint8_t can_rx(can_frame_t *RxMessage,uint8_t fifo_number){
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	70fb      	strb	r3, [r7, #3]
	  RxMessage->ide = (uint8_t)0x04 & CAN1->sFIFOMailBox[fifo_number].RIR;
 8002f70:	4a44      	ldr	r2, [pc, #272]	@ (8003084 <can_rx+0x120>)
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	331b      	adds	r3, #27
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	4413      	add	r3, r2
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	711a      	strb	r2, [r3, #4]
	  if (RxMessage->ide == 0)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	791b      	ldrb	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10b      	bne.n	8002fa8 <can_rx+0x44>
	  {
	    RxMessage->id = (uint32_t)0x000007FF & (CAN1->sFIFOMailBox[fifo_number].RIR >> 21);
 8002f90:	4a3c      	ldr	r2, [pc, #240]	@ (8003084 <can_rx+0x120>)
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	331b      	adds	r3, #27
 8002f96:	011b      	lsls	r3, r3, #4
 8002f98:	4413      	add	r3, r2
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	0d5b      	lsrs	r3, r3, #21
 8002f9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	e00a      	b.n	8002fbe <can_rx+0x5a>
	  }
	  else
	  {
	    RxMessage->id = (uint32_t)0x1FFFFFFF & (CAN1->sFIFOMailBox[fifo_number].RIR >> 3);
 8002fa8:	4a36      	ldr	r2, [pc, #216]	@ (8003084 <can_rx+0x120>)
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	331b      	adds	r3, #27
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	4413      	add	r3, r2
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	08db      	lsrs	r3, r3, #3
 8002fb6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	601a      	str	r2, [r3, #0]
	  }

	  RxMessage->rtr = (uint8_t)0x02 & CAN1->sFIFOMailBox[fifo_number].RIR;
 8002fbe:	4a31      	ldr	r2, [pc, #196]	@ (8003084 <can_rx+0x120>)
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	331b      	adds	r3, #27
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	4413      	add	r3, r2
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	715a      	strb	r2, [r3, #5]
	  /* Get the DLC */
	  RxMessage->dlc = (uint8_t)0x0F & CAN1->sFIFOMailBox[fifo_number].RDTR;
 8002fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8003084 <can_rx+0x120>)
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	331b      	adds	r3, #27
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	4413      	add	r3, r2
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	719a      	strb	r2, [r3, #6]
	  /* Get the data field */
	  for(uint8_t i=0;i< RxMessage->dlc;i++){
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73fb      	strb	r3, [r7, #15]
 8002ff4:	e027      	b.n	8003046 <can_rx+0xe2>
		  if(i<4){
 8002ff6:	7bfb      	ldrb	r3, [r7, #15]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d810      	bhi.n	800301e <can_rx+0xba>
			  RxMessage->data[i] = (CAN1->sFIFOMailBox[fifo_number].RDLR>>(i*8));
 8002ffc:	4a21      	ldr	r2, [pc, #132]	@ (8003084 <can_rx+0x120>)
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	4413      	add	r3, r2
 8003004:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	7bfb      	ldrb	r3, [r7, #15]
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	40da      	lsrs	r2, r3
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	b2d1      	uxtb	r1, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	460a      	mov	r2, r1
 800301a:	71da      	strb	r2, [r3, #7]
 800301c:	e010      	b.n	8003040 <can_rx+0xdc>
		  }else{
			  RxMessage->data[i] = (CAN1->sFIFOMailBox[fifo_number].RDHR>>(((i-4)*8)));
 800301e:	4a19      	ldr	r2, [pc, #100]	@ (8003084 <can_rx+0x120>)
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	4413      	add	r3, r2
 8003026:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	3b04      	subs	r3, #4
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	40da      	lsrs	r2, r3
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	b2d1      	uxtb	r1, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	460a      	mov	r2, r1
 800303e:	71da      	strb	r2, [r3, #7]
	  for(uint8_t i=0;i< RxMessage->dlc;i++){
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	3301      	adds	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	799b      	ldrb	r3, [r3, #6]
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	429a      	cmp	r2, r3
 800304e:	d3d2      	bcc.n	8002ff6 <can_rx+0x92>

		  }
	  }
	  if (fifo_number == 0)
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <can_rx+0x100>
	  {
		  CAN1->RF0R |= CAN_RF0R_RFOM0;
 8003056:	4b0b      	ldr	r3, [pc, #44]	@ (8003084 <can_rx+0x120>)
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	4a0a      	ldr	r2, [pc, #40]	@ (8003084 <can_rx+0x120>)
 800305c:	f043 0320 	orr.w	r3, r3, #32
 8003060:	60d3      	str	r3, [r2, #12]
 8003062:	e008      	b.n	8003076 <can_rx+0x112>
	  }
	  else if (fifo_number == 1)
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d105      	bne.n	8003076 <can_rx+0x112>
	  {
		  CAN1->RF1R |= CAN_RF1R_RFOM1;
 800306a:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <can_rx+0x120>)
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	4a05      	ldr	r2, [pc, #20]	@ (8003084 <can_rx+0x120>)
 8003070:	f043 0320 	orr.w	r3, r3, #32
 8003074:	6113      	str	r3, [r2, #16]
	  }
	  return 1;
 8003076:	2301      	movs	r3, #1
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40006400 	.word	0x40006400

08003088 <Condensor_Relay_Pins_Init>:

#include"extern_file_declarations.h"

#define PB15_CONDENSOR   15

void Condensor_Relay_Pins_Init(){
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800308c:	4b0d      	ldr	r3, [pc, #52]	@ (80030c4 <Condensor_Relay_Pins_Init+0x3c>)
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	4a0c      	ldr	r2, [pc, #48]	@ (80030c4 <Condensor_Relay_Pins_Init+0x3c>)
 8003092:	f043 0308 	orr.w	r3, r3, #8
 8003096:	6193      	str	r3, [r2, #24]
    GPIOB->CRH&=~((0xF<<28));
 8003098:	4b0b      	ldr	r3, [pc, #44]	@ (80030c8 <Condensor_Relay_Pins_Init+0x40>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a0a      	ldr	r2, [pc, #40]	@ (80030c8 <Condensor_Relay_Pins_Init+0x40>)
 800309e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80030a2:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=((0x3<<28));
 80030a4:	4b08      	ldr	r3, [pc, #32]	@ (80030c8 <Condensor_Relay_Pins_Init+0x40>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a07      	ldr	r2, [pc, #28]	@ (80030c8 <Condensor_Relay_Pins_Init+0x40>)
 80030aa:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 80030ae:	6053      	str	r3, [r2, #4]
    GPIOB->ODR|=((1<<PB15_CONDENSOR));
 80030b0:	4b05      	ldr	r3, [pc, #20]	@ (80030c8 <Condensor_Relay_Pins_Init+0x40>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	4a04      	ldr	r2, [pc, #16]	@ (80030c8 <Condensor_Relay_Pins_Init+0x40>)
 80030b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030ba:	60d3      	str	r3, [r2, #12]
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40010c00 	.word	0x40010c00

080030cc <clock_print_status>:
#include"JBD_BMS.h"
#include"JBD_BMS_MESSAGES.h"
#include"Data_Watchpoint_Trace.h"
extern void matel_mcu_process_can_frame(can_frame_t *);
I2C_HandleTypeDef hi2c1;
void clock_print_status(){
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
    uart_printf("\r\n=====================================\r\n");
 80030d0:	4817      	ldr	r0, [pc, #92]	@ (8003130 <clock_print_status+0x64>)
 80030d2:	f001 fd2d 	bl	8004b30 <uart_printf>
    uart_printf("EVA DRIVE_MODE_SELECTOR & HVAC \r\n");
 80030d6:	4817      	ldr	r0, [pc, #92]	@ (8003134 <clock_print_status+0x68>)
 80030d8:	f001 fd2a 	bl	8004b30 <uart_printf>
    uart_printf("=====================================\r\n");
 80030dc:	4816      	ldr	r0, [pc, #88]	@ (8003138 <clock_print_status+0x6c>)
 80030de:	f001 fd27 	bl	8004b30 <uart_printf>
    uart_printf("System Clock: %lu MHz\r\n", get_SYSCLK_freq() / 1000000);
 80030e2:	f001 f9f3 	bl	80044cc <get_SYSCLK_freq>
 80030e6:	4603      	mov	r3, r0
 80030e8:	4a14      	ldr	r2, [pc, #80]	@ (800313c <clock_print_status+0x70>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	0c9b      	lsrs	r3, r3, #18
 80030f0:	4619      	mov	r1, r3
 80030f2:	4813      	ldr	r0, [pc, #76]	@ (8003140 <clock_print_status+0x74>)
 80030f4:	f001 fd1c 	bl	8004b30 <uart_printf>
    uart_printf("APB1 Clock: %lu MHz\r\n", get_APB1_freq() / 1000000);
 80030f8:	f001 fa66 	bl	80045c8 <get_APB1_freq>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4a0f      	ldr	r2, [pc, #60]	@ (800313c <clock_print_status+0x70>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	0c9b      	lsrs	r3, r3, #18
 8003106:	4619      	mov	r1, r3
 8003108:	480e      	ldr	r0, [pc, #56]	@ (8003144 <clock_print_status+0x78>)
 800310a:	f001 fd11 	bl	8004b30 <uart_printf>
    uart_printf("APB2 Clock: %lu MHz\r\n", get_APB2_freq() / 1000000);
 800310e:	f001 fa81 	bl	8004614 <get_APB2_freq>
 8003112:	4603      	mov	r3, r0
 8003114:	4a09      	ldr	r2, [pc, #36]	@ (800313c <clock_print_status+0x70>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	0c9b      	lsrs	r3, r3, #18
 800311c:	4619      	mov	r1, r3
 800311e:	480a      	ldr	r0, [pc, #40]	@ (8003148 <clock_print_status+0x7c>)
 8003120:	f001 fd06 	bl	8004b30 <uart_printf>
    uart_printf("=====================================\r\n");
 8003124:	4804      	ldr	r0, [pc, #16]	@ (8003138 <clock_print_status+0x6c>)
 8003126:	f001 fd03 	bl	8004b30 <uart_printf>
}
 800312a:	bf00      	nop
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	08009ed4 	.word	0x08009ed4
 8003134:	08009f00 	.word	0x08009f00
 8003138:	08009f24 	.word	0x08009f24
 800313c:	431bde83 	.word	0x431bde83
 8003140:	08009f4c 	.word	0x08009f4c
 8003144:	08009f64 	.word	0x08009f64
 8003148:	08009f7c 	.word	0x08009f7c

0800314c <CAN_ConfigFilterBank>:
#define MAX_FILTERS 14

// Helper: configure one filter bank with up to 2 IDs
static void CAN_ConfigFilterBank(int bank, uint32_t id1, uint32_t id2, uint8_t fifo, uint8_t isExtended)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	70fb      	strb	r3, [r7, #3]
    CAN1->FA1R &= ~(1 << bank);     // deactivate
 800315a:	4b3f      	ldr	r3, [pc, #252]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 800315c:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8003160:	2101      	movs	r1, #1
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	fa01 f202 	lsl.w	r2, r1, r2
 8003168:	43d2      	mvns	r2, r2
 800316a:	4611      	mov	r1, r2
 800316c:	4a3a      	ldr	r2, [pc, #232]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 800316e:	400b      	ands	r3, r1
 8003170:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

    CAN1->FM1R |= (1 << bank);      // list mode
 8003174:	4b38      	ldr	r3, [pc, #224]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 8003176:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800317a:	2101      	movs	r1, #1
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	fa01 f202 	lsl.w	r2, r1, r2
 8003182:	4611      	mov	r1, r2
 8003184:	4a34      	ldr	r2, [pc, #208]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 8003186:	430b      	orrs	r3, r1
 8003188:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    CAN1->FS1R |= (1 << bank);      // 32-bit scale
 800318c:	4b32      	ldr	r3, [pc, #200]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 800318e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8003192:	2101      	movs	r1, #1
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	fa01 f202 	lsl.w	r2, r1, r2
 800319a:	4611      	mov	r1, r2
 800319c:	4a2e      	ldr	r2, [pc, #184]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 800319e:	430b      	orrs	r3, r1
 80031a0:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c

    if (isExtended) {
 80031a4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d017      	beq.n	80031dc <CAN_ConfigFilterBank+0x90>
        // Extended: shift << 3, set IDE bit
        uint32_t eid1 = (id1 << 3) | (1 << 2);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	617b      	str	r3, [r7, #20]
        uint32_t eid2 = (id2 << 3) | (1 << 2);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	f043 0304 	orr.w	r3, r3, #4
 80031be:	613b      	str	r3, [r7, #16]
        CAN1->sFilterRegister[bank].FR1 = eid1;
 80031c0:	4925      	ldr	r1, [pc, #148]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3348      	adds	r3, #72	@ 0x48
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        CAN1->sFilterRegister[bank].FR2 = eid2;
 80031cc:	4a22      	ldr	r2, [pc, #136]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	3348      	adds	r3, #72	@ 0x48
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	4413      	add	r3, r2
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	e00e      	b.n	80031fa <CAN_ConfigFilterBank+0xae>
    } else {
        // Standard: shift << 21
        CAN1->sFilterRegister[bank].FR1 = (id1 << 21);
 80031dc:	491e      	ldr	r1, [pc, #120]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	055a      	lsls	r2, r3, #21
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3348      	adds	r3, #72	@ 0x48
 80031e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        CAN1->sFilterRegister[bank].FR2 = (id2 << 21);
 80031ea:	491b      	ldr	r1, [pc, #108]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	055a      	lsls	r2, r3, #21
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3348      	adds	r3, #72	@ 0x48
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	440b      	add	r3, r1
 80031f8:	605a      	str	r2, [r3, #4]
    }

    if (fifo == 0)
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10d      	bne.n	800321c <CAN_ConfigFilterBank+0xd0>
        CAN1->FFA1R &= ~(1 << bank);   // FIFO0
 8003200:	4b15      	ldr	r3, [pc, #84]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 8003202:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8003206:	2101      	movs	r1, #1
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	fa01 f202 	lsl.w	r2, r1, r2
 800320e:	43d2      	mvns	r2, r2
 8003210:	4611      	mov	r1, r2
 8003212:	4a11      	ldr	r2, [pc, #68]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 8003214:	400b      	ands	r3, r1
 8003216:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
 800321a:	e00b      	b.n	8003234 <CAN_ConfigFilterBank+0xe8>
    else
        CAN1->FFA1R |= (1 << bank);    // FIFO1
 800321c:	4b0e      	ldr	r3, [pc, #56]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 800321e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8003222:	2101      	movs	r1, #1
 8003224:	68fa      	ldr	r2, [r7, #12]
 8003226:	fa01 f202 	lsl.w	r2, r1, r2
 800322a:	4611      	mov	r1, r2
 800322c:	4a0a      	ldr	r2, [pc, #40]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 800322e:	430b      	orrs	r3, r1
 8003230:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

    CAN1->FA1R |= (1 << bank);         // activate
 8003234:	4b08      	ldr	r3, [pc, #32]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 8003236:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800323a:	2101      	movs	r1, #1
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	fa01 f202 	lsl.w	r2, r1, r2
 8003242:	4611      	mov	r1, r2
 8003244:	4a04      	ldr	r2, [pc, #16]	@ (8003258 <CAN_ConfigFilterBank+0x10c>)
 8003246:	430b      	orrs	r3, r1
 8003248:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
}
 800324c:	bf00      	nop
 800324e:	371c      	adds	r7, #28
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40006400 	.word	0x40006400

0800325c <CAN_LoadFilters>:

// Main filter loader
void CAN_LoadFilters(uint32_t *mcu_std, int mcu_std_count,
                     uint32_t *mcu_ext, int mcu_ext_count,
                     uint32_t *bms_std, int bms_std_count)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b090      	sub	sp, #64	@ 0x40
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
    int filter_bank = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	637b      	str	r3, [r7, #52]	@ 0x34

    CAN1->FMR |= CAN_FMR_FINIT; // Enter filter init
 800326e:	4b4c      	ldr	r3, [pc, #304]	@ (80033a0 <CAN_LoadFilters+0x144>)
 8003270:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003274:	4a4a      	ldr	r2, [pc, #296]	@ (80033a0 <CAN_LoadFilters+0x144>)
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

    // --- MCU Std IDs → FIFO0 ---
    for (int i = 0; i < mcu_std_count; i += 2) {
 800327e:	2300      	movs	r3, #0
 8003280:	633b      	str	r3, [r7, #48]	@ 0x30
 8003282:	e024      	b.n	80032ce <CAN_LoadFilters+0x72>
        uint32_t id1 = mcu_std[i];
 8003284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	617b      	str	r3, [r7, #20]
        uint32_t id2 = (i+1 < mcu_std_count) ? mcu_std[i+1] : mcu_std[i]; // duplicate if odd count
 8003290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003292:	3301      	adds	r3, #1
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	429a      	cmp	r2, r3
 8003298:	dd06      	ble.n	80032a8 <CAN_LoadFilters+0x4c>
 800329a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329c:	3301      	adds	r3, #1
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	4413      	add	r3, r2
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	e004      	b.n	80032b2 <CAN_LoadFilters+0x56>
 80032a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	613b      	str	r3, [r7, #16]
        CAN_ConfigFilterBank(filter_bank++, id1, id2, 0, 0);
 80032b4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80032b6:	1c43      	adds	r3, r0, #1
 80032b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ba:	2300      	movs	r3, #0
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	2300      	movs	r3, #0
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	6979      	ldr	r1, [r7, #20]
 80032c4:	f7ff ff42 	bl	800314c <CAN_ConfigFilterBank>
    for (int i = 0; i < mcu_std_count; i += 2) {
 80032c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ca:	3302      	adds	r3, #2
 80032cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	dbd6      	blt.n	8003284 <CAN_LoadFilters+0x28>
    }

    // --- MCU Ext IDs → FIFO0 ---
    for (int i = 0; i < mcu_ext_count; i += 2) {
 80032d6:	2300      	movs	r3, #0
 80032d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032da:	e024      	b.n	8003326 <CAN_LoadFilters+0xca>
        uint32_t id1 = mcu_ext[i];
 80032dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4413      	add	r3, r2
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	61fb      	str	r3, [r7, #28]
        uint32_t id2 = (i+1 < mcu_ext_count) ? mcu_ext[i+1] : mcu_ext[i];
 80032e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ea:	3301      	adds	r3, #1
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	dd06      	ble.n	8003300 <CAN_LoadFilters+0xa4>
 80032f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f4:	3301      	adds	r3, #1
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4413      	add	r3, r2
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	e004      	b.n	800330a <CAN_LoadFilters+0xae>
 8003300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	61bb      	str	r3, [r7, #24]
        CAN_ConfigFilterBank(filter_bank++, id1, id2, 0, 1);
 800330c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800330e:	1c43      	adds	r3, r0, #1
 8003310:	637b      	str	r3, [r7, #52]	@ 0x34
 8003312:	2301      	movs	r3, #1
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	2300      	movs	r3, #0
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	69f9      	ldr	r1, [r7, #28]
 800331c:	f7ff ff16 	bl	800314c <CAN_ConfigFilterBank>
    for (int i = 0; i < mcu_ext_count; i += 2) {
 8003320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003322:	3302      	adds	r3, #2
 8003324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003326:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	dbd6      	blt.n	80032dc <CAN_LoadFilters+0x80>
    }

    // --- BMS Std IDs → FIFO1 ---
    for (int i = 0; i < bms_std_count; i += 2) {
 800332e:	2300      	movs	r3, #0
 8003330:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003332:	e024      	b.n	800337e <CAN_LoadFilters+0x122>
        uint32_t id1 = bms_std[i];
 8003334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800333a:	4413      	add	r3, r2
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t id2 = (i+1 < bms_std_count) ? bms_std[i+1] : bms_std[i];
 8003340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003342:	3301      	adds	r3, #1
 8003344:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003346:	429a      	cmp	r2, r3
 8003348:	dd06      	ble.n	8003358 <CAN_LoadFilters+0xfc>
 800334a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334c:	3301      	adds	r3, #1
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003352:	4413      	add	r3, r2
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	e004      	b.n	8003362 <CAN_LoadFilters+0x106>
 8003358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800335e:	4413      	add	r3, r2
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	623b      	str	r3, [r7, #32]
        CAN_ConfigFilterBank(filter_bank++, id1, id2, 1, 0);
 8003364:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003366:	1c43      	adds	r3, r0, #1
 8003368:	637b      	str	r3, [r7, #52]	@ 0x34
 800336a:	2300      	movs	r3, #0
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	2301      	movs	r3, #1
 8003370:	6a3a      	ldr	r2, [r7, #32]
 8003372:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003374:	f7ff feea 	bl	800314c <CAN_ConfigFilterBank>
    for (int i = 0; i < bms_std_count; i += 2) {
 8003378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337a:	3302      	adds	r3, #2
 800337c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800337e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003380:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003382:	429a      	cmp	r2, r3
 8003384:	dbd6      	blt.n	8003334 <CAN_LoadFilters+0xd8>
    }

    CAN1->FMR &= ~CAN_FMR_FINIT; // Exit filter init
 8003386:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <CAN_LoadFilters+0x144>)
 8003388:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800338c:	4a04      	ldr	r2, [pc, #16]	@ (80033a0 <CAN_LoadFilters+0x144>)
 800338e:	f023 0301 	bic.w	r3, r3, #1
 8003392:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
}
 8003396:	bf00      	nop
 8003398:	3738      	adds	r7, #56	@ 0x38
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40006400 	.word	0x40006400

080033a4 <can_ids_filter_configure>:

// --- User config wrapper ---
void can_ids_filter_configure(void)
{
 80033a4:	b5b0      	push	{r4, r5, r7, lr}
 80033a6:	b094      	sub	sp, #80	@ 0x50
 80033a8:	af02      	add	r7, sp, #8
//			Matel_MCU_Stat_Two_CAN_EXTD_ID_18275040,
////			Matel_VECTOR__INDEPENDENT_SIG_MSG_0xC0000000
//    };
//    configure_can_filters(standard_rx_ids,sizeof(standard_rx_ids)/sizeof(standard_rx_ids[0]),extended_rx_ids,sizeof(extended_rx_ids)/sizeof(extended_rx_ids[0]));

    uint32_t mcu_standard_rx_ids[] = {
 80033aa:	4b14      	ldr	r3, [pc, #80]	@ (80033fc <can_ids_filter_configure+0x58>)
 80033ac:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80033b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        Matel_MCU_POWER_CAN_STD_ID_A1,
        Matel_MCU_FAULT_one_CAN_STD_ID_AE,
        Matel_MCU_FAULT_two_CAN_STD_ID_AF,
        Matel_MCU_Fault_Code_CAN_STD_ID_B3,
    };
    uint32_t bms_standard_ids[] = {
 80033b6:	4b12      	ldr	r3, [pc, #72]	@ (8003400 <can_ids_filter_configure+0x5c>)
 80033b8:	f107 0408 	add.w	r4, r7, #8
 80033bc:	461d      	mov	r5, r3
 80033be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        JBD_BMS_ID10,
        JBD_BMS_ID11,
        JBD_BMS_ID12,
    };

    uint32_t mcu_extended_rx_ids[] = {
 80033ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003404 <can_ids_filter_configure+0x60>)
 80033d0:	463b      	mov	r3, r7
 80033d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80033d6:	e883 0003 	stmia.w	r3, {r0, r1}
        Matel_MCU_Stat_One_CAN_EXTD_ID_18265040,
        Matel_MCU_Stat_Two_CAN_EXTD_ID_18275040,
//        Matel_VECTOR__INDEPENDENT_SIG_MSG_0xC0000000
    };

    CAN_LoadFilters(mcu_standard_rx_ids,
 80033da:	463a      	mov	r2, r7
 80033dc:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80033e0:	230c      	movs	r3, #12
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	f107 0308 	add.w	r3, r7, #8
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	2302      	movs	r3, #2
 80033ec:	2104      	movs	r1, #4
 80033ee:	f7ff ff35 	bl	800325c <CAN_LoadFilters>
                    sizeof(mcu_standard_rx_ids)/sizeof(mcu_standard_rx_ids[0]),
                    mcu_extended_rx_ids,
                    sizeof(mcu_extended_rx_ids)/sizeof(mcu_extended_rx_ids[0]),
                    bms_standard_ids,
                    sizeof(bms_standard_ids)/sizeof(bms_standard_ids[0]));
}
 80033f2:	bf00      	nop
 80033f4:	3748      	adds	r7, #72	@ 0x48
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bdb0      	pop	{r4, r5, r7, pc}
 80033fa:	bf00      	nop
 80033fc:	08009f94 	.word	0x08009f94
 8003400:	08009fa4 	.word	0x08009fa4
 8003404:	08009fd4 	.word	0x08009fd4

08003408 <main>:
}
#define PB0_REVERSE 0
#define PB1_NEUTRAL 1
#define PB3_DRIVE 3

int main(){
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af02      	add	r7, sp, #8
	HAL_Init();
 800340e:	f001 fbed 	bl	8004bec <HAL_Init>
	system_clock_init_to_72MHZ();
 8003412:	f001 f805 	bl	8004420 <system_clock_init_to_72MHZ>
	if(uart3_Init(115200)==RY_NOT_OK){
 8003416:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 800341a:	f001 fa99 	bl	8004950 <uart3_Init>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <main+0x20>
	  Error_Handler();
 8003424:	f000 f8c4 	bl	80035b0 <Error_Handler>
	}
    uart_printf("UART3 initialization is ok ,baud_baudrate in kbps %d:\r\n", 115200);
 8003428:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800342c:	484e      	ldr	r0, [pc, #312]	@ (8003568 <main+0x160>)
 800342e:	f001 fb7f 	bl	8004b30 <uart_printf>
    uart_printf("=========================================================\r\n");
 8003432:	484e      	ldr	r0, [pc, #312]	@ (800356c <main+0x164>)
 8003434:	f001 fb7c 	bl	8004b30 <uart_printf>
	if(uart_init(115200)==RY_NOT_OK){
 8003438:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 800343c:	f001 fa1e 	bl	800487c <uart_init>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <main+0x42>
	  Error_Handler();
 8003446:	f000 f8b3 	bl	80035b0 <Error_Handler>
	}
	clock_print_status();
 800344a:	f7ff fe3f 	bl	80030cc <clock_print_status>
    uart_printf("UART1 initialization is ok ,baud_baudrate in kbps %d:\r\n", 115200);
 800344e:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8003452:	4847      	ldr	r0, [pc, #284]	@ (8003570 <main+0x168>)
 8003454:	f001 fb6c 	bl	8004b30 <uart_printf>
    uart_printf("=========================================================\r\n");
 8003458:	4844      	ldr	r0, [pc, #272]	@ (800356c <main+0x164>)
 800345a:	f001 fb69 	bl	8004b30 <uart_printf>
    systick_init(1000);
 800345e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003462:	f000 ff01 	bl	8004268 <systick_init>
    uart_printf("systick clock initialized for milli second ");
 8003466:	4843      	ldr	r0, [pc, #268]	@ (8003574 <main+0x16c>)
 8003468:	f001 fb62 	bl	8004b30 <uart_printf>
    uart_printf("=========================================================\r\n");
 800346c:	483f      	ldr	r0, [pc, #252]	@ (800356c <main+0x164>)
 800346e:	f001 fb5f 	bl	8004b30 <uart_printf>
	if(can_init(500000)==RY_NOT_OK){
 8003472:	4841      	ldr	r0, [pc, #260]	@ (8003578 <main+0x170>)
 8003474:	f7ff fbdc 	bl	8002c30 <can_init>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d107      	bne.n	800348e <main+0x86>
      uart_printf("CAN initialization is NOT oK\r\n");
 800347e:	483f      	ldr	r0, [pc, #252]	@ (800357c <main+0x174>)
 8003480:	f001 fb56 	bl	8004b30 <uart_printf>
	  uart_printf("======================================================\r\n");
 8003484:	483e      	ldr	r0, [pc, #248]	@ (8003580 <main+0x178>)
 8003486:	f001 fb53 	bl	8004b30 <uart_printf>
	  Error_Handler();
 800348a:	f000 f891 	bl	80035b0 <Error_Handler>
	}
	can_ids_filter_configure();
 800348e:	f7ff ff89 	bl	80033a4 <can_ids_filter_configure>
    uart_printf("CAN initialization is ok ,baud_baudrate in %d kbps:\r\n", 500);
 8003492:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003496:	483b      	ldr	r0, [pc, #236]	@ (8003584 <main+0x17c>)
 8003498:	f001 fb4a 	bl	8004b30 <uart_printf>
    uart_printf("=========================================================\r\n");
 800349c:	4833      	ldr	r0, [pc, #204]	@ (800356c <main+0x164>)
 800349e:	f001 fb47 	bl	8004b30 <uart_printf>
    Init_tasks();
 80034a2:	f001 f8e3 	bl	800466c <Init_tasks>
    uart_printf("Task schedular is initialized\r\n");
 80034a6:	4838      	ldr	r0, [pc, #224]	@ (8003588 <main+0x180>)
 80034a8:	f001 fb42 	bl	8004b30 <uart_printf>
    uart_printf("=========================================================\r\n");
 80034ac:	482f      	ldr	r0, [pc, #188]	@ (800356c <main+0x164>)
 80034ae:	f001 fb3f 	bl	8004b30 <uart_printf>
    Blower_Relay_Pins_Init();
 80034b2:	f7fd fdbd 	bl	8001030 <Blower_Relay_Pins_Init>
    uart_printf("Blower pins are initialized PIN12=%d PIN13=%d PIN14=%d\r\n",(GPIOB->IDR>>12&1),(GPIOB->IDR>>13&1),(GPIOB->IDR>>14&1));
 80034b6:	4b35      	ldr	r3, [pc, #212]	@ (800358c <main+0x184>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	0b1b      	lsrs	r3, r3, #12
 80034bc:	f003 0101 	and.w	r1, r3, #1
 80034c0:	4b32      	ldr	r3, [pc, #200]	@ (800358c <main+0x184>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	0b5b      	lsrs	r3, r3, #13
 80034c6:	f003 0201 	and.w	r2, r3, #1
 80034ca:	4b30      	ldr	r3, [pc, #192]	@ (800358c <main+0x184>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	0b9b      	lsrs	r3, r3, #14
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	482e      	ldr	r0, [pc, #184]	@ (8003590 <main+0x188>)
 80034d6:	f001 fb2b 	bl	8004b30 <uart_printf>
    uart_printf("=========================================================\r\n");
 80034da:	4824      	ldr	r0, [pc, #144]	@ (800356c <main+0x164>)
 80034dc:	f001 fb28 	bl	8004b30 <uart_printf>
    Condensor_Relay_Pins_Init();
 80034e0:	f7ff fdd2 	bl	8003088 <Condensor_Relay_Pins_Init>
    uart_printf("Condensor pins are initialized PIN15=%d \r\n",(GPIOB->IDR>>15&1));
 80034e4:	4b29      	ldr	r3, [pc, #164]	@ (800358c <main+0x184>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	0bdb      	lsrs	r3, r3, #15
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	4619      	mov	r1, r3
 80034f0:	4828      	ldr	r0, [pc, #160]	@ (8003594 <main+0x18c>)
 80034f2:	f001 fb1d 	bl	8004b30 <uart_printf>
    uart_printf("=========================================================\r\n");
 80034f6:	481d      	ldr	r0, [pc, #116]	@ (800356c <main+0x164>)
 80034f8:	f001 fb1a 	bl	8004b30 <uart_printf>
    Motor_control_pins_init();
 80034fc:	f7ff fa06 	bl	800290c <Motor_control_pins_init>
    uart_printf("Motor_control pins are initialized PIN0=%d PIN1=%d  PIN3=%d PIN5=%d\r\n",(GPIOB->IDR>>0&1),(GPIOB->IDR>>1&1),(GPIOB->IDR>>3&1),(GPIOB->IDR>>5&1));
 8003500:	4b22      	ldr	r3, [pc, #136]	@ (800358c <main+0x184>)
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 0101 	and.w	r1, r3, #1
 8003508:	4b20      	ldr	r3, [pc, #128]	@ (800358c <main+0x184>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	085b      	lsrs	r3, r3, #1
 800350e:	f003 0201 	and.w	r2, r3, #1
 8003512:	4b1e      	ldr	r3, [pc, #120]	@ (800358c <main+0x184>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	08db      	lsrs	r3, r3, #3
 8003518:	f003 0001 	and.w	r0, r3, #1
 800351c:	4b1b      	ldr	r3, [pc, #108]	@ (800358c <main+0x184>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	4603      	mov	r3, r0
 800352a:	481b      	ldr	r0, [pc, #108]	@ (8003598 <main+0x190>)
 800352c:	f001 fb00 	bl	8004b30 <uart_printf>
    uart_printf("=========================================================\r\n");
 8003530:	480e      	ldr	r0, [pc, #56]	@ (800356c <main+0x164>)
 8003532:	f001 fafd 	bl	8004b30 <uart_printf>
    Switch_Pins_int();
 8003536:	f7fd fda1 	bl	800107c <Switch_Pins_int>
//    MX_I2C1_Init();
//    Register_task(50,Drive_mode_state); //dial
    Register_task(50,process_switch_status);
 800353a:	4918      	ldr	r1, [pc, #96]	@ (800359c <main+0x194>)
 800353c:	2032      	movs	r0, #50	@ 0x32
 800353e:	f001 f8cb 	bl	80046d8 <Register_task>
    Register_task(100,Request_Msgs_to_BMS);
 8003542:	4917      	ldr	r1, [pc, #92]	@ (80035a0 <main+0x198>)
 8003544:	2064      	movs	r0, #100	@ 0x64
 8003546:	f001 f8c7 	bl	80046d8 <Register_task>
    Register_task(0,process_can_messages);
 800354a:	4916      	ldr	r1, [pc, #88]	@ (80035a4 <main+0x19c>)
 800354c:	2000      	movs	r0, #0
 800354e:	f001 f8c3 	bl	80046d8 <Register_task>
    Register_task(100,print_mcu_data);
 8003552:	4915      	ldr	r1, [pc, #84]	@ (80035a8 <main+0x1a0>)
 8003554:	2064      	movs	r0, #100	@ 0x64
 8003556:	f001 f8bf 	bl	80046d8 <Register_task>
    Register_task(50,print_bms_data);
 800355a:	4914      	ldr	r1, [pc, #80]	@ (80035ac <main+0x1a4>)
 800355c:	2032      	movs	r0, #50	@ 0x32
 800355e:	f001 f8bb 	bl	80046d8 <Register_task>
//    DWT_Init();
    while(1){
    Run_all_tasks();
 8003562:	f001 f907 	bl	8004774 <Run_all_tasks>
 8003566:	e7fc      	b.n	8003562 <main+0x15a>
 8003568:	08009fdc 	.word	0x08009fdc
 800356c:	0800a014 	.word	0x0800a014
 8003570:	0800a050 	.word	0x0800a050
 8003574:	0800a088 	.word	0x0800a088
 8003578:	0007a120 	.word	0x0007a120
 800357c:	0800a0b4 	.word	0x0800a0b4
 8003580:	0800a0d4 	.word	0x0800a0d4
 8003584:	0800a110 	.word	0x0800a110
 8003588:	0800a148 	.word	0x0800a148
 800358c:	40010c00 	.word	0x40010c00
 8003590:	0800a168 	.word	0x0800a168
 8003594:	0800a1a4 	.word	0x0800a1a4
 8003598:	0800a1d0 	.word	0x0800a1d0
 800359c:	08003645 	.word	0x08003645
 80035a0:	08003709 	.word	0x08003709
 80035a4:	080035bd 	.word	0x080035bd
 80035a8:	08003761 	.word	0x08003761
 80035ac:	08003b69 	.word	0x08003b69

080035b0 <Error_Handler>:
    }
}


void Error_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <process_can_messages>:
	    }
		}
	}
}
void process_can_messages(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
   can_frame_t rx_frame;
   if(CAN_MessagePending(0)){
 80035c2:	2000      	movs	r0, #0
 80035c4:	f7ff fcb2 	bl	8002f2c <CAN_MessagePending>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d012      	beq.n	80035f4 <process_can_messages+0x38>
	   mcu_timer = 0;
 80035ce:	4b19      	ldr	r3, [pc, #100]	@ (8003634 <process_can_messages+0x78>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
       mcu_connected = 1;
 80035d4:	4b18      	ldr	r3, [pc, #96]	@ (8003638 <process_can_messages+0x7c>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]
	   can_rx(&rx_frame,0);
 80035da:	463b      	mov	r3, r7
 80035dc:	2100      	movs	r1, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff fcc0 	bl	8002f64 <can_rx>
	   send_id_data_only_over_uart(&rx_frame);
 80035e4:	463b      	mov	r3, r7
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 fa5e 	bl	8004aa8 <send_id_data_only_over_uart>
//	    {
//	        bms_timer = 0;
//	        bms_connected = 1;
//	    }
//	   Process_Jbd_Bms_Messages(&rx_frame);
	   matel_mcu_process_can_frame(&rx_frame);
 80035ec:	463b      	mov	r3, r7
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe fca0 	bl	8001f34 <matel_mcu_process_can_frame>
   }
   if(CAN_MessagePending(1)){
 80035f4:	2001      	movs	r0, #1
 80035f6:	f7ff fc99 	bl	8002f2c <CAN_MessagePending>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d012      	beq.n	8003626 <process_can_messages+0x6a>
	   bms_timer = 0;
 8003600:	4b0e      	ldr	r3, [pc, #56]	@ (800363c <process_can_messages+0x80>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
       bms_connected = 1;
 8003606:	4b0e      	ldr	r3, [pc, #56]	@ (8003640 <process_can_messages+0x84>)
 8003608:	2201      	movs	r2, #1
 800360a:	601a      	str	r2, [r3, #0]
	   can_rx(&rx_frame,1);
 800360c:	463b      	mov	r3, r7
 800360e:	2101      	movs	r1, #1
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fca7 	bl	8002f64 <can_rx>
	   send_id_data_only_over_uart(&rx_frame);
 8003616:	463b      	mov	r3, r7
 8003618:	4618      	mov	r0, r3
 800361a:	f001 fa45 	bl	8004aa8 <send_id_data_only_over_uart>
//	    )
//	    {
//	        bms_timer = 0;
//	        bms_connected = 1;
//	    }
	   Process_Jbd_Bms_Messages(&rx_frame);
 800361e:	463b      	mov	r3, r7
 8003620:	4618      	mov	r0, r3
 8003622:	f7fd fe3f 	bl	80012a4 <Process_Jbd_Bms_Messages>
//	   matel_mcu_process_can_frame(&rx_frame);
   }
   check_can_bus();
 8003626:	f7ff fb7b 	bl	8002d20 <check_can_bus>
}
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	2000059c 	.word	0x2000059c
 8003638:	20000594 	.word	0x20000594
 800363c:	200005a0 	.word	0x200005a0
 8003640:	20000598 	.word	0x20000598

08003644 <process_switch_status>:
void process_switch_status(){
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
		cur_state=Switch_update();
 800364a:	f7fd fd83 	bl	8001154 <Switch_update>
 800364e:	4603      	mov	r3, r0
 8003650:	461a      	mov	r2, r3
 8003652:	4b27      	ldr	r3, [pc, #156]	@ (80036f0 <process_switch_status+0xac>)
 8003654:	701a      	strb	r2, [r3, #0]
		if(cur_state!=last_state){
 8003656:	4b26      	ldr	r3, [pc, #152]	@ (80036f0 <process_switch_status+0xac>)
 8003658:	781a      	ldrb	r2, [r3, #0]
 800365a:	4b26      	ldr	r3, [pc, #152]	@ (80036f4 <process_switch_status+0xb0>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d029      	beq.n	80036b6 <process_switch_status+0x72>
			last_state=cur_state;
 8003662:	4b23      	ldr	r3, [pc, #140]	@ (80036f0 <process_switch_status+0xac>)
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	4b23      	ldr	r3, [pc, #140]	@ (80036f4 <process_switch_status+0xb0>)
 8003668:	701a      	strb	r2, [r3, #0]
			GPIOB->ODR |= ((1<<PB0_REVERSE) | (1<<PB1_NEUTRAL) | (1<<PB3_DRIVE));
 800366a:	4b23      	ldr	r3, [pc, #140]	@ (80036f8 <process_switch_status+0xb4>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	4a22      	ldr	r2, [pc, #136]	@ (80036f8 <process_switch_status+0xb4>)
 8003670:	f043 030b 	orr.w	r3, r3, #11
 8003674:	60d3      	str	r3, [r2, #12]
			switch (cur_state) {
 8003676:	4b1e      	ldr	r3, [pc, #120]	@ (80036f0 <process_switch_status+0xac>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b02      	cmp	r3, #2
 800367c:	d006      	beq.n	800368c <process_switch_status+0x48>
 800367e:	2b02      	cmp	r3, #2
 8003680:	dc19      	bgt.n	80036b6 <process_switch_status+0x72>
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <process_switch_status+0x56>
 8003686:	2b01      	cmp	r3, #1
 8003688:	d00e      	beq.n	80036a8 <process_switch_status+0x64>
 800368a:	e014      	b.n	80036b6 <process_switch_status+0x72>
				case 2: GPIOB->ODR &=~ (1<<PB0_REVERSE); break;
 800368c:	4b1a      	ldr	r3, [pc, #104]	@ (80036f8 <process_switch_status+0xb4>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4a19      	ldr	r2, [pc, #100]	@ (80036f8 <process_switch_status+0xb4>)
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	60d3      	str	r3, [r2, #12]
 8003698:	e00d      	b.n	80036b6 <process_switch_status+0x72>
				case 0: GPIOB->ODR &=~ (1<<PB1_NEUTRAL); break;
 800369a:	4b17      	ldr	r3, [pc, #92]	@ (80036f8 <process_switch_status+0xb4>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	4a16      	ldr	r2, [pc, #88]	@ (80036f8 <process_switch_status+0xb4>)
 80036a0:	f023 0302 	bic.w	r3, r3, #2
 80036a4:	60d3      	str	r3, [r2, #12]
 80036a6:	e006      	b.n	80036b6 <process_switch_status+0x72>
				case 1: GPIOB->ODR &=~ (1<<PB3_DRIVE);   break;
 80036a8:	4b13      	ldr	r3, [pc, #76]	@ (80036f8 <process_switch_status+0xb4>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a12      	ldr	r2, [pc, #72]	@ (80036f8 <process_switch_status+0xb4>)
 80036ae:	f023 0308 	bic.w	r3, r3, #8
 80036b2:	60d3      	str	r3, [r2, #12]
 80036b4:	bf00      	nop
			}
		}
		can_frame_t rx_frame;
		rx_frame.id=0x123;
 80036b6:	f240 1323 	movw	r3, #291	@ 0x123
 80036ba:	603b      	str	r3, [r7, #0]
		rx_frame.dlc=8;
 80036bc:	2308      	movs	r3, #8
 80036be:	71bb      	strb	r3, [r7, #6]
		rx_frame.data[0]=cur_state;
 80036c0:	4b0b      	ldr	r3, [pc, #44]	@ (80036f0 <process_switch_status+0xac>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	71fb      	strb	r3, [r7, #7]
		rx_frame.data[1]=bus_ok;
 80036c6:	4b0d      	ldr	r3, [pc, #52]	@ (80036fc <process_switch_status+0xb8>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	723b      	strb	r3, [r7, #8]
		rx_frame.data[2]=mcu_connected;
 80036ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003700 <process_switch_status+0xbc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	727b      	strb	r3, [r7, #9]
		rx_frame.data[3]=bms_connected;
 80036d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <process_switch_status+0xc0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	72bb      	strb	r3, [r7, #10]
		send_id_data_only_over_uart(&rx_frame);
 80036de:	463b      	mov	r3, r7
 80036e0:	4618      	mov	r0, r3
 80036e2:	f001 f9e1 	bl	8004aa8 <send_id_data_only_over_uart>
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	2000058d 	.word	0x2000058d
 80036f4:	2000058c 	.word	0x2000058c
 80036f8:	40010c00 	.word	0x40010c00
 80036fc:	20000004 	.word	0x20000004
 8003700:	20000594 	.word	0x20000594
 8003704:	20000598 	.word	0x20000598

08003708 <Request_Msgs_to_BMS>:
void Request_Msgs_to_BMS(){
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
	   can_frame_t rx_frame;
	   static uint8_t i=0;
	   rx_frame.id=id[i];
 800370e:	4b11      	ldr	r3, [pc, #68]	@ (8003754 <Request_Msgs_to_BMS+0x4c>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	461a      	mov	r2, r3
 8003714:	4b10      	ldr	r3, [pc, #64]	@ (8003758 <Request_Msgs_to_BMS+0x50>)
 8003716:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800371a:	603b      	str	r3, [r7, #0]
	   rx_frame.ide=0;
 800371c:	2300      	movs	r3, #0
 800371e:	713b      	strb	r3, [r7, #4]
	   rx_frame.dlc=8;
 8003720:	2308      	movs	r3, #8
 8003722:	71bb      	strb	r3, [r7, #6]
	   send_can_remote_frame(rx_frame);
 8003724:	463b      	mov	r3, r7
 8003726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003728:	f7ff fb64 	bl	8002df4 <send_can_remote_frame>
	   i++;
 800372c:	4b09      	ldr	r3, [pc, #36]	@ (8003754 <Request_Msgs_to_BMS+0x4c>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	3301      	adds	r3, #1
 8003732:	b2da      	uxtb	r2, r3
 8003734:	4b07      	ldr	r3, [pc, #28]	@ (8003754 <Request_Msgs_to_BMS+0x4c>)
 8003736:	701a      	strb	r2, [r3, #0]
	   if(i>=id_size){
 8003738:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <Request_Msgs_to_BMS+0x4c>)
 800373a:	781a      	ldrb	r2, [r3, #0]
 800373c:	4b07      	ldr	r3, [pc, #28]	@ (800375c <Request_Msgs_to_BMS+0x54>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d302      	bcc.n	800374a <Request_Msgs_to_BMS+0x42>
		   i=0;
 8003744:	4b03      	ldr	r3, [pc, #12]	@ (8003754 <Request_Msgs_to_BMS+0x4c>)
 8003746:	2200      	movs	r2, #0
 8003748:	701a      	strb	r2, [r3, #0]
	   }
}
 800374a:	bf00      	nop
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	2000058e 	.word	0x2000058e
 8003758:	20000008 	.word	0x20000008
 800375c:	20000022 	.word	0x20000022

08003760 <print_mcu_data>:
void print_mcu_data(){
 8003760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003764:	b0a5      	sub	sp, #148	@ 0x94
 8003766:	af14      	add	r7, sp, #80	@ 0x50
	if(msg.MCU_POWER_One.rx_or_not){
 8003768:	4bb2      	ldr	r3, [pc, #712]	@ (8003a34 <print_mcu_data+0x2d4>)
 800376a:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d027      	beq.n	80037c8 <print_mcu_data+0x68>
		uart_printf(
 8003778:	4bae      	ldr	r3, [pc, #696]	@ (8003a34 <print_mcu_data+0x2d4>)
 800377a:	e9d3 8974 	ldrd	r8, r9, [r3, #464]	@ 0x1d0
 800377e:	4bad      	ldr	r3, [pc, #692]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003780:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	@ 0x1d8
 8003784:	49ab      	ldr	r1, [pc, #684]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003786:	e9d1 0178 	ldrd	r0, r1, [r1, #480]	@ 0x1e0
		    "MCU_POWER_One: Sig0=%.2f Sig1=%.2f Sig2=%.2f Sig3=%llu Sig4=%.2f\n\r",
			msg.MCU_POWER_One.power_sig0,
		    msg.MCU_POWER_One.power_sig1,
		    msg.MCU_POWER_One.power_sig2,
		    (unsigned long long)msg.MCU_POWER_One.power_sig3,
 800378a:	4caa      	ldr	r4, [pc, #680]	@ (8003a34 <print_mcu_data+0x2d4>)
 800378c:	f8d4 41e8 	ldr.w	r4, [r4, #488]	@ 0x1e8
		uart_printf(
 8003790:	17e5      	asrs	r5, r4, #31
 8003792:	46a2      	mov	sl, r4
 8003794:	46ab      	mov	fp, r5
 8003796:	4ca7      	ldr	r4, [pc, #668]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003798:	f504 75f8 	add.w	r5, r4, #496	@ 0x1f0
 800379c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80037a0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80037a4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80037a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037ac:	e9cd 2300 	strd	r2, r3, [sp]
 80037b0:	4642      	mov	r2, r8
 80037b2:	464b      	mov	r3, r9
 80037b4:	48a0      	ldr	r0, [pc, #640]	@ (8003a38 <print_mcu_data+0x2d8>)
 80037b6:	f001 f9bb 	bl	8004b30 <uart_printf>
		    msg.MCU_POWER_One.power_sig4
		);
		msg.MCU_POWER_One.rx_or_not=0;
 80037ba:	4a9e      	ldr	r2, [pc, #632]	@ (8003a34 <print_mcu_data+0x2d4>)
 80037bc:	f892 31f8 	ldrb.w	r3, [r2, #504]	@ 0x1f8
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	f882 31f8 	strb.w	r3, [r2, #504]	@ 0x1f8
	}
	if(msg.MCU_FAULT_One.rx_or_not){
 80037c8:	4b9a      	ldr	r3, [pc, #616]	@ (8003a34 <print_mcu_data+0x2d4>)
 80037ca:	f893 31c8 	ldrb.w	r3, [r3, #456]	@ 0x1c8
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d06a      	beq.n	80038ae <print_mcu_data+0x14e>
		uart_printf(
 80037d8:	4b96      	ldr	r3, [pc, #600]	@ (8003a34 <print_mcu_data+0x2d4>)
 80037da:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 80037de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80037e0:	4b94      	ldr	r3, [pc, #592]	@ (8003a34 <print_mcu_data+0x2d4>)
 80037e2:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 80037e6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80037e8:	4b92      	ldr	r3, [pc, #584]	@ (8003a34 <print_mcu_data+0x2d4>)
 80037ea:	f8d3 0190 	ldr.w	r0, [r3, #400]	@ 0x190
 80037ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80037f0:	4b90      	ldr	r3, [pc, #576]	@ (8003a34 <print_mcu_data+0x2d4>)
 80037f2:	f8d3 0194 	ldr.w	r0, [r3, #404]	@ 0x194
 80037f6:	4b8f      	ldr	r3, [pc, #572]	@ (8003a34 <print_mcu_data+0x2d4>)
 80037f8:	f8d3 4198 	ldr.w	r4, [r3, #408]	@ 0x198
 80037fc:	4b8d      	ldr	r3, [pc, #564]	@ (8003a34 <print_mcu_data+0x2d4>)
 80037fe:	f8d3 519c 	ldr.w	r5, [r3, #412]	@ 0x19c
 8003802:	4b8c      	ldr	r3, [pc, #560]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003804:	f8d3 61a0 	ldr.w	r6, [r3, #416]	@ 0x1a0
 8003808:	4b8a      	ldr	r3, [pc, #552]	@ (8003a34 <print_mcu_data+0x2d4>)
 800380a:	f8d3 c1a4 	ldr.w	ip, [r3, #420]	@ 0x1a4
 800380e:	f8c7 c030 	str.w	ip, [r7, #48]	@ 0x30
 8003812:	4b88      	ldr	r3, [pc, #544]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003814:	f8d3 e1a8 	ldr.w	lr, [r3, #424]	@ 0x1a8
 8003818:	f8c7 e02c 	str.w	lr, [r7, #44]	@ 0x2c
 800381c:	4b85      	ldr	r3, [pc, #532]	@ (8003a34 <print_mcu_data+0x2d4>)
 800381e:	f8d3 81ac 	ldr.w	r8, [r3, #428]	@ 0x1ac
 8003822:	f8c7 8028 	str.w	r8, [r7, #40]	@ 0x28
 8003826:	4b83      	ldr	r3, [pc, #524]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003828:	f8d3 91b0 	ldr.w	r9, [r3, #432]	@ 0x1b0
 800382c:	f8c7 9024 	str.w	r9, [r7, #36]	@ 0x24
 8003830:	4b80      	ldr	r3, [pc, #512]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003832:	f8d3 a1b4 	ldr.w	sl, [r3, #436]	@ 0x1b4
 8003836:	f8c7 a020 	str.w	sl, [r7, #32]
 800383a:	4b7e      	ldr	r3, [pc, #504]	@ (8003a34 <print_mcu_data+0x2d4>)
 800383c:	f8d3 b1b8 	ldr.w	fp, [r3, #440]	@ 0x1b8
 8003840:	f8c7 b01c 	str.w	fp, [r7, #28]
 8003844:	4b7b      	ldr	r3, [pc, #492]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003846:	f8d3 11bc 	ldr.w	r1, [r3, #444]	@ 0x1bc
 800384a:	4b7a      	ldr	r3, [pc, #488]	@ (8003a34 <print_mcu_data+0x2d4>)
 800384c:	f8d3 21c0 	ldr.w	r2, [r3, #448]	@ 0x1c0
 8003850:	4b78      	ldr	r3, [pc, #480]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003852:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8003856:	930c      	str	r3, [sp, #48]	@ 0x30
 8003858:	920b      	str	r2, [sp, #44]	@ 0x2c
 800385a:	910a      	str	r1, [sp, #40]	@ 0x28
 800385c:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8003860:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8003864:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8003868:	f8cd a020 	str.w	sl, [sp, #32]
 800386c:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 8003870:	f8cd 901c 	str.w	r9, [sp, #28]
 8003874:	f8d7 8028 	ldr.w	r8, [r7, #40]	@ 0x28
 8003878:	f8cd 8018 	str.w	r8, [sp, #24]
 800387c:	f8d7 e02c 	ldr.w	lr, [r7, #44]	@ 0x2c
 8003880:	f8cd e014 	str.w	lr, [sp, #20]
 8003884:	f8d7 c030 	ldr.w	ip, [r7, #48]	@ 0x30
 8003888:	f8cd c010 	str.w	ip, [sp, #16]
 800388c:	9603      	str	r6, [sp, #12]
 800388e:	9502      	str	r5, [sp, #8]
 8003890:	9401      	str	r4, [sp, #4]
 8003892:	9000      	str	r0, [sp, #0]
 8003894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003896:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003898:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800389a:	4868      	ldr	r0, [pc, #416]	@ (8003a3c <print_mcu_data+0x2dc>)
 800389c:	f001 f948 	bl	8004b30 <uart_printf>
		    msg.MCU_FAULT_One.MCU_FAULT_One_sig12,
		    msg.MCU_FAULT_One.MCU_FAULT_One_sig13,
		    msg.MCU_FAULT_One.MCU_FAULT_One_sig14,
		    msg.MCU_FAULT_One.MCU_FAULT_One_sig15
		);
		msg.MCU_FAULT_One.rx_or_not=0;
 80038a0:	4a64      	ldr	r2, [pc, #400]	@ (8003a34 <print_mcu_data+0x2d4>)
 80038a2:	f892 31c8 	ldrb.w	r3, [r2, #456]	@ 0x1c8
 80038a6:	f023 0301 	bic.w	r3, r3, #1
 80038aa:	f882 31c8 	strb.w	r3, [r2, #456]	@ 0x1c8
	}
	if(msg.MCU_FAULT_two.rx_or_not){
 80038ae:	4b61      	ldr	r3, [pc, #388]	@ (8003a34 <print_mcu_data+0x2d4>)
 80038b0:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d061      	beq.n	8003982 <print_mcu_data+0x222>
		uart_printf(
 80038be:	4b5d      	ldr	r3, [pc, #372]	@ (8003a34 <print_mcu_data+0x2d4>)
 80038c0:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80038c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003a34 <print_mcu_data+0x2d4>)
 80038c8:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80038cc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80038ce:	4b59      	ldr	r3, [pc, #356]	@ (8003a34 <print_mcu_data+0x2d4>)
 80038d0:	f8d3 0150 	ldr.w	r0, [r3, #336]	@ 0x150
 80038d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80038d6:	4b57      	ldr	r3, [pc, #348]	@ (8003a34 <print_mcu_data+0x2d4>)
 80038d8:	f8d3 1154 	ldr.w	r1, [r3, #340]	@ 0x154
 80038dc:	4b55      	ldr	r3, [pc, #340]	@ (8003a34 <print_mcu_data+0x2d4>)
 80038de:	f8d3 0158 	ldr.w	r0, [r3, #344]	@ 0x158
 80038e2:	4b54      	ldr	r3, [pc, #336]	@ (8003a34 <print_mcu_data+0x2d4>)
 80038e4:	f8d3 415c 	ldr.w	r4, [r3, #348]	@ 0x15c
 80038e8:	4b52      	ldr	r3, [pc, #328]	@ (8003a34 <print_mcu_data+0x2d4>)
 80038ea:	f8d3 5160 	ldr.w	r5, [r3, #352]	@ 0x160
 80038ee:	4b51      	ldr	r3, [pc, #324]	@ (8003a34 <print_mcu_data+0x2d4>)
 80038f0:	f8d3 6164 	ldr.w	r6, [r3, #356]	@ 0x164
 80038f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003a34 <print_mcu_data+0x2d4>)
 80038f6:	f8d3 c168 	ldr.w	ip, [r3, #360]	@ 0x168
 80038fa:	f8c7 c030 	str.w	ip, [r7, #48]	@ 0x30
 80038fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003900:	f8d3 e16c 	ldr.w	lr, [r3, #364]	@ 0x16c
 8003904:	f8c7 e02c 	str.w	lr, [r7, #44]	@ 0x2c
 8003908:	4b4a      	ldr	r3, [pc, #296]	@ (8003a34 <print_mcu_data+0x2d4>)
 800390a:	f8d3 8170 	ldr.w	r8, [r3, #368]	@ 0x170
 800390e:	f8c7 8028 	str.w	r8, [r7, #40]	@ 0x28
 8003912:	4b48      	ldr	r3, [pc, #288]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003914:	f8d3 9174 	ldr.w	r9, [r3, #372]	@ 0x174
 8003918:	f8c7 9024 	str.w	r9, [r7, #36]	@ 0x24
 800391c:	4b45      	ldr	r3, [pc, #276]	@ (8003a34 <print_mcu_data+0x2d4>)
 800391e:	f8d3 a178 	ldr.w	sl, [r3, #376]	@ 0x178
 8003922:	f8c7 a020 	str.w	sl, [r7, #32]
 8003926:	4b43      	ldr	r3, [pc, #268]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003928:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 800392c:	4b41      	ldr	r3, [pc, #260]	@ (8003a34 <print_mcu_data+0x2d4>)
 800392e:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8003932:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003934:	920a      	str	r2, [sp, #40]	@ 0x28
 8003936:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800393a:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800393e:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 8003942:	f8cd 9020 	str.w	r9, [sp, #32]
 8003946:	f8d7 8028 	ldr.w	r8, [r7, #40]	@ 0x28
 800394a:	f8cd 801c 	str.w	r8, [sp, #28]
 800394e:	f8d7 e02c 	ldr.w	lr, [r7, #44]	@ 0x2c
 8003952:	f8cd e018 	str.w	lr, [sp, #24]
 8003956:	f8d7 c030 	ldr.w	ip, [r7, #48]	@ 0x30
 800395a:	f8cd c014 	str.w	ip, [sp, #20]
 800395e:	9604      	str	r6, [sp, #16]
 8003960:	9503      	str	r5, [sp, #12]
 8003962:	9402      	str	r4, [sp, #8]
 8003964:	9001      	str	r0, [sp, #4]
 8003966:	9100      	str	r1, [sp, #0]
 8003968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800396a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800396c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800396e:	4834      	ldr	r0, [pc, #208]	@ (8003a40 <print_mcu_data+0x2e0>)
 8003970:	f001 f8de 	bl	8004b30 <uart_printf>
		    msg.MCU_FAULT_two.MCU_FAULT_two_sig12,
		    msg.MCU_FAULT_two.MCU_FAULT_two_sig13,
		    msg.MCU_FAULT_two.MCU_FAULT_two_sig14
		);

		msg.MCU_FAULT_two.rx_or_not=0;
 8003974:	4a2f      	ldr	r2, [pc, #188]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003976:	f892 3184 	ldrb.w	r3, [r2, #388]	@ 0x184
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	f882 3184 	strb.w	r3, [r2, #388]	@ 0x184
	}
	if(msg.MCU_Fault_Code.rx_or_not){
 8003982:	4b2c      	ldr	r3, [pc, #176]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003984:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 808e 	beq.w	8003ab0 <print_mcu_data+0x350>
		uart_printf(
 8003994:	4b27      	ldr	r3, [pc, #156]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003996:	6a1b      	ldr	r3, [r3, #32]
 8003998:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800399a:	4b26      	ldr	r3, [pc, #152]	@ (8003a34 <print_mcu_data+0x2d4>)
 800399c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800399e:	63ba      	str	r2, [r7, #56]	@ 0x38
 80039a0:	4b24      	ldr	r3, [pc, #144]	@ (8003a34 <print_mcu_data+0x2d4>)
 80039a2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80039a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80039a6:	4b23      	ldr	r3, [pc, #140]	@ (8003a34 <print_mcu_data+0x2d4>)
 80039a8:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 80039aa:	633c      	str	r4, [r7, #48]	@ 0x30
 80039ac:	4b21      	ldr	r3, [pc, #132]	@ (8003a34 <print_mcu_data+0x2d4>)
 80039ae:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
 80039b0:	62fd      	str	r5, [r7, #44]	@ 0x2c
 80039b2:	4b20      	ldr	r3, [pc, #128]	@ (8003a34 <print_mcu_data+0x2d4>)
 80039b4:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 80039b6:	62be      	str	r6, [r7, #40]	@ 0x28
 80039b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003a34 <print_mcu_data+0x2d4>)
 80039ba:	f8d3 c038 	ldr.w	ip, [r3, #56]	@ 0x38
 80039be:	f8c7 c024 	str.w	ip, [r7, #36]	@ 0x24
 80039c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a34 <print_mcu_data+0x2d4>)
 80039c4:	f8d3 e03c 	ldr.w	lr, [r3, #60]	@ 0x3c
 80039c8:	f8c7 e020 	str.w	lr, [r7, #32]
 80039cc:	4b19      	ldr	r3, [pc, #100]	@ (8003a34 <print_mcu_data+0x2d4>)
 80039ce:	f8d3 8040 	ldr.w	r8, [r3, #64]	@ 0x40
 80039d2:	f8c7 801c 	str.w	r8, [r7, #28]
 80039d6:	4b17      	ldr	r3, [pc, #92]	@ (8003a34 <print_mcu_data+0x2d4>)
 80039d8:	f8d3 9044 	ldr.w	r9, [r3, #68]	@ 0x44
 80039dc:	f8c7 9018 	str.w	r9, [r7, #24]
 80039e0:	4b14      	ldr	r3, [pc, #80]	@ (8003a34 <print_mcu_data+0x2d4>)
 80039e2:	f8d3 a048 	ldr.w	sl, [r3, #72]	@ 0x48
 80039e6:	f8c7 a014 	str.w	sl, [r7, #20]
 80039ea:	4b12      	ldr	r3, [pc, #72]	@ (8003a34 <print_mcu_data+0x2d4>)
 80039ec:	f8d3 b04c 	ldr.w	fp, [r3, #76]	@ 0x4c
 80039f0:	f8c7 b010 	str.w	fp, [r7, #16]
 80039f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a34 <print_mcu_data+0x2d4>)
 80039f6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80039f8:	60f9      	str	r1, [r7, #12]
 80039fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003a34 <print_mcu_data+0x2d4>)
 80039fc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80039fe:	60b8      	str	r0, [r7, #8]
 8003a00:	4b0c      	ldr	r3, [pc, #48]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003a02:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8003a04:	607c      	str	r4, [r7, #4]
 8003a06:	4b0b      	ldr	r3, [pc, #44]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003a08:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 8003a0a:	603d      	str	r5, [r7, #0]
 8003a0c:	4b09      	ldr	r3, [pc, #36]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003a0e:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 8003a10:	4b08      	ldr	r3, [pc, #32]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003a12:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003a14:	4b07      	ldr	r3, [pc, #28]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003a16:	6e9c      	ldr	r4, [r3, #104]	@ 0x68
 8003a18:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003a1a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8003a1c:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003a1e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003a20:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003a22:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8003a24:	4b03      	ldr	r3, [pc, #12]	@ (8003a34 <print_mcu_data+0x2d4>)
 8003a26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003a2a:	9212      	str	r2, [sp, #72]	@ 0x48
 8003a2c:	9111      	str	r1, [sp, #68]	@ 0x44
 8003a2e:	9010      	str	r0, [sp, #64]	@ 0x40
 8003a30:	e008      	b.n	8003a44 <print_mcu_data+0x2e4>
 8003a32:	bf00      	nop
 8003a34:	20000338 	.word	0x20000338
 8003a38:	0800a218 	.word	0x0800a218
 8003a3c:	0800a25c 	.word	0x0800a25c
 8003a40:	0800a2d4 	.word	0x0800a2d4
 8003a44:	940f      	str	r4, [sp, #60]	@ 0x3c
 8003a46:	950e      	str	r5, [sp, #56]	@ 0x38
 8003a48:	960d      	str	r6, [sp, #52]	@ 0x34
 8003a4a:	683d      	ldr	r5, [r7, #0]
 8003a4c:	950c      	str	r5, [sp, #48]	@ 0x30
 8003a4e:	687c      	ldr	r4, [r7, #4]
 8003a50:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003a52:	68b8      	ldr	r0, [r7, #8]
 8003a54:	900a      	str	r0, [sp, #40]	@ 0x28
 8003a56:	68f9      	ldr	r1, [r7, #12]
 8003a58:	9109      	str	r1, [sp, #36]	@ 0x24
 8003a5a:	f8d7 b010 	ldr.w	fp, [r7, #16]
 8003a5e:	f8cd b020 	str.w	fp, [sp, #32]
 8003a62:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8003a66:	f8cd a01c 	str.w	sl, [sp, #28]
 8003a6a:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8003a6e:	f8cd 9018 	str.w	r9, [sp, #24]
 8003a72:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003a76:	f8cd 8014 	str.w	r8, [sp, #20]
 8003a7a:	f8d7 e020 	ldr.w	lr, [r7, #32]
 8003a7e:	f8cd e010 	str.w	lr, [sp, #16]
 8003a82:	f8d7 c024 	ldr.w	ip, [r7, #36]	@ 0x24
 8003a86:	f8cd c00c 	str.w	ip, [sp, #12]
 8003a8a:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8003a8c:	9602      	str	r6, [sp, #8]
 8003a8e:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8003a90:	9501      	str	r5, [sp, #4]
 8003a92:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8003a94:	9400      	str	r4, [sp, #0]
 8003a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a9c:	482e      	ldr	r0, [pc, #184]	@ (8003b58 <print_mcu_data+0x3f8>)
 8003a9e:	f001 f847 	bl	8004b30 <uart_printf>
		    msg.MCU_Fault_Code.MCU_Fault_Code_19,
		    msg.MCU_Fault_Code.MCU_Fault_Code_20,
		    msg.MCU_Fault_Code.MCU_Fault_Code_21,
		    msg.MCU_Fault_Code.MCU_Fault_Code_22
		);
		msg.MCU_Fault_Code.rx_or_not=0;
 8003aa2:	4a2e      	ldr	r2, [pc, #184]	@ (8003b5c <print_mcu_data+0x3fc>)
 8003aa4:	f892 3080 	ldrb.w	r3, [r2, #128]	@ 0x80
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
	}
	if(msg.MCU_Stat_One.rx_or_not){
 8003ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8003b5c <print_mcu_data+0x3fc>)
 8003ab2:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d027      	beq.n	8003b10 <print_mcu_data+0x3b0>
		msg.MCU_Stat_One.rx_or_not=0;
 8003ac0:	4a26      	ldr	r2, [pc, #152]	@ (8003b5c <print_mcu_data+0x3fc>)
 8003ac2:	f892 3140 	ldrb.w	r3, [r2, #320]	@ 0x140
 8003ac6:	f023 0301 	bic.w	r3, r3, #1
 8003aca:	f882 3140 	strb.w	r3, [r2, #320]	@ 0x140
		uart_printf(
 8003ace:	4b23      	ldr	r3, [pc, #140]	@ (8003b5c <print_mcu_data+0x3fc>)
 8003ad0:	f8d3 6120 	ldr.w	r6, [r3, #288]	@ 0x120
 8003ad4:	4b21      	ldr	r3, [pc, #132]	@ (8003b5c <print_mcu_data+0x3fc>)
 8003ad6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8003ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003adc:	4b1f      	ldr	r3, [pc, #124]	@ (8003b5c <print_mcu_data+0x3fc>)
 8003ade:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	@ 0x128
 8003ae2:	491e      	ldr	r1, [pc, #120]	@ (8003b5c <print_mcu_data+0x3fc>)
 8003ae4:	f8d1 1130 	ldr.w	r1, [r1, #304]	@ 0x130
 8003ae8:	481c      	ldr	r0, [pc, #112]	@ (8003b5c <print_mcu_data+0x3fc>)
 8003aea:	f8d0 0134 	ldr.w	r0, [r0, #308]	@ 0x134
 8003aee:	4c1b      	ldr	r4, [pc, #108]	@ (8003b5c <print_mcu_data+0x3fc>)
 8003af0:	f8d4 4138 	ldr.w	r4, [r4, #312]	@ 0x138
 8003af4:	4d19      	ldr	r5, [pc, #100]	@ (8003b5c <print_mcu_data+0x3fc>)
 8003af6:	f8d5 513c 	ldr.w	r5, [r5, #316]	@ 0x13c
 8003afa:	9505      	str	r5, [sp, #20]
 8003afc:	9404      	str	r4, [sp, #16]
 8003afe:	9003      	str	r0, [sp, #12]
 8003b00:	9102      	str	r1, [sp, #8]
 8003b02:	e9cd 2300 	strd	r2, r3, [sp]
 8003b06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b08:	4631      	mov	r1, r6
 8003b0a:	4815      	ldr	r0, [pc, #84]	@ (8003b60 <print_mcu_data+0x400>)
 8003b0c:	f001 f810 	bl	8004b30 <uart_printf>
		    msg.MCU_Stat_One.MCU_Stat_One_sig5,
		    msg.MCU_Stat_One.MCU_Stat_One_sig6
		);

	}
	if(msg.MCU_Stat_Two.rx_or_not){
 8003b10:	4b12      	ldr	r3, [pc, #72]	@ (8003b5c <print_mcu_data+0x3fc>)
 8003b12:	7e1b      	ldrb	r3, [r3, #24]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d016      	beq.n	8003b4c <print_mcu_data+0x3ec>
	uart_printf("Odometer=%.1f km voltage=%.0f Motor_RPM=%.0f\n\r",msg.MCU_Stat_Two.MCU_Odometer_Val,msg.MCU_Stat_Two.MCU_VCU_State,msg.MCU_Stat_Two.MCU_Motor_RPM);
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b5c <print_mcu_data+0x3fc>)
 8003b20:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b24:	4b0d      	ldr	r3, [pc, #52]	@ (8003b5c <print_mcu_data+0x3fc>)
 8003b26:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003b2a:	490c      	ldr	r1, [pc, #48]	@ (8003b5c <print_mcu_data+0x3fc>)
 8003b2c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8003b30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b34:	e9cd 2300 	strd	r2, r3, [sp]
 8003b38:	4622      	mov	r2, r4
 8003b3a:	462b      	mov	r3, r5
 8003b3c:	4809      	ldr	r0, [pc, #36]	@ (8003b64 <print_mcu_data+0x404>)
 8003b3e:	f000 fff7 	bl	8004b30 <uart_printf>
	msg.MCU_Stat_Two.rx_or_not=0;
 8003b42:	4a06      	ldr	r2, [pc, #24]	@ (8003b5c <print_mcu_data+0x3fc>)
 8003b44:	7e13      	ldrb	r3, [r2, #24]
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	7613      	strb	r3, [r2, #24]
	}
}
 8003b4c:	bf00      	nop
 8003b4e:	3744      	adds	r7, #68	@ 0x44
 8003b50:	46bd      	mov	sp, r7
 8003b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b56:	bf00      	nop
 8003b58:	0800a344 	.word	0x0800a344
 8003b5c:	20000338 	.word	0x20000338
 8003b60:	0800a3ec 	.word	0x0800a3ec
 8003b64:	0800a438 	.word	0x0800a438

08003b68 <print_bms_data>:
void print_bms_data(){
 8003b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b6c:	b099      	sub	sp, #100	@ 0x64
 8003b6e:	af10      	add	r7, sp, #64	@ 0x40
	if(Bms_Frames.Id_0x100.rx_or_not){
 8003b70:	4bad      	ldr	r3, [pc, #692]	@ (8003e28 <print_bms_data+0x2c0>)
 8003b72:	7b9b      	ldrb	r3, [r3, #14]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d025      	beq.n	8003bca <print_bms_data+0x62>
		Bms_Frames.Id_0x100.rx_or_not=0;
 8003b7e:	4aaa      	ldr	r2, [pc, #680]	@ (8003e28 <print_bms_data+0x2c0>)
 8003b80:	7b93      	ldrb	r3, [r2, #14]
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	7393      	strb	r3, [r2, #14]
		uart_printf("0x100 -> Total_Voltage=%.2f V, Current=%.2f A, Remaining_Capacity=%.2f Ah, CRC=0x%d\n",
		Bms_Frames.Id_0x100.Total_Voltage, Bms_Frames.Id_0x100.Charge_and_Discharge_Current, Bms_Frames.Id_0x100.Remaining_Capacity, Bms_Frames.Id_0x100.CRC_Check);
 8003b88:	4ba7      	ldr	r3, [pc, #668]	@ (8003e28 <print_bms_data+0x2c0>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
		uart_printf("0x100 -> Total_Voltage=%.2f V, Current=%.2f A, Remaining_Capacity=%.2f Ah, CRC=0x%d\n",
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7fc fc4b 	bl	8000428 <__aeabi_f2d>
 8003b92:	4680      	mov	r8, r0
 8003b94:	4689      	mov	r9, r1
		Bms_Frames.Id_0x100.Total_Voltage, Bms_Frames.Id_0x100.Charge_and_Discharge_Current, Bms_Frames.Id_0x100.Remaining_Capacity, Bms_Frames.Id_0x100.CRC_Check);
 8003b96:	4ba4      	ldr	r3, [pc, #656]	@ (8003e28 <print_bms_data+0x2c0>)
 8003b98:	685b      	ldr	r3, [r3, #4]
		uart_printf("0x100 -> Total_Voltage=%.2f V, Current=%.2f A, Remaining_Capacity=%.2f Ah, CRC=0x%d\n",
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fc fc44 	bl	8000428 <__aeabi_f2d>
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	460d      	mov	r5, r1
		Bms_Frames.Id_0x100.Total_Voltage, Bms_Frames.Id_0x100.Charge_and_Discharge_Current, Bms_Frames.Id_0x100.Remaining_Capacity, Bms_Frames.Id_0x100.CRC_Check);
 8003ba4:	4ba0      	ldr	r3, [pc, #640]	@ (8003e28 <print_bms_data+0x2c0>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
		uart_printf("0x100 -> Total_Voltage=%.2f V, Current=%.2f A, Remaining_Capacity=%.2f Ah, CRC=0x%d\n",
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fc fc3d 	bl	8000428 <__aeabi_f2d>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
		Bms_Frames.Id_0x100.Total_Voltage, Bms_Frames.Id_0x100.Charge_and_Discharge_Current, Bms_Frames.Id_0x100.Remaining_Capacity, Bms_Frames.Id_0x100.CRC_Check);
 8003bb2:	499d      	ldr	r1, [pc, #628]	@ (8003e28 <print_bms_data+0x2c0>)
 8003bb4:	8989      	ldrh	r1, [r1, #12]
		uart_printf("0x100 -> Total_Voltage=%.2f V, Current=%.2f A, Remaining_Capacity=%.2f Ah, CRC=0x%d\n",
 8003bb6:	9104      	str	r1, [sp, #16]
 8003bb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bbc:	e9cd 4500 	strd	r4, r5, [sp]
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	4899      	ldr	r0, [pc, #612]	@ (8003e2c <print_bms_data+0x2c4>)
 8003bc6:	f000 ffb3 	bl	8004b30 <uart_printf>
	}
	if(Bms_Frames.Id_0x101.rx_or_not){
 8003bca:	4b97      	ldr	r3, [pc, #604]	@ (8003e28 <print_bms_data+0x2c0>)
 8003bcc:	7e9b      	ldrb	r3, [r3, #26]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d019      	beq.n	8003c0c <print_bms_data+0xa4>
	   Bms_Frames.Id_0x101.rx_or_not=0;
 8003bd8:	4a93      	ldr	r2, [pc, #588]	@ (8003e28 <print_bms_data+0x2c0>)
 8003bda:	7e93      	ldrb	r3, [r2, #26]
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	7693      	strb	r3, [r2, #26]
	   uart_printf("0x101 -> Full_Capacity=%.2f Ah, No_Cycles=%d, RSOC=%d%%, CRC=0x%d\n",
			   Bms_Frames.Id_0x101.Full_Capacity, Bms_Frames.Id_0x101.No_Cycles, Bms_Frames.Id_0x101.RSOC, Bms_Frames.Id_0x101.CRC_Check);
 8003be2:	4b91      	ldr	r3, [pc, #580]	@ (8003e28 <print_bms_data+0x2c0>)
 8003be4:	691b      	ldr	r3, [r3, #16]
	   uart_printf("0x101 -> Full_Capacity=%.2f Ah, No_Cycles=%d, RSOC=%d%%, CRC=0x%d\n",
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fc fc1e 	bl	8000428 <__aeabi_f2d>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
			   Bms_Frames.Id_0x101.Full_Capacity, Bms_Frames.Id_0x101.No_Cycles, Bms_Frames.Id_0x101.RSOC, Bms_Frames.Id_0x101.CRC_Check);
 8003bf0:	498d      	ldr	r1, [pc, #564]	@ (8003e28 <print_bms_data+0x2c0>)
 8003bf2:	8a89      	ldrh	r1, [r1, #20]
	   uart_printf("0x101 -> Full_Capacity=%.2f Ah, No_Cycles=%d, RSOC=%d%%, CRC=0x%d\n",
 8003bf4:	4608      	mov	r0, r1
			   Bms_Frames.Id_0x101.Full_Capacity, Bms_Frames.Id_0x101.No_Cycles, Bms_Frames.Id_0x101.RSOC, Bms_Frames.Id_0x101.CRC_Check);
 8003bf6:	498c      	ldr	r1, [pc, #560]	@ (8003e28 <print_bms_data+0x2c0>)
 8003bf8:	8ac9      	ldrh	r1, [r1, #22]
	   uart_printf("0x101 -> Full_Capacity=%.2f Ah, No_Cycles=%d, RSOC=%d%%, CRC=0x%d\n",
 8003bfa:	460c      	mov	r4, r1
			   Bms_Frames.Id_0x101.Full_Capacity, Bms_Frames.Id_0x101.No_Cycles, Bms_Frames.Id_0x101.RSOC, Bms_Frames.Id_0x101.CRC_Check);
 8003bfc:	498a      	ldr	r1, [pc, #552]	@ (8003e28 <print_bms_data+0x2c0>)
 8003bfe:	8b09      	ldrh	r1, [r1, #24]
	   uart_printf("0x101 -> Full_Capacity=%.2f Ah, No_Cycles=%d, RSOC=%d%%, CRC=0x%d\n",
 8003c00:	9102      	str	r1, [sp, #8]
 8003c02:	9401      	str	r4, [sp, #4]
 8003c04:	9000      	str	r0, [sp, #0]
 8003c06:	488a      	ldr	r0, [pc, #552]	@ (8003e30 <print_bms_data+0x2c8>)
 8003c08:	f000 ff92 	bl	8004b30 <uart_printf>
	}
	if(Bms_Frames.Id_0x102.rx_or_not){
 8003c0c:	4b86      	ldr	r3, [pc, #536]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d065      	beq.n	8003ce8 <print_bms_data+0x180>
		Bms_Frames.Id_0x102.rx_or_not=0;
 8003c1c:	4a82      	ldr	r2, [pc, #520]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c1e:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
		uart_printf(
		        "0x102 -> EQ1=%d EQ2=%d EQ3=%d EQ4=%d EQ5=%d EQ6=%d EQ7=%d EQ8=%d "
		        "EQ9=%d EQ10=%d EQ11=%d EQ12=%d EQ13=%d EQ14=%d EQ15=%d EQ16=%d | "
		        "Prot=0x%X, CRC=0x%X\n",
		        Bms_Frames.Id_0x102.Equlization_Low_byte[0], Bms_Frames.Id_0x102.Equlization_Low_byte[1],
 8003c2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c2c:	7f1b      	ldrb	r3, [r3, #28]
		uart_printf(
 8003c2e:	469c      	mov	ip, r3
		        Bms_Frames.Id_0x102.Equlization_Low_byte[0], Bms_Frames.Id_0x102.Equlization_Low_byte[1],
 8003c30:	4b7d      	ldr	r3, [pc, #500]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c32:	7f5b      	ldrb	r3, [r3, #29]
		uart_printf(
 8003c34:	469e      	mov	lr, r3
		        Bms_Frames.Id_0x102.Equlization_Low_byte[2], Bms_Frames.Id_0x102.Equlization_Low_byte[3],
 8003c36:	4b7c      	ldr	r3, [pc, #496]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c38:	7f9b      	ldrb	r3, [r3, #30]
		uart_printf(
 8003c3a:	4698      	mov	r8, r3
		        Bms_Frames.Id_0x102.Equlization_Low_byte[2], Bms_Frames.Id_0x102.Equlization_Low_byte[3],
 8003c3c:	4b7a      	ldr	r3, [pc, #488]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c3e:	7fdb      	ldrb	r3, [r3, #31]
		uart_printf(
 8003c40:	461d      	mov	r5, r3
		        Bms_Frames.Id_0x102.Equlization_Low_byte[4], Bms_Frames.Id_0x102.Equlization_Low_byte[5],
 8003c42:	4b79      	ldr	r3, [pc, #484]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c44:	f893 3020 	ldrb.w	r3, [r3, #32]
		uart_printf(
 8003c48:	461e      	mov	r6, r3
		        Bms_Frames.Id_0x102.Equlization_Low_byte[4], Bms_Frames.Id_0x102.Equlization_Low_byte[5],
 8003c4a:	4b77      	ldr	r3, [pc, #476]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c4c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
		uart_printf(
 8003c50:	61fb      	str	r3, [r7, #28]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[6], Bms_Frames.Id_0x102.Equlization_Low_byte[7],
 8003c52:	4b75      	ldr	r3, [pc, #468]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c54:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
		uart_printf(
 8003c58:	61bb      	str	r3, [r7, #24]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[6], Bms_Frames.Id_0x102.Equlization_Low_byte[7],
 8003c5a:	4b73      	ldr	r3, [pc, #460]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c5c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
		uart_printf(
 8003c60:	617b      	str	r3, [r7, #20]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[8], Bms_Frames.Id_0x102.Equlization_Low_byte[9],
 8003c62:	4b71      	ldr	r3, [pc, #452]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c64:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
		uart_printf(
 8003c68:	613b      	str	r3, [r7, #16]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[8], Bms_Frames.Id_0x102.Equlization_Low_byte[9],
 8003c6a:	4b6f      	ldr	r3, [pc, #444]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
		uart_printf(
 8003c70:	60fb      	str	r3, [r7, #12]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[10], Bms_Frames.Id_0x102.Equlization_Low_byte[11],
 8003c72:	4b6d      	ldr	r3, [pc, #436]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c74:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
		uart_printf(
 8003c78:	60bb      	str	r3, [r7, #8]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[10], Bms_Frames.Id_0x102.Equlization_Low_byte[11],
 8003c7a:	4b6b      	ldr	r3, [pc, #428]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c7c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
		uart_printf(
 8003c80:	607b      	str	r3, [r7, #4]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[12], Bms_Frames.Id_0x102.Equlization_Low_byte[13],
 8003c82:	4b69      	ldr	r3, [pc, #420]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
		uart_printf(
 8003c88:	603b      	str	r3, [r7, #0]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[12], Bms_Frames.Id_0x102.Equlization_Low_byte[13],
 8003c8a:	4b67      	ldr	r3, [pc, #412]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c8c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
		uart_printf(
 8003c90:	461c      	mov	r4, r3
		        Bms_Frames.Id_0x102.Equlization_Low_byte[14], Bms_Frames.Id_0x102.Equlization_Low_byte[15],
 8003c92:	4b65      	ldr	r3, [pc, #404]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c94:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
		uart_printf(
 8003c98:	4618      	mov	r0, r3
		        Bms_Frames.Id_0x102.Equlization_Low_byte[14], Bms_Frames.Id_0x102.Equlization_Low_byte[15],
 8003c9a:	4b63      	ldr	r3, [pc, #396]	@ (8003e28 <print_bms_data+0x2c0>)
 8003c9c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
		uart_printf(
 8003ca0:	4619      	mov	r1, r3
		        Bms_Frames.Id_0x102.Protection_Status,
 8003ca2:	4b61      	ldr	r3, [pc, #388]	@ (8003e28 <print_bms_data+0x2c0>)
 8003ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
		uart_printf(
 8003ca6:	461a      	mov	r2, r3
		        Bms_Frames.Id_0x102.CRC_Check
 8003ca8:	4b5f      	ldr	r3, [pc, #380]	@ (8003e28 <print_bms_data+0x2c0>)
 8003caa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
		uart_printf(
 8003cae:	930e      	str	r3, [sp, #56]	@ 0x38
 8003cb0:	920d      	str	r2, [sp, #52]	@ 0x34
 8003cb2:	910c      	str	r1, [sp, #48]	@ 0x30
 8003cb4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003cb6:	940a      	str	r4, [sp, #40]	@ 0x28
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	9209      	str	r2, [sp, #36]	@ 0x24
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	9208      	str	r2, [sp, #32]
 8003cc0:	68ba      	ldr	r2, [r7, #8]
 8003cc2:	9207      	str	r2, [sp, #28]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	9206      	str	r2, [sp, #24]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	9205      	str	r2, [sp, #20]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	9204      	str	r2, [sp, #16]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	9203      	str	r2, [sp, #12]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	9302      	str	r3, [sp, #8]
 8003cd8:	9601      	str	r6, [sp, #4]
 8003cda:	9500      	str	r5, [sp, #0]
 8003cdc:	4643      	mov	r3, r8
 8003cde:	4672      	mov	r2, lr
 8003ce0:	4661      	mov	r1, ip
 8003ce2:	4854      	ldr	r0, [pc, #336]	@ (8003e34 <print_bms_data+0x2cc>)
 8003ce4:	f000 ff24 	bl	8004b30 <uart_printf>
		    );
	}
	if(Bms_Frames.Id_0x103.rx_or_not){
 8003ce8:	4b4f      	ldr	r3, [pc, #316]	@ (8003e28 <print_bms_data+0x2c0>)
 8003cea:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01a      	beq.n	8003d2e <print_bms_data+0x1c6>
		Bms_Frames.Id_0x103.rx_or_not=0;
 8003cf8:	4a4b      	ldr	r2, [pc, #300]	@ (8003e28 <print_bms_data+0x2c0>)
 8003cfa:	f892 304c 	ldrb.w	r3, [r2, #76]	@ 0x4c
 8003cfe:	f023 0301 	bic.w	r3, r3, #1
 8003d02:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
		uart_printf("0x103 -> FET_Status=0x%d, Prod_Date=0x%d, SW_Version=0x%d, CRC=0x%d\n",
				Bms_Frames.Id_0x103.FET_Control_Status,Bms_Frames.Id_0x103.Production_Date, Bms_Frames.Id_0x103.Software_Version, Bms_Frames.Id_0x103.CRC_Check);
 8003d06:	4b48      	ldr	r3, [pc, #288]	@ (8003e28 <print_bms_data+0x2c0>)
 8003d08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
		uart_printf("0x103 -> FET_Status=0x%d, Prod_Date=0x%d, SW_Version=0x%d, CRC=0x%d\n",
 8003d0c:	4619      	mov	r1, r3
				Bms_Frames.Id_0x103.FET_Control_Status,Bms_Frames.Id_0x103.Production_Date, Bms_Frames.Id_0x103.Software_Version, Bms_Frames.Id_0x103.CRC_Check);
 8003d0e:	4b46      	ldr	r3, [pc, #280]	@ (8003e28 <print_bms_data+0x2c0>)
 8003d10:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
		uart_printf("0x103 -> FET_Status=0x%d, Prod_Date=0x%d, SW_Version=0x%d, CRC=0x%d\n",
 8003d14:	461a      	mov	r2, r3
				Bms_Frames.Id_0x103.FET_Control_Status,Bms_Frames.Id_0x103.Production_Date, Bms_Frames.Id_0x103.Software_Version, Bms_Frames.Id_0x103.CRC_Check);
 8003d16:	4b44      	ldr	r3, [pc, #272]	@ (8003e28 <print_bms_data+0x2c0>)
 8003d18:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
		uart_printf("0x103 -> FET_Status=0x%d, Prod_Date=0x%d, SW_Version=0x%d, CRC=0x%d\n",
 8003d1c:	4618      	mov	r0, r3
				Bms_Frames.Id_0x103.FET_Control_Status,Bms_Frames.Id_0x103.Production_Date, Bms_Frames.Id_0x103.Software_Version, Bms_Frames.Id_0x103.CRC_Check);
 8003d1e:	4b42      	ldr	r3, [pc, #264]	@ (8003e28 <print_bms_data+0x2c0>)
 8003d20:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
		uart_printf("0x103 -> FET_Status=0x%d, Prod_Date=0x%d, SW_Version=0x%d, CRC=0x%d\n",
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	4603      	mov	r3, r0
 8003d28:	4843      	ldr	r0, [pc, #268]	@ (8003e38 <print_bms_data+0x2d0>)
 8003d2a:	f000 ff01 	bl	8004b30 <uart_printf>
	}
	if(Bms_Frames.Id_0x104.rx_or_not){
 8003d2e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e28 <print_bms_data+0x2c0>)
 8003d30:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d014      	beq.n	8003d68 <print_bms_data+0x200>
		Bms_Frames.Id_0x104.rx_or_not=0;
 8003d3e:	4a3a      	ldr	r2, [pc, #232]	@ (8003e28 <print_bms_data+0x2c0>)
 8003d40:	f892 3052 	ldrb.w	r3, [r2, #82]	@ 0x52
 8003d44:	f023 0301 	bic.w	r3, r3, #1
 8003d48:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
		uart_printf("0x104 -> Battery_Strings=%d, NTC_Probes=%d, CRC=0x%X\n",
				Bms_Frames.Id_0x104.Number_Of_Battery_Strings, Bms_Frames.Id_0x104.NTC_Number_Probes,Bms_Frames.Id_0x104.CRC_Check);
 8003d4c:	4b36      	ldr	r3, [pc, #216]	@ (8003e28 <print_bms_data+0x2c0>)
 8003d4e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
		uart_printf("0x104 -> Battery_Strings=%d, NTC_Probes=%d, CRC=0x%X\n",
 8003d52:	4619      	mov	r1, r3
				Bms_Frames.Id_0x104.Number_Of_Battery_Strings, Bms_Frames.Id_0x104.NTC_Number_Probes,Bms_Frames.Id_0x104.CRC_Check);
 8003d54:	4b34      	ldr	r3, [pc, #208]	@ (8003e28 <print_bms_data+0x2c0>)
 8003d56:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
		uart_printf("0x104 -> Battery_Strings=%d, NTC_Probes=%d, CRC=0x%X\n",
 8003d5a:	461a      	mov	r2, r3
				Bms_Frames.Id_0x104.Number_Of_Battery_Strings, Bms_Frames.Id_0x104.NTC_Number_Probes,Bms_Frames.Id_0x104.CRC_Check);
 8003d5c:	4b32      	ldr	r3, [pc, #200]	@ (8003e28 <print_bms_data+0x2c0>)
 8003d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
		uart_printf("0x104 -> Battery_Strings=%d, NTC_Probes=%d, CRC=0x%X\n",
 8003d62:	4836      	ldr	r0, [pc, #216]	@ (8003e3c <print_bms_data+0x2d4>)
 8003d64:	f000 fee4 	bl	8004b30 <uart_printf>
	}
	if(Bms_Frames.Id_0x105.rx_or_not){
 8003d68:	4b2f      	ldr	r3, [pc, #188]	@ (8003e28 <print_bms_data+0x2c0>)
 8003d6a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d028      	beq.n	8003dca <print_bms_data+0x262>
		Bms_Frames.Id_0x105.rx_or_not=0;
 8003d78:	4a2b      	ldr	r2, [pc, #172]	@ (8003e28 <print_bms_data+0x2c0>)
 8003d7a:	f892 3062 	ldrb.w	r3, [r2, #98]	@ 0x62
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	f882 3062 	strb.w	r3, [r2, #98]	@ 0x62
		uart_printf("0x105 -> NTC1=%.2f°C, NTC2=%.2f°C, NTC3=%.2f°C, CRC=0x%X\n",
		Bms_Frames.Id_0x105.NTC1,Bms_Frames.Id_0x105.NTC2, Bms_Frames.Id_0x105.NTC3, Bms_Frames.Id_0x105.CRC_Check);
 8003d86:	4b28      	ldr	r3, [pc, #160]	@ (8003e28 <print_bms_data+0x2c0>)
 8003d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
		uart_printf("0x105 -> NTC1=%.2f°C, NTC2=%.2f°C, NTC3=%.2f°C, CRC=0x%X\n",
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc fb4c 	bl	8000428 <__aeabi_f2d>
 8003d90:	4680      	mov	r8, r0
 8003d92:	4689      	mov	r9, r1
		Bms_Frames.Id_0x105.NTC1,Bms_Frames.Id_0x105.NTC2, Bms_Frames.Id_0x105.NTC3, Bms_Frames.Id_0x105.CRC_Check);
 8003d94:	4b24      	ldr	r3, [pc, #144]	@ (8003e28 <print_bms_data+0x2c0>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
		uart_printf("0x105 -> NTC1=%.2f°C, NTC2=%.2f°C, NTC3=%.2f°C, CRC=0x%X\n",
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f7fc fb45 	bl	8000428 <__aeabi_f2d>
 8003d9e:	4604      	mov	r4, r0
 8003da0:	460d      	mov	r5, r1
		Bms_Frames.Id_0x105.NTC1,Bms_Frames.Id_0x105.NTC2, Bms_Frames.Id_0x105.NTC3, Bms_Frames.Id_0x105.CRC_Check);
 8003da2:	4b21      	ldr	r3, [pc, #132]	@ (8003e28 <print_bms_data+0x2c0>)
 8003da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
		uart_printf("0x105 -> NTC1=%.2f°C, NTC2=%.2f°C, NTC3=%.2f°C, CRC=0x%X\n",
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fc fb3e 	bl	8000428 <__aeabi_f2d>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
		Bms_Frames.Id_0x105.NTC1,Bms_Frames.Id_0x105.NTC2, Bms_Frames.Id_0x105.NTC3, Bms_Frames.Id_0x105.CRC_Check);
 8003db0:	491d      	ldr	r1, [pc, #116]	@ (8003e28 <print_bms_data+0x2c0>)
 8003db2:	f8b1 1060 	ldrh.w	r1, [r1, #96]	@ 0x60
		uart_printf("0x105 -> NTC1=%.2f°C, NTC2=%.2f°C, NTC3=%.2f°C, CRC=0x%X\n",
 8003db6:	9104      	str	r1, [sp, #16]
 8003db8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dbc:	e9cd 4500 	strd	r4, r5, [sp]
 8003dc0:	4642      	mov	r2, r8
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	481e      	ldr	r0, [pc, #120]	@ (8003e40 <print_bms_data+0x2d8>)
 8003dc6:	f000 feb3 	bl	8004b30 <uart_printf>
	}
	if(Bms_Frames.Id_0x106.rx_or_not){
 8003dca:	4b17      	ldr	r3, [pc, #92]	@ (8003e28 <print_bms_data+0x2c0>)
 8003dcc:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01f      	beq.n	8003e1a <print_bms_data+0x2b2>
		Bms_Frames.Id_0x106.rx_or_not=0;
 8003dda:	4a13      	ldr	r2, [pc, #76]	@ (8003e28 <print_bms_data+0x2c0>)
 8003ddc:	f892 3072 	ldrb.w	r3, [r2, #114]	@ 0x72
 8003de0:	f023 0301 	bic.w	r3, r3, #1
 8003de4:	f882 3072 	strb.w	r3, [r2, #114]	@ 0x72
		uart_printf("0x106 -> NTC4=%.2f°C, NTC5=%.2f°C,  CRC=0x%X\n",
				Bms_Frames.Id_0x106.NTC4, Bms_Frames.Id_0x106.NTC5,  Bms_Frames.Id_0x106.CRC_Check);
 8003de8:	4b0f      	ldr	r3, [pc, #60]	@ (8003e28 <print_bms_data+0x2c0>)
 8003dea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
		uart_printf("0x106 -> NTC4=%.2f°C, NTC5=%.2f°C,  CRC=0x%X\n",
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fc fb1b 	bl	8000428 <__aeabi_f2d>
 8003df2:	4604      	mov	r4, r0
 8003df4:	460d      	mov	r5, r1
				Bms_Frames.Id_0x106.NTC4, Bms_Frames.Id_0x106.NTC5,  Bms_Frames.Id_0x106.CRC_Check);
 8003df6:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <print_bms_data+0x2c0>)
 8003df8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
		uart_printf("0x106 -> NTC4=%.2f°C, NTC5=%.2f°C,  CRC=0x%X\n",
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fc fb14 	bl	8000428 <__aeabi_f2d>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
				Bms_Frames.Id_0x106.NTC4, Bms_Frames.Id_0x106.NTC5,  Bms_Frames.Id_0x106.CRC_Check);
 8003e04:	4908      	ldr	r1, [pc, #32]	@ (8003e28 <print_bms_data+0x2c0>)
 8003e06:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
		uart_printf("0x106 -> NTC4=%.2f°C, NTC5=%.2f°C,  CRC=0x%X\n",
 8003e0a:	9102      	str	r1, [sp, #8]
 8003e0c:	e9cd 2300 	strd	r2, r3, [sp]
 8003e10:	4622      	mov	r2, r4
 8003e12:	462b      	mov	r3, r5
 8003e14:	480b      	ldr	r0, [pc, #44]	@ (8003e44 <print_bms_data+0x2dc>)
 8003e16:	f000 fe8b 	bl	8004b30 <uart_printf>
	}
	if(Bms_Frames.Id_0x107.rx_or_not){
 8003e1a:	4b03      	ldr	r3, [pc, #12]	@ (8003e28 <print_bms_data+0x2c0>)
 8003e1c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e00f      	b.n	8003e48 <print_bms_data+0x2e0>
 8003e28:	20000220 	.word	0x20000220
 8003e2c:	0800a468 	.word	0x0800a468
 8003e30:	0800a4c0 	.word	0x0800a4c0
 8003e34:	0800a504 	.word	0x0800a504
 8003e38:	0800a59c 	.word	0x0800a59c
 8003e3c:	0800a5e4 	.word	0x0800a5e4
 8003e40:	0800a61c 	.word	0x0800a61c
 8003e44:	0800a65c 	.word	0x0800a65c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d028      	beq.n	8003e9e <print_bms_data+0x336>
		Bms_Frames.Id_0x107.rx_or_not=0;
 8003e4c:	4a88      	ldr	r2, [pc, #544]	@ (8004070 <print_bms_data+0x508>)
 8003e4e:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	f882 3082 	strb.w	r3, [r2, #130]	@ 0x82
		uart_printf("0x107 -> CELL1=%.3fV, CELL2=%.3fV, CELL3=%.3fV, CRC=0x%X\n",
				Bms_Frames.Id_0x107.CELL1, Bms_Frames.Id_0x107.CELL2, Bms_Frames.Id_0x107.CELL3, Bms_Frames.Id_0x107.CRC_Check);
 8003e5a:	4b85      	ldr	r3, [pc, #532]	@ (8004070 <print_bms_data+0x508>)
 8003e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
		uart_printf("0x107 -> CELL1=%.3fV, CELL2=%.3fV, CELL3=%.3fV, CRC=0x%X\n",
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fc fae2 	bl	8000428 <__aeabi_f2d>
 8003e64:	4680      	mov	r8, r0
 8003e66:	4689      	mov	r9, r1
				Bms_Frames.Id_0x107.CELL1, Bms_Frames.Id_0x107.CELL2, Bms_Frames.Id_0x107.CELL3, Bms_Frames.Id_0x107.CRC_Check);
 8003e68:	4b81      	ldr	r3, [pc, #516]	@ (8004070 <print_bms_data+0x508>)
 8003e6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
		uart_printf("0x107 -> CELL1=%.3fV, CELL2=%.3fV, CELL3=%.3fV, CRC=0x%X\n",
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fc fadb 	bl	8000428 <__aeabi_f2d>
 8003e72:	4604      	mov	r4, r0
 8003e74:	460d      	mov	r5, r1
				Bms_Frames.Id_0x107.CELL1, Bms_Frames.Id_0x107.CELL2, Bms_Frames.Id_0x107.CELL3, Bms_Frames.Id_0x107.CRC_Check);
 8003e76:	4b7e      	ldr	r3, [pc, #504]	@ (8004070 <print_bms_data+0x508>)
 8003e78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
		uart_printf("0x107 -> CELL1=%.3fV, CELL2=%.3fV, CELL3=%.3fV, CRC=0x%X\n",
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fc fad4 	bl	8000428 <__aeabi_f2d>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
				Bms_Frames.Id_0x107.CELL1, Bms_Frames.Id_0x107.CELL2, Bms_Frames.Id_0x107.CELL3, Bms_Frames.Id_0x107.CRC_Check);
 8003e84:	497a      	ldr	r1, [pc, #488]	@ (8004070 <print_bms_data+0x508>)
 8003e86:	f8b1 1080 	ldrh.w	r1, [r1, #128]	@ 0x80
		uart_printf("0x107 -> CELL1=%.3fV, CELL2=%.3fV, CELL3=%.3fV, CRC=0x%X\n",
 8003e8a:	9104      	str	r1, [sp, #16]
 8003e8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e90:	e9cd 4500 	strd	r4, r5, [sp]
 8003e94:	4642      	mov	r2, r8
 8003e96:	464b      	mov	r3, r9
 8003e98:	4876      	ldr	r0, [pc, #472]	@ (8004074 <print_bms_data+0x50c>)
 8003e9a:	f000 fe49 	bl	8004b30 <uart_printf>
	}
	if(Bms_Frames.Id_0x108.rx_or_not){
 8003e9e:	4b74      	ldr	r3, [pc, #464]	@ (8004070 <print_bms_data+0x508>)
 8003ea0:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d028      	beq.n	8003efa <print_bms_data+0x392>
		Bms_Frames.Id_0x108.rx_or_not=0;
 8003ea8:	4b71      	ldr	r3, [pc, #452]	@ (8004070 <print_bms_data+0x508>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
		 uart_printf("0x108 -> CELL4=%.3fV, CELL5=%.3fV, CELL6=%.3fV, CRC=0x%X\n",
				 Bms_Frames.Id_0x108.CELL4, Bms_Frames.Id_0x108.CELL5, Bms_Frames.Id_0x108.CELL6, Bms_Frames.Id_0x108.CRC_Check);
 8003eb0:	4b6f      	ldr	r3, [pc, #444]	@ (8004070 <print_bms_data+0x508>)
 8003eb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
		 uart_printf("0x108 -> CELL4=%.3fV, CELL5=%.3fV, CELL6=%.3fV, CRC=0x%X\n",
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fc fab6 	bl	8000428 <__aeabi_f2d>
 8003ebc:	4680      	mov	r8, r0
 8003ebe:	4689      	mov	r9, r1
				 Bms_Frames.Id_0x108.CELL4, Bms_Frames.Id_0x108.CELL5, Bms_Frames.Id_0x108.CELL6, Bms_Frames.Id_0x108.CRC_Check);
 8003ec0:	4b6b      	ldr	r3, [pc, #428]	@ (8004070 <print_bms_data+0x508>)
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
		 uart_printf("0x108 -> CELL4=%.3fV, CELL5=%.3fV, CELL6=%.3fV, CRC=0x%X\n",
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fc faae 	bl	8000428 <__aeabi_f2d>
 8003ecc:	4604      	mov	r4, r0
 8003ece:	460d      	mov	r5, r1
				 Bms_Frames.Id_0x108.CELL4, Bms_Frames.Id_0x108.CELL5, Bms_Frames.Id_0x108.CELL6, Bms_Frames.Id_0x108.CRC_Check);
 8003ed0:	4b67      	ldr	r3, [pc, #412]	@ (8004070 <print_bms_data+0x508>)
 8003ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
		 uart_printf("0x108 -> CELL4=%.3fV, CELL5=%.3fV, CELL6=%.3fV, CRC=0x%X\n",
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fc faa6 	bl	8000428 <__aeabi_f2d>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
				 Bms_Frames.Id_0x108.CELL4, Bms_Frames.Id_0x108.CELL5, Bms_Frames.Id_0x108.CELL6, Bms_Frames.Id_0x108.CRC_Check);
 8003ee0:	4963      	ldr	r1, [pc, #396]	@ (8004070 <print_bms_data+0x508>)
 8003ee2:	f8b1 1090 	ldrh.w	r1, [r1, #144]	@ 0x90
		 uart_printf("0x108 -> CELL4=%.3fV, CELL5=%.3fV, CELL6=%.3fV, CRC=0x%X\n",
 8003ee6:	9104      	str	r1, [sp, #16]
 8003ee8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003eec:	e9cd 4500 	strd	r4, r5, [sp]
 8003ef0:	4642      	mov	r2, r8
 8003ef2:	464b      	mov	r3, r9
 8003ef4:	4860      	ldr	r0, [pc, #384]	@ (8004078 <print_bms_data+0x510>)
 8003ef6:	f000 fe1b 	bl	8004b30 <uart_printf>
	}
	if(Bms_Frames.Id_0x109.rx_or_not){
 8003efa:	4b5d      	ldr	r3, [pc, #372]	@ (8004070 <print_bms_data+0x508>)
 8003efc:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d02b      	beq.n	8003f62 <print_bms_data+0x3fa>
		Bms_Frames.Id_0x109.rx_or_not=0;
 8003f0a:	4a59      	ldr	r2, [pc, #356]	@ (8004070 <print_bms_data+0x508>)
 8003f0c:	f892 30a2 	ldrb.w	r3, [r2, #162]	@ 0xa2
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	f882 30a2 	strb.w	r3, [r2, #162]	@ 0xa2
		uart_printf("0x109 -> CELL7=%.3fV, CELL8=%.3fV, CELL9=%.3fV, CRC=0x%X\n",
				Bms_Frames.Id_0x109.CELL7, Bms_Frames.Id_0x109.CELL8, Bms_Frames.Id_0x109.CELL9, Bms_Frames.Id_0x109.CRC_Check);
 8003f18:	4b55      	ldr	r3, [pc, #340]	@ (8004070 <print_bms_data+0x508>)
 8003f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
		uart_printf("0x109 -> CELL7=%.3fV, CELL8=%.3fV, CELL9=%.3fV, CRC=0x%X\n",
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fc fa82 	bl	8000428 <__aeabi_f2d>
 8003f24:	4680      	mov	r8, r0
 8003f26:	4689      	mov	r9, r1
				Bms_Frames.Id_0x109.CELL7, Bms_Frames.Id_0x109.CELL8, Bms_Frames.Id_0x109.CELL9, Bms_Frames.Id_0x109.CRC_Check);
 8003f28:	4b51      	ldr	r3, [pc, #324]	@ (8004070 <print_bms_data+0x508>)
 8003f2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
		uart_printf("0x109 -> CELL7=%.3fV, CELL8=%.3fV, CELL9=%.3fV, CRC=0x%X\n",
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fc fa7a 	bl	8000428 <__aeabi_f2d>
 8003f34:	4604      	mov	r4, r0
 8003f36:	460d      	mov	r5, r1
				Bms_Frames.Id_0x109.CELL7, Bms_Frames.Id_0x109.CELL8, Bms_Frames.Id_0x109.CELL9, Bms_Frames.Id_0x109.CRC_Check);
 8003f38:	4b4d      	ldr	r3, [pc, #308]	@ (8004070 <print_bms_data+0x508>)
 8003f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
		uart_printf("0x109 -> CELL7=%.3fV, CELL8=%.3fV, CELL9=%.3fV, CRC=0x%X\n",
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7fc fa72 	bl	8000428 <__aeabi_f2d>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
				Bms_Frames.Id_0x109.CELL7, Bms_Frames.Id_0x109.CELL8, Bms_Frames.Id_0x109.CELL9, Bms_Frames.Id_0x109.CRC_Check);
 8003f48:	4949      	ldr	r1, [pc, #292]	@ (8004070 <print_bms_data+0x508>)
 8003f4a:	f8b1 10a0 	ldrh.w	r1, [r1, #160]	@ 0xa0
		uart_printf("0x109 -> CELL7=%.3fV, CELL8=%.3fV, CELL9=%.3fV, CRC=0x%X\n",
 8003f4e:	9104      	str	r1, [sp, #16]
 8003f50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003f54:	e9cd 4500 	strd	r4, r5, [sp]
 8003f58:	4642      	mov	r2, r8
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	4847      	ldr	r0, [pc, #284]	@ (800407c <print_bms_data+0x514>)
 8003f5e:	f000 fde7 	bl	8004b30 <uart_printf>
	}
	if(Bms_Frames.Id_0x10A.rx_or_not){
 8003f62:	4b43      	ldr	r3, [pc, #268]	@ (8004070 <print_bms_data+0x508>)
 8003f64:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d02b      	beq.n	8003fca <print_bms_data+0x462>
		Bms_Frames.Id_0x10A.rx_or_not=0;
 8003f72:	4a3f      	ldr	r2, [pc, #252]	@ (8004070 <print_bms_data+0x508>)
 8003f74:	f892 30b2 	ldrb.w	r3, [r2, #178]	@ 0xb2
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	f882 30b2 	strb.w	r3, [r2, #178]	@ 0xb2
		uart_printf("0x10A -> CELL10=%.3fV, CELL11=%.3fV, CELL12=%.3fV, CRC=0x%X\n",
				Bms_Frames.Id_0x10A.CELL10, Bms_Frames.Id_0x10A.CELL11, Bms_Frames.Id_0x10A.CELL12, Bms_Frames.Id_0x10A.CRC_Check);
 8003f80:	4b3b      	ldr	r3, [pc, #236]	@ (8004070 <print_bms_data+0x508>)
 8003f82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
		uart_printf("0x10A -> CELL10=%.3fV, CELL11=%.3fV, CELL12=%.3fV, CRC=0x%X\n",
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fc fa4e 	bl	8000428 <__aeabi_f2d>
 8003f8c:	4680      	mov	r8, r0
 8003f8e:	4689      	mov	r9, r1
				Bms_Frames.Id_0x10A.CELL10, Bms_Frames.Id_0x10A.CELL11, Bms_Frames.Id_0x10A.CELL12, Bms_Frames.Id_0x10A.CRC_Check);
 8003f90:	4b37      	ldr	r3, [pc, #220]	@ (8004070 <print_bms_data+0x508>)
 8003f92:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
		uart_printf("0x10A -> CELL10=%.3fV, CELL11=%.3fV, CELL12=%.3fV, CRC=0x%X\n",
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fc fa46 	bl	8000428 <__aeabi_f2d>
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	460d      	mov	r5, r1
				Bms_Frames.Id_0x10A.CELL10, Bms_Frames.Id_0x10A.CELL11, Bms_Frames.Id_0x10A.CELL12, Bms_Frames.Id_0x10A.CRC_Check);
 8003fa0:	4b33      	ldr	r3, [pc, #204]	@ (8004070 <print_bms_data+0x508>)
 8003fa2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
		uart_printf("0x10A -> CELL10=%.3fV, CELL11=%.3fV, CELL12=%.3fV, CRC=0x%X\n",
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fc fa3e 	bl	8000428 <__aeabi_f2d>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
				Bms_Frames.Id_0x10A.CELL10, Bms_Frames.Id_0x10A.CELL11, Bms_Frames.Id_0x10A.CELL12, Bms_Frames.Id_0x10A.CRC_Check);
 8003fb0:	492f      	ldr	r1, [pc, #188]	@ (8004070 <print_bms_data+0x508>)
 8003fb2:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	@ 0xb0
		uart_printf("0x10A -> CELL10=%.3fV, CELL11=%.3fV, CELL12=%.3fV, CRC=0x%X\n",
 8003fb6:	9104      	str	r1, [sp, #16]
 8003fb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fbc:	e9cd 4500 	strd	r4, r5, [sp]
 8003fc0:	4642      	mov	r2, r8
 8003fc2:	464b      	mov	r3, r9
 8003fc4:	482e      	ldr	r0, [pc, #184]	@ (8004080 <print_bms_data+0x518>)
 8003fc6:	f000 fdb3 	bl	8004b30 <uart_printf>
	}
	if(Bms_Frames.Id_0x10B.rx_or_not){
 8003fca:	4b29      	ldr	r3, [pc, #164]	@ (8004070 <print_bms_data+0x508>)
 8003fcc:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d02b      	beq.n	8004032 <print_bms_data+0x4ca>
		Bms_Frames.Id_0x10B.rx_or_not=0;
 8003fda:	4a25      	ldr	r2, [pc, #148]	@ (8004070 <print_bms_data+0x508>)
 8003fdc:	f892 30c2 	ldrb.w	r3, [r2, #194]	@ 0xc2
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	f882 30c2 	strb.w	r3, [r2, #194]	@ 0xc2
		uart_printf("0x10B -> CELL13=%.3fV, CELL14=%.3fV, CELL15=%.3fV, CRC=0x%X\n",
				Bms_Frames.Id_0x10B.CELL13, Bms_Frames.Id_0x10B.CELL14, Bms_Frames.Id_0x10B.CELL15, Bms_Frames.Id_0x10B.CRC_Check);
 8003fe8:	4b21      	ldr	r3, [pc, #132]	@ (8004070 <print_bms_data+0x508>)
 8003fea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
		uart_printf("0x10B -> CELL13=%.3fV, CELL14=%.3fV, CELL15=%.3fV, CRC=0x%X\n",
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc fa1a 	bl	8000428 <__aeabi_f2d>
 8003ff4:	4680      	mov	r8, r0
 8003ff6:	4689      	mov	r9, r1
				Bms_Frames.Id_0x10B.CELL13, Bms_Frames.Id_0x10B.CELL14, Bms_Frames.Id_0x10B.CELL15, Bms_Frames.Id_0x10B.CRC_Check);
 8003ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8004070 <print_bms_data+0x508>)
 8003ffa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
		uart_printf("0x10B -> CELL13=%.3fV, CELL14=%.3fV, CELL15=%.3fV, CRC=0x%X\n",
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fc fa12 	bl	8000428 <__aeabi_f2d>
 8004004:	4604      	mov	r4, r0
 8004006:	460d      	mov	r5, r1
				Bms_Frames.Id_0x10B.CELL13, Bms_Frames.Id_0x10B.CELL14, Bms_Frames.Id_0x10B.CELL15, Bms_Frames.Id_0x10B.CRC_Check);
 8004008:	4b19      	ldr	r3, [pc, #100]	@ (8004070 <print_bms_data+0x508>)
 800400a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
		uart_printf("0x10B -> CELL13=%.3fV, CELL14=%.3fV, CELL15=%.3fV, CRC=0x%X\n",
 800400e:	4618      	mov	r0, r3
 8004010:	f7fc fa0a 	bl	8000428 <__aeabi_f2d>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
				Bms_Frames.Id_0x10B.CELL13, Bms_Frames.Id_0x10B.CELL14, Bms_Frames.Id_0x10B.CELL15, Bms_Frames.Id_0x10B.CRC_Check);
 8004018:	4915      	ldr	r1, [pc, #84]	@ (8004070 <print_bms_data+0x508>)
 800401a:	f8b1 10c0 	ldrh.w	r1, [r1, #192]	@ 0xc0
		uart_printf("0x10B -> CELL13=%.3fV, CELL14=%.3fV, CELL15=%.3fV, CRC=0x%X\n",
 800401e:	9104      	str	r1, [sp, #16]
 8004020:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004024:	e9cd 4500 	strd	r4, r5, [sp]
 8004028:	4642      	mov	r2, r8
 800402a:	464b      	mov	r3, r9
 800402c:	4815      	ldr	r0, [pc, #84]	@ (8004084 <print_bms_data+0x51c>)
 800402e:	f000 fd7f 	bl	8004b30 <uart_printf>
	}
	if(Bms_Frames.Id_0x10C.rx_or_not){
 8004032:	4b0f      	ldr	r3, [pc, #60]	@ (8004070 <print_bms_data+0x508>)
 8004034:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d011      	beq.n	8004066 <print_bms_data+0x4fe>
		Bms_Frames.Id_0x10C.rx_or_not=0;
 8004042:	4a0b      	ldr	r2, [pc, #44]	@ (8004070 <print_bms_data+0x508>)
 8004044:	f892 30d2 	ldrb.w	r3, [r2, #210]	@ 0xd2
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	f882 30d2 	strb.w	r3, [r2, #210]	@ 0xd2
		uart_printf("0x10C -> CELL16=%.3fV,\n",
		Bms_Frames.Id_0x10C.CELL16);
 8004050:	4b07      	ldr	r3, [pc, #28]	@ (8004070 <print_bms_data+0x508>)
 8004052:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
		uart_printf("0x10C -> CELL16=%.3fV,\n",
 8004056:	4618      	mov	r0, r3
 8004058:	f7fc f9e6 	bl	8000428 <__aeabi_f2d>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4809      	ldr	r0, [pc, #36]	@ (8004088 <print_bms_data+0x520>)
 8004062:	f000 fd65 	bl	8004b30 <uart_printf>
	}
}
 8004066:	bf00      	nop
 8004068:	3724      	adds	r7, #36	@ 0x24
 800406a:	46bd      	mov	sp, r7
 800406c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004070:	20000220 	.word	0x20000220
 8004074:	0800a68c 	.word	0x0800a68c
 8004078:	0800a6c8 	.word	0x0800a6c8
 800407c:	0800a704 	.word	0x0800a704
 8004080:	0800a740 	.word	0x0800a740
 8004084:	0800a780 	.word	0x0800a780
 8004088:	0800a7c0 	.word	0x0800a7c0

0800408c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004092:	4b15      	ldr	r3, [pc, #84]	@ (80040e8 <HAL_MspInit+0x5c>)
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	4a14      	ldr	r2, [pc, #80]	@ (80040e8 <HAL_MspInit+0x5c>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6193      	str	r3, [r2, #24]
 800409e:	4b12      	ldr	r3, [pc, #72]	@ (80040e8 <HAL_MspInit+0x5c>)
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040aa:	4b0f      	ldr	r3, [pc, #60]	@ (80040e8 <HAL_MspInit+0x5c>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4a0e      	ldr	r2, [pc, #56]	@ (80040e8 <HAL_MspInit+0x5c>)
 80040b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040b4:	61d3      	str	r3, [r2, #28]
 80040b6:	4b0c      	ldr	r3, [pc, #48]	@ (80040e8 <HAL_MspInit+0x5c>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040be:	607b      	str	r3, [r7, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80040c2:	4b0a      	ldr	r3, [pc, #40]	@ (80040ec <HAL_MspInit+0x60>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	4a04      	ldr	r2, [pc, #16]	@ (80040ec <HAL_MspInit+0x60>)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040de:	bf00      	nop
 80040e0:	3714      	adds	r7, #20
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40010000 	.word	0x40010000

080040f0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f8:	f107 0310 	add.w	r3, r7, #16
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a1d      	ldr	r2, [pc, #116]	@ (8004180 <HAL_I2C_MspInit+0x90>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d133      	bne.n	8004178 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004110:	4b1c      	ldr	r3, [pc, #112]	@ (8004184 <HAL_I2C_MspInit+0x94>)
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	4a1b      	ldr	r2, [pc, #108]	@ (8004184 <HAL_I2C_MspInit+0x94>)
 8004116:	f043 0308 	orr.w	r3, r3, #8
 800411a:	6193      	str	r3, [r2, #24]
 800411c:	4b19      	ldr	r3, [pc, #100]	@ (8004184 <HAL_I2C_MspInit+0x94>)
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004128:	23c0      	movs	r3, #192	@ 0xc0
 800412a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800412c:	2312      	movs	r3, #18
 800412e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004130:	2303      	movs	r3, #3
 8004132:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004134:	f107 0310 	add.w	r3, r7, #16
 8004138:	4619      	mov	r1, r3
 800413a:	4813      	ldr	r0, [pc, #76]	@ (8004188 <HAL_I2C_MspInit+0x98>)
 800413c:	f000 ff42 	bl	8004fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004140:	4b10      	ldr	r3, [pc, #64]	@ (8004184 <HAL_I2C_MspInit+0x94>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	4a0f      	ldr	r2, [pc, #60]	@ (8004184 <HAL_I2C_MspInit+0x94>)
 8004146:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800414a:	61d3      	str	r3, [r2, #28]
 800414c:	4b0d      	ldr	r3, [pc, #52]	@ (8004184 <HAL_I2C_MspInit+0x94>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004158:	2200      	movs	r2, #0
 800415a:	2100      	movs	r1, #0
 800415c:	201f      	movs	r0, #31
 800415e:	f000 fe74 	bl	8004e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004162:	201f      	movs	r0, #31
 8004164:	f000 fe8d 	bl	8004e82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004168:	2200      	movs	r2, #0
 800416a:	2100      	movs	r1, #0
 800416c:	2020      	movs	r0, #32
 800416e:	f000 fe6c 	bl	8004e4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004172:	2020      	movs	r0, #32
 8004174:	f000 fe85 	bl	8004e82 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004178:	bf00      	nop
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40005400 	.word	0x40005400
 8004184:	40021000 	.word	0x40021000
 8004188:	40010c00 	.word	0x40010c00

0800418c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004190:	bf00      	nop
 8004192:	e7fd      	b.n	8004190 <NMI_Handler+0x4>

08004194 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <HardFault_Handler+0x4>

0800419c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041a0:	bf00      	nop
 80041a2:	e7fd      	b.n	80041a0 <MemManage_Handler+0x4>

080041a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <BusFault_Handler+0x4>

080041ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041b0:	bf00      	nop
 80041b2:	e7fd      	b.n	80041b0 <UsageFault_Handler+0x4>

080041b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041b8:	bf00      	nop
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr

080041c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041c4:	bf00      	nop
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bc80      	pop	{r7}
 80041d6:	4770      	bx	lr

080041d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041dc:	f000 fd4c 	bl	8004c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  milli_sec_tick++;
 80041e0:	4b12      	ldr	r3, [pc, #72]	@ (800422c <SysTick_Handler+0x54>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	4a11      	ldr	r2, [pc, #68]	@ (800422c <SysTick_Handler+0x54>)
 80041e8:	6013      	str	r3, [r2, #0]

  if (mcu_timer < NODE_TIMEOUT)
 80041ea:	4b11      	ldr	r3, [pc, #68]	@ (8004230 <SysTick_Handler+0x58>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f240 52db 	movw	r2, #1499	@ 0x5db
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d805      	bhi.n	8004202 <SysTick_Handler+0x2a>
  {
	  mcu_timer++;
 80041f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004230 <SysTick_Handler+0x58>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004230 <SysTick_Handler+0x58>)
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	e002      	b.n	8004208 <SysTick_Handler+0x30>
  }
  else
  {
	  mcu_connected = 0;
 8004202:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <SysTick_Handler+0x5c>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
  }

  if (bms_timer < NODE_TIMEOUT){
 8004208:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <SysTick_Handler+0x60>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f240 52db 	movw	r2, #1499	@ 0x5db
 8004210:	4293      	cmp	r3, r2
 8004212:	d805      	bhi.n	8004220 <SysTick_Handler+0x48>
	  bms_timer++;
 8004214:	4b08      	ldr	r3, [pc, #32]	@ (8004238 <SysTick_Handler+0x60>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3301      	adds	r3, #1
 800421a:	4a07      	ldr	r2, [pc, #28]	@ (8004238 <SysTick_Handler+0x60>)
 800421c:	6013      	str	r3, [r2, #0]
  }
  else {
	  bms_connected = 0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 800421e:	e002      	b.n	8004226 <SysTick_Handler+0x4e>
	  bms_connected = 0;
 8004220:	4b06      	ldr	r3, [pc, #24]	@ (800423c <SysTick_Handler+0x64>)
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
}
 8004226:	bf00      	nop
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000590 	.word	0x20000590
 8004230:	2000059c 	.word	0x2000059c
 8004234:	20000594 	.word	0x20000594
 8004238:	200005a0 	.word	0x200005a0
 800423c:	20000598 	.word	0x20000598

08004240 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004244:	4802      	ldr	r0, [pc, #8]	@ (8004250 <I2C1_EV_IRQHandler+0x10>)
 8004246:	f001 fa07 	bl	8005658 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000538 	.word	0x20000538

08004254 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004258:	4802      	ldr	r0, [pc, #8]	@ (8004264 <I2C1_ER_IRQHandler+0x10>)
 800425a:	f001 fb6e 	bl	800593a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000538 	.word	0x20000538

08004268 <systick_init>:
 *      Author: MadaYaswanth
 */

#include"extern_file_declarations.h"

void systick_init(uint32_t ticks_per_sec){
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
    // Reload value = (SystemCoreClock / ticks_per_sec) - 1
    SysTick->LOAD = (get_SYSCLK_freq() / ticks_per_sec) - 1;
 8004270:	f000 f92c 	bl	80044cc <get_SYSCLK_freq>
 8004274:	4602      	mov	r2, r0
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	fbb2 f3f3 	udiv	r3, r2, r3
 800427c:	4a06      	ldr	r2, [pc, #24]	@ (8004298 <systick_init+0x30>)
 800427e:	3b01      	subs	r3, #1
 8004280:	6053      	str	r3, [r2, #4]

    SysTick->VAL = 0;             // Clear current value
 8004282:	4b05      	ldr	r3, [pc, #20]	@ (8004298 <systick_init+0x30>)
 8004284:	2200      	movs	r2, #0
 8004286:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = (1 << 2) |    // CLKSOURCE = processor clock (AHB)
 8004288:	4b03      	ldr	r3, [pc, #12]	@ (8004298 <systick_init+0x30>)
 800428a:	2207      	movs	r2, #7
 800428c:	601a      	str	r2, [r3, #0]
                    (1 << 1) |    // TICKINT = enable SysTick interrupt
                    (1 << 0);     // ENABLE counter
}
 800428e:	bf00      	nop
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	e000e010 	.word	0xe000e010

0800429c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return 1;
 80042a0:	2301      	movs	r3, #1
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bc80      	pop	{r7}
 80042a8:	4770      	bx	lr

080042aa <_kill>:

int _kill(int pid, int sig)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b082      	sub	sp, #8
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042b4:	f003 fcc4 	bl	8007c40 <__errno>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2216      	movs	r2, #22
 80042bc:	601a      	str	r2, [r3, #0]
  return -1;
 80042be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <_exit>:

void _exit (int status)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80042d2:	f04f 31ff 	mov.w	r1, #4294967295
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ffe7 	bl	80042aa <_kill>
  while (1) {}    /* Make sure we hang here */
 80042dc:	bf00      	nop
 80042de:	e7fd      	b.n	80042dc <_exit+0x12>

080042e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	e00a      	b.n	8004308 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80042f2:	f3af 8000 	nop.w
 80042f6:	4601      	mov	r1, r0
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	60ba      	str	r2, [r7, #8]
 80042fe:	b2ca      	uxtb	r2, r1
 8004300:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	3301      	adds	r3, #1
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	429a      	cmp	r2, r3
 800430e:	dbf0      	blt.n	80042f2 <_read+0x12>
  }

  return len;
 8004310:	687b      	ldr	r3, [r7, #4]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b086      	sub	sp, #24
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]
 800432a:	e009      	b.n	8004340 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	60ba      	str	r2, [r7, #8]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	3301      	adds	r3, #1
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	429a      	cmp	r2, r3
 8004346:	dbf1      	blt.n	800432c <_write+0x12>
  }
  return len;
 8004348:	687b      	ldr	r3, [r7, #4]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <_close>:

int _close(int file)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800435a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800435e:	4618      	mov	r0, r3
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	bc80      	pop	{r7}
 8004366:	4770      	bx	lr

08004368 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004378:	605a      	str	r2, [r3, #4]
  return 0;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <_isatty>:

int _isatty(int file)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800438e:	2301      	movs	r3, #1
}
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	bc80      	pop	{r7}
 8004398:	4770      	bx	lr

0800439a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800439a:	b480      	push	{r7}
 800439c:	b085      	sub	sp, #20
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr
	...

080043b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043bc:	4a14      	ldr	r2, [pc, #80]	@ (8004410 <_sbrk+0x5c>)
 80043be:	4b15      	ldr	r3, [pc, #84]	@ (8004414 <_sbrk+0x60>)
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043c8:	4b13      	ldr	r3, [pc, #76]	@ (8004418 <_sbrk+0x64>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d102      	bne.n	80043d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043d0:	4b11      	ldr	r3, [pc, #68]	@ (8004418 <_sbrk+0x64>)
 80043d2:	4a12      	ldr	r2, [pc, #72]	@ (800441c <_sbrk+0x68>)
 80043d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043d6:	4b10      	ldr	r3, [pc, #64]	@ (8004418 <_sbrk+0x64>)
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4413      	add	r3, r2
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d207      	bcs.n	80043f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043e4:	f003 fc2c 	bl	8007c40 <__errno>
 80043e8:	4603      	mov	r3, r0
 80043ea:	220c      	movs	r2, #12
 80043ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	e009      	b.n	8004408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043f4:	4b08      	ldr	r3, [pc, #32]	@ (8004418 <_sbrk+0x64>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043fa:	4b07      	ldr	r3, [pc, #28]	@ (8004418 <_sbrk+0x64>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4413      	add	r3, r2
 8004402:	4a05      	ldr	r2, [pc, #20]	@ (8004418 <_sbrk+0x64>)
 8004404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004406:	68fb      	ldr	r3, [r7, #12]
}
 8004408:	4618      	mov	r0, r3
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20005000 	.word	0x20005000
 8004414:	00000400 	.word	0x00000400
 8004418:	200005a4 	.word	0x200005a4
 800441c:	20000798 	.word	0x20000798

08004420 <system_clock_init_to_72MHZ>:
 *
 *  Created on: Sep 2, 2025
 *      Author: MadaYaswanth
 */
#include"main.h"
STATUS system_clock_init_to_72MHZ(){
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
	    // 1. Enable HSE (external crystal, e.g., 8MHz)
	    RCC->CR |= RCC_CR_HSEON;       // Turn on HSE
 8004424:	4b27      	ldr	r3, [pc, #156]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a26      	ldr	r2, [pc, #152]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 800442a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800442e:	6013      	str	r3, [r2, #0]
	    while (!(RCC->CR & RCC_CR_HSERDY)); // Wait until HSE is ready
 8004430:	bf00      	nop
 8004432:	4b24      	ldr	r3, [pc, #144]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0f9      	beq.n	8004432 <system_clock_init_to_72MHZ+0x12>
	    FLASH->ACR |= FLASH_ACR_LATENCY_2;  // 2 wait states
 800443e:	4b22      	ldr	r3, [pc, #136]	@ (80044c8 <system_clock_init_to_72MHZ+0xa8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a21      	ldr	r2, [pc, #132]	@ (80044c8 <system_clock_init_to_72MHZ+0xa8>)
 8004444:	f043 0304 	orr.w	r3, r3, #4
 8004448:	6013      	str	r3, [r2, #0]
	    FLASH->ACR |= FLASH_ACR_PRFTBE;     // Enable prefetch
 800444a:	4b1f      	ldr	r3, [pc, #124]	@ (80044c8 <system_clock_init_to_72MHZ+0xa8>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1e      	ldr	r2, [pc, #120]	@ (80044c8 <system_clock_init_to_72MHZ+0xa8>)
 8004450:	f043 0310 	orr.w	r3, r3, #16
 8004454:	6013      	str	r3, [r2, #0]
	    // 2. Configure PLL to multiply HSE to 72 MHz
	    //    PLLMUL = 9 (8MHz * 9 = 72MHz)
	    RCC->CFGR |= RCC_CFGR_PLLMULL9; // PLL multiplier = 9
 8004456:	4b1b      	ldr	r3, [pc, #108]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	4a1a      	ldr	r2, [pc, #104]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 800445c:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 8004460:	6053      	str	r3, [r2, #4]
	    // 3. Select HSE as PLL source
	    RCC->CFGR |= RCC_CFGR_PLLSRC;   // PLL source = HSE
 8004462:	4b18      	ldr	r3, [pc, #96]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	4a17      	ldr	r2, [pc, #92]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 8004468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800446c:	6053      	str	r3, [r2, #4]
	    // 4. Set APB1 Prescaler to 2 (PCLK1 = 72MHz / 2 = 36MHz)
	    RCC->CFGR |= RCC_CFGR_PPRE1_2;  // APB1 prescaler = 2 (36MHz)
 800446e:	4b15      	ldr	r3, [pc, #84]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4a14      	ldr	r2, [pc, #80]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 8004474:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004478:	6053      	str	r3, [r2, #4]
	    // 5. Set APB2 Prescaler to 1 (PCLK2 = 72MHz, no division)
	    RCC->CFGR &= ~RCC_CFGR_PPRE2;   // APB2 prescaler = 1 (72MHz)
 800447a:	4b12      	ldr	r3, [pc, #72]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4a11      	ldr	r2, [pc, #68]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 8004480:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8004484:	6053      	str	r3, [r2, #4]
	    // 6. Enable PLL and wait until ready
	    RCC->CR |= RCC_CR_PLLON;
 8004486:	4b0f      	ldr	r3, [pc, #60]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a0e      	ldr	r2, [pc, #56]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 800448c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004490:	6013      	str	r3, [r2, #0]
	    while (!(RCC->CR & RCC_CR_PLLRDY));
 8004492:	bf00      	nop
 8004494:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f9      	beq.n	8004494 <system_clock_init_to_72MHZ+0x74>
	     // 7. Switch SYSCLK to PLL
	    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80044a0:	4b08      	ldr	r3, [pc, #32]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	4a07      	ldr	r2, [pc, #28]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 80044a6:	f043 0302 	orr.w	r3, r3, #2
 80044aa:	6053      	str	r3, [r2, #4]
	    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80044ac:	bf00      	nop
 80044ae:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <system_clock_init_to_72MHZ+0xa4>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d1f9      	bne.n	80044ae <system_clock_init_to_72MHZ+0x8e>
}
 80044ba:	bf00      	nop
 80044bc:	4618      	mov	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40022000 	.word	0x40022000

080044cc <get_SYSCLK_freq>:
uint32_t get_SYSCLK_freq(void) {
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
    uint32_t sysclk_source, pllmul, prediv, pllclk;
    uint32_t HSE_Value = 8000000; // External crystal (adjust if different)
 80044d2:	4b26      	ldr	r3, [pc, #152]	@ (800456c <get_SYSCLK_freq+0xa0>)
 80044d4:	60bb      	str	r3, [r7, #8]
    uint32_t HSI_Value = 8000000; // Internal RC
 80044d6:	4b25      	ldr	r3, [pc, #148]	@ (800456c <get_SYSCLK_freq+0xa0>)
 80044d8:	607b      	str	r3, [r7, #4]
    sysclk_source = (RCC->CFGR >> 2) & 0x3;  // SWS bits
 80044da:	4b25      	ldr	r3, [pc, #148]	@ (8004570 <get_SYSCLK_freq+0xa4>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	089b      	lsrs	r3, r3, #2
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	603b      	str	r3, [r7, #0]
    switch (sysclk_source) {
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d00d      	beq.n	8004508 <get_SYSCLK_freq+0x3c>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d835      	bhi.n	800455e <get_SYSCLK_freq+0x92>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <get_SYSCLK_freq+0x34>
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d002      	beq.n	8004504 <get_SYSCLK_freq+0x38>
 80044fe:	e02e      	b.n	800455e <get_SYSCLK_freq+0x92>
        case 0x00: // HSI
            return HSI_Value;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	e02d      	b.n	8004560 <get_SYSCLK_freq+0x94>
        case 0x01: // HSE
            return HSE_Value;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	e02b      	b.n	8004560 <get_SYSCLK_freq+0x94>
        case 0x02: // PLL
            // PLL source
            if (RCC->CFGR & (1 << 16)) {
 8004508:	4b19      	ldr	r3, [pc, #100]	@ (8004570 <get_SYSCLK_freq+0xa4>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d010      	beq.n	8004536 <get_SYSCLK_freq+0x6a>
                // HSE as PLL source
                if (RCC->CFGR & (1 << 17))
 8004514:	4b16      	ldr	r3, [pc, #88]	@ (8004570 <get_SYSCLK_freq+0xa4>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <get_SYSCLK_freq+0x5a>
                    prediv = 2;   // HSE/2
 8004520:	2302      	movs	r3, #2
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	e001      	b.n	800452a <get_SYSCLK_freq+0x5e>
                else
                    prediv = 1;   // HSE
 8004526:	2301      	movs	r3, #1
 8004528:	613b      	str	r3, [r7, #16]
                pllclk = HSE_Value / prediv;
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	e002      	b.n	800453c <get_SYSCLK_freq+0x70>
            } else {
                // HSI/2 as PLL source
                pllclk = HSI_Value / 2; // 4 MHz
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	085b      	lsrs	r3, r3, #1
 800453a:	60fb      	str	r3, [r7, #12]
            }

            // PLL multiplier
            pllmul = ((RCC->CFGR >> 18) & 0xF) + 2;
 800453c:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <get_SYSCLK_freq+0xa4>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	0c9b      	lsrs	r3, r3, #18
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	3302      	adds	r3, #2
 8004548:	617b      	str	r3, [r7, #20]
            // Note: value 0b1101 = x13, 0b1110 = x14, 0b1111 = x16
            if (pllmul == 15) pllmul = 16; // adjust for 0b1111 special case
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b0f      	cmp	r3, #15
 800454e:	d101      	bne.n	8004554 <get_SYSCLK_freq+0x88>
 8004550:	2310      	movs	r3, #16
 8004552:	617b      	str	r3, [r7, #20]

            return pllclk * pllmul;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	fb02 f303 	mul.w	r3, r2, r3
 800455c:	e000      	b.n	8004560 <get_SYSCLK_freq+0x94>
        default:
            return HSI_Value; // fallback
 800455e:	687b      	ldr	r3, [r7, #4]
    }
}
 8004560:	4618      	mov	r0, r3
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	bc80      	pop	{r7}
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	007a1200 	.word	0x007a1200
 8004570:	40021000 	.word	0x40021000

08004574 <get_AHB_freq>:
uint32_t get_AHB_freq(void) {
 8004574:	b5b0      	push	{r4, r5, r7, lr}
 8004576:	b092      	sub	sp, #72	@ 0x48
 8004578:	af00      	add	r7, sp, #0
    uint32_t presc_table[16] = {1,1,1,1,1,1,1,1,2,4,8,16,64,128,256,512};
 800457a:	4b11      	ldr	r3, [pc, #68]	@ (80045c0 <get_AHB_freq+0x4c>)
 800457c:	1d3c      	adds	r4, r7, #4
 800457e:	461d      	mov	r5, r3
 8004580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800458a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800458c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t hpre = (RCC->CFGR >> 4) & 0xF;
 8004594:	4b0b      	ldr	r3, [pc, #44]	@ (80045c4 <get_AHB_freq+0x50>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	091b      	lsrs	r3, r3, #4
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	647b      	str	r3, [r7, #68]	@ 0x44
    return get_SYSCLK_freq() / presc_table[hpre];
 80045a0:	f7ff ff94 	bl	80044cc <get_SYSCLK_freq>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	3348      	adds	r3, #72	@ 0x48
 80045ac:	443b      	add	r3, r7
 80045ae:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80045b2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3748      	adds	r7, #72	@ 0x48
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bdb0      	pop	{r4, r5, r7, pc}
 80045be:	bf00      	nop
 80045c0:	0800a7d8 	.word	0x0800a7d8
 80045c4:	40021000 	.word	0x40021000

080045c8 <get_APB1_freq>:

uint32_t get_APB1_freq(void) {
 80045c8:	b5b0      	push	{r4, r5, r7, lr}
 80045ca:	b08a      	sub	sp, #40	@ 0x28
 80045cc:	af00      	add	r7, sp, #0
    uint32_t presc_table[8] = {1,1,1,1,2,4,8,16};
 80045ce:	4b0f      	ldr	r3, [pc, #60]	@ (800460c <get_APB1_freq+0x44>)
 80045d0:	1d3c      	adds	r4, r7, #4
 80045d2:	461d      	mov	r5, r3
 80045d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80045dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t ppre1 = (RCC->CFGR >> 8) & 0x7;
 80045e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <get_APB1_freq+0x48>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	0a1b      	lsrs	r3, r3, #8
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
    return get_AHB_freq() / presc_table[ppre1];
 80045ec:	f7ff ffc2 	bl	8004574 <get_AHB_freq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	3328      	adds	r3, #40	@ 0x28
 80045f8:	443b      	add	r3, r7
 80045fa:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80045fe:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004602:	4618      	mov	r0, r3
 8004604:	3728      	adds	r7, #40	@ 0x28
 8004606:	46bd      	mov	sp, r7
 8004608:	bdb0      	pop	{r4, r5, r7, pc}
 800460a:	bf00      	nop
 800460c:	0800a818 	.word	0x0800a818
 8004610:	40021000 	.word	0x40021000

08004614 <get_APB2_freq>:

uint32_t get_APB2_freq(void) {
 8004614:	b5b0      	push	{r4, r5, r7, lr}
 8004616:	b08a      	sub	sp, #40	@ 0x28
 8004618:	af00      	add	r7, sp, #0
    uint32_t presc_table[8] = {1,1,1,1,2,4,8,16};
 800461a:	4b0f      	ldr	r3, [pc, #60]	@ (8004658 <get_APB2_freq+0x44>)
 800461c:	1d3c      	adds	r4, r7, #4
 800461e:	461d      	mov	r5, r3
 8004620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004624:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004628:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t ppre2 = (RCC->CFGR >> 11) & 0x7;
 800462c:	4b0b      	ldr	r3, [pc, #44]	@ (800465c <get_APB2_freq+0x48>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	0adb      	lsrs	r3, r3, #11
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
    return get_AHB_freq() / presc_table[ppre2];
 8004638:	f7ff ff9c 	bl	8004574 <get_AHB_freq>
 800463c:	4602      	mov	r2, r0
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	3328      	adds	r3, #40	@ 0x28
 8004644:	443b      	add	r3, r7
 8004646:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800464a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800464e:	4618      	mov	r0, r3
 8004650:	3728      	adds	r7, #40	@ 0x28
 8004652:	46bd      	mov	sp, r7
 8004654:	bdb0      	pop	{r4, r5, r7, pc}
 8004656:	bf00      	nop
 8004658:	0800a818 	.word	0x0800a818
 800465c:	40021000 	.word	0x40021000

08004660 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004664:	bf00      	nop
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <Init_tasks>:

#include"extern_file_declarations.h"
#define max_tasks 10
task_timer timer[max_tasks];

void Init_tasks(void){
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
	for(int i=0; i<max_tasks; i++){
 8004672:	2300      	movs	r3, #0
 8004674:	607b      	str	r3, [r7, #4]
 8004676:	e024      	b.n	80046c2 <Init_tasks+0x56>
		timer[i].period_ms = 0;
 8004678:	4a16      	ldr	r2, [pc, #88]	@ (80046d4 <Init_tasks+0x68>)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	4413      	add	r3, r2
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
		timer[i].last_time_ms = 0;
 8004684:	4a13      	ldr	r2, [pc, #76]	@ (80046d4 <Init_tasks+0x68>)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	4413      	add	r3, r2
 800468c:	3304      	adds	r3, #4
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
		timer[i].enable = 0;
 8004692:	4a10      	ldr	r2, [pc, #64]	@ (80046d4 <Init_tasks+0x68>)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	4413      	add	r3, r2
 800469a:	330c      	adds	r3, #12
 800469c:	2200      	movs	r2, #0
 800469e:	701a      	strb	r2, [r3, #0]
		timer[i].task_fn = 0;
 80046a0:	4a0c      	ldr	r2, [pc, #48]	@ (80046d4 <Init_tasks+0x68>)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	4413      	add	r3, r2
 80046a8:	3308      	adds	r3, #8
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
		timer[i].one_time_execute = 0;
 80046ae:	4a09      	ldr	r2, [pc, #36]	@ (80046d4 <Init_tasks+0x68>)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	4413      	add	r3, r2
 80046b6:	330d      	adds	r3, #13
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<max_tasks; i++){
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	3301      	adds	r3, #1
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b09      	cmp	r3, #9
 80046c6:	ddd7      	ble.n	8004678 <Init_tasks+0xc>
	}
}
 80046c8:	bf00      	nop
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr
 80046d4:	200005a8 	.word	0x200005a8

080046d8 <Register_task>:

int Register_task(uint32_t period_ms, TaskFunction task_fn){
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
	for(int i=0; i<max_tasks; i++){
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	e037      	b.n	8004758 <Register_task+0x80>
		if(!timer[i].enable && timer[i].task_fn == 0){
 80046e8:	4a20      	ldr	r2, [pc, #128]	@ (800476c <Register_task+0x94>)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	4413      	add	r3, r2
 80046f0:	330c      	adds	r3, #12
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d12c      	bne.n	8004752 <Register_task+0x7a>
 80046f8:	4a1c      	ldr	r2, [pc, #112]	@ (800476c <Register_task+0x94>)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	4413      	add	r3, r2
 8004700:	3308      	adds	r3, #8
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d124      	bne.n	8004752 <Register_task+0x7a>
			timer[i].enable =1;
 8004708:	4a18      	ldr	r2, [pc, #96]	@ (800476c <Register_task+0x94>)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	4413      	add	r3, r2
 8004710:	330c      	adds	r3, #12
 8004712:	2201      	movs	r2, #1
 8004714:	701a      	strb	r2, [r3, #0]
			timer[i].last_time_ms = milli_sec_tick;
 8004716:	4b16      	ldr	r3, [pc, #88]	@ (8004770 <Register_task+0x98>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4914      	ldr	r1, [pc, #80]	@ (800476c <Register_task+0x94>)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	440b      	add	r3, r1
 8004722:	3304      	adds	r3, #4
 8004724:	601a      	str	r2, [r3, #0]
			timer[i].one_time_execute = 0;
 8004726:	4a11      	ldr	r2, [pc, #68]	@ (800476c <Register_task+0x94>)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	011b      	lsls	r3, r3, #4
 800472c:	4413      	add	r3, r2
 800472e:	330d      	adds	r3, #13
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
			timer[i].period_ms = period_ms;
 8004734:	4a0d      	ldr	r2, [pc, #52]	@ (800476c <Register_task+0x94>)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	011b      	lsls	r3, r3, #4
 800473a:	4413      	add	r3, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	601a      	str	r2, [r3, #0]
			timer[i].task_fn = task_fn;
 8004740:	4a0a      	ldr	r2, [pc, #40]	@ (800476c <Register_task+0x94>)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	4413      	add	r3, r2
 8004748:	3308      	adds	r3, #8
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	601a      	str	r2, [r3, #0]
			return i;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	e007      	b.n	8004762 <Register_task+0x8a>
	for(int i=0; i<max_tasks; i++){
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	3301      	adds	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b09      	cmp	r3, #9
 800475c:	ddc4      	ble.n	80046e8 <Register_task+0x10>
		}
	}
	return -1;
 800475e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	bc80      	pop	{r7}
 800476a:	4770      	bx	lr
 800476c:	200005a8 	.word	0x200005a8
 8004770:	20000590 	.word	0x20000590

08004774 <Run_all_tasks>:
		}
	}
	return -1;
}

void Run_all_tasks(void){
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
	for(int i=0; i<max_tasks; i++){
 800477a:	2300      	movs	r3, #0
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	e03c      	b.n	80047fa <Run_all_tasks+0x86>
		if(timer[i].enable && timer[i].task_fn != 0){
 8004780:	4a22      	ldr	r2, [pc, #136]	@ (800480c <Run_all_tasks+0x98>)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	4413      	add	r3, r2
 8004788:	330c      	adds	r3, #12
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d031      	beq.n	80047f4 <Run_all_tasks+0x80>
 8004790:	4a1e      	ldr	r2, [pc, #120]	@ (800480c <Run_all_tasks+0x98>)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	4413      	add	r3, r2
 8004798:	3308      	adds	r3, #8
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d029      	beq.n	80047f4 <Run_all_tasks+0x80>
			if(milli_sec_tick - timer[i].last_time_ms > timer[i].period_ms){
 80047a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004810 <Run_all_tasks+0x9c>)
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	4919      	ldr	r1, [pc, #100]	@ (800480c <Run_all_tasks+0x98>)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	011b      	lsls	r3, r3, #4
 80047aa:	440b      	add	r3, r1
 80047ac:	3304      	adds	r3, #4
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	1ad2      	subs	r2, r2, r3
 80047b2:	4916      	ldr	r1, [pc, #88]	@ (800480c <Run_all_tasks+0x98>)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	440b      	add	r3, r1
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d919      	bls.n	80047f4 <Run_all_tasks+0x80>
				timer[i].last_time_ms = milli_sec_tick;
 80047c0:	4b13      	ldr	r3, [pc, #76]	@ (8004810 <Run_all_tasks+0x9c>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4911      	ldr	r1, [pc, #68]	@ (800480c <Run_all_tasks+0x98>)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	440b      	add	r3, r1
 80047cc:	3304      	adds	r3, #4
 80047ce:	601a      	str	r2, [r3, #0]
				timer[i].task_fn();
 80047d0:	4a0e      	ldr	r2, [pc, #56]	@ (800480c <Run_all_tasks+0x98>)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	4413      	add	r3, r2
 80047d8:	3308      	adds	r3, #8
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4798      	blx	r3
				if(timer[i].one_time_execute==1){
 80047de:	4a0b      	ldr	r2, [pc, #44]	@ (800480c <Run_all_tasks+0x98>)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	4413      	add	r3, r2
 80047e6:	330d      	adds	r3, #13
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d102      	bne.n	80047f4 <Run_all_tasks+0x80>
					Remove_task(i);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f810 	bl	8004814 <Remove_task>
	for(int i=0; i<max_tasks; i++){
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3301      	adds	r3, #1
 80047f8:	607b      	str	r3, [r7, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b09      	cmp	r3, #9
 80047fe:	ddbf      	ble.n	8004780 <Run_all_tasks+0xc>
				}
			}
		}
	}
}
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	200005a8 	.word	0x200005a8
 8004810:	20000590 	.word	0x20000590

08004814 <Remove_task>:

void Remove_task(int task_id){
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
	if(task_id>=0 && task_id<max_tasks){
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	db24      	blt.n	800486c <Remove_task+0x58>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b09      	cmp	r3, #9
 8004826:	dc21      	bgt.n	800486c <Remove_task+0x58>
		timer[task_id].enable = 0;
 8004828:	4a13      	ldr	r2, [pc, #76]	@ (8004878 <Remove_task+0x64>)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	011b      	lsls	r3, r3, #4
 800482e:	4413      	add	r3, r2
 8004830:	330c      	adds	r3, #12
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]
		timer[task_id].last_time_ms = 0;
 8004836:	4a10      	ldr	r2, [pc, #64]	@ (8004878 <Remove_task+0x64>)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	4413      	add	r3, r2
 800483e:	3304      	adds	r3, #4
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
		timer[task_id].one_time_execute = 0;
 8004844:	4a0c      	ldr	r2, [pc, #48]	@ (8004878 <Remove_task+0x64>)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	011b      	lsls	r3, r3, #4
 800484a:	4413      	add	r3, r2
 800484c:	330d      	adds	r3, #13
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]
		timer[task_id].period_ms = 0;
 8004852:	4a09      	ldr	r2, [pc, #36]	@ (8004878 <Remove_task+0x64>)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	4413      	add	r3, r2
 800485a:	2200      	movs	r2, #0
 800485c:	601a      	str	r2, [r3, #0]
		timer[task_id].task_fn = 0;
 800485e:	4a06      	ldr	r2, [pc, #24]	@ (8004878 <Remove_task+0x64>)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	4413      	add	r3, r2
 8004866:	3308      	adds	r3, #8
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
	}
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	200005a8 	.word	0x200005a8

0800487c <uart_init>:
#include <stdarg.h>
#include"extern_file_declarations.h"
#include"can.h"
#define UART_PRINTF_BUFFER_SIZE 100
extern uint32_t get_APB1_freq(void) ;
STATUS uart_init(uint32_t Baud_Rate){
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
	 // Enable clocks
	    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;   // GPIOA
 8004884:	4b2d      	ldr	r3, [pc, #180]	@ (800493c <uart_init+0xc0>)
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	4a2c      	ldr	r2, [pc, #176]	@ (800493c <uart_init+0xc0>)
 800488a:	f043 0304 	orr.w	r3, r3, #4
 800488e:	6193      	str	r3, [r2, #24]
	    RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1
 8004890:	4b2a      	ldr	r3, [pc, #168]	@ (800493c <uart_init+0xc0>)
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	4a29      	ldr	r2, [pc, #164]	@ (800493c <uart_init+0xc0>)
 8004896:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800489a:	6193      	str	r3, [r2, #24]
	    RCC->AHBENR |= RCC_AHBENR_DMA1EN; // DMA1
 800489c:	4b27      	ldr	r3, [pc, #156]	@ (800493c <uart_init+0xc0>)
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	4a26      	ldr	r2, [pc, #152]	@ (800493c <uart_init+0xc0>)
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	6153      	str	r3, [r2, #20]

	    // PA9 = TX (AF push-pull), PA10 = RX (input floating)
	    GPIOA->CRH &= ~((0xF << (4 * 1)) | (0xF << (4 * 2))); // clear CNF/MODE for PA9, PA10
 80048a8:	4b25      	ldr	r3, [pc, #148]	@ (8004940 <uart_init+0xc4>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4a24      	ldr	r2, [pc, #144]	@ (8004940 <uart_init+0xc4>)
 80048ae:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80048b2:	6053      	str	r3, [r2, #4]
	    GPIOA->CRH |=  (0xB << (4 * 1)); // PA9 = AF PP, 50 MHz
 80048b4:	4b22      	ldr	r3, [pc, #136]	@ (8004940 <uart_init+0xc4>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4a21      	ldr	r2, [pc, #132]	@ (8004940 <uart_init+0xc4>)
 80048ba:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80048be:	6053      	str	r3, [r2, #4]
	    GPIOA->CRH |=  (0x4 << (4 * 2)); // PA10 = input floating
 80048c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004940 <uart_init+0xc4>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004940 <uart_init+0xc4>)
 80048c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80048ca:	6053      	str	r3, [r2, #4]
	    // Reset USART1
	    USART1->CR1 = 0;
 80048cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004944 <uart_init+0xc8>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	60da      	str	r2, [r3, #12]
	    // Calculate baudrate divisor
	    uint32_t pclk2 = get_APB2_freq();
 80048d2:	f7ff fe9f 	bl	8004614 <get_APB2_freq>
 80048d6:	60f8      	str	r0, [r7, #12]
	    if (pclk2 == 0 || Baud_Rate == 0) {
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <uart_init+0x68>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <uart_init+0x6c>
	        return RY_NOT_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	e024      	b.n	8004932 <uart_init+0xb6>
	    }
	    uint32_t usartdiv = (pclk2 + (Baud_Rate/2)) / Baud_Rate; // nearest
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	085a      	lsrs	r2, r3, #1
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	441a      	add	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f6:	60bb      	str	r3, [r7, #8]
	    USART1->BRR = usartdiv;
 80048f8:	4a12      	ldr	r2, [pc, #72]	@ (8004944 <uart_init+0xc8>)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6093      	str	r3, [r2, #8]
	    // Enable USART, TX, RX
	    USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 80048fe:	4b11      	ldr	r3, [pc, #68]	@ (8004944 <uart_init+0xc8>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	4a10      	ldr	r2, [pc, #64]	@ (8004944 <uart_init+0xc8>)
 8004904:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004908:	f043 030c 	orr.w	r3, r3, #12
 800490c:	60d3      	str	r3, [r2, #12]
	    // 4. Configure DMA1 Channel4 for USART1_TX
	       DMA1_Channel4->CCR = 0;            // Disable channel
 800490e:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <uart_init+0xcc>)
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
	       DMA1_Channel4->CPAR = (uint32_t)&USART1->DR; // Peripheral address
 8004914:	4b0c      	ldr	r3, [pc, #48]	@ (8004948 <uart_init+0xcc>)
 8004916:	4a0d      	ldr	r2, [pc, #52]	@ (800494c <uart_init+0xd0>)
 8004918:	609a      	str	r2, [r3, #8]
	       DMA1_Channel4->CCR = DMA_CCR_DIR | DMA_CCR_MINC; // memory-to-periph, memory increment
 800491a:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <uart_init+0xcc>)
 800491c:	2290      	movs	r2, #144	@ 0x90
 800491e:	601a      	str	r2, [r3, #0]
	    // Verify configuration
	    if (!(USART1->CR1 & USART_CR1_UE)) {
 8004920:	4b08      	ldr	r3, [pc, #32]	@ (8004944 <uart_init+0xc8>)
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <uart_init+0xb4>
	        return RY_NOT_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	e000      	b.n	8004932 <uart_init+0xb6>
	    }
	    return RY_OK;
 8004930:	2301      	movs	r3, #1
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40021000 	.word	0x40021000
 8004940:	40010800 	.word	0x40010800
 8004944:	40013800 	.word	0x40013800
 8004948:	40020044 	.word	0x40020044
 800494c:	40013804 	.word	0x40013804

08004950 <uart3_Init>:
STATUS uart3_Init(uint32_t baudrate) {
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
    // 1. Enable clocks for GPIOB and USART3
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;   // Enable GPIOB clock
 8004958:	4b23      	ldr	r3, [pc, #140]	@ (80049e8 <uart3_Init+0x98>)
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	4a22      	ldr	r2, [pc, #136]	@ (80049e8 <uart3_Init+0x98>)
 800495e:	f043 0308 	orr.w	r3, r3, #8
 8004962:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_USART3EN; // Enable USART3 clock
 8004964:	4b20      	ldr	r3, [pc, #128]	@ (80049e8 <uart3_Init+0x98>)
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	4a1f      	ldr	r2, [pc, #124]	@ (80049e8 <uart3_Init+0x98>)
 800496a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800496e:	61d3      	str	r3, [r2, #28]

    // 2. Configure PB10 as Alternate Function Push-Pull (TX), 50 MHz
    GPIOB->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
 8004970:	4b1e      	ldr	r3, [pc, #120]	@ (80049ec <uart3_Init+0x9c>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a1d      	ldr	r2, [pc, #116]	@ (80049ec <uart3_Init+0x9c>)
 8004976:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800497a:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x03 << GPIO_CRH_MODE10_Pos); // Output mode, max speed 50 MHz
 800497c:	4b1b      	ldr	r3, [pc, #108]	@ (80049ec <uart3_Init+0x9c>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4a1a      	ldr	r2, [pc, #104]	@ (80049ec <uart3_Init+0x9c>)
 8004982:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004986:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x02 << GPIO_CRH_CNF10_Pos);  // AF push-pull
 8004988:	4b18      	ldr	r3, [pc, #96]	@ (80049ec <uart3_Init+0x9c>)
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a17      	ldr	r2, [pc, #92]	@ (80049ec <uart3_Init+0x9c>)
 800498e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004992:	6053      	str	r3, [r2, #4]

    // 3. Configure PB11 as Input Floating (RX)
    GPIOB->CRH &= ~(GPIO_CRH_MODE11 | GPIO_CRH_CNF11);
 8004994:	4b15      	ldr	r3, [pc, #84]	@ (80049ec <uart3_Init+0x9c>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4a14      	ldr	r2, [pc, #80]	@ (80049ec <uart3_Init+0x9c>)
 800499a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800499e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x01 << GPIO_CRH_CNF11_Pos);  // Floating input
 80049a0:	4b12      	ldr	r3, [pc, #72]	@ (80049ec <uart3_Init+0x9c>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	4a11      	ldr	r2, [pc, #68]	@ (80049ec <uart3_Init+0x9c>)
 80049a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049aa:	6053      	str	r3, [r2, #4]

    // 4. USART configuration
    USART3->CR1 = 0;  // Reset control register
 80049ac:	4b10      	ldr	r3, [pc, #64]	@ (80049f0 <uart3_Init+0xa0>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	60da      	str	r2, [r3, #12]

    // Baud rate = Fclk / (16 * USARTDIV)
    // Example: PCLK1 = 36 MHz, baud = 115200
    // USARTDIV = 36MHz / (16 * 115200) ≈ 19.53
    // DIV_Mantissa = 19, DIV_Fraction = 0.53*16 ≈ 8
    uint32_t pclk = 36000000; // APB1 clock is 36 MHz (default with 72 MHz SYSCLK)
 80049b2:	4b10      	ldr	r3, [pc, #64]	@ (80049f4 <uart3_Init+0xa4>)
 80049b4:	60fb      	str	r3, [r7, #12]
    uint32_t usartdiv = (pclk + (baudrate/2)) / baudrate; // scaled
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	085a      	lsrs	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	441a      	add	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c4:	60bb      	str	r3, [r7, #8]
    USART3->BRR = usartdiv;
 80049c6:	4a0a      	ldr	r2, [pc, #40]	@ (80049f0 <uart3_Init+0xa0>)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	6093      	str	r3, [r2, #8]

    // Enable USART, TX, RX
    USART3->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80049cc:	4b08      	ldr	r3, [pc, #32]	@ (80049f0 <uart3_Init+0xa0>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a07      	ldr	r2, [pc, #28]	@ (80049f0 <uart3_Init+0xa0>)
 80049d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80049d6:	f043 030c 	orr.w	r3, r3, #12
 80049da:	60d3      	str	r3, [r2, #12]
    return RY_OK;
 80049dc:	2301      	movs	r3, #1
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40010c00 	.word	0x40010c00
 80049f0:	40004800 	.word	0x40004800
 80049f4:	02255100 	.word	0x02255100

080049f8 <uart_send1>:
{
    while (*str) {
    	uart_print(*str++);
    }
}
void uart_send1(const uint8_t *buf, size_t len) {
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < len; ++i) {
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	e00f      	b.n	8004a28 <uart_send1+0x30>
        while (!(USART1->SR & (1U << 7))) { /* busy wait */ } // TXE bit
 8004a08:	bf00      	nop
 8004a0a:	4b10      	ldr	r3, [pc, #64]	@ (8004a4c <uart_send1+0x54>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f9      	beq.n	8004a0a <uart_send1+0x12>
        USART1->DR = (uint8_t)buf[i];
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	781a      	ldrb	r2, [r3, #0]
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a4c <uart_send1+0x54>)
 8004a20:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < len; ++i) {
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3301      	adds	r3, #1
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d3eb      	bcc.n	8004a08 <uart_send1+0x10>
    }
    while (!(USART1->SR & (1U << 6))) { /* wait TC */ } // TC bit
 8004a30:	bf00      	nop
 8004a32:	4b06      	ldr	r3, [pc, #24]	@ (8004a4c <uart_send1+0x54>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f9      	beq.n	8004a32 <uart_send1+0x3a>
}
 8004a3e:	bf00      	nop
 8004a40:	bf00      	nop
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40013800 	.word	0x40013800

08004a50 <uart_send>:
void uart_send(const uint8_t *buf, size_t len) {
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < len; ++i) {
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	e00f      	b.n	8004a80 <uart_send+0x30>
        // Wait until TXE (transmit data register empty)
        while (!(USART3->SR & (1U << 7))) { /* busy wait */ } // TXE bit
 8004a60:	bf00      	nop
 8004a62:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <uart_send+0x54>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f9      	beq.n	8004a62 <uart_send+0x12>
        // Write data (DR is 8-bit)
        USART3->DR = (uint8_t)buf[i];
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	781a      	ldrb	r2, [r3, #0]
 8004a76:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa4 <uart_send+0x54>)
 8004a78:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < len; ++i) {
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d3eb      	bcc.n	8004a60 <uart_send+0x10>
    }
    // Optionally wait for TC (transmission complete) if you need to ensure fully shifted out:
    while (!(USART3->SR & (1U << 6))) { /* wait TC */ } // TC bit
 8004a88:	bf00      	nop
 8004a8a:	4b06      	ldr	r3, [pc, #24]	@ (8004aa4 <uart_send+0x54>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0f9      	beq.n	8004a8a <uart_send+0x3a>
}
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bc80      	pop	{r7}
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40004800 	.word	0x40004800

08004aa8 <send_id_data_only_over_uart>:
void send_id_data_only_over_uart(const can_frame_t *f) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
    uint8_t buf[13];
    while (!(USART1->SR & (1U << 7))) { /* busy wait */ } // TXE bit
 8004ab0:	bf00      	nop
 8004ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8004b2c <send_id_data_only_over_uart+0x84>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f9      	beq.n	8004ab2 <send_id_data_only_over_uart+0xa>
    USART1->DR = (uint8_t)0XAA;
 8004abe:	4b1b      	ldr	r3, [pc, #108]	@ (8004b2c <send_id_data_only_over_uart+0x84>)
 8004ac0:	22aa      	movs	r2, #170	@ 0xaa
 8004ac2:	605a      	str	r2, [r3, #4]
    buf[3] = (uint8_t)(f->id & 0xFF);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	73fb      	strb	r3, [r7, #15]
    buf[2] = (uint8_t)((f->id >> 8) & 0xFF);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	0a1b      	lsrs	r3, r3, #8
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	73bb      	strb	r3, [r7, #14]
    buf[1] = (uint8_t)((f->id >> 16) & 0xFF);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	0c1b      	lsrs	r3, r3, #16
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	737b      	strb	r3, [r7, #13]
    buf[0] = (uint8_t)((f->id >> 24) & 0xFF);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	0e1b      	lsrs	r3, r3, #24
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	733b      	strb	r3, [r7, #12]
    buf[4] = f->dlc;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	799b      	ldrb	r3, [r3, #6]
 8004aee:	743b      	strb	r3, [r7, #16]
    /* copy 8 data bytes (if dlc<8 you still send 8 bytes - zeros ok) */
    for (int i = 0; i < 8; ++i) buf[5 + i] = f->data[i];
 8004af0:	2300      	movs	r3, #0
 8004af2:	61fb      	str	r3, [r7, #28]
 8004af4:	e00d      	b.n	8004b12 <send_id_data_only_over_uart+0x6a>
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3305      	adds	r3, #5
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	440a      	add	r2, r1
 8004b00:	3207      	adds	r2, #7
 8004b02:	7812      	ldrb	r2, [r2, #0]
 8004b04:	3320      	adds	r3, #32
 8004b06:	443b      	add	r3, r7
 8004b08:	f803 2c14 	strb.w	r2, [r3, #-20]
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	61fb      	str	r3, [r7, #28]
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	2b07      	cmp	r3, #7
 8004b16:	ddee      	ble.n	8004af6 <send_id_data_only_over_uart+0x4e>
    uart_send1(buf, sizeof(buf)/sizeof(buf[0])); // 13 bytes
 8004b18:	f107 030c 	add.w	r3, r7, #12
 8004b1c:	210d      	movs	r1, #13
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff ff6a 	bl	80049f8 <uart_send1>
}
 8004b24:	bf00      	nop
 8004b26:	3720      	adds	r7, #32
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40013800 	.word	0x40013800

08004b30 <uart_printf>:
void uart_printf(const char *format, ...)
{
 8004b30:	b40f      	push	{r0, r1, r2, r3}
 8004b32:	b580      	push	{r7, lr}
 8004b34:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004b38:	af00      	add	r7, sp, #0
    uint8_t buf[500];
    va_list ap;
    va_start(ap, format);
 8004b3a:	f507 7203 	add.w	r2, r7, #524	@ 0x20c
 8004b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b46:	601a      	str	r2, [r3, #0]
    int n = vsnprintf(buf, sizeof(buf), format, ap);
 8004b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b50:	f107 0008 	add.w	r0, r7, #8
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8004b5a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004b5e:	f003 f80f 	bl	8007b80 <vsniprintf>
 8004b62:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
    va_end(ap);
    if (n > 0) {
 8004b66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	dd10      	ble.n	8004b90 <uart_printf+0x60>
        if ((size_t)n > sizeof(buf)) n = sizeof(buf);
 8004b6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004b72:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004b76:	d903      	bls.n	8004b80 <uart_printf+0x50>
 8004b78:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004b7c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
        uart_send(buf, (size_t)n);
 8004b80:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8004b84:	f107 0308 	add.w	r3, r7, #8
 8004b88:	4611      	mov	r1, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff ff60 	bl	8004a50 <uart_send>
    }
}
 8004b90:	bf00      	nop
 8004b92:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8004b96:	46bd      	mov	sp, r7
 8004b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b9c:	b004      	add	sp, #16
 8004b9e:	4770      	bx	lr

08004ba0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004ba0:	f7ff fd5e 	bl	8004660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ba4:	480b      	ldr	r0, [pc, #44]	@ (8004bd4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004ba6:	490c      	ldr	r1, [pc, #48]	@ (8004bd8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004ba8:	4a0c      	ldr	r2, [pc, #48]	@ (8004bdc <LoopFillZerobss+0x16>)
  movs r3, #0
 8004baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bac:	e002      	b.n	8004bb4 <LoopCopyDataInit>

08004bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bb2:	3304      	adds	r3, #4

08004bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bb8:	d3f9      	bcc.n	8004bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bba:	4a09      	ldr	r2, [pc, #36]	@ (8004be0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004bbc:	4c09      	ldr	r4, [pc, #36]	@ (8004be4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bc0:	e001      	b.n	8004bc6 <LoopFillZerobss>

08004bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bc4:	3204      	adds	r2, #4

08004bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004bc8:	d3fb      	bcc.n	8004bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004bca:	f003 f83f 	bl	8007c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004bce:	f7fe fc1b 	bl	8003408 <main>
  bx lr
 8004bd2:	4770      	bx	lr
  ldr r0, =_sdata
 8004bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bd8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8004bdc:	0800abc4 	.word	0x0800abc4
  ldr r2, =_sbss
 8004be0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8004be4:	20000798 	.word	0x20000798

08004be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004be8:	e7fe      	b.n	8004be8 <ADC1_2_IRQHandler>
	...

08004bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bf0:	4b08      	ldr	r3, [pc, #32]	@ (8004c14 <HAL_Init+0x28>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a07      	ldr	r2, [pc, #28]	@ (8004c14 <HAL_Init+0x28>)
 8004bf6:	f043 0310 	orr.w	r3, r3, #16
 8004bfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bfc:	2003      	movs	r0, #3
 8004bfe:	f000 f919 	bl	8004e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c02:	200f      	movs	r0, #15
 8004c04:	f000 f808 	bl	8004c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c08:	f7ff fa40 	bl	800408c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40022000 	.word	0x40022000

08004c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c20:	4b12      	ldr	r3, [pc, #72]	@ (8004c6c <HAL_InitTick+0x54>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	4b12      	ldr	r3, [pc, #72]	@ (8004c70 <HAL_InitTick+0x58>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f931 	bl	8004e9e <HAL_SYSTICK_Config>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e00e      	b.n	8004c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b0f      	cmp	r3, #15
 8004c4a:	d80a      	bhi.n	8004c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	6879      	ldr	r1, [r7, #4]
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	f000 f8f9 	bl	8004e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c58:	4a06      	ldr	r2, [pc, #24]	@ (8004c74 <HAL_InitTick+0x5c>)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e000      	b.n	8004c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000024 	.word	0x20000024
 8004c70:	2000002c 	.word	0x2000002c
 8004c74:	20000028 	.word	0x20000028

08004c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c7c:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <HAL_IncTick+0x1c>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	4b05      	ldr	r3, [pc, #20]	@ (8004c98 <HAL_IncTick+0x20>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4413      	add	r3, r2
 8004c88:	4a03      	ldr	r2, [pc, #12]	@ (8004c98 <HAL_IncTick+0x20>)
 8004c8a:	6013      	str	r3, [r2, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr
 8004c94:	2000002c 	.word	0x2000002c
 8004c98:	20000648 	.word	0x20000648

08004c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cb8:	4013      	ands	r3, r2
 8004cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cce:	4a04      	ldr	r2, [pc, #16]	@ (8004ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	60d3      	str	r3, [r2, #12]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	e000ed00 	.word	0xe000ed00

08004ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ce8:	4b04      	ldr	r3, [pc, #16]	@ (8004cfc <__NVIC_GetPriorityGrouping+0x18>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	0a1b      	lsrs	r3, r3, #8
 8004cee:	f003 0307 	and.w	r3, r3, #7
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bc80      	pop	{r7}
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	e000ed00 	.word	0xe000ed00

08004d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	4603      	mov	r3, r0
 8004d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	db0b      	blt.n	8004d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	f003 021f 	and.w	r2, r3, #31
 8004d18:	4906      	ldr	r1, [pc, #24]	@ (8004d34 <__NVIC_EnableIRQ+0x34>)
 8004d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	2001      	movs	r0, #1
 8004d22:	fa00 f202 	lsl.w	r2, r0, r2
 8004d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr
 8004d34:	e000e100 	.word	0xe000e100

08004d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	6039      	str	r1, [r7, #0]
 8004d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	db0a      	blt.n	8004d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	490c      	ldr	r1, [pc, #48]	@ (8004d84 <__NVIC_SetPriority+0x4c>)
 8004d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d56:	0112      	lsls	r2, r2, #4
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d60:	e00a      	b.n	8004d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	4908      	ldr	r1, [pc, #32]	@ (8004d88 <__NVIC_SetPriority+0x50>)
 8004d68:	79fb      	ldrb	r3, [r7, #7]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	3b04      	subs	r3, #4
 8004d70:	0112      	lsls	r2, r2, #4
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	440b      	add	r3, r1
 8004d76:	761a      	strb	r2, [r3, #24]
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	e000e100 	.word	0xe000e100
 8004d88:	e000ed00 	.word	0xe000ed00

08004d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b089      	sub	sp, #36	@ 0x24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f1c3 0307 	rsb	r3, r3, #7
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	bf28      	it	cs
 8004daa:	2304      	movcs	r3, #4
 8004dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	3304      	adds	r3, #4
 8004db2:	2b06      	cmp	r3, #6
 8004db4:	d902      	bls.n	8004dbc <NVIC_EncodePriority+0x30>
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3b03      	subs	r3, #3
 8004dba:	e000      	b.n	8004dbe <NVIC_EncodePriority+0x32>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dca:	43da      	mvns	r2, r3
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	401a      	ands	r2, r3
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	fa01 f303 	lsl.w	r3, r1, r3
 8004dde:	43d9      	mvns	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004de4:	4313      	orrs	r3, r2
         );
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3724      	adds	r7, #36	@ 0x24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr

08004df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e00:	d301      	bcc.n	8004e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e02:	2301      	movs	r3, #1
 8004e04:	e00f      	b.n	8004e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e06:	4a0a      	ldr	r2, [pc, #40]	@ (8004e30 <SysTick_Config+0x40>)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e0e:	210f      	movs	r1, #15
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295
 8004e14:	f7ff ff90 	bl	8004d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e18:	4b05      	ldr	r3, [pc, #20]	@ (8004e30 <SysTick_Config+0x40>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e1e:	4b04      	ldr	r3, [pc, #16]	@ (8004e30 <SysTick_Config+0x40>)
 8004e20:	2207      	movs	r2, #7
 8004e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	e000e010 	.word	0xe000e010

08004e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7ff ff2d 	bl	8004c9c <__NVIC_SetPriorityGrouping>
}
 8004e42:	bf00      	nop
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b086      	sub	sp, #24
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	4603      	mov	r3, r0
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	607a      	str	r2, [r7, #4]
 8004e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e5c:	f7ff ff42 	bl	8004ce4 <__NVIC_GetPriorityGrouping>
 8004e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	6978      	ldr	r0, [r7, #20]
 8004e68:	f7ff ff90 	bl	8004d8c <NVIC_EncodePriority>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e72:	4611      	mov	r1, r2
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff ff5f 	bl	8004d38 <__NVIC_SetPriority>
}
 8004e7a:	bf00      	nop
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	4603      	mov	r3, r0
 8004e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff ff35 	bl	8004d00 <__NVIC_EnableIRQ>
}
 8004e96:	bf00      	nop
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff ffa2 	bl	8004df0 <SysTick_Config>
 8004eac:	4603      	mov	r3, r0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
	...

08004eb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d005      	beq.n	8004edc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
 8004eda:	e051      	b.n	8004f80 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 020e 	bic.w	r2, r2, #14
 8004eea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0201 	bic.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a22      	ldr	r2, [pc, #136]	@ (8004f8c <HAL_DMA_Abort_IT+0xd4>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d029      	beq.n	8004f5a <HAL_DMA_Abort_IT+0xa2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a21      	ldr	r2, [pc, #132]	@ (8004f90 <HAL_DMA_Abort_IT+0xd8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d022      	beq.n	8004f56 <HAL_DMA_Abort_IT+0x9e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a1f      	ldr	r2, [pc, #124]	@ (8004f94 <HAL_DMA_Abort_IT+0xdc>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d01a      	beq.n	8004f50 <HAL_DMA_Abort_IT+0x98>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8004f98 <HAL_DMA_Abort_IT+0xe0>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d012      	beq.n	8004f4a <HAL_DMA_Abort_IT+0x92>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a1c      	ldr	r2, [pc, #112]	@ (8004f9c <HAL_DMA_Abort_IT+0xe4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00a      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x8c>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1b      	ldr	r2, [pc, #108]	@ (8004fa0 <HAL_DMA_Abort_IT+0xe8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d102      	bne.n	8004f3e <HAL_DMA_Abort_IT+0x86>
 8004f38:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004f3c:	e00e      	b.n	8004f5c <HAL_DMA_Abort_IT+0xa4>
 8004f3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f42:	e00b      	b.n	8004f5c <HAL_DMA_Abort_IT+0xa4>
 8004f44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004f48:	e008      	b.n	8004f5c <HAL_DMA_Abort_IT+0xa4>
 8004f4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f4e:	e005      	b.n	8004f5c <HAL_DMA_Abort_IT+0xa4>
 8004f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f54:	e002      	b.n	8004f5c <HAL_DMA_Abort_IT+0xa4>
 8004f56:	2310      	movs	r3, #16
 8004f58:	e000      	b.n	8004f5c <HAL_DMA_Abort_IT+0xa4>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	4a11      	ldr	r2, [pc, #68]	@ (8004fa4 <HAL_DMA_Abort_IT+0xec>)
 8004f5e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	4798      	blx	r3
    } 
  }
  return status;
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40020008 	.word	0x40020008
 8004f90:	4002001c 	.word	0x4002001c
 8004f94:	40020030 	.word	0x40020030
 8004f98:	40020044 	.word	0x40020044
 8004f9c:	40020058 	.word	0x40020058
 8004fa0:	4002006c 	.word	0x4002006c
 8004fa4:	40020000 	.word	0x40020000

08004fa8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004fb6:	b2db      	uxtb	r3, r3
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bc80      	pop	{r7}
 8004fc0:	4770      	bx	lr
	...

08004fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b08b      	sub	sp, #44	@ 0x2c
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fd6:	e169      	b.n	80052ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004fd8:	2201      	movs	r2, #1
 8004fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69fa      	ldr	r2, [r7, #28]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	f040 8158 	bne.w	80052a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	4a9a      	ldr	r2, [pc, #616]	@ (8005264 <HAL_GPIO_Init+0x2a0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d05e      	beq.n	80050be <HAL_GPIO_Init+0xfa>
 8005000:	4a98      	ldr	r2, [pc, #608]	@ (8005264 <HAL_GPIO_Init+0x2a0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d875      	bhi.n	80050f2 <HAL_GPIO_Init+0x12e>
 8005006:	4a98      	ldr	r2, [pc, #608]	@ (8005268 <HAL_GPIO_Init+0x2a4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d058      	beq.n	80050be <HAL_GPIO_Init+0xfa>
 800500c:	4a96      	ldr	r2, [pc, #600]	@ (8005268 <HAL_GPIO_Init+0x2a4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d86f      	bhi.n	80050f2 <HAL_GPIO_Init+0x12e>
 8005012:	4a96      	ldr	r2, [pc, #600]	@ (800526c <HAL_GPIO_Init+0x2a8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d052      	beq.n	80050be <HAL_GPIO_Init+0xfa>
 8005018:	4a94      	ldr	r2, [pc, #592]	@ (800526c <HAL_GPIO_Init+0x2a8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d869      	bhi.n	80050f2 <HAL_GPIO_Init+0x12e>
 800501e:	4a94      	ldr	r2, [pc, #592]	@ (8005270 <HAL_GPIO_Init+0x2ac>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d04c      	beq.n	80050be <HAL_GPIO_Init+0xfa>
 8005024:	4a92      	ldr	r2, [pc, #584]	@ (8005270 <HAL_GPIO_Init+0x2ac>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d863      	bhi.n	80050f2 <HAL_GPIO_Init+0x12e>
 800502a:	4a92      	ldr	r2, [pc, #584]	@ (8005274 <HAL_GPIO_Init+0x2b0>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d046      	beq.n	80050be <HAL_GPIO_Init+0xfa>
 8005030:	4a90      	ldr	r2, [pc, #576]	@ (8005274 <HAL_GPIO_Init+0x2b0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d85d      	bhi.n	80050f2 <HAL_GPIO_Init+0x12e>
 8005036:	2b12      	cmp	r3, #18
 8005038:	d82a      	bhi.n	8005090 <HAL_GPIO_Init+0xcc>
 800503a:	2b12      	cmp	r3, #18
 800503c:	d859      	bhi.n	80050f2 <HAL_GPIO_Init+0x12e>
 800503e:	a201      	add	r2, pc, #4	@ (adr r2, 8005044 <HAL_GPIO_Init+0x80>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	080050bf 	.word	0x080050bf
 8005048:	08005099 	.word	0x08005099
 800504c:	080050ab 	.word	0x080050ab
 8005050:	080050ed 	.word	0x080050ed
 8005054:	080050f3 	.word	0x080050f3
 8005058:	080050f3 	.word	0x080050f3
 800505c:	080050f3 	.word	0x080050f3
 8005060:	080050f3 	.word	0x080050f3
 8005064:	080050f3 	.word	0x080050f3
 8005068:	080050f3 	.word	0x080050f3
 800506c:	080050f3 	.word	0x080050f3
 8005070:	080050f3 	.word	0x080050f3
 8005074:	080050f3 	.word	0x080050f3
 8005078:	080050f3 	.word	0x080050f3
 800507c:	080050f3 	.word	0x080050f3
 8005080:	080050f3 	.word	0x080050f3
 8005084:	080050f3 	.word	0x080050f3
 8005088:	080050a1 	.word	0x080050a1
 800508c:	080050b5 	.word	0x080050b5
 8005090:	4a79      	ldr	r2, [pc, #484]	@ (8005278 <HAL_GPIO_Init+0x2b4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005096:	e02c      	b.n	80050f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	623b      	str	r3, [r7, #32]
          break;
 800509e:	e029      	b.n	80050f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	3304      	adds	r3, #4
 80050a6:	623b      	str	r3, [r7, #32]
          break;
 80050a8:	e024      	b.n	80050f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	3308      	adds	r3, #8
 80050b0:	623b      	str	r3, [r7, #32]
          break;
 80050b2:	e01f      	b.n	80050f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	330c      	adds	r3, #12
 80050ba:	623b      	str	r3, [r7, #32]
          break;
 80050bc:	e01a      	b.n	80050f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d102      	bne.n	80050cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80050c6:	2304      	movs	r3, #4
 80050c8:	623b      	str	r3, [r7, #32]
          break;
 80050ca:	e013      	b.n	80050f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d105      	bne.n	80050e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80050d4:	2308      	movs	r3, #8
 80050d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	611a      	str	r2, [r3, #16]
          break;
 80050de:	e009      	b.n	80050f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80050e0:	2308      	movs	r3, #8
 80050e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	615a      	str	r2, [r3, #20]
          break;
 80050ea:	e003      	b.n	80050f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80050ec:	2300      	movs	r3, #0
 80050ee:	623b      	str	r3, [r7, #32]
          break;
 80050f0:	e000      	b.n	80050f4 <HAL_GPIO_Init+0x130>
          break;
 80050f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	2bff      	cmp	r3, #255	@ 0xff
 80050f8:	d801      	bhi.n	80050fe <HAL_GPIO_Init+0x13a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	e001      	b.n	8005102 <HAL_GPIO_Init+0x13e>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3304      	adds	r3, #4
 8005102:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	2bff      	cmp	r3, #255	@ 0xff
 8005108:	d802      	bhi.n	8005110 <HAL_GPIO_Init+0x14c>
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	e002      	b.n	8005116 <HAL_GPIO_Init+0x152>
 8005110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005112:	3b08      	subs	r3, #8
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	210f      	movs	r1, #15
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	fa01 f303 	lsl.w	r3, r1, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	401a      	ands	r2, r3
 8005128:	6a39      	ldr	r1, [r7, #32]
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	fa01 f303 	lsl.w	r3, r1, r3
 8005130:	431a      	orrs	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 80b1 	beq.w	80052a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005144:	4b4d      	ldr	r3, [pc, #308]	@ (800527c <HAL_GPIO_Init+0x2b8>)
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	4a4c      	ldr	r2, [pc, #304]	@ (800527c <HAL_GPIO_Init+0x2b8>)
 800514a:	f043 0301 	orr.w	r3, r3, #1
 800514e:	6193      	str	r3, [r2, #24]
 8005150:	4b4a      	ldr	r3, [pc, #296]	@ (800527c <HAL_GPIO_Init+0x2b8>)
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	60bb      	str	r3, [r7, #8]
 800515a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800515c:	4a48      	ldr	r2, [pc, #288]	@ (8005280 <HAL_GPIO_Init+0x2bc>)
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	089b      	lsrs	r3, r3, #2
 8005162:	3302      	adds	r3, #2
 8005164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005168:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	220f      	movs	r2, #15
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	43db      	mvns	r3, r3
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4013      	ands	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a40      	ldr	r2, [pc, #256]	@ (8005284 <HAL_GPIO_Init+0x2c0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d013      	beq.n	80051b0 <HAL_GPIO_Init+0x1ec>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a3f      	ldr	r2, [pc, #252]	@ (8005288 <HAL_GPIO_Init+0x2c4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d00d      	beq.n	80051ac <HAL_GPIO_Init+0x1e8>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a3e      	ldr	r2, [pc, #248]	@ (800528c <HAL_GPIO_Init+0x2c8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d007      	beq.n	80051a8 <HAL_GPIO_Init+0x1e4>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a3d      	ldr	r2, [pc, #244]	@ (8005290 <HAL_GPIO_Init+0x2cc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d101      	bne.n	80051a4 <HAL_GPIO_Init+0x1e0>
 80051a0:	2303      	movs	r3, #3
 80051a2:	e006      	b.n	80051b2 <HAL_GPIO_Init+0x1ee>
 80051a4:	2304      	movs	r3, #4
 80051a6:	e004      	b.n	80051b2 <HAL_GPIO_Init+0x1ee>
 80051a8:	2302      	movs	r3, #2
 80051aa:	e002      	b.n	80051b2 <HAL_GPIO_Init+0x1ee>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <HAL_GPIO_Init+0x1ee>
 80051b0:	2300      	movs	r3, #0
 80051b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b4:	f002 0203 	and.w	r2, r2, #3
 80051b8:	0092      	lsls	r2, r2, #2
 80051ba:	4093      	lsls	r3, r2
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80051c2:	492f      	ldr	r1, [pc, #188]	@ (8005280 <HAL_GPIO_Init+0x2bc>)
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	089b      	lsrs	r3, r3, #2
 80051c8:	3302      	adds	r3, #2
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d006      	beq.n	80051ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80051dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005294 <HAL_GPIO_Init+0x2d0>)
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	492c      	ldr	r1, [pc, #176]	@ (8005294 <HAL_GPIO_Init+0x2d0>)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	608b      	str	r3, [r1, #8]
 80051e8:	e006      	b.n	80051f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80051ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005294 <HAL_GPIO_Init+0x2d0>)
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	43db      	mvns	r3, r3
 80051f2:	4928      	ldr	r1, [pc, #160]	@ (8005294 <HAL_GPIO_Init+0x2d0>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d006      	beq.n	8005212 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005204:	4b23      	ldr	r3, [pc, #140]	@ (8005294 <HAL_GPIO_Init+0x2d0>)
 8005206:	68da      	ldr	r2, [r3, #12]
 8005208:	4922      	ldr	r1, [pc, #136]	@ (8005294 <HAL_GPIO_Init+0x2d0>)
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	4313      	orrs	r3, r2
 800520e:	60cb      	str	r3, [r1, #12]
 8005210:	e006      	b.n	8005220 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005212:	4b20      	ldr	r3, [pc, #128]	@ (8005294 <HAL_GPIO_Init+0x2d0>)
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	43db      	mvns	r3, r3
 800521a:	491e      	ldr	r1, [pc, #120]	@ (8005294 <HAL_GPIO_Init+0x2d0>)
 800521c:	4013      	ands	r3, r2
 800521e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d006      	beq.n	800523a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800522c:	4b19      	ldr	r3, [pc, #100]	@ (8005294 <HAL_GPIO_Init+0x2d0>)
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	4918      	ldr	r1, [pc, #96]	@ (8005294 <HAL_GPIO_Init+0x2d0>)
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	4313      	orrs	r3, r2
 8005236:	604b      	str	r3, [r1, #4]
 8005238:	e006      	b.n	8005248 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800523a:	4b16      	ldr	r3, [pc, #88]	@ (8005294 <HAL_GPIO_Init+0x2d0>)
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	43db      	mvns	r3, r3
 8005242:	4914      	ldr	r1, [pc, #80]	@ (8005294 <HAL_GPIO_Init+0x2d0>)
 8005244:	4013      	ands	r3, r2
 8005246:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d021      	beq.n	8005298 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005254:	4b0f      	ldr	r3, [pc, #60]	@ (8005294 <HAL_GPIO_Init+0x2d0>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	490e      	ldr	r1, [pc, #56]	@ (8005294 <HAL_GPIO_Init+0x2d0>)
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	4313      	orrs	r3, r2
 800525e:	600b      	str	r3, [r1, #0]
 8005260:	e021      	b.n	80052a6 <HAL_GPIO_Init+0x2e2>
 8005262:	bf00      	nop
 8005264:	10320000 	.word	0x10320000
 8005268:	10310000 	.word	0x10310000
 800526c:	10220000 	.word	0x10220000
 8005270:	10210000 	.word	0x10210000
 8005274:	10120000 	.word	0x10120000
 8005278:	10110000 	.word	0x10110000
 800527c:	40021000 	.word	0x40021000
 8005280:	40010000 	.word	0x40010000
 8005284:	40010800 	.word	0x40010800
 8005288:	40010c00 	.word	0x40010c00
 800528c:	40011000 	.word	0x40011000
 8005290:	40011400 	.word	0x40011400
 8005294:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005298:	4b0b      	ldr	r3, [pc, #44]	@ (80052c8 <HAL_GPIO_Init+0x304>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	43db      	mvns	r3, r3
 80052a0:	4909      	ldr	r1, [pc, #36]	@ (80052c8 <HAL_GPIO_Init+0x304>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a8:	3301      	adds	r3, #1
 80052aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b2:	fa22 f303 	lsr.w	r3, r2, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f47f ae8e 	bne.w	8004fd8 <HAL_GPIO_Init+0x14>
  }
}
 80052bc:	bf00      	nop
 80052be:	bf00      	nop
 80052c0:	372c      	adds	r7, #44	@ 0x2c
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr
 80052c8:	40010400 	.word	0x40010400

080052cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e12b      	b.n	8005536 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7fe fefc 	bl	80040f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2224      	movs	r2, #36	@ 0x24
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0201 	bic.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800531e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800532e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005330:	f001 fe84 	bl	800703c <HAL_RCC_GetPCLK1Freq>
 8005334:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4a81      	ldr	r2, [pc, #516]	@ (8005540 <HAL_I2C_Init+0x274>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d807      	bhi.n	8005350 <HAL_I2C_Init+0x84>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4a80      	ldr	r2, [pc, #512]	@ (8005544 <HAL_I2C_Init+0x278>)
 8005344:	4293      	cmp	r3, r2
 8005346:	bf94      	ite	ls
 8005348:	2301      	movls	r3, #1
 800534a:	2300      	movhi	r3, #0
 800534c:	b2db      	uxtb	r3, r3
 800534e:	e006      	b.n	800535e <HAL_I2C_Init+0x92>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4a7d      	ldr	r2, [pc, #500]	@ (8005548 <HAL_I2C_Init+0x27c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	bf94      	ite	ls
 8005358:	2301      	movls	r3, #1
 800535a:	2300      	movhi	r3, #0
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e0e7      	b.n	8005536 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4a78      	ldr	r2, [pc, #480]	@ (800554c <HAL_I2C_Init+0x280>)
 800536a:	fba2 2303 	umull	r2, r3, r2, r3
 800536e:	0c9b      	lsrs	r3, r3, #18
 8005370:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	4a6a      	ldr	r2, [pc, #424]	@ (8005540 <HAL_I2C_Init+0x274>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d802      	bhi.n	80053a0 <HAL_I2C_Init+0xd4>
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	3301      	adds	r3, #1
 800539e:	e009      	b.n	80053b4 <HAL_I2C_Init+0xe8>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80053a6:	fb02 f303 	mul.w	r3, r2, r3
 80053aa:	4a69      	ldr	r2, [pc, #420]	@ (8005550 <HAL_I2C_Init+0x284>)
 80053ac:	fba2 2303 	umull	r2, r3, r2, r3
 80053b0:	099b      	lsrs	r3, r3, #6
 80053b2:	3301      	adds	r3, #1
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	430b      	orrs	r3, r1
 80053ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80053c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	495c      	ldr	r1, [pc, #368]	@ (8005540 <HAL_I2C_Init+0x274>)
 80053d0:	428b      	cmp	r3, r1
 80053d2:	d819      	bhi.n	8005408 <HAL_I2C_Init+0x13c>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	1e59      	subs	r1, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	fbb1 f3f3 	udiv	r3, r1, r3
 80053e2:	1c59      	adds	r1, r3, #1
 80053e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80053e8:	400b      	ands	r3, r1
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <HAL_I2C_Init+0x138>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1e59      	subs	r1, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80053fc:	3301      	adds	r3, #1
 80053fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005402:	e051      	b.n	80054a8 <HAL_I2C_Init+0x1dc>
 8005404:	2304      	movs	r3, #4
 8005406:	e04f      	b.n	80054a8 <HAL_I2C_Init+0x1dc>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d111      	bne.n	8005434 <HAL_I2C_Init+0x168>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	1e58      	subs	r0, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6859      	ldr	r1, [r3, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	440b      	add	r3, r1
 800541e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005422:	3301      	adds	r3, #1
 8005424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005428:	2b00      	cmp	r3, #0
 800542a:	bf0c      	ite	eq
 800542c:	2301      	moveq	r3, #1
 800542e:	2300      	movne	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	e012      	b.n	800545a <HAL_I2C_Init+0x18e>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	1e58      	subs	r0, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6859      	ldr	r1, [r3, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	440b      	add	r3, r1
 8005442:	0099      	lsls	r1, r3, #2
 8005444:	440b      	add	r3, r1
 8005446:	fbb0 f3f3 	udiv	r3, r0, r3
 800544a:	3301      	adds	r3, #1
 800544c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005450:	2b00      	cmp	r3, #0
 8005452:	bf0c      	ite	eq
 8005454:	2301      	moveq	r3, #1
 8005456:	2300      	movne	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <HAL_I2C_Init+0x196>
 800545e:	2301      	movs	r3, #1
 8005460:	e022      	b.n	80054a8 <HAL_I2C_Init+0x1dc>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10e      	bne.n	8005488 <HAL_I2C_Init+0x1bc>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	1e58      	subs	r0, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6859      	ldr	r1, [r3, #4]
 8005472:	460b      	mov	r3, r1
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	440b      	add	r3, r1
 8005478:	fbb0 f3f3 	udiv	r3, r0, r3
 800547c:	3301      	adds	r3, #1
 800547e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005486:	e00f      	b.n	80054a8 <HAL_I2C_Init+0x1dc>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	1e58      	subs	r0, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6859      	ldr	r1, [r3, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	0099      	lsls	r1, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	fbb0 f3f3 	udiv	r3, r0, r3
 800549e:	3301      	adds	r3, #1
 80054a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	6809      	ldr	r1, [r1, #0]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69da      	ldr	r2, [r3, #28]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80054d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6911      	ldr	r1, [r2, #16]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68d2      	ldr	r2, [r2, #12]
 80054e2:	4311      	orrs	r1, r2
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	430b      	orrs	r3, r1
 80054ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695a      	ldr	r2, [r3, #20]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2220      	movs	r2, #32
 8005522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	000186a0 	.word	0x000186a0
 8005544:	001e847f 	.word	0x001e847f
 8005548:	003d08ff 	.word	0x003d08ff
 800554c:	431bde83 	.word	0x431bde83
 8005550:	10624dd3 	.word	0x10624dd3

08005554 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005566:	2b80      	cmp	r3, #128	@ 0x80
 8005568:	d103      	bne.n	8005572 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2200      	movs	r2, #0
 8005570:	611a      	str	r2, [r3, #16]
  }
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b20      	cmp	r3, #32
 8005594:	d158      	bne.n	8005648 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <HAL_I2C_Slave_Receive_IT+0x26>
 800559c:	88fb      	ldrh	r3, [r7, #6]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e051      	b.n	800564a <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_I2C_Slave_Receive_IT+0x38>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e04a      	b.n	800564a <HAL_I2C_Slave_Receive_IT+0xce>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d007      	beq.n	80055da <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f042 0201 	orr.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055e8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2222      	movs	r2, #34	@ 0x22
 80055ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	88fa      	ldrh	r2, [r7, #6]
 800560a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005610:	b29a      	uxth	r2, r3
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4a0e      	ldr	r2, [pc, #56]	@ (8005654 <HAL_I2C_Slave_Receive_IT+0xd8>)
 800561a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800562a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8005642:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005644:	2300      	movs	r3, #0
 8005646:	e000      	b.n	800564a <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8005648:	2302      	movs	r3, #2
  }
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr
 8005654:	ffff0000 	.word	0xffff0000

08005658 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005670:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005678:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005680:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	2b10      	cmp	r3, #16
 8005686:	d003      	beq.n	8005690 <HAL_I2C_EV_IRQHandler+0x38>
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b40      	cmp	r3, #64	@ 0x40
 800568c:	f040 80c1 	bne.w	8005812 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10d      	bne.n	80056c6 <HAL_I2C_EV_IRQHandler+0x6e>
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80056b0:	d003      	beq.n	80056ba <HAL_I2C_EV_IRQHandler+0x62>
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80056b8:	d101      	bne.n	80056be <HAL_I2C_EV_IRQHandler+0x66>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <HAL_I2C_EV_IRQHandler+0x68>
 80056be:	2300      	movs	r3, #0
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	f000 8132 	beq.w	800592a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00c      	beq.n	80056ea <HAL_I2C_EV_IRQHandler+0x92>
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	0a5b      	lsrs	r3, r3, #9
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d006      	beq.n	80056ea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f001 fc89 	bl	8006ff4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fd87 	bl	80061f6 <I2C_Master_SB>
 80056e8:	e092      	b.n	8005810 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	08db      	lsrs	r3, r3, #3
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d009      	beq.n	800570a <HAL_I2C_EV_IRQHandler+0xb2>
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	0a5b      	lsrs	r3, r3, #9
 80056fa:	f003 0301 	and.w	r3, r3, #1
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 fdfc 	bl	8006300 <I2C_Master_ADD10>
 8005708:	e082      	b.n	8005810 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	085b      	lsrs	r3, r3, #1
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b00      	cmp	r3, #0
 8005714:	d009      	beq.n	800572a <HAL_I2C_EV_IRQHandler+0xd2>
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	0a5b      	lsrs	r3, r3, #9
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fe15 	bl	8006352 <I2C_Master_ADDR>
 8005728:	e072      	b.n	8005810 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	089b      	lsrs	r3, r3, #2
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b00      	cmp	r3, #0
 8005734:	d03b      	beq.n	80057ae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005744:	f000 80f3 	beq.w	800592e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	09db      	lsrs	r3, r3, #7
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00f      	beq.n	8005774 <HAL_I2C_EV_IRQHandler+0x11c>
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	0a9b      	lsrs	r3, r3, #10
 8005758:	f003 0301 	and.w	r3, r3, #1
 800575c:	2b00      	cmp	r3, #0
 800575e:	d009      	beq.n	8005774 <HAL_I2C_EV_IRQHandler+0x11c>
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	089b      	lsrs	r3, r3, #2
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b00      	cmp	r3, #0
 800576a:	d103      	bne.n	8005774 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f9df 	bl	8005b30 <I2C_MasterTransmit_TXE>
 8005772:	e04d      	b.n	8005810 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80d6 	beq.w	800592e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	0a5b      	lsrs	r3, r3, #9
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 80cf 	beq.w	800592e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005790:	7bbb      	ldrb	r3, [r7, #14]
 8005792:	2b21      	cmp	r3, #33	@ 0x21
 8005794:	d103      	bne.n	800579e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fa66 	bl	8005c68 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800579c:	e0c7      	b.n	800592e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b40      	cmp	r3, #64	@ 0x40
 80057a2:	f040 80c4 	bne.w	800592e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fad4 	bl	8005d54 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ac:	e0bf      	b.n	800592e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057bc:	f000 80b7 	beq.w	800592e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	099b      	lsrs	r3, r3, #6
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00f      	beq.n	80057ec <HAL_I2C_EV_IRQHandler+0x194>
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	0a9b      	lsrs	r3, r3, #10
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d009      	beq.n	80057ec <HAL_I2C_EV_IRQHandler+0x194>
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	089b      	lsrs	r3, r3, #2
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d103      	bne.n	80057ec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fb4d 	bl	8005e84 <I2C_MasterReceive_RXNE>
 80057ea:	e011      	b.n	8005810 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	089b      	lsrs	r3, r3, #2
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 809a 	beq.w	800592e <HAL_I2C_EV_IRQHandler+0x2d6>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	0a5b      	lsrs	r3, r3, #9
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 8093 	beq.w	800592e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fc03 	bl	8006014 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800580e:	e08e      	b.n	800592e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005810:	e08d      	b.n	800592e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005816:	2b00      	cmp	r3, #0
 8005818:	d004      	beq.n	8005824 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	61fb      	str	r3, [r7, #28]
 8005822:	e007      	b.n	8005834 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d012      	beq.n	8005866 <HAL_I2C_EV_IRQHandler+0x20e>
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	0a5b      	lsrs	r3, r3, #9
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00c      	beq.n	8005866 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800585c:	69b9      	ldr	r1, [r7, #24]
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 ffce 	bl	8006800 <I2C_Slave_ADDR>
 8005864:	e066      	b.n	8005934 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	091b      	lsrs	r3, r3, #4
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d009      	beq.n	8005886 <HAL_I2C_EV_IRQHandler+0x22e>
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	0a5b      	lsrs	r3, r3, #9
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f001 f808 	bl	8006894 <I2C_Slave_STOPF>
 8005884:	e056      	b.n	8005934 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005886:	7bbb      	ldrb	r3, [r7, #14]
 8005888:	2b21      	cmp	r3, #33	@ 0x21
 800588a:	d002      	beq.n	8005892 <HAL_I2C_EV_IRQHandler+0x23a>
 800588c:	7bbb      	ldrb	r3, [r7, #14]
 800588e:	2b29      	cmp	r3, #41	@ 0x29
 8005890:	d125      	bne.n	80058de <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	09db      	lsrs	r3, r3, #7
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00f      	beq.n	80058be <HAL_I2C_EV_IRQHandler+0x266>
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	0a9b      	lsrs	r3, r3, #10
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d009      	beq.n	80058be <HAL_I2C_EV_IRQHandler+0x266>
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	089b      	lsrs	r3, r3, #2
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d103      	bne.n	80058be <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fee6 	bl	8006688 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058bc:	e039      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	089b      	lsrs	r3, r3, #2
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d033      	beq.n	8005932 <HAL_I2C_EV_IRQHandler+0x2da>
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	0a5b      	lsrs	r3, r3, #9
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d02d      	beq.n	8005932 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 ff13 	bl	8006702 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058dc:	e029      	b.n	8005932 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	099b      	lsrs	r3, r3, #6
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00f      	beq.n	800590a <HAL_I2C_EV_IRQHandler+0x2b2>
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	0a9b      	lsrs	r3, r3, #10
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d009      	beq.n	800590a <HAL_I2C_EV_IRQHandler+0x2b2>
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	089b      	lsrs	r3, r3, #2
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d103      	bne.n	800590a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 ff1d 	bl	8006742 <I2C_SlaveReceive_RXNE>
 8005908:	e014      	b.n	8005934 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	089b      	lsrs	r3, r3, #2
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00e      	beq.n	8005934 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	0a5b      	lsrs	r3, r3, #9
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	d008      	beq.n	8005934 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 ff4b 	bl	80067be <I2C_SlaveReceive_BTF>
 8005928:	e004      	b.n	8005934 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800592a:	bf00      	nop
 800592c:	e002      	b.n	8005934 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005932:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b08a      	sub	sp, #40	@ 0x28
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005952:	2300      	movs	r3, #0
 8005954:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800595c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	0a1b      	lsrs	r3, r3, #8
 8005962:	f003 0301 	and.w	r3, r3, #1
 8005966:	2b00      	cmp	r3, #0
 8005968:	d016      	beq.n	8005998 <HAL_I2C_ER_IRQHandler+0x5e>
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	0a1b      	lsrs	r3, r3, #8
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d010      	beq.n	8005998 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	f043 0301 	orr.w	r3, r3, #1
 800597c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005986:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005996:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005998:	6a3b      	ldr	r3, [r7, #32]
 800599a:	0a5b      	lsrs	r3, r3, #9
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00e      	beq.n	80059c2 <HAL_I2C_ER_IRQHandler+0x88>
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	0a1b      	lsrs	r3, r3, #8
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	f043 0302 	orr.w	r3, r3, #2
 80059b6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80059c0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	0a9b      	lsrs	r3, r3, #10
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d03f      	beq.n	8005a4e <HAL_I2C_ER_IRQHandler+0x114>
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	0a1b      	lsrs	r3, r3, #8
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d039      	beq.n	8005a4e <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 80059da:	7efb      	ldrb	r3, [r7, #27]
 80059dc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059ec:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80059f4:	7ebb      	ldrb	r3, [r7, #26]
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d112      	bne.n	8005a20 <HAL_I2C_ER_IRQHandler+0xe6>
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10f      	bne.n	8005a20 <HAL_I2C_ER_IRQHandler+0xe6>
 8005a00:	7cfb      	ldrb	r3, [r7, #19]
 8005a02:	2b21      	cmp	r3, #33	@ 0x21
 8005a04:	d008      	beq.n	8005a18 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005a06:	7cfb      	ldrb	r3, [r7, #19]
 8005a08:	2b29      	cmp	r3, #41	@ 0x29
 8005a0a:	d005      	beq.n	8005a18 <HAL_I2C_ER_IRQHandler+0xde>
 8005a0c:	7cfb      	ldrb	r3, [r7, #19]
 8005a0e:	2b28      	cmp	r3, #40	@ 0x28
 8005a10:	d106      	bne.n	8005a20 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b21      	cmp	r3, #33	@ 0x21
 8005a16:	d103      	bne.n	8005a20 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f001 f86b 	bl	8006af4 <I2C_Slave_AF>
 8005a1e:	e016      	b.n	8005a4e <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a28:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	f043 0304 	orr.w	r3, r3, #4
 8005a30:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a32:	7efb      	ldrb	r3, [r7, #27]
 8005a34:	2b10      	cmp	r3, #16
 8005a36:	d002      	beq.n	8005a3e <HAL_I2C_ER_IRQHandler+0x104>
 8005a38:	7efb      	ldrb	r3, [r7, #27]
 8005a3a:	2b40      	cmp	r3, #64	@ 0x40
 8005a3c:	d107      	bne.n	8005a4e <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a4c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	0adb      	lsrs	r3, r3, #11
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00e      	beq.n	8005a78 <HAL_I2C_ER_IRQHandler+0x13e>
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	0a1b      	lsrs	r3, r3, #8
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d008      	beq.n	8005a78 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	f043 0308 	orr.w	r3, r3, #8
 8005a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005a76:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d008      	beq.n	8005a90 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f001 f8a6 	bl	8006bdc <I2C_ITError>
  }
}
 8005a90:	bf00      	nop
 8005a92:	3728      	adds	r7, #40	@ 0x28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	4770      	bx	lr

08005aaa <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bc80      	pop	{r7}
 8005aba:	4770      	bx	lr

08005abc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bc80      	pop	{r7}
 8005acc:	4770      	bx	lr

08005ace <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	70fb      	strb	r3, [r7, #3]
 8005ada:	4613      	mov	r3, r2
 8005adc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr

08005afa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b083      	sub	sp, #12
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005b02:	bf00      	nop
 8005b04:	370c      	adds	r7, #12
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bc80      	pop	{r7}
 8005b0a:	4770      	bx	lr

08005b0c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bc80      	pop	{r7}
 8005b1c:	4770      	bx	lr

08005b1e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bc80      	pop	{r7}
 8005b2e:	4770      	bx	lr

08005b30 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d150      	bne.n	8005bf8 <I2C_MasterTransmit_TXE+0xc8>
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	2b21      	cmp	r3, #33	@ 0x21
 8005b5a:	d14d      	bne.n	8005bf8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d01d      	beq.n	8005b9e <I2C_MasterTransmit_TXE+0x6e>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b20      	cmp	r3, #32
 8005b66:	d01a      	beq.n	8005b9e <I2C_MasterTransmit_TXE+0x6e>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b6e:	d016      	beq.n	8005b9e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b7e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2211      	movs	r2, #17
 8005b84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff ff7e 	bl	8005a98 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b9c:	e060      	b.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005bac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bbc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b40      	cmp	r3, #64	@ 0x40
 8005bd6:	d107      	bne.n	8005be8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7ff ff8a 	bl	8005afa <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005be6:	e03b      	b.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff ff51 	bl	8005a98 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bf6:	e033      	b.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	2b21      	cmp	r3, #33	@ 0x21
 8005bfc:	d005      	beq.n	8005c0a <I2C_MasterTransmit_TXE+0xda>
 8005bfe:	7bbb      	ldrb	r3, [r7, #14]
 8005c00:	2b40      	cmp	r3, #64	@ 0x40
 8005c02:	d12d      	bne.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005c04:	7bfb      	ldrb	r3, [r7, #15]
 8005c06:	2b22      	cmp	r3, #34	@ 0x22
 8005c08:	d12a      	bne.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d108      	bne.n	8005c26 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c22:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005c24:	e01c      	b.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b40      	cmp	r3, #64	@ 0x40
 8005c30:	d103      	bne.n	8005c3a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f88e 	bl	8005d54 <I2C_MemoryTransmit_TXE_BTF>
}
 8005c38:	e012      	b.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	781a      	ldrb	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005c5e:	e7ff      	b.n	8005c60 <I2C_MasterTransmit_TXE+0x130>
 8005c60:	bf00      	nop
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c74:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b21      	cmp	r3, #33	@ 0x21
 8005c80:	d164      	bne.n	8005d4c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d012      	beq.n	8005cb2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c90:	781a      	ldrb	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005cb0:	e04c      	b.n	8005d4c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d01d      	beq.n	8005cf4 <I2C_MasterTransmit_BTF+0x8c>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d01a      	beq.n	8005cf4 <I2C_MasterTransmit_BTF+0x8c>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005cc4:	d016      	beq.n	8005cf4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005cd4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2211      	movs	r2, #17
 8005cda:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff fed3 	bl	8005a98 <HAL_I2C_MasterTxCpltCallback>
}
 8005cf2:	e02b      	b.n	8005d4c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d02:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d12:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b40      	cmp	r3, #64	@ 0x40
 8005d2c:	d107      	bne.n	8005d3e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7ff fedf 	bl	8005afa <HAL_I2C_MemTxCpltCallback>
}
 8005d3c:	e006      	b.n	8005d4c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f7ff fea6 	bl	8005a98 <HAL_I2C_MasterTxCpltCallback>
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d11d      	bne.n	8005da8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d10b      	bne.n	8005d8c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d84:	1c9a      	adds	r2, r3, #2
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005d8a:	e077      	b.n	8005e7c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	121b      	asrs	r3, r3, #8
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005da6:	e069      	b.n	8005e7c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d10b      	bne.n	8005dc8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005dc6:	e059      	b.n	8005e7c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d152      	bne.n	8005e76 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	2b22      	cmp	r3, #34	@ 0x22
 8005dd4:	d10d      	bne.n	8005df2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005de4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005df0:	e044      	b.n	8005e7c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d015      	beq.n	8005e28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	2b21      	cmp	r3, #33	@ 0x21
 8005e00:	d112      	bne.n	8005e28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e06:	781a      	ldrb	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005e26:	e029      	b.n	8005e7c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d124      	bne.n	8005e7c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
 8005e34:	2b21      	cmp	r3, #33	@ 0x21
 8005e36:	d121      	bne.n	8005e7c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e46:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fe43 	bl	8005afa <HAL_I2C_MemTxCpltCallback>
}
 8005e74:	e002      	b.n	8005e7c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7ff fb6c 	bl	8005554 <I2C_Flush_DR>
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b22      	cmp	r3, #34	@ 0x22
 8005e96:	f040 80b9 	bne.w	800600c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d921      	bls.n	8005ef2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	b2d2      	uxtb	r2, r2
 8005eba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	f040 8096 	bne.w	800600c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005eee:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005ef0:	e08c      	b.n	800600c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d07f      	beq.n	8005ffa <I2C_MasterReceive_RXNE+0x176>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d002      	beq.n	8005f06 <I2C_MasterReceive_RXNE+0x82>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d179      	bne.n	8005ffa <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f001 f842 	bl	8006f90 <I2C_WaitOnSTOPRequestThroughIT>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d14c      	bne.n	8005fac <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f20:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f30:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691a      	ldr	r2, [r3, #16]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	2b40      	cmp	r3, #64	@ 0x40
 8005f6a:	d10a      	bne.n	8005f82 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7ff fdc6 	bl	8005b0c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f80:	e044      	b.n	800600c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d002      	beq.n	8005f96 <I2C_MasterReceive_RXNE+0x112>
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b20      	cmp	r3, #32
 8005f94:	d103      	bne.n	8005f9e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f9c:	e002      	b.n	8005fa4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2212      	movs	r2, #18
 8005fa2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff fd80 	bl	8005aaa <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005faa:	e02f      	b.n	800600c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005fba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fb f92e 	bl	8001254 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005ff8:	e008      	b.n	800600c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006008:	605a      	str	r2, [r3, #4]
}
 800600a:	e7ff      	b.n	800600c <I2C_MasterReceive_RXNE+0x188>
 800600c:	bf00      	nop
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006020:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006026:	b29b      	uxth	r3, r3
 8006028:	2b04      	cmp	r3, #4
 800602a:	d11b      	bne.n	8006064 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800603a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691a      	ldr	r2, [r3, #16]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006046:	b2d2      	uxtb	r2, r2
 8006048:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006058:	b29b      	uxth	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006062:	e0c4      	b.n	80061ee <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b03      	cmp	r3, #3
 800606c:	d129      	bne.n	80060c2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800607c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b04      	cmp	r3, #4
 8006082:	d00a      	beq.n	800609a <I2C_MasterReceive_BTF+0x86>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b02      	cmp	r3, #2
 8006088:	d007      	beq.n	800609a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006098:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3b01      	subs	r3, #1
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80060c0:	e095      	b.n	80061ee <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d17d      	bne.n	80061c8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d002      	beq.n	80060d8 <I2C_MasterReceive_BTF+0xc4>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2b10      	cmp	r3, #16
 80060d6:	d108      	bne.n	80060ea <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	e016      	b.n	8006118 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d002      	beq.n	80060f6 <I2C_MasterReceive_BTF+0xe2>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d108      	bne.n	8006108 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	e007      	b.n	8006118 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006116:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691a      	ldr	r2, [r3, #16]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006150:	1c5a      	adds	r2, r3, #1
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006172:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b40      	cmp	r3, #64	@ 0x40
 8006186:	d10a      	bne.n	800619e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fcb8 	bl	8005b0c <HAL_I2C_MemRxCpltCallback>
}
 800619c:	e027      	b.n	80061ee <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d002      	beq.n	80061b2 <I2C_MasterReceive_BTF+0x19e>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	d103      	bne.n	80061ba <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80061b8:	e002      	b.n	80061c0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2212      	movs	r2, #18
 80061be:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff fc72 	bl	8005aaa <HAL_I2C_MasterRxCpltCallback>
}
 80061c6:	e012      	b.n	80061ee <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b40      	cmp	r3, #64	@ 0x40
 8006208:	d117      	bne.n	800623a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800620e:	2b00      	cmp	r3, #0
 8006210:	d109      	bne.n	8006226 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006216:	b2db      	uxtb	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006222:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006224:	e067      	b.n	80062f6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f043 0301 	orr.w	r3, r3, #1
 8006230:	b2da      	uxtb	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	611a      	str	r2, [r3, #16]
}
 8006238:	e05d      	b.n	80062f6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006242:	d133      	bne.n	80062ac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b21      	cmp	r3, #33	@ 0x21
 800624e:	d109      	bne.n	8006264 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006254:	b2db      	uxtb	r3, r3
 8006256:	461a      	mov	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006260:	611a      	str	r2, [r3, #16]
 8006262:	e008      	b.n	8006276 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006268:	b2db      	uxtb	r3, r3
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	b2da      	uxtb	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <I2C_Master_SB+0x92>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006284:	2b00      	cmp	r3, #0
 8006286:	d108      	bne.n	800629a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800628c:	2b00      	cmp	r3, #0
 800628e:	d032      	beq.n	80062f6 <I2C_Master_SB+0x100>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006296:	2b00      	cmp	r3, #0
 8006298:	d02d      	beq.n	80062f6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062a8:	605a      	str	r2, [r3, #4]
}
 80062aa:	e024      	b.n	80062f6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10e      	bne.n	80062d2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	11db      	asrs	r3, r3, #7
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	f003 0306 	and.w	r3, r3, #6
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	f063 030f 	orn	r3, r3, #15
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	611a      	str	r2, [r3, #16]
}
 80062d0:	e011      	b.n	80062f6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d10d      	bne.n	80062f6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062de:	b29b      	uxth	r3, r3
 80062e0:	11db      	asrs	r3, r3, #7
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f003 0306 	and.w	r3, r3, #6
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	f063 030e 	orn	r3, r3, #14
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	611a      	str	r2, [r3, #16]
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bc80      	pop	{r7}
 80062fe:	4770      	bx	lr

08006300 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800630c:	b2da      	uxtb	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006318:	2b00      	cmp	r3, #0
 800631a:	d004      	beq.n	8006326 <I2C_Master_ADD10+0x26>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006322:	2b00      	cmp	r3, #0
 8006324:	d108      	bne.n	8006338 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00c      	beq.n	8006348 <I2C_Master_ADD10+0x48>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006334:	2b00      	cmp	r3, #0
 8006336:	d007      	beq.n	8006348 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006346:	605a      	str	r2, [r3, #4]
  }
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	bc80      	pop	{r7}
 8006350:	4770      	bx	lr

08006352 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006352:	b480      	push	{r7}
 8006354:	b091      	sub	sp, #68	@ 0x44
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006360:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800636e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b22      	cmp	r3, #34	@ 0x22
 800637a:	f040 8174 	bne.w	8006666 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10f      	bne.n	80063a6 <I2C_Master_ADDR+0x54>
 8006386:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800638a:	2b40      	cmp	r3, #64	@ 0x40
 800638c:	d10b      	bne.n	80063a6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800638e:	2300      	movs	r3, #0
 8006390:	633b      	str	r3, [r7, #48]	@ 0x30
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	633b      	str	r3, [r7, #48]	@ 0x30
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	e16b      	b.n	800667e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d11d      	bne.n	80063ea <I2C_Master_ADDR+0x98>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80063b6:	d118      	bne.n	80063ea <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063b8:	2300      	movs	r3, #0
 80063ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063dc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80063e8:	e149      	b.n	800667e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d113      	bne.n	800641c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063f4:	2300      	movs	r3, #0
 80063f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006408:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006418:	601a      	str	r2, [r3, #0]
 800641a:	e120      	b.n	800665e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006420:	b29b      	uxth	r3, r3
 8006422:	2b01      	cmp	r3, #1
 8006424:	f040 808a 	bne.w	800653c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800642e:	d137      	bne.n	80064a0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800643e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800644a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800644e:	d113      	bne.n	8006478 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800645e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006460:	2300      	movs	r3, #0
 8006462:	627b      	str	r3, [r7, #36]	@ 0x24
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	627b      	str	r3, [r7, #36]	@ 0x24
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	627b      	str	r3, [r7, #36]	@ 0x24
 8006474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006476:	e0f2      	b.n	800665e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006478:	2300      	movs	r3, #0
 800647a:	623b      	str	r3, [r7, #32]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	623b      	str	r3, [r7, #32]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	623b      	str	r3, [r7, #32]
 800648c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	e0de      	b.n	800665e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80064a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d02e      	beq.n	8006504 <I2C_Master_ADDR+0x1b2>
 80064a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d02b      	beq.n	8006504 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80064ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064ae:	2b12      	cmp	r3, #18
 80064b0:	d102      	bne.n	80064b8 <I2C_Master_ADDR+0x166>
 80064b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d125      	bne.n	8006504 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80064b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d00e      	beq.n	80064dc <I2C_Master_ADDR+0x18a>
 80064be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d00b      	beq.n	80064dc <I2C_Master_ADDR+0x18a>
 80064c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c6:	2b10      	cmp	r3, #16
 80064c8:	d008      	beq.n	80064dc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	e007      	b.n	80064ec <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80064ea:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ec:	2300      	movs	r3, #0
 80064ee:	61fb      	str	r3, [r7, #28]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	61fb      	str	r3, [r7, #28]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	61fb      	str	r3, [r7, #28]
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	e0ac      	b.n	800665e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006512:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006514:	2300      	movs	r3, #0
 8006516:	61bb      	str	r3, [r7, #24]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	61bb      	str	r3, [r7, #24]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	61bb      	str	r3, [r7, #24]
 8006528:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	e090      	b.n	800665e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006540:	b29b      	uxth	r3, r3
 8006542:	2b02      	cmp	r3, #2
 8006544:	d158      	bne.n	80065f8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006548:	2b04      	cmp	r3, #4
 800654a:	d021      	beq.n	8006590 <I2C_Master_ADDR+0x23e>
 800654c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800654e:	2b02      	cmp	r3, #2
 8006550:	d01e      	beq.n	8006590 <I2C_Master_ADDR+0x23e>
 8006552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006554:	2b10      	cmp	r3, #16
 8006556:	d01b      	beq.n	8006590 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006566:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	617b      	str	r3, [r7, #20]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	e012      	b.n	80065b6 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800659e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065a0:	2300      	movs	r3, #0
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	613b      	str	r3, [r7, #16]
 80065b4:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065c4:	d14b      	bne.n	800665e <I2C_Master_ADDR+0x30c>
 80065c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065cc:	d00b      	beq.n	80065e6 <I2C_Master_ADDR+0x294>
 80065ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d008      	beq.n	80065e6 <I2C_Master_ADDR+0x294>
 80065d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d6:	2b08      	cmp	r3, #8
 80065d8:	d005      	beq.n	80065e6 <I2C_Master_ADDR+0x294>
 80065da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065dc:	2b10      	cmp	r3, #16
 80065de:	d002      	beq.n	80065e6 <I2C_Master_ADDR+0x294>
 80065e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d13b      	bne.n	800665e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80065f4:	605a      	str	r2, [r3, #4]
 80065f6:	e032      	b.n	800665e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006606:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006612:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006616:	d117      	bne.n	8006648 <I2C_Master_ADDR+0x2f6>
 8006618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800661e:	d00b      	beq.n	8006638 <I2C_Master_ADDR+0x2e6>
 8006620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006622:	2b01      	cmp	r3, #1
 8006624:	d008      	beq.n	8006638 <I2C_Master_ADDR+0x2e6>
 8006626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006628:	2b08      	cmp	r3, #8
 800662a:	d005      	beq.n	8006638 <I2C_Master_ADDR+0x2e6>
 800662c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662e:	2b10      	cmp	r3, #16
 8006630:	d002      	beq.n	8006638 <I2C_Master_ADDR+0x2e6>
 8006632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006634:	2b20      	cmp	r3, #32
 8006636:	d107      	bne.n	8006648 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006646:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006648:	2300      	movs	r3, #0
 800664a:	60fb      	str	r3, [r7, #12]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	60fb      	str	r3, [r7, #12]
 800665c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006664:	e00b      	b.n	800667e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006666:	2300      	movs	r3, #0
 8006668:	60bb      	str	r3, [r7, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	60bb      	str	r3, [r7, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	60bb      	str	r3, [r7, #8]
 800667a:	68bb      	ldr	r3, [r7, #8]
}
 800667c:	e7ff      	b.n	800667e <I2C_Master_ADDR+0x32c>
 800667e:	bf00      	nop
 8006680:	3744      	adds	r7, #68	@ 0x44
 8006682:	46bd      	mov	sp, r7
 8006684:	bc80      	pop	{r7}
 8006686:	4770      	bx	lr

08006688 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006696:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d02b      	beq.n	80066fa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a6:	781a      	ldrb	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d114      	bne.n	80066fa <I2C_SlaveTransmit_TXE+0x72>
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
 80066d2:	2b29      	cmp	r3, #41	@ 0x29
 80066d4:	d111      	bne.n	80066fa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066e4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2221      	movs	r2, #33	@ 0x21
 80066ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2228      	movs	r2, #40	@ 0x28
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff f9e1 	bl	8005abc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80066fa:	bf00      	nop
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800670e:	b29b      	uxth	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d011      	beq.n	8006738 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	781a      	ldrb	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	bc80      	pop	{r7}
 8006740:	4770      	bx	lr

08006742 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006750:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006756:	b29b      	uxth	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	d02c      	beq.n	80067b6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006778:	b29b      	uxth	r3, r3
 800677a:	3b01      	subs	r3, #1
 800677c:	b29a      	uxth	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006786:	b29b      	uxth	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d114      	bne.n	80067b6 <I2C_SlaveReceive_RXNE+0x74>
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006790:	d111      	bne.n	80067b6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067a0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2222      	movs	r2, #34	@ 0x22
 80067a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2228      	movs	r2, #40	@ 0x28
 80067ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7fa fd39 	bl	8001228 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80067b6:	bf00      	nop
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80067be:	b480      	push	{r7}
 80067c0:	b083      	sub	sp, #12
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d012      	beq.n	80067f6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691a      	ldr	r2, [r3, #16]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	3b01      	subs	r3, #1
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr

08006800 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800680a:	2300      	movs	r3, #0
 800680c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006814:	b2db      	uxtb	r3, r3
 8006816:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800681a:	2b28      	cmp	r3, #40	@ 0x28
 800681c:	d127      	bne.n	800686e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800682c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	089b      	lsrs	r3, r3, #2
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800683a:	2301      	movs	r3, #1
 800683c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	09db      	lsrs	r3, r3, #7
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d103      	bne.n	8006852 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	81bb      	strh	r3, [r7, #12]
 8006850:	e002      	b.n	8006858 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006860:	89ba      	ldrh	r2, [r7, #12]
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7ff f931 	bl	8005ace <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800686c:	e00e      	b.n	800688c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800686e:	2300      	movs	r3, #0
 8006870:	60bb      	str	r3, [r7, #8]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	60bb      	str	r3, [r7, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	60bb      	str	r3, [r7, #8]
 8006882:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800688c:	bf00      	nop
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80068b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80068b4:	2300      	movs	r3, #0
 80068b6:	60bb      	str	r3, [r7, #8]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	60bb      	str	r3, [r7, #8]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f042 0201 	orr.w	r2, r2, #1
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068f0:	d172      	bne.n	80069d8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	2b22      	cmp	r3, #34	@ 0x22
 80068f6:	d002      	beq.n	80068fe <I2C_Slave_STOPF+0x6a>
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
 80068fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80068fc:	d135      	bne.n	800696a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	b29a      	uxth	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006910:	b29b      	uxth	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d005      	beq.n	8006922 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691a:	f043 0204 	orr.w	r2, r3, #4
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685a      	ldr	r2, [r3, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006930:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006936:	4618      	mov	r0, r3
 8006938:	f7fe fb36 	bl	8004fa8 <HAL_DMA_GetState>
 800693c:	4603      	mov	r3, r0
 800693e:	2b01      	cmp	r3, #1
 8006940:	d049      	beq.n	80069d6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006946:	4a69      	ldr	r2, [pc, #420]	@ (8006aec <I2C_Slave_STOPF+0x258>)
 8006948:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe fab2 	bl	8004eb8 <HAL_DMA_Abort_IT>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d03d      	beq.n	80069d6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006964:	4610      	mov	r0, r2
 8006966:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006968:	e035      	b.n	80069d6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	b29a      	uxth	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800697c:	b29b      	uxth	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d005      	beq.n	800698e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006986:	f043 0204 	orr.w	r2, r3, #4
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800699c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe fb00 	bl	8004fa8 <HAL_DMA_GetState>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d014      	beq.n	80069d8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b2:	4a4e      	ldr	r2, [pc, #312]	@ (8006aec <I2C_Slave_STOPF+0x258>)
 80069b4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fe fa7c 	bl	8004eb8 <HAL_DMA_Abort_IT>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d008      	beq.n	80069d8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069d0:	4610      	mov	r0, r2
 80069d2:	4798      	blx	r3
 80069d4:	e000      	b.n	80069d8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069d6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d03e      	beq.n	8006a60 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d112      	bne.n	8006a16 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	691a      	ldr	r2, [r3, #16]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fa:	b2d2      	uxtb	r2, r2
 80069fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a02:	1c5a      	adds	r2, r3, #1
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a20:	2b40      	cmp	r3, #64	@ 0x40
 8006a22:	d112      	bne.n	8006a4a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691a      	ldr	r2, [r3, #16]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	b2d2      	uxtb	r2, r2
 8006a30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d005      	beq.n	8006a60 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a58:	f043 0204 	orr.w	r2, r3, #4
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 f8b7 	bl	8006bdc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006a6e:	e039      	b.n	8006ae4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a74:	d109      	bne.n	8006a8a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2228      	movs	r2, #40	@ 0x28
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7fa fbcf 	bl	8001228 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b28      	cmp	r3, #40	@ 0x28
 8006a94:	d111      	bne.n	8006aba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a15      	ldr	r2, [pc, #84]	@ (8006af0 <I2C_Slave_STOPF+0x25c>)
 8006a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7ff f818 	bl	8005ae8 <HAL_I2C_ListenCpltCallback>
}
 8006ab8:	e014      	b.n	8006ae4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006abe:	2b22      	cmp	r3, #34	@ 0x22
 8006ac0:	d002      	beq.n	8006ac8 <I2C_Slave_STOPF+0x234>
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	2b22      	cmp	r3, #34	@ 0x22
 8006ac6:	d10d      	bne.n	8006ae4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fa fba2 	bl	8001228 <HAL_I2C_SlaveRxCpltCallback>
}
 8006ae4:	bf00      	nop
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	08006e41 	.word	0x08006e41
 8006af0:	ffff0000 	.word	0xffff0000

08006af4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b02:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b08:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d002      	beq.n	8006b16 <I2C_Slave_AF+0x22>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	d129      	bne.n	8006b6a <I2C_Slave_AF+0x76>
 8006b16:	7bfb      	ldrb	r3, [r7, #15]
 8006b18:	2b28      	cmp	r3, #40	@ 0x28
 8006b1a:	d126      	bne.n	8006b6a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8006bd8 <I2C_Slave_AF+0xe4>)
 8006b20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b30:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b3a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b4a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fe ffc0 	bl	8005ae8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006b68:	e031      	b.n	8006bce <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b6a:	7bfb      	ldrb	r3, [r7, #15]
 8006b6c:	2b21      	cmp	r3, #33	@ 0x21
 8006b6e:	d129      	bne.n	8006bc4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a19      	ldr	r2, [pc, #100]	@ (8006bd8 <I2C_Slave_AF+0xe4>)
 8006b74:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2221      	movs	r2, #33	@ 0x21
 8006b7a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b9a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ba4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bb4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f7fe fccc 	bl	8005554 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7fe ff7d 	bl	8005abc <HAL_I2C_SlaveTxCpltCallback>
}
 8006bc2:	e004      	b.n	8006bce <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006bcc:	615a      	str	r2, [r3, #20]
}
 8006bce:	bf00      	nop
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	ffff0000 	.word	0xffff0000

08006bdc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bf2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006bf4:	7bbb      	ldrb	r3, [r7, #14]
 8006bf6:	2b10      	cmp	r3, #16
 8006bf8:	d002      	beq.n	8006c00 <I2C_ITError+0x24>
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	2b40      	cmp	r3, #64	@ 0x40
 8006bfe:	d10a      	bne.n	8006c16 <I2C_ITError+0x3a>
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	2b22      	cmp	r3, #34	@ 0x22
 8006c04:	d107      	bne.n	8006c16 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c14:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
 8006c18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c1c:	2b28      	cmp	r3, #40	@ 0x28
 8006c1e:	d107      	bne.n	8006c30 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2228      	movs	r2, #40	@ 0x28
 8006c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006c2e:	e015      	b.n	8006c5c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c3e:	d00a      	beq.n	8006c56 <I2C_ITError+0x7a>
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	2b60      	cmp	r3, #96	@ 0x60
 8006c44:	d007      	beq.n	8006c56 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c6a:	d162      	bne.n	8006d32 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c7a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c80:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d020      	beq.n	8006ccc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c8e:	4a6a      	ldr	r2, [pc, #424]	@ (8006e38 <I2C_ITError+0x25c>)
 8006c90:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fe f90e 	bl	8004eb8 <HAL_DMA_Abort_IT>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 8089 	beq.w	8006db6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006cc6:	4610      	mov	r0, r2
 8006cc8:	4798      	blx	r3
 8006cca:	e074      	b.n	8006db6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd0:	4a59      	ldr	r2, [pc, #356]	@ (8006e38 <I2C_ITError+0x25c>)
 8006cd2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fe f8ed 	bl	8004eb8 <HAL_DMA_Abort_IT>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d068      	beq.n	8006db6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cee:	2b40      	cmp	r3, #64	@ 0x40
 8006cf0:	d10b      	bne.n	8006d0a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	691a      	ldr	r2, [r3, #16]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfc:	b2d2      	uxtb	r2, r2
 8006cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d04:	1c5a      	adds	r2, r3, #1
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 0201 	bic.w	r2, r2, #1
 8006d18:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	4798      	blx	r3
 8006d30:	e041      	b.n	8006db6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b60      	cmp	r3, #96	@ 0x60
 8006d3c:	d125      	bne.n	8006d8a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d56:	2b40      	cmp	r3, #64	@ 0x40
 8006d58:	d10b      	bne.n	8006d72 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	691a      	ldr	r2, [r3, #16]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6c:	1c5a      	adds	r2, r3, #1
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f022 0201 	bic.w	r2, r2, #1
 8006d80:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7fe fecb 	bl	8005b1e <HAL_I2C_AbortCpltCallback>
 8006d88:	e015      	b.n	8006db6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d94:	2b40      	cmp	r3, #64	@ 0x40
 8006d96:	d10b      	bne.n	8006db0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	691a      	ldr	r2, [r3, #16]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f7fa fa4f 	bl	8001254 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10e      	bne.n	8006de4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d109      	bne.n	8006de4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d104      	bne.n	8006de4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d007      	beq.n	8006df4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006df2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dfa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d113      	bne.n	8006e30 <I2C_ITError+0x254>
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	2b28      	cmp	r3, #40	@ 0x28
 8006e0c:	d110      	bne.n	8006e30 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a0a      	ldr	r2, [pc, #40]	@ (8006e3c <I2C_ITError+0x260>)
 8006e12:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fe fe5c 	bl	8005ae8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e30:	bf00      	nop
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	08006e41 	.word	0x08006e41
 8006e3c:	ffff0000 	.word	0xffff0000

08006e40 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e50:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e58:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006e5a:	4b4b      	ldr	r3, [pc, #300]	@ (8006f88 <I2C_DMAAbort+0x148>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	08db      	lsrs	r3, r3, #3
 8006e60:	4a4a      	ldr	r2, [pc, #296]	@ (8006f8c <I2C_DMAAbort+0x14c>)
 8006e62:	fba2 2303 	umull	r2, r3, r2, r3
 8006e66:	0a1a      	lsrs	r2, r3, #8
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	00da      	lsls	r2, r3, #3
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d106      	bne.n	8006e88 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e7e:	f043 0220 	orr.w	r2, r3, #32
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006e86:	e00a      	b.n	8006e9e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e9c:	d0ea      	beq.n	8006e74 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eaa:	2200      	movs	r2, #0
 8006eac:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eba:	2200      	movs	r2, #0
 8006ebc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ecc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0201 	bic.w	r2, r2, #1
 8006f02:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b60      	cmp	r3, #96	@ 0x60
 8006f0e:	d10e      	bne.n	8006f2e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	2200      	movs	r2, #0
 8006f24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f26:	6978      	ldr	r0, [r7, #20]
 8006f28:	f7fe fdf9 	bl	8005b1e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f2c:	e027      	b.n	8006f7e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f2e:	7cfb      	ldrb	r3, [r7, #19]
 8006f30:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f34:	2b28      	cmp	r3, #40	@ 0x28
 8006f36:	d117      	bne.n	8006f68 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0201 	orr.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2228      	movs	r2, #40	@ 0x28
 8006f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006f66:	e007      	b.n	8006f78 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006f78:	6978      	ldr	r0, [r7, #20]
 8006f7a:	f7fa f96b 	bl	8001254 <HAL_I2C_ErrorCallback>
}
 8006f7e:	bf00      	nop
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20000024 	.word	0x20000024
 8006f8c:	14f8b589 	.word	0x14f8b589

08006f90 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006f9c:	4b13      	ldr	r3, [pc, #76]	@ (8006fec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	08db      	lsrs	r3, r3, #3
 8006fa2:	4a13      	ldr	r2, [pc, #76]	@ (8006ff0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa8:	0a1a      	lsrs	r2, r3, #8
 8006faa:	4613      	mov	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d107      	bne.n	8006fce <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc2:	f043 0220 	orr.w	r2, r3, #32
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e008      	b.n	8006fe0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fdc:	d0e9      	beq.n	8006fb2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bc80      	pop	{r7}
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	20000024 	.word	0x20000024
 8006ff0:	14f8b589 	.word	0x14f8b589

08006ff4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007004:	d103      	bne.n	800700e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2201      	movs	r2, #1
 800700a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800700c:	e007      	b.n	800701e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007012:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007016:	d102      	bne.n	800701e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2208      	movs	r2, #8
 800701c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	bc80      	pop	{r7}
 8007026:	4770      	bx	lr

08007028 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007028:	b480      	push	{r7}
 800702a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800702c:	4b02      	ldr	r3, [pc, #8]	@ (8007038 <HAL_RCC_GetHCLKFreq+0x10>)
 800702e:	681b      	ldr	r3, [r3, #0]
}
 8007030:	4618      	mov	r0, r3
 8007032:	46bd      	mov	sp, r7
 8007034:	bc80      	pop	{r7}
 8007036:	4770      	bx	lr
 8007038:	20000024 	.word	0x20000024

0800703c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007040:	f7ff fff2 	bl	8007028 <HAL_RCC_GetHCLKFreq>
 8007044:	4602      	mov	r2, r0
 8007046:	4b05      	ldr	r3, [pc, #20]	@ (800705c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	0a1b      	lsrs	r3, r3, #8
 800704c:	f003 0307 	and.w	r3, r3, #7
 8007050:	4903      	ldr	r1, [pc, #12]	@ (8007060 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007052:	5ccb      	ldrb	r3, [r1, r3]
 8007054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007058:	4618      	mov	r0, r3
 800705a:	bd80      	pop	{r7, pc}
 800705c:	40021000 	.word	0x40021000
 8007060:	0800a838 	.word	0x0800a838

08007064 <__cvt>:
 8007064:	2b00      	cmp	r3, #0
 8007066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706a:	461d      	mov	r5, r3
 800706c:	bfbb      	ittet	lt
 800706e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007072:	461d      	movlt	r5, r3
 8007074:	2300      	movge	r3, #0
 8007076:	232d      	movlt	r3, #45	@ 0x2d
 8007078:	b088      	sub	sp, #32
 800707a:	4614      	mov	r4, r2
 800707c:	bfb8      	it	lt
 800707e:	4614      	movlt	r4, r2
 8007080:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007082:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007084:	7013      	strb	r3, [r2, #0]
 8007086:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007088:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800708c:	f023 0820 	bic.w	r8, r3, #32
 8007090:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007094:	d005      	beq.n	80070a2 <__cvt+0x3e>
 8007096:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800709a:	d100      	bne.n	800709e <__cvt+0x3a>
 800709c:	3601      	adds	r6, #1
 800709e:	2302      	movs	r3, #2
 80070a0:	e000      	b.n	80070a4 <__cvt+0x40>
 80070a2:	2303      	movs	r3, #3
 80070a4:	aa07      	add	r2, sp, #28
 80070a6:	9204      	str	r2, [sp, #16]
 80070a8:	aa06      	add	r2, sp, #24
 80070aa:	e9cd a202 	strd	sl, r2, [sp, #8]
 80070ae:	e9cd 3600 	strd	r3, r6, [sp]
 80070b2:	4622      	mov	r2, r4
 80070b4:	462b      	mov	r3, r5
 80070b6:	f000 fe87 	bl	8007dc8 <_dtoa_r>
 80070ba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80070be:	4607      	mov	r7, r0
 80070c0:	d119      	bne.n	80070f6 <__cvt+0x92>
 80070c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070c4:	07db      	lsls	r3, r3, #31
 80070c6:	d50e      	bpl.n	80070e6 <__cvt+0x82>
 80070c8:	eb00 0906 	add.w	r9, r0, r6
 80070cc:	2200      	movs	r2, #0
 80070ce:	2300      	movs	r3, #0
 80070d0:	4620      	mov	r0, r4
 80070d2:	4629      	mov	r1, r5
 80070d4:	f7f9 fc68 	bl	80009a8 <__aeabi_dcmpeq>
 80070d8:	b108      	cbz	r0, 80070de <__cvt+0x7a>
 80070da:	f8cd 901c 	str.w	r9, [sp, #28]
 80070de:	2230      	movs	r2, #48	@ 0x30
 80070e0:	9b07      	ldr	r3, [sp, #28]
 80070e2:	454b      	cmp	r3, r9
 80070e4:	d31e      	bcc.n	8007124 <__cvt+0xc0>
 80070e6:	4638      	mov	r0, r7
 80070e8:	9b07      	ldr	r3, [sp, #28]
 80070ea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80070ec:	1bdb      	subs	r3, r3, r7
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	b008      	add	sp, #32
 80070f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070fa:	eb00 0906 	add.w	r9, r0, r6
 80070fe:	d1e5      	bne.n	80070cc <__cvt+0x68>
 8007100:	7803      	ldrb	r3, [r0, #0]
 8007102:	2b30      	cmp	r3, #48	@ 0x30
 8007104:	d10a      	bne.n	800711c <__cvt+0xb8>
 8007106:	2200      	movs	r2, #0
 8007108:	2300      	movs	r3, #0
 800710a:	4620      	mov	r0, r4
 800710c:	4629      	mov	r1, r5
 800710e:	f7f9 fc4b 	bl	80009a8 <__aeabi_dcmpeq>
 8007112:	b918      	cbnz	r0, 800711c <__cvt+0xb8>
 8007114:	f1c6 0601 	rsb	r6, r6, #1
 8007118:	f8ca 6000 	str.w	r6, [sl]
 800711c:	f8da 3000 	ldr.w	r3, [sl]
 8007120:	4499      	add	r9, r3
 8007122:	e7d3      	b.n	80070cc <__cvt+0x68>
 8007124:	1c59      	adds	r1, r3, #1
 8007126:	9107      	str	r1, [sp, #28]
 8007128:	701a      	strb	r2, [r3, #0]
 800712a:	e7d9      	b.n	80070e0 <__cvt+0x7c>

0800712c <__exponent>:
 800712c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800712e:	2900      	cmp	r1, #0
 8007130:	bfb6      	itet	lt
 8007132:	232d      	movlt	r3, #45	@ 0x2d
 8007134:	232b      	movge	r3, #43	@ 0x2b
 8007136:	4249      	neglt	r1, r1
 8007138:	2909      	cmp	r1, #9
 800713a:	7002      	strb	r2, [r0, #0]
 800713c:	7043      	strb	r3, [r0, #1]
 800713e:	dd29      	ble.n	8007194 <__exponent+0x68>
 8007140:	f10d 0307 	add.w	r3, sp, #7
 8007144:	461d      	mov	r5, r3
 8007146:	270a      	movs	r7, #10
 8007148:	fbb1 f6f7 	udiv	r6, r1, r7
 800714c:	461a      	mov	r2, r3
 800714e:	fb07 1416 	mls	r4, r7, r6, r1
 8007152:	3430      	adds	r4, #48	@ 0x30
 8007154:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007158:	460c      	mov	r4, r1
 800715a:	2c63      	cmp	r4, #99	@ 0x63
 800715c:	4631      	mov	r1, r6
 800715e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007162:	dcf1      	bgt.n	8007148 <__exponent+0x1c>
 8007164:	3130      	adds	r1, #48	@ 0x30
 8007166:	1e94      	subs	r4, r2, #2
 8007168:	f803 1c01 	strb.w	r1, [r3, #-1]
 800716c:	4623      	mov	r3, r4
 800716e:	1c41      	adds	r1, r0, #1
 8007170:	42ab      	cmp	r3, r5
 8007172:	d30a      	bcc.n	800718a <__exponent+0x5e>
 8007174:	f10d 0309 	add.w	r3, sp, #9
 8007178:	1a9b      	subs	r3, r3, r2
 800717a:	42ac      	cmp	r4, r5
 800717c:	bf88      	it	hi
 800717e:	2300      	movhi	r3, #0
 8007180:	3302      	adds	r3, #2
 8007182:	4403      	add	r3, r0
 8007184:	1a18      	subs	r0, r3, r0
 8007186:	b003      	add	sp, #12
 8007188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800718a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800718e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007192:	e7ed      	b.n	8007170 <__exponent+0x44>
 8007194:	2330      	movs	r3, #48	@ 0x30
 8007196:	3130      	adds	r1, #48	@ 0x30
 8007198:	7083      	strb	r3, [r0, #2]
 800719a:	70c1      	strb	r1, [r0, #3]
 800719c:	1d03      	adds	r3, r0, #4
 800719e:	e7f1      	b.n	8007184 <__exponent+0x58>

080071a0 <_printf_float>:
 80071a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a4:	b091      	sub	sp, #68	@ 0x44
 80071a6:	460c      	mov	r4, r1
 80071a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80071ac:	4616      	mov	r6, r2
 80071ae:	461f      	mov	r7, r3
 80071b0:	4605      	mov	r5, r0
 80071b2:	f000 fcfb 	bl	8007bac <_localeconv_r>
 80071b6:	6803      	ldr	r3, [r0, #0]
 80071b8:	4618      	mov	r0, r3
 80071ba:	9308      	str	r3, [sp, #32]
 80071bc:	f7f8 ffc8 	bl	8000150 <strlen>
 80071c0:	2300      	movs	r3, #0
 80071c2:	930e      	str	r3, [sp, #56]	@ 0x38
 80071c4:	f8d8 3000 	ldr.w	r3, [r8]
 80071c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80071ca:	3307      	adds	r3, #7
 80071cc:	f023 0307 	bic.w	r3, r3, #7
 80071d0:	f103 0208 	add.w	r2, r3, #8
 80071d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80071d8:	f8d4 b000 	ldr.w	fp, [r4]
 80071dc:	f8c8 2000 	str.w	r2, [r8]
 80071e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80071e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80071e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071ea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80071ee:	f04f 32ff 	mov.w	r2, #4294967295
 80071f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80071f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80071fa:	4b9c      	ldr	r3, [pc, #624]	@ (800746c <_printf_float+0x2cc>)
 80071fc:	f7f9 fc06 	bl	8000a0c <__aeabi_dcmpun>
 8007200:	bb70      	cbnz	r0, 8007260 <_printf_float+0xc0>
 8007202:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007206:	f04f 32ff 	mov.w	r2, #4294967295
 800720a:	4b98      	ldr	r3, [pc, #608]	@ (800746c <_printf_float+0x2cc>)
 800720c:	f7f9 fbe0 	bl	80009d0 <__aeabi_dcmple>
 8007210:	bb30      	cbnz	r0, 8007260 <_printf_float+0xc0>
 8007212:	2200      	movs	r2, #0
 8007214:	2300      	movs	r3, #0
 8007216:	4640      	mov	r0, r8
 8007218:	4649      	mov	r1, r9
 800721a:	f7f9 fbcf 	bl	80009bc <__aeabi_dcmplt>
 800721e:	b110      	cbz	r0, 8007226 <_printf_float+0x86>
 8007220:	232d      	movs	r3, #45	@ 0x2d
 8007222:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007226:	4a92      	ldr	r2, [pc, #584]	@ (8007470 <_printf_float+0x2d0>)
 8007228:	4b92      	ldr	r3, [pc, #584]	@ (8007474 <_printf_float+0x2d4>)
 800722a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800722e:	bf8c      	ite	hi
 8007230:	4690      	movhi	r8, r2
 8007232:	4698      	movls	r8, r3
 8007234:	2303      	movs	r3, #3
 8007236:	f04f 0900 	mov.w	r9, #0
 800723a:	6123      	str	r3, [r4, #16]
 800723c:	f02b 0304 	bic.w	r3, fp, #4
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	4633      	mov	r3, r6
 8007244:	4621      	mov	r1, r4
 8007246:	4628      	mov	r0, r5
 8007248:	9700      	str	r7, [sp, #0]
 800724a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800724c:	f000 f9d4 	bl	80075f8 <_printf_common>
 8007250:	3001      	adds	r0, #1
 8007252:	f040 8090 	bne.w	8007376 <_printf_float+0x1d6>
 8007256:	f04f 30ff 	mov.w	r0, #4294967295
 800725a:	b011      	add	sp, #68	@ 0x44
 800725c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007260:	4642      	mov	r2, r8
 8007262:	464b      	mov	r3, r9
 8007264:	4640      	mov	r0, r8
 8007266:	4649      	mov	r1, r9
 8007268:	f7f9 fbd0 	bl	8000a0c <__aeabi_dcmpun>
 800726c:	b148      	cbz	r0, 8007282 <_printf_float+0xe2>
 800726e:	464b      	mov	r3, r9
 8007270:	2b00      	cmp	r3, #0
 8007272:	bfb8      	it	lt
 8007274:	232d      	movlt	r3, #45	@ 0x2d
 8007276:	4a80      	ldr	r2, [pc, #512]	@ (8007478 <_printf_float+0x2d8>)
 8007278:	bfb8      	it	lt
 800727a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800727e:	4b7f      	ldr	r3, [pc, #508]	@ (800747c <_printf_float+0x2dc>)
 8007280:	e7d3      	b.n	800722a <_printf_float+0x8a>
 8007282:	6863      	ldr	r3, [r4, #4]
 8007284:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	d13f      	bne.n	800730c <_printf_float+0x16c>
 800728c:	2306      	movs	r3, #6
 800728e:	6063      	str	r3, [r4, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007296:	6023      	str	r3, [r4, #0]
 8007298:	9206      	str	r2, [sp, #24]
 800729a:	aa0e      	add	r2, sp, #56	@ 0x38
 800729c:	e9cd a204 	strd	sl, r2, [sp, #16]
 80072a0:	aa0d      	add	r2, sp, #52	@ 0x34
 80072a2:	9203      	str	r2, [sp, #12]
 80072a4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80072a8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80072ac:	6863      	ldr	r3, [r4, #4]
 80072ae:	4642      	mov	r2, r8
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	4628      	mov	r0, r5
 80072b4:	464b      	mov	r3, r9
 80072b6:	910a      	str	r1, [sp, #40]	@ 0x28
 80072b8:	f7ff fed4 	bl	8007064 <__cvt>
 80072bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072be:	4680      	mov	r8, r0
 80072c0:	2947      	cmp	r1, #71	@ 0x47
 80072c2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80072c4:	d128      	bne.n	8007318 <_printf_float+0x178>
 80072c6:	1cc8      	adds	r0, r1, #3
 80072c8:	db02      	blt.n	80072d0 <_printf_float+0x130>
 80072ca:	6863      	ldr	r3, [r4, #4]
 80072cc:	4299      	cmp	r1, r3
 80072ce:	dd40      	ble.n	8007352 <_printf_float+0x1b2>
 80072d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80072d4:	fa5f fa8a 	uxtb.w	sl, sl
 80072d8:	4652      	mov	r2, sl
 80072da:	3901      	subs	r1, #1
 80072dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80072e0:	910d      	str	r1, [sp, #52]	@ 0x34
 80072e2:	f7ff ff23 	bl	800712c <__exponent>
 80072e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072e8:	4681      	mov	r9, r0
 80072ea:	1813      	adds	r3, r2, r0
 80072ec:	2a01      	cmp	r2, #1
 80072ee:	6123      	str	r3, [r4, #16]
 80072f0:	dc02      	bgt.n	80072f8 <_printf_float+0x158>
 80072f2:	6822      	ldr	r2, [r4, #0]
 80072f4:	07d2      	lsls	r2, r2, #31
 80072f6:	d501      	bpl.n	80072fc <_printf_float+0x15c>
 80072f8:	3301      	adds	r3, #1
 80072fa:	6123      	str	r3, [r4, #16]
 80072fc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007300:	2b00      	cmp	r3, #0
 8007302:	d09e      	beq.n	8007242 <_printf_float+0xa2>
 8007304:	232d      	movs	r3, #45	@ 0x2d
 8007306:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800730a:	e79a      	b.n	8007242 <_printf_float+0xa2>
 800730c:	2947      	cmp	r1, #71	@ 0x47
 800730e:	d1bf      	bne.n	8007290 <_printf_float+0xf0>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1bd      	bne.n	8007290 <_printf_float+0xf0>
 8007314:	2301      	movs	r3, #1
 8007316:	e7ba      	b.n	800728e <_printf_float+0xee>
 8007318:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800731c:	d9dc      	bls.n	80072d8 <_printf_float+0x138>
 800731e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007322:	d118      	bne.n	8007356 <_printf_float+0x1b6>
 8007324:	2900      	cmp	r1, #0
 8007326:	6863      	ldr	r3, [r4, #4]
 8007328:	dd0b      	ble.n	8007342 <_printf_float+0x1a2>
 800732a:	6121      	str	r1, [r4, #16]
 800732c:	b913      	cbnz	r3, 8007334 <_printf_float+0x194>
 800732e:	6822      	ldr	r2, [r4, #0]
 8007330:	07d0      	lsls	r0, r2, #31
 8007332:	d502      	bpl.n	800733a <_printf_float+0x19a>
 8007334:	3301      	adds	r3, #1
 8007336:	440b      	add	r3, r1
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	f04f 0900 	mov.w	r9, #0
 800733e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007340:	e7dc      	b.n	80072fc <_printf_float+0x15c>
 8007342:	b913      	cbnz	r3, 800734a <_printf_float+0x1aa>
 8007344:	6822      	ldr	r2, [r4, #0]
 8007346:	07d2      	lsls	r2, r2, #31
 8007348:	d501      	bpl.n	800734e <_printf_float+0x1ae>
 800734a:	3302      	adds	r3, #2
 800734c:	e7f4      	b.n	8007338 <_printf_float+0x198>
 800734e:	2301      	movs	r3, #1
 8007350:	e7f2      	b.n	8007338 <_printf_float+0x198>
 8007352:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007356:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007358:	4299      	cmp	r1, r3
 800735a:	db05      	blt.n	8007368 <_printf_float+0x1c8>
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	6121      	str	r1, [r4, #16]
 8007360:	07d8      	lsls	r0, r3, #31
 8007362:	d5ea      	bpl.n	800733a <_printf_float+0x19a>
 8007364:	1c4b      	adds	r3, r1, #1
 8007366:	e7e7      	b.n	8007338 <_printf_float+0x198>
 8007368:	2900      	cmp	r1, #0
 800736a:	bfcc      	ite	gt
 800736c:	2201      	movgt	r2, #1
 800736e:	f1c1 0202 	rsble	r2, r1, #2
 8007372:	4413      	add	r3, r2
 8007374:	e7e0      	b.n	8007338 <_printf_float+0x198>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	055a      	lsls	r2, r3, #21
 800737a:	d407      	bmi.n	800738c <_printf_float+0x1ec>
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	4642      	mov	r2, r8
 8007380:	4631      	mov	r1, r6
 8007382:	4628      	mov	r0, r5
 8007384:	47b8      	blx	r7
 8007386:	3001      	adds	r0, #1
 8007388:	d12b      	bne.n	80073e2 <_printf_float+0x242>
 800738a:	e764      	b.n	8007256 <_printf_float+0xb6>
 800738c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007390:	f240 80dc 	bls.w	800754c <_printf_float+0x3ac>
 8007394:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007398:	2200      	movs	r2, #0
 800739a:	2300      	movs	r3, #0
 800739c:	f7f9 fb04 	bl	80009a8 <__aeabi_dcmpeq>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d033      	beq.n	800740c <_printf_float+0x26c>
 80073a4:	2301      	movs	r3, #1
 80073a6:	4631      	mov	r1, r6
 80073a8:	4628      	mov	r0, r5
 80073aa:	4a35      	ldr	r2, [pc, #212]	@ (8007480 <_printf_float+0x2e0>)
 80073ac:	47b8      	blx	r7
 80073ae:	3001      	adds	r0, #1
 80073b0:	f43f af51 	beq.w	8007256 <_printf_float+0xb6>
 80073b4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80073b8:	4543      	cmp	r3, r8
 80073ba:	db02      	blt.n	80073c2 <_printf_float+0x222>
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	07d8      	lsls	r0, r3, #31
 80073c0:	d50f      	bpl.n	80073e2 <_printf_float+0x242>
 80073c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80073c6:	4631      	mov	r1, r6
 80073c8:	4628      	mov	r0, r5
 80073ca:	47b8      	blx	r7
 80073cc:	3001      	adds	r0, #1
 80073ce:	f43f af42 	beq.w	8007256 <_printf_float+0xb6>
 80073d2:	f04f 0900 	mov.w	r9, #0
 80073d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80073da:	f104 0a1a 	add.w	sl, r4, #26
 80073de:	45c8      	cmp	r8, r9
 80073e0:	dc09      	bgt.n	80073f6 <_printf_float+0x256>
 80073e2:	6823      	ldr	r3, [r4, #0]
 80073e4:	079b      	lsls	r3, r3, #30
 80073e6:	f100 8102 	bmi.w	80075ee <_printf_float+0x44e>
 80073ea:	68e0      	ldr	r0, [r4, #12]
 80073ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073ee:	4298      	cmp	r0, r3
 80073f0:	bfb8      	it	lt
 80073f2:	4618      	movlt	r0, r3
 80073f4:	e731      	b.n	800725a <_printf_float+0xba>
 80073f6:	2301      	movs	r3, #1
 80073f8:	4652      	mov	r2, sl
 80073fa:	4631      	mov	r1, r6
 80073fc:	4628      	mov	r0, r5
 80073fe:	47b8      	blx	r7
 8007400:	3001      	adds	r0, #1
 8007402:	f43f af28 	beq.w	8007256 <_printf_float+0xb6>
 8007406:	f109 0901 	add.w	r9, r9, #1
 800740a:	e7e8      	b.n	80073de <_printf_float+0x23e>
 800740c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800740e:	2b00      	cmp	r3, #0
 8007410:	dc38      	bgt.n	8007484 <_printf_float+0x2e4>
 8007412:	2301      	movs	r3, #1
 8007414:	4631      	mov	r1, r6
 8007416:	4628      	mov	r0, r5
 8007418:	4a19      	ldr	r2, [pc, #100]	@ (8007480 <_printf_float+0x2e0>)
 800741a:	47b8      	blx	r7
 800741c:	3001      	adds	r0, #1
 800741e:	f43f af1a 	beq.w	8007256 <_printf_float+0xb6>
 8007422:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007426:	ea59 0303 	orrs.w	r3, r9, r3
 800742a:	d102      	bne.n	8007432 <_printf_float+0x292>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	07d9      	lsls	r1, r3, #31
 8007430:	d5d7      	bpl.n	80073e2 <_printf_float+0x242>
 8007432:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007436:	4631      	mov	r1, r6
 8007438:	4628      	mov	r0, r5
 800743a:	47b8      	blx	r7
 800743c:	3001      	adds	r0, #1
 800743e:	f43f af0a 	beq.w	8007256 <_printf_float+0xb6>
 8007442:	f04f 0a00 	mov.w	sl, #0
 8007446:	f104 0b1a 	add.w	fp, r4, #26
 800744a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800744c:	425b      	negs	r3, r3
 800744e:	4553      	cmp	r3, sl
 8007450:	dc01      	bgt.n	8007456 <_printf_float+0x2b6>
 8007452:	464b      	mov	r3, r9
 8007454:	e793      	b.n	800737e <_printf_float+0x1de>
 8007456:	2301      	movs	r3, #1
 8007458:	465a      	mov	r2, fp
 800745a:	4631      	mov	r1, r6
 800745c:	4628      	mov	r0, r5
 800745e:	47b8      	blx	r7
 8007460:	3001      	adds	r0, #1
 8007462:	f43f aef8 	beq.w	8007256 <_printf_float+0xb6>
 8007466:	f10a 0a01 	add.w	sl, sl, #1
 800746a:	e7ee      	b.n	800744a <_printf_float+0x2aa>
 800746c:	7fefffff 	.word	0x7fefffff
 8007470:	0800a844 	.word	0x0800a844
 8007474:	0800a840 	.word	0x0800a840
 8007478:	0800a84c 	.word	0x0800a84c
 800747c:	0800a848 	.word	0x0800a848
 8007480:	0800a850 	.word	0x0800a850
 8007484:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007486:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800748a:	4553      	cmp	r3, sl
 800748c:	bfa8      	it	ge
 800748e:	4653      	movge	r3, sl
 8007490:	2b00      	cmp	r3, #0
 8007492:	4699      	mov	r9, r3
 8007494:	dc36      	bgt.n	8007504 <_printf_float+0x364>
 8007496:	f04f 0b00 	mov.w	fp, #0
 800749a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800749e:	f104 021a 	add.w	r2, r4, #26
 80074a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80074a6:	eba3 0309 	sub.w	r3, r3, r9
 80074aa:	455b      	cmp	r3, fp
 80074ac:	dc31      	bgt.n	8007512 <_printf_float+0x372>
 80074ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074b0:	459a      	cmp	sl, r3
 80074b2:	dc3a      	bgt.n	800752a <_printf_float+0x38a>
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	07da      	lsls	r2, r3, #31
 80074b8:	d437      	bmi.n	800752a <_printf_float+0x38a>
 80074ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074bc:	ebaa 0903 	sub.w	r9, sl, r3
 80074c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074c2:	ebaa 0303 	sub.w	r3, sl, r3
 80074c6:	4599      	cmp	r9, r3
 80074c8:	bfa8      	it	ge
 80074ca:	4699      	movge	r9, r3
 80074cc:	f1b9 0f00 	cmp.w	r9, #0
 80074d0:	dc33      	bgt.n	800753a <_printf_float+0x39a>
 80074d2:	f04f 0800 	mov.w	r8, #0
 80074d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074da:	f104 0b1a 	add.w	fp, r4, #26
 80074de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074e0:	ebaa 0303 	sub.w	r3, sl, r3
 80074e4:	eba3 0309 	sub.w	r3, r3, r9
 80074e8:	4543      	cmp	r3, r8
 80074ea:	f77f af7a 	ble.w	80073e2 <_printf_float+0x242>
 80074ee:	2301      	movs	r3, #1
 80074f0:	465a      	mov	r2, fp
 80074f2:	4631      	mov	r1, r6
 80074f4:	4628      	mov	r0, r5
 80074f6:	47b8      	blx	r7
 80074f8:	3001      	adds	r0, #1
 80074fa:	f43f aeac 	beq.w	8007256 <_printf_float+0xb6>
 80074fe:	f108 0801 	add.w	r8, r8, #1
 8007502:	e7ec      	b.n	80074de <_printf_float+0x33e>
 8007504:	4642      	mov	r2, r8
 8007506:	4631      	mov	r1, r6
 8007508:	4628      	mov	r0, r5
 800750a:	47b8      	blx	r7
 800750c:	3001      	adds	r0, #1
 800750e:	d1c2      	bne.n	8007496 <_printf_float+0x2f6>
 8007510:	e6a1      	b.n	8007256 <_printf_float+0xb6>
 8007512:	2301      	movs	r3, #1
 8007514:	4631      	mov	r1, r6
 8007516:	4628      	mov	r0, r5
 8007518:	920a      	str	r2, [sp, #40]	@ 0x28
 800751a:	47b8      	blx	r7
 800751c:	3001      	adds	r0, #1
 800751e:	f43f ae9a 	beq.w	8007256 <_printf_float+0xb6>
 8007522:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007524:	f10b 0b01 	add.w	fp, fp, #1
 8007528:	e7bb      	b.n	80074a2 <_printf_float+0x302>
 800752a:	4631      	mov	r1, r6
 800752c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007530:	4628      	mov	r0, r5
 8007532:	47b8      	blx	r7
 8007534:	3001      	adds	r0, #1
 8007536:	d1c0      	bne.n	80074ba <_printf_float+0x31a>
 8007538:	e68d      	b.n	8007256 <_printf_float+0xb6>
 800753a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800753c:	464b      	mov	r3, r9
 800753e:	4631      	mov	r1, r6
 8007540:	4628      	mov	r0, r5
 8007542:	4442      	add	r2, r8
 8007544:	47b8      	blx	r7
 8007546:	3001      	adds	r0, #1
 8007548:	d1c3      	bne.n	80074d2 <_printf_float+0x332>
 800754a:	e684      	b.n	8007256 <_printf_float+0xb6>
 800754c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007550:	f1ba 0f01 	cmp.w	sl, #1
 8007554:	dc01      	bgt.n	800755a <_printf_float+0x3ba>
 8007556:	07db      	lsls	r3, r3, #31
 8007558:	d536      	bpl.n	80075c8 <_printf_float+0x428>
 800755a:	2301      	movs	r3, #1
 800755c:	4642      	mov	r2, r8
 800755e:	4631      	mov	r1, r6
 8007560:	4628      	mov	r0, r5
 8007562:	47b8      	blx	r7
 8007564:	3001      	adds	r0, #1
 8007566:	f43f ae76 	beq.w	8007256 <_printf_float+0xb6>
 800756a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	47b8      	blx	r7
 8007574:	3001      	adds	r0, #1
 8007576:	f43f ae6e 	beq.w	8007256 <_printf_float+0xb6>
 800757a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800757e:	2200      	movs	r2, #0
 8007580:	2300      	movs	r3, #0
 8007582:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007586:	f7f9 fa0f 	bl	80009a8 <__aeabi_dcmpeq>
 800758a:	b9c0      	cbnz	r0, 80075be <_printf_float+0x41e>
 800758c:	4653      	mov	r3, sl
 800758e:	f108 0201 	add.w	r2, r8, #1
 8007592:	4631      	mov	r1, r6
 8007594:	4628      	mov	r0, r5
 8007596:	47b8      	blx	r7
 8007598:	3001      	adds	r0, #1
 800759a:	d10c      	bne.n	80075b6 <_printf_float+0x416>
 800759c:	e65b      	b.n	8007256 <_printf_float+0xb6>
 800759e:	2301      	movs	r3, #1
 80075a0:	465a      	mov	r2, fp
 80075a2:	4631      	mov	r1, r6
 80075a4:	4628      	mov	r0, r5
 80075a6:	47b8      	blx	r7
 80075a8:	3001      	adds	r0, #1
 80075aa:	f43f ae54 	beq.w	8007256 <_printf_float+0xb6>
 80075ae:	f108 0801 	add.w	r8, r8, #1
 80075b2:	45d0      	cmp	r8, sl
 80075b4:	dbf3      	blt.n	800759e <_printf_float+0x3fe>
 80075b6:	464b      	mov	r3, r9
 80075b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80075bc:	e6e0      	b.n	8007380 <_printf_float+0x1e0>
 80075be:	f04f 0800 	mov.w	r8, #0
 80075c2:	f104 0b1a 	add.w	fp, r4, #26
 80075c6:	e7f4      	b.n	80075b2 <_printf_float+0x412>
 80075c8:	2301      	movs	r3, #1
 80075ca:	4642      	mov	r2, r8
 80075cc:	e7e1      	b.n	8007592 <_printf_float+0x3f2>
 80075ce:	2301      	movs	r3, #1
 80075d0:	464a      	mov	r2, r9
 80075d2:	4631      	mov	r1, r6
 80075d4:	4628      	mov	r0, r5
 80075d6:	47b8      	blx	r7
 80075d8:	3001      	adds	r0, #1
 80075da:	f43f ae3c 	beq.w	8007256 <_printf_float+0xb6>
 80075de:	f108 0801 	add.w	r8, r8, #1
 80075e2:	68e3      	ldr	r3, [r4, #12]
 80075e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80075e6:	1a5b      	subs	r3, r3, r1
 80075e8:	4543      	cmp	r3, r8
 80075ea:	dcf0      	bgt.n	80075ce <_printf_float+0x42e>
 80075ec:	e6fd      	b.n	80073ea <_printf_float+0x24a>
 80075ee:	f04f 0800 	mov.w	r8, #0
 80075f2:	f104 0919 	add.w	r9, r4, #25
 80075f6:	e7f4      	b.n	80075e2 <_printf_float+0x442>

080075f8 <_printf_common>:
 80075f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075fc:	4616      	mov	r6, r2
 80075fe:	4698      	mov	r8, r3
 8007600:	688a      	ldr	r2, [r1, #8]
 8007602:	690b      	ldr	r3, [r1, #16]
 8007604:	4607      	mov	r7, r0
 8007606:	4293      	cmp	r3, r2
 8007608:	bfb8      	it	lt
 800760a:	4613      	movlt	r3, r2
 800760c:	6033      	str	r3, [r6, #0]
 800760e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007612:	460c      	mov	r4, r1
 8007614:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007618:	b10a      	cbz	r2, 800761e <_printf_common+0x26>
 800761a:	3301      	adds	r3, #1
 800761c:	6033      	str	r3, [r6, #0]
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	0699      	lsls	r1, r3, #26
 8007622:	bf42      	ittt	mi
 8007624:	6833      	ldrmi	r3, [r6, #0]
 8007626:	3302      	addmi	r3, #2
 8007628:	6033      	strmi	r3, [r6, #0]
 800762a:	6825      	ldr	r5, [r4, #0]
 800762c:	f015 0506 	ands.w	r5, r5, #6
 8007630:	d106      	bne.n	8007640 <_printf_common+0x48>
 8007632:	f104 0a19 	add.w	sl, r4, #25
 8007636:	68e3      	ldr	r3, [r4, #12]
 8007638:	6832      	ldr	r2, [r6, #0]
 800763a:	1a9b      	subs	r3, r3, r2
 800763c:	42ab      	cmp	r3, r5
 800763e:	dc2b      	bgt.n	8007698 <_printf_common+0xa0>
 8007640:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007644:	6822      	ldr	r2, [r4, #0]
 8007646:	3b00      	subs	r3, #0
 8007648:	bf18      	it	ne
 800764a:	2301      	movne	r3, #1
 800764c:	0692      	lsls	r2, r2, #26
 800764e:	d430      	bmi.n	80076b2 <_printf_common+0xba>
 8007650:	4641      	mov	r1, r8
 8007652:	4638      	mov	r0, r7
 8007654:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007658:	47c8      	blx	r9
 800765a:	3001      	adds	r0, #1
 800765c:	d023      	beq.n	80076a6 <_printf_common+0xae>
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	6922      	ldr	r2, [r4, #16]
 8007662:	f003 0306 	and.w	r3, r3, #6
 8007666:	2b04      	cmp	r3, #4
 8007668:	bf14      	ite	ne
 800766a:	2500      	movne	r5, #0
 800766c:	6833      	ldreq	r3, [r6, #0]
 800766e:	f04f 0600 	mov.w	r6, #0
 8007672:	bf08      	it	eq
 8007674:	68e5      	ldreq	r5, [r4, #12]
 8007676:	f104 041a 	add.w	r4, r4, #26
 800767a:	bf08      	it	eq
 800767c:	1aed      	subeq	r5, r5, r3
 800767e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007682:	bf08      	it	eq
 8007684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007688:	4293      	cmp	r3, r2
 800768a:	bfc4      	itt	gt
 800768c:	1a9b      	subgt	r3, r3, r2
 800768e:	18ed      	addgt	r5, r5, r3
 8007690:	42b5      	cmp	r5, r6
 8007692:	d11a      	bne.n	80076ca <_printf_common+0xd2>
 8007694:	2000      	movs	r0, #0
 8007696:	e008      	b.n	80076aa <_printf_common+0xb2>
 8007698:	2301      	movs	r3, #1
 800769a:	4652      	mov	r2, sl
 800769c:	4641      	mov	r1, r8
 800769e:	4638      	mov	r0, r7
 80076a0:	47c8      	blx	r9
 80076a2:	3001      	adds	r0, #1
 80076a4:	d103      	bne.n	80076ae <_printf_common+0xb6>
 80076a6:	f04f 30ff 	mov.w	r0, #4294967295
 80076aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ae:	3501      	adds	r5, #1
 80076b0:	e7c1      	b.n	8007636 <_printf_common+0x3e>
 80076b2:	2030      	movs	r0, #48	@ 0x30
 80076b4:	18e1      	adds	r1, r4, r3
 80076b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076c0:	4422      	add	r2, r4
 80076c2:	3302      	adds	r3, #2
 80076c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076c8:	e7c2      	b.n	8007650 <_printf_common+0x58>
 80076ca:	2301      	movs	r3, #1
 80076cc:	4622      	mov	r2, r4
 80076ce:	4641      	mov	r1, r8
 80076d0:	4638      	mov	r0, r7
 80076d2:	47c8      	blx	r9
 80076d4:	3001      	adds	r0, #1
 80076d6:	d0e6      	beq.n	80076a6 <_printf_common+0xae>
 80076d8:	3601      	adds	r6, #1
 80076da:	e7d9      	b.n	8007690 <_printf_common+0x98>

080076dc <_printf_i>:
 80076dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076e0:	7e0f      	ldrb	r7, [r1, #24]
 80076e2:	4691      	mov	r9, r2
 80076e4:	2f78      	cmp	r7, #120	@ 0x78
 80076e6:	4680      	mov	r8, r0
 80076e8:	460c      	mov	r4, r1
 80076ea:	469a      	mov	sl, r3
 80076ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076f2:	d807      	bhi.n	8007704 <_printf_i+0x28>
 80076f4:	2f62      	cmp	r7, #98	@ 0x62
 80076f6:	d80a      	bhi.n	800770e <_printf_i+0x32>
 80076f8:	2f00      	cmp	r7, #0
 80076fa:	f000 80d1 	beq.w	80078a0 <_printf_i+0x1c4>
 80076fe:	2f58      	cmp	r7, #88	@ 0x58
 8007700:	f000 80b8 	beq.w	8007874 <_printf_i+0x198>
 8007704:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007708:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800770c:	e03a      	b.n	8007784 <_printf_i+0xa8>
 800770e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007712:	2b15      	cmp	r3, #21
 8007714:	d8f6      	bhi.n	8007704 <_printf_i+0x28>
 8007716:	a101      	add	r1, pc, #4	@ (adr r1, 800771c <_printf_i+0x40>)
 8007718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800771c:	08007775 	.word	0x08007775
 8007720:	08007789 	.word	0x08007789
 8007724:	08007705 	.word	0x08007705
 8007728:	08007705 	.word	0x08007705
 800772c:	08007705 	.word	0x08007705
 8007730:	08007705 	.word	0x08007705
 8007734:	08007789 	.word	0x08007789
 8007738:	08007705 	.word	0x08007705
 800773c:	08007705 	.word	0x08007705
 8007740:	08007705 	.word	0x08007705
 8007744:	08007705 	.word	0x08007705
 8007748:	08007887 	.word	0x08007887
 800774c:	080077b3 	.word	0x080077b3
 8007750:	08007841 	.word	0x08007841
 8007754:	08007705 	.word	0x08007705
 8007758:	08007705 	.word	0x08007705
 800775c:	080078a9 	.word	0x080078a9
 8007760:	08007705 	.word	0x08007705
 8007764:	080077b3 	.word	0x080077b3
 8007768:	08007705 	.word	0x08007705
 800776c:	08007705 	.word	0x08007705
 8007770:	08007849 	.word	0x08007849
 8007774:	6833      	ldr	r3, [r6, #0]
 8007776:	1d1a      	adds	r2, r3, #4
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6032      	str	r2, [r6, #0]
 800777c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007780:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007784:	2301      	movs	r3, #1
 8007786:	e09c      	b.n	80078c2 <_printf_i+0x1e6>
 8007788:	6833      	ldr	r3, [r6, #0]
 800778a:	6820      	ldr	r0, [r4, #0]
 800778c:	1d19      	adds	r1, r3, #4
 800778e:	6031      	str	r1, [r6, #0]
 8007790:	0606      	lsls	r6, r0, #24
 8007792:	d501      	bpl.n	8007798 <_printf_i+0xbc>
 8007794:	681d      	ldr	r5, [r3, #0]
 8007796:	e003      	b.n	80077a0 <_printf_i+0xc4>
 8007798:	0645      	lsls	r5, r0, #25
 800779a:	d5fb      	bpl.n	8007794 <_printf_i+0xb8>
 800779c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077a0:	2d00      	cmp	r5, #0
 80077a2:	da03      	bge.n	80077ac <_printf_i+0xd0>
 80077a4:	232d      	movs	r3, #45	@ 0x2d
 80077a6:	426d      	negs	r5, r5
 80077a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077ac:	230a      	movs	r3, #10
 80077ae:	4858      	ldr	r0, [pc, #352]	@ (8007910 <_printf_i+0x234>)
 80077b0:	e011      	b.n	80077d6 <_printf_i+0xfa>
 80077b2:	6821      	ldr	r1, [r4, #0]
 80077b4:	6833      	ldr	r3, [r6, #0]
 80077b6:	0608      	lsls	r0, r1, #24
 80077b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80077bc:	d402      	bmi.n	80077c4 <_printf_i+0xe8>
 80077be:	0649      	lsls	r1, r1, #25
 80077c0:	bf48      	it	mi
 80077c2:	b2ad      	uxthmi	r5, r5
 80077c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80077c6:	6033      	str	r3, [r6, #0]
 80077c8:	bf14      	ite	ne
 80077ca:	230a      	movne	r3, #10
 80077cc:	2308      	moveq	r3, #8
 80077ce:	4850      	ldr	r0, [pc, #320]	@ (8007910 <_printf_i+0x234>)
 80077d0:	2100      	movs	r1, #0
 80077d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077d6:	6866      	ldr	r6, [r4, #4]
 80077d8:	2e00      	cmp	r6, #0
 80077da:	60a6      	str	r6, [r4, #8]
 80077dc:	db05      	blt.n	80077ea <_printf_i+0x10e>
 80077de:	6821      	ldr	r1, [r4, #0]
 80077e0:	432e      	orrs	r6, r5
 80077e2:	f021 0104 	bic.w	r1, r1, #4
 80077e6:	6021      	str	r1, [r4, #0]
 80077e8:	d04b      	beq.n	8007882 <_printf_i+0x1a6>
 80077ea:	4616      	mov	r6, r2
 80077ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80077f0:	fb03 5711 	mls	r7, r3, r1, r5
 80077f4:	5dc7      	ldrb	r7, [r0, r7]
 80077f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077fa:	462f      	mov	r7, r5
 80077fc:	42bb      	cmp	r3, r7
 80077fe:	460d      	mov	r5, r1
 8007800:	d9f4      	bls.n	80077ec <_printf_i+0x110>
 8007802:	2b08      	cmp	r3, #8
 8007804:	d10b      	bne.n	800781e <_printf_i+0x142>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	07df      	lsls	r7, r3, #31
 800780a:	d508      	bpl.n	800781e <_printf_i+0x142>
 800780c:	6923      	ldr	r3, [r4, #16]
 800780e:	6861      	ldr	r1, [r4, #4]
 8007810:	4299      	cmp	r1, r3
 8007812:	bfde      	ittt	le
 8007814:	2330      	movle	r3, #48	@ 0x30
 8007816:	f806 3c01 	strble.w	r3, [r6, #-1]
 800781a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800781e:	1b92      	subs	r2, r2, r6
 8007820:	6122      	str	r2, [r4, #16]
 8007822:	464b      	mov	r3, r9
 8007824:	4621      	mov	r1, r4
 8007826:	4640      	mov	r0, r8
 8007828:	f8cd a000 	str.w	sl, [sp]
 800782c:	aa03      	add	r2, sp, #12
 800782e:	f7ff fee3 	bl	80075f8 <_printf_common>
 8007832:	3001      	adds	r0, #1
 8007834:	d14a      	bne.n	80078cc <_printf_i+0x1f0>
 8007836:	f04f 30ff 	mov.w	r0, #4294967295
 800783a:	b004      	add	sp, #16
 800783c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	f043 0320 	orr.w	r3, r3, #32
 8007846:	6023      	str	r3, [r4, #0]
 8007848:	2778      	movs	r7, #120	@ 0x78
 800784a:	4832      	ldr	r0, [pc, #200]	@ (8007914 <_printf_i+0x238>)
 800784c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007850:	6823      	ldr	r3, [r4, #0]
 8007852:	6831      	ldr	r1, [r6, #0]
 8007854:	061f      	lsls	r7, r3, #24
 8007856:	f851 5b04 	ldr.w	r5, [r1], #4
 800785a:	d402      	bmi.n	8007862 <_printf_i+0x186>
 800785c:	065f      	lsls	r7, r3, #25
 800785e:	bf48      	it	mi
 8007860:	b2ad      	uxthmi	r5, r5
 8007862:	6031      	str	r1, [r6, #0]
 8007864:	07d9      	lsls	r1, r3, #31
 8007866:	bf44      	itt	mi
 8007868:	f043 0320 	orrmi.w	r3, r3, #32
 800786c:	6023      	strmi	r3, [r4, #0]
 800786e:	b11d      	cbz	r5, 8007878 <_printf_i+0x19c>
 8007870:	2310      	movs	r3, #16
 8007872:	e7ad      	b.n	80077d0 <_printf_i+0xf4>
 8007874:	4826      	ldr	r0, [pc, #152]	@ (8007910 <_printf_i+0x234>)
 8007876:	e7e9      	b.n	800784c <_printf_i+0x170>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	f023 0320 	bic.w	r3, r3, #32
 800787e:	6023      	str	r3, [r4, #0]
 8007880:	e7f6      	b.n	8007870 <_printf_i+0x194>
 8007882:	4616      	mov	r6, r2
 8007884:	e7bd      	b.n	8007802 <_printf_i+0x126>
 8007886:	6833      	ldr	r3, [r6, #0]
 8007888:	6825      	ldr	r5, [r4, #0]
 800788a:	1d18      	adds	r0, r3, #4
 800788c:	6961      	ldr	r1, [r4, #20]
 800788e:	6030      	str	r0, [r6, #0]
 8007890:	062e      	lsls	r6, r5, #24
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	d501      	bpl.n	800789a <_printf_i+0x1be>
 8007896:	6019      	str	r1, [r3, #0]
 8007898:	e002      	b.n	80078a0 <_printf_i+0x1c4>
 800789a:	0668      	lsls	r0, r5, #25
 800789c:	d5fb      	bpl.n	8007896 <_printf_i+0x1ba>
 800789e:	8019      	strh	r1, [r3, #0]
 80078a0:	2300      	movs	r3, #0
 80078a2:	4616      	mov	r6, r2
 80078a4:	6123      	str	r3, [r4, #16]
 80078a6:	e7bc      	b.n	8007822 <_printf_i+0x146>
 80078a8:	6833      	ldr	r3, [r6, #0]
 80078aa:	2100      	movs	r1, #0
 80078ac:	1d1a      	adds	r2, r3, #4
 80078ae:	6032      	str	r2, [r6, #0]
 80078b0:	681e      	ldr	r6, [r3, #0]
 80078b2:	6862      	ldr	r2, [r4, #4]
 80078b4:	4630      	mov	r0, r6
 80078b6:	f000 f9f0 	bl	8007c9a <memchr>
 80078ba:	b108      	cbz	r0, 80078c0 <_printf_i+0x1e4>
 80078bc:	1b80      	subs	r0, r0, r6
 80078be:	6060      	str	r0, [r4, #4]
 80078c0:	6863      	ldr	r3, [r4, #4]
 80078c2:	6123      	str	r3, [r4, #16]
 80078c4:	2300      	movs	r3, #0
 80078c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078ca:	e7aa      	b.n	8007822 <_printf_i+0x146>
 80078cc:	4632      	mov	r2, r6
 80078ce:	4649      	mov	r1, r9
 80078d0:	4640      	mov	r0, r8
 80078d2:	6923      	ldr	r3, [r4, #16]
 80078d4:	47d0      	blx	sl
 80078d6:	3001      	adds	r0, #1
 80078d8:	d0ad      	beq.n	8007836 <_printf_i+0x15a>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	079b      	lsls	r3, r3, #30
 80078de:	d413      	bmi.n	8007908 <_printf_i+0x22c>
 80078e0:	68e0      	ldr	r0, [r4, #12]
 80078e2:	9b03      	ldr	r3, [sp, #12]
 80078e4:	4298      	cmp	r0, r3
 80078e6:	bfb8      	it	lt
 80078e8:	4618      	movlt	r0, r3
 80078ea:	e7a6      	b.n	800783a <_printf_i+0x15e>
 80078ec:	2301      	movs	r3, #1
 80078ee:	4632      	mov	r2, r6
 80078f0:	4649      	mov	r1, r9
 80078f2:	4640      	mov	r0, r8
 80078f4:	47d0      	blx	sl
 80078f6:	3001      	adds	r0, #1
 80078f8:	d09d      	beq.n	8007836 <_printf_i+0x15a>
 80078fa:	3501      	adds	r5, #1
 80078fc:	68e3      	ldr	r3, [r4, #12]
 80078fe:	9903      	ldr	r1, [sp, #12]
 8007900:	1a5b      	subs	r3, r3, r1
 8007902:	42ab      	cmp	r3, r5
 8007904:	dcf2      	bgt.n	80078ec <_printf_i+0x210>
 8007906:	e7eb      	b.n	80078e0 <_printf_i+0x204>
 8007908:	2500      	movs	r5, #0
 800790a:	f104 0619 	add.w	r6, r4, #25
 800790e:	e7f5      	b.n	80078fc <_printf_i+0x220>
 8007910:	0800a852 	.word	0x0800a852
 8007914:	0800a863 	.word	0x0800a863

08007918 <std>:
 8007918:	2300      	movs	r3, #0
 800791a:	b510      	push	{r4, lr}
 800791c:	4604      	mov	r4, r0
 800791e:	e9c0 3300 	strd	r3, r3, [r0]
 8007922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007926:	6083      	str	r3, [r0, #8]
 8007928:	8181      	strh	r1, [r0, #12]
 800792a:	6643      	str	r3, [r0, #100]	@ 0x64
 800792c:	81c2      	strh	r2, [r0, #14]
 800792e:	6183      	str	r3, [r0, #24]
 8007930:	4619      	mov	r1, r3
 8007932:	2208      	movs	r2, #8
 8007934:	305c      	adds	r0, #92	@ 0x5c
 8007936:	f000 f931 	bl	8007b9c <memset>
 800793a:	4b0d      	ldr	r3, [pc, #52]	@ (8007970 <std+0x58>)
 800793c:	6224      	str	r4, [r4, #32]
 800793e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007940:	4b0c      	ldr	r3, [pc, #48]	@ (8007974 <std+0x5c>)
 8007942:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007944:	4b0c      	ldr	r3, [pc, #48]	@ (8007978 <std+0x60>)
 8007946:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007948:	4b0c      	ldr	r3, [pc, #48]	@ (800797c <std+0x64>)
 800794a:	6323      	str	r3, [r4, #48]	@ 0x30
 800794c:	4b0c      	ldr	r3, [pc, #48]	@ (8007980 <std+0x68>)
 800794e:	429c      	cmp	r4, r3
 8007950:	d006      	beq.n	8007960 <std+0x48>
 8007952:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007956:	4294      	cmp	r4, r2
 8007958:	d002      	beq.n	8007960 <std+0x48>
 800795a:	33d0      	adds	r3, #208	@ 0xd0
 800795c:	429c      	cmp	r4, r3
 800795e:	d105      	bne.n	800796c <std+0x54>
 8007960:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007968:	f000 b994 	b.w	8007c94 <__retarget_lock_init_recursive>
 800796c:	bd10      	pop	{r4, pc}
 800796e:	bf00      	nop
 8007970:	08007a9d 	.word	0x08007a9d
 8007974:	08007abf 	.word	0x08007abf
 8007978:	08007af7 	.word	0x08007af7
 800797c:	08007b1b 	.word	0x08007b1b
 8007980:	2000064c 	.word	0x2000064c

08007984 <stdio_exit_handler>:
 8007984:	4a02      	ldr	r2, [pc, #8]	@ (8007990 <stdio_exit_handler+0xc>)
 8007986:	4903      	ldr	r1, [pc, #12]	@ (8007994 <stdio_exit_handler+0x10>)
 8007988:	4803      	ldr	r0, [pc, #12]	@ (8007998 <stdio_exit_handler+0x14>)
 800798a:	f000 b869 	b.w	8007a60 <_fwalk_sglue>
 800798e:	bf00      	nop
 8007990:	20000030 	.word	0x20000030
 8007994:	08009611 	.word	0x08009611
 8007998:	20000040 	.word	0x20000040

0800799c <cleanup_stdio>:
 800799c:	6841      	ldr	r1, [r0, #4]
 800799e:	4b0c      	ldr	r3, [pc, #48]	@ (80079d0 <cleanup_stdio+0x34>)
 80079a0:	b510      	push	{r4, lr}
 80079a2:	4299      	cmp	r1, r3
 80079a4:	4604      	mov	r4, r0
 80079a6:	d001      	beq.n	80079ac <cleanup_stdio+0x10>
 80079a8:	f001 fe32 	bl	8009610 <_fflush_r>
 80079ac:	68a1      	ldr	r1, [r4, #8]
 80079ae:	4b09      	ldr	r3, [pc, #36]	@ (80079d4 <cleanup_stdio+0x38>)
 80079b0:	4299      	cmp	r1, r3
 80079b2:	d002      	beq.n	80079ba <cleanup_stdio+0x1e>
 80079b4:	4620      	mov	r0, r4
 80079b6:	f001 fe2b 	bl	8009610 <_fflush_r>
 80079ba:	68e1      	ldr	r1, [r4, #12]
 80079bc:	4b06      	ldr	r3, [pc, #24]	@ (80079d8 <cleanup_stdio+0x3c>)
 80079be:	4299      	cmp	r1, r3
 80079c0:	d004      	beq.n	80079cc <cleanup_stdio+0x30>
 80079c2:	4620      	mov	r0, r4
 80079c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079c8:	f001 be22 	b.w	8009610 <_fflush_r>
 80079cc:	bd10      	pop	{r4, pc}
 80079ce:	bf00      	nop
 80079d0:	2000064c 	.word	0x2000064c
 80079d4:	200006b4 	.word	0x200006b4
 80079d8:	2000071c 	.word	0x2000071c

080079dc <global_stdio_init.part.0>:
 80079dc:	b510      	push	{r4, lr}
 80079de:	4b0b      	ldr	r3, [pc, #44]	@ (8007a0c <global_stdio_init.part.0+0x30>)
 80079e0:	4c0b      	ldr	r4, [pc, #44]	@ (8007a10 <global_stdio_init.part.0+0x34>)
 80079e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007a14 <global_stdio_init.part.0+0x38>)
 80079e4:	4620      	mov	r0, r4
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	2104      	movs	r1, #4
 80079ea:	2200      	movs	r2, #0
 80079ec:	f7ff ff94 	bl	8007918 <std>
 80079f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80079f4:	2201      	movs	r2, #1
 80079f6:	2109      	movs	r1, #9
 80079f8:	f7ff ff8e 	bl	8007918 <std>
 80079fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a00:	2202      	movs	r2, #2
 8007a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a06:	2112      	movs	r1, #18
 8007a08:	f7ff bf86 	b.w	8007918 <std>
 8007a0c:	20000784 	.word	0x20000784
 8007a10:	2000064c 	.word	0x2000064c
 8007a14:	08007985 	.word	0x08007985

08007a18 <__sfp_lock_acquire>:
 8007a18:	4801      	ldr	r0, [pc, #4]	@ (8007a20 <__sfp_lock_acquire+0x8>)
 8007a1a:	f000 b93c 	b.w	8007c96 <__retarget_lock_acquire_recursive>
 8007a1e:	bf00      	nop
 8007a20:	2000078d 	.word	0x2000078d

08007a24 <__sfp_lock_release>:
 8007a24:	4801      	ldr	r0, [pc, #4]	@ (8007a2c <__sfp_lock_release+0x8>)
 8007a26:	f000 b937 	b.w	8007c98 <__retarget_lock_release_recursive>
 8007a2a:	bf00      	nop
 8007a2c:	2000078d 	.word	0x2000078d

08007a30 <__sinit>:
 8007a30:	b510      	push	{r4, lr}
 8007a32:	4604      	mov	r4, r0
 8007a34:	f7ff fff0 	bl	8007a18 <__sfp_lock_acquire>
 8007a38:	6a23      	ldr	r3, [r4, #32]
 8007a3a:	b11b      	cbz	r3, 8007a44 <__sinit+0x14>
 8007a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a40:	f7ff bff0 	b.w	8007a24 <__sfp_lock_release>
 8007a44:	4b04      	ldr	r3, [pc, #16]	@ (8007a58 <__sinit+0x28>)
 8007a46:	6223      	str	r3, [r4, #32]
 8007a48:	4b04      	ldr	r3, [pc, #16]	@ (8007a5c <__sinit+0x2c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1f5      	bne.n	8007a3c <__sinit+0xc>
 8007a50:	f7ff ffc4 	bl	80079dc <global_stdio_init.part.0>
 8007a54:	e7f2      	b.n	8007a3c <__sinit+0xc>
 8007a56:	bf00      	nop
 8007a58:	0800799d 	.word	0x0800799d
 8007a5c:	20000784 	.word	0x20000784

08007a60 <_fwalk_sglue>:
 8007a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a64:	4607      	mov	r7, r0
 8007a66:	4688      	mov	r8, r1
 8007a68:	4614      	mov	r4, r2
 8007a6a:	2600      	movs	r6, #0
 8007a6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a70:	f1b9 0901 	subs.w	r9, r9, #1
 8007a74:	d505      	bpl.n	8007a82 <_fwalk_sglue+0x22>
 8007a76:	6824      	ldr	r4, [r4, #0]
 8007a78:	2c00      	cmp	r4, #0
 8007a7a:	d1f7      	bne.n	8007a6c <_fwalk_sglue+0xc>
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a82:	89ab      	ldrh	r3, [r5, #12]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d907      	bls.n	8007a98 <_fwalk_sglue+0x38>
 8007a88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	d003      	beq.n	8007a98 <_fwalk_sglue+0x38>
 8007a90:	4629      	mov	r1, r5
 8007a92:	4638      	mov	r0, r7
 8007a94:	47c0      	blx	r8
 8007a96:	4306      	orrs	r6, r0
 8007a98:	3568      	adds	r5, #104	@ 0x68
 8007a9a:	e7e9      	b.n	8007a70 <_fwalk_sglue+0x10>

08007a9c <__sread>:
 8007a9c:	b510      	push	{r4, lr}
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa4:	f000 f8a8 	bl	8007bf8 <_read_r>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	bfab      	itete	ge
 8007aac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007aae:	89a3      	ldrhlt	r3, [r4, #12]
 8007ab0:	181b      	addge	r3, r3, r0
 8007ab2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ab6:	bfac      	ite	ge
 8007ab8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007aba:	81a3      	strhlt	r3, [r4, #12]
 8007abc:	bd10      	pop	{r4, pc}

08007abe <__swrite>:
 8007abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac2:	461f      	mov	r7, r3
 8007ac4:	898b      	ldrh	r3, [r1, #12]
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	05db      	lsls	r3, r3, #23
 8007aca:	460c      	mov	r4, r1
 8007acc:	4616      	mov	r6, r2
 8007ace:	d505      	bpl.n	8007adc <__swrite+0x1e>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad8:	f000 f87c 	bl	8007bd4 <_lseek_r>
 8007adc:	89a3      	ldrh	r3, [r4, #12]
 8007ade:	4632      	mov	r2, r6
 8007ae0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ae4:	81a3      	strh	r3, [r4, #12]
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	463b      	mov	r3, r7
 8007aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007af2:	f000 b893 	b.w	8007c1c <_write_r>

08007af6 <__sseek>:
 8007af6:	b510      	push	{r4, lr}
 8007af8:	460c      	mov	r4, r1
 8007afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007afe:	f000 f869 	bl	8007bd4 <_lseek_r>
 8007b02:	1c43      	adds	r3, r0, #1
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	bf15      	itete	ne
 8007b08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b12:	81a3      	strheq	r3, [r4, #12]
 8007b14:	bf18      	it	ne
 8007b16:	81a3      	strhne	r3, [r4, #12]
 8007b18:	bd10      	pop	{r4, pc}

08007b1a <__sclose>:
 8007b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b1e:	f000 b849 	b.w	8007bb4 <_close_r>

08007b22 <_vsniprintf_r>:
 8007b22:	b530      	push	{r4, r5, lr}
 8007b24:	4614      	mov	r4, r2
 8007b26:	2c00      	cmp	r4, #0
 8007b28:	4605      	mov	r5, r0
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	b09b      	sub	sp, #108	@ 0x6c
 8007b2e:	da05      	bge.n	8007b3c <_vsniprintf_r+0x1a>
 8007b30:	238b      	movs	r3, #139	@ 0x8b
 8007b32:	6003      	str	r3, [r0, #0]
 8007b34:	f04f 30ff 	mov.w	r0, #4294967295
 8007b38:	b01b      	add	sp, #108	@ 0x6c
 8007b3a:	bd30      	pop	{r4, r5, pc}
 8007b3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007b40:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007b44:	f04f 0300 	mov.w	r3, #0
 8007b48:	9319      	str	r3, [sp, #100]	@ 0x64
 8007b4a:	bf0c      	ite	eq
 8007b4c:	4623      	moveq	r3, r4
 8007b4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b52:	9302      	str	r3, [sp, #8]
 8007b54:	9305      	str	r3, [sp, #20]
 8007b56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b5a:	9100      	str	r1, [sp, #0]
 8007b5c:	9104      	str	r1, [sp, #16]
 8007b5e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007b62:	4669      	mov	r1, sp
 8007b64:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007b66:	f001 fbd7 	bl	8009318 <_svfiprintf_r>
 8007b6a:	1c43      	adds	r3, r0, #1
 8007b6c:	bfbc      	itt	lt
 8007b6e:	238b      	movlt	r3, #139	@ 0x8b
 8007b70:	602b      	strlt	r3, [r5, #0]
 8007b72:	2c00      	cmp	r4, #0
 8007b74:	d0e0      	beq.n	8007b38 <_vsniprintf_r+0x16>
 8007b76:	2200      	movs	r2, #0
 8007b78:	9b00      	ldr	r3, [sp, #0]
 8007b7a:	701a      	strb	r2, [r3, #0]
 8007b7c:	e7dc      	b.n	8007b38 <_vsniprintf_r+0x16>
	...

08007b80 <vsniprintf>:
 8007b80:	b507      	push	{r0, r1, r2, lr}
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	4613      	mov	r3, r2
 8007b86:	460a      	mov	r2, r1
 8007b88:	4601      	mov	r1, r0
 8007b8a:	4803      	ldr	r0, [pc, #12]	@ (8007b98 <vsniprintf+0x18>)
 8007b8c:	6800      	ldr	r0, [r0, #0]
 8007b8e:	f7ff ffc8 	bl	8007b22 <_vsniprintf_r>
 8007b92:	b003      	add	sp, #12
 8007b94:	f85d fb04 	ldr.w	pc, [sp], #4
 8007b98:	2000003c 	.word	0x2000003c

08007b9c <memset>:
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	4402      	add	r2, r0
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d100      	bne.n	8007ba6 <memset+0xa>
 8007ba4:	4770      	bx	lr
 8007ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8007baa:	e7f9      	b.n	8007ba0 <memset+0x4>

08007bac <_localeconv_r>:
 8007bac:	4800      	ldr	r0, [pc, #0]	@ (8007bb0 <_localeconv_r+0x4>)
 8007bae:	4770      	bx	lr
 8007bb0:	2000017c 	.word	0x2000017c

08007bb4 <_close_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	4d05      	ldr	r5, [pc, #20]	@ (8007bd0 <_close_r+0x1c>)
 8007bba:	4604      	mov	r4, r0
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	602b      	str	r3, [r5, #0]
 8007bc0:	f7fc fbc7 	bl	8004352 <_close>
 8007bc4:	1c43      	adds	r3, r0, #1
 8007bc6:	d102      	bne.n	8007bce <_close_r+0x1a>
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	b103      	cbz	r3, 8007bce <_close_r+0x1a>
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
 8007bd0:	20000788 	.word	0x20000788

08007bd4 <_lseek_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	4608      	mov	r0, r1
 8007bda:	4611      	mov	r1, r2
 8007bdc:	2200      	movs	r2, #0
 8007bde:	4d05      	ldr	r5, [pc, #20]	@ (8007bf4 <_lseek_r+0x20>)
 8007be0:	602a      	str	r2, [r5, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	f7fc fbd9 	bl	800439a <_lseek>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d102      	bne.n	8007bf2 <_lseek_r+0x1e>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b103      	cbz	r3, 8007bf2 <_lseek_r+0x1e>
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	20000788 	.word	0x20000788

08007bf8 <_read_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	4611      	mov	r1, r2
 8007c00:	2200      	movs	r2, #0
 8007c02:	4d05      	ldr	r5, [pc, #20]	@ (8007c18 <_read_r+0x20>)
 8007c04:	602a      	str	r2, [r5, #0]
 8007c06:	461a      	mov	r2, r3
 8007c08:	f7fc fb6a 	bl	80042e0 <_read>
 8007c0c:	1c43      	adds	r3, r0, #1
 8007c0e:	d102      	bne.n	8007c16 <_read_r+0x1e>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	b103      	cbz	r3, 8007c16 <_read_r+0x1e>
 8007c14:	6023      	str	r3, [r4, #0]
 8007c16:	bd38      	pop	{r3, r4, r5, pc}
 8007c18:	20000788 	.word	0x20000788

08007c1c <_write_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4604      	mov	r4, r0
 8007c20:	4608      	mov	r0, r1
 8007c22:	4611      	mov	r1, r2
 8007c24:	2200      	movs	r2, #0
 8007c26:	4d05      	ldr	r5, [pc, #20]	@ (8007c3c <_write_r+0x20>)
 8007c28:	602a      	str	r2, [r5, #0]
 8007c2a:	461a      	mov	r2, r3
 8007c2c:	f7fc fb75 	bl	800431a <_write>
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	d102      	bne.n	8007c3a <_write_r+0x1e>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	b103      	cbz	r3, 8007c3a <_write_r+0x1e>
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	bd38      	pop	{r3, r4, r5, pc}
 8007c3c:	20000788 	.word	0x20000788

08007c40 <__errno>:
 8007c40:	4b01      	ldr	r3, [pc, #4]	@ (8007c48 <__errno+0x8>)
 8007c42:	6818      	ldr	r0, [r3, #0]
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	2000003c 	.word	0x2000003c

08007c4c <__libc_init_array>:
 8007c4c:	b570      	push	{r4, r5, r6, lr}
 8007c4e:	2600      	movs	r6, #0
 8007c50:	4d0c      	ldr	r5, [pc, #48]	@ (8007c84 <__libc_init_array+0x38>)
 8007c52:	4c0d      	ldr	r4, [pc, #52]	@ (8007c88 <__libc_init_array+0x3c>)
 8007c54:	1b64      	subs	r4, r4, r5
 8007c56:	10a4      	asrs	r4, r4, #2
 8007c58:	42a6      	cmp	r6, r4
 8007c5a:	d109      	bne.n	8007c70 <__libc_init_array+0x24>
 8007c5c:	f002 f874 	bl	8009d48 <_init>
 8007c60:	2600      	movs	r6, #0
 8007c62:	4d0a      	ldr	r5, [pc, #40]	@ (8007c8c <__libc_init_array+0x40>)
 8007c64:	4c0a      	ldr	r4, [pc, #40]	@ (8007c90 <__libc_init_array+0x44>)
 8007c66:	1b64      	subs	r4, r4, r5
 8007c68:	10a4      	asrs	r4, r4, #2
 8007c6a:	42a6      	cmp	r6, r4
 8007c6c:	d105      	bne.n	8007c7a <__libc_init_array+0x2e>
 8007c6e:	bd70      	pop	{r4, r5, r6, pc}
 8007c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c74:	4798      	blx	r3
 8007c76:	3601      	adds	r6, #1
 8007c78:	e7ee      	b.n	8007c58 <__libc_init_array+0xc>
 8007c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c7e:	4798      	blx	r3
 8007c80:	3601      	adds	r6, #1
 8007c82:	e7f2      	b.n	8007c6a <__libc_init_array+0x1e>
 8007c84:	0800abbc 	.word	0x0800abbc
 8007c88:	0800abbc 	.word	0x0800abbc
 8007c8c:	0800abbc 	.word	0x0800abbc
 8007c90:	0800abc0 	.word	0x0800abc0

08007c94 <__retarget_lock_init_recursive>:
 8007c94:	4770      	bx	lr

08007c96 <__retarget_lock_acquire_recursive>:
 8007c96:	4770      	bx	lr

08007c98 <__retarget_lock_release_recursive>:
 8007c98:	4770      	bx	lr

08007c9a <memchr>:
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	b2c9      	uxtb	r1, r1
 8007ca0:	4402      	add	r2, r0
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	d101      	bne.n	8007cac <memchr+0x12>
 8007ca8:	2000      	movs	r0, #0
 8007caa:	e003      	b.n	8007cb4 <memchr+0x1a>
 8007cac:	7804      	ldrb	r4, [r0, #0]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	428c      	cmp	r4, r1
 8007cb2:	d1f6      	bne.n	8007ca2 <memchr+0x8>
 8007cb4:	bd10      	pop	{r4, pc}

08007cb6 <quorem>:
 8007cb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cba:	6903      	ldr	r3, [r0, #16]
 8007cbc:	690c      	ldr	r4, [r1, #16]
 8007cbe:	4607      	mov	r7, r0
 8007cc0:	42a3      	cmp	r3, r4
 8007cc2:	db7e      	blt.n	8007dc2 <quorem+0x10c>
 8007cc4:	3c01      	subs	r4, #1
 8007cc6:	00a3      	lsls	r3, r4, #2
 8007cc8:	f100 0514 	add.w	r5, r0, #20
 8007ccc:	f101 0814 	add.w	r8, r1, #20
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cd6:	9301      	str	r3, [sp, #4]
 8007cd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007cdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ce0:	3301      	adds	r3, #1
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ce8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007cec:	d32e      	bcc.n	8007d4c <quorem+0x96>
 8007cee:	f04f 0a00 	mov.w	sl, #0
 8007cf2:	46c4      	mov	ip, r8
 8007cf4:	46ae      	mov	lr, r5
 8007cf6:	46d3      	mov	fp, sl
 8007cf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007cfc:	b298      	uxth	r0, r3
 8007cfe:	fb06 a000 	mla	r0, r6, r0, sl
 8007d02:	0c1b      	lsrs	r3, r3, #16
 8007d04:	0c02      	lsrs	r2, r0, #16
 8007d06:	fb06 2303 	mla	r3, r6, r3, r2
 8007d0a:	f8de 2000 	ldr.w	r2, [lr]
 8007d0e:	b280      	uxth	r0, r0
 8007d10:	b292      	uxth	r2, r2
 8007d12:	1a12      	subs	r2, r2, r0
 8007d14:	445a      	add	r2, fp
 8007d16:	f8de 0000 	ldr.w	r0, [lr]
 8007d1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d24:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d28:	b292      	uxth	r2, r2
 8007d2a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d2e:	45e1      	cmp	r9, ip
 8007d30:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d34:	f84e 2b04 	str.w	r2, [lr], #4
 8007d38:	d2de      	bcs.n	8007cf8 <quorem+0x42>
 8007d3a:	9b00      	ldr	r3, [sp, #0]
 8007d3c:	58eb      	ldr	r3, [r5, r3]
 8007d3e:	b92b      	cbnz	r3, 8007d4c <quorem+0x96>
 8007d40:	9b01      	ldr	r3, [sp, #4]
 8007d42:	3b04      	subs	r3, #4
 8007d44:	429d      	cmp	r5, r3
 8007d46:	461a      	mov	r2, r3
 8007d48:	d32f      	bcc.n	8007daa <quorem+0xf4>
 8007d4a:	613c      	str	r4, [r7, #16]
 8007d4c:	4638      	mov	r0, r7
 8007d4e:	f001 f97f 	bl	8009050 <__mcmp>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	db25      	blt.n	8007da2 <quorem+0xec>
 8007d56:	4629      	mov	r1, r5
 8007d58:	2000      	movs	r0, #0
 8007d5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d5e:	f8d1 c000 	ldr.w	ip, [r1]
 8007d62:	fa1f fe82 	uxth.w	lr, r2
 8007d66:	fa1f f38c 	uxth.w	r3, ip
 8007d6a:	eba3 030e 	sub.w	r3, r3, lr
 8007d6e:	4403      	add	r3, r0
 8007d70:	0c12      	lsrs	r2, r2, #16
 8007d72:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007d76:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d80:	45c1      	cmp	r9, r8
 8007d82:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007d86:	f841 3b04 	str.w	r3, [r1], #4
 8007d8a:	d2e6      	bcs.n	8007d5a <quorem+0xa4>
 8007d8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d94:	b922      	cbnz	r2, 8007da0 <quorem+0xea>
 8007d96:	3b04      	subs	r3, #4
 8007d98:	429d      	cmp	r5, r3
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	d30b      	bcc.n	8007db6 <quorem+0x100>
 8007d9e:	613c      	str	r4, [r7, #16]
 8007da0:	3601      	adds	r6, #1
 8007da2:	4630      	mov	r0, r6
 8007da4:	b003      	add	sp, #12
 8007da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007daa:	6812      	ldr	r2, [r2, #0]
 8007dac:	3b04      	subs	r3, #4
 8007dae:	2a00      	cmp	r2, #0
 8007db0:	d1cb      	bne.n	8007d4a <quorem+0x94>
 8007db2:	3c01      	subs	r4, #1
 8007db4:	e7c6      	b.n	8007d44 <quorem+0x8e>
 8007db6:	6812      	ldr	r2, [r2, #0]
 8007db8:	3b04      	subs	r3, #4
 8007dba:	2a00      	cmp	r2, #0
 8007dbc:	d1ef      	bne.n	8007d9e <quorem+0xe8>
 8007dbe:	3c01      	subs	r4, #1
 8007dc0:	e7ea      	b.n	8007d98 <quorem+0xe2>
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	e7ee      	b.n	8007da4 <quorem+0xee>
	...

08007dc8 <_dtoa_r>:
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	4614      	mov	r4, r2
 8007dce:	461d      	mov	r5, r3
 8007dd0:	69c7      	ldr	r7, [r0, #28]
 8007dd2:	b097      	sub	sp, #92	@ 0x5c
 8007dd4:	4681      	mov	r9, r0
 8007dd6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007dda:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007ddc:	b97f      	cbnz	r7, 8007dfe <_dtoa_r+0x36>
 8007dde:	2010      	movs	r0, #16
 8007de0:	f000 fe0e 	bl	8008a00 <malloc>
 8007de4:	4602      	mov	r2, r0
 8007de6:	f8c9 001c 	str.w	r0, [r9, #28]
 8007dea:	b920      	cbnz	r0, 8007df6 <_dtoa_r+0x2e>
 8007dec:	21ef      	movs	r1, #239	@ 0xef
 8007dee:	4bac      	ldr	r3, [pc, #688]	@ (80080a0 <_dtoa_r+0x2d8>)
 8007df0:	48ac      	ldr	r0, [pc, #688]	@ (80080a4 <_dtoa_r+0x2dc>)
 8007df2:	f001 fc6d 	bl	80096d0 <__assert_func>
 8007df6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007dfa:	6007      	str	r7, [r0, #0]
 8007dfc:	60c7      	str	r7, [r0, #12]
 8007dfe:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e02:	6819      	ldr	r1, [r3, #0]
 8007e04:	b159      	cbz	r1, 8007e1e <_dtoa_r+0x56>
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	2301      	movs	r3, #1
 8007e0a:	4093      	lsls	r3, r2
 8007e0c:	604a      	str	r2, [r1, #4]
 8007e0e:	608b      	str	r3, [r1, #8]
 8007e10:	4648      	mov	r0, r9
 8007e12:	f000 feeb 	bl	8008bec <_Bfree>
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	1e2b      	subs	r3, r5, #0
 8007e20:	bfaf      	iteee	ge
 8007e22:	2300      	movge	r3, #0
 8007e24:	2201      	movlt	r2, #1
 8007e26:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e2a:	9307      	strlt	r3, [sp, #28]
 8007e2c:	bfa8      	it	ge
 8007e2e:	6033      	strge	r3, [r6, #0]
 8007e30:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007e34:	4b9c      	ldr	r3, [pc, #624]	@ (80080a8 <_dtoa_r+0x2e0>)
 8007e36:	bfb8      	it	lt
 8007e38:	6032      	strlt	r2, [r6, #0]
 8007e3a:	ea33 0308 	bics.w	r3, r3, r8
 8007e3e:	d112      	bne.n	8007e66 <_dtoa_r+0x9e>
 8007e40:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e44:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007e46:	6013      	str	r3, [r2, #0]
 8007e48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007e4c:	4323      	orrs	r3, r4
 8007e4e:	f000 855e 	beq.w	800890e <_dtoa_r+0xb46>
 8007e52:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80080ac <_dtoa_r+0x2e4>
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 8560 	beq.w	800891e <_dtoa_r+0xb56>
 8007e5e:	f10a 0303 	add.w	r3, sl, #3
 8007e62:	f000 bd5a 	b.w	800891a <_dtoa_r+0xb52>
 8007e66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e6a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007e6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e72:	2200      	movs	r2, #0
 8007e74:	2300      	movs	r3, #0
 8007e76:	f7f8 fd97 	bl	80009a8 <__aeabi_dcmpeq>
 8007e7a:	4607      	mov	r7, r0
 8007e7c:	b158      	cbz	r0, 8007e96 <_dtoa_r+0xce>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007e86:	b113      	cbz	r3, 8007e8e <_dtoa_r+0xc6>
 8007e88:	4b89      	ldr	r3, [pc, #548]	@ (80080b0 <_dtoa_r+0x2e8>)
 8007e8a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80080b4 <_dtoa_r+0x2ec>
 8007e92:	f000 bd44 	b.w	800891e <_dtoa_r+0xb56>
 8007e96:	ab14      	add	r3, sp, #80	@ 0x50
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	ab15      	add	r3, sp, #84	@ 0x54
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	4648      	mov	r0, r9
 8007ea0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007ea4:	f001 f984 	bl	80091b0 <__d2b>
 8007ea8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007eac:	9003      	str	r0, [sp, #12]
 8007eae:	2e00      	cmp	r6, #0
 8007eb0:	d078      	beq.n	8007fa4 <_dtoa_r+0x1dc>
 8007eb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007eb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007eb8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ec0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ec4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007ec8:	9712      	str	r7, [sp, #72]	@ 0x48
 8007eca:	4619      	mov	r1, r3
 8007ecc:	2200      	movs	r2, #0
 8007ece:	4b7a      	ldr	r3, [pc, #488]	@ (80080b8 <_dtoa_r+0x2f0>)
 8007ed0:	f7f8 f94a 	bl	8000168 <__aeabi_dsub>
 8007ed4:	a36c      	add	r3, pc, #432	@ (adr r3, 8008088 <_dtoa_r+0x2c0>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	f7f8 fafd 	bl	80004d8 <__aeabi_dmul>
 8007ede:	a36c      	add	r3, pc, #432	@ (adr r3, 8008090 <_dtoa_r+0x2c8>)
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	f7f8 f942 	bl	800016c <__adddf3>
 8007ee8:	4604      	mov	r4, r0
 8007eea:	4630      	mov	r0, r6
 8007eec:	460d      	mov	r5, r1
 8007eee:	f7f8 fa89 	bl	8000404 <__aeabi_i2d>
 8007ef2:	a369      	add	r3, pc, #420	@ (adr r3, 8008098 <_dtoa_r+0x2d0>)
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f7f8 faee 	bl	80004d8 <__aeabi_dmul>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4620      	mov	r0, r4
 8007f02:	4629      	mov	r1, r5
 8007f04:	f7f8 f932 	bl	800016c <__adddf3>
 8007f08:	4604      	mov	r4, r0
 8007f0a:	460d      	mov	r5, r1
 8007f0c:	f7f8 fd94 	bl	8000a38 <__aeabi_d2iz>
 8007f10:	2200      	movs	r2, #0
 8007f12:	4607      	mov	r7, r0
 8007f14:	2300      	movs	r3, #0
 8007f16:	4620      	mov	r0, r4
 8007f18:	4629      	mov	r1, r5
 8007f1a:	f7f8 fd4f 	bl	80009bc <__aeabi_dcmplt>
 8007f1e:	b140      	cbz	r0, 8007f32 <_dtoa_r+0x16a>
 8007f20:	4638      	mov	r0, r7
 8007f22:	f7f8 fa6f 	bl	8000404 <__aeabi_i2d>
 8007f26:	4622      	mov	r2, r4
 8007f28:	462b      	mov	r3, r5
 8007f2a:	f7f8 fd3d 	bl	80009a8 <__aeabi_dcmpeq>
 8007f2e:	b900      	cbnz	r0, 8007f32 <_dtoa_r+0x16a>
 8007f30:	3f01      	subs	r7, #1
 8007f32:	2f16      	cmp	r7, #22
 8007f34:	d854      	bhi.n	8007fe0 <_dtoa_r+0x218>
 8007f36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f3a:	4b60      	ldr	r3, [pc, #384]	@ (80080bc <_dtoa_r+0x2f4>)
 8007f3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	f7f8 fd3a 	bl	80009bc <__aeabi_dcmplt>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d04b      	beq.n	8007fe4 <_dtoa_r+0x21c>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	3f01      	subs	r7, #1
 8007f50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f52:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f54:	1b9b      	subs	r3, r3, r6
 8007f56:	1e5a      	subs	r2, r3, #1
 8007f58:	bf49      	itett	mi
 8007f5a:	f1c3 0301 	rsbmi	r3, r3, #1
 8007f5e:	2300      	movpl	r3, #0
 8007f60:	9304      	strmi	r3, [sp, #16]
 8007f62:	2300      	movmi	r3, #0
 8007f64:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f66:	bf54      	ite	pl
 8007f68:	9304      	strpl	r3, [sp, #16]
 8007f6a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007f6c:	2f00      	cmp	r7, #0
 8007f6e:	db3b      	blt.n	8007fe8 <_dtoa_r+0x220>
 8007f70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f72:	970e      	str	r7, [sp, #56]	@ 0x38
 8007f74:	443b      	add	r3, r7
 8007f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f78:	2300      	movs	r3, #0
 8007f7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f7e:	2b09      	cmp	r3, #9
 8007f80:	d865      	bhi.n	800804e <_dtoa_r+0x286>
 8007f82:	2b05      	cmp	r3, #5
 8007f84:	bfc4      	itt	gt
 8007f86:	3b04      	subgt	r3, #4
 8007f88:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007f8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f8c:	bfc8      	it	gt
 8007f8e:	2400      	movgt	r4, #0
 8007f90:	f1a3 0302 	sub.w	r3, r3, #2
 8007f94:	bfd8      	it	le
 8007f96:	2401      	movle	r4, #1
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	d864      	bhi.n	8008066 <_dtoa_r+0x29e>
 8007f9c:	e8df f003 	tbb	[pc, r3]
 8007fa0:	2c385553 	.word	0x2c385553
 8007fa4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007fa8:	441e      	add	r6, r3
 8007faa:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007fae:	2b20      	cmp	r3, #32
 8007fb0:	bfc1      	itttt	gt
 8007fb2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007fb6:	fa08 f803 	lslgt.w	r8, r8, r3
 8007fba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007fbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007fc2:	bfd6      	itet	le
 8007fc4:	f1c3 0320 	rsble	r3, r3, #32
 8007fc8:	ea48 0003 	orrgt.w	r0, r8, r3
 8007fcc:	fa04 f003 	lslle.w	r0, r4, r3
 8007fd0:	f7f8 fa08 	bl	80003e4 <__aeabi_ui2d>
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007fda:	3e01      	subs	r6, #1
 8007fdc:	9212      	str	r2, [sp, #72]	@ 0x48
 8007fde:	e774      	b.n	8007eca <_dtoa_r+0x102>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e7b5      	b.n	8007f50 <_dtoa_r+0x188>
 8007fe4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007fe6:	e7b4      	b.n	8007f52 <_dtoa_r+0x18a>
 8007fe8:	9b04      	ldr	r3, [sp, #16]
 8007fea:	1bdb      	subs	r3, r3, r7
 8007fec:	9304      	str	r3, [sp, #16]
 8007fee:	427b      	negs	r3, r7
 8007ff0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	930e      	str	r3, [sp, #56]	@ 0x38
 8007ff6:	e7c1      	b.n	8007f7c <_dtoa_r+0x1b4>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ffc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ffe:	eb07 0b03 	add.w	fp, r7, r3
 8008002:	f10b 0301 	add.w	r3, fp, #1
 8008006:	2b01      	cmp	r3, #1
 8008008:	9308      	str	r3, [sp, #32]
 800800a:	bfb8      	it	lt
 800800c:	2301      	movlt	r3, #1
 800800e:	e006      	b.n	800801e <_dtoa_r+0x256>
 8008010:	2301      	movs	r3, #1
 8008012:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008014:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008016:	2b00      	cmp	r3, #0
 8008018:	dd28      	ble.n	800806c <_dtoa_r+0x2a4>
 800801a:	469b      	mov	fp, r3
 800801c:	9308      	str	r3, [sp, #32]
 800801e:	2100      	movs	r1, #0
 8008020:	2204      	movs	r2, #4
 8008022:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008026:	f102 0514 	add.w	r5, r2, #20
 800802a:	429d      	cmp	r5, r3
 800802c:	d926      	bls.n	800807c <_dtoa_r+0x2b4>
 800802e:	6041      	str	r1, [r0, #4]
 8008030:	4648      	mov	r0, r9
 8008032:	f000 fd9b 	bl	8008b6c <_Balloc>
 8008036:	4682      	mov	sl, r0
 8008038:	2800      	cmp	r0, #0
 800803a:	d143      	bne.n	80080c4 <_dtoa_r+0x2fc>
 800803c:	4602      	mov	r2, r0
 800803e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008042:	4b1f      	ldr	r3, [pc, #124]	@ (80080c0 <_dtoa_r+0x2f8>)
 8008044:	e6d4      	b.n	8007df0 <_dtoa_r+0x28>
 8008046:	2300      	movs	r3, #0
 8008048:	e7e3      	b.n	8008012 <_dtoa_r+0x24a>
 800804a:	2300      	movs	r3, #0
 800804c:	e7d5      	b.n	8007ffa <_dtoa_r+0x232>
 800804e:	2401      	movs	r4, #1
 8008050:	2300      	movs	r3, #0
 8008052:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008054:	9320      	str	r3, [sp, #128]	@ 0x80
 8008056:	f04f 3bff 	mov.w	fp, #4294967295
 800805a:	2200      	movs	r2, #0
 800805c:	2312      	movs	r3, #18
 800805e:	f8cd b020 	str.w	fp, [sp, #32]
 8008062:	9221      	str	r2, [sp, #132]	@ 0x84
 8008064:	e7db      	b.n	800801e <_dtoa_r+0x256>
 8008066:	2301      	movs	r3, #1
 8008068:	930b      	str	r3, [sp, #44]	@ 0x2c
 800806a:	e7f4      	b.n	8008056 <_dtoa_r+0x28e>
 800806c:	f04f 0b01 	mov.w	fp, #1
 8008070:	465b      	mov	r3, fp
 8008072:	f8cd b020 	str.w	fp, [sp, #32]
 8008076:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800807a:	e7d0      	b.n	800801e <_dtoa_r+0x256>
 800807c:	3101      	adds	r1, #1
 800807e:	0052      	lsls	r2, r2, #1
 8008080:	e7d1      	b.n	8008026 <_dtoa_r+0x25e>
 8008082:	bf00      	nop
 8008084:	f3af 8000 	nop.w
 8008088:	636f4361 	.word	0x636f4361
 800808c:	3fd287a7 	.word	0x3fd287a7
 8008090:	8b60c8b3 	.word	0x8b60c8b3
 8008094:	3fc68a28 	.word	0x3fc68a28
 8008098:	509f79fb 	.word	0x509f79fb
 800809c:	3fd34413 	.word	0x3fd34413
 80080a0:	0800a881 	.word	0x0800a881
 80080a4:	0800a898 	.word	0x0800a898
 80080a8:	7ff00000 	.word	0x7ff00000
 80080ac:	0800a87d 	.word	0x0800a87d
 80080b0:	0800a851 	.word	0x0800a851
 80080b4:	0800a850 	.word	0x0800a850
 80080b8:	3ff80000 	.word	0x3ff80000
 80080bc:	0800a9e8 	.word	0x0800a9e8
 80080c0:	0800a8f0 	.word	0x0800a8f0
 80080c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80080c8:	6018      	str	r0, [r3, #0]
 80080ca:	9b08      	ldr	r3, [sp, #32]
 80080cc:	2b0e      	cmp	r3, #14
 80080ce:	f200 80a1 	bhi.w	8008214 <_dtoa_r+0x44c>
 80080d2:	2c00      	cmp	r4, #0
 80080d4:	f000 809e 	beq.w	8008214 <_dtoa_r+0x44c>
 80080d8:	2f00      	cmp	r7, #0
 80080da:	dd33      	ble.n	8008144 <_dtoa_r+0x37c>
 80080dc:	4b9c      	ldr	r3, [pc, #624]	@ (8008350 <_dtoa_r+0x588>)
 80080de:	f007 020f 	and.w	r2, r7, #15
 80080e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080e6:	05f8      	lsls	r0, r7, #23
 80080e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80080ec:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80080f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80080f4:	d516      	bpl.n	8008124 <_dtoa_r+0x35c>
 80080f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080fa:	4b96      	ldr	r3, [pc, #600]	@ (8008354 <_dtoa_r+0x58c>)
 80080fc:	2603      	movs	r6, #3
 80080fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008102:	f7f8 fb13 	bl	800072c <__aeabi_ddiv>
 8008106:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800810a:	f004 040f 	and.w	r4, r4, #15
 800810e:	4d91      	ldr	r5, [pc, #580]	@ (8008354 <_dtoa_r+0x58c>)
 8008110:	b954      	cbnz	r4, 8008128 <_dtoa_r+0x360>
 8008112:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800811a:	f7f8 fb07 	bl	800072c <__aeabi_ddiv>
 800811e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008122:	e028      	b.n	8008176 <_dtoa_r+0x3ae>
 8008124:	2602      	movs	r6, #2
 8008126:	e7f2      	b.n	800810e <_dtoa_r+0x346>
 8008128:	07e1      	lsls	r1, r4, #31
 800812a:	d508      	bpl.n	800813e <_dtoa_r+0x376>
 800812c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008130:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008134:	f7f8 f9d0 	bl	80004d8 <__aeabi_dmul>
 8008138:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800813c:	3601      	adds	r6, #1
 800813e:	1064      	asrs	r4, r4, #1
 8008140:	3508      	adds	r5, #8
 8008142:	e7e5      	b.n	8008110 <_dtoa_r+0x348>
 8008144:	f000 80af 	beq.w	80082a6 <_dtoa_r+0x4de>
 8008148:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800814c:	427c      	negs	r4, r7
 800814e:	4b80      	ldr	r3, [pc, #512]	@ (8008350 <_dtoa_r+0x588>)
 8008150:	f004 020f 	and.w	r2, r4, #15
 8008154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815c:	f7f8 f9bc 	bl	80004d8 <__aeabi_dmul>
 8008160:	2602      	movs	r6, #2
 8008162:	2300      	movs	r3, #0
 8008164:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008168:	4d7a      	ldr	r5, [pc, #488]	@ (8008354 <_dtoa_r+0x58c>)
 800816a:	1124      	asrs	r4, r4, #4
 800816c:	2c00      	cmp	r4, #0
 800816e:	f040 808f 	bne.w	8008290 <_dtoa_r+0x4c8>
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1d3      	bne.n	800811e <_dtoa_r+0x356>
 8008176:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800817a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 8094 	beq.w	80082aa <_dtoa_r+0x4e2>
 8008182:	2200      	movs	r2, #0
 8008184:	4620      	mov	r0, r4
 8008186:	4629      	mov	r1, r5
 8008188:	4b73      	ldr	r3, [pc, #460]	@ (8008358 <_dtoa_r+0x590>)
 800818a:	f7f8 fc17 	bl	80009bc <__aeabi_dcmplt>
 800818e:	2800      	cmp	r0, #0
 8008190:	f000 808b 	beq.w	80082aa <_dtoa_r+0x4e2>
 8008194:	9b08      	ldr	r3, [sp, #32]
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 8087 	beq.w	80082aa <_dtoa_r+0x4e2>
 800819c:	f1bb 0f00 	cmp.w	fp, #0
 80081a0:	dd34      	ble.n	800820c <_dtoa_r+0x444>
 80081a2:	4620      	mov	r0, r4
 80081a4:	2200      	movs	r2, #0
 80081a6:	4629      	mov	r1, r5
 80081a8:	4b6c      	ldr	r3, [pc, #432]	@ (800835c <_dtoa_r+0x594>)
 80081aa:	f7f8 f995 	bl	80004d8 <__aeabi_dmul>
 80081ae:	465c      	mov	r4, fp
 80081b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80081b4:	f107 38ff 	add.w	r8, r7, #4294967295
 80081b8:	3601      	adds	r6, #1
 80081ba:	4630      	mov	r0, r6
 80081bc:	f7f8 f922 	bl	8000404 <__aeabi_i2d>
 80081c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081c4:	f7f8 f988 	bl	80004d8 <__aeabi_dmul>
 80081c8:	2200      	movs	r2, #0
 80081ca:	4b65      	ldr	r3, [pc, #404]	@ (8008360 <_dtoa_r+0x598>)
 80081cc:	f7f7 ffce 	bl	800016c <__adddf3>
 80081d0:	4605      	mov	r5, r0
 80081d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80081d6:	2c00      	cmp	r4, #0
 80081d8:	d16a      	bne.n	80082b0 <_dtoa_r+0x4e8>
 80081da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081de:	2200      	movs	r2, #0
 80081e0:	4b60      	ldr	r3, [pc, #384]	@ (8008364 <_dtoa_r+0x59c>)
 80081e2:	f7f7 ffc1 	bl	8000168 <__aeabi_dsub>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081ee:	462a      	mov	r2, r5
 80081f0:	4633      	mov	r3, r6
 80081f2:	f7f8 fc01 	bl	80009f8 <__aeabi_dcmpgt>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	f040 8298 	bne.w	800872c <_dtoa_r+0x964>
 80081fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008200:	462a      	mov	r2, r5
 8008202:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008206:	f7f8 fbd9 	bl	80009bc <__aeabi_dcmplt>
 800820a:	bb38      	cbnz	r0, 800825c <_dtoa_r+0x494>
 800820c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008210:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008214:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008216:	2b00      	cmp	r3, #0
 8008218:	f2c0 8157 	blt.w	80084ca <_dtoa_r+0x702>
 800821c:	2f0e      	cmp	r7, #14
 800821e:	f300 8154 	bgt.w	80084ca <_dtoa_r+0x702>
 8008222:	4b4b      	ldr	r3, [pc, #300]	@ (8008350 <_dtoa_r+0x588>)
 8008224:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008228:	e9d3 3400 	ldrd	r3, r4, [r3]
 800822c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008230:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008232:	2b00      	cmp	r3, #0
 8008234:	f280 80e5 	bge.w	8008402 <_dtoa_r+0x63a>
 8008238:	9b08      	ldr	r3, [sp, #32]
 800823a:	2b00      	cmp	r3, #0
 800823c:	f300 80e1 	bgt.w	8008402 <_dtoa_r+0x63a>
 8008240:	d10c      	bne.n	800825c <_dtoa_r+0x494>
 8008242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008246:	2200      	movs	r2, #0
 8008248:	4b46      	ldr	r3, [pc, #280]	@ (8008364 <_dtoa_r+0x59c>)
 800824a:	f7f8 f945 	bl	80004d8 <__aeabi_dmul>
 800824e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008252:	f7f8 fbc7 	bl	80009e4 <__aeabi_dcmpge>
 8008256:	2800      	cmp	r0, #0
 8008258:	f000 8266 	beq.w	8008728 <_dtoa_r+0x960>
 800825c:	2400      	movs	r4, #0
 800825e:	4625      	mov	r5, r4
 8008260:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008262:	4656      	mov	r6, sl
 8008264:	ea6f 0803 	mvn.w	r8, r3
 8008268:	2700      	movs	r7, #0
 800826a:	4621      	mov	r1, r4
 800826c:	4648      	mov	r0, r9
 800826e:	f000 fcbd 	bl	8008bec <_Bfree>
 8008272:	2d00      	cmp	r5, #0
 8008274:	f000 80bd 	beq.w	80083f2 <_dtoa_r+0x62a>
 8008278:	b12f      	cbz	r7, 8008286 <_dtoa_r+0x4be>
 800827a:	42af      	cmp	r7, r5
 800827c:	d003      	beq.n	8008286 <_dtoa_r+0x4be>
 800827e:	4639      	mov	r1, r7
 8008280:	4648      	mov	r0, r9
 8008282:	f000 fcb3 	bl	8008bec <_Bfree>
 8008286:	4629      	mov	r1, r5
 8008288:	4648      	mov	r0, r9
 800828a:	f000 fcaf 	bl	8008bec <_Bfree>
 800828e:	e0b0      	b.n	80083f2 <_dtoa_r+0x62a>
 8008290:	07e2      	lsls	r2, r4, #31
 8008292:	d505      	bpl.n	80082a0 <_dtoa_r+0x4d8>
 8008294:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008298:	f7f8 f91e 	bl	80004d8 <__aeabi_dmul>
 800829c:	2301      	movs	r3, #1
 800829e:	3601      	adds	r6, #1
 80082a0:	1064      	asrs	r4, r4, #1
 80082a2:	3508      	adds	r5, #8
 80082a4:	e762      	b.n	800816c <_dtoa_r+0x3a4>
 80082a6:	2602      	movs	r6, #2
 80082a8:	e765      	b.n	8008176 <_dtoa_r+0x3ae>
 80082aa:	46b8      	mov	r8, r7
 80082ac:	9c08      	ldr	r4, [sp, #32]
 80082ae:	e784      	b.n	80081ba <_dtoa_r+0x3f2>
 80082b0:	4b27      	ldr	r3, [pc, #156]	@ (8008350 <_dtoa_r+0x588>)
 80082b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80082b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80082bc:	4454      	add	r4, sl
 80082be:	2900      	cmp	r1, #0
 80082c0:	d054      	beq.n	800836c <_dtoa_r+0x5a4>
 80082c2:	2000      	movs	r0, #0
 80082c4:	4928      	ldr	r1, [pc, #160]	@ (8008368 <_dtoa_r+0x5a0>)
 80082c6:	f7f8 fa31 	bl	800072c <__aeabi_ddiv>
 80082ca:	4633      	mov	r3, r6
 80082cc:	462a      	mov	r2, r5
 80082ce:	f7f7 ff4b 	bl	8000168 <__aeabi_dsub>
 80082d2:	4656      	mov	r6, sl
 80082d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082dc:	f7f8 fbac 	bl	8000a38 <__aeabi_d2iz>
 80082e0:	4605      	mov	r5, r0
 80082e2:	f7f8 f88f 	bl	8000404 <__aeabi_i2d>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082ee:	f7f7 ff3b 	bl	8000168 <__aeabi_dsub>
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	3530      	adds	r5, #48	@ 0x30
 80082f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80082fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008300:	f806 5b01 	strb.w	r5, [r6], #1
 8008304:	f7f8 fb5a 	bl	80009bc <__aeabi_dcmplt>
 8008308:	2800      	cmp	r0, #0
 800830a:	d172      	bne.n	80083f2 <_dtoa_r+0x62a>
 800830c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008310:	2000      	movs	r0, #0
 8008312:	4911      	ldr	r1, [pc, #68]	@ (8008358 <_dtoa_r+0x590>)
 8008314:	f7f7 ff28 	bl	8000168 <__aeabi_dsub>
 8008318:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800831c:	f7f8 fb4e 	bl	80009bc <__aeabi_dcmplt>
 8008320:	2800      	cmp	r0, #0
 8008322:	f040 80b4 	bne.w	800848e <_dtoa_r+0x6c6>
 8008326:	42a6      	cmp	r6, r4
 8008328:	f43f af70 	beq.w	800820c <_dtoa_r+0x444>
 800832c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008330:	2200      	movs	r2, #0
 8008332:	4b0a      	ldr	r3, [pc, #40]	@ (800835c <_dtoa_r+0x594>)
 8008334:	f7f8 f8d0 	bl	80004d8 <__aeabi_dmul>
 8008338:	2200      	movs	r2, #0
 800833a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800833e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008342:	4b06      	ldr	r3, [pc, #24]	@ (800835c <_dtoa_r+0x594>)
 8008344:	f7f8 f8c8 	bl	80004d8 <__aeabi_dmul>
 8008348:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800834c:	e7c4      	b.n	80082d8 <_dtoa_r+0x510>
 800834e:	bf00      	nop
 8008350:	0800a9e8 	.word	0x0800a9e8
 8008354:	0800a9c0 	.word	0x0800a9c0
 8008358:	3ff00000 	.word	0x3ff00000
 800835c:	40240000 	.word	0x40240000
 8008360:	401c0000 	.word	0x401c0000
 8008364:	40140000 	.word	0x40140000
 8008368:	3fe00000 	.word	0x3fe00000
 800836c:	4631      	mov	r1, r6
 800836e:	4628      	mov	r0, r5
 8008370:	f7f8 f8b2 	bl	80004d8 <__aeabi_dmul>
 8008374:	4656      	mov	r6, sl
 8008376:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800837a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800837c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008380:	f7f8 fb5a 	bl	8000a38 <__aeabi_d2iz>
 8008384:	4605      	mov	r5, r0
 8008386:	f7f8 f83d 	bl	8000404 <__aeabi_i2d>
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008392:	f7f7 fee9 	bl	8000168 <__aeabi_dsub>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	3530      	adds	r5, #48	@ 0x30
 800839c:	f806 5b01 	strb.w	r5, [r6], #1
 80083a0:	42a6      	cmp	r6, r4
 80083a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80083a6:	f04f 0200 	mov.w	r2, #0
 80083aa:	d124      	bne.n	80083f6 <_dtoa_r+0x62e>
 80083ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80083b0:	4bae      	ldr	r3, [pc, #696]	@ (800866c <_dtoa_r+0x8a4>)
 80083b2:	f7f7 fedb 	bl	800016c <__adddf3>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083be:	f7f8 fb1b 	bl	80009f8 <__aeabi_dcmpgt>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	d163      	bne.n	800848e <_dtoa_r+0x6c6>
 80083c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083ca:	2000      	movs	r0, #0
 80083cc:	49a7      	ldr	r1, [pc, #668]	@ (800866c <_dtoa_r+0x8a4>)
 80083ce:	f7f7 fecb 	bl	8000168 <__aeabi_dsub>
 80083d2:	4602      	mov	r2, r0
 80083d4:	460b      	mov	r3, r1
 80083d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083da:	f7f8 faef 	bl	80009bc <__aeabi_dcmplt>
 80083de:	2800      	cmp	r0, #0
 80083e0:	f43f af14 	beq.w	800820c <_dtoa_r+0x444>
 80083e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80083e6:	1e73      	subs	r3, r6, #1
 80083e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80083ee:	2b30      	cmp	r3, #48	@ 0x30
 80083f0:	d0f8      	beq.n	80083e4 <_dtoa_r+0x61c>
 80083f2:	4647      	mov	r7, r8
 80083f4:	e03b      	b.n	800846e <_dtoa_r+0x6a6>
 80083f6:	4b9e      	ldr	r3, [pc, #632]	@ (8008670 <_dtoa_r+0x8a8>)
 80083f8:	f7f8 f86e 	bl	80004d8 <__aeabi_dmul>
 80083fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008400:	e7bc      	b.n	800837c <_dtoa_r+0x5b4>
 8008402:	4656      	mov	r6, sl
 8008404:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8008408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800840c:	4620      	mov	r0, r4
 800840e:	4629      	mov	r1, r5
 8008410:	f7f8 f98c 	bl	800072c <__aeabi_ddiv>
 8008414:	f7f8 fb10 	bl	8000a38 <__aeabi_d2iz>
 8008418:	4680      	mov	r8, r0
 800841a:	f7f7 fff3 	bl	8000404 <__aeabi_i2d>
 800841e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008422:	f7f8 f859 	bl	80004d8 <__aeabi_dmul>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4620      	mov	r0, r4
 800842c:	4629      	mov	r1, r5
 800842e:	f7f7 fe9b 	bl	8000168 <__aeabi_dsub>
 8008432:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008436:	9d08      	ldr	r5, [sp, #32]
 8008438:	f806 4b01 	strb.w	r4, [r6], #1
 800843c:	eba6 040a 	sub.w	r4, r6, sl
 8008440:	42a5      	cmp	r5, r4
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	d133      	bne.n	80084b0 <_dtoa_r+0x6e8>
 8008448:	f7f7 fe90 	bl	800016c <__adddf3>
 800844c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008450:	4604      	mov	r4, r0
 8008452:	460d      	mov	r5, r1
 8008454:	f7f8 fad0 	bl	80009f8 <__aeabi_dcmpgt>
 8008458:	b9c0      	cbnz	r0, 800848c <_dtoa_r+0x6c4>
 800845a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800845e:	4620      	mov	r0, r4
 8008460:	4629      	mov	r1, r5
 8008462:	f7f8 faa1 	bl	80009a8 <__aeabi_dcmpeq>
 8008466:	b110      	cbz	r0, 800846e <_dtoa_r+0x6a6>
 8008468:	f018 0f01 	tst.w	r8, #1
 800846c:	d10e      	bne.n	800848c <_dtoa_r+0x6c4>
 800846e:	4648      	mov	r0, r9
 8008470:	9903      	ldr	r1, [sp, #12]
 8008472:	f000 fbbb 	bl	8008bec <_Bfree>
 8008476:	2300      	movs	r3, #0
 8008478:	7033      	strb	r3, [r6, #0]
 800847a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800847c:	3701      	adds	r7, #1
 800847e:	601f      	str	r7, [r3, #0]
 8008480:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 824b 	beq.w	800891e <_dtoa_r+0xb56>
 8008488:	601e      	str	r6, [r3, #0]
 800848a:	e248      	b.n	800891e <_dtoa_r+0xb56>
 800848c:	46b8      	mov	r8, r7
 800848e:	4633      	mov	r3, r6
 8008490:	461e      	mov	r6, r3
 8008492:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008496:	2a39      	cmp	r2, #57	@ 0x39
 8008498:	d106      	bne.n	80084a8 <_dtoa_r+0x6e0>
 800849a:	459a      	cmp	sl, r3
 800849c:	d1f8      	bne.n	8008490 <_dtoa_r+0x6c8>
 800849e:	2230      	movs	r2, #48	@ 0x30
 80084a0:	f108 0801 	add.w	r8, r8, #1
 80084a4:	f88a 2000 	strb.w	r2, [sl]
 80084a8:	781a      	ldrb	r2, [r3, #0]
 80084aa:	3201      	adds	r2, #1
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	e7a0      	b.n	80083f2 <_dtoa_r+0x62a>
 80084b0:	2200      	movs	r2, #0
 80084b2:	4b6f      	ldr	r3, [pc, #444]	@ (8008670 <_dtoa_r+0x8a8>)
 80084b4:	f7f8 f810 	bl	80004d8 <__aeabi_dmul>
 80084b8:	2200      	movs	r2, #0
 80084ba:	2300      	movs	r3, #0
 80084bc:	4604      	mov	r4, r0
 80084be:	460d      	mov	r5, r1
 80084c0:	f7f8 fa72 	bl	80009a8 <__aeabi_dcmpeq>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d09f      	beq.n	8008408 <_dtoa_r+0x640>
 80084c8:	e7d1      	b.n	800846e <_dtoa_r+0x6a6>
 80084ca:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80084cc:	2a00      	cmp	r2, #0
 80084ce:	f000 80ea 	beq.w	80086a6 <_dtoa_r+0x8de>
 80084d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80084d4:	2a01      	cmp	r2, #1
 80084d6:	f300 80cd 	bgt.w	8008674 <_dtoa_r+0x8ac>
 80084da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80084dc:	2a00      	cmp	r2, #0
 80084de:	f000 80c1 	beq.w	8008664 <_dtoa_r+0x89c>
 80084e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80084e6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80084e8:	9e04      	ldr	r6, [sp, #16]
 80084ea:	9a04      	ldr	r2, [sp, #16]
 80084ec:	2101      	movs	r1, #1
 80084ee:	441a      	add	r2, r3
 80084f0:	9204      	str	r2, [sp, #16]
 80084f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084f4:	4648      	mov	r0, r9
 80084f6:	441a      	add	r2, r3
 80084f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80084fa:	f000 fc2b 	bl	8008d54 <__i2b>
 80084fe:	4605      	mov	r5, r0
 8008500:	b166      	cbz	r6, 800851c <_dtoa_r+0x754>
 8008502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008504:	2b00      	cmp	r3, #0
 8008506:	dd09      	ble.n	800851c <_dtoa_r+0x754>
 8008508:	42b3      	cmp	r3, r6
 800850a:	bfa8      	it	ge
 800850c:	4633      	movge	r3, r6
 800850e:	9a04      	ldr	r2, [sp, #16]
 8008510:	1af6      	subs	r6, r6, r3
 8008512:	1ad2      	subs	r2, r2, r3
 8008514:	9204      	str	r2, [sp, #16]
 8008516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	9309      	str	r3, [sp, #36]	@ 0x24
 800851c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800851e:	b30b      	cbz	r3, 8008564 <_dtoa_r+0x79c>
 8008520:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 80c6 	beq.w	80086b4 <_dtoa_r+0x8ec>
 8008528:	2c00      	cmp	r4, #0
 800852a:	f000 80c0 	beq.w	80086ae <_dtoa_r+0x8e6>
 800852e:	4629      	mov	r1, r5
 8008530:	4622      	mov	r2, r4
 8008532:	4648      	mov	r0, r9
 8008534:	f000 fcc6 	bl	8008ec4 <__pow5mult>
 8008538:	9a03      	ldr	r2, [sp, #12]
 800853a:	4601      	mov	r1, r0
 800853c:	4605      	mov	r5, r0
 800853e:	4648      	mov	r0, r9
 8008540:	f000 fc1e 	bl	8008d80 <__multiply>
 8008544:	9903      	ldr	r1, [sp, #12]
 8008546:	4680      	mov	r8, r0
 8008548:	4648      	mov	r0, r9
 800854a:	f000 fb4f 	bl	8008bec <_Bfree>
 800854e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008550:	1b1b      	subs	r3, r3, r4
 8008552:	930a      	str	r3, [sp, #40]	@ 0x28
 8008554:	f000 80b1 	beq.w	80086ba <_dtoa_r+0x8f2>
 8008558:	4641      	mov	r1, r8
 800855a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800855c:	4648      	mov	r0, r9
 800855e:	f000 fcb1 	bl	8008ec4 <__pow5mult>
 8008562:	9003      	str	r0, [sp, #12]
 8008564:	2101      	movs	r1, #1
 8008566:	4648      	mov	r0, r9
 8008568:	f000 fbf4 	bl	8008d54 <__i2b>
 800856c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800856e:	4604      	mov	r4, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 81d8 	beq.w	8008926 <_dtoa_r+0xb5e>
 8008576:	461a      	mov	r2, r3
 8008578:	4601      	mov	r1, r0
 800857a:	4648      	mov	r0, r9
 800857c:	f000 fca2 	bl	8008ec4 <__pow5mult>
 8008580:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008582:	4604      	mov	r4, r0
 8008584:	2b01      	cmp	r3, #1
 8008586:	f300 809f 	bgt.w	80086c8 <_dtoa_r+0x900>
 800858a:	9b06      	ldr	r3, [sp, #24]
 800858c:	2b00      	cmp	r3, #0
 800858e:	f040 8097 	bne.w	80086c0 <_dtoa_r+0x8f8>
 8008592:	9b07      	ldr	r3, [sp, #28]
 8008594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008598:	2b00      	cmp	r3, #0
 800859a:	f040 8093 	bne.w	80086c4 <_dtoa_r+0x8fc>
 800859e:	9b07      	ldr	r3, [sp, #28]
 80085a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085a4:	0d1b      	lsrs	r3, r3, #20
 80085a6:	051b      	lsls	r3, r3, #20
 80085a8:	b133      	cbz	r3, 80085b8 <_dtoa_r+0x7f0>
 80085aa:	9b04      	ldr	r3, [sp, #16]
 80085ac:	3301      	adds	r3, #1
 80085ae:	9304      	str	r3, [sp, #16]
 80085b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b2:	3301      	adds	r3, #1
 80085b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b6:	2301      	movs	r3, #1
 80085b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80085ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 81b8 	beq.w	8008932 <_dtoa_r+0xb6a>
 80085c2:	6923      	ldr	r3, [r4, #16]
 80085c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085c8:	6918      	ldr	r0, [r3, #16]
 80085ca:	f000 fb77 	bl	8008cbc <__hi0bits>
 80085ce:	f1c0 0020 	rsb	r0, r0, #32
 80085d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d4:	4418      	add	r0, r3
 80085d6:	f010 001f 	ands.w	r0, r0, #31
 80085da:	f000 8082 	beq.w	80086e2 <_dtoa_r+0x91a>
 80085de:	f1c0 0320 	rsb	r3, r0, #32
 80085e2:	2b04      	cmp	r3, #4
 80085e4:	dd73      	ble.n	80086ce <_dtoa_r+0x906>
 80085e6:	9b04      	ldr	r3, [sp, #16]
 80085e8:	f1c0 001c 	rsb	r0, r0, #28
 80085ec:	4403      	add	r3, r0
 80085ee:	9304      	str	r3, [sp, #16]
 80085f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f2:	4406      	add	r6, r0
 80085f4:	4403      	add	r3, r0
 80085f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80085f8:	9b04      	ldr	r3, [sp, #16]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	dd05      	ble.n	800860a <_dtoa_r+0x842>
 80085fe:	461a      	mov	r2, r3
 8008600:	4648      	mov	r0, r9
 8008602:	9903      	ldr	r1, [sp, #12]
 8008604:	f000 fcb8 	bl	8008f78 <__lshift>
 8008608:	9003      	str	r0, [sp, #12]
 800860a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800860c:	2b00      	cmp	r3, #0
 800860e:	dd05      	ble.n	800861c <_dtoa_r+0x854>
 8008610:	4621      	mov	r1, r4
 8008612:	461a      	mov	r2, r3
 8008614:	4648      	mov	r0, r9
 8008616:	f000 fcaf 	bl	8008f78 <__lshift>
 800861a:	4604      	mov	r4, r0
 800861c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800861e:	2b00      	cmp	r3, #0
 8008620:	d061      	beq.n	80086e6 <_dtoa_r+0x91e>
 8008622:	4621      	mov	r1, r4
 8008624:	9803      	ldr	r0, [sp, #12]
 8008626:	f000 fd13 	bl	8009050 <__mcmp>
 800862a:	2800      	cmp	r0, #0
 800862c:	da5b      	bge.n	80086e6 <_dtoa_r+0x91e>
 800862e:	2300      	movs	r3, #0
 8008630:	220a      	movs	r2, #10
 8008632:	4648      	mov	r0, r9
 8008634:	9903      	ldr	r1, [sp, #12]
 8008636:	f000 fafb 	bl	8008c30 <__multadd>
 800863a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800863c:	f107 38ff 	add.w	r8, r7, #4294967295
 8008640:	9003      	str	r0, [sp, #12]
 8008642:	2b00      	cmp	r3, #0
 8008644:	f000 8177 	beq.w	8008936 <_dtoa_r+0xb6e>
 8008648:	4629      	mov	r1, r5
 800864a:	2300      	movs	r3, #0
 800864c:	220a      	movs	r2, #10
 800864e:	4648      	mov	r0, r9
 8008650:	f000 faee 	bl	8008c30 <__multadd>
 8008654:	f1bb 0f00 	cmp.w	fp, #0
 8008658:	4605      	mov	r5, r0
 800865a:	dc6f      	bgt.n	800873c <_dtoa_r+0x974>
 800865c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800865e:	2b02      	cmp	r3, #2
 8008660:	dc49      	bgt.n	80086f6 <_dtoa_r+0x92e>
 8008662:	e06b      	b.n	800873c <_dtoa_r+0x974>
 8008664:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008666:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800866a:	e73c      	b.n	80084e6 <_dtoa_r+0x71e>
 800866c:	3fe00000 	.word	0x3fe00000
 8008670:	40240000 	.word	0x40240000
 8008674:	9b08      	ldr	r3, [sp, #32]
 8008676:	1e5c      	subs	r4, r3, #1
 8008678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800867a:	42a3      	cmp	r3, r4
 800867c:	db09      	blt.n	8008692 <_dtoa_r+0x8ca>
 800867e:	1b1c      	subs	r4, r3, r4
 8008680:	9b08      	ldr	r3, [sp, #32]
 8008682:	2b00      	cmp	r3, #0
 8008684:	f6bf af30 	bge.w	80084e8 <_dtoa_r+0x720>
 8008688:	9b04      	ldr	r3, [sp, #16]
 800868a:	9a08      	ldr	r2, [sp, #32]
 800868c:	1a9e      	subs	r6, r3, r2
 800868e:	2300      	movs	r3, #0
 8008690:	e72b      	b.n	80084ea <_dtoa_r+0x722>
 8008692:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008694:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008696:	1ae3      	subs	r3, r4, r3
 8008698:	441a      	add	r2, r3
 800869a:	940a      	str	r4, [sp, #40]	@ 0x28
 800869c:	9e04      	ldr	r6, [sp, #16]
 800869e:	2400      	movs	r4, #0
 80086a0:	9b08      	ldr	r3, [sp, #32]
 80086a2:	920e      	str	r2, [sp, #56]	@ 0x38
 80086a4:	e721      	b.n	80084ea <_dtoa_r+0x722>
 80086a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80086a8:	9e04      	ldr	r6, [sp, #16]
 80086aa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80086ac:	e728      	b.n	8008500 <_dtoa_r+0x738>
 80086ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80086b2:	e751      	b.n	8008558 <_dtoa_r+0x790>
 80086b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086b6:	9903      	ldr	r1, [sp, #12]
 80086b8:	e750      	b.n	800855c <_dtoa_r+0x794>
 80086ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80086be:	e751      	b.n	8008564 <_dtoa_r+0x79c>
 80086c0:	2300      	movs	r3, #0
 80086c2:	e779      	b.n	80085b8 <_dtoa_r+0x7f0>
 80086c4:	9b06      	ldr	r3, [sp, #24]
 80086c6:	e777      	b.n	80085b8 <_dtoa_r+0x7f0>
 80086c8:	2300      	movs	r3, #0
 80086ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80086cc:	e779      	b.n	80085c2 <_dtoa_r+0x7fa>
 80086ce:	d093      	beq.n	80085f8 <_dtoa_r+0x830>
 80086d0:	9a04      	ldr	r2, [sp, #16]
 80086d2:	331c      	adds	r3, #28
 80086d4:	441a      	add	r2, r3
 80086d6:	9204      	str	r2, [sp, #16]
 80086d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086da:	441e      	add	r6, r3
 80086dc:	441a      	add	r2, r3
 80086de:	9209      	str	r2, [sp, #36]	@ 0x24
 80086e0:	e78a      	b.n	80085f8 <_dtoa_r+0x830>
 80086e2:	4603      	mov	r3, r0
 80086e4:	e7f4      	b.n	80086d0 <_dtoa_r+0x908>
 80086e6:	9b08      	ldr	r3, [sp, #32]
 80086e8:	46b8      	mov	r8, r7
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	dc20      	bgt.n	8008730 <_dtoa_r+0x968>
 80086ee:	469b      	mov	fp, r3
 80086f0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	dd1e      	ble.n	8008734 <_dtoa_r+0x96c>
 80086f6:	f1bb 0f00 	cmp.w	fp, #0
 80086fa:	f47f adb1 	bne.w	8008260 <_dtoa_r+0x498>
 80086fe:	4621      	mov	r1, r4
 8008700:	465b      	mov	r3, fp
 8008702:	2205      	movs	r2, #5
 8008704:	4648      	mov	r0, r9
 8008706:	f000 fa93 	bl	8008c30 <__multadd>
 800870a:	4601      	mov	r1, r0
 800870c:	4604      	mov	r4, r0
 800870e:	9803      	ldr	r0, [sp, #12]
 8008710:	f000 fc9e 	bl	8009050 <__mcmp>
 8008714:	2800      	cmp	r0, #0
 8008716:	f77f ada3 	ble.w	8008260 <_dtoa_r+0x498>
 800871a:	4656      	mov	r6, sl
 800871c:	2331      	movs	r3, #49	@ 0x31
 800871e:	f108 0801 	add.w	r8, r8, #1
 8008722:	f806 3b01 	strb.w	r3, [r6], #1
 8008726:	e59f      	b.n	8008268 <_dtoa_r+0x4a0>
 8008728:	46b8      	mov	r8, r7
 800872a:	9c08      	ldr	r4, [sp, #32]
 800872c:	4625      	mov	r5, r4
 800872e:	e7f4      	b.n	800871a <_dtoa_r+0x952>
 8008730:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008734:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008736:	2b00      	cmp	r3, #0
 8008738:	f000 8101 	beq.w	800893e <_dtoa_r+0xb76>
 800873c:	2e00      	cmp	r6, #0
 800873e:	dd05      	ble.n	800874c <_dtoa_r+0x984>
 8008740:	4629      	mov	r1, r5
 8008742:	4632      	mov	r2, r6
 8008744:	4648      	mov	r0, r9
 8008746:	f000 fc17 	bl	8008f78 <__lshift>
 800874a:	4605      	mov	r5, r0
 800874c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800874e:	2b00      	cmp	r3, #0
 8008750:	d05c      	beq.n	800880c <_dtoa_r+0xa44>
 8008752:	4648      	mov	r0, r9
 8008754:	6869      	ldr	r1, [r5, #4]
 8008756:	f000 fa09 	bl	8008b6c <_Balloc>
 800875a:	4606      	mov	r6, r0
 800875c:	b928      	cbnz	r0, 800876a <_dtoa_r+0x9a2>
 800875e:	4602      	mov	r2, r0
 8008760:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008764:	4b80      	ldr	r3, [pc, #512]	@ (8008968 <_dtoa_r+0xba0>)
 8008766:	f7ff bb43 	b.w	8007df0 <_dtoa_r+0x28>
 800876a:	692a      	ldr	r2, [r5, #16]
 800876c:	f105 010c 	add.w	r1, r5, #12
 8008770:	3202      	adds	r2, #2
 8008772:	0092      	lsls	r2, r2, #2
 8008774:	300c      	adds	r0, #12
 8008776:	f000 ff9d 	bl	80096b4 <memcpy>
 800877a:	2201      	movs	r2, #1
 800877c:	4631      	mov	r1, r6
 800877e:	4648      	mov	r0, r9
 8008780:	f000 fbfa 	bl	8008f78 <__lshift>
 8008784:	462f      	mov	r7, r5
 8008786:	4605      	mov	r5, r0
 8008788:	f10a 0301 	add.w	r3, sl, #1
 800878c:	9304      	str	r3, [sp, #16]
 800878e:	eb0a 030b 	add.w	r3, sl, fp
 8008792:	930a      	str	r3, [sp, #40]	@ 0x28
 8008794:	9b06      	ldr	r3, [sp, #24]
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	9309      	str	r3, [sp, #36]	@ 0x24
 800879c:	9b04      	ldr	r3, [sp, #16]
 800879e:	4621      	mov	r1, r4
 80087a0:	9803      	ldr	r0, [sp, #12]
 80087a2:	f103 3bff 	add.w	fp, r3, #4294967295
 80087a6:	f7ff fa86 	bl	8007cb6 <quorem>
 80087aa:	4603      	mov	r3, r0
 80087ac:	4639      	mov	r1, r7
 80087ae:	3330      	adds	r3, #48	@ 0x30
 80087b0:	9006      	str	r0, [sp, #24]
 80087b2:	9803      	ldr	r0, [sp, #12]
 80087b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087b6:	f000 fc4b 	bl	8009050 <__mcmp>
 80087ba:	462a      	mov	r2, r5
 80087bc:	9008      	str	r0, [sp, #32]
 80087be:	4621      	mov	r1, r4
 80087c0:	4648      	mov	r0, r9
 80087c2:	f000 fc61 	bl	8009088 <__mdiff>
 80087c6:	68c2      	ldr	r2, [r0, #12]
 80087c8:	4606      	mov	r6, r0
 80087ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087cc:	bb02      	cbnz	r2, 8008810 <_dtoa_r+0xa48>
 80087ce:	4601      	mov	r1, r0
 80087d0:	9803      	ldr	r0, [sp, #12]
 80087d2:	f000 fc3d 	bl	8009050 <__mcmp>
 80087d6:	4602      	mov	r2, r0
 80087d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087da:	4631      	mov	r1, r6
 80087dc:	4648      	mov	r0, r9
 80087de:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80087e2:	f000 fa03 	bl	8008bec <_Bfree>
 80087e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80087e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80087ea:	9e04      	ldr	r6, [sp, #16]
 80087ec:	ea42 0103 	orr.w	r1, r2, r3
 80087f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087f2:	4319      	orrs	r1, r3
 80087f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087f6:	d10d      	bne.n	8008814 <_dtoa_r+0xa4c>
 80087f8:	2b39      	cmp	r3, #57	@ 0x39
 80087fa:	d027      	beq.n	800884c <_dtoa_r+0xa84>
 80087fc:	9a08      	ldr	r2, [sp, #32]
 80087fe:	2a00      	cmp	r2, #0
 8008800:	dd01      	ble.n	8008806 <_dtoa_r+0xa3e>
 8008802:	9b06      	ldr	r3, [sp, #24]
 8008804:	3331      	adds	r3, #49	@ 0x31
 8008806:	f88b 3000 	strb.w	r3, [fp]
 800880a:	e52e      	b.n	800826a <_dtoa_r+0x4a2>
 800880c:	4628      	mov	r0, r5
 800880e:	e7b9      	b.n	8008784 <_dtoa_r+0x9bc>
 8008810:	2201      	movs	r2, #1
 8008812:	e7e2      	b.n	80087da <_dtoa_r+0xa12>
 8008814:	9908      	ldr	r1, [sp, #32]
 8008816:	2900      	cmp	r1, #0
 8008818:	db04      	blt.n	8008824 <_dtoa_r+0xa5c>
 800881a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800881c:	4301      	orrs	r1, r0
 800881e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008820:	4301      	orrs	r1, r0
 8008822:	d120      	bne.n	8008866 <_dtoa_r+0xa9e>
 8008824:	2a00      	cmp	r2, #0
 8008826:	ddee      	ble.n	8008806 <_dtoa_r+0xa3e>
 8008828:	2201      	movs	r2, #1
 800882a:	9903      	ldr	r1, [sp, #12]
 800882c:	4648      	mov	r0, r9
 800882e:	9304      	str	r3, [sp, #16]
 8008830:	f000 fba2 	bl	8008f78 <__lshift>
 8008834:	4621      	mov	r1, r4
 8008836:	9003      	str	r0, [sp, #12]
 8008838:	f000 fc0a 	bl	8009050 <__mcmp>
 800883c:	2800      	cmp	r0, #0
 800883e:	9b04      	ldr	r3, [sp, #16]
 8008840:	dc02      	bgt.n	8008848 <_dtoa_r+0xa80>
 8008842:	d1e0      	bne.n	8008806 <_dtoa_r+0xa3e>
 8008844:	07da      	lsls	r2, r3, #31
 8008846:	d5de      	bpl.n	8008806 <_dtoa_r+0xa3e>
 8008848:	2b39      	cmp	r3, #57	@ 0x39
 800884a:	d1da      	bne.n	8008802 <_dtoa_r+0xa3a>
 800884c:	2339      	movs	r3, #57	@ 0x39
 800884e:	f88b 3000 	strb.w	r3, [fp]
 8008852:	4633      	mov	r3, r6
 8008854:	461e      	mov	r6, r3
 8008856:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800885a:	3b01      	subs	r3, #1
 800885c:	2a39      	cmp	r2, #57	@ 0x39
 800885e:	d04e      	beq.n	80088fe <_dtoa_r+0xb36>
 8008860:	3201      	adds	r2, #1
 8008862:	701a      	strb	r2, [r3, #0]
 8008864:	e501      	b.n	800826a <_dtoa_r+0x4a2>
 8008866:	2a00      	cmp	r2, #0
 8008868:	dd03      	ble.n	8008872 <_dtoa_r+0xaaa>
 800886a:	2b39      	cmp	r3, #57	@ 0x39
 800886c:	d0ee      	beq.n	800884c <_dtoa_r+0xa84>
 800886e:	3301      	adds	r3, #1
 8008870:	e7c9      	b.n	8008806 <_dtoa_r+0xa3e>
 8008872:	9a04      	ldr	r2, [sp, #16]
 8008874:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008876:	f802 3c01 	strb.w	r3, [r2, #-1]
 800887a:	428a      	cmp	r2, r1
 800887c:	d028      	beq.n	80088d0 <_dtoa_r+0xb08>
 800887e:	2300      	movs	r3, #0
 8008880:	220a      	movs	r2, #10
 8008882:	9903      	ldr	r1, [sp, #12]
 8008884:	4648      	mov	r0, r9
 8008886:	f000 f9d3 	bl	8008c30 <__multadd>
 800888a:	42af      	cmp	r7, r5
 800888c:	9003      	str	r0, [sp, #12]
 800888e:	f04f 0300 	mov.w	r3, #0
 8008892:	f04f 020a 	mov.w	r2, #10
 8008896:	4639      	mov	r1, r7
 8008898:	4648      	mov	r0, r9
 800889a:	d107      	bne.n	80088ac <_dtoa_r+0xae4>
 800889c:	f000 f9c8 	bl	8008c30 <__multadd>
 80088a0:	4607      	mov	r7, r0
 80088a2:	4605      	mov	r5, r0
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	3301      	adds	r3, #1
 80088a8:	9304      	str	r3, [sp, #16]
 80088aa:	e777      	b.n	800879c <_dtoa_r+0x9d4>
 80088ac:	f000 f9c0 	bl	8008c30 <__multadd>
 80088b0:	4629      	mov	r1, r5
 80088b2:	4607      	mov	r7, r0
 80088b4:	2300      	movs	r3, #0
 80088b6:	220a      	movs	r2, #10
 80088b8:	4648      	mov	r0, r9
 80088ba:	f000 f9b9 	bl	8008c30 <__multadd>
 80088be:	4605      	mov	r5, r0
 80088c0:	e7f0      	b.n	80088a4 <_dtoa_r+0xadc>
 80088c2:	f1bb 0f00 	cmp.w	fp, #0
 80088c6:	bfcc      	ite	gt
 80088c8:	465e      	movgt	r6, fp
 80088ca:	2601      	movle	r6, #1
 80088cc:	2700      	movs	r7, #0
 80088ce:	4456      	add	r6, sl
 80088d0:	2201      	movs	r2, #1
 80088d2:	9903      	ldr	r1, [sp, #12]
 80088d4:	4648      	mov	r0, r9
 80088d6:	9304      	str	r3, [sp, #16]
 80088d8:	f000 fb4e 	bl	8008f78 <__lshift>
 80088dc:	4621      	mov	r1, r4
 80088de:	9003      	str	r0, [sp, #12]
 80088e0:	f000 fbb6 	bl	8009050 <__mcmp>
 80088e4:	2800      	cmp	r0, #0
 80088e6:	dcb4      	bgt.n	8008852 <_dtoa_r+0xa8a>
 80088e8:	d102      	bne.n	80088f0 <_dtoa_r+0xb28>
 80088ea:	9b04      	ldr	r3, [sp, #16]
 80088ec:	07db      	lsls	r3, r3, #31
 80088ee:	d4b0      	bmi.n	8008852 <_dtoa_r+0xa8a>
 80088f0:	4633      	mov	r3, r6
 80088f2:	461e      	mov	r6, r3
 80088f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088f8:	2a30      	cmp	r2, #48	@ 0x30
 80088fa:	d0fa      	beq.n	80088f2 <_dtoa_r+0xb2a>
 80088fc:	e4b5      	b.n	800826a <_dtoa_r+0x4a2>
 80088fe:	459a      	cmp	sl, r3
 8008900:	d1a8      	bne.n	8008854 <_dtoa_r+0xa8c>
 8008902:	2331      	movs	r3, #49	@ 0x31
 8008904:	f108 0801 	add.w	r8, r8, #1
 8008908:	f88a 3000 	strb.w	r3, [sl]
 800890c:	e4ad      	b.n	800826a <_dtoa_r+0x4a2>
 800890e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008910:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800896c <_dtoa_r+0xba4>
 8008914:	b11b      	cbz	r3, 800891e <_dtoa_r+0xb56>
 8008916:	f10a 0308 	add.w	r3, sl, #8
 800891a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800891c:	6013      	str	r3, [r2, #0]
 800891e:	4650      	mov	r0, sl
 8008920:	b017      	add	sp, #92	@ 0x5c
 8008922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008926:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008928:	2b01      	cmp	r3, #1
 800892a:	f77f ae2e 	ble.w	800858a <_dtoa_r+0x7c2>
 800892e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008930:	930a      	str	r3, [sp, #40]	@ 0x28
 8008932:	2001      	movs	r0, #1
 8008934:	e64d      	b.n	80085d2 <_dtoa_r+0x80a>
 8008936:	f1bb 0f00 	cmp.w	fp, #0
 800893a:	f77f aed9 	ble.w	80086f0 <_dtoa_r+0x928>
 800893e:	4656      	mov	r6, sl
 8008940:	4621      	mov	r1, r4
 8008942:	9803      	ldr	r0, [sp, #12]
 8008944:	f7ff f9b7 	bl	8007cb6 <quorem>
 8008948:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800894c:	f806 3b01 	strb.w	r3, [r6], #1
 8008950:	eba6 020a 	sub.w	r2, r6, sl
 8008954:	4593      	cmp	fp, r2
 8008956:	ddb4      	ble.n	80088c2 <_dtoa_r+0xafa>
 8008958:	2300      	movs	r3, #0
 800895a:	220a      	movs	r2, #10
 800895c:	4648      	mov	r0, r9
 800895e:	9903      	ldr	r1, [sp, #12]
 8008960:	f000 f966 	bl	8008c30 <__multadd>
 8008964:	9003      	str	r0, [sp, #12]
 8008966:	e7eb      	b.n	8008940 <_dtoa_r+0xb78>
 8008968:	0800a8f0 	.word	0x0800a8f0
 800896c:	0800a874 	.word	0x0800a874

08008970 <_free_r>:
 8008970:	b538      	push	{r3, r4, r5, lr}
 8008972:	4605      	mov	r5, r0
 8008974:	2900      	cmp	r1, #0
 8008976:	d040      	beq.n	80089fa <_free_r+0x8a>
 8008978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800897c:	1f0c      	subs	r4, r1, #4
 800897e:	2b00      	cmp	r3, #0
 8008980:	bfb8      	it	lt
 8008982:	18e4      	addlt	r4, r4, r3
 8008984:	f000 f8e6 	bl	8008b54 <__malloc_lock>
 8008988:	4a1c      	ldr	r2, [pc, #112]	@ (80089fc <_free_r+0x8c>)
 800898a:	6813      	ldr	r3, [r2, #0]
 800898c:	b933      	cbnz	r3, 800899c <_free_r+0x2c>
 800898e:	6063      	str	r3, [r4, #4]
 8008990:	6014      	str	r4, [r2, #0]
 8008992:	4628      	mov	r0, r5
 8008994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008998:	f000 b8e2 	b.w	8008b60 <__malloc_unlock>
 800899c:	42a3      	cmp	r3, r4
 800899e:	d908      	bls.n	80089b2 <_free_r+0x42>
 80089a0:	6820      	ldr	r0, [r4, #0]
 80089a2:	1821      	adds	r1, r4, r0
 80089a4:	428b      	cmp	r3, r1
 80089a6:	bf01      	itttt	eq
 80089a8:	6819      	ldreq	r1, [r3, #0]
 80089aa:	685b      	ldreq	r3, [r3, #4]
 80089ac:	1809      	addeq	r1, r1, r0
 80089ae:	6021      	streq	r1, [r4, #0]
 80089b0:	e7ed      	b.n	800898e <_free_r+0x1e>
 80089b2:	461a      	mov	r2, r3
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	b10b      	cbz	r3, 80089bc <_free_r+0x4c>
 80089b8:	42a3      	cmp	r3, r4
 80089ba:	d9fa      	bls.n	80089b2 <_free_r+0x42>
 80089bc:	6811      	ldr	r1, [r2, #0]
 80089be:	1850      	adds	r0, r2, r1
 80089c0:	42a0      	cmp	r0, r4
 80089c2:	d10b      	bne.n	80089dc <_free_r+0x6c>
 80089c4:	6820      	ldr	r0, [r4, #0]
 80089c6:	4401      	add	r1, r0
 80089c8:	1850      	adds	r0, r2, r1
 80089ca:	4283      	cmp	r3, r0
 80089cc:	6011      	str	r1, [r2, #0]
 80089ce:	d1e0      	bne.n	8008992 <_free_r+0x22>
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	4408      	add	r0, r1
 80089d6:	6010      	str	r0, [r2, #0]
 80089d8:	6053      	str	r3, [r2, #4]
 80089da:	e7da      	b.n	8008992 <_free_r+0x22>
 80089dc:	d902      	bls.n	80089e4 <_free_r+0x74>
 80089de:	230c      	movs	r3, #12
 80089e0:	602b      	str	r3, [r5, #0]
 80089e2:	e7d6      	b.n	8008992 <_free_r+0x22>
 80089e4:	6820      	ldr	r0, [r4, #0]
 80089e6:	1821      	adds	r1, r4, r0
 80089e8:	428b      	cmp	r3, r1
 80089ea:	bf01      	itttt	eq
 80089ec:	6819      	ldreq	r1, [r3, #0]
 80089ee:	685b      	ldreq	r3, [r3, #4]
 80089f0:	1809      	addeq	r1, r1, r0
 80089f2:	6021      	streq	r1, [r4, #0]
 80089f4:	6063      	str	r3, [r4, #4]
 80089f6:	6054      	str	r4, [r2, #4]
 80089f8:	e7cb      	b.n	8008992 <_free_r+0x22>
 80089fa:	bd38      	pop	{r3, r4, r5, pc}
 80089fc:	20000794 	.word	0x20000794

08008a00 <malloc>:
 8008a00:	4b02      	ldr	r3, [pc, #8]	@ (8008a0c <malloc+0xc>)
 8008a02:	4601      	mov	r1, r0
 8008a04:	6818      	ldr	r0, [r3, #0]
 8008a06:	f000 b825 	b.w	8008a54 <_malloc_r>
 8008a0a:	bf00      	nop
 8008a0c:	2000003c 	.word	0x2000003c

08008a10 <sbrk_aligned>:
 8008a10:	b570      	push	{r4, r5, r6, lr}
 8008a12:	4e0f      	ldr	r6, [pc, #60]	@ (8008a50 <sbrk_aligned+0x40>)
 8008a14:	460c      	mov	r4, r1
 8008a16:	6831      	ldr	r1, [r6, #0]
 8008a18:	4605      	mov	r5, r0
 8008a1a:	b911      	cbnz	r1, 8008a22 <sbrk_aligned+0x12>
 8008a1c:	f000 fe3a 	bl	8009694 <_sbrk_r>
 8008a20:	6030      	str	r0, [r6, #0]
 8008a22:	4621      	mov	r1, r4
 8008a24:	4628      	mov	r0, r5
 8008a26:	f000 fe35 	bl	8009694 <_sbrk_r>
 8008a2a:	1c43      	adds	r3, r0, #1
 8008a2c:	d103      	bne.n	8008a36 <sbrk_aligned+0x26>
 8008a2e:	f04f 34ff 	mov.w	r4, #4294967295
 8008a32:	4620      	mov	r0, r4
 8008a34:	bd70      	pop	{r4, r5, r6, pc}
 8008a36:	1cc4      	adds	r4, r0, #3
 8008a38:	f024 0403 	bic.w	r4, r4, #3
 8008a3c:	42a0      	cmp	r0, r4
 8008a3e:	d0f8      	beq.n	8008a32 <sbrk_aligned+0x22>
 8008a40:	1a21      	subs	r1, r4, r0
 8008a42:	4628      	mov	r0, r5
 8008a44:	f000 fe26 	bl	8009694 <_sbrk_r>
 8008a48:	3001      	adds	r0, #1
 8008a4a:	d1f2      	bne.n	8008a32 <sbrk_aligned+0x22>
 8008a4c:	e7ef      	b.n	8008a2e <sbrk_aligned+0x1e>
 8008a4e:	bf00      	nop
 8008a50:	20000790 	.word	0x20000790

08008a54 <_malloc_r>:
 8008a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a58:	1ccd      	adds	r5, r1, #3
 8008a5a:	f025 0503 	bic.w	r5, r5, #3
 8008a5e:	3508      	adds	r5, #8
 8008a60:	2d0c      	cmp	r5, #12
 8008a62:	bf38      	it	cc
 8008a64:	250c      	movcc	r5, #12
 8008a66:	2d00      	cmp	r5, #0
 8008a68:	4606      	mov	r6, r0
 8008a6a:	db01      	blt.n	8008a70 <_malloc_r+0x1c>
 8008a6c:	42a9      	cmp	r1, r5
 8008a6e:	d904      	bls.n	8008a7a <_malloc_r+0x26>
 8008a70:	230c      	movs	r3, #12
 8008a72:	6033      	str	r3, [r6, #0]
 8008a74:	2000      	movs	r0, #0
 8008a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b50 <_malloc_r+0xfc>
 8008a7e:	f000 f869 	bl	8008b54 <__malloc_lock>
 8008a82:	f8d8 3000 	ldr.w	r3, [r8]
 8008a86:	461c      	mov	r4, r3
 8008a88:	bb44      	cbnz	r4, 8008adc <_malloc_r+0x88>
 8008a8a:	4629      	mov	r1, r5
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	f7ff ffbf 	bl	8008a10 <sbrk_aligned>
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	4604      	mov	r4, r0
 8008a96:	d158      	bne.n	8008b4a <_malloc_r+0xf6>
 8008a98:	f8d8 4000 	ldr.w	r4, [r8]
 8008a9c:	4627      	mov	r7, r4
 8008a9e:	2f00      	cmp	r7, #0
 8008aa0:	d143      	bne.n	8008b2a <_malloc_r+0xd6>
 8008aa2:	2c00      	cmp	r4, #0
 8008aa4:	d04b      	beq.n	8008b3e <_malloc_r+0xea>
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	4639      	mov	r1, r7
 8008aaa:	4630      	mov	r0, r6
 8008aac:	eb04 0903 	add.w	r9, r4, r3
 8008ab0:	f000 fdf0 	bl	8009694 <_sbrk_r>
 8008ab4:	4581      	cmp	r9, r0
 8008ab6:	d142      	bne.n	8008b3e <_malloc_r+0xea>
 8008ab8:	6821      	ldr	r1, [r4, #0]
 8008aba:	4630      	mov	r0, r6
 8008abc:	1a6d      	subs	r5, r5, r1
 8008abe:	4629      	mov	r1, r5
 8008ac0:	f7ff ffa6 	bl	8008a10 <sbrk_aligned>
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	d03a      	beq.n	8008b3e <_malloc_r+0xea>
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	442b      	add	r3, r5
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	f8d8 3000 	ldr.w	r3, [r8]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	bb62      	cbnz	r2, 8008b30 <_malloc_r+0xdc>
 8008ad6:	f8c8 7000 	str.w	r7, [r8]
 8008ada:	e00f      	b.n	8008afc <_malloc_r+0xa8>
 8008adc:	6822      	ldr	r2, [r4, #0]
 8008ade:	1b52      	subs	r2, r2, r5
 8008ae0:	d420      	bmi.n	8008b24 <_malloc_r+0xd0>
 8008ae2:	2a0b      	cmp	r2, #11
 8008ae4:	d917      	bls.n	8008b16 <_malloc_r+0xc2>
 8008ae6:	1961      	adds	r1, r4, r5
 8008ae8:	42a3      	cmp	r3, r4
 8008aea:	6025      	str	r5, [r4, #0]
 8008aec:	bf18      	it	ne
 8008aee:	6059      	strne	r1, [r3, #4]
 8008af0:	6863      	ldr	r3, [r4, #4]
 8008af2:	bf08      	it	eq
 8008af4:	f8c8 1000 	streq.w	r1, [r8]
 8008af8:	5162      	str	r2, [r4, r5]
 8008afa:	604b      	str	r3, [r1, #4]
 8008afc:	4630      	mov	r0, r6
 8008afe:	f000 f82f 	bl	8008b60 <__malloc_unlock>
 8008b02:	f104 000b 	add.w	r0, r4, #11
 8008b06:	1d23      	adds	r3, r4, #4
 8008b08:	f020 0007 	bic.w	r0, r0, #7
 8008b0c:	1ac2      	subs	r2, r0, r3
 8008b0e:	bf1c      	itt	ne
 8008b10:	1a1b      	subne	r3, r3, r0
 8008b12:	50a3      	strne	r3, [r4, r2]
 8008b14:	e7af      	b.n	8008a76 <_malloc_r+0x22>
 8008b16:	6862      	ldr	r2, [r4, #4]
 8008b18:	42a3      	cmp	r3, r4
 8008b1a:	bf0c      	ite	eq
 8008b1c:	f8c8 2000 	streq.w	r2, [r8]
 8008b20:	605a      	strne	r2, [r3, #4]
 8008b22:	e7eb      	b.n	8008afc <_malloc_r+0xa8>
 8008b24:	4623      	mov	r3, r4
 8008b26:	6864      	ldr	r4, [r4, #4]
 8008b28:	e7ae      	b.n	8008a88 <_malloc_r+0x34>
 8008b2a:	463c      	mov	r4, r7
 8008b2c:	687f      	ldr	r7, [r7, #4]
 8008b2e:	e7b6      	b.n	8008a9e <_malloc_r+0x4a>
 8008b30:	461a      	mov	r2, r3
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	42a3      	cmp	r3, r4
 8008b36:	d1fb      	bne.n	8008b30 <_malloc_r+0xdc>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	6053      	str	r3, [r2, #4]
 8008b3c:	e7de      	b.n	8008afc <_malloc_r+0xa8>
 8008b3e:	230c      	movs	r3, #12
 8008b40:	4630      	mov	r0, r6
 8008b42:	6033      	str	r3, [r6, #0]
 8008b44:	f000 f80c 	bl	8008b60 <__malloc_unlock>
 8008b48:	e794      	b.n	8008a74 <_malloc_r+0x20>
 8008b4a:	6005      	str	r5, [r0, #0]
 8008b4c:	e7d6      	b.n	8008afc <_malloc_r+0xa8>
 8008b4e:	bf00      	nop
 8008b50:	20000794 	.word	0x20000794

08008b54 <__malloc_lock>:
 8008b54:	4801      	ldr	r0, [pc, #4]	@ (8008b5c <__malloc_lock+0x8>)
 8008b56:	f7ff b89e 	b.w	8007c96 <__retarget_lock_acquire_recursive>
 8008b5a:	bf00      	nop
 8008b5c:	2000078c 	.word	0x2000078c

08008b60 <__malloc_unlock>:
 8008b60:	4801      	ldr	r0, [pc, #4]	@ (8008b68 <__malloc_unlock+0x8>)
 8008b62:	f7ff b899 	b.w	8007c98 <__retarget_lock_release_recursive>
 8008b66:	bf00      	nop
 8008b68:	2000078c 	.word	0x2000078c

08008b6c <_Balloc>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	69c6      	ldr	r6, [r0, #28]
 8008b70:	4604      	mov	r4, r0
 8008b72:	460d      	mov	r5, r1
 8008b74:	b976      	cbnz	r6, 8008b94 <_Balloc+0x28>
 8008b76:	2010      	movs	r0, #16
 8008b78:	f7ff ff42 	bl	8008a00 <malloc>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	61e0      	str	r0, [r4, #28]
 8008b80:	b920      	cbnz	r0, 8008b8c <_Balloc+0x20>
 8008b82:	216b      	movs	r1, #107	@ 0x6b
 8008b84:	4b17      	ldr	r3, [pc, #92]	@ (8008be4 <_Balloc+0x78>)
 8008b86:	4818      	ldr	r0, [pc, #96]	@ (8008be8 <_Balloc+0x7c>)
 8008b88:	f000 fda2 	bl	80096d0 <__assert_func>
 8008b8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b90:	6006      	str	r6, [r0, #0]
 8008b92:	60c6      	str	r6, [r0, #12]
 8008b94:	69e6      	ldr	r6, [r4, #28]
 8008b96:	68f3      	ldr	r3, [r6, #12]
 8008b98:	b183      	cbz	r3, 8008bbc <_Balloc+0x50>
 8008b9a:	69e3      	ldr	r3, [r4, #28]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ba2:	b9b8      	cbnz	r0, 8008bd4 <_Balloc+0x68>
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	fa01 f605 	lsl.w	r6, r1, r5
 8008baa:	1d72      	adds	r2, r6, #5
 8008bac:	4620      	mov	r0, r4
 8008bae:	0092      	lsls	r2, r2, #2
 8008bb0:	f000 fdac 	bl	800970c <_calloc_r>
 8008bb4:	b160      	cbz	r0, 8008bd0 <_Balloc+0x64>
 8008bb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bba:	e00e      	b.n	8008bda <_Balloc+0x6e>
 8008bbc:	2221      	movs	r2, #33	@ 0x21
 8008bbe:	2104      	movs	r1, #4
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f000 fda3 	bl	800970c <_calloc_r>
 8008bc6:	69e3      	ldr	r3, [r4, #28]
 8008bc8:	60f0      	str	r0, [r6, #12]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e4      	bne.n	8008b9a <_Balloc+0x2e>
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	bd70      	pop	{r4, r5, r6, pc}
 8008bd4:	6802      	ldr	r2, [r0, #0]
 8008bd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008be0:	e7f7      	b.n	8008bd2 <_Balloc+0x66>
 8008be2:	bf00      	nop
 8008be4:	0800a881 	.word	0x0800a881
 8008be8:	0800a901 	.word	0x0800a901

08008bec <_Bfree>:
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	69c6      	ldr	r6, [r0, #28]
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	460c      	mov	r4, r1
 8008bf4:	b976      	cbnz	r6, 8008c14 <_Bfree+0x28>
 8008bf6:	2010      	movs	r0, #16
 8008bf8:	f7ff ff02 	bl	8008a00 <malloc>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	61e8      	str	r0, [r5, #28]
 8008c00:	b920      	cbnz	r0, 8008c0c <_Bfree+0x20>
 8008c02:	218f      	movs	r1, #143	@ 0x8f
 8008c04:	4b08      	ldr	r3, [pc, #32]	@ (8008c28 <_Bfree+0x3c>)
 8008c06:	4809      	ldr	r0, [pc, #36]	@ (8008c2c <_Bfree+0x40>)
 8008c08:	f000 fd62 	bl	80096d0 <__assert_func>
 8008c0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c10:	6006      	str	r6, [r0, #0]
 8008c12:	60c6      	str	r6, [r0, #12]
 8008c14:	b13c      	cbz	r4, 8008c26 <_Bfree+0x3a>
 8008c16:	69eb      	ldr	r3, [r5, #28]
 8008c18:	6862      	ldr	r2, [r4, #4]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c20:	6021      	str	r1, [r4, #0]
 8008c22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c26:	bd70      	pop	{r4, r5, r6, pc}
 8008c28:	0800a881 	.word	0x0800a881
 8008c2c:	0800a901 	.word	0x0800a901

08008c30 <__multadd>:
 8008c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c34:	4607      	mov	r7, r0
 8008c36:	460c      	mov	r4, r1
 8008c38:	461e      	mov	r6, r3
 8008c3a:	2000      	movs	r0, #0
 8008c3c:	690d      	ldr	r5, [r1, #16]
 8008c3e:	f101 0c14 	add.w	ip, r1, #20
 8008c42:	f8dc 3000 	ldr.w	r3, [ip]
 8008c46:	3001      	adds	r0, #1
 8008c48:	b299      	uxth	r1, r3
 8008c4a:	fb02 6101 	mla	r1, r2, r1, r6
 8008c4e:	0c1e      	lsrs	r6, r3, #16
 8008c50:	0c0b      	lsrs	r3, r1, #16
 8008c52:	fb02 3306 	mla	r3, r2, r6, r3
 8008c56:	b289      	uxth	r1, r1
 8008c58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c5c:	4285      	cmp	r5, r0
 8008c5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c62:	f84c 1b04 	str.w	r1, [ip], #4
 8008c66:	dcec      	bgt.n	8008c42 <__multadd+0x12>
 8008c68:	b30e      	cbz	r6, 8008cae <__multadd+0x7e>
 8008c6a:	68a3      	ldr	r3, [r4, #8]
 8008c6c:	42ab      	cmp	r3, r5
 8008c6e:	dc19      	bgt.n	8008ca4 <__multadd+0x74>
 8008c70:	6861      	ldr	r1, [r4, #4]
 8008c72:	4638      	mov	r0, r7
 8008c74:	3101      	adds	r1, #1
 8008c76:	f7ff ff79 	bl	8008b6c <_Balloc>
 8008c7a:	4680      	mov	r8, r0
 8008c7c:	b928      	cbnz	r0, 8008c8a <__multadd+0x5a>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	21ba      	movs	r1, #186	@ 0xba
 8008c82:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb4 <__multadd+0x84>)
 8008c84:	480c      	ldr	r0, [pc, #48]	@ (8008cb8 <__multadd+0x88>)
 8008c86:	f000 fd23 	bl	80096d0 <__assert_func>
 8008c8a:	6922      	ldr	r2, [r4, #16]
 8008c8c:	f104 010c 	add.w	r1, r4, #12
 8008c90:	3202      	adds	r2, #2
 8008c92:	0092      	lsls	r2, r2, #2
 8008c94:	300c      	adds	r0, #12
 8008c96:	f000 fd0d 	bl	80096b4 <memcpy>
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	4638      	mov	r0, r7
 8008c9e:	f7ff ffa5 	bl	8008bec <_Bfree>
 8008ca2:	4644      	mov	r4, r8
 8008ca4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ca8:	3501      	adds	r5, #1
 8008caa:	615e      	str	r6, [r3, #20]
 8008cac:	6125      	str	r5, [r4, #16]
 8008cae:	4620      	mov	r0, r4
 8008cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb4:	0800a8f0 	.word	0x0800a8f0
 8008cb8:	0800a901 	.word	0x0800a901

08008cbc <__hi0bits>:
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008cc2:	bf3a      	itte	cc
 8008cc4:	0403      	lslcc	r3, r0, #16
 8008cc6:	2010      	movcc	r0, #16
 8008cc8:	2000      	movcs	r0, #0
 8008cca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cce:	bf3c      	itt	cc
 8008cd0:	021b      	lslcc	r3, r3, #8
 8008cd2:	3008      	addcc	r0, #8
 8008cd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cd8:	bf3c      	itt	cc
 8008cda:	011b      	lslcc	r3, r3, #4
 8008cdc:	3004      	addcc	r0, #4
 8008cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ce2:	bf3c      	itt	cc
 8008ce4:	009b      	lslcc	r3, r3, #2
 8008ce6:	3002      	addcc	r0, #2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	db05      	blt.n	8008cf8 <__hi0bits+0x3c>
 8008cec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008cf0:	f100 0001 	add.w	r0, r0, #1
 8008cf4:	bf08      	it	eq
 8008cf6:	2020      	moveq	r0, #32
 8008cf8:	4770      	bx	lr

08008cfa <__lo0bits>:
 8008cfa:	6803      	ldr	r3, [r0, #0]
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	f013 0007 	ands.w	r0, r3, #7
 8008d02:	d00b      	beq.n	8008d1c <__lo0bits+0x22>
 8008d04:	07d9      	lsls	r1, r3, #31
 8008d06:	d421      	bmi.n	8008d4c <__lo0bits+0x52>
 8008d08:	0798      	lsls	r0, r3, #30
 8008d0a:	bf49      	itett	mi
 8008d0c:	085b      	lsrmi	r3, r3, #1
 8008d0e:	089b      	lsrpl	r3, r3, #2
 8008d10:	2001      	movmi	r0, #1
 8008d12:	6013      	strmi	r3, [r2, #0]
 8008d14:	bf5c      	itt	pl
 8008d16:	2002      	movpl	r0, #2
 8008d18:	6013      	strpl	r3, [r2, #0]
 8008d1a:	4770      	bx	lr
 8008d1c:	b299      	uxth	r1, r3
 8008d1e:	b909      	cbnz	r1, 8008d24 <__lo0bits+0x2a>
 8008d20:	2010      	movs	r0, #16
 8008d22:	0c1b      	lsrs	r3, r3, #16
 8008d24:	b2d9      	uxtb	r1, r3
 8008d26:	b909      	cbnz	r1, 8008d2c <__lo0bits+0x32>
 8008d28:	3008      	adds	r0, #8
 8008d2a:	0a1b      	lsrs	r3, r3, #8
 8008d2c:	0719      	lsls	r1, r3, #28
 8008d2e:	bf04      	itt	eq
 8008d30:	091b      	lsreq	r3, r3, #4
 8008d32:	3004      	addeq	r0, #4
 8008d34:	0799      	lsls	r1, r3, #30
 8008d36:	bf04      	itt	eq
 8008d38:	089b      	lsreq	r3, r3, #2
 8008d3a:	3002      	addeq	r0, #2
 8008d3c:	07d9      	lsls	r1, r3, #31
 8008d3e:	d403      	bmi.n	8008d48 <__lo0bits+0x4e>
 8008d40:	085b      	lsrs	r3, r3, #1
 8008d42:	f100 0001 	add.w	r0, r0, #1
 8008d46:	d003      	beq.n	8008d50 <__lo0bits+0x56>
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	4770      	bx	lr
 8008d4c:	2000      	movs	r0, #0
 8008d4e:	4770      	bx	lr
 8008d50:	2020      	movs	r0, #32
 8008d52:	4770      	bx	lr

08008d54 <__i2b>:
 8008d54:	b510      	push	{r4, lr}
 8008d56:	460c      	mov	r4, r1
 8008d58:	2101      	movs	r1, #1
 8008d5a:	f7ff ff07 	bl	8008b6c <_Balloc>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	b928      	cbnz	r0, 8008d6e <__i2b+0x1a>
 8008d62:	f240 1145 	movw	r1, #325	@ 0x145
 8008d66:	4b04      	ldr	r3, [pc, #16]	@ (8008d78 <__i2b+0x24>)
 8008d68:	4804      	ldr	r0, [pc, #16]	@ (8008d7c <__i2b+0x28>)
 8008d6a:	f000 fcb1 	bl	80096d0 <__assert_func>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	6144      	str	r4, [r0, #20]
 8008d72:	6103      	str	r3, [r0, #16]
 8008d74:	bd10      	pop	{r4, pc}
 8008d76:	bf00      	nop
 8008d78:	0800a8f0 	.word	0x0800a8f0
 8008d7c:	0800a901 	.word	0x0800a901

08008d80 <__multiply>:
 8008d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d84:	4617      	mov	r7, r2
 8008d86:	690a      	ldr	r2, [r1, #16]
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	4689      	mov	r9, r1
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	bfa2      	ittt	ge
 8008d90:	463b      	movge	r3, r7
 8008d92:	460f      	movge	r7, r1
 8008d94:	4699      	movge	r9, r3
 8008d96:	693d      	ldr	r5, [r7, #16]
 8008d98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	6879      	ldr	r1, [r7, #4]
 8008da0:	eb05 060a 	add.w	r6, r5, sl
 8008da4:	42b3      	cmp	r3, r6
 8008da6:	b085      	sub	sp, #20
 8008da8:	bfb8      	it	lt
 8008daa:	3101      	addlt	r1, #1
 8008dac:	f7ff fede 	bl	8008b6c <_Balloc>
 8008db0:	b930      	cbnz	r0, 8008dc0 <__multiply+0x40>
 8008db2:	4602      	mov	r2, r0
 8008db4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008db8:	4b40      	ldr	r3, [pc, #256]	@ (8008ebc <__multiply+0x13c>)
 8008dba:	4841      	ldr	r0, [pc, #260]	@ (8008ec0 <__multiply+0x140>)
 8008dbc:	f000 fc88 	bl	80096d0 <__assert_func>
 8008dc0:	f100 0414 	add.w	r4, r0, #20
 8008dc4:	4623      	mov	r3, r4
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008dcc:	4573      	cmp	r3, lr
 8008dce:	d320      	bcc.n	8008e12 <__multiply+0x92>
 8008dd0:	f107 0814 	add.w	r8, r7, #20
 8008dd4:	f109 0114 	add.w	r1, r9, #20
 8008dd8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008ddc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008de0:	9302      	str	r3, [sp, #8]
 8008de2:	1beb      	subs	r3, r5, r7
 8008de4:	3b15      	subs	r3, #21
 8008de6:	f023 0303 	bic.w	r3, r3, #3
 8008dea:	3304      	adds	r3, #4
 8008dec:	3715      	adds	r7, #21
 8008dee:	42bd      	cmp	r5, r7
 8008df0:	bf38      	it	cc
 8008df2:	2304      	movcc	r3, #4
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	9b02      	ldr	r3, [sp, #8]
 8008df8:	9103      	str	r1, [sp, #12]
 8008dfa:	428b      	cmp	r3, r1
 8008dfc:	d80c      	bhi.n	8008e18 <__multiply+0x98>
 8008dfe:	2e00      	cmp	r6, #0
 8008e00:	dd03      	ble.n	8008e0a <__multiply+0x8a>
 8008e02:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d055      	beq.n	8008eb6 <__multiply+0x136>
 8008e0a:	6106      	str	r6, [r0, #16]
 8008e0c:	b005      	add	sp, #20
 8008e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e12:	f843 2b04 	str.w	r2, [r3], #4
 8008e16:	e7d9      	b.n	8008dcc <__multiply+0x4c>
 8008e18:	f8b1 a000 	ldrh.w	sl, [r1]
 8008e1c:	f1ba 0f00 	cmp.w	sl, #0
 8008e20:	d01f      	beq.n	8008e62 <__multiply+0xe2>
 8008e22:	46c4      	mov	ip, r8
 8008e24:	46a1      	mov	r9, r4
 8008e26:	2700      	movs	r7, #0
 8008e28:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008e2c:	f8d9 3000 	ldr.w	r3, [r9]
 8008e30:	fa1f fb82 	uxth.w	fp, r2
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	fb0a 330b 	mla	r3, sl, fp, r3
 8008e3a:	443b      	add	r3, r7
 8008e3c:	f8d9 7000 	ldr.w	r7, [r9]
 8008e40:	0c12      	lsrs	r2, r2, #16
 8008e42:	0c3f      	lsrs	r7, r7, #16
 8008e44:	fb0a 7202 	mla	r2, sl, r2, r7
 8008e48:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e52:	4565      	cmp	r5, ip
 8008e54:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008e58:	f849 3b04 	str.w	r3, [r9], #4
 8008e5c:	d8e4      	bhi.n	8008e28 <__multiply+0xa8>
 8008e5e:	9b01      	ldr	r3, [sp, #4]
 8008e60:	50e7      	str	r7, [r4, r3]
 8008e62:	9b03      	ldr	r3, [sp, #12]
 8008e64:	3104      	adds	r1, #4
 8008e66:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008e6a:	f1b9 0f00 	cmp.w	r9, #0
 8008e6e:	d020      	beq.n	8008eb2 <__multiply+0x132>
 8008e70:	4647      	mov	r7, r8
 8008e72:	46a4      	mov	ip, r4
 8008e74:	f04f 0a00 	mov.w	sl, #0
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	f8b7 b000 	ldrh.w	fp, [r7]
 8008e7e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	fb09 220b 	mla	r2, r9, fp, r2
 8008e88:	4452      	add	r2, sl
 8008e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e8e:	f84c 3b04 	str.w	r3, [ip], #4
 8008e92:	f857 3b04 	ldr.w	r3, [r7], #4
 8008e96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e9a:	f8bc 3000 	ldrh.w	r3, [ip]
 8008e9e:	42bd      	cmp	r5, r7
 8008ea0:	fb09 330a 	mla	r3, r9, sl, r3
 8008ea4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008ea8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008eac:	d8e5      	bhi.n	8008e7a <__multiply+0xfa>
 8008eae:	9a01      	ldr	r2, [sp, #4]
 8008eb0:	50a3      	str	r3, [r4, r2]
 8008eb2:	3404      	adds	r4, #4
 8008eb4:	e79f      	b.n	8008df6 <__multiply+0x76>
 8008eb6:	3e01      	subs	r6, #1
 8008eb8:	e7a1      	b.n	8008dfe <__multiply+0x7e>
 8008eba:	bf00      	nop
 8008ebc:	0800a8f0 	.word	0x0800a8f0
 8008ec0:	0800a901 	.word	0x0800a901

08008ec4 <__pow5mult>:
 8008ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ec8:	4615      	mov	r5, r2
 8008eca:	f012 0203 	ands.w	r2, r2, #3
 8008ece:	4607      	mov	r7, r0
 8008ed0:	460e      	mov	r6, r1
 8008ed2:	d007      	beq.n	8008ee4 <__pow5mult+0x20>
 8008ed4:	4c25      	ldr	r4, [pc, #148]	@ (8008f6c <__pow5mult+0xa8>)
 8008ed6:	3a01      	subs	r2, #1
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ede:	f7ff fea7 	bl	8008c30 <__multadd>
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	10ad      	asrs	r5, r5, #2
 8008ee6:	d03d      	beq.n	8008f64 <__pow5mult+0xa0>
 8008ee8:	69fc      	ldr	r4, [r7, #28]
 8008eea:	b97c      	cbnz	r4, 8008f0c <__pow5mult+0x48>
 8008eec:	2010      	movs	r0, #16
 8008eee:	f7ff fd87 	bl	8008a00 <malloc>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	61f8      	str	r0, [r7, #28]
 8008ef6:	b928      	cbnz	r0, 8008f04 <__pow5mult+0x40>
 8008ef8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008efc:	4b1c      	ldr	r3, [pc, #112]	@ (8008f70 <__pow5mult+0xac>)
 8008efe:	481d      	ldr	r0, [pc, #116]	@ (8008f74 <__pow5mult+0xb0>)
 8008f00:	f000 fbe6 	bl	80096d0 <__assert_func>
 8008f04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f08:	6004      	str	r4, [r0, #0]
 8008f0a:	60c4      	str	r4, [r0, #12]
 8008f0c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008f10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f14:	b94c      	cbnz	r4, 8008f2a <__pow5mult+0x66>
 8008f16:	f240 2171 	movw	r1, #625	@ 0x271
 8008f1a:	4638      	mov	r0, r7
 8008f1c:	f7ff ff1a 	bl	8008d54 <__i2b>
 8008f20:	2300      	movs	r3, #0
 8008f22:	4604      	mov	r4, r0
 8008f24:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f28:	6003      	str	r3, [r0, #0]
 8008f2a:	f04f 0900 	mov.w	r9, #0
 8008f2e:	07eb      	lsls	r3, r5, #31
 8008f30:	d50a      	bpl.n	8008f48 <__pow5mult+0x84>
 8008f32:	4631      	mov	r1, r6
 8008f34:	4622      	mov	r2, r4
 8008f36:	4638      	mov	r0, r7
 8008f38:	f7ff ff22 	bl	8008d80 <__multiply>
 8008f3c:	4680      	mov	r8, r0
 8008f3e:	4631      	mov	r1, r6
 8008f40:	4638      	mov	r0, r7
 8008f42:	f7ff fe53 	bl	8008bec <_Bfree>
 8008f46:	4646      	mov	r6, r8
 8008f48:	106d      	asrs	r5, r5, #1
 8008f4a:	d00b      	beq.n	8008f64 <__pow5mult+0xa0>
 8008f4c:	6820      	ldr	r0, [r4, #0]
 8008f4e:	b938      	cbnz	r0, 8008f60 <__pow5mult+0x9c>
 8008f50:	4622      	mov	r2, r4
 8008f52:	4621      	mov	r1, r4
 8008f54:	4638      	mov	r0, r7
 8008f56:	f7ff ff13 	bl	8008d80 <__multiply>
 8008f5a:	6020      	str	r0, [r4, #0]
 8008f5c:	f8c0 9000 	str.w	r9, [r0]
 8008f60:	4604      	mov	r4, r0
 8008f62:	e7e4      	b.n	8008f2e <__pow5mult+0x6a>
 8008f64:	4630      	mov	r0, r6
 8008f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f6a:	bf00      	nop
 8008f6c:	0800a9b4 	.word	0x0800a9b4
 8008f70:	0800a881 	.word	0x0800a881
 8008f74:	0800a901 	.word	0x0800a901

08008f78 <__lshift>:
 8008f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f7c:	460c      	mov	r4, r1
 8008f7e:	4607      	mov	r7, r0
 8008f80:	4691      	mov	r9, r2
 8008f82:	6923      	ldr	r3, [r4, #16]
 8008f84:	6849      	ldr	r1, [r1, #4]
 8008f86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f8a:	68a3      	ldr	r3, [r4, #8]
 8008f8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f90:	f108 0601 	add.w	r6, r8, #1
 8008f94:	42b3      	cmp	r3, r6
 8008f96:	db0b      	blt.n	8008fb0 <__lshift+0x38>
 8008f98:	4638      	mov	r0, r7
 8008f9a:	f7ff fde7 	bl	8008b6c <_Balloc>
 8008f9e:	4605      	mov	r5, r0
 8008fa0:	b948      	cbnz	r0, 8008fb6 <__lshift+0x3e>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008fa8:	4b27      	ldr	r3, [pc, #156]	@ (8009048 <__lshift+0xd0>)
 8008faa:	4828      	ldr	r0, [pc, #160]	@ (800904c <__lshift+0xd4>)
 8008fac:	f000 fb90 	bl	80096d0 <__assert_func>
 8008fb0:	3101      	adds	r1, #1
 8008fb2:	005b      	lsls	r3, r3, #1
 8008fb4:	e7ee      	b.n	8008f94 <__lshift+0x1c>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	f100 0114 	add.w	r1, r0, #20
 8008fbc:	f100 0210 	add.w	r2, r0, #16
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	4553      	cmp	r3, sl
 8008fc4:	db33      	blt.n	800902e <__lshift+0xb6>
 8008fc6:	6920      	ldr	r0, [r4, #16]
 8008fc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008fcc:	f104 0314 	add.w	r3, r4, #20
 8008fd0:	f019 091f 	ands.w	r9, r9, #31
 8008fd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008fd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008fdc:	d02b      	beq.n	8009036 <__lshift+0xbe>
 8008fde:	468a      	mov	sl, r1
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f1c9 0e20 	rsb	lr, r9, #32
 8008fe6:	6818      	ldr	r0, [r3, #0]
 8008fe8:	fa00 f009 	lsl.w	r0, r0, r9
 8008fec:	4310      	orrs	r0, r2
 8008fee:	f84a 0b04 	str.w	r0, [sl], #4
 8008ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ff6:	459c      	cmp	ip, r3
 8008ff8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ffc:	d8f3      	bhi.n	8008fe6 <__lshift+0x6e>
 8008ffe:	ebac 0304 	sub.w	r3, ip, r4
 8009002:	3b15      	subs	r3, #21
 8009004:	f023 0303 	bic.w	r3, r3, #3
 8009008:	3304      	adds	r3, #4
 800900a:	f104 0015 	add.w	r0, r4, #21
 800900e:	4560      	cmp	r0, ip
 8009010:	bf88      	it	hi
 8009012:	2304      	movhi	r3, #4
 8009014:	50ca      	str	r2, [r1, r3]
 8009016:	b10a      	cbz	r2, 800901c <__lshift+0xa4>
 8009018:	f108 0602 	add.w	r6, r8, #2
 800901c:	3e01      	subs	r6, #1
 800901e:	4638      	mov	r0, r7
 8009020:	4621      	mov	r1, r4
 8009022:	612e      	str	r6, [r5, #16]
 8009024:	f7ff fde2 	bl	8008bec <_Bfree>
 8009028:	4628      	mov	r0, r5
 800902a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800902e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009032:	3301      	adds	r3, #1
 8009034:	e7c5      	b.n	8008fc2 <__lshift+0x4a>
 8009036:	3904      	subs	r1, #4
 8009038:	f853 2b04 	ldr.w	r2, [r3], #4
 800903c:	459c      	cmp	ip, r3
 800903e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009042:	d8f9      	bhi.n	8009038 <__lshift+0xc0>
 8009044:	e7ea      	b.n	800901c <__lshift+0xa4>
 8009046:	bf00      	nop
 8009048:	0800a8f0 	.word	0x0800a8f0
 800904c:	0800a901 	.word	0x0800a901

08009050 <__mcmp>:
 8009050:	4603      	mov	r3, r0
 8009052:	690a      	ldr	r2, [r1, #16]
 8009054:	6900      	ldr	r0, [r0, #16]
 8009056:	b530      	push	{r4, r5, lr}
 8009058:	1a80      	subs	r0, r0, r2
 800905a:	d10e      	bne.n	800907a <__mcmp+0x2a>
 800905c:	3314      	adds	r3, #20
 800905e:	3114      	adds	r1, #20
 8009060:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009064:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009068:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800906c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009070:	4295      	cmp	r5, r2
 8009072:	d003      	beq.n	800907c <__mcmp+0x2c>
 8009074:	d205      	bcs.n	8009082 <__mcmp+0x32>
 8009076:	f04f 30ff 	mov.w	r0, #4294967295
 800907a:	bd30      	pop	{r4, r5, pc}
 800907c:	42a3      	cmp	r3, r4
 800907e:	d3f3      	bcc.n	8009068 <__mcmp+0x18>
 8009080:	e7fb      	b.n	800907a <__mcmp+0x2a>
 8009082:	2001      	movs	r0, #1
 8009084:	e7f9      	b.n	800907a <__mcmp+0x2a>
	...

08009088 <__mdiff>:
 8009088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800908c:	4689      	mov	r9, r1
 800908e:	4606      	mov	r6, r0
 8009090:	4611      	mov	r1, r2
 8009092:	4648      	mov	r0, r9
 8009094:	4614      	mov	r4, r2
 8009096:	f7ff ffdb 	bl	8009050 <__mcmp>
 800909a:	1e05      	subs	r5, r0, #0
 800909c:	d112      	bne.n	80090c4 <__mdiff+0x3c>
 800909e:	4629      	mov	r1, r5
 80090a0:	4630      	mov	r0, r6
 80090a2:	f7ff fd63 	bl	8008b6c <_Balloc>
 80090a6:	4602      	mov	r2, r0
 80090a8:	b928      	cbnz	r0, 80090b6 <__mdiff+0x2e>
 80090aa:	f240 2137 	movw	r1, #567	@ 0x237
 80090ae:	4b3e      	ldr	r3, [pc, #248]	@ (80091a8 <__mdiff+0x120>)
 80090b0:	483e      	ldr	r0, [pc, #248]	@ (80091ac <__mdiff+0x124>)
 80090b2:	f000 fb0d 	bl	80096d0 <__assert_func>
 80090b6:	2301      	movs	r3, #1
 80090b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80090bc:	4610      	mov	r0, r2
 80090be:	b003      	add	sp, #12
 80090c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c4:	bfbc      	itt	lt
 80090c6:	464b      	movlt	r3, r9
 80090c8:	46a1      	movlt	r9, r4
 80090ca:	4630      	mov	r0, r6
 80090cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80090d0:	bfba      	itte	lt
 80090d2:	461c      	movlt	r4, r3
 80090d4:	2501      	movlt	r5, #1
 80090d6:	2500      	movge	r5, #0
 80090d8:	f7ff fd48 	bl	8008b6c <_Balloc>
 80090dc:	4602      	mov	r2, r0
 80090de:	b918      	cbnz	r0, 80090e8 <__mdiff+0x60>
 80090e0:	f240 2145 	movw	r1, #581	@ 0x245
 80090e4:	4b30      	ldr	r3, [pc, #192]	@ (80091a8 <__mdiff+0x120>)
 80090e6:	e7e3      	b.n	80090b0 <__mdiff+0x28>
 80090e8:	f100 0b14 	add.w	fp, r0, #20
 80090ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80090f0:	f109 0310 	add.w	r3, r9, #16
 80090f4:	60c5      	str	r5, [r0, #12]
 80090f6:	f04f 0c00 	mov.w	ip, #0
 80090fa:	f109 0514 	add.w	r5, r9, #20
 80090fe:	46d9      	mov	r9, fp
 8009100:	6926      	ldr	r6, [r4, #16]
 8009102:	f104 0e14 	add.w	lr, r4, #20
 8009106:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800910a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	9b01      	ldr	r3, [sp, #4]
 8009112:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009116:	f853 af04 	ldr.w	sl, [r3, #4]!
 800911a:	b281      	uxth	r1, r0
 800911c:	9301      	str	r3, [sp, #4]
 800911e:	fa1f f38a 	uxth.w	r3, sl
 8009122:	1a5b      	subs	r3, r3, r1
 8009124:	0c00      	lsrs	r0, r0, #16
 8009126:	4463      	add	r3, ip
 8009128:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800912c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009130:	b29b      	uxth	r3, r3
 8009132:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009136:	4576      	cmp	r6, lr
 8009138:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800913c:	f849 3b04 	str.w	r3, [r9], #4
 8009140:	d8e6      	bhi.n	8009110 <__mdiff+0x88>
 8009142:	1b33      	subs	r3, r6, r4
 8009144:	3b15      	subs	r3, #21
 8009146:	f023 0303 	bic.w	r3, r3, #3
 800914a:	3415      	adds	r4, #21
 800914c:	3304      	adds	r3, #4
 800914e:	42a6      	cmp	r6, r4
 8009150:	bf38      	it	cc
 8009152:	2304      	movcc	r3, #4
 8009154:	441d      	add	r5, r3
 8009156:	445b      	add	r3, fp
 8009158:	461e      	mov	r6, r3
 800915a:	462c      	mov	r4, r5
 800915c:	4544      	cmp	r4, r8
 800915e:	d30e      	bcc.n	800917e <__mdiff+0xf6>
 8009160:	f108 0103 	add.w	r1, r8, #3
 8009164:	1b49      	subs	r1, r1, r5
 8009166:	f021 0103 	bic.w	r1, r1, #3
 800916a:	3d03      	subs	r5, #3
 800916c:	45a8      	cmp	r8, r5
 800916e:	bf38      	it	cc
 8009170:	2100      	movcc	r1, #0
 8009172:	440b      	add	r3, r1
 8009174:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009178:	b199      	cbz	r1, 80091a2 <__mdiff+0x11a>
 800917a:	6117      	str	r7, [r2, #16]
 800917c:	e79e      	b.n	80090bc <__mdiff+0x34>
 800917e:	46e6      	mov	lr, ip
 8009180:	f854 1b04 	ldr.w	r1, [r4], #4
 8009184:	fa1f fc81 	uxth.w	ip, r1
 8009188:	44f4      	add	ip, lr
 800918a:	0c08      	lsrs	r0, r1, #16
 800918c:	4471      	add	r1, lr
 800918e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009192:	b289      	uxth	r1, r1
 8009194:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009198:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800919c:	f846 1b04 	str.w	r1, [r6], #4
 80091a0:	e7dc      	b.n	800915c <__mdiff+0xd4>
 80091a2:	3f01      	subs	r7, #1
 80091a4:	e7e6      	b.n	8009174 <__mdiff+0xec>
 80091a6:	bf00      	nop
 80091a8:	0800a8f0 	.word	0x0800a8f0
 80091ac:	0800a901 	.word	0x0800a901

080091b0 <__d2b>:
 80091b0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80091b4:	2101      	movs	r1, #1
 80091b6:	4690      	mov	r8, r2
 80091b8:	4699      	mov	r9, r3
 80091ba:	9e08      	ldr	r6, [sp, #32]
 80091bc:	f7ff fcd6 	bl	8008b6c <_Balloc>
 80091c0:	4604      	mov	r4, r0
 80091c2:	b930      	cbnz	r0, 80091d2 <__d2b+0x22>
 80091c4:	4602      	mov	r2, r0
 80091c6:	f240 310f 	movw	r1, #783	@ 0x30f
 80091ca:	4b23      	ldr	r3, [pc, #140]	@ (8009258 <__d2b+0xa8>)
 80091cc:	4823      	ldr	r0, [pc, #140]	@ (800925c <__d2b+0xac>)
 80091ce:	f000 fa7f 	bl	80096d0 <__assert_func>
 80091d2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80091d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80091da:	b10d      	cbz	r5, 80091e0 <__d2b+0x30>
 80091dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80091e0:	9301      	str	r3, [sp, #4]
 80091e2:	f1b8 0300 	subs.w	r3, r8, #0
 80091e6:	d024      	beq.n	8009232 <__d2b+0x82>
 80091e8:	4668      	mov	r0, sp
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	f7ff fd85 	bl	8008cfa <__lo0bits>
 80091f0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80091f4:	b1d8      	cbz	r0, 800922e <__d2b+0x7e>
 80091f6:	f1c0 0320 	rsb	r3, r0, #32
 80091fa:	fa02 f303 	lsl.w	r3, r2, r3
 80091fe:	430b      	orrs	r3, r1
 8009200:	40c2      	lsrs	r2, r0
 8009202:	6163      	str	r3, [r4, #20]
 8009204:	9201      	str	r2, [sp, #4]
 8009206:	9b01      	ldr	r3, [sp, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	bf0c      	ite	eq
 800920c:	2201      	moveq	r2, #1
 800920e:	2202      	movne	r2, #2
 8009210:	61a3      	str	r3, [r4, #24]
 8009212:	6122      	str	r2, [r4, #16]
 8009214:	b1ad      	cbz	r5, 8009242 <__d2b+0x92>
 8009216:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800921a:	4405      	add	r5, r0
 800921c:	6035      	str	r5, [r6, #0]
 800921e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009224:	6018      	str	r0, [r3, #0]
 8009226:	4620      	mov	r0, r4
 8009228:	b002      	add	sp, #8
 800922a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800922e:	6161      	str	r1, [r4, #20]
 8009230:	e7e9      	b.n	8009206 <__d2b+0x56>
 8009232:	a801      	add	r0, sp, #4
 8009234:	f7ff fd61 	bl	8008cfa <__lo0bits>
 8009238:	9b01      	ldr	r3, [sp, #4]
 800923a:	2201      	movs	r2, #1
 800923c:	6163      	str	r3, [r4, #20]
 800923e:	3020      	adds	r0, #32
 8009240:	e7e7      	b.n	8009212 <__d2b+0x62>
 8009242:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009246:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800924a:	6030      	str	r0, [r6, #0]
 800924c:	6918      	ldr	r0, [r3, #16]
 800924e:	f7ff fd35 	bl	8008cbc <__hi0bits>
 8009252:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009256:	e7e4      	b.n	8009222 <__d2b+0x72>
 8009258:	0800a8f0 	.word	0x0800a8f0
 800925c:	0800a901 	.word	0x0800a901

08009260 <__ssputs_r>:
 8009260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009264:	461f      	mov	r7, r3
 8009266:	688e      	ldr	r6, [r1, #8]
 8009268:	4682      	mov	sl, r0
 800926a:	42be      	cmp	r6, r7
 800926c:	460c      	mov	r4, r1
 800926e:	4690      	mov	r8, r2
 8009270:	680b      	ldr	r3, [r1, #0]
 8009272:	d82d      	bhi.n	80092d0 <__ssputs_r+0x70>
 8009274:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009278:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800927c:	d026      	beq.n	80092cc <__ssputs_r+0x6c>
 800927e:	6965      	ldr	r5, [r4, #20]
 8009280:	6909      	ldr	r1, [r1, #16]
 8009282:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009286:	eba3 0901 	sub.w	r9, r3, r1
 800928a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800928e:	1c7b      	adds	r3, r7, #1
 8009290:	444b      	add	r3, r9
 8009292:	106d      	asrs	r5, r5, #1
 8009294:	429d      	cmp	r5, r3
 8009296:	bf38      	it	cc
 8009298:	461d      	movcc	r5, r3
 800929a:	0553      	lsls	r3, r2, #21
 800929c:	d527      	bpl.n	80092ee <__ssputs_r+0x8e>
 800929e:	4629      	mov	r1, r5
 80092a0:	f7ff fbd8 	bl	8008a54 <_malloc_r>
 80092a4:	4606      	mov	r6, r0
 80092a6:	b360      	cbz	r0, 8009302 <__ssputs_r+0xa2>
 80092a8:	464a      	mov	r2, r9
 80092aa:	6921      	ldr	r1, [r4, #16]
 80092ac:	f000 fa02 	bl	80096b4 <memcpy>
 80092b0:	89a3      	ldrh	r3, [r4, #12]
 80092b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80092b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ba:	81a3      	strh	r3, [r4, #12]
 80092bc:	6126      	str	r6, [r4, #16]
 80092be:	444e      	add	r6, r9
 80092c0:	6026      	str	r6, [r4, #0]
 80092c2:	463e      	mov	r6, r7
 80092c4:	6165      	str	r5, [r4, #20]
 80092c6:	eba5 0509 	sub.w	r5, r5, r9
 80092ca:	60a5      	str	r5, [r4, #8]
 80092cc:	42be      	cmp	r6, r7
 80092ce:	d900      	bls.n	80092d2 <__ssputs_r+0x72>
 80092d0:	463e      	mov	r6, r7
 80092d2:	4632      	mov	r2, r6
 80092d4:	4641      	mov	r1, r8
 80092d6:	6820      	ldr	r0, [r4, #0]
 80092d8:	f000 f9c2 	bl	8009660 <memmove>
 80092dc:	2000      	movs	r0, #0
 80092de:	68a3      	ldr	r3, [r4, #8]
 80092e0:	1b9b      	subs	r3, r3, r6
 80092e2:	60a3      	str	r3, [r4, #8]
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	4433      	add	r3, r6
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ee:	462a      	mov	r2, r5
 80092f0:	f000 fa32 	bl	8009758 <_realloc_r>
 80092f4:	4606      	mov	r6, r0
 80092f6:	2800      	cmp	r0, #0
 80092f8:	d1e0      	bne.n	80092bc <__ssputs_r+0x5c>
 80092fa:	4650      	mov	r0, sl
 80092fc:	6921      	ldr	r1, [r4, #16]
 80092fe:	f7ff fb37 	bl	8008970 <_free_r>
 8009302:	230c      	movs	r3, #12
 8009304:	f8ca 3000 	str.w	r3, [sl]
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	f04f 30ff 	mov.w	r0, #4294967295
 800930e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009312:	81a3      	strh	r3, [r4, #12]
 8009314:	e7e9      	b.n	80092ea <__ssputs_r+0x8a>
	...

08009318 <_svfiprintf_r>:
 8009318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	4698      	mov	r8, r3
 800931e:	898b      	ldrh	r3, [r1, #12]
 8009320:	4607      	mov	r7, r0
 8009322:	061b      	lsls	r3, r3, #24
 8009324:	460d      	mov	r5, r1
 8009326:	4614      	mov	r4, r2
 8009328:	b09d      	sub	sp, #116	@ 0x74
 800932a:	d510      	bpl.n	800934e <_svfiprintf_r+0x36>
 800932c:	690b      	ldr	r3, [r1, #16]
 800932e:	b973      	cbnz	r3, 800934e <_svfiprintf_r+0x36>
 8009330:	2140      	movs	r1, #64	@ 0x40
 8009332:	f7ff fb8f 	bl	8008a54 <_malloc_r>
 8009336:	6028      	str	r0, [r5, #0]
 8009338:	6128      	str	r0, [r5, #16]
 800933a:	b930      	cbnz	r0, 800934a <_svfiprintf_r+0x32>
 800933c:	230c      	movs	r3, #12
 800933e:	603b      	str	r3, [r7, #0]
 8009340:	f04f 30ff 	mov.w	r0, #4294967295
 8009344:	b01d      	add	sp, #116	@ 0x74
 8009346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934a:	2340      	movs	r3, #64	@ 0x40
 800934c:	616b      	str	r3, [r5, #20]
 800934e:	2300      	movs	r3, #0
 8009350:	9309      	str	r3, [sp, #36]	@ 0x24
 8009352:	2320      	movs	r3, #32
 8009354:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009358:	2330      	movs	r3, #48	@ 0x30
 800935a:	f04f 0901 	mov.w	r9, #1
 800935e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009362:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80094fc <_svfiprintf_r+0x1e4>
 8009366:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800936a:	4623      	mov	r3, r4
 800936c:	469a      	mov	sl, r3
 800936e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009372:	b10a      	cbz	r2, 8009378 <_svfiprintf_r+0x60>
 8009374:	2a25      	cmp	r2, #37	@ 0x25
 8009376:	d1f9      	bne.n	800936c <_svfiprintf_r+0x54>
 8009378:	ebba 0b04 	subs.w	fp, sl, r4
 800937c:	d00b      	beq.n	8009396 <_svfiprintf_r+0x7e>
 800937e:	465b      	mov	r3, fp
 8009380:	4622      	mov	r2, r4
 8009382:	4629      	mov	r1, r5
 8009384:	4638      	mov	r0, r7
 8009386:	f7ff ff6b 	bl	8009260 <__ssputs_r>
 800938a:	3001      	adds	r0, #1
 800938c:	f000 80a7 	beq.w	80094de <_svfiprintf_r+0x1c6>
 8009390:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009392:	445a      	add	r2, fp
 8009394:	9209      	str	r2, [sp, #36]	@ 0x24
 8009396:	f89a 3000 	ldrb.w	r3, [sl]
 800939a:	2b00      	cmp	r3, #0
 800939c:	f000 809f 	beq.w	80094de <_svfiprintf_r+0x1c6>
 80093a0:	2300      	movs	r3, #0
 80093a2:	f04f 32ff 	mov.w	r2, #4294967295
 80093a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093aa:	f10a 0a01 	add.w	sl, sl, #1
 80093ae:	9304      	str	r3, [sp, #16]
 80093b0:	9307      	str	r3, [sp, #28]
 80093b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80093b8:	4654      	mov	r4, sl
 80093ba:	2205      	movs	r2, #5
 80093bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093c0:	484e      	ldr	r0, [pc, #312]	@ (80094fc <_svfiprintf_r+0x1e4>)
 80093c2:	f7fe fc6a 	bl	8007c9a <memchr>
 80093c6:	9a04      	ldr	r2, [sp, #16]
 80093c8:	b9d8      	cbnz	r0, 8009402 <_svfiprintf_r+0xea>
 80093ca:	06d0      	lsls	r0, r2, #27
 80093cc:	bf44      	itt	mi
 80093ce:	2320      	movmi	r3, #32
 80093d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093d4:	0711      	lsls	r1, r2, #28
 80093d6:	bf44      	itt	mi
 80093d8:	232b      	movmi	r3, #43	@ 0x2b
 80093da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80093de:	f89a 3000 	ldrb.w	r3, [sl]
 80093e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80093e4:	d015      	beq.n	8009412 <_svfiprintf_r+0xfa>
 80093e6:	4654      	mov	r4, sl
 80093e8:	2000      	movs	r0, #0
 80093ea:	f04f 0c0a 	mov.w	ip, #10
 80093ee:	9a07      	ldr	r2, [sp, #28]
 80093f0:	4621      	mov	r1, r4
 80093f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093f6:	3b30      	subs	r3, #48	@ 0x30
 80093f8:	2b09      	cmp	r3, #9
 80093fa:	d94b      	bls.n	8009494 <_svfiprintf_r+0x17c>
 80093fc:	b1b0      	cbz	r0, 800942c <_svfiprintf_r+0x114>
 80093fe:	9207      	str	r2, [sp, #28]
 8009400:	e014      	b.n	800942c <_svfiprintf_r+0x114>
 8009402:	eba0 0308 	sub.w	r3, r0, r8
 8009406:	fa09 f303 	lsl.w	r3, r9, r3
 800940a:	4313      	orrs	r3, r2
 800940c:	46a2      	mov	sl, r4
 800940e:	9304      	str	r3, [sp, #16]
 8009410:	e7d2      	b.n	80093b8 <_svfiprintf_r+0xa0>
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	1d19      	adds	r1, r3, #4
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	9103      	str	r1, [sp, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	bfbb      	ittet	lt
 800941e:	425b      	neglt	r3, r3
 8009420:	f042 0202 	orrlt.w	r2, r2, #2
 8009424:	9307      	strge	r3, [sp, #28]
 8009426:	9307      	strlt	r3, [sp, #28]
 8009428:	bfb8      	it	lt
 800942a:	9204      	strlt	r2, [sp, #16]
 800942c:	7823      	ldrb	r3, [r4, #0]
 800942e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009430:	d10a      	bne.n	8009448 <_svfiprintf_r+0x130>
 8009432:	7863      	ldrb	r3, [r4, #1]
 8009434:	2b2a      	cmp	r3, #42	@ 0x2a
 8009436:	d132      	bne.n	800949e <_svfiprintf_r+0x186>
 8009438:	9b03      	ldr	r3, [sp, #12]
 800943a:	3402      	adds	r4, #2
 800943c:	1d1a      	adds	r2, r3, #4
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	9203      	str	r2, [sp, #12]
 8009442:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009446:	9305      	str	r3, [sp, #20]
 8009448:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009500 <_svfiprintf_r+0x1e8>
 800944c:	2203      	movs	r2, #3
 800944e:	4650      	mov	r0, sl
 8009450:	7821      	ldrb	r1, [r4, #0]
 8009452:	f7fe fc22 	bl	8007c9a <memchr>
 8009456:	b138      	cbz	r0, 8009468 <_svfiprintf_r+0x150>
 8009458:	2240      	movs	r2, #64	@ 0x40
 800945a:	9b04      	ldr	r3, [sp, #16]
 800945c:	eba0 000a 	sub.w	r0, r0, sl
 8009460:	4082      	lsls	r2, r0
 8009462:	4313      	orrs	r3, r2
 8009464:	3401      	adds	r4, #1
 8009466:	9304      	str	r3, [sp, #16]
 8009468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800946c:	2206      	movs	r2, #6
 800946e:	4825      	ldr	r0, [pc, #148]	@ (8009504 <_svfiprintf_r+0x1ec>)
 8009470:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009474:	f7fe fc11 	bl	8007c9a <memchr>
 8009478:	2800      	cmp	r0, #0
 800947a:	d036      	beq.n	80094ea <_svfiprintf_r+0x1d2>
 800947c:	4b22      	ldr	r3, [pc, #136]	@ (8009508 <_svfiprintf_r+0x1f0>)
 800947e:	bb1b      	cbnz	r3, 80094c8 <_svfiprintf_r+0x1b0>
 8009480:	9b03      	ldr	r3, [sp, #12]
 8009482:	3307      	adds	r3, #7
 8009484:	f023 0307 	bic.w	r3, r3, #7
 8009488:	3308      	adds	r3, #8
 800948a:	9303      	str	r3, [sp, #12]
 800948c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800948e:	4433      	add	r3, r6
 8009490:	9309      	str	r3, [sp, #36]	@ 0x24
 8009492:	e76a      	b.n	800936a <_svfiprintf_r+0x52>
 8009494:	460c      	mov	r4, r1
 8009496:	2001      	movs	r0, #1
 8009498:	fb0c 3202 	mla	r2, ip, r2, r3
 800949c:	e7a8      	b.n	80093f0 <_svfiprintf_r+0xd8>
 800949e:	2300      	movs	r3, #0
 80094a0:	f04f 0c0a 	mov.w	ip, #10
 80094a4:	4619      	mov	r1, r3
 80094a6:	3401      	adds	r4, #1
 80094a8:	9305      	str	r3, [sp, #20]
 80094aa:	4620      	mov	r0, r4
 80094ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094b0:	3a30      	subs	r2, #48	@ 0x30
 80094b2:	2a09      	cmp	r2, #9
 80094b4:	d903      	bls.n	80094be <_svfiprintf_r+0x1a6>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0c6      	beq.n	8009448 <_svfiprintf_r+0x130>
 80094ba:	9105      	str	r1, [sp, #20]
 80094bc:	e7c4      	b.n	8009448 <_svfiprintf_r+0x130>
 80094be:	4604      	mov	r4, r0
 80094c0:	2301      	movs	r3, #1
 80094c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80094c6:	e7f0      	b.n	80094aa <_svfiprintf_r+0x192>
 80094c8:	ab03      	add	r3, sp, #12
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	462a      	mov	r2, r5
 80094ce:	4638      	mov	r0, r7
 80094d0:	4b0e      	ldr	r3, [pc, #56]	@ (800950c <_svfiprintf_r+0x1f4>)
 80094d2:	a904      	add	r1, sp, #16
 80094d4:	f7fd fe64 	bl	80071a0 <_printf_float>
 80094d8:	1c42      	adds	r2, r0, #1
 80094da:	4606      	mov	r6, r0
 80094dc:	d1d6      	bne.n	800948c <_svfiprintf_r+0x174>
 80094de:	89ab      	ldrh	r3, [r5, #12]
 80094e0:	065b      	lsls	r3, r3, #25
 80094e2:	f53f af2d 	bmi.w	8009340 <_svfiprintf_r+0x28>
 80094e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80094e8:	e72c      	b.n	8009344 <_svfiprintf_r+0x2c>
 80094ea:	ab03      	add	r3, sp, #12
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	462a      	mov	r2, r5
 80094f0:	4638      	mov	r0, r7
 80094f2:	4b06      	ldr	r3, [pc, #24]	@ (800950c <_svfiprintf_r+0x1f4>)
 80094f4:	a904      	add	r1, sp, #16
 80094f6:	f7fe f8f1 	bl	80076dc <_printf_i>
 80094fa:	e7ed      	b.n	80094d8 <_svfiprintf_r+0x1c0>
 80094fc:	0800a95a 	.word	0x0800a95a
 8009500:	0800a960 	.word	0x0800a960
 8009504:	0800a964 	.word	0x0800a964
 8009508:	080071a1 	.word	0x080071a1
 800950c:	08009261 	.word	0x08009261

08009510 <__sflush_r>:
 8009510:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009516:	0716      	lsls	r6, r2, #28
 8009518:	4605      	mov	r5, r0
 800951a:	460c      	mov	r4, r1
 800951c:	d454      	bmi.n	80095c8 <__sflush_r+0xb8>
 800951e:	684b      	ldr	r3, [r1, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	dc02      	bgt.n	800952a <__sflush_r+0x1a>
 8009524:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009526:	2b00      	cmp	r3, #0
 8009528:	dd48      	ble.n	80095bc <__sflush_r+0xac>
 800952a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800952c:	2e00      	cmp	r6, #0
 800952e:	d045      	beq.n	80095bc <__sflush_r+0xac>
 8009530:	2300      	movs	r3, #0
 8009532:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009536:	682f      	ldr	r7, [r5, #0]
 8009538:	6a21      	ldr	r1, [r4, #32]
 800953a:	602b      	str	r3, [r5, #0]
 800953c:	d030      	beq.n	80095a0 <__sflush_r+0x90>
 800953e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009540:	89a3      	ldrh	r3, [r4, #12]
 8009542:	0759      	lsls	r1, r3, #29
 8009544:	d505      	bpl.n	8009552 <__sflush_r+0x42>
 8009546:	6863      	ldr	r3, [r4, #4]
 8009548:	1ad2      	subs	r2, r2, r3
 800954a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800954c:	b10b      	cbz	r3, 8009552 <__sflush_r+0x42>
 800954e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009550:	1ad2      	subs	r2, r2, r3
 8009552:	2300      	movs	r3, #0
 8009554:	4628      	mov	r0, r5
 8009556:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009558:	6a21      	ldr	r1, [r4, #32]
 800955a:	47b0      	blx	r6
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	d106      	bne.n	8009570 <__sflush_r+0x60>
 8009562:	6829      	ldr	r1, [r5, #0]
 8009564:	291d      	cmp	r1, #29
 8009566:	d82b      	bhi.n	80095c0 <__sflush_r+0xb0>
 8009568:	4a28      	ldr	r2, [pc, #160]	@ (800960c <__sflush_r+0xfc>)
 800956a:	40ca      	lsrs	r2, r1
 800956c:	07d6      	lsls	r6, r2, #31
 800956e:	d527      	bpl.n	80095c0 <__sflush_r+0xb0>
 8009570:	2200      	movs	r2, #0
 8009572:	6062      	str	r2, [r4, #4]
 8009574:	6922      	ldr	r2, [r4, #16]
 8009576:	04d9      	lsls	r1, r3, #19
 8009578:	6022      	str	r2, [r4, #0]
 800957a:	d504      	bpl.n	8009586 <__sflush_r+0x76>
 800957c:	1c42      	adds	r2, r0, #1
 800957e:	d101      	bne.n	8009584 <__sflush_r+0x74>
 8009580:	682b      	ldr	r3, [r5, #0]
 8009582:	b903      	cbnz	r3, 8009586 <__sflush_r+0x76>
 8009584:	6560      	str	r0, [r4, #84]	@ 0x54
 8009586:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009588:	602f      	str	r7, [r5, #0]
 800958a:	b1b9      	cbz	r1, 80095bc <__sflush_r+0xac>
 800958c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009590:	4299      	cmp	r1, r3
 8009592:	d002      	beq.n	800959a <__sflush_r+0x8a>
 8009594:	4628      	mov	r0, r5
 8009596:	f7ff f9eb 	bl	8008970 <_free_r>
 800959a:	2300      	movs	r3, #0
 800959c:	6363      	str	r3, [r4, #52]	@ 0x34
 800959e:	e00d      	b.n	80095bc <__sflush_r+0xac>
 80095a0:	2301      	movs	r3, #1
 80095a2:	4628      	mov	r0, r5
 80095a4:	47b0      	blx	r6
 80095a6:	4602      	mov	r2, r0
 80095a8:	1c50      	adds	r0, r2, #1
 80095aa:	d1c9      	bne.n	8009540 <__sflush_r+0x30>
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0c6      	beq.n	8009540 <__sflush_r+0x30>
 80095b2:	2b1d      	cmp	r3, #29
 80095b4:	d001      	beq.n	80095ba <__sflush_r+0xaa>
 80095b6:	2b16      	cmp	r3, #22
 80095b8:	d11d      	bne.n	80095f6 <__sflush_r+0xe6>
 80095ba:	602f      	str	r7, [r5, #0]
 80095bc:	2000      	movs	r0, #0
 80095be:	e021      	b.n	8009604 <__sflush_r+0xf4>
 80095c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095c4:	b21b      	sxth	r3, r3
 80095c6:	e01a      	b.n	80095fe <__sflush_r+0xee>
 80095c8:	690f      	ldr	r7, [r1, #16]
 80095ca:	2f00      	cmp	r7, #0
 80095cc:	d0f6      	beq.n	80095bc <__sflush_r+0xac>
 80095ce:	0793      	lsls	r3, r2, #30
 80095d0:	bf18      	it	ne
 80095d2:	2300      	movne	r3, #0
 80095d4:	680e      	ldr	r6, [r1, #0]
 80095d6:	bf08      	it	eq
 80095d8:	694b      	ldreq	r3, [r1, #20]
 80095da:	1bf6      	subs	r6, r6, r7
 80095dc:	600f      	str	r7, [r1, #0]
 80095de:	608b      	str	r3, [r1, #8]
 80095e0:	2e00      	cmp	r6, #0
 80095e2:	ddeb      	ble.n	80095bc <__sflush_r+0xac>
 80095e4:	4633      	mov	r3, r6
 80095e6:	463a      	mov	r2, r7
 80095e8:	4628      	mov	r0, r5
 80095ea:	6a21      	ldr	r1, [r4, #32]
 80095ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80095f0:	47e0      	blx	ip
 80095f2:	2800      	cmp	r0, #0
 80095f4:	dc07      	bgt.n	8009606 <__sflush_r+0xf6>
 80095f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009602:	81a3      	strh	r3, [r4, #12]
 8009604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009606:	4407      	add	r7, r0
 8009608:	1a36      	subs	r6, r6, r0
 800960a:	e7e9      	b.n	80095e0 <__sflush_r+0xd0>
 800960c:	20400001 	.word	0x20400001

08009610 <_fflush_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	690b      	ldr	r3, [r1, #16]
 8009614:	4605      	mov	r5, r0
 8009616:	460c      	mov	r4, r1
 8009618:	b913      	cbnz	r3, 8009620 <_fflush_r+0x10>
 800961a:	2500      	movs	r5, #0
 800961c:	4628      	mov	r0, r5
 800961e:	bd38      	pop	{r3, r4, r5, pc}
 8009620:	b118      	cbz	r0, 800962a <_fflush_r+0x1a>
 8009622:	6a03      	ldr	r3, [r0, #32]
 8009624:	b90b      	cbnz	r3, 800962a <_fflush_r+0x1a>
 8009626:	f7fe fa03 	bl	8007a30 <__sinit>
 800962a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d0f3      	beq.n	800961a <_fflush_r+0xa>
 8009632:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009634:	07d0      	lsls	r0, r2, #31
 8009636:	d404      	bmi.n	8009642 <_fflush_r+0x32>
 8009638:	0599      	lsls	r1, r3, #22
 800963a:	d402      	bmi.n	8009642 <_fflush_r+0x32>
 800963c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800963e:	f7fe fb2a 	bl	8007c96 <__retarget_lock_acquire_recursive>
 8009642:	4628      	mov	r0, r5
 8009644:	4621      	mov	r1, r4
 8009646:	f7ff ff63 	bl	8009510 <__sflush_r>
 800964a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800964c:	4605      	mov	r5, r0
 800964e:	07da      	lsls	r2, r3, #31
 8009650:	d4e4      	bmi.n	800961c <_fflush_r+0xc>
 8009652:	89a3      	ldrh	r3, [r4, #12]
 8009654:	059b      	lsls	r3, r3, #22
 8009656:	d4e1      	bmi.n	800961c <_fflush_r+0xc>
 8009658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800965a:	f7fe fb1d 	bl	8007c98 <__retarget_lock_release_recursive>
 800965e:	e7dd      	b.n	800961c <_fflush_r+0xc>

08009660 <memmove>:
 8009660:	4288      	cmp	r0, r1
 8009662:	b510      	push	{r4, lr}
 8009664:	eb01 0402 	add.w	r4, r1, r2
 8009668:	d902      	bls.n	8009670 <memmove+0x10>
 800966a:	4284      	cmp	r4, r0
 800966c:	4623      	mov	r3, r4
 800966e:	d807      	bhi.n	8009680 <memmove+0x20>
 8009670:	1e43      	subs	r3, r0, #1
 8009672:	42a1      	cmp	r1, r4
 8009674:	d008      	beq.n	8009688 <memmove+0x28>
 8009676:	f811 2b01 	ldrb.w	r2, [r1], #1
 800967a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800967e:	e7f8      	b.n	8009672 <memmove+0x12>
 8009680:	4601      	mov	r1, r0
 8009682:	4402      	add	r2, r0
 8009684:	428a      	cmp	r2, r1
 8009686:	d100      	bne.n	800968a <memmove+0x2a>
 8009688:	bd10      	pop	{r4, pc}
 800968a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800968e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009692:	e7f7      	b.n	8009684 <memmove+0x24>

08009694 <_sbrk_r>:
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	2300      	movs	r3, #0
 8009698:	4d05      	ldr	r5, [pc, #20]	@ (80096b0 <_sbrk_r+0x1c>)
 800969a:	4604      	mov	r4, r0
 800969c:	4608      	mov	r0, r1
 800969e:	602b      	str	r3, [r5, #0]
 80096a0:	f7fa fe88 	bl	80043b4 <_sbrk>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d102      	bne.n	80096ae <_sbrk_r+0x1a>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	b103      	cbz	r3, 80096ae <_sbrk_r+0x1a>
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	20000788 	.word	0x20000788

080096b4 <memcpy>:
 80096b4:	440a      	add	r2, r1
 80096b6:	4291      	cmp	r1, r2
 80096b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80096bc:	d100      	bne.n	80096c0 <memcpy+0xc>
 80096be:	4770      	bx	lr
 80096c0:	b510      	push	{r4, lr}
 80096c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096c6:	4291      	cmp	r1, r2
 80096c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096cc:	d1f9      	bne.n	80096c2 <memcpy+0xe>
 80096ce:	bd10      	pop	{r4, pc}

080096d0 <__assert_func>:
 80096d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096d2:	4614      	mov	r4, r2
 80096d4:	461a      	mov	r2, r3
 80096d6:	4b09      	ldr	r3, [pc, #36]	@ (80096fc <__assert_func+0x2c>)
 80096d8:	4605      	mov	r5, r0
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68d8      	ldr	r0, [r3, #12]
 80096de:	b14c      	cbz	r4, 80096f4 <__assert_func+0x24>
 80096e0:	4b07      	ldr	r3, [pc, #28]	@ (8009700 <__assert_func+0x30>)
 80096e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096e6:	9100      	str	r1, [sp, #0]
 80096e8:	462b      	mov	r3, r5
 80096ea:	4906      	ldr	r1, [pc, #24]	@ (8009704 <__assert_func+0x34>)
 80096ec:	f000 f870 	bl	80097d0 <fiprintf>
 80096f0:	f000 f880 	bl	80097f4 <abort>
 80096f4:	4b04      	ldr	r3, [pc, #16]	@ (8009708 <__assert_func+0x38>)
 80096f6:	461c      	mov	r4, r3
 80096f8:	e7f3      	b.n	80096e2 <__assert_func+0x12>
 80096fa:	bf00      	nop
 80096fc:	2000003c 	.word	0x2000003c
 8009700:	0800a975 	.word	0x0800a975
 8009704:	0800a982 	.word	0x0800a982
 8009708:	0800a9b0 	.word	0x0800a9b0

0800970c <_calloc_r>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	fba1 5402 	umull	r5, r4, r1, r2
 8009712:	b934      	cbnz	r4, 8009722 <_calloc_r+0x16>
 8009714:	4629      	mov	r1, r5
 8009716:	f7ff f99d 	bl	8008a54 <_malloc_r>
 800971a:	4606      	mov	r6, r0
 800971c:	b928      	cbnz	r0, 800972a <_calloc_r+0x1e>
 800971e:	4630      	mov	r0, r6
 8009720:	bd70      	pop	{r4, r5, r6, pc}
 8009722:	220c      	movs	r2, #12
 8009724:	2600      	movs	r6, #0
 8009726:	6002      	str	r2, [r0, #0]
 8009728:	e7f9      	b.n	800971e <_calloc_r+0x12>
 800972a:	462a      	mov	r2, r5
 800972c:	4621      	mov	r1, r4
 800972e:	f7fe fa35 	bl	8007b9c <memset>
 8009732:	e7f4      	b.n	800971e <_calloc_r+0x12>

08009734 <__ascii_mbtowc>:
 8009734:	b082      	sub	sp, #8
 8009736:	b901      	cbnz	r1, 800973a <__ascii_mbtowc+0x6>
 8009738:	a901      	add	r1, sp, #4
 800973a:	b142      	cbz	r2, 800974e <__ascii_mbtowc+0x1a>
 800973c:	b14b      	cbz	r3, 8009752 <__ascii_mbtowc+0x1e>
 800973e:	7813      	ldrb	r3, [r2, #0]
 8009740:	600b      	str	r3, [r1, #0]
 8009742:	7812      	ldrb	r2, [r2, #0]
 8009744:	1e10      	subs	r0, r2, #0
 8009746:	bf18      	it	ne
 8009748:	2001      	movne	r0, #1
 800974a:	b002      	add	sp, #8
 800974c:	4770      	bx	lr
 800974e:	4610      	mov	r0, r2
 8009750:	e7fb      	b.n	800974a <__ascii_mbtowc+0x16>
 8009752:	f06f 0001 	mvn.w	r0, #1
 8009756:	e7f8      	b.n	800974a <__ascii_mbtowc+0x16>

08009758 <_realloc_r>:
 8009758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800975c:	4607      	mov	r7, r0
 800975e:	4614      	mov	r4, r2
 8009760:	460d      	mov	r5, r1
 8009762:	b921      	cbnz	r1, 800976e <_realloc_r+0x16>
 8009764:	4611      	mov	r1, r2
 8009766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800976a:	f7ff b973 	b.w	8008a54 <_malloc_r>
 800976e:	b92a      	cbnz	r2, 800977c <_realloc_r+0x24>
 8009770:	f7ff f8fe 	bl	8008970 <_free_r>
 8009774:	4625      	mov	r5, r4
 8009776:	4628      	mov	r0, r5
 8009778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800977c:	f000 f841 	bl	8009802 <_malloc_usable_size_r>
 8009780:	4284      	cmp	r4, r0
 8009782:	4606      	mov	r6, r0
 8009784:	d802      	bhi.n	800978c <_realloc_r+0x34>
 8009786:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800978a:	d8f4      	bhi.n	8009776 <_realloc_r+0x1e>
 800978c:	4621      	mov	r1, r4
 800978e:	4638      	mov	r0, r7
 8009790:	f7ff f960 	bl	8008a54 <_malloc_r>
 8009794:	4680      	mov	r8, r0
 8009796:	b908      	cbnz	r0, 800979c <_realloc_r+0x44>
 8009798:	4645      	mov	r5, r8
 800979a:	e7ec      	b.n	8009776 <_realloc_r+0x1e>
 800979c:	42b4      	cmp	r4, r6
 800979e:	4622      	mov	r2, r4
 80097a0:	4629      	mov	r1, r5
 80097a2:	bf28      	it	cs
 80097a4:	4632      	movcs	r2, r6
 80097a6:	f7ff ff85 	bl	80096b4 <memcpy>
 80097aa:	4629      	mov	r1, r5
 80097ac:	4638      	mov	r0, r7
 80097ae:	f7ff f8df 	bl	8008970 <_free_r>
 80097b2:	e7f1      	b.n	8009798 <_realloc_r+0x40>

080097b4 <__ascii_wctomb>:
 80097b4:	4603      	mov	r3, r0
 80097b6:	4608      	mov	r0, r1
 80097b8:	b141      	cbz	r1, 80097cc <__ascii_wctomb+0x18>
 80097ba:	2aff      	cmp	r2, #255	@ 0xff
 80097bc:	d904      	bls.n	80097c8 <__ascii_wctomb+0x14>
 80097be:	228a      	movs	r2, #138	@ 0x8a
 80097c0:	f04f 30ff 	mov.w	r0, #4294967295
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	4770      	bx	lr
 80097c8:	2001      	movs	r0, #1
 80097ca:	700a      	strb	r2, [r1, #0]
 80097cc:	4770      	bx	lr
	...

080097d0 <fiprintf>:
 80097d0:	b40e      	push	{r1, r2, r3}
 80097d2:	b503      	push	{r0, r1, lr}
 80097d4:	4601      	mov	r1, r0
 80097d6:	ab03      	add	r3, sp, #12
 80097d8:	4805      	ldr	r0, [pc, #20]	@ (80097f0 <fiprintf+0x20>)
 80097da:	f853 2b04 	ldr.w	r2, [r3], #4
 80097de:	6800      	ldr	r0, [r0, #0]
 80097e0:	9301      	str	r3, [sp, #4]
 80097e2:	f000 f83d 	bl	8009860 <_vfiprintf_r>
 80097e6:	b002      	add	sp, #8
 80097e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097ec:	b003      	add	sp, #12
 80097ee:	4770      	bx	lr
 80097f0:	2000003c 	.word	0x2000003c

080097f4 <abort>:
 80097f4:	2006      	movs	r0, #6
 80097f6:	b508      	push	{r3, lr}
 80097f8:	f000 fa06 	bl	8009c08 <raise>
 80097fc:	2001      	movs	r0, #1
 80097fe:	f7fa fd64 	bl	80042ca <_exit>

08009802 <_malloc_usable_size_r>:
 8009802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009806:	1f18      	subs	r0, r3, #4
 8009808:	2b00      	cmp	r3, #0
 800980a:	bfbc      	itt	lt
 800980c:	580b      	ldrlt	r3, [r1, r0]
 800980e:	18c0      	addlt	r0, r0, r3
 8009810:	4770      	bx	lr

08009812 <__sfputc_r>:
 8009812:	6893      	ldr	r3, [r2, #8]
 8009814:	b410      	push	{r4}
 8009816:	3b01      	subs	r3, #1
 8009818:	2b00      	cmp	r3, #0
 800981a:	6093      	str	r3, [r2, #8]
 800981c:	da07      	bge.n	800982e <__sfputc_r+0x1c>
 800981e:	6994      	ldr	r4, [r2, #24]
 8009820:	42a3      	cmp	r3, r4
 8009822:	db01      	blt.n	8009828 <__sfputc_r+0x16>
 8009824:	290a      	cmp	r1, #10
 8009826:	d102      	bne.n	800982e <__sfputc_r+0x1c>
 8009828:	bc10      	pop	{r4}
 800982a:	f000 b931 	b.w	8009a90 <__swbuf_r>
 800982e:	6813      	ldr	r3, [r2, #0]
 8009830:	1c58      	adds	r0, r3, #1
 8009832:	6010      	str	r0, [r2, #0]
 8009834:	7019      	strb	r1, [r3, #0]
 8009836:	4608      	mov	r0, r1
 8009838:	bc10      	pop	{r4}
 800983a:	4770      	bx	lr

0800983c <__sfputs_r>:
 800983c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983e:	4606      	mov	r6, r0
 8009840:	460f      	mov	r7, r1
 8009842:	4614      	mov	r4, r2
 8009844:	18d5      	adds	r5, r2, r3
 8009846:	42ac      	cmp	r4, r5
 8009848:	d101      	bne.n	800984e <__sfputs_r+0x12>
 800984a:	2000      	movs	r0, #0
 800984c:	e007      	b.n	800985e <__sfputs_r+0x22>
 800984e:	463a      	mov	r2, r7
 8009850:	4630      	mov	r0, r6
 8009852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009856:	f7ff ffdc 	bl	8009812 <__sfputc_r>
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	d1f3      	bne.n	8009846 <__sfputs_r+0xa>
 800985e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009860 <_vfiprintf_r>:
 8009860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009864:	460d      	mov	r5, r1
 8009866:	4614      	mov	r4, r2
 8009868:	4698      	mov	r8, r3
 800986a:	4606      	mov	r6, r0
 800986c:	b09d      	sub	sp, #116	@ 0x74
 800986e:	b118      	cbz	r0, 8009878 <_vfiprintf_r+0x18>
 8009870:	6a03      	ldr	r3, [r0, #32]
 8009872:	b90b      	cbnz	r3, 8009878 <_vfiprintf_r+0x18>
 8009874:	f7fe f8dc 	bl	8007a30 <__sinit>
 8009878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800987a:	07d9      	lsls	r1, r3, #31
 800987c:	d405      	bmi.n	800988a <_vfiprintf_r+0x2a>
 800987e:	89ab      	ldrh	r3, [r5, #12]
 8009880:	059a      	lsls	r2, r3, #22
 8009882:	d402      	bmi.n	800988a <_vfiprintf_r+0x2a>
 8009884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009886:	f7fe fa06 	bl	8007c96 <__retarget_lock_acquire_recursive>
 800988a:	89ab      	ldrh	r3, [r5, #12]
 800988c:	071b      	lsls	r3, r3, #28
 800988e:	d501      	bpl.n	8009894 <_vfiprintf_r+0x34>
 8009890:	692b      	ldr	r3, [r5, #16]
 8009892:	b99b      	cbnz	r3, 80098bc <_vfiprintf_r+0x5c>
 8009894:	4629      	mov	r1, r5
 8009896:	4630      	mov	r0, r6
 8009898:	f000 f938 	bl	8009b0c <__swsetup_r>
 800989c:	b170      	cbz	r0, 80098bc <_vfiprintf_r+0x5c>
 800989e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098a0:	07dc      	lsls	r4, r3, #31
 80098a2:	d504      	bpl.n	80098ae <_vfiprintf_r+0x4e>
 80098a4:	f04f 30ff 	mov.w	r0, #4294967295
 80098a8:	b01d      	add	sp, #116	@ 0x74
 80098aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ae:	89ab      	ldrh	r3, [r5, #12]
 80098b0:	0598      	lsls	r0, r3, #22
 80098b2:	d4f7      	bmi.n	80098a4 <_vfiprintf_r+0x44>
 80098b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098b6:	f7fe f9ef 	bl	8007c98 <__retarget_lock_release_recursive>
 80098ba:	e7f3      	b.n	80098a4 <_vfiprintf_r+0x44>
 80098bc:	2300      	movs	r3, #0
 80098be:	9309      	str	r3, [sp, #36]	@ 0x24
 80098c0:	2320      	movs	r3, #32
 80098c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098c6:	2330      	movs	r3, #48	@ 0x30
 80098c8:	f04f 0901 	mov.w	r9, #1
 80098cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80098d0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009a7c <_vfiprintf_r+0x21c>
 80098d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80098d8:	4623      	mov	r3, r4
 80098da:	469a      	mov	sl, r3
 80098dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098e0:	b10a      	cbz	r2, 80098e6 <_vfiprintf_r+0x86>
 80098e2:	2a25      	cmp	r2, #37	@ 0x25
 80098e4:	d1f9      	bne.n	80098da <_vfiprintf_r+0x7a>
 80098e6:	ebba 0b04 	subs.w	fp, sl, r4
 80098ea:	d00b      	beq.n	8009904 <_vfiprintf_r+0xa4>
 80098ec:	465b      	mov	r3, fp
 80098ee:	4622      	mov	r2, r4
 80098f0:	4629      	mov	r1, r5
 80098f2:	4630      	mov	r0, r6
 80098f4:	f7ff ffa2 	bl	800983c <__sfputs_r>
 80098f8:	3001      	adds	r0, #1
 80098fa:	f000 80a7 	beq.w	8009a4c <_vfiprintf_r+0x1ec>
 80098fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009900:	445a      	add	r2, fp
 8009902:	9209      	str	r2, [sp, #36]	@ 0x24
 8009904:	f89a 3000 	ldrb.w	r3, [sl]
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 809f 	beq.w	8009a4c <_vfiprintf_r+0x1ec>
 800990e:	2300      	movs	r3, #0
 8009910:	f04f 32ff 	mov.w	r2, #4294967295
 8009914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009918:	f10a 0a01 	add.w	sl, sl, #1
 800991c:	9304      	str	r3, [sp, #16]
 800991e:	9307      	str	r3, [sp, #28]
 8009920:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009924:	931a      	str	r3, [sp, #104]	@ 0x68
 8009926:	4654      	mov	r4, sl
 8009928:	2205      	movs	r2, #5
 800992a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800992e:	4853      	ldr	r0, [pc, #332]	@ (8009a7c <_vfiprintf_r+0x21c>)
 8009930:	f7fe f9b3 	bl	8007c9a <memchr>
 8009934:	9a04      	ldr	r2, [sp, #16]
 8009936:	b9d8      	cbnz	r0, 8009970 <_vfiprintf_r+0x110>
 8009938:	06d1      	lsls	r1, r2, #27
 800993a:	bf44      	itt	mi
 800993c:	2320      	movmi	r3, #32
 800993e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009942:	0713      	lsls	r3, r2, #28
 8009944:	bf44      	itt	mi
 8009946:	232b      	movmi	r3, #43	@ 0x2b
 8009948:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800994c:	f89a 3000 	ldrb.w	r3, [sl]
 8009950:	2b2a      	cmp	r3, #42	@ 0x2a
 8009952:	d015      	beq.n	8009980 <_vfiprintf_r+0x120>
 8009954:	4654      	mov	r4, sl
 8009956:	2000      	movs	r0, #0
 8009958:	f04f 0c0a 	mov.w	ip, #10
 800995c:	9a07      	ldr	r2, [sp, #28]
 800995e:	4621      	mov	r1, r4
 8009960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009964:	3b30      	subs	r3, #48	@ 0x30
 8009966:	2b09      	cmp	r3, #9
 8009968:	d94b      	bls.n	8009a02 <_vfiprintf_r+0x1a2>
 800996a:	b1b0      	cbz	r0, 800999a <_vfiprintf_r+0x13a>
 800996c:	9207      	str	r2, [sp, #28]
 800996e:	e014      	b.n	800999a <_vfiprintf_r+0x13a>
 8009970:	eba0 0308 	sub.w	r3, r0, r8
 8009974:	fa09 f303 	lsl.w	r3, r9, r3
 8009978:	4313      	orrs	r3, r2
 800997a:	46a2      	mov	sl, r4
 800997c:	9304      	str	r3, [sp, #16]
 800997e:	e7d2      	b.n	8009926 <_vfiprintf_r+0xc6>
 8009980:	9b03      	ldr	r3, [sp, #12]
 8009982:	1d19      	adds	r1, r3, #4
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	9103      	str	r1, [sp, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	bfbb      	ittet	lt
 800998c:	425b      	neglt	r3, r3
 800998e:	f042 0202 	orrlt.w	r2, r2, #2
 8009992:	9307      	strge	r3, [sp, #28]
 8009994:	9307      	strlt	r3, [sp, #28]
 8009996:	bfb8      	it	lt
 8009998:	9204      	strlt	r2, [sp, #16]
 800999a:	7823      	ldrb	r3, [r4, #0]
 800999c:	2b2e      	cmp	r3, #46	@ 0x2e
 800999e:	d10a      	bne.n	80099b6 <_vfiprintf_r+0x156>
 80099a0:	7863      	ldrb	r3, [r4, #1]
 80099a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80099a4:	d132      	bne.n	8009a0c <_vfiprintf_r+0x1ac>
 80099a6:	9b03      	ldr	r3, [sp, #12]
 80099a8:	3402      	adds	r4, #2
 80099aa:	1d1a      	adds	r2, r3, #4
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	9203      	str	r2, [sp, #12]
 80099b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099b4:	9305      	str	r3, [sp, #20]
 80099b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009a80 <_vfiprintf_r+0x220>
 80099ba:	2203      	movs	r2, #3
 80099bc:	4650      	mov	r0, sl
 80099be:	7821      	ldrb	r1, [r4, #0]
 80099c0:	f7fe f96b 	bl	8007c9a <memchr>
 80099c4:	b138      	cbz	r0, 80099d6 <_vfiprintf_r+0x176>
 80099c6:	2240      	movs	r2, #64	@ 0x40
 80099c8:	9b04      	ldr	r3, [sp, #16]
 80099ca:	eba0 000a 	sub.w	r0, r0, sl
 80099ce:	4082      	lsls	r2, r0
 80099d0:	4313      	orrs	r3, r2
 80099d2:	3401      	adds	r4, #1
 80099d4:	9304      	str	r3, [sp, #16]
 80099d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099da:	2206      	movs	r2, #6
 80099dc:	4829      	ldr	r0, [pc, #164]	@ (8009a84 <_vfiprintf_r+0x224>)
 80099de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80099e2:	f7fe f95a 	bl	8007c9a <memchr>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	d03f      	beq.n	8009a6a <_vfiprintf_r+0x20a>
 80099ea:	4b27      	ldr	r3, [pc, #156]	@ (8009a88 <_vfiprintf_r+0x228>)
 80099ec:	bb1b      	cbnz	r3, 8009a36 <_vfiprintf_r+0x1d6>
 80099ee:	9b03      	ldr	r3, [sp, #12]
 80099f0:	3307      	adds	r3, #7
 80099f2:	f023 0307 	bic.w	r3, r3, #7
 80099f6:	3308      	adds	r3, #8
 80099f8:	9303      	str	r3, [sp, #12]
 80099fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099fc:	443b      	add	r3, r7
 80099fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a00:	e76a      	b.n	80098d8 <_vfiprintf_r+0x78>
 8009a02:	460c      	mov	r4, r1
 8009a04:	2001      	movs	r0, #1
 8009a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a0a:	e7a8      	b.n	800995e <_vfiprintf_r+0xfe>
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f04f 0c0a 	mov.w	ip, #10
 8009a12:	4619      	mov	r1, r3
 8009a14:	3401      	adds	r4, #1
 8009a16:	9305      	str	r3, [sp, #20]
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a1e:	3a30      	subs	r2, #48	@ 0x30
 8009a20:	2a09      	cmp	r2, #9
 8009a22:	d903      	bls.n	8009a2c <_vfiprintf_r+0x1cc>
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d0c6      	beq.n	80099b6 <_vfiprintf_r+0x156>
 8009a28:	9105      	str	r1, [sp, #20]
 8009a2a:	e7c4      	b.n	80099b6 <_vfiprintf_r+0x156>
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	2301      	movs	r3, #1
 8009a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a34:	e7f0      	b.n	8009a18 <_vfiprintf_r+0x1b8>
 8009a36:	ab03      	add	r3, sp, #12
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	462a      	mov	r2, r5
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	4b13      	ldr	r3, [pc, #76]	@ (8009a8c <_vfiprintf_r+0x22c>)
 8009a40:	a904      	add	r1, sp, #16
 8009a42:	f7fd fbad 	bl	80071a0 <_printf_float>
 8009a46:	4607      	mov	r7, r0
 8009a48:	1c78      	adds	r0, r7, #1
 8009a4a:	d1d6      	bne.n	80099fa <_vfiprintf_r+0x19a>
 8009a4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a4e:	07d9      	lsls	r1, r3, #31
 8009a50:	d405      	bmi.n	8009a5e <_vfiprintf_r+0x1fe>
 8009a52:	89ab      	ldrh	r3, [r5, #12]
 8009a54:	059a      	lsls	r2, r3, #22
 8009a56:	d402      	bmi.n	8009a5e <_vfiprintf_r+0x1fe>
 8009a58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a5a:	f7fe f91d 	bl	8007c98 <__retarget_lock_release_recursive>
 8009a5e:	89ab      	ldrh	r3, [r5, #12]
 8009a60:	065b      	lsls	r3, r3, #25
 8009a62:	f53f af1f 	bmi.w	80098a4 <_vfiprintf_r+0x44>
 8009a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a68:	e71e      	b.n	80098a8 <_vfiprintf_r+0x48>
 8009a6a:	ab03      	add	r3, sp, #12
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	462a      	mov	r2, r5
 8009a70:	4630      	mov	r0, r6
 8009a72:	4b06      	ldr	r3, [pc, #24]	@ (8009a8c <_vfiprintf_r+0x22c>)
 8009a74:	a904      	add	r1, sp, #16
 8009a76:	f7fd fe31 	bl	80076dc <_printf_i>
 8009a7a:	e7e4      	b.n	8009a46 <_vfiprintf_r+0x1e6>
 8009a7c:	0800a95a 	.word	0x0800a95a
 8009a80:	0800a960 	.word	0x0800a960
 8009a84:	0800a964 	.word	0x0800a964
 8009a88:	080071a1 	.word	0x080071a1
 8009a8c:	0800983d 	.word	0x0800983d

08009a90 <__swbuf_r>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	460e      	mov	r6, r1
 8009a94:	4614      	mov	r4, r2
 8009a96:	4605      	mov	r5, r0
 8009a98:	b118      	cbz	r0, 8009aa2 <__swbuf_r+0x12>
 8009a9a:	6a03      	ldr	r3, [r0, #32]
 8009a9c:	b90b      	cbnz	r3, 8009aa2 <__swbuf_r+0x12>
 8009a9e:	f7fd ffc7 	bl	8007a30 <__sinit>
 8009aa2:	69a3      	ldr	r3, [r4, #24]
 8009aa4:	60a3      	str	r3, [r4, #8]
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	071a      	lsls	r2, r3, #28
 8009aaa:	d501      	bpl.n	8009ab0 <__swbuf_r+0x20>
 8009aac:	6923      	ldr	r3, [r4, #16]
 8009aae:	b943      	cbnz	r3, 8009ac2 <__swbuf_r+0x32>
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	f000 f82a 	bl	8009b0c <__swsetup_r>
 8009ab8:	b118      	cbz	r0, 8009ac2 <__swbuf_r+0x32>
 8009aba:	f04f 37ff 	mov.w	r7, #4294967295
 8009abe:	4638      	mov	r0, r7
 8009ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	6922      	ldr	r2, [r4, #16]
 8009ac6:	b2f6      	uxtb	r6, r6
 8009ac8:	1a98      	subs	r0, r3, r2
 8009aca:	6963      	ldr	r3, [r4, #20]
 8009acc:	4637      	mov	r7, r6
 8009ace:	4283      	cmp	r3, r0
 8009ad0:	dc05      	bgt.n	8009ade <__swbuf_r+0x4e>
 8009ad2:	4621      	mov	r1, r4
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	f7ff fd9b 	bl	8009610 <_fflush_r>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	d1ed      	bne.n	8009aba <__swbuf_r+0x2a>
 8009ade:	68a3      	ldr	r3, [r4, #8]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	60a3      	str	r3, [r4, #8]
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	6022      	str	r2, [r4, #0]
 8009aea:	701e      	strb	r6, [r3, #0]
 8009aec:	6962      	ldr	r2, [r4, #20]
 8009aee:	1c43      	adds	r3, r0, #1
 8009af0:	429a      	cmp	r2, r3
 8009af2:	d004      	beq.n	8009afe <__swbuf_r+0x6e>
 8009af4:	89a3      	ldrh	r3, [r4, #12]
 8009af6:	07db      	lsls	r3, r3, #31
 8009af8:	d5e1      	bpl.n	8009abe <__swbuf_r+0x2e>
 8009afa:	2e0a      	cmp	r6, #10
 8009afc:	d1df      	bne.n	8009abe <__swbuf_r+0x2e>
 8009afe:	4621      	mov	r1, r4
 8009b00:	4628      	mov	r0, r5
 8009b02:	f7ff fd85 	bl	8009610 <_fflush_r>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d0d9      	beq.n	8009abe <__swbuf_r+0x2e>
 8009b0a:	e7d6      	b.n	8009aba <__swbuf_r+0x2a>

08009b0c <__swsetup_r>:
 8009b0c:	b538      	push	{r3, r4, r5, lr}
 8009b0e:	4b29      	ldr	r3, [pc, #164]	@ (8009bb4 <__swsetup_r+0xa8>)
 8009b10:	4605      	mov	r5, r0
 8009b12:	6818      	ldr	r0, [r3, #0]
 8009b14:	460c      	mov	r4, r1
 8009b16:	b118      	cbz	r0, 8009b20 <__swsetup_r+0x14>
 8009b18:	6a03      	ldr	r3, [r0, #32]
 8009b1a:	b90b      	cbnz	r3, 8009b20 <__swsetup_r+0x14>
 8009b1c:	f7fd ff88 	bl	8007a30 <__sinit>
 8009b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b24:	0719      	lsls	r1, r3, #28
 8009b26:	d422      	bmi.n	8009b6e <__swsetup_r+0x62>
 8009b28:	06da      	lsls	r2, r3, #27
 8009b2a:	d407      	bmi.n	8009b3c <__swsetup_r+0x30>
 8009b2c:	2209      	movs	r2, #9
 8009b2e:	602a      	str	r2, [r5, #0]
 8009b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b34:	f04f 30ff 	mov.w	r0, #4294967295
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	e033      	b.n	8009ba4 <__swsetup_r+0x98>
 8009b3c:	0758      	lsls	r0, r3, #29
 8009b3e:	d512      	bpl.n	8009b66 <__swsetup_r+0x5a>
 8009b40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b42:	b141      	cbz	r1, 8009b56 <__swsetup_r+0x4a>
 8009b44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b48:	4299      	cmp	r1, r3
 8009b4a:	d002      	beq.n	8009b52 <__swsetup_r+0x46>
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	f7fe ff0f 	bl	8008970 <_free_r>
 8009b52:	2300      	movs	r3, #0
 8009b54:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b56:	89a3      	ldrh	r3, [r4, #12]
 8009b58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b5c:	81a3      	strh	r3, [r4, #12]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	6063      	str	r3, [r4, #4]
 8009b62:	6923      	ldr	r3, [r4, #16]
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	89a3      	ldrh	r3, [r4, #12]
 8009b68:	f043 0308 	orr.w	r3, r3, #8
 8009b6c:	81a3      	strh	r3, [r4, #12]
 8009b6e:	6923      	ldr	r3, [r4, #16]
 8009b70:	b94b      	cbnz	r3, 8009b86 <__swsetup_r+0x7a>
 8009b72:	89a3      	ldrh	r3, [r4, #12]
 8009b74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b7c:	d003      	beq.n	8009b86 <__swsetup_r+0x7a>
 8009b7e:	4621      	mov	r1, r4
 8009b80:	4628      	mov	r0, r5
 8009b82:	f000 f882 	bl	8009c8a <__smakebuf_r>
 8009b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b8a:	f013 0201 	ands.w	r2, r3, #1
 8009b8e:	d00a      	beq.n	8009ba6 <__swsetup_r+0x9a>
 8009b90:	2200      	movs	r2, #0
 8009b92:	60a2      	str	r2, [r4, #8]
 8009b94:	6962      	ldr	r2, [r4, #20]
 8009b96:	4252      	negs	r2, r2
 8009b98:	61a2      	str	r2, [r4, #24]
 8009b9a:	6922      	ldr	r2, [r4, #16]
 8009b9c:	b942      	cbnz	r2, 8009bb0 <__swsetup_r+0xa4>
 8009b9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ba2:	d1c5      	bne.n	8009b30 <__swsetup_r+0x24>
 8009ba4:	bd38      	pop	{r3, r4, r5, pc}
 8009ba6:	0799      	lsls	r1, r3, #30
 8009ba8:	bf58      	it	pl
 8009baa:	6962      	ldrpl	r2, [r4, #20]
 8009bac:	60a2      	str	r2, [r4, #8]
 8009bae:	e7f4      	b.n	8009b9a <__swsetup_r+0x8e>
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	e7f7      	b.n	8009ba4 <__swsetup_r+0x98>
 8009bb4:	2000003c 	.word	0x2000003c

08009bb8 <_raise_r>:
 8009bb8:	291f      	cmp	r1, #31
 8009bba:	b538      	push	{r3, r4, r5, lr}
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	460c      	mov	r4, r1
 8009bc0:	d904      	bls.n	8009bcc <_raise_r+0x14>
 8009bc2:	2316      	movs	r3, #22
 8009bc4:	6003      	str	r3, [r0, #0]
 8009bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bca:	bd38      	pop	{r3, r4, r5, pc}
 8009bcc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009bce:	b112      	cbz	r2, 8009bd6 <_raise_r+0x1e>
 8009bd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bd4:	b94b      	cbnz	r3, 8009bea <_raise_r+0x32>
 8009bd6:	4628      	mov	r0, r5
 8009bd8:	f000 f830 	bl	8009c3c <_getpid_r>
 8009bdc:	4622      	mov	r2, r4
 8009bde:	4601      	mov	r1, r0
 8009be0:	4628      	mov	r0, r5
 8009be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009be6:	f000 b817 	b.w	8009c18 <_kill_r>
 8009bea:	2b01      	cmp	r3, #1
 8009bec:	d00a      	beq.n	8009c04 <_raise_r+0x4c>
 8009bee:	1c59      	adds	r1, r3, #1
 8009bf0:	d103      	bne.n	8009bfa <_raise_r+0x42>
 8009bf2:	2316      	movs	r3, #22
 8009bf4:	6003      	str	r3, [r0, #0]
 8009bf6:	2001      	movs	r0, #1
 8009bf8:	e7e7      	b.n	8009bca <_raise_r+0x12>
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009c02:	4798      	blx	r3
 8009c04:	2000      	movs	r0, #0
 8009c06:	e7e0      	b.n	8009bca <_raise_r+0x12>

08009c08 <raise>:
 8009c08:	4b02      	ldr	r3, [pc, #8]	@ (8009c14 <raise+0xc>)
 8009c0a:	4601      	mov	r1, r0
 8009c0c:	6818      	ldr	r0, [r3, #0]
 8009c0e:	f7ff bfd3 	b.w	8009bb8 <_raise_r>
 8009c12:	bf00      	nop
 8009c14:	2000003c 	.word	0x2000003c

08009c18 <_kill_r>:
 8009c18:	b538      	push	{r3, r4, r5, lr}
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	4d06      	ldr	r5, [pc, #24]	@ (8009c38 <_kill_r+0x20>)
 8009c1e:	4604      	mov	r4, r0
 8009c20:	4608      	mov	r0, r1
 8009c22:	4611      	mov	r1, r2
 8009c24:	602b      	str	r3, [r5, #0]
 8009c26:	f7fa fb40 	bl	80042aa <_kill>
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	d102      	bne.n	8009c34 <_kill_r+0x1c>
 8009c2e:	682b      	ldr	r3, [r5, #0]
 8009c30:	b103      	cbz	r3, 8009c34 <_kill_r+0x1c>
 8009c32:	6023      	str	r3, [r4, #0]
 8009c34:	bd38      	pop	{r3, r4, r5, pc}
 8009c36:	bf00      	nop
 8009c38:	20000788 	.word	0x20000788

08009c3c <_getpid_r>:
 8009c3c:	f7fa bb2e 	b.w	800429c <_getpid>

08009c40 <__swhatbuf_r>:
 8009c40:	b570      	push	{r4, r5, r6, lr}
 8009c42:	460c      	mov	r4, r1
 8009c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c48:	4615      	mov	r5, r2
 8009c4a:	2900      	cmp	r1, #0
 8009c4c:	461e      	mov	r6, r3
 8009c4e:	b096      	sub	sp, #88	@ 0x58
 8009c50:	da0c      	bge.n	8009c6c <__swhatbuf_r+0x2c>
 8009c52:	89a3      	ldrh	r3, [r4, #12]
 8009c54:	2100      	movs	r1, #0
 8009c56:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c5a:	bf14      	ite	ne
 8009c5c:	2340      	movne	r3, #64	@ 0x40
 8009c5e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c62:	2000      	movs	r0, #0
 8009c64:	6031      	str	r1, [r6, #0]
 8009c66:	602b      	str	r3, [r5, #0]
 8009c68:	b016      	add	sp, #88	@ 0x58
 8009c6a:	bd70      	pop	{r4, r5, r6, pc}
 8009c6c:	466a      	mov	r2, sp
 8009c6e:	f000 f849 	bl	8009d04 <_fstat_r>
 8009c72:	2800      	cmp	r0, #0
 8009c74:	dbed      	blt.n	8009c52 <__swhatbuf_r+0x12>
 8009c76:	9901      	ldr	r1, [sp, #4]
 8009c78:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c7c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c80:	4259      	negs	r1, r3
 8009c82:	4159      	adcs	r1, r3
 8009c84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c88:	e7eb      	b.n	8009c62 <__swhatbuf_r+0x22>

08009c8a <__smakebuf_r>:
 8009c8a:	898b      	ldrh	r3, [r1, #12]
 8009c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c8e:	079d      	lsls	r5, r3, #30
 8009c90:	4606      	mov	r6, r0
 8009c92:	460c      	mov	r4, r1
 8009c94:	d507      	bpl.n	8009ca6 <__smakebuf_r+0x1c>
 8009c96:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c9a:	6023      	str	r3, [r4, #0]
 8009c9c:	6123      	str	r3, [r4, #16]
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	6163      	str	r3, [r4, #20]
 8009ca2:	b003      	add	sp, #12
 8009ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca6:	466a      	mov	r2, sp
 8009ca8:	ab01      	add	r3, sp, #4
 8009caa:	f7ff ffc9 	bl	8009c40 <__swhatbuf_r>
 8009cae:	9f00      	ldr	r7, [sp, #0]
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f7fe fecd 	bl	8008a54 <_malloc_r>
 8009cba:	b948      	cbnz	r0, 8009cd0 <__smakebuf_r+0x46>
 8009cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cc0:	059a      	lsls	r2, r3, #22
 8009cc2:	d4ee      	bmi.n	8009ca2 <__smakebuf_r+0x18>
 8009cc4:	f023 0303 	bic.w	r3, r3, #3
 8009cc8:	f043 0302 	orr.w	r3, r3, #2
 8009ccc:	81a3      	strh	r3, [r4, #12]
 8009cce:	e7e2      	b.n	8009c96 <__smakebuf_r+0xc>
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009cd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cda:	81a3      	strh	r3, [r4, #12]
 8009cdc:	9b01      	ldr	r3, [sp, #4]
 8009cde:	6020      	str	r0, [r4, #0]
 8009ce0:	b15b      	cbz	r3, 8009cfa <__smakebuf_r+0x70>
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ce8:	f000 f81e 	bl	8009d28 <_isatty_r>
 8009cec:	b128      	cbz	r0, 8009cfa <__smakebuf_r+0x70>
 8009cee:	89a3      	ldrh	r3, [r4, #12]
 8009cf0:	f023 0303 	bic.w	r3, r3, #3
 8009cf4:	f043 0301 	orr.w	r3, r3, #1
 8009cf8:	81a3      	strh	r3, [r4, #12]
 8009cfa:	89a3      	ldrh	r3, [r4, #12]
 8009cfc:	431d      	orrs	r5, r3
 8009cfe:	81a5      	strh	r5, [r4, #12]
 8009d00:	e7cf      	b.n	8009ca2 <__smakebuf_r+0x18>
	...

08009d04 <_fstat_r>:
 8009d04:	b538      	push	{r3, r4, r5, lr}
 8009d06:	2300      	movs	r3, #0
 8009d08:	4d06      	ldr	r5, [pc, #24]	@ (8009d24 <_fstat_r+0x20>)
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	4608      	mov	r0, r1
 8009d0e:	4611      	mov	r1, r2
 8009d10:	602b      	str	r3, [r5, #0]
 8009d12:	f7fa fb29 	bl	8004368 <_fstat>
 8009d16:	1c43      	adds	r3, r0, #1
 8009d18:	d102      	bne.n	8009d20 <_fstat_r+0x1c>
 8009d1a:	682b      	ldr	r3, [r5, #0]
 8009d1c:	b103      	cbz	r3, 8009d20 <_fstat_r+0x1c>
 8009d1e:	6023      	str	r3, [r4, #0]
 8009d20:	bd38      	pop	{r3, r4, r5, pc}
 8009d22:	bf00      	nop
 8009d24:	20000788 	.word	0x20000788

08009d28 <_isatty_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	4d05      	ldr	r5, [pc, #20]	@ (8009d44 <_isatty_r+0x1c>)
 8009d2e:	4604      	mov	r4, r0
 8009d30:	4608      	mov	r0, r1
 8009d32:	602b      	str	r3, [r5, #0]
 8009d34:	f7fa fb27 	bl	8004386 <_isatty>
 8009d38:	1c43      	adds	r3, r0, #1
 8009d3a:	d102      	bne.n	8009d42 <_isatty_r+0x1a>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	b103      	cbz	r3, 8009d42 <_isatty_r+0x1a>
 8009d40:	6023      	str	r3, [r4, #0]
 8009d42:	bd38      	pop	{r3, r4, r5, pc}
 8009d44:	20000788 	.word	0x20000788

08009d48 <_init>:
 8009d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4a:	bf00      	nop
 8009d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d4e:	bc08      	pop	{r3}
 8009d50:	469e      	mov	lr, r3
 8009d52:	4770      	bx	lr

08009d54 <_fini>:
 8009d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d56:	bf00      	nop
 8009d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d5a:	bc08      	pop	{r3}
 8009d5c:	469e      	mov	lr, r3
 8009d5e:	4770      	bx	lr
