
HVAC_CONTROL_WITH_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000413c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000364  08004248  08004248  00005248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045ac  080045ac  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080045ac  080045ac  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080045ac  080045ac  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045ac  080045ac  000055ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045b0  080045b0  000055b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080045b4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000005c  08004610  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08004610  000062c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000840c  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000204c  00000000  00000000  0000e491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  000104e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000699  00000000  00000000  00010db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001743c  00000000  00000000  00011451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e007  00000000  00000000  0002888d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082b4e  00000000  00000000  00036894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b93e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000272c  00000000  00000000  000b9428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  000bbb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004230 	.word	0x08004230

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004230 	.word	0x08004230

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <Blower_Relay_Pins_Init>:

#define PB12_LOW_SPEED_BLOWER    12
#define PB13_MEDIUM_SPEED_BLOWER 13
#define PB14_HIGH_SPEED_BLOWER   14

void Blower_Relay_Pins_Init(){
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80006f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <Blower_Relay_Pins_Init+0x40>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000734 <Blower_Relay_Pins_Init+0x40>)
 80006fe:	f043 0308 	orr.w	r3, r3, #8
 8000702:	6193      	str	r3, [r2, #24]
    GPIOB->CRH&=~((0xFF<<16)|(0XFF<<20)|(0XFF<<24));
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <Blower_Relay_Pins_Init+0x44>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	4a0b      	ldr	r2, [pc, #44]	@ (8000738 <Blower_Relay_Pins_Init+0x44>)
 800070a:	b29b      	uxth	r3, r3
 800070c:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=((0x3<<16)|(0X3<<20)|(0X3<<24));
 800070e:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <Blower_Relay_Pins_Init+0x44>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	4a09      	ldr	r2, [pc, #36]	@ (8000738 <Blower_Relay_Pins_Init+0x44>)
 8000714:	f043 734c 	orr.w	r3, r3, #53477376	@ 0x3300000
 8000718:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800071c:	6053      	str	r3, [r2, #4]
    GPIOB->ODR|=((1<<PB12_LOW_SPEED_BLOWER)|(1<<PB13_MEDIUM_SPEED_BLOWER)|(1<<PB14_HIGH_SPEED_BLOWER));
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <Blower_Relay_Pins_Init+0x44>)
 8000720:	68db      	ldr	r3, [r3, #12]
 8000722:	4a05      	ldr	r2, [pc, #20]	@ (8000738 <Blower_Relay_Pins_Init+0x44>)
 8000724:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000728:	60d3      	str	r3, [r2, #12]
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000
 8000738:	40010c00 	.word	0x40010c00

0800073c <MX_I2C1_Init>:
 */

#include"extern_file_declarations.h"
uint8_t I2C_RX_FLAG=0,data[1];
 void MX_I2C1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000740:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_I2C1_Init+0x5c>)
 8000742:	4a16      	ldr	r2, [pc, #88]	@ (800079c <MX_I2C1_Init+0x60>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000746:	4b14      	ldr	r3, [pc, #80]	@ (8000798 <MX_I2C1_Init+0x5c>)
 8000748:	4a15      	ldr	r2, [pc, #84]	@ (80007a0 <MX_I2C1_Init+0x64>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_I2C1_Init+0x5c>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 170;
 8000752:	4b11      	ldr	r3, [pc, #68]	@ (8000798 <MX_I2C1_Init+0x5c>)
 8000754:	22aa      	movs	r2, #170	@ 0xaa
 8000756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000758:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_I2C1_Init+0x5c>)
 800075a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800075e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <MX_I2C1_Init+0x5c>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_I2C1_Init+0x5c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_I2C1_Init+0x5c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_I2C1_Init+0x5c>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000778:	4807      	ldr	r0, [pc, #28]	@ (8000798 <MX_I2C1_Init+0x5c>)
 800077a:	f001 f9cb 	bl	8001b14 <HAL_I2C_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000784:	f000 fb14 	bl	8000db0 <Error_Handler>
  }
  HAL_I2C_Slave_Receive_IT(&hi2c1, data, 1);
 8000788:	2201      	movs	r2, #1
 800078a:	4906      	ldr	r1, [pc, #24]	@ (80007a4 <MX_I2C1_Init+0x68>)
 800078c:	4802      	ldr	r0, [pc, #8]	@ (8000798 <MX_I2C1_Init+0x5c>)
 800078e:	f001 fb19 	bl	8001dc4 <HAL_I2C_Slave_Receive_IT>
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000080 	.word	0x20000080
 800079c:	40005400 	.word	0x40005400
 80007a0:	00061a80 	.word	0x00061a80
 80007a4:	2000007c 	.word	0x2000007c

080007a8 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	I2C_RX_FLAG=1;
 80007b0:	4b03      	ldr	r3, [pc, #12]	@ (80007c0 <HAL_I2C_SlaveRxCpltCallback+0x18>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	701a      	strb	r2, [r3, #0]
}
 80007b6:	bf00      	nop
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000078 	.word	0x20000078

080007c4 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000804 <HAL_I2C_ErrorCallback+0x40>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d112      	bne.n	80007fc <HAL_I2C_ErrorCallback+0x38>
        // Reset I2C if it’s stuck
        __HAL_RCC_I2C1_FORCE_RESET();
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <HAL_I2C_ErrorCallback+0x44>)
 80007d8:	691b      	ldr	r3, [r3, #16]
 80007da:	4a0b      	ldr	r2, [pc, #44]	@ (8000808 <HAL_I2C_ErrorCallback+0x44>)
 80007dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007e0:	6113      	str	r3, [r2, #16]
        __HAL_RCC_I2C1_RELEASE_RESET();
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <HAL_I2C_ErrorCallback+0x44>)
 80007e4:	691b      	ldr	r3, [r3, #16]
 80007e6:	4a08      	ldr	r2, [pc, #32]	@ (8000808 <HAL_I2C_ErrorCallback+0x44>)
 80007e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80007ec:	6113      	str	r3, [r2, #16]

        MX_I2C1_Init();  // Re-init peripheral
 80007ee:	f7ff ffa5 	bl	800073c <MX_I2C1_Init>
        HAL_I2C_Slave_Receive_IT(&hi2c1, data, 1);
 80007f2:	2201      	movs	r2, #1
 80007f4:	4905      	ldr	r1, [pc, #20]	@ (800080c <HAL_I2C_ErrorCallback+0x48>)
 80007f6:	4806      	ldr	r0, [pc, #24]	@ (8000810 <HAL_I2C_ErrorCallback+0x4c>)
 80007f8:	f001 fae4 	bl	8001dc4 <HAL_I2C_Slave_Receive_IT>
    }
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40005400 	.word	0x40005400
 8000808:	40021000 	.word	0x40021000
 800080c:	2000007c 	.word	0x2000007c
 8000810:	20000080 	.word	0x20000080

08000814 <Motor_control_pins_init>:
#define PB0_REVERSE 0
#define PB1_NEUTRAL 1
#define PB3_DRIVE 3
#define PB4_SPORT 5

void Motor_control_pins_init(){
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000818:	4b0d      	ldr	r3, [pc, #52]	@ (8000850 <Motor_control_pins_init+0x3c>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a0c      	ldr	r2, [pc, #48]	@ (8000850 <Motor_control_pins_init+0x3c>)
 800081e:	f043 0308 	orr.w	r3, r3, #8
 8000822:	6193      	str	r3, [r2, #24]
    GPIOB->CRL&=~((0xFF<<0)|(0XFF<<4)|(0XFF<<12)|(0xff<<20));
 8000824:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <Motor_control_pins_init+0x40>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a0a      	ldr	r2, [pc, #40]	@ (8000854 <Motor_control_pins_init+0x40>)
 800082a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800082e:	6013      	str	r3, [r2, #0]
    GPIOB->CRL|=((0x3<<0)|(0X3<<4)|(0X3<<12)|(0x3<<20));
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <Motor_control_pins_init+0x40>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4907      	ldr	r1, [pc, #28]	@ (8000854 <Motor_control_pins_init+0x40>)
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <Motor_control_pins_init+0x44>)
 8000838:	4313      	orrs	r3, r2
 800083a:	600b      	str	r3, [r1, #0]
    GPIOB->ODR&=~((1<<PB0_REVERSE)|(1<<PB1_NEUTRAL)|(1<<PB3_DRIVE)|(1<<PB4_SPORT));
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <Motor_control_pins_init+0x40>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	4a04      	ldr	r2, [pc, #16]	@ (8000854 <Motor_control_pins_init+0x40>)
 8000842:	f023 032b 	bic.w	r3, r3, #43	@ 0x2b
 8000846:	60d3      	str	r3, [r2, #12]
//    GPIOB->ODR|=((1<<PB0_REVERSE)|(1<<PB1_NEUTRAL)|(1<<PB3_DRIVE)|(1<<PB4_SPORT));
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	40021000 	.word	0x40021000
 8000854:	40010c00 	.word	0x40010c00
 8000858:	00303033 	.word	0x00303033

0800085c <set_baudrate>:
    uint32_t tseg2;
    uint32_t sjw;
    float sample_point;  // in percentage
} CAN_BitTiming;

STATUS set_baudrate(uint32_t Baud_Rate){
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	f6ad 0d04 	subw	sp, sp, #2052	@ 0x804
 8000862:	af00      	add	r7, sp, #0
 8000864:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000868:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 800086c:	6018      	str	r0, [r3, #0]
    CAN_BitTiming table[100]; // store results
    int count = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
    uint32_t clk = get_APB1_freq();      // 36 MHz
 8000874:	f000 fc8e 	bl	8001194 <get_APB1_freq>
 8000878:	f8c7 07e8 	str.w	r0, [r7, #2024]	@ 0x7e8
    uint32_t baud = Baud_Rate;      // 500 kbps
 800087c:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000880:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f8c7 37e4 	str.w	r3, [r7, #2020]	@ 0x7e4
    if (clk == 0 || Baud_Rate == 0) {
 800088a:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	@ 0x7e8
 800088e:	2b00      	cmp	r3, #0
 8000890:	d006      	beq.n	80008a0 <set_baudrate+0x44>
 8000892:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000896:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d101      	bne.n	80008a4 <set_baudrate+0x48>
        return RY_NOT_OK;
 80008a0:	2300      	movs	r3, #0
 80008a2:	e0f7      	b.n	8000a94 <set_baudrate+0x238>
    }
    uint32_t target = clk / baud; // should be 16
 80008a4:	f8d7 27e8 	ldr.w	r2, [r7, #2024]	@ 0x7e8
 80008a8:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	@ 0x7e4
 80008ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b0:	f8c7 37e0 	str.w	r3, [r7, #2016]	@ 0x7e0
    for (uint32_t prescaler = 1; prescaler <= 1024; prescaler++) {
 80008b4:	2301      	movs	r3, #1
 80008b6:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 80008ba:	e0c0      	b.n	8000a3e <set_baudrate+0x1e2>
        for (uint32_t tseg1 = 1; tseg1 <= 16; tseg1++) {
 80008bc:	2301      	movs	r3, #1
 80008be:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 80008c2:	e0b2      	b.n	8000a2a <set_baudrate+0x1ce>
            for (uint32_t tseg2 = 1; tseg2 <= 8; tseg2++) {
 80008c4:	2301      	movs	r3, #1
 80008c6:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 80008ca:	e0a4      	b.n	8000a16 <set_baudrate+0x1ba>
            	uint32_t tq = 1 + tseg1 + tseg2;
 80008cc:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 80008d0:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 80008d4:	4413      	add	r3, r2
 80008d6:	3301      	adds	r3, #1
 80008d8:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
                if (prescaler * tq == target) {
 80008dc:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 80008e0:	f8d7 27dc 	ldr.w	r2, [r7, #2012]	@ 0x7dc
 80008e4:	fb02 f303 	mul.w	r3, r2, r3
 80008e8:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	@ 0x7e0
 80008ec:	429a      	cmp	r2, r3
 80008ee:	f040 808d 	bne.w	8000a0c <set_baudrate+0x1b0>
                    float sp = ((1.0f + tseg1) / tq) * 100.0f;
 80008f2:	f8d7 07f4 	ldr.w	r0, [r7, #2036]	@ 0x7f4
 80008f6:	f7ff fcdf 	bl	80002b8 <__aeabi_ui2f>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fc29 	bl	8000158 <__addsf3>
 8000906:	4603      	mov	r3, r0
 8000908:	461c      	mov	r4, r3
 800090a:	f8d7 07dc 	ldr.w	r0, [r7, #2012]	@ 0x7dc
 800090e:	f7ff fcd3 	bl	80002b8 <__aeabi_ui2f>
 8000912:	4603      	mov	r3, r0
 8000914:	4619      	mov	r1, r3
 8000916:	4620      	mov	r0, r4
 8000918:	f7ff fdda 	bl	80004d0 <__aeabi_fdiv>
 800091c:	4603      	mov	r3, r0
 800091e:	4960      	ldr	r1, [pc, #384]	@ (8000aa0 <set_baudrate+0x244>)
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fd21 	bl	8000368 <__aeabi_fmul>
 8000926:	4603      	mov	r3, r0
 8000928:	f8c7 37d8 	str.w	r3, [r7, #2008]	@ 0x7d8
                    if (sp >= 70.0f && sp <= 80.0f) {
 800092c:	495d      	ldr	r1, [pc, #372]	@ (8000aa4 <set_baudrate+0x248>)
 800092e:	f8d7 07d8 	ldr.w	r0, [r7, #2008]	@ 0x7d8
 8000932:	f7ff fecb 	bl	80006cc <__aeabi_fcmpge>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d067      	beq.n	8000a0c <set_baudrate+0x1b0>
 800093c:	495a      	ldr	r1, [pc, #360]	@ (8000aa8 <set_baudrate+0x24c>)
 800093e:	f8d7 07d8 	ldr.w	r0, [r7, #2008]	@ 0x7d8
 8000942:	f7ff feb9 	bl	80006b8 <__aeabi_fcmple>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d05f      	beq.n	8000a0c <set_baudrate+0x1b0>
                        for (int sjw = 1; sjw <= tseg2; sjw++) {
 800094c:	2301      	movs	r3, #1
 800094e:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 8000952:	e055      	b.n	8000a00 <set_baudrate+0x1a4>
                            table[count].prescaler = prescaler;
 8000954:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 8000958:	b298      	uxth	r0, r3
 800095a:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 800095e:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 8000962:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8000966:	4613      	mov	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	440b      	add	r3, r1
 8000970:	4602      	mov	r2, r0
 8000972:	801a      	strh	r2, [r3, #0]
                            table[count].tseg1 = tseg1;
 8000974:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000978:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 800097c:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8000980:	4613      	mov	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	4413      	add	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	440b      	add	r3, r1
 800098a:	3304      	adds	r3, #4
 800098c:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 8000990:	601a      	str	r2, [r3, #0]
                            table[count].tseg2 = tseg2;
 8000992:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000996:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 800099a:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 800099e:	4613      	mov	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	440b      	add	r3, r1
 80009a8:	3308      	adds	r3, #8
 80009aa:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	@ 0x7f0
 80009ae:	601a      	str	r2, [r3, #0]
                            table[count].sjw = sjw;
 80009b0:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	@ 0x7ec
 80009b4:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80009b8:	f5a3 60ff 	sub.w	r0, r3, #2040	@ 0x7f8
 80009bc:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 80009c0:	4613      	mov	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	4413      	add	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4403      	add	r3, r0
 80009ca:	330c      	adds	r3, #12
 80009cc:	6019      	str	r1, [r3, #0]
                            table[count].sample_point = sp;
 80009ce:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 80009d2:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 80009d6:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 80009da:	4613      	mov	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	4413      	add	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	440b      	add	r3, r1
 80009e4:	3310      	adds	r3, #16
 80009e6:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	@ 0x7d8
 80009ea:	601a      	str	r2, [r3, #0]
                            count++;
 80009ec:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	@ 0x7fc
 80009f0:	3301      	adds	r3, #1
 80009f2:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
                        for (int sjw = 1; sjw <= tseg2; sjw++) {
 80009f6:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 80009fa:	3301      	adds	r3, #1
 80009fc:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 8000a00:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8000a04:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	@ 0x7f0
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d2a3      	bcs.n	8000954 <set_baudrate+0xf8>
            for (uint32_t tseg2 = 1; tseg2 <= 8; tseg2++) {
 8000a0c:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 8000a10:	3301      	adds	r3, #1
 8000a12:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 8000a16:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 8000a1a:	2b08      	cmp	r3, #8
 8000a1c:	f67f af56 	bls.w	80008cc <set_baudrate+0x70>
        for (uint32_t tseg1 = 1; tseg1 <= 16; tseg1++) {
 8000a20:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 8000a24:	3301      	adds	r3, #1
 8000a26:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 8000a2a:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 8000a2e:	2b10      	cmp	r3, #16
 8000a30:	f67f af48 	bls.w	80008c4 <set_baudrate+0x68>
    for (uint32_t prescaler = 1; prescaler <= 1024; prescaler++) {
 8000a34:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 8000a38:	3301      	adds	r3, #1
 8000a3a:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 8000a3e:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 8000a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a46:	f67f af39 	bls.w	80008bc <set_baudrate+0x60>
                    }
                }
            }
        }
    }
    CAN1->BTR|=((table[0].prescaler-1)<<0)|((table[0].sjw-1)<<24)|((table[0].tseg1-1)<<16)|((table[0].tseg2-1)<<20);
 8000a4a:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <set_baudrate+0x250>)
 8000a4c:	69da      	ldr	r2, [r3, #28]
 8000a4e:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000a52:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000a60:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	061b      	lsls	r3, r3, #24
 8000a6a:	4319      	orrs	r1, r3
 8000a6c:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000a70:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	041b      	lsls	r3, r3, #16
 8000a7a:	4319      	orrs	r1, r3
 8000a7c:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8000a80:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8000a84:	689b      	ldr	r3, [r3, #8]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	051b      	lsls	r3, r3, #20
 8000a8a:	430b      	orrs	r3, r1
 8000a8c:	4907      	ldr	r1, [pc, #28]	@ (8000aac <set_baudrate+0x250>)
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	61cb      	str	r3, [r1, #28]
    return RY_OK;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	f607 0704 	addw	r7, r7, #2052	@ 0x804
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd90      	pop	{r4, r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	42c80000 	.word	0x42c80000
 8000aa4:	428c0000 	.word	0x428c0000
 8000aa8:	42a00000 	.word	0x42a00000
 8000aac:	40006400 	.word	0x40006400

08000ab0 <can_init>:
STATUS can_init(uint32_t Baud_Rate){
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN | RCC_APB2ENR_AFIOEN;
 8000ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b68 <can_init+0xb8>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a2a      	ldr	r2, [pc, #168]	@ (8000b68 <can_init+0xb8>)
 8000abe:	f043 0309 	orr.w	r3, r3, #9
 8000ac2:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 8000ac4:	4b28      	ldr	r3, [pc, #160]	@ (8000b68 <can_init+0xb8>)
 8000ac6:	69db      	ldr	r3, [r3, #28]
 8000ac8:	4a27      	ldr	r2, [pc, #156]	@ (8000b68 <can_init+0xb8>)
 8000aca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ace:	61d3      	str	r3, [r2, #28]
    AFIO->MAPR |= AFIO_MAPR_CAN_REMAP_REMAP2;
 8000ad0:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <can_init+0xbc>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	4a25      	ldr	r2, [pc, #148]	@ (8000b6c <can_init+0xbc>)
 8000ad6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ada:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~(0xF << 0);
 8000adc:	4b24      	ldr	r3, [pc, #144]	@ (8000b70 <can_init+0xc0>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	4a23      	ldr	r2, [pc, #140]	@ (8000b70 <can_init+0xc0>)
 8000ae2:	f023 030f 	bic.w	r3, r3, #15
 8000ae6:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |=  (0x4 << 0);
 8000ae8:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <can_init+0xc0>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	4a20      	ldr	r2, [pc, #128]	@ (8000b70 <can_init+0xc0>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~(0xF << 4);
 8000af4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <can_init+0xc0>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b70 <can_init+0xc0>)
 8000afa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000afe:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |=  (0xB << 4);
 8000b00:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <can_init+0xc0>)
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	4a1a      	ldr	r2, [pc, #104]	@ (8000b70 <can_init+0xc0>)
 8000b06:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000b0a:	6053      	str	r3, [r2, #4]
	CAN1->MCR &= ~CAN_MCR_AWUM_Msk;
 8000b0c:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <can_init+0xc4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a18      	ldr	r2, [pc, #96]	@ (8000b74 <can_init+0xc4>)
 8000b12:	f023 0320 	bic.w	r3, r3, #32
 8000b16:	6013      	str	r3, [r2, #0]
	CAN1->MCR &= ~CAN_MCR_SLEEP_Msk;
 8000b18:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <can_init+0xc4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a15      	ldr	r2, [pc, #84]	@ (8000b74 <can_init+0xc4>)
 8000b1e:	f023 0302 	bic.w	r3, r3, #2
 8000b22:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_MCR_INRQ_Msk;
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <can_init+0xc4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <can_init+0xc4>)
 8000b2a:	f043 0301 	orr.w	r3, r3, #1
 8000b2e:	6013      	str	r3, [r2, #0]
	while (!(CAN1->MSR & CAN_MSR_INAK_Msk));
 8000b30:	bf00      	nop
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <can_init+0xc4>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0f9      	beq.n	8000b32 <can_init+0x82>
	if(set_baudrate(Baud_Rate)==RY_NOT_OK)
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff fe8c 	bl	800085c <set_baudrate>
	{
		RY_NOT_OK;
	}
	CAN1->MCR &= ~(1<<0);  // CLEAR INQR BIT TO LEAVE INTILAIZE MODE=
 8000b44:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <can_init+0xc4>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <can_init+0xc4>)
 8000b4a:	f023 0301 	bic.w	r3, r3, #1
 8000b4e:	6013      	str	r3, [r2, #0]
	while (CAN1->MSR & CAN_MSR_INAK_Msk);  // Wait for Normal Mode
 8000b50:	bf00      	nop
 8000b52:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <can_init+0xc4>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d1f9      	bne.n	8000b52 <can_init+0xa2>
	return RY_OK;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010000 	.word	0x40010000
 8000b70:	40010c00 	.word	0x40010c00
 8000b74:	40006400 	.word	0x40006400

08000b78 <Condensor_Relay_Pins_Init>:

#include"extern_file_declarations.h"

#define PB15_CONDENSOR   15

void Condensor_Relay_Pins_Init(){
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb4 <Condensor_Relay_Pins_Init+0x3c>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb4 <Condensor_Relay_Pins_Init+0x3c>)
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	6193      	str	r3, [r2, #24]
    GPIOB->CRH&=~((0xFF<<28));
 8000b88:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <Condensor_Relay_Pins_Init+0x40>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <Condensor_Relay_Pins_Init+0x40>)
 8000b8e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000b92:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=((0x3<<28));
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <Condensor_Relay_Pins_Init+0x40>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	4a07      	ldr	r2, [pc, #28]	@ (8000bb8 <Condensor_Relay_Pins_Init+0x40>)
 8000b9a:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8000b9e:	6053      	str	r3, [r2, #4]
    GPIOB->ODR|=((1<<PB15_CONDENSOR));
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <Condensor_Relay_Pins_Init+0x40>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <Condensor_Relay_Pins_Init+0x40>)
 8000ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010c00 	.word	0x40010c00

08000bbc <clock_print_status>:
#include"I2C.h"
#include"Motor_Control_uint_pins.h"
CAN_FRAME frame;
I2C_HandleTypeDef hi2c1;
extern uint8_t I2C_RX_FLAG,data[1];
void clock_print_status(){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
    uart_printf("\r\n=====================================\r\n");
 8000bc0:	4817      	ldr	r0, [pc, #92]	@ (8000c20 <clock_print_status+0x64>)
 8000bc2:	f000 fbf8 	bl	80013b6 <uart_printf>
    uart_printf("EVA DRIVE_MODE_SELECTOR & HVAC \r\n");
 8000bc6:	4817      	ldr	r0, [pc, #92]	@ (8000c24 <clock_print_status+0x68>)
 8000bc8:	f000 fbf5 	bl	80013b6 <uart_printf>
    uart_printf("=====================================\r\n");
 8000bcc:	4816      	ldr	r0, [pc, #88]	@ (8000c28 <clock_print_status+0x6c>)
 8000bce:	f000 fbf2 	bl	80013b6 <uart_printf>
    uart_printf("System Clock: %lu MHz\r\n", get_SYSCLK_freq() / 1000000);
 8000bd2:	f000 fa61 	bl	8001098 <get_SYSCLK_freq>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4a14      	ldr	r2, [pc, #80]	@ (8000c2c <clock_print_status+0x70>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	0c9b      	lsrs	r3, r3, #18
 8000be0:	4619      	mov	r1, r3
 8000be2:	4813      	ldr	r0, [pc, #76]	@ (8000c30 <clock_print_status+0x74>)
 8000be4:	f000 fbe7 	bl	80013b6 <uart_printf>
    uart_printf("APB1 Clock: %lu MHz\r\n", get_APB1_freq() / 1000000);
 8000be8:	f000 fad4 	bl	8001194 <get_APB1_freq>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4a0f      	ldr	r2, [pc, #60]	@ (8000c2c <clock_print_status+0x70>)
 8000bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf4:	0c9b      	lsrs	r3, r3, #18
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480e      	ldr	r0, [pc, #56]	@ (8000c34 <clock_print_status+0x78>)
 8000bfa:	f000 fbdc 	bl	80013b6 <uart_printf>
    uart_printf("APB2 Clock: %lu MHz\r\n", get_APB2_freq() / 1000000);
 8000bfe:	f000 faef 	bl	80011e0 <get_APB2_freq>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a09      	ldr	r2, [pc, #36]	@ (8000c2c <clock_print_status+0x70>)
 8000c06:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0a:	0c9b      	lsrs	r3, r3, #18
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480a      	ldr	r0, [pc, #40]	@ (8000c38 <clock_print_status+0x7c>)
 8000c10:	f000 fbd1 	bl	80013b6 <uart_printf>
    uart_printf("=====================================\r\n");
 8000c14:	4804      	ldr	r0, [pc, #16]	@ (8000c28 <clock_print_status+0x6c>)
 8000c16:	f000 fbce 	bl	80013b6 <uart_printf>
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	08004248 	.word	0x08004248
 8000c24:	08004274 	.word	0x08004274
 8000c28:	08004298 	.word	0x08004298
 8000c2c:	431bde83 	.word	0x431bde83
 8000c30:	080042c0 	.word	0x080042c0
 8000c34:	080042d8 	.word	0x080042d8
 8000c38:	080042f0 	.word	0x080042f0

08000c3c <main>:
int main(){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af02      	add	r7, sp, #8
	HAL_Init();
 8000c42:	f000 fbf7 	bl	8001434 <HAL_Init>
	system_clock_init_to_72MHZ();
 8000c46:	f000 f9d1 	bl	8000fec <system_clock_init_to_72MHZ>
	if(uart_init(115200)==RY_NOT_OK){
 8000c4a:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8000c4e:	f000 fb29 	bl	80012a4 <uart_init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d101      	bne.n	8000c5c <main+0x20>
	  Error_Handler();
 8000c58:	f000 f8aa 	bl	8000db0 <Error_Handler>
	}
	clock_print_status();
 8000c5c:	f7ff ffae 	bl	8000bbc <clock_print_status>
    uart_printf("UART1 initialization is ok ,baud_baudrate in kbps %d:\r\n", 115200);
 8000c60:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000c64:	4842      	ldr	r0, [pc, #264]	@ (8000d70 <main+0x134>)
 8000c66:	f000 fba6 	bl	80013b6 <uart_printf>
    uart_printf("=========================================================\r\n");
 8000c6a:	4842      	ldr	r0, [pc, #264]	@ (8000d74 <main+0x138>)
 8000c6c:	f000 fba3 	bl	80013b6 <uart_printf>
    systick_init(1000);
 8000c70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c74:	f000 f96a 	bl	8000f4c <systick_init>
    uart_printf("systick clock initialized for milli second ");
 8000c78:	483f      	ldr	r0, [pc, #252]	@ (8000d78 <main+0x13c>)
 8000c7a:	f000 fb9c 	bl	80013b6 <uart_printf>
    uart_printf("=========================================================\r\n");
 8000c7e:	483d      	ldr	r0, [pc, #244]	@ (8000d74 <main+0x138>)
 8000c80:	f000 fb99 	bl	80013b6 <uart_printf>
	if(can_init(500000)==RY_NOT_OK){
 8000c84:	483d      	ldr	r0, [pc, #244]	@ (8000d7c <main+0x140>)
 8000c86:	f7ff ff13 	bl	8000ab0 <can_init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d107      	bne.n	8000ca0 <main+0x64>
      uart_printf("CAN initialization is NOT oK\r\n");
 8000c90:	483b      	ldr	r0, [pc, #236]	@ (8000d80 <main+0x144>)
 8000c92:	f000 fb90 	bl	80013b6 <uart_printf>
	  uart_printf("======================================================\r\n");
 8000c96:	483b      	ldr	r0, [pc, #236]	@ (8000d84 <main+0x148>)
 8000c98:	f000 fb8d 	bl	80013b6 <uart_printf>
	  Error_Handler();
 8000c9c:	f000 f888 	bl	8000db0 <Error_Handler>
	}
    uart_printf("CAN initialization is ok ,baud_baudrate in %d kbps:\r\n", 500);
 8000ca0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000ca4:	4838      	ldr	r0, [pc, #224]	@ (8000d88 <main+0x14c>)
 8000ca6:	f000 fb86 	bl	80013b6 <uart_printf>
    uart_printf("=========================================================\r\n");
 8000caa:	4832      	ldr	r0, [pc, #200]	@ (8000d74 <main+0x138>)
 8000cac:	f000 fb83 	bl	80013b6 <uart_printf>
    Init_tasks();
 8000cb0:	f000 fac2 	bl	8001238 <Init_tasks>
    uart_printf("Task schedular is initialized\r\n");
 8000cb4:	4835      	ldr	r0, [pc, #212]	@ (8000d8c <main+0x150>)
 8000cb6:	f000 fb7e 	bl	80013b6 <uart_printf>
    uart_printf("=========================================================\r\n");
 8000cba:	482e      	ldr	r0, [pc, #184]	@ (8000d74 <main+0x138>)
 8000cbc:	f000 fb7b 	bl	80013b6 <uart_printf>
    Blower_Relay_Pins_Init();
 8000cc0:	f7ff fd18 	bl	80006f4 <Blower_Relay_Pins_Init>
    uart_printf("Blower pins are initialized PIN12=%d PIN13=%d PIN14=%d\r\n",(GPIOB->IDR>>12&1),(GPIOB->IDR>>13&1),(GPIOB->IDR>>14&1));
 8000cc4:	4b32      	ldr	r3, [pc, #200]	@ (8000d90 <main+0x154>)
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	0b1b      	lsrs	r3, r3, #12
 8000cca:	f003 0101 	and.w	r1, r3, #1
 8000cce:	4b30      	ldr	r3, [pc, #192]	@ (8000d90 <main+0x154>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	0b5b      	lsrs	r3, r3, #13
 8000cd4:	f003 0201 	and.w	r2, r3, #1
 8000cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d90 <main+0x154>)
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	0b9b      	lsrs	r3, r3, #14
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	482c      	ldr	r0, [pc, #176]	@ (8000d94 <main+0x158>)
 8000ce4:	f000 fb67 	bl	80013b6 <uart_printf>
    uart_printf("=========================================================\r\n");
 8000ce8:	4822      	ldr	r0, [pc, #136]	@ (8000d74 <main+0x138>)
 8000cea:	f000 fb64 	bl	80013b6 <uart_printf>
    Condensor_Relay_Pins_Init();
 8000cee:	f7ff ff43 	bl	8000b78 <Condensor_Relay_Pins_Init>
    uart_printf("Condensor pins are initialized PIN15=%d \r\n",(GPIOB->IDR>>15&1));
 8000cf2:	4b27      	ldr	r3, [pc, #156]	@ (8000d90 <main+0x154>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	0bdb      	lsrs	r3, r3, #15
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4826      	ldr	r0, [pc, #152]	@ (8000d98 <main+0x15c>)
 8000d00:	f000 fb59 	bl	80013b6 <uart_printf>
    uart_printf("=========================================================\r\n");
 8000d04:	481b      	ldr	r0, [pc, #108]	@ (8000d74 <main+0x138>)
 8000d06:	f000 fb56 	bl	80013b6 <uart_printf>
    Motor_control_pins_init();
 8000d0a:	f7ff fd83 	bl	8000814 <Motor_control_pins_init>
    uart_printf("Motor_control pins are initialized PIN0=%d PIN1=%d  PIN3=%d PIN5=%d\r\n",(GPIOB->IDR>>0&1),(GPIOB->IDR>>1&1),(GPIOB->IDR>>3&1),(GPIOB->IDR>>5&1));
 8000d0e:	4b20      	ldr	r3, [pc, #128]	@ (8000d90 <main+0x154>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f003 0101 	and.w	r1, r3, #1
 8000d16:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <main+0x154>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	085b      	lsrs	r3, r3, #1
 8000d1c:	f003 0201 	and.w	r2, r3, #1
 8000d20:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <main+0x154>)
 8000d22:	689b      	ldr	r3, [r3, #8]
 8000d24:	08db      	lsrs	r3, r3, #3
 8000d26:	f003 0001 	and.w	r0, r3, #1
 8000d2a:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <main+0x154>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	4603      	mov	r3, r0
 8000d38:	4818      	ldr	r0, [pc, #96]	@ (8000d9c <main+0x160>)
 8000d3a:	f000 fb3c 	bl	80013b6 <uart_printf>
    uart_printf("=========================================================\r\n");
 8000d3e:	480d      	ldr	r0, [pc, #52]	@ (8000d74 <main+0x138>)
 8000d40:	f000 fb39 	bl	80013b6 <uart_printf>
    MX_I2C1_Init();
 8000d44:	f7ff fcfa 	bl	800073c <MX_I2C1_Init>
    while(1){
    	if(I2C_RX_FLAG){
 8000d48:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <main+0x164>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0fb      	beq.n	8000d48 <main+0x10c>
    		I2C_RX_FLAG=0;
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <main+0x164>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
            HAL_I2C_Slave_Receive_IT(&hi2c1, data, 1);
 8000d56:	2201      	movs	r2, #1
 8000d58:	4912      	ldr	r1, [pc, #72]	@ (8000da4 <main+0x168>)
 8000d5a:	4813      	ldr	r0, [pc, #76]	@ (8000da8 <main+0x16c>)
 8000d5c:	f001 f832 	bl	8001dc4 <HAL_I2C_Slave_Receive_IT>
    		uart_printf("%c",data[0]);
 8000d60:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <main+0x168>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	4619      	mov	r1, r3
 8000d66:	4811      	ldr	r0, [pc, #68]	@ (8000dac <main+0x170>)
 8000d68:	f000 fb25 	bl	80013b6 <uart_printf>
    	if(I2C_RX_FLAG){
 8000d6c:	e7ec      	b.n	8000d48 <main+0x10c>
 8000d6e:	bf00      	nop
 8000d70:	08004308 	.word	0x08004308
 8000d74:	08004340 	.word	0x08004340
 8000d78:	0800437c 	.word	0x0800437c
 8000d7c:	0007a120 	.word	0x0007a120
 8000d80:	080043a8 	.word	0x080043a8
 8000d84:	080043c8 	.word	0x080043c8
 8000d88:	08004404 	.word	0x08004404
 8000d8c:	0800443c 	.word	0x0800443c
 8000d90:	40010c00 	.word	0x40010c00
 8000d94:	0800445c 	.word	0x0800445c
 8000d98:	08004498 	.word	0x08004498
 8000d9c:	080044c4 	.word	0x080044c4
 8000da0:	20000078 	.word	0x20000078
 8000da4:	2000007c 	.word	0x2000007c
 8000da8:	20000080 	.word	0x20000080
 8000dac:	0800450c 	.word	0x0800450c

08000db0 <Error_Handler>:
    }
}


void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc2:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <HAL_MspInit+0x5c>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	4a14      	ldr	r2, [pc, #80]	@ (8000e18 <HAL_MspInit+0x5c>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6193      	str	r3, [r2, #24]
 8000dce:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_MspInit+0x5c>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b0f      	ldr	r3, [pc, #60]	@ (8000e18 <HAL_MspInit+0x5c>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	4a0e      	ldr	r2, [pc, #56]	@ (8000e18 <HAL_MspInit+0x5c>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de4:	61d3      	str	r3, [r2, #28]
 8000de6:	4b0c      	ldr	r3, [pc, #48]	@ (8000e18 <HAL_MspInit+0x5c>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000df2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <HAL_MspInit+0x60>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	4a04      	ldr	r2, [pc, #16]	@ (8000e1c <HAL_MspInit+0x60>)
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010000 	.word	0x40010000

08000e20 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b088      	sub	sp, #32
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb0 <HAL_I2C_MspInit+0x90>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d133      	bne.n	8000ea8 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e40:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <HAL_I2C_MspInit+0x94>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb4 <HAL_I2C_MspInit+0x94>)
 8000e46:	f043 0308 	orr.w	r3, r3, #8
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <HAL_I2C_MspInit+0x94>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0308 	and.w	r3, r3, #8
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e58:	23c0      	movs	r3, #192	@ 0xc0
 8000e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5c:	2312      	movs	r3, #18
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4813      	ldr	r0, [pc, #76]	@ (8000eb8 <HAL_I2C_MspInit+0x98>)
 8000e6c:	f000 fcce 	bl	800180c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e70:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <HAL_I2C_MspInit+0x94>)
 8000e72:	69db      	ldr	r3, [r3, #28]
 8000e74:	4a0f      	ldr	r2, [pc, #60]	@ (8000eb4 <HAL_I2C_MspInit+0x94>)
 8000e76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e7a:	61d3      	str	r3, [r2, #28]
 8000e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <HAL_I2C_MspInit+0x94>)
 8000e7e:	69db      	ldr	r3, [r3, #28]
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	201f      	movs	r0, #31
 8000e8e:	f000 fc00 	bl	8001692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e92:	201f      	movs	r0, #31
 8000e94:	f000 fc19 	bl	80016ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2020      	movs	r0, #32
 8000e9e:	f000 fbf8 	bl	8001692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ea2:	2020      	movs	r0, #32
 8000ea4:	f000 fc11 	bl	80016ca <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ea8:	bf00      	nop
 8000eaa:	3720      	adds	r7, #32
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40005400 	.word	0x40005400
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010c00 	.word	0x40010c00

08000ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <NMI_Handler+0x4>

08000ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <BusFault_Handler+0x4>

08000edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee0:	bf00      	nop
 8000ee2:	e7fd      	b.n	8000ee0 <UsageFault_Handler+0x4>

08000ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0c:	f000 fad8 	bl	80014c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  milli_sec_tick++;
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <SysTick_Handler+0x18>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	3301      	adds	r3, #1
 8000f16:	4a02      	ldr	r2, [pc, #8]	@ (8000f20 <SysTick_Handler+0x18>)
 8000f18:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200000d4 	.word	0x200000d4

08000f24 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <I2C1_EV_IRQHandler+0x10>)
 8000f2a:	f000 ffb9 	bl	8001ea0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000080 	.word	0x20000080

08000f38 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <I2C1_ER_IRQHandler+0x10>)
 8000f3e:	f001 f920 	bl	8002182 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000080 	.word	0x20000080

08000f4c <systick_init>:
 *  Created on: Sep 3, 2025
 *      Author: MadaYaswanth
 */

#include"extern_file_declarations.h"
void systick_init(uint32_t ticks_per_sec){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
    // Reload value = (SystemCoreClock / ticks_per_sec) - 1
    SysTick->LOAD = (get_SYSCLK_freq() / ticks_per_sec) - 1;
 8000f54:	f000 f8a0 	bl	8001098 <get_SYSCLK_freq>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f60:	4a06      	ldr	r2, [pc, #24]	@ (8000f7c <systick_init+0x30>)
 8000f62:	3b01      	subs	r3, #1
 8000f64:	6053      	str	r3, [r2, #4]

    SysTick->VAL = 0;             // Clear current value
 8000f66:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <systick_init+0x30>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = (1 << 2) |    // CLKSOURCE = processor clock (AHB)
 8000f6c:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <systick_init+0x30>)
 8000f6e:	2207      	movs	r2, #7
 8000f70:	601a      	str	r2, [r3, #0]
                    (1 << 1) |    // TICKINT = enable SysTick interrupt
                    (1 << 0);     // ENABLE counter
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f88:	4a14      	ldr	r2, [pc, #80]	@ (8000fdc <_sbrk+0x5c>)
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <_sbrk+0x60>)
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f94:	4b13      	ldr	r3, [pc, #76]	@ (8000fe4 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <_sbrk+0x64>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <_sbrk+0x68>)
 8000fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	d207      	bcs.n	8000fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fb0:	f002 fcb8 	bl	8003924 <__errno>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	e009      	b.n	8000fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <_sbrk+0x64>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a05      	ldr	r2, [pc, #20]	@ (8000fe4 <_sbrk+0x64>)
 8000fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20005000 	.word	0x20005000
 8000fe0:	00000400 	.word	0x00000400
 8000fe4:	200000d8 	.word	0x200000d8
 8000fe8:	200002c8 	.word	0x200002c8

08000fec <system_clock_init_to_72MHZ>:
 *
 *  Created on: Sep 2, 2025
 *      Author: MadaYaswanth
 */
#include"main.h"
STATUS system_clock_init_to_72MHZ(){
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
	    // 1. Enable HSE (external crystal, e.g., 8MHz)
	    RCC->CR |= RCC_CR_HSEON;       // Turn on HSE
 8000ff0:	4b27      	ldr	r3, [pc, #156]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a26      	ldr	r2, [pc, #152]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 8000ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]
	    while (!(RCC->CR & RCC_CR_HSERDY)); // Wait until HSE is ready
 8000ffc:	bf00      	nop
 8000ffe:	4b24      	ldr	r3, [pc, #144]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f9      	beq.n	8000ffe <system_clock_init_to_72MHZ+0x12>
	    FLASH->ACR |= FLASH_ACR_LATENCY_2;  // 2 wait states
 800100a:	4b22      	ldr	r3, [pc, #136]	@ (8001094 <system_clock_init_to_72MHZ+0xa8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a21      	ldr	r2, [pc, #132]	@ (8001094 <system_clock_init_to_72MHZ+0xa8>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	6013      	str	r3, [r2, #0]
	    FLASH->ACR |= FLASH_ACR_PRFTBE;     // Enable prefetch
 8001016:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <system_clock_init_to_72MHZ+0xa8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a1e      	ldr	r2, [pc, #120]	@ (8001094 <system_clock_init_to_72MHZ+0xa8>)
 800101c:	f043 0310 	orr.w	r3, r3, #16
 8001020:	6013      	str	r3, [r2, #0]
	    // 2. Configure PLL to multiply HSE to 72 MHz
	    //    PLLMUL = 9 (8MHz * 9 = 72MHz)
	    RCC->CFGR |= RCC_CFGR_PLLMULL9; // PLL multiplier = 9
 8001022:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	4a1a      	ldr	r2, [pc, #104]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 8001028:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 800102c:	6053      	str	r3, [r2, #4]
	    // 3. Select HSE as PLL source
	    RCC->CFGR |= RCC_CFGR_PLLSRC;   // PLL source = HSE
 800102e:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	4a17      	ldr	r2, [pc, #92]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 8001034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001038:	6053      	str	r3, [r2, #4]
	    // 4. Set APB1 Prescaler to 2 (PCLK1 = 72MHz / 2 = 36MHz)
	    RCC->CFGR |= RCC_CFGR_PPRE1_2;  // APB1 prescaler = 2 (36MHz)
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 8001040:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001044:	6053      	str	r3, [r2, #4]
	    // 5. Set APB2 Prescaler to 1 (PCLK2 = 72MHz, no division)
	    RCC->CFGR &= ~RCC_CFGR_PPRE2;   // APB2 prescaler = 1 (72MHz)
 8001046:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	4a11      	ldr	r2, [pc, #68]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 800104c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001050:	6053      	str	r3, [r2, #4]
	    // 6. Enable PLL and wait until ready
	    RCC->CR |= RCC_CR_PLLON;
 8001052:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a0e      	ldr	r2, [pc, #56]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 8001058:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800105c:	6013      	str	r3, [r2, #0]
	    while (!(RCC->CR & RCC_CR_PLLRDY));
 800105e:	bf00      	nop
 8001060:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f9      	beq.n	8001060 <system_clock_init_to_72MHZ+0x74>
	     // 7. Switch SYSCLK to PLL
	    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	4a07      	ldr	r2, [pc, #28]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 8001072:	f043 0302 	orr.w	r3, r3, #2
 8001076:	6053      	str	r3, [r2, #4]
	    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8001078:	bf00      	nop
 800107a:	4b05      	ldr	r3, [pc, #20]	@ (8001090 <system_clock_init_to_72MHZ+0xa4>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b08      	cmp	r3, #8
 8001084:	d1f9      	bne.n	800107a <system_clock_init_to_72MHZ+0x8e>
}
 8001086:	bf00      	nop
 8001088:	4618      	mov	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000
 8001094:	40022000 	.word	0x40022000

08001098 <get_SYSCLK_freq>:
uint32_t get_SYSCLK_freq(void) {
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
    uint32_t sysclk_source, pllmul, prediv, pllclk;
    uint32_t HSE_Value = 8000000; // External crystal (adjust if different)
 800109e:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <get_SYSCLK_freq+0xa0>)
 80010a0:	60bb      	str	r3, [r7, #8]
    uint32_t HSI_Value = 8000000; // Internal RC
 80010a2:	4b25      	ldr	r3, [pc, #148]	@ (8001138 <get_SYSCLK_freq+0xa0>)
 80010a4:	607b      	str	r3, [r7, #4]
    sysclk_source = (RCC->CFGR >> 2) & 0x3;  // SWS bits
 80010a6:	4b25      	ldr	r3, [pc, #148]	@ (800113c <get_SYSCLK_freq+0xa4>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	603b      	str	r3, [r7, #0]
    switch (sysclk_source) {
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d00d      	beq.n	80010d4 <get_SYSCLK_freq+0x3c>
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d835      	bhi.n	800112a <get_SYSCLK_freq+0x92>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <get_SYSCLK_freq+0x34>
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d002      	beq.n	80010d0 <get_SYSCLK_freq+0x38>
 80010ca:	e02e      	b.n	800112a <get_SYSCLK_freq+0x92>
        case 0x00: // HSI
            return HSI_Value;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	e02d      	b.n	800112c <get_SYSCLK_freq+0x94>
        case 0x01: // HSE
            return HSE_Value;
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	e02b      	b.n	800112c <get_SYSCLK_freq+0x94>
        case 0x02: // PLL
            // PLL source
            if (RCC->CFGR & (1 << 16)) {
 80010d4:	4b19      	ldr	r3, [pc, #100]	@ (800113c <get_SYSCLK_freq+0xa4>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d010      	beq.n	8001102 <get_SYSCLK_freq+0x6a>
                // HSE as PLL source
                if (RCC->CFGR & (1 << 17))
 80010e0:	4b16      	ldr	r3, [pc, #88]	@ (800113c <get_SYSCLK_freq+0xa4>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <get_SYSCLK_freq+0x5a>
                    prediv = 2;   // HSE/2
 80010ec:	2302      	movs	r3, #2
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	e001      	b.n	80010f6 <get_SYSCLK_freq+0x5e>
                else
                    prediv = 1;   // HSE
 80010f2:	2301      	movs	r3, #1
 80010f4:	613b      	str	r3, [r7, #16]
                pllclk = HSE_Value / prediv;
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	e002      	b.n	8001108 <get_SYSCLK_freq+0x70>
            } else {
                // HSI/2 as PLL source
                pllclk = HSI_Value / 2; // 4 MHz
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	085b      	lsrs	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
            }

            // PLL multiplier
            pllmul = ((RCC->CFGR >> 18) & 0xF) + 2;
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <get_SYSCLK_freq+0xa4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	0c9b      	lsrs	r3, r3, #18
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3302      	adds	r3, #2
 8001114:	617b      	str	r3, [r7, #20]
            // Note: value 0b1101 = x13, 0b1110 = x14, 0b1111 = x16
            if (pllmul == 15) pllmul = 16; // adjust for 0b1111 special case
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d101      	bne.n	8001120 <get_SYSCLK_freq+0x88>
 800111c:	2310      	movs	r3, #16
 800111e:	617b      	str	r3, [r7, #20]

            return pllclk * pllmul;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	fb02 f303 	mul.w	r3, r2, r3
 8001128:	e000      	b.n	800112c <get_SYSCLK_freq+0x94>
        default:
            return HSI_Value; // fallback
 800112a:	687b      	ldr	r3, [r7, #4]
    }
}
 800112c:	4618      	mov	r0, r3
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	007a1200 	.word	0x007a1200
 800113c:	40021000 	.word	0x40021000

08001140 <get_AHB_freq>:
uint32_t get_AHB_freq(void) {
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b092      	sub	sp, #72	@ 0x48
 8001144:	af00      	add	r7, sp, #0
    uint32_t presc_table[16] = {1,1,1,1,1,1,1,1,2,4,8,16,64,128,256,512};
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <get_AHB_freq+0x4c>)
 8001148:	1d3c      	adds	r4, r7, #4
 800114a:	461d      	mov	r5, r3
 800114c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800114e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001158:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800115c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t hpre = (RCC->CFGR >> 4) & 0xF;
 8001160:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <get_AHB_freq+0x50>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	091b      	lsrs	r3, r3, #4
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	647b      	str	r3, [r7, #68]	@ 0x44
    return get_SYSCLK_freq() / presc_table[hpre];
 800116c:	f7ff ff94 	bl	8001098 <get_SYSCLK_freq>
 8001170:	4602      	mov	r2, r0
 8001172:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	3348      	adds	r3, #72	@ 0x48
 8001178:	443b      	add	r3, r7
 800117a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001182:	4618      	mov	r0, r3
 8001184:	3748      	adds	r7, #72	@ 0x48
 8001186:	46bd      	mov	sp, r7
 8001188:	bdb0      	pop	{r4, r5, r7, pc}
 800118a:	bf00      	nop
 800118c:	08004510 	.word	0x08004510
 8001190:	40021000 	.word	0x40021000

08001194 <get_APB1_freq>:

uint32_t get_APB1_freq(void) {
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b08a      	sub	sp, #40	@ 0x28
 8001198:	af00      	add	r7, sp, #0
    uint32_t presc_table[8] = {1,1,1,1,2,4,8,16};
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <get_APB1_freq+0x44>)
 800119c:	1d3c      	adds	r4, r7, #4
 800119e:	461d      	mov	r5, r3
 80011a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t ppre1 = (RCC->CFGR >> 8) & 0x7;
 80011ac:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <get_APB1_freq+0x48>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
    return get_AHB_freq() / presc_table[ppre1];
 80011b8:	f7ff ffc2 	bl	8001140 <get_AHB_freq>
 80011bc:	4602      	mov	r2, r0
 80011be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	3328      	adds	r3, #40	@ 0x28
 80011c4:	443b      	add	r3, r7
 80011c6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80011ca:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3728      	adds	r7, #40	@ 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bdb0      	pop	{r4, r5, r7, pc}
 80011d6:	bf00      	nop
 80011d8:	08004550 	.word	0x08004550
 80011dc:	40021000 	.word	0x40021000

080011e0 <get_APB2_freq>:

uint32_t get_APB2_freq(void) {
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0
    uint32_t presc_table[8] = {1,1,1,1,2,4,8,16};
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <get_APB2_freq+0x44>)
 80011e8:	1d3c      	adds	r4, r7, #4
 80011ea:	461d      	mov	r5, r3
 80011ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t ppre2 = (RCC->CFGR >> 11) & 0x7;
 80011f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001228 <get_APB2_freq+0x48>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	0adb      	lsrs	r3, r3, #11
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
    return get_AHB_freq() / presc_table[ppre2];
 8001204:	f7ff ff9c 	bl	8001140 <get_AHB_freq>
 8001208:	4602      	mov	r2, r0
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	3328      	adds	r3, #40	@ 0x28
 8001210:	443b      	add	r3, r7
 8001212:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800121a:	4618      	mov	r0, r3
 800121c:	3728      	adds	r7, #40	@ 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bdb0      	pop	{r4, r5, r7, pc}
 8001222:	bf00      	nop
 8001224:	08004550 	.word	0x08004550
 8001228:	40021000 	.word	0x40021000

0800122c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <Init_tasks>:

#include"extern_file_declarations.h"
#define max_tasks 10
task_timer timer[max_tasks];

void Init_tasks(void){
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
	for(int i=0; i<max_tasks; i++){
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	e024      	b.n	800128e <Init_tasks+0x56>
		timer[i].period_ms = 0;
 8001244:	4a16      	ldr	r2, [pc, #88]	@ (80012a0 <Init_tasks+0x68>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	4413      	add	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
		timer[i].last_time_ms = 0;
 8001250:	4a13      	ldr	r2, [pc, #76]	@ (80012a0 <Init_tasks+0x68>)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	011b      	lsls	r3, r3, #4
 8001256:	4413      	add	r3, r2
 8001258:	3304      	adds	r3, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
		timer[i].enable = 0;
 800125e:	4a10      	ldr	r2, [pc, #64]	@ (80012a0 <Init_tasks+0x68>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	4413      	add	r3, r2
 8001266:	330c      	adds	r3, #12
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
		timer[i].task_fn = 0;
 800126c:	4a0c      	ldr	r2, [pc, #48]	@ (80012a0 <Init_tasks+0x68>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	4413      	add	r3, r2
 8001274:	3308      	adds	r3, #8
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
		timer[i].one_time_execute = 0;
 800127a:	4a09      	ldr	r2, [pc, #36]	@ (80012a0 <Init_tasks+0x68>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	4413      	add	r3, r2
 8001282:	330d      	adds	r3, #13
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<max_tasks; i++){
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3301      	adds	r3, #1
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b09      	cmp	r3, #9
 8001292:	ddd7      	ble.n	8001244 <Init_tasks+0xc>
	}
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	200000dc 	.word	0x200000dc

080012a4 <uart_init>:
#include <stdio.h>
#include <stdarg.h>
#include"extern_file_declarations.h"
#define UART_PRINTF_BUFFER_SIZE 100
extern uint32_t get_APB1_freq(void) ;
STATUS uart_init(uint32_t Baud_Rate){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	 // Enable clocks
	    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;   // GPIOA
 80012ac:	4b25      	ldr	r3, [pc, #148]	@ (8001344 <uart_init+0xa0>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4a24      	ldr	r2, [pc, #144]	@ (8001344 <uart_init+0xa0>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6193      	str	r3, [r2, #24]
	    RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1
 80012b8:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <uart_init+0xa0>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a21      	ldr	r2, [pc, #132]	@ (8001344 <uart_init+0xa0>)
 80012be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c2:	6193      	str	r3, [r2, #24]
	    // PA9 = TX (AF push-pull), PA10 = RX (input floating)
	    GPIOA->CRH &= ~((0xF << (4 * 1)) | (0xF << (4 * 2))); // clear CNF/MODE for PA9, PA10
 80012c4:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <uart_init+0xa4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001348 <uart_init+0xa4>)
 80012ca:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80012ce:	6053      	str	r3, [r2, #4]
	    GPIOA->CRH |=  (0xB << (4 * 1)); // PA9 = AF PP, 50 MHz
 80012d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <uart_init+0xa4>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001348 <uart_init+0xa4>)
 80012d6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80012da:	6053      	str	r3, [r2, #4]
	    GPIOA->CRH |=  (0x4 << (4 * 2)); // PA10 = input floating
 80012dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <uart_init+0xa4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	4a19      	ldr	r2, [pc, #100]	@ (8001348 <uart_init+0xa4>)
 80012e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012e6:	6053      	str	r3, [r2, #4]
	    // Reset USART1
	    USART1->CR1 = 0;
 80012e8:	4b18      	ldr	r3, [pc, #96]	@ (800134c <uart_init+0xa8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
	    // Calculate baudrate divisor
	    uint32_t pclk2 = get_APB2_freq();
 80012ee:	f7ff ff77 	bl	80011e0 <get_APB2_freq>
 80012f2:	60f8      	str	r0, [r7, #12]
	    if (pclk2 == 0 || Baud_Rate == 0) {
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <uart_init+0x5c>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <uart_init+0x60>
	        return RY_NOT_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	e01b      	b.n	800133c <uart_init+0x98>
	    }
	    uint32_t usartdiv = (pclk2 + (Baud_Rate/2)) / Baud_Rate; // nearest
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	085a      	lsrs	r2, r3, #1
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	441a      	add	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	60bb      	str	r3, [r7, #8]
	    USART1->BRR = usartdiv;
 8001314:	4a0d      	ldr	r2, [pc, #52]	@ (800134c <uart_init+0xa8>)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	6093      	str	r3, [r2, #8]
	    // Enable USART, TX, RX
	    USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <uart_init+0xa8>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	4a0b      	ldr	r2, [pc, #44]	@ (800134c <uart_init+0xa8>)
 8001320:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001324:	f043 030c 	orr.w	r3, r3, #12
 8001328:	60d3      	str	r3, [r2, #12]

	    // Verify configuration
	    if (!(USART1->CR1 & USART_CR1_UE)) {
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <uart_init+0xa8>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <uart_init+0x96>
	        return RY_NOT_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <uart_init+0x98>
	    }
	    return RY_OK;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000
 8001348:	40010800 	.word	0x40010800
 800134c:	40013800 	.word	0x40013800

08001350 <uart_print>:
 * @brief  Send a single byte over UART1
 * @param  data: byte to send
 * @return UART_Status_t
 */
void uart_print(uint8_t data)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
    // Wait until TXE (Transmit Data Register Empty)
    while (!(USART1->SR & USART_SR_TXE)) {  }
 800135a:	bf00      	nop
 800135c:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <uart_print+0x38>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f9      	beq.n	800135c <uart_print+0xc>
    USART1->DR = data;
 8001368:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <uart_print+0x38>)
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	6053      	str	r3, [r2, #4]
    while (!(USART1->SR & USART_SR_TC)) {  }
 800136e:	bf00      	nop
 8001370:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <uart_print+0x38>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f9      	beq.n	8001370 <uart_print+0x20>
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40013800 	.word	0x40013800

0800138c <uart_print_str>:
void uart_print_str(const char *str)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001394:	e006      	b.n	80013a4 <uart_print_str+0x18>
    	uart_print(*str++);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ffd6 	bl	8001350 <uart_print>
    while (*str) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d1f4      	bne.n	8001396 <uart_print_str+0xa>
    }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <uart_printf>:
void uart_printf(const char *format, ...)
{
 80013b6:	b40f      	push	{r0, r1, r2, r3}
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b09a      	sub	sp, #104	@ 0x68
 80013bc:	af00      	add	r7, sp, #0
    char buffer[UART_PRINTF_BUFFER_SIZE];
    va_list args;
    va_start(args, format);
 80013be:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80013c2:	603b      	str	r3, [r7, #0]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80013c4:	1d38      	adds	r0, r7, #4
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80013ca:	2164      	movs	r1, #100	@ 0x64
 80013cc:	f002 fa9c 	bl	8003908 <vsniprintf>
    va_end(args);
    uart_print_str(buffer);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ffda 	bl	800138c <uart_print_str>
}
 80013d8:	bf00      	nop
 80013da:	3768      	adds	r7, #104	@ 0x68
 80013dc:	46bd      	mov	sp, r7
 80013de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013e2:	b004      	add	sp, #16
 80013e4:	4770      	bx	lr
	...

080013e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e8:	f7ff ff20 	bl	800122c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ec:	480b      	ldr	r0, [pc, #44]	@ (800141c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013ee:	490c      	ldr	r1, [pc, #48]	@ (8001420 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001424 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a09      	ldr	r2, [pc, #36]	@ (8001428 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001404:	4c09      	ldr	r4, [pc, #36]	@ (800142c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001412:	f002 fa8d 	bl	8003930 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001416:	f7ff fc11 	bl	8000c3c <main>
  bx lr
 800141a:	4770      	bx	lr
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001424:	080045b4 	.word	0x080045b4
  ldr r2, =_sbss
 8001428:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800142c:	200002c8 	.word	0x200002c8

08001430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC1_2_IRQHandler>
	...

08001434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001438:	4b08      	ldr	r3, [pc, #32]	@ (800145c <HAL_Init+0x28>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a07      	ldr	r2, [pc, #28]	@ (800145c <HAL_Init+0x28>)
 800143e:	f043 0310 	orr.w	r3, r3, #16
 8001442:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001444:	2003      	movs	r0, #3
 8001446:	f000 f919 	bl	800167c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144a:	200f      	movs	r0, #15
 800144c:	f000 f808 	bl	8001460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001450:	f7ff fcb4 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40022000 	.word	0x40022000

08001460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001468:	4b12      	ldr	r3, [pc, #72]	@ (80014b4 <HAL_InitTick+0x54>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <HAL_InitTick+0x58>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001476:	fbb3 f3f1 	udiv	r3, r3, r1
 800147a:	fbb2 f3f3 	udiv	r3, r2, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f931 	bl	80016e6 <HAL_SYSTICK_Config>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e00e      	b.n	80014ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d80a      	bhi.n	80014aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f000 f8f9 	bl	8001692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a0:	4a06      	ldr	r2, [pc, #24]	@ (80014bc <HAL_InitTick+0x5c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e000      	b.n	80014ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000004 	.word	0x20000004

080014c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <HAL_IncTick+0x1c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <HAL_IncTick+0x20>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	4a03      	ldr	r2, [pc, #12]	@ (80014e0 <HAL_IncTick+0x20>)
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	20000008 	.word	0x20000008
 80014e0:	2000017c 	.word	0x2000017c

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4906      	ldr	r1, [pc, #24]	@ (800157c <__NVIC_EnableIRQ+0x34>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	@ (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	@ (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	@ 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	@ 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f7ff ff90 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ff2d 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	4603      	mov	r3, r0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a4:	f7ff ff42 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	68b9      	ldr	r1, [r7, #8]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	f7ff ff90 	bl	80015d4 <NVIC_EncodePriority>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	4611      	mov	r1, r2
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff5f 	bl	8001580 <__NVIC_SetPriority>
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff35 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ffa2 	bl	8001638 <SysTick_Config>
 80016f4:	4603      	mov	r3, r0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001708:	2300      	movs	r3, #0
 800170a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d005      	beq.n	8001724 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2204      	movs	r2, #4
 800171c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	e051      	b.n	80017c8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 020e 	bic.w	r2, r2, #14
 8001732:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0201 	bic.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a22      	ldr	r2, [pc, #136]	@ (80017d4 <HAL_DMA_Abort_IT+0xd4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d029      	beq.n	80017a2 <HAL_DMA_Abort_IT+0xa2>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a21      	ldr	r2, [pc, #132]	@ (80017d8 <HAL_DMA_Abort_IT+0xd8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d022      	beq.n	800179e <HAL_DMA_Abort_IT+0x9e>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a1f      	ldr	r2, [pc, #124]	@ (80017dc <HAL_DMA_Abort_IT+0xdc>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d01a      	beq.n	8001798 <HAL_DMA_Abort_IT+0x98>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1e      	ldr	r2, [pc, #120]	@ (80017e0 <HAL_DMA_Abort_IT+0xe0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d012      	beq.n	8001792 <HAL_DMA_Abort_IT+0x92>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1c      	ldr	r2, [pc, #112]	@ (80017e4 <HAL_DMA_Abort_IT+0xe4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00a      	beq.n	800178c <HAL_DMA_Abort_IT+0x8c>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a1b      	ldr	r2, [pc, #108]	@ (80017e8 <HAL_DMA_Abort_IT+0xe8>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d102      	bne.n	8001786 <HAL_DMA_Abort_IT+0x86>
 8001780:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001784:	e00e      	b.n	80017a4 <HAL_DMA_Abort_IT+0xa4>
 8001786:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800178a:	e00b      	b.n	80017a4 <HAL_DMA_Abort_IT+0xa4>
 800178c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001790:	e008      	b.n	80017a4 <HAL_DMA_Abort_IT+0xa4>
 8001792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001796:	e005      	b.n	80017a4 <HAL_DMA_Abort_IT+0xa4>
 8001798:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800179c:	e002      	b.n	80017a4 <HAL_DMA_Abort_IT+0xa4>
 800179e:	2310      	movs	r3, #16
 80017a0:	e000      	b.n	80017a4 <HAL_DMA_Abort_IT+0xa4>
 80017a2:	2301      	movs	r3, #1
 80017a4:	4a11      	ldr	r2, [pc, #68]	@ (80017ec <HAL_DMA_Abort_IT+0xec>)
 80017a6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d003      	beq.n	80017c8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	4798      	blx	r3
    } 
  }
  return status;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40020008 	.word	0x40020008
 80017d8:	4002001c 	.word	0x4002001c
 80017dc:	40020030 	.word	0x40020030
 80017e0:	40020044 	.word	0x40020044
 80017e4:	40020058 	.word	0x40020058
 80017e8:	4002006c 	.word	0x4002006c
 80017ec:	40020000 	.word	0x40020000

080017f0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80017fe:	b2db      	uxtb	r3, r3
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
	...

0800180c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800180c:	b480      	push	{r7}
 800180e:	b08b      	sub	sp, #44	@ 0x2c
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181e:	e169      	b.n	8001af4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001820:	2201      	movs	r2, #1
 8001822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	429a      	cmp	r2, r3
 800183a:	f040 8158 	bne.w	8001aee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	4a9a      	ldr	r2, [pc, #616]	@ (8001aac <HAL_GPIO_Init+0x2a0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d05e      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001848:	4a98      	ldr	r2, [pc, #608]	@ (8001aac <HAL_GPIO_Init+0x2a0>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d875      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 800184e:	4a98      	ldr	r2, [pc, #608]	@ (8001ab0 <HAL_GPIO_Init+0x2a4>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d058      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001854:	4a96      	ldr	r2, [pc, #600]	@ (8001ab0 <HAL_GPIO_Init+0x2a4>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d86f      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 800185a:	4a96      	ldr	r2, [pc, #600]	@ (8001ab4 <HAL_GPIO_Init+0x2a8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d052      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001860:	4a94      	ldr	r2, [pc, #592]	@ (8001ab4 <HAL_GPIO_Init+0x2a8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d869      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 8001866:	4a94      	ldr	r2, [pc, #592]	@ (8001ab8 <HAL_GPIO_Init+0x2ac>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d04c      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 800186c:	4a92      	ldr	r2, [pc, #584]	@ (8001ab8 <HAL_GPIO_Init+0x2ac>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d863      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 8001872:	4a92      	ldr	r2, [pc, #584]	@ (8001abc <HAL_GPIO_Init+0x2b0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d046      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
 8001878:	4a90      	ldr	r2, [pc, #576]	@ (8001abc <HAL_GPIO_Init+0x2b0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d85d      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 800187e:	2b12      	cmp	r3, #18
 8001880:	d82a      	bhi.n	80018d8 <HAL_GPIO_Init+0xcc>
 8001882:	2b12      	cmp	r3, #18
 8001884:	d859      	bhi.n	800193a <HAL_GPIO_Init+0x12e>
 8001886:	a201      	add	r2, pc, #4	@ (adr r2, 800188c <HAL_GPIO_Init+0x80>)
 8001888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188c:	08001907 	.word	0x08001907
 8001890:	080018e1 	.word	0x080018e1
 8001894:	080018f3 	.word	0x080018f3
 8001898:	08001935 	.word	0x08001935
 800189c:	0800193b 	.word	0x0800193b
 80018a0:	0800193b 	.word	0x0800193b
 80018a4:	0800193b 	.word	0x0800193b
 80018a8:	0800193b 	.word	0x0800193b
 80018ac:	0800193b 	.word	0x0800193b
 80018b0:	0800193b 	.word	0x0800193b
 80018b4:	0800193b 	.word	0x0800193b
 80018b8:	0800193b 	.word	0x0800193b
 80018bc:	0800193b 	.word	0x0800193b
 80018c0:	0800193b 	.word	0x0800193b
 80018c4:	0800193b 	.word	0x0800193b
 80018c8:	0800193b 	.word	0x0800193b
 80018cc:	0800193b 	.word	0x0800193b
 80018d0:	080018e9 	.word	0x080018e9
 80018d4:	080018fd 	.word	0x080018fd
 80018d8:	4a79      	ldr	r2, [pc, #484]	@ (8001ac0 <HAL_GPIO_Init+0x2b4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d013      	beq.n	8001906 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018de:	e02c      	b.n	800193a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	623b      	str	r3, [r7, #32]
          break;
 80018e6:	e029      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	3304      	adds	r3, #4
 80018ee:	623b      	str	r3, [r7, #32]
          break;
 80018f0:	e024      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	3308      	adds	r3, #8
 80018f8:	623b      	str	r3, [r7, #32]
          break;
 80018fa:	e01f      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	330c      	adds	r3, #12
 8001902:	623b      	str	r3, [r7, #32]
          break;
 8001904:	e01a      	b.n	800193c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d102      	bne.n	8001914 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800190e:	2304      	movs	r3, #4
 8001910:	623b      	str	r3, [r7, #32]
          break;
 8001912:	e013      	b.n	800193c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d105      	bne.n	8001928 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800191c:	2308      	movs	r3, #8
 800191e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	611a      	str	r2, [r3, #16]
          break;
 8001926:	e009      	b.n	800193c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001928:	2308      	movs	r3, #8
 800192a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	615a      	str	r2, [r3, #20]
          break;
 8001932:	e003      	b.n	800193c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001934:	2300      	movs	r3, #0
 8001936:	623b      	str	r3, [r7, #32]
          break;
 8001938:	e000      	b.n	800193c <HAL_GPIO_Init+0x130>
          break;
 800193a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2bff      	cmp	r3, #255	@ 0xff
 8001940:	d801      	bhi.n	8001946 <HAL_GPIO_Init+0x13a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	e001      	b.n	800194a <HAL_GPIO_Init+0x13e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3304      	adds	r3, #4
 800194a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2bff      	cmp	r3, #255	@ 0xff
 8001950:	d802      	bhi.n	8001958 <HAL_GPIO_Init+0x14c>
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	e002      	b.n	800195e <HAL_GPIO_Init+0x152>
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	3b08      	subs	r3, #8
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	210f      	movs	r1, #15
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	401a      	ands	r2, r3
 8001970:	6a39      	ldr	r1, [r7, #32]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	431a      	orrs	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 80b1 	beq.w	8001aee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800198c:	4b4d      	ldr	r3, [pc, #308]	@ (8001ac4 <HAL_GPIO_Init+0x2b8>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	4a4c      	ldr	r2, [pc, #304]	@ (8001ac4 <HAL_GPIO_Init+0x2b8>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6193      	str	r3, [r2, #24]
 8001998:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac4 <HAL_GPIO_Init+0x2b8>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019a4:	4a48      	ldr	r2, [pc, #288]	@ (8001ac8 <HAL_GPIO_Init+0x2bc>)
 80019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	3302      	adds	r3, #2
 80019ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	220f      	movs	r2, #15
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	43db      	mvns	r3, r3
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a40      	ldr	r2, [pc, #256]	@ (8001acc <HAL_GPIO_Init+0x2c0>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d013      	beq.n	80019f8 <HAL_GPIO_Init+0x1ec>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ad0 <HAL_GPIO_Init+0x2c4>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d00d      	beq.n	80019f4 <HAL_GPIO_Init+0x1e8>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a3e      	ldr	r2, [pc, #248]	@ (8001ad4 <HAL_GPIO_Init+0x2c8>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d007      	beq.n	80019f0 <HAL_GPIO_Init+0x1e4>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ad8 <HAL_GPIO_Init+0x2cc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_GPIO_Init+0x1e0>
 80019e8:	2303      	movs	r3, #3
 80019ea:	e006      	b.n	80019fa <HAL_GPIO_Init+0x1ee>
 80019ec:	2304      	movs	r3, #4
 80019ee:	e004      	b.n	80019fa <HAL_GPIO_Init+0x1ee>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e002      	b.n	80019fa <HAL_GPIO_Init+0x1ee>
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_GPIO_Init+0x1ee>
 80019f8:	2300      	movs	r3, #0
 80019fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019fc:	f002 0203 	and.w	r2, r2, #3
 8001a00:	0092      	lsls	r2, r2, #2
 8001a02:	4093      	lsls	r3, r2
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a0a:	492f      	ldr	r1, [pc, #188]	@ (8001ac8 <HAL_GPIO_Init+0x2bc>)
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a0e:	089b      	lsrs	r3, r3, #2
 8001a10:	3302      	adds	r3, #2
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a24:	4b2d      	ldr	r3, [pc, #180]	@ (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	492c      	ldr	r1, [pc, #176]	@ (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a32:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	4928      	ldr	r1, [pc, #160]	@ (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a4c:	4b23      	ldr	r3, [pc, #140]	@ (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	4922      	ldr	r1, [pc, #136]	@ (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60cb      	str	r3, [r1, #12]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a5a:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	491e      	ldr	r1, [pc, #120]	@ (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a74:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	4918      	ldr	r1, [pc, #96]	@ (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	604b      	str	r3, [r1, #4]
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a82:	4b16      	ldr	r3, [pc, #88]	@ (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	4914      	ldr	r1, [pc, #80]	@ (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d021      	beq.n	8001ae0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001adc <HAL_GPIO_Init+0x2d0>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	490e      	ldr	r1, [pc, #56]	@ (8001adc <HAL_GPIO_Init+0x2d0>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
 8001aa8:	e021      	b.n	8001aee <HAL_GPIO_Init+0x2e2>
 8001aaa:	bf00      	nop
 8001aac:	10320000 	.word	0x10320000
 8001ab0:	10310000 	.word	0x10310000
 8001ab4:	10220000 	.word	0x10220000
 8001ab8:	10210000 	.word	0x10210000
 8001abc:	10120000 	.word	0x10120000
 8001ac0:	10110000 	.word	0x10110000
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40010000 	.word	0x40010000
 8001acc:	40010800 	.word	0x40010800
 8001ad0:	40010c00 	.word	0x40010c00
 8001ad4:	40011000 	.word	0x40011000
 8001ad8:	40011400 	.word	0x40011400
 8001adc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	4909      	ldr	r1, [pc, #36]	@ (8001b10 <HAL_GPIO_Init+0x304>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af0:	3301      	adds	r3, #1
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afa:	fa22 f303 	lsr.w	r3, r2, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f47f ae8e 	bne.w	8001820 <HAL_GPIO_Init+0x14>
  }
}
 8001b04:	bf00      	nop
 8001b06:	bf00      	nop
 8001b08:	372c      	adds	r7, #44	@ 0x2c
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	40010400 	.word	0x40010400

08001b14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e12b      	b.n	8001d7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff f970 	bl	8000e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2224      	movs	r2, #36	@ 0x24
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0201 	bic.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b78:	f001 fe84 	bl	8003884 <HAL_RCC_GetPCLK1Freq>
 8001b7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4a81      	ldr	r2, [pc, #516]	@ (8001d88 <HAL_I2C_Init+0x274>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d807      	bhi.n	8001b98 <HAL_I2C_Init+0x84>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4a80      	ldr	r2, [pc, #512]	@ (8001d8c <HAL_I2C_Init+0x278>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	bf94      	ite	ls
 8001b90:	2301      	movls	r3, #1
 8001b92:	2300      	movhi	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	e006      	b.n	8001ba6 <HAL_I2C_Init+0x92>
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4a7d      	ldr	r2, [pc, #500]	@ (8001d90 <HAL_I2C_Init+0x27c>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	bf94      	ite	ls
 8001ba0:	2301      	movls	r3, #1
 8001ba2:	2300      	movhi	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0e7      	b.n	8001d7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4a78      	ldr	r2, [pc, #480]	@ (8001d94 <HAL_I2C_Init+0x280>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	0c9b      	lsrs	r3, r3, #18
 8001bb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	4a6a      	ldr	r2, [pc, #424]	@ (8001d88 <HAL_I2C_Init+0x274>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d802      	bhi.n	8001be8 <HAL_I2C_Init+0xd4>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	3301      	adds	r3, #1
 8001be6:	e009      	b.n	8001bfc <HAL_I2C_Init+0xe8>
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	4a69      	ldr	r2, [pc, #420]	@ (8001d98 <HAL_I2C_Init+0x284>)
 8001bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf8:	099b      	lsrs	r3, r3, #6
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	430b      	orrs	r3, r1
 8001c02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	495c      	ldr	r1, [pc, #368]	@ (8001d88 <HAL_I2C_Init+0x274>)
 8001c18:	428b      	cmp	r3, r1
 8001c1a:	d819      	bhi.n	8001c50 <HAL_I2C_Init+0x13c>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	1e59      	subs	r1, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c2a:	1c59      	adds	r1, r3, #1
 8001c2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c30:	400b      	ands	r3, r1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00a      	beq.n	8001c4c <HAL_I2C_Init+0x138>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1e59      	subs	r1, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c44:	3301      	adds	r3, #1
 8001c46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4a:	e051      	b.n	8001cf0 <HAL_I2C_Init+0x1dc>
 8001c4c:	2304      	movs	r3, #4
 8001c4e:	e04f      	b.n	8001cf0 <HAL_I2C_Init+0x1dc>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d111      	bne.n	8001c7c <HAL_I2C_Init+0x168>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1e58      	subs	r0, r3, #1
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	440b      	add	r3, r1
 8001c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	e012      	b.n	8001ca2 <HAL_I2C_Init+0x18e>
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1e58      	subs	r0, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6859      	ldr	r1, [r3, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	0099      	lsls	r1, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2301      	moveq	r3, #1
 8001c9e:	2300      	movne	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_I2C_Init+0x196>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e022      	b.n	8001cf0 <HAL_I2C_Init+0x1dc>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10e      	bne.n	8001cd0 <HAL_I2C_Init+0x1bc>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1e58      	subs	r0, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6859      	ldr	r1, [r3, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	440b      	add	r3, r1
 8001cc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cce:	e00f      	b.n	8001cf0 <HAL_I2C_Init+0x1dc>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1e58      	subs	r0, r3, #1
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	0099      	lsls	r1, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	6809      	ldr	r1, [r1, #0]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69da      	ldr	r2, [r3, #28]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	431a      	orrs	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6911      	ldr	r1, [r2, #16]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	68d2      	ldr	r2, [r2, #12]
 8001d2a:	4311      	orrs	r1, r2
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	430b      	orrs	r3, r1
 8001d32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	695a      	ldr	r2, [r3, #20]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	000186a0 	.word	0x000186a0
 8001d8c:	001e847f 	.word	0x001e847f
 8001d90:	003d08ff 	.word	0x003d08ff
 8001d94:	431bde83 	.word	0x431bde83
 8001d98:	10624dd3 	.word	0x10624dd3

08001d9c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001dae:	2b80      	cmp	r3, #128	@ 0x80
 8001db0:	d103      	bne.n	8001dba <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
  }
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b20      	cmp	r3, #32
 8001ddc:	d158      	bne.n	8001e90 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_I2C_Slave_Receive_IT+0x26>
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e051      	b.n	8001e92 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_I2C_Slave_Receive_IT+0x38>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e04a      	b.n	8001e92 <HAL_I2C_Slave_Receive_IT+0xce>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d007      	beq.n	8001e22 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e30:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2222      	movs	r2, #34	@ 0x22
 8001e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	88fa      	ldrh	r2, [r7, #6]
 8001e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4a0e      	ldr	r2, [pc, #56]	@ (8001e9c <HAL_I2C_Slave_Receive_IT+0xd8>)
 8001e62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e72:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001e8a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e000      	b.n	8001e92 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8001e90:	2302      	movs	r3, #2
  }
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	ffff0000 	.word	0xffff0000

08001ea0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ec0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ec8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
 8001ecc:	2b10      	cmp	r3, #16
 8001ece:	d003      	beq.n	8001ed8 <HAL_I2C_EV_IRQHandler+0x38>
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	2b40      	cmp	r3, #64	@ 0x40
 8001ed4:	f040 80c1 	bne.w	800205a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10d      	bne.n	8001f0e <HAL_I2C_EV_IRQHandler+0x6e>
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001ef8:	d003      	beq.n	8001f02 <HAL_I2C_EV_IRQHandler+0x62>
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001f00:	d101      	bne.n	8001f06 <HAL_I2C_EV_IRQHandler+0x66>
 8001f02:	2301      	movs	r3, #1
 8001f04:	e000      	b.n	8001f08 <HAL_I2C_EV_IRQHandler+0x68>
 8001f06:	2300      	movs	r3, #0
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	f000 8132 	beq.w	8002172 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00c      	beq.n	8001f32 <HAL_I2C_EV_IRQHandler+0x92>
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	0a5b      	lsrs	r3, r3, #9
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d006      	beq.n	8001f32 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f001 fc89 	bl	800383c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fd87 	bl	8002a3e <I2C_Master_SB>
 8001f30:	e092      	b.n	8002058 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	08db      	lsrs	r3, r3, #3
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <HAL_I2C_EV_IRQHandler+0xb2>
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	0a5b      	lsrs	r3, r3, #9
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fdfc 	bl	8002b48 <I2C_Master_ADD10>
 8001f50:	e082      	b.n	8002058 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	085b      	lsrs	r3, r3, #1
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d009      	beq.n	8001f72 <HAL_I2C_EV_IRQHandler+0xd2>
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	0a5b      	lsrs	r3, r3, #9
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fe15 	bl	8002b9a <I2C_Master_ADDR>
 8001f70:	e072      	b.n	8002058 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	089b      	lsrs	r3, r3, #2
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d03b      	beq.n	8001ff6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f8c:	f000 80f3 	beq.w	8002176 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	09db      	lsrs	r3, r3, #7
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00f      	beq.n	8001fbc <HAL_I2C_EV_IRQHandler+0x11c>
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	0a9b      	lsrs	r3, r3, #10
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d009      	beq.n	8001fbc <HAL_I2C_EV_IRQHandler+0x11c>
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d103      	bne.n	8001fbc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f9df 	bl	8002378 <I2C_MasterTransmit_TXE>
 8001fba:	e04d      	b.n	8002058 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80d6 	beq.w	8002176 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	0a5b      	lsrs	r3, r3, #9
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 80cf 	beq.w	8002176 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001fd8:	7bbb      	ldrb	r3, [r7, #14]
 8001fda:	2b21      	cmp	r3, #33	@ 0x21
 8001fdc:	d103      	bne.n	8001fe6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 fa66 	bl	80024b0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe4:	e0c7      	b.n	8002176 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
 8001fe8:	2b40      	cmp	r3, #64	@ 0x40
 8001fea:	f040 80c4 	bne.w	8002176 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fad4 	bl	800259c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ff4:	e0bf      	b.n	8002176 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002004:	f000 80b7 	beq.w	8002176 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	099b      	lsrs	r3, r3, #6
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00f      	beq.n	8002034 <HAL_I2C_EV_IRQHandler+0x194>
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	0a9b      	lsrs	r3, r3, #10
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b00      	cmp	r3, #0
 800201e:	d009      	beq.n	8002034 <HAL_I2C_EV_IRQHandler+0x194>
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d103      	bne.n	8002034 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fb4d 	bl	80026cc <I2C_MasterReceive_RXNE>
 8002032:	e011      	b.n	8002058 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 809a 	beq.w	8002176 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	0a5b      	lsrs	r3, r3, #9
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8093 	beq.w	8002176 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 fc03 	bl	800285c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002056:	e08e      	b.n	8002176 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002058:	e08d      	b.n	8002176 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	e007      	b.n	800207c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	085b      	lsrs	r3, r3, #1
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d012      	beq.n	80020ae <HAL_I2C_EV_IRQHandler+0x20e>
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	0a5b      	lsrs	r3, r3, #9
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00c      	beq.n	80020ae <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80020a4:	69b9      	ldr	r1, [r7, #24]
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 ffce 	bl	8003048 <I2C_Slave_ADDR>
 80020ac:	e066      	b.n	800217c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <HAL_I2C_EV_IRQHandler+0x22e>
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	0a5b      	lsrs	r3, r3, #9
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f001 f808 	bl	80030dc <I2C_Slave_STOPF>
 80020cc:	e056      	b.n	800217c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020ce:	7bbb      	ldrb	r3, [r7, #14]
 80020d0:	2b21      	cmp	r3, #33	@ 0x21
 80020d2:	d002      	beq.n	80020da <HAL_I2C_EV_IRQHandler+0x23a>
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	2b29      	cmp	r3, #41	@ 0x29
 80020d8:	d125      	bne.n	8002126 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	09db      	lsrs	r3, r3, #7
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00f      	beq.n	8002106 <HAL_I2C_EV_IRQHandler+0x266>
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	0a9b      	lsrs	r3, r3, #10
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d009      	beq.n	8002106 <HAL_I2C_EV_IRQHandler+0x266>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d103      	bne.n	8002106 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fee6 	bl	8002ed0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002104:	e039      	b.n	800217a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d033      	beq.n	800217a <HAL_I2C_EV_IRQHandler+0x2da>
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	0a5b      	lsrs	r3, r3, #9
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d02d      	beq.n	800217a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 ff13 	bl	8002f4a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002124:	e029      	b.n	800217a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	099b      	lsrs	r3, r3, #6
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00f      	beq.n	8002152 <HAL_I2C_EV_IRQHandler+0x2b2>
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	0a9b      	lsrs	r3, r3, #10
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_I2C_EV_IRQHandler+0x2b2>
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d103      	bne.n	8002152 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 ff1d 	bl	8002f8a <I2C_SlaveReceive_RXNE>
 8002150:	e014      	b.n	800217c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00e      	beq.n	800217c <HAL_I2C_EV_IRQHandler+0x2dc>
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	0a5b      	lsrs	r3, r3, #9
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d008      	beq.n	800217c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 ff4b 	bl	8003006 <I2C_SlaveReceive_BTF>
 8002170:	e004      	b.n	800217c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8002172:	bf00      	nop
 8002174:	e002      	b.n	800217c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002176:	bf00      	nop
 8002178:	e000      	b.n	800217c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800217a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b08a      	sub	sp, #40	@ 0x28
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021a4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d016      	beq.n	80021e0 <HAL_I2C_ER_IRQHandler+0x5e>
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d010      	beq.n	80021e0 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80021ce:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021de:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021e0:	6a3b      	ldr	r3, [r7, #32]
 80021e2:	0a5b      	lsrs	r3, r3, #9
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00e      	beq.n	800220a <HAL_I2C_ER_IRQHandler+0x88>
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80021f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002208:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	0a9b      	lsrs	r3, r3, #10
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d03f      	beq.n	8002296 <HAL_I2C_ER_IRQHandler+0x114>
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d039      	beq.n	8002296 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8002222:	7efb      	ldrb	r3, [r7, #27]
 8002224:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002234:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800223c:	7ebb      	ldrb	r3, [r7, #26]
 800223e:	2b20      	cmp	r3, #32
 8002240:	d112      	bne.n	8002268 <HAL_I2C_ER_IRQHandler+0xe6>
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10f      	bne.n	8002268 <HAL_I2C_ER_IRQHandler+0xe6>
 8002248:	7cfb      	ldrb	r3, [r7, #19]
 800224a:	2b21      	cmp	r3, #33	@ 0x21
 800224c:	d008      	beq.n	8002260 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800224e:	7cfb      	ldrb	r3, [r7, #19]
 8002250:	2b29      	cmp	r3, #41	@ 0x29
 8002252:	d005      	beq.n	8002260 <HAL_I2C_ER_IRQHandler+0xde>
 8002254:	7cfb      	ldrb	r3, [r7, #19]
 8002256:	2b28      	cmp	r3, #40	@ 0x28
 8002258:	d106      	bne.n	8002268 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b21      	cmp	r3, #33	@ 0x21
 800225e:	d103      	bne.n	8002268 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f001 f86b 	bl	800333c <I2C_Slave_AF>
 8002266:	e016      	b.n	8002296 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002270:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800227a:	7efb      	ldrb	r3, [r7, #27]
 800227c:	2b10      	cmp	r3, #16
 800227e:	d002      	beq.n	8002286 <HAL_I2C_ER_IRQHandler+0x104>
 8002280:	7efb      	ldrb	r3, [r7, #27]
 8002282:	2b40      	cmp	r3, #64	@ 0x40
 8002284:	d107      	bne.n	8002296 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002294:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	0adb      	lsrs	r3, r3, #11
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00e      	beq.n	80022c0 <HAL_I2C_ER_IRQHandler+0x13e>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80022be:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80022c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d008      	beq.n	80022d8 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f001 f8a6 	bl	8003424 <I2C_ITError>
  }
}
 80022d8:	bf00      	nop
 80022da:	3728      	adds	r7, #40	@ 0x28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	70fb      	strb	r3, [r7, #3]
 8002322:	4613      	mov	r3, r2
 8002324:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002386:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800238e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002394:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800239a:	2b00      	cmp	r3, #0
 800239c:	d150      	bne.n	8002440 <I2C_MasterTransmit_TXE+0xc8>
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b21      	cmp	r3, #33	@ 0x21
 80023a2:	d14d      	bne.n	8002440 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d01d      	beq.n	80023e6 <I2C_MasterTransmit_TXE+0x6e>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d01a      	beq.n	80023e6 <I2C_MasterTransmit_TXE+0x6e>
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023b6:	d016      	beq.n	80023e6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80023c6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2211      	movs	r2, #17
 80023cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ff7e 	bl	80022e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023e4:	e060      	b.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80023f4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002404:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b40      	cmp	r3, #64	@ 0x40
 800241e:	d107      	bne.n	8002430 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f7ff ff8a 	bl	8002342 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800242e:	e03b      	b.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff51 	bl	80022e0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800243e:	e033      	b.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	2b21      	cmp	r3, #33	@ 0x21
 8002444:	d005      	beq.n	8002452 <I2C_MasterTransmit_TXE+0xda>
 8002446:	7bbb      	ldrb	r3, [r7, #14]
 8002448:	2b40      	cmp	r3, #64	@ 0x40
 800244a:	d12d      	bne.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	2b22      	cmp	r3, #34	@ 0x22
 8002450:	d12a      	bne.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d108      	bne.n	800246e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800246a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800246c:	e01c      	b.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b40      	cmp	r3, #64	@ 0x40
 8002478:	d103      	bne.n	8002482 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f88e 	bl	800259c <I2C_MemoryTransmit_TXE_BTF>
}
 8002480:	e012      	b.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80024a6:	e7ff      	b.n	80024a8 <I2C_MasterTransmit_TXE+0x130>
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024bc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b21      	cmp	r3, #33	@ 0x21
 80024c8:	d164      	bne.n	8002594 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d012      	beq.n	80024fa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80024f8:	e04c      	b.n	8002594 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d01d      	beq.n	800253c <I2C_MasterTransmit_BTF+0x8c>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2b20      	cmp	r3, #32
 8002504:	d01a      	beq.n	800253c <I2C_MasterTransmit_BTF+0x8c>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800250c:	d016      	beq.n	800253c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800251c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2211      	movs	r2, #17
 8002522:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff fed3 	bl	80022e0 <HAL_I2C_MasterTxCpltCallback>
}
 800253a:	e02b      	b.n	8002594 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800254a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800255a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2220      	movs	r2, #32
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b40      	cmp	r3, #64	@ 0x40
 8002574:	d107      	bne.n	8002586 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff fedf 	bl	8002342 <HAL_I2C_MemTxCpltCallback>
}
 8002584:	e006      	b.n	8002594 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff fea6 	bl	80022e0 <HAL_I2C_MasterTxCpltCallback>
}
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d11d      	bne.n	80025f0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d10b      	bne.n	80025d4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025cc:	1c9a      	adds	r2, r3, #2
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80025d2:	e077      	b.n	80026c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d8:	b29b      	uxth	r3, r3
 80025da:	121b      	asrs	r3, r3, #8
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e8:	1c5a      	adds	r2, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80025ee:	e069      	b.n	80026c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d10b      	bne.n	8002610 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800260e:	e059      	b.n	80026c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002614:	2b02      	cmp	r3, #2
 8002616:	d152      	bne.n	80026be <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	2b22      	cmp	r3, #34	@ 0x22
 800261c:	d10d      	bne.n	800263a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800262c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002638:	e044      	b.n	80026c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263e:	b29b      	uxth	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d015      	beq.n	8002670 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	2b21      	cmp	r3, #33	@ 0x21
 8002648:	d112      	bne.n	8002670 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800266e:	e029      	b.n	80026c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d124      	bne.n	80026c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	2b21      	cmp	r3, #33	@ 0x21
 800267e:	d121      	bne.n	80026c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800268e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800269e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff fe43 	bl	8002342 <HAL_I2C_MemTxCpltCallback>
}
 80026bc:	e002      	b.n	80026c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff fb6c 	bl	8001d9c <I2C_Flush_DR>
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b22      	cmp	r3, #34	@ 0x22
 80026de:	f040 80b9 	bne.w	8002854 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	d921      	bls.n	800273a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	b2d2      	uxtb	r2, r2
 8002702:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b03      	cmp	r3, #3
 8002724:	f040 8096 	bne.w	8002854 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002736:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002738:	e08c      	b.n	8002854 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273e:	2b02      	cmp	r3, #2
 8002740:	d07f      	beq.n	8002842 <I2C_MasterReceive_RXNE+0x176>
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d002      	beq.n	800274e <I2C_MasterReceive_RXNE+0x82>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d179      	bne.n	8002842 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f001 f842 	bl	80037d8 <I2C_WaitOnSTOPRequestThroughIT>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d14c      	bne.n	80027f4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002768:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002778:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b40      	cmp	r3, #64	@ 0x40
 80027b2:	d10a      	bne.n	80027ca <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f7ff fdc6 	bl	8002354 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80027c8:	e044      	b.n	8002854 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d002      	beq.n	80027de <I2C_MasterReceive_RXNE+0x112>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d103      	bne.n	80027e6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80027e4:	e002      	b.n	80027ec <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2212      	movs	r2, #18
 80027ea:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff fd80 	bl	80022f2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80027f2:	e02f      	b.n	8002854 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002802:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7fd ffc2 	bl	80007c4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002840:	e008      	b.n	8002854 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002850:	605a      	str	r2, [r3, #4]
}
 8002852:	e7ff      	b.n	8002854 <I2C_MasterReceive_RXNE+0x188>
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002868:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b04      	cmp	r3, #4
 8002872:	d11b      	bne.n	80028ac <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002882:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691a      	ldr	r2, [r3, #16]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002896:	1c5a      	adds	r2, r3, #1
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80028aa:	e0c4      	b.n	8002a36 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d129      	bne.n	800290a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028c4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d00a      	beq.n	80028e2 <I2C_MasterReceive_BTF+0x86>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d007      	beq.n	80028e2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028e0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002908:	e095      	b.n	8002a36 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	2b02      	cmp	r3, #2
 8002912:	d17d      	bne.n	8002a10 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d002      	beq.n	8002920 <I2C_MasterReceive_BTF+0xc4>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b10      	cmp	r3, #16
 800291e:	d108      	bne.n	8002932 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	e016      	b.n	8002960 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b04      	cmp	r3, #4
 8002936:	d002      	beq.n	800293e <I2C_MasterReceive_BTF+0xe2>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d108      	bne.n	8002950 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e007      	b.n	8002960 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80029ba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b40      	cmp	r3, #64	@ 0x40
 80029ce:	d10a      	bne.n	80029e6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff fcb8 	bl	8002354 <HAL_I2C_MemRxCpltCallback>
}
 80029e4:	e027      	b.n	8002a36 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d002      	beq.n	80029fa <I2C_MasterReceive_BTF+0x19e>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	d103      	bne.n	8002a02 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a00:	e002      	b.n	8002a08 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2212      	movs	r2, #18
 8002a06:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff fc72 	bl	80022f2 <HAL_I2C_MasterRxCpltCallback>
}
 8002a0e:	e012      	b.n	8002a36 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b40      	cmp	r3, #64	@ 0x40
 8002a50:	d117      	bne.n	8002a82 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a6a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002a6c:	e067      	b.n	8002b3e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	611a      	str	r2, [r3, #16]
}
 8002a80:	e05d      	b.n	8002b3e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a8a:	d133      	bne.n	8002af4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b21      	cmp	r3, #33	@ 0x21
 8002a96:	d109      	bne.n	8002aac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002aa8:	611a      	str	r2, [r3, #16]
 8002aaa:	e008      	b.n	8002abe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <I2C_Master_SB+0x92>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d108      	bne.n	8002ae2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d032      	beq.n	8002b3e <I2C_Master_SB+0x100>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d02d      	beq.n	8002b3e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002af0:	605a      	str	r2, [r3, #4]
}
 8002af2:	e024      	b.n	8002b3e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10e      	bne.n	8002b1a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	11db      	asrs	r3, r3, #7
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f003 0306 	and.w	r3, r3, #6
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f063 030f 	orn	r3, r3, #15
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	611a      	str	r2, [r3, #16]
}
 8002b18:	e011      	b.n	8002b3e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d10d      	bne.n	8002b3e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	11db      	asrs	r3, r3, #7
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	f003 0306 	and.w	r3, r3, #6
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	f063 030e 	orn	r3, r3, #14
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	611a      	str	r2, [r3, #16]
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <I2C_Master_ADD10+0x26>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d108      	bne.n	8002b80 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00c      	beq.n	8002b90 <I2C_Master_ADD10+0x48>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d007      	beq.n	8002b90 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b8e:	605a      	str	r2, [r3, #4]
  }
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b091      	sub	sp, #68	@ 0x44
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ba8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b22      	cmp	r3, #34	@ 0x22
 8002bc2:	f040 8174 	bne.w	8002eae <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10f      	bne.n	8002bee <I2C_Master_ADDR+0x54>
 8002bce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002bd2:	2b40      	cmp	r3, #64	@ 0x40
 8002bd4:	d10b      	bne.n	8002bee <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bec:	e16b      	b.n	8002ec6 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d11d      	bne.n	8002c32 <I2C_Master_ADDR+0x98>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002bfe:	d118      	bne.n	8002c32 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c00:	2300      	movs	r3, #0
 8002c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c24:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c30:	e149      	b.n	8002ec6 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d113      	bne.n	8002c64 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	e120      	b.n	8002ea6 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	f040 808a 	bne.w	8002d84 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c76:	d137      	bne.n	8002ce8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c86:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c96:	d113      	bne.n	8002cc0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	e0f2      	b.n	8002ea6 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	623b      	str	r3, [r7, #32]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	623b      	str	r3, [r7, #32]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	623b      	str	r3, [r7, #32]
 8002cd4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e0de      	b.n	8002ea6 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d02e      	beq.n	8002d4c <I2C_Master_ADDR+0x1b2>
 8002cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d02b      	beq.n	8002d4c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cf6:	2b12      	cmp	r3, #18
 8002cf8:	d102      	bne.n	8002d00 <I2C_Master_ADDR+0x166>
 8002cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d125      	bne.n	8002d4c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d00e      	beq.n	8002d24 <I2C_Master_ADDR+0x18a>
 8002d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d00b      	beq.n	8002d24 <I2C_Master_ADDR+0x18a>
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0e:	2b10      	cmp	r3, #16
 8002d10:	d008      	beq.n	8002d24 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d20:	601a      	str	r2, [r3, #0]
 8002d22:	e007      	b.n	8002d34 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d32:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d34:	2300      	movs	r3, #0
 8002d36:	61fb      	str	r3, [r7, #28]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	e0ac      	b.n	8002ea6 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d5a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	e090      	b.n	8002ea6 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d158      	bne.n	8002e40 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d021      	beq.n	8002dd8 <I2C_Master_ADDR+0x23e>
 8002d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d01e      	beq.n	8002dd8 <I2C_Master_ADDR+0x23e>
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	d01b      	beq.n	8002dd8 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	e012      	b.n	8002dfe <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002de6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de8:	2300      	movs	r3, #0
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e0c:	d14b      	bne.n	8002ea6 <I2C_Master_ADDR+0x30c>
 8002e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e14:	d00b      	beq.n	8002e2e <I2C_Master_ADDR+0x294>
 8002e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d008      	beq.n	8002e2e <I2C_Master_ADDR+0x294>
 8002e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d005      	beq.n	8002e2e <I2C_Master_ADDR+0x294>
 8002e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e24:	2b10      	cmp	r3, #16
 8002e26:	d002      	beq.n	8002e2e <I2C_Master_ADDR+0x294>
 8002e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d13b      	bne.n	8002ea6 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	e032      	b.n	8002ea6 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002e4e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e5e:	d117      	bne.n	8002e90 <I2C_Master_ADDR+0x2f6>
 8002e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e62:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e66:	d00b      	beq.n	8002e80 <I2C_Master_ADDR+0x2e6>
 8002e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d008      	beq.n	8002e80 <I2C_Master_ADDR+0x2e6>
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d005      	beq.n	8002e80 <I2C_Master_ADDR+0x2e6>
 8002e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e76:	2b10      	cmp	r3, #16
 8002e78:	d002      	beq.n	8002e80 <I2C_Master_ADDR+0x2e6>
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d107      	bne.n	8002e90 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e8e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002eac:	e00b      	b.n	8002ec6 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	60bb      	str	r3, [r7, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
}
 8002ec4:	e7ff      	b.n	8002ec6 <I2C_Master_ADDR+0x32c>
 8002ec6:	bf00      	nop
 8002ec8:	3744      	adds	r7, #68	@ 0x44
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ede:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d02b      	beq.n	8002f42 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	781a      	ldrb	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	1c5a      	adds	r2, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d114      	bne.n	8002f42 <I2C_SlaveTransmit_TXE+0x72>
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
 8002f1a:	2b29      	cmp	r3, #41	@ 0x29
 8002f1c:	d111      	bne.n	8002f42 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f2c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2221      	movs	r2, #33	@ 0x21
 8002f32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2228      	movs	r2, #40	@ 0x28
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff f9e1 	bl	8002304 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d011      	beq.n	8002f80 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	1c5a      	adds	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f98:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d02c      	beq.n	8002ffe <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691a      	ldr	r2, [r3, #16]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d114      	bne.n	8002ffe <I2C_SlaveReceive_RXNE+0x74>
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
 8002fd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fd8:	d111      	bne.n	8002ffe <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fe8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2222      	movs	r2, #34	@ 0x22
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2228      	movs	r2, #40	@ 0x28
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7fd fbd5 	bl	80007a8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d012      	beq.n	800303e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691a      	ldr	r2, [r3, #16]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003052:	2300      	movs	r3, #0
 8003054:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003062:	2b28      	cmp	r3, #40	@ 0x28
 8003064:	d127      	bne.n	80030b6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003074:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	089b      	lsrs	r3, r3, #2
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	09db      	lsrs	r3, r3, #7
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	81bb      	strh	r3, [r7, #12]
 8003098:	e002      	b.n	80030a0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80030a8:	89ba      	ldrh	r2, [r7, #12]
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	4619      	mov	r1, r3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff f931 	bl	8002316 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80030b4:	e00e      	b.n	80030d4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b6:	2300      	movs	r3, #0
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030fa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80030fc:	2300      	movs	r3, #0
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003128:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003134:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003138:	d172      	bne.n	8003220 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	2b22      	cmp	r3, #34	@ 0x22
 800313e:	d002      	beq.n	8003146 <I2C_Slave_STOPF+0x6a>
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b2a      	cmp	r3, #42	@ 0x2a
 8003144:	d135      	bne.n	80031b2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	b29a      	uxth	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f043 0204 	orr.w	r2, r3, #4
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003178:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fb36 	bl	80017f0 <HAL_DMA_GetState>
 8003184:	4603      	mov	r3, r0
 8003186:	2b01      	cmp	r3, #1
 8003188:	d049      	beq.n	800321e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	4a69      	ldr	r2, [pc, #420]	@ (8003334 <I2C_Slave_STOPF+0x258>)
 8003190:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003196:	4618      	mov	r0, r3
 8003198:	f7fe fab2 	bl	8001700 <HAL_DMA_Abort_IT>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d03d      	beq.n	800321e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80031ac:	4610      	mov	r0, r2
 80031ae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031b0:	e035      	b.n	800321e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	f043 0204 	orr.w	r2, r3, #4
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe fb00 	bl	80017f0 <HAL_DMA_GetState>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d014      	beq.n	8003220 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fa:	4a4e      	ldr	r2, [pc, #312]	@ (8003334 <I2C_Slave_STOPF+0x258>)
 80031fc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe fa7c 	bl	8001700 <HAL_DMA_Abort_IT>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d008      	beq.n	8003220 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003218:	4610      	mov	r0, r2
 800321a:	4798      	blx	r3
 800321c:	e000      	b.n	8003220 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800321e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d03e      	beq.n	80032a8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b04      	cmp	r3, #4
 8003236:	d112      	bne.n	800325e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003268:	2b40      	cmp	r3, #64	@ 0x40
 800326a:	d112      	bne.n	8003292 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	1c5a      	adds	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	f043 0204 	orr.w	r2, r3, #4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f8b7 	bl	8003424 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80032b6:	e039      	b.n	800332c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032b8:	7bfb      	ldrb	r3, [r7, #15]
 80032ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80032bc:	d109      	bne.n	80032d2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2228      	movs	r2, #40	@ 0x28
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7fd fa6b 	bl	80007a8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b28      	cmp	r3, #40	@ 0x28
 80032dc:	d111      	bne.n	8003302 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a15      	ldr	r2, [pc, #84]	@ (8003338 <I2C_Slave_STOPF+0x25c>)
 80032e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff f818 	bl	8002330 <HAL_I2C_ListenCpltCallback>
}
 8003300:	e014      	b.n	800332c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	2b22      	cmp	r3, #34	@ 0x22
 8003308:	d002      	beq.n	8003310 <I2C_Slave_STOPF+0x234>
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	2b22      	cmp	r3, #34	@ 0x22
 800330e:	d10d      	bne.n	800332c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fd fa3e 	bl	80007a8 <HAL_I2C_SlaveRxCpltCallback>
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	08003689 	.word	0x08003689
 8003338:	ffff0000 	.word	0xffff0000

0800333c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800334a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003350:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d002      	beq.n	800335e <I2C_Slave_AF+0x22>
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b20      	cmp	r3, #32
 800335c:	d129      	bne.n	80033b2 <I2C_Slave_AF+0x76>
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b28      	cmp	r3, #40	@ 0x28
 8003362:	d126      	bne.n	80033b2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a2e      	ldr	r2, [pc, #184]	@ (8003420 <I2C_Slave_AF+0xe4>)
 8003368:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003378:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003382:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003392:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fe ffc0 	bl	8002330 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80033b0:	e031      	b.n	8003416 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	2b21      	cmp	r3, #33	@ 0x21
 80033b6:	d129      	bne.n	800340c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a19      	ldr	r2, [pc, #100]	@ (8003420 <I2C_Slave_AF+0xe4>)
 80033bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2221      	movs	r2, #33	@ 0x21
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033e2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033ec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033fc:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fe fccc 	bl	8001d9c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7fe ff7d 	bl	8002304 <HAL_I2C_SlaveTxCpltCallback>
}
 800340a:	e004      	b.n	8003416 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003414:	615a      	str	r2, [r3, #20]
}
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	ffff0000 	.word	0xffff0000

08003424 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003432:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800343a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800343c:	7bbb      	ldrb	r3, [r7, #14]
 800343e:	2b10      	cmp	r3, #16
 8003440:	d002      	beq.n	8003448 <I2C_ITError+0x24>
 8003442:	7bbb      	ldrb	r3, [r7, #14]
 8003444:	2b40      	cmp	r3, #64	@ 0x40
 8003446:	d10a      	bne.n	800345e <I2C_ITError+0x3a>
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b22      	cmp	r3, #34	@ 0x22
 800344c:	d107      	bne.n	800345e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800345c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003464:	2b28      	cmp	r3, #40	@ 0x28
 8003466:	d107      	bne.n	8003478 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2228      	movs	r2, #40	@ 0x28
 8003472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003476:	e015      	b.n	80034a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003482:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003486:	d00a      	beq.n	800349e <I2C_ITError+0x7a>
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	2b60      	cmp	r3, #96	@ 0x60
 800348c:	d007      	beq.n	800349e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034b2:	d162      	bne.n	800357a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d020      	beq.n	8003514 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034d6:	4a6a      	ldr	r2, [pc, #424]	@ (8003680 <I2C_ITError+0x25c>)
 80034d8:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe f90e 	bl	8001700 <HAL_DMA_Abort_IT>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 8089 	beq.w	80035fe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0201 	bic.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800350e:	4610      	mov	r0, r2
 8003510:	4798      	blx	r3
 8003512:	e074      	b.n	80035fe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003518:	4a59      	ldr	r2, [pc, #356]	@ (8003680 <I2C_ITError+0x25c>)
 800351a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003520:	4618      	mov	r0, r3
 8003522:	f7fe f8ed 	bl	8001700 <HAL_DMA_Abort_IT>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d068      	beq.n	80035fe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003536:	2b40      	cmp	r3, #64	@ 0x40
 8003538:	d10b      	bne.n	8003552 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0201 	bic.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003574:	4610      	mov	r0, r2
 8003576:	4798      	blx	r3
 8003578:	e041      	b.n	80035fe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b60      	cmp	r3, #96	@ 0x60
 8003584:	d125      	bne.n	80035d2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800359e:	2b40      	cmp	r3, #64	@ 0x40
 80035a0:	d10b      	bne.n	80035ba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	1c5a      	adds	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0201 	bic.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fe fecb 	bl	8002366 <HAL_I2C_AbortCpltCallback>
 80035d0:	e015      	b.n	80035fe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035dc:	2b40      	cmp	r3, #64	@ 0x40
 80035de:	d10b      	bne.n	80035f8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691a      	ldr	r2, [r3, #16]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7fd f8e3 	bl	80007c4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10e      	bne.n	800362c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800361e:	2b00      	cmp	r3, #0
 8003620:	d104      	bne.n	800362c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800363a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003642:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b04      	cmp	r3, #4
 800364e:	d113      	bne.n	8003678 <I2C_ITError+0x254>
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	2b28      	cmp	r3, #40	@ 0x28
 8003654:	d110      	bne.n	8003678 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a0a      	ldr	r2, [pc, #40]	@ (8003684 <I2C_ITError+0x260>)
 800365a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fe fe5c 	bl	8002330 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	08003689 	.word	0x08003689
 8003684:	ffff0000 	.word	0xffff0000

08003688 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036a2:	4b4b      	ldr	r3, [pc, #300]	@ (80037d0 <I2C_DMAAbort+0x148>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	08db      	lsrs	r3, r3, #3
 80036a8:	4a4a      	ldr	r2, [pc, #296]	@ (80037d4 <I2C_DMAAbort+0x14c>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	0a1a      	lsrs	r2, r3, #8
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	00da      	lsls	r2, r3, #3
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	f043 0220 	orr.w	r2, r3, #32
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80036ce:	e00a      	b.n	80036e6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80036e4:	d0ea      	beq.n	80036bc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f2:	2200      	movs	r2, #0
 80036f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003702:	2200      	movs	r2, #0
 8003704:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003714:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2200      	movs	r2, #0
 800371a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003728:	2200      	movs	r2, #0
 800372a:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003738:	2200      	movs	r2, #0
 800373a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0201 	bic.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b60      	cmp	r3, #96	@ 0x60
 8003756:	d10e      	bne.n	8003776 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2200      	movs	r2, #0
 800376c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800376e:	6978      	ldr	r0, [r7, #20]
 8003770:	f7fe fdf9 	bl	8002366 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003774:	e027      	b.n	80037c6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800377c:	2b28      	cmp	r3, #40	@ 0x28
 800377e:	d117      	bne.n	80037b0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800379e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2200      	movs	r2, #0
 80037a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2228      	movs	r2, #40	@ 0x28
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80037ae:	e007      	b.n	80037c0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80037c0:	6978      	ldr	r0, [r7, #20]
 80037c2:	f7fc ffff 	bl	80007c4 <HAL_I2C_ErrorCallback>
}
 80037c6:	bf00      	nop
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000000 	.word	0x20000000
 80037d4:	14f8b589 	.word	0x14f8b589

080037d8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80037e4:	4b13      	ldr	r3, [pc, #76]	@ (8003834 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	08db      	lsrs	r3, r3, #3
 80037ea:	4a13      	ldr	r2, [pc, #76]	@ (8003838 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	0a1a      	lsrs	r2, r3, #8
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d107      	bne.n	8003816 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	f043 0220 	orr.w	r2, r3, #32
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e008      	b.n	8003828 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003824:	d0e9      	beq.n	80037fa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20000000 	.word	0x20000000
 8003838:	14f8b589 	.word	0x14f8b589

0800383c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003848:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800384c:	d103      	bne.n	8003856 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003854:	e007      	b.n	8003866 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800385e:	d102      	bne.n	8003866 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2208      	movs	r2, #8
 8003864:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003874:	4b02      	ldr	r3, [pc, #8]	@ (8003880 <HAL_RCC_GetHCLKFreq+0x10>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	20000000 	.word	0x20000000

08003884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003888:	f7ff fff2 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 800388c:	4602      	mov	r2, r0
 800388e:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	0a1b      	lsrs	r3, r3, #8
 8003894:	f003 0307 	and.w	r3, r3, #7
 8003898:	4903      	ldr	r1, [pc, #12]	@ (80038a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800389a:	5ccb      	ldrb	r3, [r1, r3]
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40021000 	.word	0x40021000
 80038a8:	08004570 	.word	0x08004570

080038ac <_vsniprintf_r>:
 80038ac:	b530      	push	{r4, r5, lr}
 80038ae:	4614      	mov	r4, r2
 80038b0:	2c00      	cmp	r4, #0
 80038b2:	4605      	mov	r5, r0
 80038b4:	461a      	mov	r2, r3
 80038b6:	b09b      	sub	sp, #108	@ 0x6c
 80038b8:	da05      	bge.n	80038c6 <_vsniprintf_r+0x1a>
 80038ba:	238b      	movs	r3, #139	@ 0x8b
 80038bc:	6003      	str	r3, [r0, #0]
 80038be:	f04f 30ff 	mov.w	r0, #4294967295
 80038c2:	b01b      	add	sp, #108	@ 0x6c
 80038c4:	bd30      	pop	{r4, r5, pc}
 80038c6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80038ca:	f8ad 300c 	strh.w	r3, [sp, #12]
 80038ce:	f04f 0300 	mov.w	r3, #0
 80038d2:	9319      	str	r3, [sp, #100]	@ 0x64
 80038d4:	bf0c      	ite	eq
 80038d6:	4623      	moveq	r3, r4
 80038d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80038dc:	9302      	str	r3, [sp, #8]
 80038de:	9305      	str	r3, [sp, #20]
 80038e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038e4:	9100      	str	r1, [sp, #0]
 80038e6:	9104      	str	r1, [sp, #16]
 80038e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80038ec:	4669      	mov	r1, sp
 80038ee:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80038f0:	f000 f996 	bl	8003c20 <_svfiprintf_r>
 80038f4:	1c43      	adds	r3, r0, #1
 80038f6:	bfbc      	itt	lt
 80038f8:	238b      	movlt	r3, #139	@ 0x8b
 80038fa:	602b      	strlt	r3, [r5, #0]
 80038fc:	2c00      	cmp	r4, #0
 80038fe:	d0e0      	beq.n	80038c2 <_vsniprintf_r+0x16>
 8003900:	2200      	movs	r2, #0
 8003902:	9b00      	ldr	r3, [sp, #0]
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	e7dc      	b.n	80038c2 <_vsniprintf_r+0x16>

08003908 <vsniprintf>:
 8003908:	b507      	push	{r0, r1, r2, lr}
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	460a      	mov	r2, r1
 8003910:	4601      	mov	r1, r0
 8003912:	4803      	ldr	r0, [pc, #12]	@ (8003920 <vsniprintf+0x18>)
 8003914:	6800      	ldr	r0, [r0, #0]
 8003916:	f7ff ffc9 	bl	80038ac <_vsniprintf_r>
 800391a:	b003      	add	sp, #12
 800391c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003920:	2000000c 	.word	0x2000000c

08003924 <__errno>:
 8003924:	4b01      	ldr	r3, [pc, #4]	@ (800392c <__errno+0x8>)
 8003926:	6818      	ldr	r0, [r3, #0]
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	2000000c 	.word	0x2000000c

08003930 <__libc_init_array>:
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	2600      	movs	r6, #0
 8003934:	4d0c      	ldr	r5, [pc, #48]	@ (8003968 <__libc_init_array+0x38>)
 8003936:	4c0d      	ldr	r4, [pc, #52]	@ (800396c <__libc_init_array+0x3c>)
 8003938:	1b64      	subs	r4, r4, r5
 800393a:	10a4      	asrs	r4, r4, #2
 800393c:	42a6      	cmp	r6, r4
 800393e:	d109      	bne.n	8003954 <__libc_init_array+0x24>
 8003940:	f000 fc76 	bl	8004230 <_init>
 8003944:	2600      	movs	r6, #0
 8003946:	4d0a      	ldr	r5, [pc, #40]	@ (8003970 <__libc_init_array+0x40>)
 8003948:	4c0a      	ldr	r4, [pc, #40]	@ (8003974 <__libc_init_array+0x44>)
 800394a:	1b64      	subs	r4, r4, r5
 800394c:	10a4      	asrs	r4, r4, #2
 800394e:	42a6      	cmp	r6, r4
 8003950:	d105      	bne.n	800395e <__libc_init_array+0x2e>
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	f855 3b04 	ldr.w	r3, [r5], #4
 8003958:	4798      	blx	r3
 800395a:	3601      	adds	r6, #1
 800395c:	e7ee      	b.n	800393c <__libc_init_array+0xc>
 800395e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003962:	4798      	blx	r3
 8003964:	3601      	adds	r6, #1
 8003966:	e7f2      	b.n	800394e <__libc_init_array+0x1e>
 8003968:	080045ac 	.word	0x080045ac
 800396c:	080045ac 	.word	0x080045ac
 8003970:	080045ac 	.word	0x080045ac
 8003974:	080045b0 	.word	0x080045b0

08003978 <__retarget_lock_acquire_recursive>:
 8003978:	4770      	bx	lr

0800397a <__retarget_lock_release_recursive>:
 800397a:	4770      	bx	lr

0800397c <_free_r>:
 800397c:	b538      	push	{r3, r4, r5, lr}
 800397e:	4605      	mov	r5, r0
 8003980:	2900      	cmp	r1, #0
 8003982:	d040      	beq.n	8003a06 <_free_r+0x8a>
 8003984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003988:	1f0c      	subs	r4, r1, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	bfb8      	it	lt
 800398e:	18e4      	addlt	r4, r4, r3
 8003990:	f000 f8de 	bl	8003b50 <__malloc_lock>
 8003994:	4a1c      	ldr	r2, [pc, #112]	@ (8003a08 <_free_r+0x8c>)
 8003996:	6813      	ldr	r3, [r2, #0]
 8003998:	b933      	cbnz	r3, 80039a8 <_free_r+0x2c>
 800399a:	6063      	str	r3, [r4, #4]
 800399c:	6014      	str	r4, [r2, #0]
 800399e:	4628      	mov	r0, r5
 80039a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039a4:	f000 b8da 	b.w	8003b5c <__malloc_unlock>
 80039a8:	42a3      	cmp	r3, r4
 80039aa:	d908      	bls.n	80039be <_free_r+0x42>
 80039ac:	6820      	ldr	r0, [r4, #0]
 80039ae:	1821      	adds	r1, r4, r0
 80039b0:	428b      	cmp	r3, r1
 80039b2:	bf01      	itttt	eq
 80039b4:	6819      	ldreq	r1, [r3, #0]
 80039b6:	685b      	ldreq	r3, [r3, #4]
 80039b8:	1809      	addeq	r1, r1, r0
 80039ba:	6021      	streq	r1, [r4, #0]
 80039bc:	e7ed      	b.n	800399a <_free_r+0x1e>
 80039be:	461a      	mov	r2, r3
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	b10b      	cbz	r3, 80039c8 <_free_r+0x4c>
 80039c4:	42a3      	cmp	r3, r4
 80039c6:	d9fa      	bls.n	80039be <_free_r+0x42>
 80039c8:	6811      	ldr	r1, [r2, #0]
 80039ca:	1850      	adds	r0, r2, r1
 80039cc:	42a0      	cmp	r0, r4
 80039ce:	d10b      	bne.n	80039e8 <_free_r+0x6c>
 80039d0:	6820      	ldr	r0, [r4, #0]
 80039d2:	4401      	add	r1, r0
 80039d4:	1850      	adds	r0, r2, r1
 80039d6:	4283      	cmp	r3, r0
 80039d8:	6011      	str	r1, [r2, #0]
 80039da:	d1e0      	bne.n	800399e <_free_r+0x22>
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	4408      	add	r0, r1
 80039e2:	6010      	str	r0, [r2, #0]
 80039e4:	6053      	str	r3, [r2, #4]
 80039e6:	e7da      	b.n	800399e <_free_r+0x22>
 80039e8:	d902      	bls.n	80039f0 <_free_r+0x74>
 80039ea:	230c      	movs	r3, #12
 80039ec:	602b      	str	r3, [r5, #0]
 80039ee:	e7d6      	b.n	800399e <_free_r+0x22>
 80039f0:	6820      	ldr	r0, [r4, #0]
 80039f2:	1821      	adds	r1, r4, r0
 80039f4:	428b      	cmp	r3, r1
 80039f6:	bf01      	itttt	eq
 80039f8:	6819      	ldreq	r1, [r3, #0]
 80039fa:	685b      	ldreq	r3, [r3, #4]
 80039fc:	1809      	addeq	r1, r1, r0
 80039fe:	6021      	streq	r1, [r4, #0]
 8003a00:	6063      	str	r3, [r4, #4]
 8003a02:	6054      	str	r4, [r2, #4]
 8003a04:	e7cb      	b.n	800399e <_free_r+0x22>
 8003a06:	bd38      	pop	{r3, r4, r5, pc}
 8003a08:	200002c4 	.word	0x200002c4

08003a0c <sbrk_aligned>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	4e0f      	ldr	r6, [pc, #60]	@ (8003a4c <sbrk_aligned+0x40>)
 8003a10:	460c      	mov	r4, r1
 8003a12:	6831      	ldr	r1, [r6, #0]
 8003a14:	4605      	mov	r5, r0
 8003a16:	b911      	cbnz	r1, 8003a1e <sbrk_aligned+0x12>
 8003a18:	f000 fba8 	bl	800416c <_sbrk_r>
 8003a1c:	6030      	str	r0, [r6, #0]
 8003a1e:	4621      	mov	r1, r4
 8003a20:	4628      	mov	r0, r5
 8003a22:	f000 fba3 	bl	800416c <_sbrk_r>
 8003a26:	1c43      	adds	r3, r0, #1
 8003a28:	d103      	bne.n	8003a32 <sbrk_aligned+0x26>
 8003a2a:	f04f 34ff 	mov.w	r4, #4294967295
 8003a2e:	4620      	mov	r0, r4
 8003a30:	bd70      	pop	{r4, r5, r6, pc}
 8003a32:	1cc4      	adds	r4, r0, #3
 8003a34:	f024 0403 	bic.w	r4, r4, #3
 8003a38:	42a0      	cmp	r0, r4
 8003a3a:	d0f8      	beq.n	8003a2e <sbrk_aligned+0x22>
 8003a3c:	1a21      	subs	r1, r4, r0
 8003a3e:	4628      	mov	r0, r5
 8003a40:	f000 fb94 	bl	800416c <_sbrk_r>
 8003a44:	3001      	adds	r0, #1
 8003a46:	d1f2      	bne.n	8003a2e <sbrk_aligned+0x22>
 8003a48:	e7ef      	b.n	8003a2a <sbrk_aligned+0x1e>
 8003a4a:	bf00      	nop
 8003a4c:	200002c0 	.word	0x200002c0

08003a50 <_malloc_r>:
 8003a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a54:	1ccd      	adds	r5, r1, #3
 8003a56:	f025 0503 	bic.w	r5, r5, #3
 8003a5a:	3508      	adds	r5, #8
 8003a5c:	2d0c      	cmp	r5, #12
 8003a5e:	bf38      	it	cc
 8003a60:	250c      	movcc	r5, #12
 8003a62:	2d00      	cmp	r5, #0
 8003a64:	4606      	mov	r6, r0
 8003a66:	db01      	blt.n	8003a6c <_malloc_r+0x1c>
 8003a68:	42a9      	cmp	r1, r5
 8003a6a:	d904      	bls.n	8003a76 <_malloc_r+0x26>
 8003a6c:	230c      	movs	r3, #12
 8003a6e:	6033      	str	r3, [r6, #0]
 8003a70:	2000      	movs	r0, #0
 8003a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b4c <_malloc_r+0xfc>
 8003a7a:	f000 f869 	bl	8003b50 <__malloc_lock>
 8003a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a82:	461c      	mov	r4, r3
 8003a84:	bb44      	cbnz	r4, 8003ad8 <_malloc_r+0x88>
 8003a86:	4629      	mov	r1, r5
 8003a88:	4630      	mov	r0, r6
 8003a8a:	f7ff ffbf 	bl	8003a0c <sbrk_aligned>
 8003a8e:	1c43      	adds	r3, r0, #1
 8003a90:	4604      	mov	r4, r0
 8003a92:	d158      	bne.n	8003b46 <_malloc_r+0xf6>
 8003a94:	f8d8 4000 	ldr.w	r4, [r8]
 8003a98:	4627      	mov	r7, r4
 8003a9a:	2f00      	cmp	r7, #0
 8003a9c:	d143      	bne.n	8003b26 <_malloc_r+0xd6>
 8003a9e:	2c00      	cmp	r4, #0
 8003aa0:	d04b      	beq.n	8003b3a <_malloc_r+0xea>
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	4639      	mov	r1, r7
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	eb04 0903 	add.w	r9, r4, r3
 8003aac:	f000 fb5e 	bl	800416c <_sbrk_r>
 8003ab0:	4581      	cmp	r9, r0
 8003ab2:	d142      	bne.n	8003b3a <_malloc_r+0xea>
 8003ab4:	6821      	ldr	r1, [r4, #0]
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	1a6d      	subs	r5, r5, r1
 8003aba:	4629      	mov	r1, r5
 8003abc:	f7ff ffa6 	bl	8003a0c <sbrk_aligned>
 8003ac0:	3001      	adds	r0, #1
 8003ac2:	d03a      	beq.n	8003b3a <_malloc_r+0xea>
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	442b      	add	r3, r5
 8003ac8:	6023      	str	r3, [r4, #0]
 8003aca:	f8d8 3000 	ldr.w	r3, [r8]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	bb62      	cbnz	r2, 8003b2c <_malloc_r+0xdc>
 8003ad2:	f8c8 7000 	str.w	r7, [r8]
 8003ad6:	e00f      	b.n	8003af8 <_malloc_r+0xa8>
 8003ad8:	6822      	ldr	r2, [r4, #0]
 8003ada:	1b52      	subs	r2, r2, r5
 8003adc:	d420      	bmi.n	8003b20 <_malloc_r+0xd0>
 8003ade:	2a0b      	cmp	r2, #11
 8003ae0:	d917      	bls.n	8003b12 <_malloc_r+0xc2>
 8003ae2:	1961      	adds	r1, r4, r5
 8003ae4:	42a3      	cmp	r3, r4
 8003ae6:	6025      	str	r5, [r4, #0]
 8003ae8:	bf18      	it	ne
 8003aea:	6059      	strne	r1, [r3, #4]
 8003aec:	6863      	ldr	r3, [r4, #4]
 8003aee:	bf08      	it	eq
 8003af0:	f8c8 1000 	streq.w	r1, [r8]
 8003af4:	5162      	str	r2, [r4, r5]
 8003af6:	604b      	str	r3, [r1, #4]
 8003af8:	4630      	mov	r0, r6
 8003afa:	f000 f82f 	bl	8003b5c <__malloc_unlock>
 8003afe:	f104 000b 	add.w	r0, r4, #11
 8003b02:	1d23      	adds	r3, r4, #4
 8003b04:	f020 0007 	bic.w	r0, r0, #7
 8003b08:	1ac2      	subs	r2, r0, r3
 8003b0a:	bf1c      	itt	ne
 8003b0c:	1a1b      	subne	r3, r3, r0
 8003b0e:	50a3      	strne	r3, [r4, r2]
 8003b10:	e7af      	b.n	8003a72 <_malloc_r+0x22>
 8003b12:	6862      	ldr	r2, [r4, #4]
 8003b14:	42a3      	cmp	r3, r4
 8003b16:	bf0c      	ite	eq
 8003b18:	f8c8 2000 	streq.w	r2, [r8]
 8003b1c:	605a      	strne	r2, [r3, #4]
 8003b1e:	e7eb      	b.n	8003af8 <_malloc_r+0xa8>
 8003b20:	4623      	mov	r3, r4
 8003b22:	6864      	ldr	r4, [r4, #4]
 8003b24:	e7ae      	b.n	8003a84 <_malloc_r+0x34>
 8003b26:	463c      	mov	r4, r7
 8003b28:	687f      	ldr	r7, [r7, #4]
 8003b2a:	e7b6      	b.n	8003a9a <_malloc_r+0x4a>
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	42a3      	cmp	r3, r4
 8003b32:	d1fb      	bne.n	8003b2c <_malloc_r+0xdc>
 8003b34:	2300      	movs	r3, #0
 8003b36:	6053      	str	r3, [r2, #4]
 8003b38:	e7de      	b.n	8003af8 <_malloc_r+0xa8>
 8003b3a:	230c      	movs	r3, #12
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	6033      	str	r3, [r6, #0]
 8003b40:	f000 f80c 	bl	8003b5c <__malloc_unlock>
 8003b44:	e794      	b.n	8003a70 <_malloc_r+0x20>
 8003b46:	6005      	str	r5, [r0, #0]
 8003b48:	e7d6      	b.n	8003af8 <_malloc_r+0xa8>
 8003b4a:	bf00      	nop
 8003b4c:	200002c4 	.word	0x200002c4

08003b50 <__malloc_lock>:
 8003b50:	4801      	ldr	r0, [pc, #4]	@ (8003b58 <__malloc_lock+0x8>)
 8003b52:	f7ff bf11 	b.w	8003978 <__retarget_lock_acquire_recursive>
 8003b56:	bf00      	nop
 8003b58:	200002bc 	.word	0x200002bc

08003b5c <__malloc_unlock>:
 8003b5c:	4801      	ldr	r0, [pc, #4]	@ (8003b64 <__malloc_unlock+0x8>)
 8003b5e:	f7ff bf0c 	b.w	800397a <__retarget_lock_release_recursive>
 8003b62:	bf00      	nop
 8003b64:	200002bc 	.word	0x200002bc

08003b68 <__ssputs_r>:
 8003b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b6c:	461f      	mov	r7, r3
 8003b6e:	688e      	ldr	r6, [r1, #8]
 8003b70:	4682      	mov	sl, r0
 8003b72:	42be      	cmp	r6, r7
 8003b74:	460c      	mov	r4, r1
 8003b76:	4690      	mov	r8, r2
 8003b78:	680b      	ldr	r3, [r1, #0]
 8003b7a:	d82d      	bhi.n	8003bd8 <__ssputs_r+0x70>
 8003b7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b84:	d026      	beq.n	8003bd4 <__ssputs_r+0x6c>
 8003b86:	6965      	ldr	r5, [r4, #20]
 8003b88:	6909      	ldr	r1, [r1, #16]
 8003b8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b8e:	eba3 0901 	sub.w	r9, r3, r1
 8003b92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b96:	1c7b      	adds	r3, r7, #1
 8003b98:	444b      	add	r3, r9
 8003b9a:	106d      	asrs	r5, r5, #1
 8003b9c:	429d      	cmp	r5, r3
 8003b9e:	bf38      	it	cc
 8003ba0:	461d      	movcc	r5, r3
 8003ba2:	0553      	lsls	r3, r2, #21
 8003ba4:	d527      	bpl.n	8003bf6 <__ssputs_r+0x8e>
 8003ba6:	4629      	mov	r1, r5
 8003ba8:	f7ff ff52 	bl	8003a50 <_malloc_r>
 8003bac:	4606      	mov	r6, r0
 8003bae:	b360      	cbz	r0, 8003c0a <__ssputs_r+0xa2>
 8003bb0:	464a      	mov	r2, r9
 8003bb2:	6921      	ldr	r1, [r4, #16]
 8003bb4:	f000 faf8 	bl	80041a8 <memcpy>
 8003bb8:	89a3      	ldrh	r3, [r4, #12]
 8003bba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bc2:	81a3      	strh	r3, [r4, #12]
 8003bc4:	6126      	str	r6, [r4, #16]
 8003bc6:	444e      	add	r6, r9
 8003bc8:	6026      	str	r6, [r4, #0]
 8003bca:	463e      	mov	r6, r7
 8003bcc:	6165      	str	r5, [r4, #20]
 8003bce:	eba5 0509 	sub.w	r5, r5, r9
 8003bd2:	60a5      	str	r5, [r4, #8]
 8003bd4:	42be      	cmp	r6, r7
 8003bd6:	d900      	bls.n	8003bda <__ssputs_r+0x72>
 8003bd8:	463e      	mov	r6, r7
 8003bda:	4632      	mov	r2, r6
 8003bdc:	4641      	mov	r1, r8
 8003bde:	6820      	ldr	r0, [r4, #0]
 8003be0:	f000 faaa 	bl	8004138 <memmove>
 8003be4:	2000      	movs	r0, #0
 8003be6:	68a3      	ldr	r3, [r4, #8]
 8003be8:	1b9b      	subs	r3, r3, r6
 8003bea:	60a3      	str	r3, [r4, #8]
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	4433      	add	r3, r6
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf6:	462a      	mov	r2, r5
 8003bf8:	f000 fae4 	bl	80041c4 <_realloc_r>
 8003bfc:	4606      	mov	r6, r0
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	d1e0      	bne.n	8003bc4 <__ssputs_r+0x5c>
 8003c02:	4650      	mov	r0, sl
 8003c04:	6921      	ldr	r1, [r4, #16]
 8003c06:	f7ff feb9 	bl	800397c <_free_r>
 8003c0a:	230c      	movs	r3, #12
 8003c0c:	f8ca 3000 	str.w	r3, [sl]
 8003c10:	89a3      	ldrh	r3, [r4, #12]
 8003c12:	f04f 30ff 	mov.w	r0, #4294967295
 8003c16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c1a:	81a3      	strh	r3, [r4, #12]
 8003c1c:	e7e9      	b.n	8003bf2 <__ssputs_r+0x8a>
	...

08003c20 <_svfiprintf_r>:
 8003c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c24:	4698      	mov	r8, r3
 8003c26:	898b      	ldrh	r3, [r1, #12]
 8003c28:	4607      	mov	r7, r0
 8003c2a:	061b      	lsls	r3, r3, #24
 8003c2c:	460d      	mov	r5, r1
 8003c2e:	4614      	mov	r4, r2
 8003c30:	b09d      	sub	sp, #116	@ 0x74
 8003c32:	d510      	bpl.n	8003c56 <_svfiprintf_r+0x36>
 8003c34:	690b      	ldr	r3, [r1, #16]
 8003c36:	b973      	cbnz	r3, 8003c56 <_svfiprintf_r+0x36>
 8003c38:	2140      	movs	r1, #64	@ 0x40
 8003c3a:	f7ff ff09 	bl	8003a50 <_malloc_r>
 8003c3e:	6028      	str	r0, [r5, #0]
 8003c40:	6128      	str	r0, [r5, #16]
 8003c42:	b930      	cbnz	r0, 8003c52 <_svfiprintf_r+0x32>
 8003c44:	230c      	movs	r3, #12
 8003c46:	603b      	str	r3, [r7, #0]
 8003c48:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4c:	b01d      	add	sp, #116	@ 0x74
 8003c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c52:	2340      	movs	r3, #64	@ 0x40
 8003c54:	616b      	str	r3, [r5, #20]
 8003c56:	2300      	movs	r3, #0
 8003c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c5a:	2320      	movs	r3, #32
 8003c5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c60:	2330      	movs	r3, #48	@ 0x30
 8003c62:	f04f 0901 	mov.w	r9, #1
 8003c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c6a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003e04 <_svfiprintf_r+0x1e4>
 8003c6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c72:	4623      	mov	r3, r4
 8003c74:	469a      	mov	sl, r3
 8003c76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c7a:	b10a      	cbz	r2, 8003c80 <_svfiprintf_r+0x60>
 8003c7c:	2a25      	cmp	r2, #37	@ 0x25
 8003c7e:	d1f9      	bne.n	8003c74 <_svfiprintf_r+0x54>
 8003c80:	ebba 0b04 	subs.w	fp, sl, r4
 8003c84:	d00b      	beq.n	8003c9e <_svfiprintf_r+0x7e>
 8003c86:	465b      	mov	r3, fp
 8003c88:	4622      	mov	r2, r4
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	4638      	mov	r0, r7
 8003c8e:	f7ff ff6b 	bl	8003b68 <__ssputs_r>
 8003c92:	3001      	adds	r0, #1
 8003c94:	f000 80a7 	beq.w	8003de6 <_svfiprintf_r+0x1c6>
 8003c98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c9a:	445a      	add	r2, fp
 8003c9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 809f 	beq.w	8003de6 <_svfiprintf_r+0x1c6>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f04f 32ff 	mov.w	r2, #4294967295
 8003cae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cb2:	f10a 0a01 	add.w	sl, sl, #1
 8003cb6:	9304      	str	r3, [sp, #16]
 8003cb8:	9307      	str	r3, [sp, #28]
 8003cba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003cbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8003cc0:	4654      	mov	r4, sl
 8003cc2:	2205      	movs	r2, #5
 8003cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cc8:	484e      	ldr	r0, [pc, #312]	@ (8003e04 <_svfiprintf_r+0x1e4>)
 8003cca:	f000 fa5f 	bl	800418c <memchr>
 8003cce:	9a04      	ldr	r2, [sp, #16]
 8003cd0:	b9d8      	cbnz	r0, 8003d0a <_svfiprintf_r+0xea>
 8003cd2:	06d0      	lsls	r0, r2, #27
 8003cd4:	bf44      	itt	mi
 8003cd6:	2320      	movmi	r3, #32
 8003cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003cdc:	0711      	lsls	r1, r2, #28
 8003cde:	bf44      	itt	mi
 8003ce0:	232b      	movmi	r3, #43	@ 0x2b
 8003ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8003cea:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cec:	d015      	beq.n	8003d1a <_svfiprintf_r+0xfa>
 8003cee:	4654      	mov	r4, sl
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f04f 0c0a 	mov.w	ip, #10
 8003cf6:	9a07      	ldr	r2, [sp, #28]
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cfe:	3b30      	subs	r3, #48	@ 0x30
 8003d00:	2b09      	cmp	r3, #9
 8003d02:	d94b      	bls.n	8003d9c <_svfiprintf_r+0x17c>
 8003d04:	b1b0      	cbz	r0, 8003d34 <_svfiprintf_r+0x114>
 8003d06:	9207      	str	r2, [sp, #28]
 8003d08:	e014      	b.n	8003d34 <_svfiprintf_r+0x114>
 8003d0a:	eba0 0308 	sub.w	r3, r0, r8
 8003d0e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d12:	4313      	orrs	r3, r2
 8003d14:	46a2      	mov	sl, r4
 8003d16:	9304      	str	r3, [sp, #16]
 8003d18:	e7d2      	b.n	8003cc0 <_svfiprintf_r+0xa0>
 8003d1a:	9b03      	ldr	r3, [sp, #12]
 8003d1c:	1d19      	adds	r1, r3, #4
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	9103      	str	r1, [sp, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bfbb      	ittet	lt
 8003d26:	425b      	neglt	r3, r3
 8003d28:	f042 0202 	orrlt.w	r2, r2, #2
 8003d2c:	9307      	strge	r3, [sp, #28]
 8003d2e:	9307      	strlt	r3, [sp, #28]
 8003d30:	bfb8      	it	lt
 8003d32:	9204      	strlt	r2, [sp, #16]
 8003d34:	7823      	ldrb	r3, [r4, #0]
 8003d36:	2b2e      	cmp	r3, #46	@ 0x2e
 8003d38:	d10a      	bne.n	8003d50 <_svfiprintf_r+0x130>
 8003d3a:	7863      	ldrb	r3, [r4, #1]
 8003d3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d3e:	d132      	bne.n	8003da6 <_svfiprintf_r+0x186>
 8003d40:	9b03      	ldr	r3, [sp, #12]
 8003d42:	3402      	adds	r4, #2
 8003d44:	1d1a      	adds	r2, r3, #4
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	9203      	str	r2, [sp, #12]
 8003d4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003d4e:	9305      	str	r3, [sp, #20]
 8003d50:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003e08 <_svfiprintf_r+0x1e8>
 8003d54:	2203      	movs	r2, #3
 8003d56:	4650      	mov	r0, sl
 8003d58:	7821      	ldrb	r1, [r4, #0]
 8003d5a:	f000 fa17 	bl	800418c <memchr>
 8003d5e:	b138      	cbz	r0, 8003d70 <_svfiprintf_r+0x150>
 8003d60:	2240      	movs	r2, #64	@ 0x40
 8003d62:	9b04      	ldr	r3, [sp, #16]
 8003d64:	eba0 000a 	sub.w	r0, r0, sl
 8003d68:	4082      	lsls	r2, r0
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	3401      	adds	r4, #1
 8003d6e:	9304      	str	r3, [sp, #16]
 8003d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d74:	2206      	movs	r2, #6
 8003d76:	4825      	ldr	r0, [pc, #148]	@ (8003e0c <_svfiprintf_r+0x1ec>)
 8003d78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d7c:	f000 fa06 	bl	800418c <memchr>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d036      	beq.n	8003df2 <_svfiprintf_r+0x1d2>
 8003d84:	4b22      	ldr	r3, [pc, #136]	@ (8003e10 <_svfiprintf_r+0x1f0>)
 8003d86:	bb1b      	cbnz	r3, 8003dd0 <_svfiprintf_r+0x1b0>
 8003d88:	9b03      	ldr	r3, [sp, #12]
 8003d8a:	3307      	adds	r3, #7
 8003d8c:	f023 0307 	bic.w	r3, r3, #7
 8003d90:	3308      	adds	r3, #8
 8003d92:	9303      	str	r3, [sp, #12]
 8003d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d96:	4433      	add	r3, r6
 8003d98:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d9a:	e76a      	b.n	8003c72 <_svfiprintf_r+0x52>
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	2001      	movs	r0, #1
 8003da0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003da4:	e7a8      	b.n	8003cf8 <_svfiprintf_r+0xd8>
 8003da6:	2300      	movs	r3, #0
 8003da8:	f04f 0c0a 	mov.w	ip, #10
 8003dac:	4619      	mov	r1, r3
 8003dae:	3401      	adds	r4, #1
 8003db0:	9305      	str	r3, [sp, #20]
 8003db2:	4620      	mov	r0, r4
 8003db4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003db8:	3a30      	subs	r2, #48	@ 0x30
 8003dba:	2a09      	cmp	r2, #9
 8003dbc:	d903      	bls.n	8003dc6 <_svfiprintf_r+0x1a6>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0c6      	beq.n	8003d50 <_svfiprintf_r+0x130>
 8003dc2:	9105      	str	r1, [sp, #20]
 8003dc4:	e7c4      	b.n	8003d50 <_svfiprintf_r+0x130>
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	2301      	movs	r3, #1
 8003dca:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dce:	e7f0      	b.n	8003db2 <_svfiprintf_r+0x192>
 8003dd0:	ab03      	add	r3, sp, #12
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	462a      	mov	r2, r5
 8003dd6:	4638      	mov	r0, r7
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003e14 <_svfiprintf_r+0x1f4>)
 8003dda:	a904      	add	r1, sp, #16
 8003ddc:	f3af 8000 	nop.w
 8003de0:	1c42      	adds	r2, r0, #1
 8003de2:	4606      	mov	r6, r0
 8003de4:	d1d6      	bne.n	8003d94 <_svfiprintf_r+0x174>
 8003de6:	89ab      	ldrh	r3, [r5, #12]
 8003de8:	065b      	lsls	r3, r3, #25
 8003dea:	f53f af2d 	bmi.w	8003c48 <_svfiprintf_r+0x28>
 8003dee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003df0:	e72c      	b.n	8003c4c <_svfiprintf_r+0x2c>
 8003df2:	ab03      	add	r3, sp, #12
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	462a      	mov	r2, r5
 8003df8:	4638      	mov	r0, r7
 8003dfa:	4b06      	ldr	r3, [pc, #24]	@ (8003e14 <_svfiprintf_r+0x1f4>)
 8003dfc:	a904      	add	r1, sp, #16
 8003dfe:	f000 f87d 	bl	8003efc <_printf_i>
 8003e02:	e7ed      	b.n	8003de0 <_svfiprintf_r+0x1c0>
 8003e04:	08004578 	.word	0x08004578
 8003e08:	0800457e 	.word	0x0800457e
 8003e0c:	08004582 	.word	0x08004582
 8003e10:	00000000 	.word	0x00000000
 8003e14:	08003b69 	.word	0x08003b69

08003e18 <_printf_common>:
 8003e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e1c:	4616      	mov	r6, r2
 8003e1e:	4698      	mov	r8, r3
 8003e20:	688a      	ldr	r2, [r1, #8]
 8003e22:	690b      	ldr	r3, [r1, #16]
 8003e24:	4607      	mov	r7, r0
 8003e26:	4293      	cmp	r3, r2
 8003e28:	bfb8      	it	lt
 8003e2a:	4613      	movlt	r3, r2
 8003e2c:	6033      	str	r3, [r6, #0]
 8003e2e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e32:	460c      	mov	r4, r1
 8003e34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e38:	b10a      	cbz	r2, 8003e3e <_printf_common+0x26>
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	6033      	str	r3, [r6, #0]
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	0699      	lsls	r1, r3, #26
 8003e42:	bf42      	ittt	mi
 8003e44:	6833      	ldrmi	r3, [r6, #0]
 8003e46:	3302      	addmi	r3, #2
 8003e48:	6033      	strmi	r3, [r6, #0]
 8003e4a:	6825      	ldr	r5, [r4, #0]
 8003e4c:	f015 0506 	ands.w	r5, r5, #6
 8003e50:	d106      	bne.n	8003e60 <_printf_common+0x48>
 8003e52:	f104 0a19 	add.w	sl, r4, #25
 8003e56:	68e3      	ldr	r3, [r4, #12]
 8003e58:	6832      	ldr	r2, [r6, #0]
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	42ab      	cmp	r3, r5
 8003e5e:	dc2b      	bgt.n	8003eb8 <_printf_common+0xa0>
 8003e60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e64:	6822      	ldr	r2, [r4, #0]
 8003e66:	3b00      	subs	r3, #0
 8003e68:	bf18      	it	ne
 8003e6a:	2301      	movne	r3, #1
 8003e6c:	0692      	lsls	r2, r2, #26
 8003e6e:	d430      	bmi.n	8003ed2 <_printf_common+0xba>
 8003e70:	4641      	mov	r1, r8
 8003e72:	4638      	mov	r0, r7
 8003e74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e78:	47c8      	blx	r9
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	d023      	beq.n	8003ec6 <_printf_common+0xae>
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	6922      	ldr	r2, [r4, #16]
 8003e82:	f003 0306 	and.w	r3, r3, #6
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	bf14      	ite	ne
 8003e8a:	2500      	movne	r5, #0
 8003e8c:	6833      	ldreq	r3, [r6, #0]
 8003e8e:	f04f 0600 	mov.w	r6, #0
 8003e92:	bf08      	it	eq
 8003e94:	68e5      	ldreq	r5, [r4, #12]
 8003e96:	f104 041a 	add.w	r4, r4, #26
 8003e9a:	bf08      	it	eq
 8003e9c:	1aed      	subeq	r5, r5, r3
 8003e9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003ea2:	bf08      	it	eq
 8003ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	bfc4      	itt	gt
 8003eac:	1a9b      	subgt	r3, r3, r2
 8003eae:	18ed      	addgt	r5, r5, r3
 8003eb0:	42b5      	cmp	r5, r6
 8003eb2:	d11a      	bne.n	8003eea <_printf_common+0xd2>
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	e008      	b.n	8003eca <_printf_common+0xb2>
 8003eb8:	2301      	movs	r3, #1
 8003eba:	4652      	mov	r2, sl
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	47c8      	blx	r9
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	d103      	bne.n	8003ece <_printf_common+0xb6>
 8003ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ece:	3501      	adds	r5, #1
 8003ed0:	e7c1      	b.n	8003e56 <_printf_common+0x3e>
 8003ed2:	2030      	movs	r0, #48	@ 0x30
 8003ed4:	18e1      	adds	r1, r4, r3
 8003ed6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ee0:	4422      	add	r2, r4
 8003ee2:	3302      	adds	r3, #2
 8003ee4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ee8:	e7c2      	b.n	8003e70 <_printf_common+0x58>
 8003eea:	2301      	movs	r3, #1
 8003eec:	4622      	mov	r2, r4
 8003eee:	4641      	mov	r1, r8
 8003ef0:	4638      	mov	r0, r7
 8003ef2:	47c8      	blx	r9
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	d0e6      	beq.n	8003ec6 <_printf_common+0xae>
 8003ef8:	3601      	adds	r6, #1
 8003efa:	e7d9      	b.n	8003eb0 <_printf_common+0x98>

08003efc <_printf_i>:
 8003efc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f00:	7e0f      	ldrb	r7, [r1, #24]
 8003f02:	4691      	mov	r9, r2
 8003f04:	2f78      	cmp	r7, #120	@ 0x78
 8003f06:	4680      	mov	r8, r0
 8003f08:	460c      	mov	r4, r1
 8003f0a:	469a      	mov	sl, r3
 8003f0c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f12:	d807      	bhi.n	8003f24 <_printf_i+0x28>
 8003f14:	2f62      	cmp	r7, #98	@ 0x62
 8003f16:	d80a      	bhi.n	8003f2e <_printf_i+0x32>
 8003f18:	2f00      	cmp	r7, #0
 8003f1a:	f000 80d1 	beq.w	80040c0 <_printf_i+0x1c4>
 8003f1e:	2f58      	cmp	r7, #88	@ 0x58
 8003f20:	f000 80b8 	beq.w	8004094 <_printf_i+0x198>
 8003f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f2c:	e03a      	b.n	8003fa4 <_printf_i+0xa8>
 8003f2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f32:	2b15      	cmp	r3, #21
 8003f34:	d8f6      	bhi.n	8003f24 <_printf_i+0x28>
 8003f36:	a101      	add	r1, pc, #4	@ (adr r1, 8003f3c <_printf_i+0x40>)
 8003f38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f3c:	08003f95 	.word	0x08003f95
 8003f40:	08003fa9 	.word	0x08003fa9
 8003f44:	08003f25 	.word	0x08003f25
 8003f48:	08003f25 	.word	0x08003f25
 8003f4c:	08003f25 	.word	0x08003f25
 8003f50:	08003f25 	.word	0x08003f25
 8003f54:	08003fa9 	.word	0x08003fa9
 8003f58:	08003f25 	.word	0x08003f25
 8003f5c:	08003f25 	.word	0x08003f25
 8003f60:	08003f25 	.word	0x08003f25
 8003f64:	08003f25 	.word	0x08003f25
 8003f68:	080040a7 	.word	0x080040a7
 8003f6c:	08003fd3 	.word	0x08003fd3
 8003f70:	08004061 	.word	0x08004061
 8003f74:	08003f25 	.word	0x08003f25
 8003f78:	08003f25 	.word	0x08003f25
 8003f7c:	080040c9 	.word	0x080040c9
 8003f80:	08003f25 	.word	0x08003f25
 8003f84:	08003fd3 	.word	0x08003fd3
 8003f88:	08003f25 	.word	0x08003f25
 8003f8c:	08003f25 	.word	0x08003f25
 8003f90:	08004069 	.word	0x08004069
 8003f94:	6833      	ldr	r3, [r6, #0]
 8003f96:	1d1a      	adds	r2, r3, #4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6032      	str	r2, [r6, #0]
 8003f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e09c      	b.n	80040e2 <_printf_i+0x1e6>
 8003fa8:	6833      	ldr	r3, [r6, #0]
 8003faa:	6820      	ldr	r0, [r4, #0]
 8003fac:	1d19      	adds	r1, r3, #4
 8003fae:	6031      	str	r1, [r6, #0]
 8003fb0:	0606      	lsls	r6, r0, #24
 8003fb2:	d501      	bpl.n	8003fb8 <_printf_i+0xbc>
 8003fb4:	681d      	ldr	r5, [r3, #0]
 8003fb6:	e003      	b.n	8003fc0 <_printf_i+0xc4>
 8003fb8:	0645      	lsls	r5, r0, #25
 8003fba:	d5fb      	bpl.n	8003fb4 <_printf_i+0xb8>
 8003fbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fc0:	2d00      	cmp	r5, #0
 8003fc2:	da03      	bge.n	8003fcc <_printf_i+0xd0>
 8003fc4:	232d      	movs	r3, #45	@ 0x2d
 8003fc6:	426d      	negs	r5, r5
 8003fc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fcc:	230a      	movs	r3, #10
 8003fce:	4858      	ldr	r0, [pc, #352]	@ (8004130 <_printf_i+0x234>)
 8003fd0:	e011      	b.n	8003ff6 <_printf_i+0xfa>
 8003fd2:	6821      	ldr	r1, [r4, #0]
 8003fd4:	6833      	ldr	r3, [r6, #0]
 8003fd6:	0608      	lsls	r0, r1, #24
 8003fd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fdc:	d402      	bmi.n	8003fe4 <_printf_i+0xe8>
 8003fde:	0649      	lsls	r1, r1, #25
 8003fe0:	bf48      	it	mi
 8003fe2:	b2ad      	uxthmi	r5, r5
 8003fe4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fe6:	6033      	str	r3, [r6, #0]
 8003fe8:	bf14      	ite	ne
 8003fea:	230a      	movne	r3, #10
 8003fec:	2308      	moveq	r3, #8
 8003fee:	4850      	ldr	r0, [pc, #320]	@ (8004130 <_printf_i+0x234>)
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ff6:	6866      	ldr	r6, [r4, #4]
 8003ff8:	2e00      	cmp	r6, #0
 8003ffa:	60a6      	str	r6, [r4, #8]
 8003ffc:	db05      	blt.n	800400a <_printf_i+0x10e>
 8003ffe:	6821      	ldr	r1, [r4, #0]
 8004000:	432e      	orrs	r6, r5
 8004002:	f021 0104 	bic.w	r1, r1, #4
 8004006:	6021      	str	r1, [r4, #0]
 8004008:	d04b      	beq.n	80040a2 <_printf_i+0x1a6>
 800400a:	4616      	mov	r6, r2
 800400c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004010:	fb03 5711 	mls	r7, r3, r1, r5
 8004014:	5dc7      	ldrb	r7, [r0, r7]
 8004016:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800401a:	462f      	mov	r7, r5
 800401c:	42bb      	cmp	r3, r7
 800401e:	460d      	mov	r5, r1
 8004020:	d9f4      	bls.n	800400c <_printf_i+0x110>
 8004022:	2b08      	cmp	r3, #8
 8004024:	d10b      	bne.n	800403e <_printf_i+0x142>
 8004026:	6823      	ldr	r3, [r4, #0]
 8004028:	07df      	lsls	r7, r3, #31
 800402a:	d508      	bpl.n	800403e <_printf_i+0x142>
 800402c:	6923      	ldr	r3, [r4, #16]
 800402e:	6861      	ldr	r1, [r4, #4]
 8004030:	4299      	cmp	r1, r3
 8004032:	bfde      	ittt	le
 8004034:	2330      	movle	r3, #48	@ 0x30
 8004036:	f806 3c01 	strble.w	r3, [r6, #-1]
 800403a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800403e:	1b92      	subs	r2, r2, r6
 8004040:	6122      	str	r2, [r4, #16]
 8004042:	464b      	mov	r3, r9
 8004044:	4621      	mov	r1, r4
 8004046:	4640      	mov	r0, r8
 8004048:	f8cd a000 	str.w	sl, [sp]
 800404c:	aa03      	add	r2, sp, #12
 800404e:	f7ff fee3 	bl	8003e18 <_printf_common>
 8004052:	3001      	adds	r0, #1
 8004054:	d14a      	bne.n	80040ec <_printf_i+0x1f0>
 8004056:	f04f 30ff 	mov.w	r0, #4294967295
 800405a:	b004      	add	sp, #16
 800405c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	f043 0320 	orr.w	r3, r3, #32
 8004066:	6023      	str	r3, [r4, #0]
 8004068:	2778      	movs	r7, #120	@ 0x78
 800406a:	4832      	ldr	r0, [pc, #200]	@ (8004134 <_printf_i+0x238>)
 800406c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	6831      	ldr	r1, [r6, #0]
 8004074:	061f      	lsls	r7, r3, #24
 8004076:	f851 5b04 	ldr.w	r5, [r1], #4
 800407a:	d402      	bmi.n	8004082 <_printf_i+0x186>
 800407c:	065f      	lsls	r7, r3, #25
 800407e:	bf48      	it	mi
 8004080:	b2ad      	uxthmi	r5, r5
 8004082:	6031      	str	r1, [r6, #0]
 8004084:	07d9      	lsls	r1, r3, #31
 8004086:	bf44      	itt	mi
 8004088:	f043 0320 	orrmi.w	r3, r3, #32
 800408c:	6023      	strmi	r3, [r4, #0]
 800408e:	b11d      	cbz	r5, 8004098 <_printf_i+0x19c>
 8004090:	2310      	movs	r3, #16
 8004092:	e7ad      	b.n	8003ff0 <_printf_i+0xf4>
 8004094:	4826      	ldr	r0, [pc, #152]	@ (8004130 <_printf_i+0x234>)
 8004096:	e7e9      	b.n	800406c <_printf_i+0x170>
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	f023 0320 	bic.w	r3, r3, #32
 800409e:	6023      	str	r3, [r4, #0]
 80040a0:	e7f6      	b.n	8004090 <_printf_i+0x194>
 80040a2:	4616      	mov	r6, r2
 80040a4:	e7bd      	b.n	8004022 <_printf_i+0x126>
 80040a6:	6833      	ldr	r3, [r6, #0]
 80040a8:	6825      	ldr	r5, [r4, #0]
 80040aa:	1d18      	adds	r0, r3, #4
 80040ac:	6961      	ldr	r1, [r4, #20]
 80040ae:	6030      	str	r0, [r6, #0]
 80040b0:	062e      	lsls	r6, r5, #24
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	d501      	bpl.n	80040ba <_printf_i+0x1be>
 80040b6:	6019      	str	r1, [r3, #0]
 80040b8:	e002      	b.n	80040c0 <_printf_i+0x1c4>
 80040ba:	0668      	lsls	r0, r5, #25
 80040bc:	d5fb      	bpl.n	80040b6 <_printf_i+0x1ba>
 80040be:	8019      	strh	r1, [r3, #0]
 80040c0:	2300      	movs	r3, #0
 80040c2:	4616      	mov	r6, r2
 80040c4:	6123      	str	r3, [r4, #16]
 80040c6:	e7bc      	b.n	8004042 <_printf_i+0x146>
 80040c8:	6833      	ldr	r3, [r6, #0]
 80040ca:	2100      	movs	r1, #0
 80040cc:	1d1a      	adds	r2, r3, #4
 80040ce:	6032      	str	r2, [r6, #0]
 80040d0:	681e      	ldr	r6, [r3, #0]
 80040d2:	6862      	ldr	r2, [r4, #4]
 80040d4:	4630      	mov	r0, r6
 80040d6:	f000 f859 	bl	800418c <memchr>
 80040da:	b108      	cbz	r0, 80040e0 <_printf_i+0x1e4>
 80040dc:	1b80      	subs	r0, r0, r6
 80040de:	6060      	str	r0, [r4, #4]
 80040e0:	6863      	ldr	r3, [r4, #4]
 80040e2:	6123      	str	r3, [r4, #16]
 80040e4:	2300      	movs	r3, #0
 80040e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040ea:	e7aa      	b.n	8004042 <_printf_i+0x146>
 80040ec:	4632      	mov	r2, r6
 80040ee:	4649      	mov	r1, r9
 80040f0:	4640      	mov	r0, r8
 80040f2:	6923      	ldr	r3, [r4, #16]
 80040f4:	47d0      	blx	sl
 80040f6:	3001      	adds	r0, #1
 80040f8:	d0ad      	beq.n	8004056 <_printf_i+0x15a>
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	079b      	lsls	r3, r3, #30
 80040fe:	d413      	bmi.n	8004128 <_printf_i+0x22c>
 8004100:	68e0      	ldr	r0, [r4, #12]
 8004102:	9b03      	ldr	r3, [sp, #12]
 8004104:	4298      	cmp	r0, r3
 8004106:	bfb8      	it	lt
 8004108:	4618      	movlt	r0, r3
 800410a:	e7a6      	b.n	800405a <_printf_i+0x15e>
 800410c:	2301      	movs	r3, #1
 800410e:	4632      	mov	r2, r6
 8004110:	4649      	mov	r1, r9
 8004112:	4640      	mov	r0, r8
 8004114:	47d0      	blx	sl
 8004116:	3001      	adds	r0, #1
 8004118:	d09d      	beq.n	8004056 <_printf_i+0x15a>
 800411a:	3501      	adds	r5, #1
 800411c:	68e3      	ldr	r3, [r4, #12]
 800411e:	9903      	ldr	r1, [sp, #12]
 8004120:	1a5b      	subs	r3, r3, r1
 8004122:	42ab      	cmp	r3, r5
 8004124:	dcf2      	bgt.n	800410c <_printf_i+0x210>
 8004126:	e7eb      	b.n	8004100 <_printf_i+0x204>
 8004128:	2500      	movs	r5, #0
 800412a:	f104 0619 	add.w	r6, r4, #25
 800412e:	e7f5      	b.n	800411c <_printf_i+0x220>
 8004130:	08004589 	.word	0x08004589
 8004134:	0800459a 	.word	0x0800459a

08004138 <memmove>:
 8004138:	4288      	cmp	r0, r1
 800413a:	b510      	push	{r4, lr}
 800413c:	eb01 0402 	add.w	r4, r1, r2
 8004140:	d902      	bls.n	8004148 <memmove+0x10>
 8004142:	4284      	cmp	r4, r0
 8004144:	4623      	mov	r3, r4
 8004146:	d807      	bhi.n	8004158 <memmove+0x20>
 8004148:	1e43      	subs	r3, r0, #1
 800414a:	42a1      	cmp	r1, r4
 800414c:	d008      	beq.n	8004160 <memmove+0x28>
 800414e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004156:	e7f8      	b.n	800414a <memmove+0x12>
 8004158:	4601      	mov	r1, r0
 800415a:	4402      	add	r2, r0
 800415c:	428a      	cmp	r2, r1
 800415e:	d100      	bne.n	8004162 <memmove+0x2a>
 8004160:	bd10      	pop	{r4, pc}
 8004162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800416a:	e7f7      	b.n	800415c <memmove+0x24>

0800416c <_sbrk_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	2300      	movs	r3, #0
 8004170:	4d05      	ldr	r5, [pc, #20]	@ (8004188 <_sbrk_r+0x1c>)
 8004172:	4604      	mov	r4, r0
 8004174:	4608      	mov	r0, r1
 8004176:	602b      	str	r3, [r5, #0]
 8004178:	f7fc ff02 	bl	8000f80 <_sbrk>
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	d102      	bne.n	8004186 <_sbrk_r+0x1a>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	b103      	cbz	r3, 8004186 <_sbrk_r+0x1a>
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	200002b8 	.word	0x200002b8

0800418c <memchr>:
 800418c:	4603      	mov	r3, r0
 800418e:	b510      	push	{r4, lr}
 8004190:	b2c9      	uxtb	r1, r1
 8004192:	4402      	add	r2, r0
 8004194:	4293      	cmp	r3, r2
 8004196:	4618      	mov	r0, r3
 8004198:	d101      	bne.n	800419e <memchr+0x12>
 800419a:	2000      	movs	r0, #0
 800419c:	e003      	b.n	80041a6 <memchr+0x1a>
 800419e:	7804      	ldrb	r4, [r0, #0]
 80041a0:	3301      	adds	r3, #1
 80041a2:	428c      	cmp	r4, r1
 80041a4:	d1f6      	bne.n	8004194 <memchr+0x8>
 80041a6:	bd10      	pop	{r4, pc}

080041a8 <memcpy>:
 80041a8:	440a      	add	r2, r1
 80041aa:	4291      	cmp	r1, r2
 80041ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80041b0:	d100      	bne.n	80041b4 <memcpy+0xc>
 80041b2:	4770      	bx	lr
 80041b4:	b510      	push	{r4, lr}
 80041b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ba:	4291      	cmp	r1, r2
 80041bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041c0:	d1f9      	bne.n	80041b6 <memcpy+0xe>
 80041c2:	bd10      	pop	{r4, pc}

080041c4 <_realloc_r>:
 80041c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c8:	4607      	mov	r7, r0
 80041ca:	4614      	mov	r4, r2
 80041cc:	460d      	mov	r5, r1
 80041ce:	b921      	cbnz	r1, 80041da <_realloc_r+0x16>
 80041d0:	4611      	mov	r1, r2
 80041d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041d6:	f7ff bc3b 	b.w	8003a50 <_malloc_r>
 80041da:	b92a      	cbnz	r2, 80041e8 <_realloc_r+0x24>
 80041dc:	f7ff fbce 	bl	800397c <_free_r>
 80041e0:	4625      	mov	r5, r4
 80041e2:	4628      	mov	r0, r5
 80041e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041e8:	f000 f81a 	bl	8004220 <_malloc_usable_size_r>
 80041ec:	4284      	cmp	r4, r0
 80041ee:	4606      	mov	r6, r0
 80041f0:	d802      	bhi.n	80041f8 <_realloc_r+0x34>
 80041f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041f6:	d8f4      	bhi.n	80041e2 <_realloc_r+0x1e>
 80041f8:	4621      	mov	r1, r4
 80041fa:	4638      	mov	r0, r7
 80041fc:	f7ff fc28 	bl	8003a50 <_malloc_r>
 8004200:	4680      	mov	r8, r0
 8004202:	b908      	cbnz	r0, 8004208 <_realloc_r+0x44>
 8004204:	4645      	mov	r5, r8
 8004206:	e7ec      	b.n	80041e2 <_realloc_r+0x1e>
 8004208:	42b4      	cmp	r4, r6
 800420a:	4622      	mov	r2, r4
 800420c:	4629      	mov	r1, r5
 800420e:	bf28      	it	cs
 8004210:	4632      	movcs	r2, r6
 8004212:	f7ff ffc9 	bl	80041a8 <memcpy>
 8004216:	4629      	mov	r1, r5
 8004218:	4638      	mov	r0, r7
 800421a:	f7ff fbaf 	bl	800397c <_free_r>
 800421e:	e7f1      	b.n	8004204 <_realloc_r+0x40>

08004220 <_malloc_usable_size_r>:
 8004220:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004224:	1f18      	subs	r0, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	bfbc      	itt	lt
 800422a:	580b      	ldrlt	r3, [r1, r0]
 800422c:	18c0      	addlt	r0, r0, r3
 800422e:	4770      	bx	lr

08004230 <_init>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	bf00      	nop
 8004234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004236:	bc08      	pop	{r3}
 8004238:	469e      	mov	lr, r3
 800423a:	4770      	bx	lr

0800423c <_fini>:
 800423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423e:	bf00      	nop
 8004240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004242:	bc08      	pop	{r3}
 8004244:	469e      	mov	lr, r3
 8004246:	4770      	bx	lr
