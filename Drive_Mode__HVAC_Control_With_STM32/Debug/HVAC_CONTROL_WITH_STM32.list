
HVAC_CONTROL_WITH_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a008  08004110  08004110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d14  0800e118  0800e118  0000b118  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee2c  0800ee2c  0000c1fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ee2c  0800ee2c  0000be2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee34  0800ee34  0000c1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee34  0800ee34  0000be34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ee38  0800ee38  0000be38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800ee3c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  20000200  0800f038  0000c200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  0800f038  0000c7a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d4f4  00000000  00000000  0000c225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f22  00000000  00000000  00019719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  0001c640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000929  00000000  00000000  0001d278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b87  00000000  00000000  0001dba1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e7d  00000000  00000000  00037728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000860c2  00000000  00000000  0004b5a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1667  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ffc  00000000  00000000  000d16ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  000d56a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004110 <__do_global_dtors_aux>:
 8004110:	b510      	push	{r4, lr}
 8004112:	4c05      	ldr	r4, [pc, #20]	@ (8004128 <__do_global_dtors_aux+0x18>)
 8004114:	7823      	ldrb	r3, [r4, #0]
 8004116:	b933      	cbnz	r3, 8004126 <__do_global_dtors_aux+0x16>
 8004118:	4b04      	ldr	r3, [pc, #16]	@ (800412c <__do_global_dtors_aux+0x1c>)
 800411a:	b113      	cbz	r3, 8004122 <__do_global_dtors_aux+0x12>
 800411c:	4804      	ldr	r0, [pc, #16]	@ (8004130 <__do_global_dtors_aux+0x20>)
 800411e:	f3af 8000 	nop.w
 8004122:	2301      	movs	r3, #1
 8004124:	7023      	strb	r3, [r4, #0]
 8004126:	bd10      	pop	{r4, pc}
 8004128:	20000200 	.word	0x20000200
 800412c:	00000000 	.word	0x00000000
 8004130:	0800e100 	.word	0x0800e100

08004134 <frame_dummy>:
 8004134:	b508      	push	{r3, lr}
 8004136:	4b03      	ldr	r3, [pc, #12]	@ (8004144 <frame_dummy+0x10>)
 8004138:	b11b      	cbz	r3, 8004142 <frame_dummy+0xe>
 800413a:	4903      	ldr	r1, [pc, #12]	@ (8004148 <frame_dummy+0x14>)
 800413c:	4803      	ldr	r0, [pc, #12]	@ (800414c <frame_dummy+0x18>)
 800413e:	f3af 8000 	nop.w
 8004142:	bd08      	pop	{r3, pc}
 8004144:	00000000 	.word	0x00000000
 8004148:	20000204 	.word	0x20000204
 800414c:	0800e100 	.word	0x0800e100

08004150 <strlen>:
 8004150:	4603      	mov	r3, r0
 8004152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004156:	2a00      	cmp	r2, #0
 8004158:	d1fb      	bne.n	8004152 <strlen+0x2>
 800415a:	1a18      	subs	r0, r3, r0
 800415c:	3801      	subs	r0, #1
 800415e:	4770      	bx	lr

08004160 <__aeabi_drsub>:
 8004160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8004164:	e002      	b.n	800416c <__adddf3>
 8004166:	bf00      	nop

08004168 <__aeabi_dsub>:
 8004168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800416c <__adddf3>:
 800416c:	b530      	push	{r4, r5, lr}
 800416e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004176:	ea94 0f05 	teq	r4, r5
 800417a:	bf08      	it	eq
 800417c:	ea90 0f02 	teqeq	r0, r2
 8004180:	bf1f      	itttt	ne
 8004182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800418a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800418e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004192:	f000 80e2 	beq.w	800435a <__adddf3+0x1ee>
 8004196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800419a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800419e:	bfb8      	it	lt
 80041a0:	426d      	neglt	r5, r5
 80041a2:	dd0c      	ble.n	80041be <__adddf3+0x52>
 80041a4:	442c      	add	r4, r5
 80041a6:	ea80 0202 	eor.w	r2, r0, r2
 80041aa:	ea81 0303 	eor.w	r3, r1, r3
 80041ae:	ea82 0000 	eor.w	r0, r2, r0
 80041b2:	ea83 0101 	eor.w	r1, r3, r1
 80041b6:	ea80 0202 	eor.w	r2, r0, r2
 80041ba:	ea81 0303 	eor.w	r3, r1, r3
 80041be:	2d36      	cmp	r5, #54	@ 0x36
 80041c0:	bf88      	it	hi
 80041c2:	bd30      	pophi	{r4, r5, pc}
 80041c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80041c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80041cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80041d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80041d4:	d002      	beq.n	80041dc <__adddf3+0x70>
 80041d6:	4240      	negs	r0, r0
 80041d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80041dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80041e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80041e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80041e8:	d002      	beq.n	80041f0 <__adddf3+0x84>
 80041ea:	4252      	negs	r2, r2
 80041ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80041f0:	ea94 0f05 	teq	r4, r5
 80041f4:	f000 80a7 	beq.w	8004346 <__adddf3+0x1da>
 80041f8:	f1a4 0401 	sub.w	r4, r4, #1
 80041fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8004200:	db0d      	blt.n	800421e <__adddf3+0xb2>
 8004202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004206:	fa22 f205 	lsr.w	r2, r2, r5
 800420a:	1880      	adds	r0, r0, r2
 800420c:	f141 0100 	adc.w	r1, r1, #0
 8004210:	fa03 f20e 	lsl.w	r2, r3, lr
 8004214:	1880      	adds	r0, r0, r2
 8004216:	fa43 f305 	asr.w	r3, r3, r5
 800421a:	4159      	adcs	r1, r3
 800421c:	e00e      	b.n	800423c <__adddf3+0xd0>
 800421e:	f1a5 0520 	sub.w	r5, r5, #32
 8004222:	f10e 0e20 	add.w	lr, lr, #32
 8004226:	2a01      	cmp	r2, #1
 8004228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800422c:	bf28      	it	cs
 800422e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004232:	fa43 f305 	asr.w	r3, r3, r5
 8004236:	18c0      	adds	r0, r0, r3
 8004238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800423c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004240:	d507      	bpl.n	8004252 <__adddf3+0xe6>
 8004242:	f04f 0e00 	mov.w	lr, #0
 8004246:	f1dc 0c00 	rsbs	ip, ip, #0
 800424a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800424e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004256:	d31b      	bcc.n	8004290 <__adddf3+0x124>
 8004258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800425c:	d30c      	bcc.n	8004278 <__adddf3+0x10c>
 800425e:	0849      	lsrs	r1, r1, #1
 8004260:	ea5f 0030 	movs.w	r0, r0, rrx
 8004264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004268:	f104 0401 	add.w	r4, r4, #1
 800426c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8004274:	f080 809a 	bcs.w	80043ac <__adddf3+0x240>
 8004278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800427c:	bf08      	it	eq
 800427e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004282:	f150 0000 	adcs.w	r0, r0, #0
 8004286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800428a:	ea41 0105 	orr.w	r1, r1, r5
 800428e:	bd30      	pop	{r4, r5, pc}
 8004290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004294:	4140      	adcs	r0, r0
 8004296:	eb41 0101 	adc.w	r1, r1, r1
 800429a:	3c01      	subs	r4, #1
 800429c:	bf28      	it	cs
 800429e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80042a2:	d2e9      	bcs.n	8004278 <__adddf3+0x10c>
 80042a4:	f091 0f00 	teq	r1, #0
 80042a8:	bf04      	itt	eq
 80042aa:	4601      	moveq	r1, r0
 80042ac:	2000      	moveq	r0, #0
 80042ae:	fab1 f381 	clz	r3, r1
 80042b2:	bf08      	it	eq
 80042b4:	3320      	addeq	r3, #32
 80042b6:	f1a3 030b 	sub.w	r3, r3, #11
 80042ba:	f1b3 0220 	subs.w	r2, r3, #32
 80042be:	da0c      	bge.n	80042da <__adddf3+0x16e>
 80042c0:	320c      	adds	r2, #12
 80042c2:	dd08      	ble.n	80042d6 <__adddf3+0x16a>
 80042c4:	f102 0c14 	add.w	ip, r2, #20
 80042c8:	f1c2 020c 	rsb	r2, r2, #12
 80042cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80042d0:	fa21 f102 	lsr.w	r1, r1, r2
 80042d4:	e00c      	b.n	80042f0 <__adddf3+0x184>
 80042d6:	f102 0214 	add.w	r2, r2, #20
 80042da:	bfd8      	it	le
 80042dc:	f1c2 0c20 	rsble	ip, r2, #32
 80042e0:	fa01 f102 	lsl.w	r1, r1, r2
 80042e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80042e8:	bfdc      	itt	le
 80042ea:	ea41 010c 	orrle.w	r1, r1, ip
 80042ee:	4090      	lslle	r0, r2
 80042f0:	1ae4      	subs	r4, r4, r3
 80042f2:	bfa2      	ittt	ge
 80042f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80042f8:	4329      	orrge	r1, r5
 80042fa:	bd30      	popge	{r4, r5, pc}
 80042fc:	ea6f 0404 	mvn.w	r4, r4
 8004300:	3c1f      	subs	r4, #31
 8004302:	da1c      	bge.n	800433e <__adddf3+0x1d2>
 8004304:	340c      	adds	r4, #12
 8004306:	dc0e      	bgt.n	8004326 <__adddf3+0x1ba>
 8004308:	f104 0414 	add.w	r4, r4, #20
 800430c:	f1c4 0220 	rsb	r2, r4, #32
 8004310:	fa20 f004 	lsr.w	r0, r0, r4
 8004314:	fa01 f302 	lsl.w	r3, r1, r2
 8004318:	ea40 0003 	orr.w	r0, r0, r3
 800431c:	fa21 f304 	lsr.w	r3, r1, r4
 8004320:	ea45 0103 	orr.w	r1, r5, r3
 8004324:	bd30      	pop	{r4, r5, pc}
 8004326:	f1c4 040c 	rsb	r4, r4, #12
 800432a:	f1c4 0220 	rsb	r2, r4, #32
 800432e:	fa20 f002 	lsr.w	r0, r0, r2
 8004332:	fa01 f304 	lsl.w	r3, r1, r4
 8004336:	ea40 0003 	orr.w	r0, r0, r3
 800433a:	4629      	mov	r1, r5
 800433c:	bd30      	pop	{r4, r5, pc}
 800433e:	fa21 f004 	lsr.w	r0, r1, r4
 8004342:	4629      	mov	r1, r5
 8004344:	bd30      	pop	{r4, r5, pc}
 8004346:	f094 0f00 	teq	r4, #0
 800434a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800434e:	bf06      	itte	eq
 8004350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8004354:	3401      	addeq	r4, #1
 8004356:	3d01      	subne	r5, #1
 8004358:	e74e      	b.n	80041f8 <__adddf3+0x8c>
 800435a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800435e:	bf18      	it	ne
 8004360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004364:	d029      	beq.n	80043ba <__adddf3+0x24e>
 8004366:	ea94 0f05 	teq	r4, r5
 800436a:	bf08      	it	eq
 800436c:	ea90 0f02 	teqeq	r0, r2
 8004370:	d005      	beq.n	800437e <__adddf3+0x212>
 8004372:	ea54 0c00 	orrs.w	ip, r4, r0
 8004376:	bf04      	itt	eq
 8004378:	4619      	moveq	r1, r3
 800437a:	4610      	moveq	r0, r2
 800437c:	bd30      	pop	{r4, r5, pc}
 800437e:	ea91 0f03 	teq	r1, r3
 8004382:	bf1e      	ittt	ne
 8004384:	2100      	movne	r1, #0
 8004386:	2000      	movne	r0, #0
 8004388:	bd30      	popne	{r4, r5, pc}
 800438a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800438e:	d105      	bne.n	800439c <__adddf3+0x230>
 8004390:	0040      	lsls	r0, r0, #1
 8004392:	4149      	adcs	r1, r1
 8004394:	bf28      	it	cs
 8004396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800439a:	bd30      	pop	{r4, r5, pc}
 800439c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80043a0:	bf3c      	itt	cc
 80043a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80043a6:	bd30      	popcc	{r4, r5, pc}
 80043a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80043ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80043b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80043b4:	f04f 0000 	mov.w	r0, #0
 80043b8:	bd30      	pop	{r4, r5, pc}
 80043ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80043be:	bf1a      	itte	ne
 80043c0:	4619      	movne	r1, r3
 80043c2:	4610      	movne	r0, r2
 80043c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80043c8:	bf1c      	itt	ne
 80043ca:	460b      	movne	r3, r1
 80043cc:	4602      	movne	r2, r0
 80043ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80043d2:	bf06      	itte	eq
 80043d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80043d8:	ea91 0f03 	teqeq	r1, r3
 80043dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80043e0:	bd30      	pop	{r4, r5, pc}
 80043e2:	bf00      	nop

080043e4 <__aeabi_ui2d>:
 80043e4:	f090 0f00 	teq	r0, #0
 80043e8:	bf04      	itt	eq
 80043ea:	2100      	moveq	r1, #0
 80043ec:	4770      	bxeq	lr
 80043ee:	b530      	push	{r4, r5, lr}
 80043f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80043f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80043f8:	f04f 0500 	mov.w	r5, #0
 80043fc:	f04f 0100 	mov.w	r1, #0
 8004400:	e750      	b.n	80042a4 <__adddf3+0x138>
 8004402:	bf00      	nop

08004404 <__aeabi_i2d>:
 8004404:	f090 0f00 	teq	r0, #0
 8004408:	bf04      	itt	eq
 800440a:	2100      	moveq	r1, #0
 800440c:	4770      	bxeq	lr
 800440e:	b530      	push	{r4, r5, lr}
 8004410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8004418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800441c:	bf48      	it	mi
 800441e:	4240      	negmi	r0, r0
 8004420:	f04f 0100 	mov.w	r1, #0
 8004424:	e73e      	b.n	80042a4 <__adddf3+0x138>
 8004426:	bf00      	nop

08004428 <__aeabi_f2d>:
 8004428:	0042      	lsls	r2, r0, #1
 800442a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800442e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004436:	bf1f      	itttt	ne
 8004438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800443c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8004440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8004444:	4770      	bxne	lr
 8004446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800444a:	bf08      	it	eq
 800444c:	4770      	bxeq	lr
 800444e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8004452:	bf04      	itt	eq
 8004454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8004458:	4770      	bxeq	lr
 800445a:	b530      	push	{r4, r5, lr}
 800445c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8004460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004468:	e71c      	b.n	80042a4 <__adddf3+0x138>
 800446a:	bf00      	nop

0800446c <__aeabi_ul2d>:
 800446c:	ea50 0201 	orrs.w	r2, r0, r1
 8004470:	bf08      	it	eq
 8004472:	4770      	bxeq	lr
 8004474:	b530      	push	{r4, r5, lr}
 8004476:	f04f 0500 	mov.w	r5, #0
 800447a:	e00a      	b.n	8004492 <__aeabi_l2d+0x16>

0800447c <__aeabi_l2d>:
 800447c:	ea50 0201 	orrs.w	r2, r0, r1
 8004480:	bf08      	it	eq
 8004482:	4770      	bxeq	lr
 8004484:	b530      	push	{r4, r5, lr}
 8004486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800448a:	d502      	bpl.n	8004492 <__aeabi_l2d+0x16>
 800448c:	4240      	negs	r0, r0
 800448e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800449a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800449e:	f43f aed8 	beq.w	8004252 <__adddf3+0xe6>
 80044a2:	f04f 0203 	mov.w	r2, #3
 80044a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80044aa:	bf18      	it	ne
 80044ac:	3203      	addne	r2, #3
 80044ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80044b2:	bf18      	it	ne
 80044b4:	3203      	addne	r2, #3
 80044b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80044ba:	f1c2 0320 	rsb	r3, r2, #32
 80044be:	fa00 fc03 	lsl.w	ip, r0, r3
 80044c2:	fa20 f002 	lsr.w	r0, r0, r2
 80044c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80044ca:	ea40 000e 	orr.w	r0, r0, lr
 80044ce:	fa21 f102 	lsr.w	r1, r1, r2
 80044d2:	4414      	add	r4, r2
 80044d4:	e6bd      	b.n	8004252 <__adddf3+0xe6>
 80044d6:	bf00      	nop

080044d8 <__aeabi_dmul>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80044de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80044e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80044e6:	bf1d      	ittte	ne
 80044e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80044ec:	ea94 0f0c 	teqne	r4, ip
 80044f0:	ea95 0f0c 	teqne	r5, ip
 80044f4:	f000 f8de 	bleq	80046b4 <__aeabi_dmul+0x1dc>
 80044f8:	442c      	add	r4, r5
 80044fa:	ea81 0603 	eor.w	r6, r1, r3
 80044fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800450a:	bf18      	it	ne
 800450c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004518:	d038      	beq.n	800458c <__aeabi_dmul+0xb4>
 800451a:	fba0 ce02 	umull	ip, lr, r0, r2
 800451e:	f04f 0500 	mov.w	r5, #0
 8004522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800452a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800452e:	f04f 0600 	mov.w	r6, #0
 8004532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004536:	f09c 0f00 	teq	ip, #0
 800453a:	bf18      	it	ne
 800453c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8004544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8004548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800454c:	d204      	bcs.n	8004558 <__aeabi_dmul+0x80>
 800454e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004552:	416d      	adcs	r5, r5
 8004554:	eb46 0606 	adc.w	r6, r6, r6
 8004558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800455c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800456c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8004570:	bf88      	it	hi
 8004572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004576:	d81e      	bhi.n	80045b6 <__aeabi_dmul+0xde>
 8004578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800457c:	bf08      	it	eq
 800457e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004582:	f150 0000 	adcs.w	r0, r0, #0
 8004586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8004590:	ea46 0101 	orr.w	r1, r6, r1
 8004594:	ea40 0002 	orr.w	r0, r0, r2
 8004598:	ea81 0103 	eor.w	r1, r1, r3
 800459c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80045a0:	bfc2      	ittt	gt
 80045a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80045a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80045aa:	bd70      	popgt	{r4, r5, r6, pc}
 80045ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80045b0:	f04f 0e00 	mov.w	lr, #0
 80045b4:	3c01      	subs	r4, #1
 80045b6:	f300 80ab 	bgt.w	8004710 <__aeabi_dmul+0x238>
 80045ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80045be:	bfde      	ittt	le
 80045c0:	2000      	movle	r0, #0
 80045c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80045c6:	bd70      	pople	{r4, r5, r6, pc}
 80045c8:	f1c4 0400 	rsb	r4, r4, #0
 80045cc:	3c20      	subs	r4, #32
 80045ce:	da35      	bge.n	800463c <__aeabi_dmul+0x164>
 80045d0:	340c      	adds	r4, #12
 80045d2:	dc1b      	bgt.n	800460c <__aeabi_dmul+0x134>
 80045d4:	f104 0414 	add.w	r4, r4, #20
 80045d8:	f1c4 0520 	rsb	r5, r4, #32
 80045dc:	fa00 f305 	lsl.w	r3, r0, r5
 80045e0:	fa20 f004 	lsr.w	r0, r0, r4
 80045e4:	fa01 f205 	lsl.w	r2, r1, r5
 80045e8:	ea40 0002 	orr.w	r0, r0, r2
 80045ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80045f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80045f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80045f8:	fa21 f604 	lsr.w	r6, r1, r4
 80045fc:	eb42 0106 	adc.w	r1, r2, r6
 8004600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004604:	bf08      	it	eq
 8004606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	f1c4 040c 	rsb	r4, r4, #12
 8004610:	f1c4 0520 	rsb	r5, r4, #32
 8004614:	fa00 f304 	lsl.w	r3, r0, r4
 8004618:	fa20 f005 	lsr.w	r0, r0, r5
 800461c:	fa01 f204 	lsl.w	r2, r1, r4
 8004620:	ea40 0002 	orr.w	r0, r0, r2
 8004624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800462c:	f141 0100 	adc.w	r1, r1, #0
 8004630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004634:	bf08      	it	eq
 8004636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800463a:	bd70      	pop	{r4, r5, r6, pc}
 800463c:	f1c4 0520 	rsb	r5, r4, #32
 8004640:	fa00 f205 	lsl.w	r2, r0, r5
 8004644:	ea4e 0e02 	orr.w	lr, lr, r2
 8004648:	fa20 f304 	lsr.w	r3, r0, r4
 800464c:	fa01 f205 	lsl.w	r2, r1, r5
 8004650:	ea43 0302 	orr.w	r3, r3, r2
 8004654:	fa21 f004 	lsr.w	r0, r1, r4
 8004658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800465c:	fa21 f204 	lsr.w	r2, r1, r4
 8004660:	ea20 0002 	bic.w	r0, r0, r2
 8004664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800466c:	bf08      	it	eq
 800466e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004672:	bd70      	pop	{r4, r5, r6, pc}
 8004674:	f094 0f00 	teq	r4, #0
 8004678:	d10f      	bne.n	800469a <__aeabi_dmul+0x1c2>
 800467a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800467e:	0040      	lsls	r0, r0, #1
 8004680:	eb41 0101 	adc.w	r1, r1, r1
 8004684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004688:	bf08      	it	eq
 800468a:	3c01      	subeq	r4, #1
 800468c:	d0f7      	beq.n	800467e <__aeabi_dmul+0x1a6>
 800468e:	ea41 0106 	orr.w	r1, r1, r6
 8004692:	f095 0f00 	teq	r5, #0
 8004696:	bf18      	it	ne
 8004698:	4770      	bxne	lr
 800469a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800469e:	0052      	lsls	r2, r2, #1
 80046a0:	eb43 0303 	adc.w	r3, r3, r3
 80046a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80046a8:	bf08      	it	eq
 80046aa:	3d01      	subeq	r5, #1
 80046ac:	d0f7      	beq.n	800469e <__aeabi_dmul+0x1c6>
 80046ae:	ea43 0306 	orr.w	r3, r3, r6
 80046b2:	4770      	bx	lr
 80046b4:	ea94 0f0c 	teq	r4, ip
 80046b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80046bc:	bf18      	it	ne
 80046be:	ea95 0f0c 	teqne	r5, ip
 80046c2:	d00c      	beq.n	80046de <__aeabi_dmul+0x206>
 80046c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80046c8:	bf18      	it	ne
 80046ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80046ce:	d1d1      	bne.n	8004674 <__aeabi_dmul+0x19c>
 80046d0:	ea81 0103 	eor.w	r1, r1, r3
 80046d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80046d8:	f04f 0000 	mov.w	r0, #0
 80046dc:	bd70      	pop	{r4, r5, r6, pc}
 80046de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80046e2:	bf06      	itte	eq
 80046e4:	4610      	moveq	r0, r2
 80046e6:	4619      	moveq	r1, r3
 80046e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80046ec:	d019      	beq.n	8004722 <__aeabi_dmul+0x24a>
 80046ee:	ea94 0f0c 	teq	r4, ip
 80046f2:	d102      	bne.n	80046fa <__aeabi_dmul+0x222>
 80046f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80046f8:	d113      	bne.n	8004722 <__aeabi_dmul+0x24a>
 80046fa:	ea95 0f0c 	teq	r5, ip
 80046fe:	d105      	bne.n	800470c <__aeabi_dmul+0x234>
 8004700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004704:	bf1c      	itt	ne
 8004706:	4610      	movne	r0, r2
 8004708:	4619      	movne	r1, r3
 800470a:	d10a      	bne.n	8004722 <__aeabi_dmul+0x24a>
 800470c:	ea81 0103 	eor.w	r1, r1, r3
 8004710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8004718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800471c:	f04f 0000 	mov.w	r0, #0
 8004720:	bd70      	pop	{r4, r5, r6, pc}
 8004722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8004726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800472a:	bd70      	pop	{r4, r5, r6, pc}

0800472c <__aeabi_ddiv>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8004736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800473a:	bf1d      	ittte	ne
 800473c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004740:	ea94 0f0c 	teqne	r4, ip
 8004744:	ea95 0f0c 	teqne	r5, ip
 8004748:	f000 f8a7 	bleq	800489a <__aeabi_ddiv+0x16e>
 800474c:	eba4 0405 	sub.w	r4, r4, r5
 8004750:	ea81 0e03 	eor.w	lr, r1, r3
 8004754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800475c:	f000 8088 	beq.w	8004870 <__aeabi_ddiv+0x144>
 8004760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8004768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800476c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800477c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8004784:	429d      	cmp	r5, r3
 8004786:	bf08      	it	eq
 8004788:	4296      	cmpeq	r6, r2
 800478a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800478e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8004792:	d202      	bcs.n	800479a <__aeabi_ddiv+0x6e>
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	ea4f 0232 	mov.w	r2, r2, rrx
 800479a:	1ab6      	subs	r6, r6, r2
 800479c:	eb65 0503 	sbc.w	r5, r5, r3
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80047a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80047aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80047ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80047b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047b6:	bf22      	ittt	cs
 80047b8:	1ab6      	subcs	r6, r6, r2
 80047ba:	4675      	movcs	r5, lr
 80047bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80047c0:	085b      	lsrs	r3, r3, #1
 80047c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80047c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80047ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047ce:	bf22      	ittt	cs
 80047d0:	1ab6      	subcs	r6, r6, r2
 80047d2:	4675      	movcs	r5, lr
 80047d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	ea4f 0232 	mov.w	r2, r2, rrx
 80047de:	ebb6 0e02 	subs.w	lr, r6, r2
 80047e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047e6:	bf22      	ittt	cs
 80047e8:	1ab6      	subcs	r6, r6, r2
 80047ea:	4675      	movcs	r5, lr
 80047ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80047f0:	085b      	lsrs	r3, r3, #1
 80047f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80047f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80047fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047fe:	bf22      	ittt	cs
 8004800:	1ab6      	subcs	r6, r6, r2
 8004802:	4675      	movcs	r5, lr
 8004804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004808:	ea55 0e06 	orrs.w	lr, r5, r6
 800480c:	d018      	beq.n	8004840 <__aeabi_ddiv+0x114>
 800480e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800481a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800481e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800482a:	d1c0      	bne.n	80047ae <__aeabi_ddiv+0x82>
 800482c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004830:	d10b      	bne.n	800484a <__aeabi_ddiv+0x11e>
 8004832:	ea41 0100 	orr.w	r1, r1, r0
 8004836:	f04f 0000 	mov.w	r0, #0
 800483a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800483e:	e7b6      	b.n	80047ae <__aeabi_ddiv+0x82>
 8004840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004844:	bf04      	itt	eq
 8004846:	4301      	orreq	r1, r0
 8004848:	2000      	moveq	r0, #0
 800484a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800484e:	bf88      	it	hi
 8004850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004854:	f63f aeaf 	bhi.w	80045b6 <__aeabi_dmul+0xde>
 8004858:	ebb5 0c03 	subs.w	ip, r5, r3
 800485c:	bf04      	itt	eq
 800485e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004866:	f150 0000 	adcs.w	r0, r0, #0
 800486a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800486e:	bd70      	pop	{r4, r5, r6, pc}
 8004870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8004874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800487c:	bfc2      	ittt	gt
 800487e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004886:	bd70      	popgt	{r4, r5, r6, pc}
 8004888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800488c:	f04f 0e00 	mov.w	lr, #0
 8004890:	3c01      	subs	r4, #1
 8004892:	e690      	b.n	80045b6 <__aeabi_dmul+0xde>
 8004894:	ea45 0e06 	orr.w	lr, r5, r6
 8004898:	e68d      	b.n	80045b6 <__aeabi_dmul+0xde>
 800489a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800489e:	ea94 0f0c 	teq	r4, ip
 80048a2:	bf08      	it	eq
 80048a4:	ea95 0f0c 	teqeq	r5, ip
 80048a8:	f43f af3b 	beq.w	8004722 <__aeabi_dmul+0x24a>
 80048ac:	ea94 0f0c 	teq	r4, ip
 80048b0:	d10a      	bne.n	80048c8 <__aeabi_ddiv+0x19c>
 80048b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80048b6:	f47f af34 	bne.w	8004722 <__aeabi_dmul+0x24a>
 80048ba:	ea95 0f0c 	teq	r5, ip
 80048be:	f47f af25 	bne.w	800470c <__aeabi_dmul+0x234>
 80048c2:	4610      	mov	r0, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	e72c      	b.n	8004722 <__aeabi_dmul+0x24a>
 80048c8:	ea95 0f0c 	teq	r5, ip
 80048cc:	d106      	bne.n	80048dc <__aeabi_ddiv+0x1b0>
 80048ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80048d2:	f43f aefd 	beq.w	80046d0 <__aeabi_dmul+0x1f8>
 80048d6:	4610      	mov	r0, r2
 80048d8:	4619      	mov	r1, r3
 80048da:	e722      	b.n	8004722 <__aeabi_dmul+0x24a>
 80048dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80048e0:	bf18      	it	ne
 80048e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80048e6:	f47f aec5 	bne.w	8004674 <__aeabi_dmul+0x19c>
 80048ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80048ee:	f47f af0d 	bne.w	800470c <__aeabi_dmul+0x234>
 80048f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80048f6:	f47f aeeb 	bne.w	80046d0 <__aeabi_dmul+0x1f8>
 80048fa:	e712      	b.n	8004722 <__aeabi_dmul+0x24a>

080048fc <__gedf2>:
 80048fc:	f04f 3cff 	mov.w	ip, #4294967295
 8004900:	e006      	b.n	8004910 <__cmpdf2+0x4>
 8004902:	bf00      	nop

08004904 <__ledf2>:
 8004904:	f04f 0c01 	mov.w	ip, #1
 8004908:	e002      	b.n	8004910 <__cmpdf2+0x4>
 800490a:	bf00      	nop

0800490c <__cmpdf2>:
 800490c:	f04f 0c01 	mov.w	ip, #1
 8004910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800491c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004920:	bf18      	it	ne
 8004922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004926:	d01b      	beq.n	8004960 <__cmpdf2+0x54>
 8004928:	b001      	add	sp, #4
 800492a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800492e:	bf0c      	ite	eq
 8004930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004934:	ea91 0f03 	teqne	r1, r3
 8004938:	bf02      	ittt	eq
 800493a:	ea90 0f02 	teqeq	r0, r2
 800493e:	2000      	moveq	r0, #0
 8004940:	4770      	bxeq	lr
 8004942:	f110 0f00 	cmn.w	r0, #0
 8004946:	ea91 0f03 	teq	r1, r3
 800494a:	bf58      	it	pl
 800494c:	4299      	cmppl	r1, r3
 800494e:	bf08      	it	eq
 8004950:	4290      	cmpeq	r0, r2
 8004952:	bf2c      	ite	cs
 8004954:	17d8      	asrcs	r0, r3, #31
 8004956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800495a:	f040 0001 	orr.w	r0, r0, #1
 800495e:	4770      	bx	lr
 8004960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004968:	d102      	bne.n	8004970 <__cmpdf2+0x64>
 800496a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800496e:	d107      	bne.n	8004980 <__cmpdf2+0x74>
 8004970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004978:	d1d6      	bne.n	8004928 <__cmpdf2+0x1c>
 800497a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800497e:	d0d3      	beq.n	8004928 <__cmpdf2+0x1c>
 8004980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop

08004988 <__aeabi_cdrcmple>:
 8004988:	4684      	mov	ip, r0
 800498a:	4610      	mov	r0, r2
 800498c:	4662      	mov	r2, ip
 800498e:	468c      	mov	ip, r1
 8004990:	4619      	mov	r1, r3
 8004992:	4663      	mov	r3, ip
 8004994:	e000      	b.n	8004998 <__aeabi_cdcmpeq>
 8004996:	bf00      	nop

08004998 <__aeabi_cdcmpeq>:
 8004998:	b501      	push	{r0, lr}
 800499a:	f7ff ffb7 	bl	800490c <__cmpdf2>
 800499e:	2800      	cmp	r0, #0
 80049a0:	bf48      	it	mi
 80049a2:	f110 0f00 	cmnmi.w	r0, #0
 80049a6:	bd01      	pop	{r0, pc}

080049a8 <__aeabi_dcmpeq>:
 80049a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049ac:	f7ff fff4 	bl	8004998 <__aeabi_cdcmpeq>
 80049b0:	bf0c      	ite	eq
 80049b2:	2001      	moveq	r0, #1
 80049b4:	2000      	movne	r0, #0
 80049b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80049ba:	bf00      	nop

080049bc <__aeabi_dcmplt>:
 80049bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049c0:	f7ff ffea 	bl	8004998 <__aeabi_cdcmpeq>
 80049c4:	bf34      	ite	cc
 80049c6:	2001      	movcc	r0, #1
 80049c8:	2000      	movcs	r0, #0
 80049ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80049ce:	bf00      	nop

080049d0 <__aeabi_dcmple>:
 80049d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049d4:	f7ff ffe0 	bl	8004998 <__aeabi_cdcmpeq>
 80049d8:	bf94      	ite	ls
 80049da:	2001      	movls	r0, #1
 80049dc:	2000      	movhi	r0, #0
 80049de:	f85d fb08 	ldr.w	pc, [sp], #8
 80049e2:	bf00      	nop

080049e4 <__aeabi_dcmpge>:
 80049e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049e8:	f7ff ffce 	bl	8004988 <__aeabi_cdrcmple>
 80049ec:	bf94      	ite	ls
 80049ee:	2001      	movls	r0, #1
 80049f0:	2000      	movhi	r0, #0
 80049f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80049f6:	bf00      	nop

080049f8 <__aeabi_dcmpgt>:
 80049f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049fc:	f7ff ffc4 	bl	8004988 <__aeabi_cdrcmple>
 8004a00:	bf34      	ite	cc
 8004a02:	2001      	movcc	r0, #1
 8004a04:	2000      	movcs	r0, #0
 8004a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8004a0a:	bf00      	nop

08004a0c <__aeabi_dcmpun>:
 8004a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a14:	d102      	bne.n	8004a1c <__aeabi_dcmpun+0x10>
 8004a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a1a:	d10a      	bne.n	8004a32 <__aeabi_dcmpun+0x26>
 8004a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a24:	d102      	bne.n	8004a2c <__aeabi_dcmpun+0x20>
 8004a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a2a:	d102      	bne.n	8004a32 <__aeabi_dcmpun+0x26>
 8004a2c:	f04f 0000 	mov.w	r0, #0
 8004a30:	4770      	bx	lr
 8004a32:	f04f 0001 	mov.w	r0, #1
 8004a36:	4770      	bx	lr

08004a38 <__aeabi_d2iz>:
 8004a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8004a40:	d215      	bcs.n	8004a6e <__aeabi_d2iz+0x36>
 8004a42:	d511      	bpl.n	8004a68 <__aeabi_d2iz+0x30>
 8004a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8004a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004a4c:	d912      	bls.n	8004a74 <__aeabi_d2iz+0x3c>
 8004a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8004a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8004a62:	bf18      	it	ne
 8004a64:	4240      	negne	r0, r0
 8004a66:	4770      	bx	lr
 8004a68:	f04f 0000 	mov.w	r0, #0
 8004a6c:	4770      	bx	lr
 8004a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004a72:	d105      	bne.n	8004a80 <__aeabi_d2iz+0x48>
 8004a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8004a78:	bf08      	it	eq
 8004a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8004a7e:	4770      	bx	lr
 8004a80:	f04f 0000 	mov.w	r0, #0
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop

08004a88 <__aeabi_frsub>:
 8004a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8004a8c:	e002      	b.n	8004a94 <__addsf3>
 8004a8e:	bf00      	nop

08004a90 <__aeabi_fsub>:
 8004a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08004a94 <__addsf3>:
 8004a94:	0042      	lsls	r2, r0, #1
 8004a96:	bf1f      	itttt	ne
 8004a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8004a9c:	ea92 0f03 	teqne	r2, r3
 8004aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8004aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8004aa8:	d06a      	beq.n	8004b80 <__addsf3+0xec>
 8004aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8004aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8004ab2:	bfc1      	itttt	gt
 8004ab4:	18d2      	addgt	r2, r2, r3
 8004ab6:	4041      	eorgt	r1, r0
 8004ab8:	4048      	eorgt	r0, r1
 8004aba:	4041      	eorgt	r1, r0
 8004abc:	bfb8      	it	lt
 8004abe:	425b      	neglt	r3, r3
 8004ac0:	2b19      	cmp	r3, #25
 8004ac2:	bf88      	it	hi
 8004ac4:	4770      	bxhi	lr
 8004ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8004aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8004ad2:	bf18      	it	ne
 8004ad4:	4240      	negne	r0, r0
 8004ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8004ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8004ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8004ae2:	bf18      	it	ne
 8004ae4:	4249      	negne	r1, r1
 8004ae6:	ea92 0f03 	teq	r2, r3
 8004aea:	d03f      	beq.n	8004b6c <__addsf3+0xd8>
 8004aec:	f1a2 0201 	sub.w	r2, r2, #1
 8004af0:	fa41 fc03 	asr.w	ip, r1, r3
 8004af4:	eb10 000c 	adds.w	r0, r0, ip
 8004af8:	f1c3 0320 	rsb	r3, r3, #32
 8004afc:	fa01 f103 	lsl.w	r1, r1, r3
 8004b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8004b04:	d502      	bpl.n	8004b0c <__addsf3+0x78>
 8004b06:	4249      	negs	r1, r1
 8004b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8004b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8004b10:	d313      	bcc.n	8004b3a <__addsf3+0xa6>
 8004b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004b16:	d306      	bcc.n	8004b26 <__addsf3+0x92>
 8004b18:	0840      	lsrs	r0, r0, #1
 8004b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8004b1e:	f102 0201 	add.w	r2, r2, #1
 8004b22:	2afe      	cmp	r2, #254	@ 0xfe
 8004b24:	d251      	bcs.n	8004bca <__addsf3+0x136>
 8004b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8004b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8004b2e:	bf08      	it	eq
 8004b30:	f020 0001 	biceq.w	r0, r0, #1
 8004b34:	ea40 0003 	orr.w	r0, r0, r3
 8004b38:	4770      	bx	lr
 8004b3a:	0049      	lsls	r1, r1, #1
 8004b3c:	eb40 0000 	adc.w	r0, r0, r0
 8004b40:	3a01      	subs	r2, #1
 8004b42:	bf28      	it	cs
 8004b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8004b48:	d2ed      	bcs.n	8004b26 <__addsf3+0x92>
 8004b4a:	fab0 fc80 	clz	ip, r0
 8004b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8004b52:	ebb2 020c 	subs.w	r2, r2, ip
 8004b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8004b5a:	bfaa      	itet	ge
 8004b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8004b60:	4252      	neglt	r2, r2
 8004b62:	4318      	orrge	r0, r3
 8004b64:	bfbc      	itt	lt
 8004b66:	40d0      	lsrlt	r0, r2
 8004b68:	4318      	orrlt	r0, r3
 8004b6a:	4770      	bx	lr
 8004b6c:	f092 0f00 	teq	r2, #0
 8004b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8004b74:	bf06      	itte	eq
 8004b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8004b7a:	3201      	addeq	r2, #1
 8004b7c:	3b01      	subne	r3, #1
 8004b7e:	e7b5      	b.n	8004aec <__addsf3+0x58>
 8004b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8004b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8004b88:	bf18      	it	ne
 8004b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8004b8e:	d021      	beq.n	8004bd4 <__addsf3+0x140>
 8004b90:	ea92 0f03 	teq	r2, r3
 8004b94:	d004      	beq.n	8004ba0 <__addsf3+0x10c>
 8004b96:	f092 0f00 	teq	r2, #0
 8004b9a:	bf08      	it	eq
 8004b9c:	4608      	moveq	r0, r1
 8004b9e:	4770      	bx	lr
 8004ba0:	ea90 0f01 	teq	r0, r1
 8004ba4:	bf1c      	itt	ne
 8004ba6:	2000      	movne	r0, #0
 8004ba8:	4770      	bxne	lr
 8004baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8004bae:	d104      	bne.n	8004bba <__addsf3+0x126>
 8004bb0:	0040      	lsls	r0, r0, #1
 8004bb2:	bf28      	it	cs
 8004bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8004bb8:	4770      	bx	lr
 8004bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8004bbe:	bf3c      	itt	cc
 8004bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8004bc4:	4770      	bxcc	lr
 8004bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8004bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8004bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004bd2:	4770      	bx	lr
 8004bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8004bd8:	bf16      	itet	ne
 8004bda:	4608      	movne	r0, r1
 8004bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8004be0:	4601      	movne	r1, r0
 8004be2:	0242      	lsls	r2, r0, #9
 8004be4:	bf06      	itte	eq
 8004be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8004bea:	ea90 0f01 	teqeq	r0, r1
 8004bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8004bf2:	4770      	bx	lr

08004bf4 <__aeabi_ui2f>:
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	e004      	b.n	8004c04 <__aeabi_i2f+0x8>
 8004bfa:	bf00      	nop

08004bfc <__aeabi_i2f>:
 8004bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8004c00:	bf48      	it	mi
 8004c02:	4240      	negmi	r0, r0
 8004c04:	ea5f 0c00 	movs.w	ip, r0
 8004c08:	bf08      	it	eq
 8004c0a:	4770      	bxeq	lr
 8004c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8004c10:	4601      	mov	r1, r0
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	e01c      	b.n	8004c52 <__aeabi_l2f+0x2a>

08004c18 <__aeabi_ul2f>:
 8004c18:	ea50 0201 	orrs.w	r2, r0, r1
 8004c1c:	bf08      	it	eq
 8004c1e:	4770      	bxeq	lr
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e00a      	b.n	8004c3c <__aeabi_l2f+0x14>
 8004c26:	bf00      	nop

08004c28 <__aeabi_l2f>:
 8004c28:	ea50 0201 	orrs.w	r2, r0, r1
 8004c2c:	bf08      	it	eq
 8004c2e:	4770      	bxeq	lr
 8004c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8004c34:	d502      	bpl.n	8004c3c <__aeabi_l2f+0x14>
 8004c36:	4240      	negs	r0, r0
 8004c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004c3c:	ea5f 0c01 	movs.w	ip, r1
 8004c40:	bf02      	ittt	eq
 8004c42:	4684      	moveq	ip, r0
 8004c44:	4601      	moveq	r1, r0
 8004c46:	2000      	moveq	r0, #0
 8004c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8004c4c:	bf08      	it	eq
 8004c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8004c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8004c56:	fabc f28c 	clz	r2, ip
 8004c5a:	3a08      	subs	r2, #8
 8004c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8004c60:	db10      	blt.n	8004c84 <__aeabi_l2f+0x5c>
 8004c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8004c66:	4463      	add	r3, ip
 8004c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8004c6c:	f1c2 0220 	rsb	r2, r2, #32
 8004c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8004c74:	fa20 f202 	lsr.w	r2, r0, r2
 8004c78:	eb43 0002 	adc.w	r0, r3, r2
 8004c7c:	bf08      	it	eq
 8004c7e:	f020 0001 	biceq.w	r0, r0, #1
 8004c82:	4770      	bx	lr
 8004c84:	f102 0220 	add.w	r2, r2, #32
 8004c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8004c8c:	f1c2 0220 	rsb	r2, r2, #32
 8004c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8004c94:	fa21 f202 	lsr.w	r2, r1, r2
 8004c98:	eb43 0002 	adc.w	r0, r3, r2
 8004c9c:	bf08      	it	eq
 8004c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8004ca2:	4770      	bx	lr

08004ca4 <__aeabi_fmul>:
 8004ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8004cac:	bf1e      	ittt	ne
 8004cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8004cb2:	ea92 0f0c 	teqne	r2, ip
 8004cb6:	ea93 0f0c 	teqne	r3, ip
 8004cba:	d06f      	beq.n	8004d9c <__aeabi_fmul+0xf8>
 8004cbc:	441a      	add	r2, r3
 8004cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8004cc2:	0240      	lsls	r0, r0, #9
 8004cc4:	bf18      	it	ne
 8004cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8004cca:	d01e      	beq.n	8004d0a <__aeabi_fmul+0x66>
 8004ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8004cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8004cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8004cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8004ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8004ce4:	bf3e      	ittt	cc
 8004ce6:	0049      	lslcc	r1, r1, #1
 8004ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8004cec:	005b      	lslcc	r3, r3, #1
 8004cee:	ea40 0001 	orr.w	r0, r0, r1
 8004cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8004cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8004cf8:	d81d      	bhi.n	8004d36 <__aeabi_fmul+0x92>
 8004cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8004d02:	bf08      	it	eq
 8004d04:	f020 0001 	biceq.w	r0, r0, #1
 8004d08:	4770      	bx	lr
 8004d0a:	f090 0f00 	teq	r0, #0
 8004d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8004d12:	bf08      	it	eq
 8004d14:	0249      	lsleq	r1, r1, #9
 8004d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8004d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8004d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8004d20:	bfc2      	ittt	gt
 8004d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8004d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8004d2a:	4770      	bxgt	lr
 8004d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004d30:	f04f 0300 	mov.w	r3, #0
 8004d34:	3a01      	subs	r2, #1
 8004d36:	dc5d      	bgt.n	8004df4 <__aeabi_fmul+0x150>
 8004d38:	f112 0f19 	cmn.w	r2, #25
 8004d3c:	bfdc      	itt	le
 8004d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8004d42:	4770      	bxle	lr
 8004d44:	f1c2 0200 	rsb	r2, r2, #0
 8004d48:	0041      	lsls	r1, r0, #1
 8004d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8004d4e:	f1c2 0220 	rsb	r2, r2, #32
 8004d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8004d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8004d5a:	f140 0000 	adc.w	r0, r0, #0
 8004d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8004d62:	bf08      	it	eq
 8004d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8004d68:	4770      	bx	lr
 8004d6a:	f092 0f00 	teq	r2, #0
 8004d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8004d72:	bf02      	ittt	eq
 8004d74:	0040      	lsleq	r0, r0, #1
 8004d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8004d7a:	3a01      	subeq	r2, #1
 8004d7c:	d0f9      	beq.n	8004d72 <__aeabi_fmul+0xce>
 8004d7e:	ea40 000c 	orr.w	r0, r0, ip
 8004d82:	f093 0f00 	teq	r3, #0
 8004d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8004d8a:	bf02      	ittt	eq
 8004d8c:	0049      	lsleq	r1, r1, #1
 8004d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8004d92:	3b01      	subeq	r3, #1
 8004d94:	d0f9      	beq.n	8004d8a <__aeabi_fmul+0xe6>
 8004d96:	ea41 010c 	orr.w	r1, r1, ip
 8004d9a:	e78f      	b.n	8004cbc <__aeabi_fmul+0x18>
 8004d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8004da0:	ea92 0f0c 	teq	r2, ip
 8004da4:	bf18      	it	ne
 8004da6:	ea93 0f0c 	teqne	r3, ip
 8004daa:	d00a      	beq.n	8004dc2 <__aeabi_fmul+0x11e>
 8004dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8004db0:	bf18      	it	ne
 8004db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8004db6:	d1d8      	bne.n	8004d6a <__aeabi_fmul+0xc6>
 8004db8:	ea80 0001 	eor.w	r0, r0, r1
 8004dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8004dc0:	4770      	bx	lr
 8004dc2:	f090 0f00 	teq	r0, #0
 8004dc6:	bf17      	itett	ne
 8004dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8004dcc:	4608      	moveq	r0, r1
 8004dce:	f091 0f00 	teqne	r1, #0
 8004dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8004dd6:	d014      	beq.n	8004e02 <__aeabi_fmul+0x15e>
 8004dd8:	ea92 0f0c 	teq	r2, ip
 8004ddc:	d101      	bne.n	8004de2 <__aeabi_fmul+0x13e>
 8004dde:	0242      	lsls	r2, r0, #9
 8004de0:	d10f      	bne.n	8004e02 <__aeabi_fmul+0x15e>
 8004de2:	ea93 0f0c 	teq	r3, ip
 8004de6:	d103      	bne.n	8004df0 <__aeabi_fmul+0x14c>
 8004de8:	024b      	lsls	r3, r1, #9
 8004dea:	bf18      	it	ne
 8004dec:	4608      	movne	r0, r1
 8004dee:	d108      	bne.n	8004e02 <__aeabi_fmul+0x15e>
 8004df0:	ea80 0001 	eor.w	r0, r0, r1
 8004df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8004df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8004dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004e00:	4770      	bx	lr
 8004e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8004e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8004e0a:	4770      	bx	lr

08004e0c <__aeabi_fdiv>:
 8004e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8004e14:	bf1e      	ittt	ne
 8004e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8004e1a:	ea92 0f0c 	teqne	r2, ip
 8004e1e:	ea93 0f0c 	teqne	r3, ip
 8004e22:	d069      	beq.n	8004ef8 <__aeabi_fdiv+0xec>
 8004e24:	eba2 0203 	sub.w	r2, r2, r3
 8004e28:	ea80 0c01 	eor.w	ip, r0, r1
 8004e2c:	0249      	lsls	r1, r1, #9
 8004e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8004e32:	d037      	beq.n	8004ea4 <__aeabi_fdiv+0x98>
 8004e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8004e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8004e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8004e44:	428b      	cmp	r3, r1
 8004e46:	bf38      	it	cc
 8004e48:	005b      	lslcc	r3, r3, #1
 8004e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8004e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8004e52:	428b      	cmp	r3, r1
 8004e54:	bf24      	itt	cs
 8004e56:	1a5b      	subcs	r3, r3, r1
 8004e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8004e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8004e60:	bf24      	itt	cs
 8004e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8004e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8004e6e:	bf24      	itt	cs
 8004e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8004e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8004e7c:	bf24      	itt	cs
 8004e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8004e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	bf18      	it	ne
 8004e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8004e8e:	d1e0      	bne.n	8004e52 <__aeabi_fdiv+0x46>
 8004e90:	2afd      	cmp	r2, #253	@ 0xfd
 8004e92:	f63f af50 	bhi.w	8004d36 <__aeabi_fmul+0x92>
 8004e96:	428b      	cmp	r3, r1
 8004e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8004e9c:	bf08      	it	eq
 8004e9e:	f020 0001 	biceq.w	r0, r0, #1
 8004ea2:	4770      	bx	lr
 8004ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8004ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8004eac:	327f      	adds	r2, #127	@ 0x7f
 8004eae:	bfc2      	ittt	gt
 8004eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8004eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8004eb8:	4770      	bxgt	lr
 8004eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	3a01      	subs	r2, #1
 8004ec4:	e737      	b.n	8004d36 <__aeabi_fmul+0x92>
 8004ec6:	f092 0f00 	teq	r2, #0
 8004eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8004ece:	bf02      	ittt	eq
 8004ed0:	0040      	lsleq	r0, r0, #1
 8004ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8004ed6:	3a01      	subeq	r2, #1
 8004ed8:	d0f9      	beq.n	8004ece <__aeabi_fdiv+0xc2>
 8004eda:	ea40 000c 	orr.w	r0, r0, ip
 8004ede:	f093 0f00 	teq	r3, #0
 8004ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8004ee6:	bf02      	ittt	eq
 8004ee8:	0049      	lsleq	r1, r1, #1
 8004eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8004eee:	3b01      	subeq	r3, #1
 8004ef0:	d0f9      	beq.n	8004ee6 <__aeabi_fdiv+0xda>
 8004ef2:	ea41 010c 	orr.w	r1, r1, ip
 8004ef6:	e795      	b.n	8004e24 <__aeabi_fdiv+0x18>
 8004ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8004efc:	ea92 0f0c 	teq	r2, ip
 8004f00:	d108      	bne.n	8004f14 <__aeabi_fdiv+0x108>
 8004f02:	0242      	lsls	r2, r0, #9
 8004f04:	f47f af7d 	bne.w	8004e02 <__aeabi_fmul+0x15e>
 8004f08:	ea93 0f0c 	teq	r3, ip
 8004f0c:	f47f af70 	bne.w	8004df0 <__aeabi_fmul+0x14c>
 8004f10:	4608      	mov	r0, r1
 8004f12:	e776      	b.n	8004e02 <__aeabi_fmul+0x15e>
 8004f14:	ea93 0f0c 	teq	r3, ip
 8004f18:	d104      	bne.n	8004f24 <__aeabi_fdiv+0x118>
 8004f1a:	024b      	lsls	r3, r1, #9
 8004f1c:	f43f af4c 	beq.w	8004db8 <__aeabi_fmul+0x114>
 8004f20:	4608      	mov	r0, r1
 8004f22:	e76e      	b.n	8004e02 <__aeabi_fmul+0x15e>
 8004f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8004f28:	bf18      	it	ne
 8004f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8004f2e:	d1ca      	bne.n	8004ec6 <__aeabi_fdiv+0xba>
 8004f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8004f34:	f47f af5c 	bne.w	8004df0 <__aeabi_fmul+0x14c>
 8004f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8004f3c:	f47f af3c 	bne.w	8004db8 <__aeabi_fmul+0x114>
 8004f40:	e75f      	b.n	8004e02 <__aeabi_fmul+0x15e>
 8004f42:	bf00      	nop

08004f44 <__gesf2>:
 8004f44:	f04f 3cff 	mov.w	ip, #4294967295
 8004f48:	e006      	b.n	8004f58 <__cmpsf2+0x4>
 8004f4a:	bf00      	nop

08004f4c <__lesf2>:
 8004f4c:	f04f 0c01 	mov.w	ip, #1
 8004f50:	e002      	b.n	8004f58 <__cmpsf2+0x4>
 8004f52:	bf00      	nop

08004f54 <__cmpsf2>:
 8004f54:	f04f 0c01 	mov.w	ip, #1
 8004f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8004f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8004f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8004f68:	bf18      	it	ne
 8004f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8004f6e:	d011      	beq.n	8004f94 <__cmpsf2+0x40>
 8004f70:	b001      	add	sp, #4
 8004f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8004f76:	bf18      	it	ne
 8004f78:	ea90 0f01 	teqne	r0, r1
 8004f7c:	bf58      	it	pl
 8004f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8004f82:	bf88      	it	hi
 8004f84:	17c8      	asrhi	r0, r1, #31
 8004f86:	bf38      	it	cc
 8004f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8004f8c:	bf18      	it	ne
 8004f8e:	f040 0001 	orrne.w	r0, r0, #1
 8004f92:	4770      	bx	lr
 8004f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8004f98:	d102      	bne.n	8004fa0 <__cmpsf2+0x4c>
 8004f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8004f9e:	d105      	bne.n	8004fac <__cmpsf2+0x58>
 8004fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8004fa4:	d1e4      	bne.n	8004f70 <__cmpsf2+0x1c>
 8004fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8004faa:	d0e1      	beq.n	8004f70 <__cmpsf2+0x1c>
 8004fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop

08004fb4 <__aeabi_cfrcmple>:
 8004fb4:	4684      	mov	ip, r0
 8004fb6:	4608      	mov	r0, r1
 8004fb8:	4661      	mov	r1, ip
 8004fba:	e7ff      	b.n	8004fbc <__aeabi_cfcmpeq>

08004fbc <__aeabi_cfcmpeq>:
 8004fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8004fbe:	f7ff ffc9 	bl	8004f54 <__cmpsf2>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	bf48      	it	mi
 8004fc6:	f110 0f00 	cmnmi.w	r0, #0
 8004fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08004fcc <__aeabi_fcmpeq>:
 8004fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004fd0:	f7ff fff4 	bl	8004fbc <__aeabi_cfcmpeq>
 8004fd4:	bf0c      	ite	eq
 8004fd6:	2001      	moveq	r0, #1
 8004fd8:	2000      	movne	r0, #0
 8004fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8004fde:	bf00      	nop

08004fe0 <__aeabi_fcmplt>:
 8004fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004fe4:	f7ff ffea 	bl	8004fbc <__aeabi_cfcmpeq>
 8004fe8:	bf34      	ite	cc
 8004fea:	2001      	movcc	r0, #1
 8004fec:	2000      	movcs	r0, #0
 8004fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8004ff2:	bf00      	nop

08004ff4 <__aeabi_fcmple>:
 8004ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004ff8:	f7ff ffe0 	bl	8004fbc <__aeabi_cfcmpeq>
 8004ffc:	bf94      	ite	ls
 8004ffe:	2001      	movls	r0, #1
 8005000:	2000      	movhi	r0, #0
 8005002:	f85d fb08 	ldr.w	pc, [sp], #8
 8005006:	bf00      	nop

08005008 <__aeabi_fcmpge>:
 8005008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800500c:	f7ff ffd2 	bl	8004fb4 <__aeabi_cfrcmple>
 8005010:	bf94      	ite	ls
 8005012:	2001      	movls	r0, #1
 8005014:	2000      	movhi	r0, #0
 8005016:	f85d fb08 	ldr.w	pc, [sp], #8
 800501a:	bf00      	nop

0800501c <__aeabi_fcmpgt>:
 800501c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005020:	f7ff ffc8 	bl	8004fb4 <__aeabi_cfrcmple>
 8005024:	bf34      	ite	cc
 8005026:	2001      	movcc	r0, #1
 8005028:	2000      	movcs	r0, #0
 800502a:	f85d fb08 	ldr.w	pc, [sp], #8
 800502e:	bf00      	nop

08005030 <Blower_Relay_Pins_Init>:

#define PB12_LOW_SPEED_BLOWER    12
#define PB13_MEDIUM_SPEED_BLOWER 13
#define PB14_HIGH_SPEED_BLOWER   14

void Blower_Relay_Pins_Init(){
 8005030:	b480      	push	{r7}
 8005032:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8005034:	4b0f      	ldr	r3, [pc, #60]	@ (8005074 <Blower_Relay_Pins_Init+0x44>)
 8005036:	699b      	ldr	r3, [r3, #24]
 8005038:	4a0e      	ldr	r2, [pc, #56]	@ (8005074 <Blower_Relay_Pins_Init+0x44>)
 800503a:	f043 0308 	orr.w	r3, r3, #8
 800503e:	6193      	str	r3, [r2, #24]
    GPIOB->CRH&=~((0xF<<16)|(0XF<<20)|(0XF<<24));
 8005040:	4b0d      	ldr	r3, [pc, #52]	@ (8005078 <Blower_Relay_Pins_Init+0x48>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4a0c      	ldr	r2, [pc, #48]	@ (8005078 <Blower_Relay_Pins_Init+0x48>)
 8005046:	f023 637f 	bic.w	r3, r3, #267386880	@ 0xff00000
 800504a:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 800504e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=((0x3<<16)|(0X3<<20)|(0X3<<24));
 8005050:	4b09      	ldr	r3, [pc, #36]	@ (8005078 <Blower_Relay_Pins_Init+0x48>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	4a08      	ldr	r2, [pc, #32]	@ (8005078 <Blower_Relay_Pins_Init+0x48>)
 8005056:	f043 734c 	orr.w	r3, r3, #53477376	@ 0x3300000
 800505a:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 800505e:	6053      	str	r3, [r2, #4]
    GPIOB->ODR|=((1<<PB12_LOW_SPEED_BLOWER)|(1<<PB13_MEDIUM_SPEED_BLOWER)|(1<<PB14_HIGH_SPEED_BLOWER));
 8005060:	4b05      	ldr	r3, [pc, #20]	@ (8005078 <Blower_Relay_Pins_Init+0x48>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4a04      	ldr	r2, [pc, #16]	@ (8005078 <Blower_Relay_Pins_Init+0x48>)
 8005066:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800506a:	60d3      	str	r3, [r2, #12]
}
 800506c:	bf00      	nop
 800506e:	46bd      	mov	sp, r7
 8005070:	bc80      	pop	{r7}
 8005072:	4770      	bx	lr
 8005074:	40021000 	.word	0x40021000
 8005078:	40010c00 	.word	0x40010c00

0800507c <Switch_Pins_int>:
extern uint32_t milli_sec_tick;
uint32_t LastDebounceTime = 0;  // The Last Time The Output Pin Was Toggled
uint32_t DebounceDelay = 50;    // The Ddebounce Time; increase it if the output still flickers
switch_state_t BtnState=SW_STATE_NEUTRAL;               // The Current Reading From The Input Pin
switch_state_t LastBtnState = SW_STATE_NEUTRAL;       // The previous reading from The Input Pin
void Switch_Pins_int(){
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8005080:	4b16      	ldr	r3, [pc, #88]	@ (80050dc <Switch_Pins_int+0x60>)
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	4a15      	ldr	r2, [pc, #84]	@ (80050dc <Switch_Pins_int+0x60>)
 8005086:	f043 0308 	orr.w	r3, r3, #8
 800508a:	6193      	str	r3, [r2, #24]
    GPIOB->CRL&=~(0xf<<28);//PB7 as input//FORWARD
 800508c:	4b14      	ldr	r3, [pc, #80]	@ (80050e0 <Switch_Pins_int+0x64>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a13      	ldr	r2, [pc, #76]	@ (80050e0 <Switch_Pins_int+0x64>)
 8005092:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005096:	6013      	str	r3, [r2, #0]
    GPIOB->CRL|=(0b10<<30);
 8005098:	4b11      	ldr	r3, [pc, #68]	@ (80050e0 <Switch_Pins_int+0x64>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a10      	ldr	r2, [pc, #64]	@ (80050e0 <Switch_Pins_int+0x64>)
 800509e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80050a2:	6013      	str	r3, [r2, #0]
    GPIOB->ODR|=(1<<7);
 80050a4:	4b0e      	ldr	r3, [pc, #56]	@ (80050e0 <Switch_Pins_int+0x64>)
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	4a0d      	ldr	r2, [pc, #52]	@ (80050e0 <Switch_Pins_int+0x64>)
 80050aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ae:	60d3      	str	r3, [r2, #12]
    GPIOB->CRL&=~(0XF<<24);// PB6 REVERSE
 80050b0:	4b0b      	ldr	r3, [pc, #44]	@ (80050e0 <Switch_Pins_int+0x64>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a0a      	ldr	r2, [pc, #40]	@ (80050e0 <Switch_Pins_int+0x64>)
 80050b6:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80050ba:	6013      	str	r3, [r2, #0]
    GPIOB->CRL|=(0b10<<26);
 80050bc:	4b08      	ldr	r3, [pc, #32]	@ (80050e0 <Switch_Pins_int+0x64>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a07      	ldr	r2, [pc, #28]	@ (80050e0 <Switch_Pins_int+0x64>)
 80050c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80050c6:	6013      	str	r3, [r2, #0]
    GPIOB->ODR|=(1<<6);
 80050c8:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <Switch_Pins_int+0x64>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	4a04      	ldr	r2, [pc, #16]	@ (80050e0 <Switch_Pins_int+0x64>)
 80050ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050d2:	60d3      	str	r3, [r2, #12]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr
 80050dc:	40021000 	.word	0x40021000
 80050e0:	40010c00 	.word	0x40010c00

080050e4 <read_switch_raw>:
switch_state_t read_switch_raw(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
    uint8_t fwd =!(GPIOB->IDR>>7&1);
 80050ea:	4b19      	ldr	r3, [pc, #100]	@ (8005150 <read_switch_raw+0x6c>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	09db      	lsrs	r3, r3, #7
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	bf0c      	ite	eq
 80050f8:	2301      	moveq	r3, #1
 80050fa:	2300      	movne	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	71fb      	strb	r3, [r7, #7]
    uint8_t rev =!(GPIOB->IDR>>6&1);
 8005100:	4b13      	ldr	r3, [pc, #76]	@ (8005150 <read_switch_raw+0x6c>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	099b      	lsrs	r3, r3, #6
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	bf0c      	ite	eq
 800510e:	2301      	moveq	r3, #1
 8005110:	2300      	movne	r3, #0
 8005112:	b2db      	uxtb	r3, r3
 8005114:	71bb      	strb	r3, [r7, #6]

    if (fwd && !rev) return SW_STATE_FORWARD;
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d004      	beq.n	8005126 <read_switch_raw+0x42>
 800511c:	79bb      	ldrb	r3, [r7, #6]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <read_switch_raw+0x42>
 8005122:	2301      	movs	r3, #1
 8005124:	e00f      	b.n	8005146 <read_switch_raw+0x62>
    if (!fwd && rev) return SW_STATE_REVERSE;
 8005126:	79fb      	ldrb	r3, [r7, #7]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d104      	bne.n	8005136 <read_switch_raw+0x52>
 800512c:	79bb      	ldrb	r3, [r7, #6]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <read_switch_raw+0x52>
 8005132:	2302      	movs	r3, #2
 8005134:	e007      	b.n	8005146 <read_switch_raw+0x62>
    if (!fwd && !rev) return SW_STATE_NEUTRAL;
 8005136:	79fb      	ldrb	r3, [r7, #7]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d104      	bne.n	8005146 <read_switch_raw+0x62>
 800513c:	79bb      	ldrb	r3, [r7, #6]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <read_switch_raw+0x62>
 8005142:	2300      	movs	r3, #0
 8005144:	e7ff      	b.n	8005146 <read_switch_raw+0x62>
}
 8005146:	4618      	mov	r0, r3
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr
 8005150:	40010c00 	.word	0x40010c00

08005154 <Switch_update>:
// Debounce state machine (call periodically from main loop)
switch_state_t Switch_update(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
    uint8_t TempBtnReading;
    TempBtnReading =read_switch_raw();// R_BIT(GPIOC->IDR,13); // read the state of the switch into a local variable:
 800515a:	f7ff ffc3 	bl	80050e4 <read_switch_raw>
 800515e:	4603      	mov	r3, r0
 8005160:	71fb      	strb	r3, [r7, #7]
    if(TempBtnReading != LastBtnState) // If the switch changed, due to noise or pressing:
 8005162:	4b11      	ldr	r3, [pc, #68]	@ (80051a8 <Switch_update+0x54>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	79fa      	ldrb	r2, [r7, #7]
 8005168:	429a      	cmp	r2, r3
 800516a:	d003      	beq.n	8005174 <Switch_update+0x20>
    {
        LastDebounceTime = milli_sec_tick; // reset the debouncing timer
 800516c:	4b0f      	ldr	r3, [pc, #60]	@ (80051ac <Switch_update+0x58>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a0f      	ldr	r2, [pc, #60]	@ (80051b0 <Switch_update+0x5c>)
 8005172:	6013      	str	r3, [r2, #0]
    }
    if((milli_sec_tick - LastDebounceTime) > DebounceDelay)
 8005174:	4b0d      	ldr	r3, [pc, #52]	@ (80051ac <Switch_update+0x58>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	4b0d      	ldr	r3, [pc, #52]	@ (80051b0 <Switch_update+0x5c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	1ad2      	subs	r2, r2, r3
 800517e:	4b0d      	ldr	r3, [pc, #52]	@ (80051b4 <Switch_update+0x60>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	429a      	cmp	r2, r3
 8005184:	d907      	bls.n	8005196 <Switch_update+0x42>
    {
        if(TempBtnReading != BtnState)
 8005186:	4b0c      	ldr	r3, [pc, #48]	@ (80051b8 <Switch_update+0x64>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	79fa      	ldrb	r2, [r7, #7]
 800518c:	429a      	cmp	r2, r3
 800518e:	d002      	beq.n	8005196 <Switch_update+0x42>
        {
            BtnState = TempBtnReading;
 8005190:	4a09      	ldr	r2, [pc, #36]	@ (80051b8 <Switch_update+0x64>)
 8005192:	79fb      	ldrb	r3, [r7, #7]
 8005194:	7013      	strb	r3, [r2, #0]
        }
    }
    LastBtnState = TempBtnReading;
 8005196:	4a04      	ldr	r2, [pc, #16]	@ (80051a8 <Switch_update+0x54>)
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	7013      	strb	r3, [r2, #0]
    return BtnState;
 800519c:	4b06      	ldr	r3, [pc, #24]	@ (80051b8 <Switch_update+0x64>)
 800519e:	781b      	ldrb	r3, [r3, #0]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	20000221 	.word	0x20000221
 80051ac:	20000598 	.word	0x20000598
 80051b0:	2000021c 	.word	0x2000021c
 80051b4:	20000000 	.word	0x20000000
 80051b8:	20000220 	.word	0x20000220

080051bc <MX_I2C1_Init>:
 */

#include"extern_file_declarations.h"
uint8_t I2C_RX_FLAG=0,data[2];
 void MX_I2C1_Init(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80051c0:	4b15      	ldr	r3, [pc, #84]	@ (8005218 <MX_I2C1_Init+0x5c>)
 80051c2:	4a16      	ldr	r2, [pc, #88]	@ (800521c <MX_I2C1_Init+0x60>)
 80051c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80051c6:	4b14      	ldr	r3, [pc, #80]	@ (8005218 <MX_I2C1_Init+0x5c>)
 80051c8:	4a15      	ldr	r2, [pc, #84]	@ (8005220 <MX_I2C1_Init+0x64>)
 80051ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80051cc:	4b12      	ldr	r3, [pc, #72]	@ (8005218 <MX_I2C1_Init+0x5c>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 170;
 80051d2:	4b11      	ldr	r3, [pc, #68]	@ (8005218 <MX_I2C1_Init+0x5c>)
 80051d4:	22aa      	movs	r2, #170	@ 0xaa
 80051d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005218 <MX_I2C1_Init+0x5c>)
 80051da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80051de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80051e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005218 <MX_I2C1_Init+0x5c>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80051e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005218 <MX_I2C1_Init+0x5c>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005218 <MX_I2C1_Init+0x5c>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051f2:	4b09      	ldr	r3, [pc, #36]	@ (8005218 <MX_I2C1_Init+0x5c>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80051f8:	4807      	ldr	r0, [pc, #28]	@ (8005218 <MX_I2C1_Init+0x5c>)
 80051fa:	f004 fa43 	bl	8009684 <HAL_I2C_Init>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005204:	f002 faa0 	bl	8007748 <Error_Handler>
  }
  HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 8005208:	2202      	movs	r2, #2
 800520a:	4906      	ldr	r1, [pc, #24]	@ (8005224 <MX_I2C1_Init+0x68>)
 800520c:	4802      	ldr	r0, [pc, #8]	@ (8005218 <MX_I2C1_Init+0x5c>)
 800520e:	f004 fb91 	bl	8009934 <HAL_I2C_Slave_Receive_IT>
}
 8005212:	bf00      	nop
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000540 	.word	0x20000540
 800521c:	40005400 	.word	0x40005400
 8005220:	00061a80 	.word	0x00061a80
 8005224:	20000224 	.word	0x20000224

08005228 <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
	I2C_RX_FLAG=1;
 8005230:	4b05      	ldr	r3, [pc, #20]	@ (8005248 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 8005232:	2201      	movs	r2, #1
 8005234:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 8005236:	2202      	movs	r2, #2
 8005238:	4904      	ldr	r1, [pc, #16]	@ (800524c <HAL_I2C_SlaveRxCpltCallback+0x24>)
 800523a:	4805      	ldr	r0, [pc, #20]	@ (8005250 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 800523c:	f004 fb7a 	bl	8009934 <HAL_I2C_Slave_Receive_IT>
}
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20000222 	.word	0x20000222
 800524c:	20000224 	.word	0x20000224
 8005250:	20000540 	.word	0x20000540

08005254 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a0c      	ldr	r2, [pc, #48]	@ (8005294 <HAL_I2C_ErrorCallback+0x40>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d112      	bne.n	800528c <HAL_I2C_ErrorCallback+0x38>
        // Reset I2C if it’s stuck
        __HAL_RCC_I2C1_FORCE_RESET();
 8005266:	4b0c      	ldr	r3, [pc, #48]	@ (8005298 <HAL_I2C_ErrorCallback+0x44>)
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	4a0b      	ldr	r2, [pc, #44]	@ (8005298 <HAL_I2C_ErrorCallback+0x44>)
 800526c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005270:	6113      	str	r3, [r2, #16]
        __HAL_RCC_I2C1_RELEASE_RESET();
 8005272:	4b09      	ldr	r3, [pc, #36]	@ (8005298 <HAL_I2C_ErrorCallback+0x44>)
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	4a08      	ldr	r2, [pc, #32]	@ (8005298 <HAL_I2C_ErrorCallback+0x44>)
 8005278:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800527c:	6113      	str	r3, [r2, #16]

        MX_I2C1_Init();  // Re-init peripheral
 800527e:	f7ff ff9d 	bl	80051bc <MX_I2C1_Init>
        HAL_I2C_Slave_Receive_IT(&hi2c1, data, 2);
 8005282:	2202      	movs	r2, #2
 8005284:	4905      	ldr	r1, [pc, #20]	@ (800529c <HAL_I2C_ErrorCallback+0x48>)
 8005286:	4806      	ldr	r0, [pc, #24]	@ (80052a0 <HAL_I2C_ErrorCallback+0x4c>)
 8005288:	f004 fb54 	bl	8009934 <HAL_I2C_Slave_Receive_IT>
    }
}
 800528c:	bf00      	nop
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40005400 	.word	0x40005400
 8005298:	40021000 	.word	0x40021000
 800529c:	20000224 	.word	0x20000224
 80052a0:	20000540 	.word	0x20000540

080052a4 <jump_to_bootloader>:

#include"JBD_BMS.h"
#include"can.h"
#include"uart.h"
JBD_BMS_MSG_t Bms_Frames;
void jump_to_bootloader(void) {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
	FLASH_WRITE_FLAG(BL_UPDATE_REQUIRED);
 80052aa:	4b36      	ldr	r3, [pc, #216]	@ (8005384 <jump_to_bootloader+0xe0>)
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <jump_to_bootloader+0x1e>
 80052b6:	4b33      	ldr	r3, [pc, #204]	@ (8005384 <jump_to_bootloader+0xe0>)
 80052b8:	4a33      	ldr	r2, [pc, #204]	@ (8005388 <jump_to_bootloader+0xe4>)
 80052ba:	605a      	str	r2, [r3, #4]
 80052bc:	4b31      	ldr	r3, [pc, #196]	@ (8005384 <jump_to_bootloader+0xe0>)
 80052be:	4a33      	ldr	r2, [pc, #204]	@ (800538c <jump_to_bootloader+0xe8>)
 80052c0:	605a      	str	r2, [r3, #4]
 80052c2:	4b30      	ldr	r3, [pc, #192]	@ (8005384 <jump_to_bootloader+0xe0>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f9      	bne.n	80052c2 <jump_to_bootloader+0x1e>
 80052ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005384 <jump_to_bootloader+0xe0>)
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005384 <jump_to_bootloader+0xe0>)
 80052d4:	f043 0302 	orr.w	r3, r3, #2
 80052d8:	6113      	str	r3, [r2, #16]
 80052da:	4b2a      	ldr	r3, [pc, #168]	@ (8005384 <jump_to_bootloader+0xe0>)
 80052dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005390 <jump_to_bootloader+0xec>)
 80052de:	615a      	str	r2, [r3, #20]
 80052e0:	4b28      	ldr	r3, [pc, #160]	@ (8005384 <jump_to_bootloader+0xe0>)
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	4a27      	ldr	r2, [pc, #156]	@ (8005384 <jump_to_bootloader+0xe0>)
 80052e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ea:	6113      	str	r3, [r2, #16]
 80052ec:	4b25      	ldr	r3, [pc, #148]	@ (8005384 <jump_to_bootloader+0xe0>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1f9      	bne.n	80052ec <jump_to_bootloader+0x48>
 80052f8:	4b22      	ldr	r3, [pc, #136]	@ (8005384 <jump_to_bootloader+0xe0>)
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	4a21      	ldr	r2, [pc, #132]	@ (8005384 <jump_to_bootloader+0xe0>)
 80052fe:	f023 0302 	bic.w	r3, r3, #2
 8005302:	6113      	str	r3, [r2, #16]
 8005304:	4b1f      	ldr	r3, [pc, #124]	@ (8005384 <jump_to_bootloader+0xe0>)
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	4a1e      	ldr	r2, [pc, #120]	@ (8005384 <jump_to_bootloader+0xe0>)
 800530a:	f043 0301 	orr.w	r3, r3, #1
 800530e:	6113      	str	r3, [r2, #16]
 8005310:	4b1f      	ldr	r3, [pc, #124]	@ (8005390 <jump_to_bootloader+0xec>)
 8005312:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	4b1a      	ldr	r3, [pc, #104]	@ (8005384 <jump_to_bootloader+0xe0>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1f9      	bne.n	8005318 <jump_to_bootloader+0x74>
 8005324:	4b1b      	ldr	r3, [pc, #108]	@ (8005394 <jump_to_bootloader+0xf0>)
 8005326:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800532a:	801a      	strh	r2, [r3, #0]
 800532c:	4b15      	ldr	r3, [pc, #84]	@ (8005384 <jump_to_bootloader+0xe0>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1f9      	bne.n	800532c <jump_to_bootloader+0x88>
 8005338:	4b12      	ldr	r3, [pc, #72]	@ (8005384 <jump_to_bootloader+0xe0>)
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	4a11      	ldr	r2, [pc, #68]	@ (8005384 <jump_to_bootloader+0xe0>)
 800533e:	f023 0301 	bic.w	r3, r3, #1
 8005342:	6113      	str	r3, [r2, #16]
 8005344:	4b0f      	ldr	r3, [pc, #60]	@ (8005384 <jump_to_bootloader+0xe0>)
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	4a0e      	ldr	r2, [pc, #56]	@ (8005384 <jump_to_bootloader+0xe0>)
 800534a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800534e:	6113      	str	r3, [r2, #16]
    // 1. Read the MSP and Reset Handler from application vector table
    uint32_t boot_stack = *(volatile uint32_t*)(BOOT_ADDRESS);
 8005350:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]
    uint32_t boot_reset = *(volatile uint32_t*)(BOOT_ADDRESS + 4);
 8005358:	4b0f      	ldr	r3, [pc, #60]	@ (8005398 <jump_to_bootloader+0xf4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60bb      	str	r3, [r7, #8]
    // 2. Set the Vector Table base
    SCB->VTOR = BOOT_ADDRESS;
 800535e:	4b0f      	ldr	r3, [pc, #60]	@ (800539c <jump_to_bootloader+0xf8>)
 8005360:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005364:	609a      	str	r2, [r3, #8]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	f383 8808 	msr	MSP, r3
}
 8005370:	bf00      	nop
    // 3. Set the Main Stack Pointer
    __set_MSP(boot_stack);
    // 4. Jump to the application's Reset Handler
    void (*boot_entry)(void) = (void*)boot_reset;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	607b      	str	r3, [r7, #4]
    boot_entry();
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4798      	blx	r3
}
 800537a:	bf00      	nop
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40022000 	.word	0x40022000
 8005388:	45670123 	.word	0x45670123
 800538c:	cdef89ab 	.word	0xcdef89ab
 8005390:	0800fc00 	.word	0x0800fc00
 8005394:	0800fc02 	.word	0x0800fc02
 8005398:	08000004 	.word	0x08000004
 800539c:	e000ed00 	.word	0xe000ed00

080053a0 <Process_Jbd_Bms_Messages>:
void Process_Jbd_Bms_Messages(can_frame_t *frame){
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 switch(frame->id){
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 80053b0:	d826      	bhi.n	8005400 <Process_Jbd_Bms_Messages+0x60>
 80053b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053b6:	f0c0 80da 	bcc.w	800556e <Process_Jbd_Bms_Messages+0x1ce>
 80053ba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80053be:	2b0c      	cmp	r3, #12
 80053c0:	f200 80d5 	bhi.w	800556e <Process_Jbd_Bms_Messages+0x1ce>
 80053c4:	a201      	add	r2, pc, #4	@ (adr r2, 80053cc <Process_Jbd_Bms_Messages+0x2c>)
 80053c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ca:	bf00      	nop
 80053cc:	0800540d 	.word	0x0800540d
 80053d0:	08005425 	.word	0x08005425
 80053d4:	0800543d 	.word	0x0800543d
 80053d8:	08005459 	.word	0x08005459
 80053dc:	08005475 	.word	0x08005475
 80053e0:	08005491 	.word	0x08005491
 80053e4:	080054ad 	.word	0x080054ad
 80053e8:	080054c9 	.word	0x080054c9
 80053ec:	080054e5 	.word	0x080054e5
 80053f0:	080054fb 	.word	0x080054fb
 80053f4:	08005517 	.word	0x08005517
 80053f8:	08005533 	.word	0x08005533
 80053fc:	0800554f 	.word	0x0800554f
 8005400:	f241 2234 	movw	r2, #4660	@ 0x1234
 8005404:	4293      	cmp	r3, r2
 8005406:	f000 80b0 	beq.w	800556a <Process_Jbd_Bms_Messages+0x1ca>
 case 0X10C:decode_CAN_0x10C(frame->data,&Bms_Frames.Id_0x10C);
 Bms_Frames.Id_0x10C.rx_or_not=1;
	 	 	 break;
 case 0x1234:jump_to_bootloader();

 default :break;
 800540a:	e0b0      	b.n	800556e <Process_Jbd_Bms_Messages+0x1ce>
 case 0x100:decode_CAN_0x100(frame->data,&Bms_Frames.Id_0x100);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3307      	adds	r3, #7
 8005410:	4959      	ldr	r1, [pc, #356]	@ (8005578 <Process_Jbd_Bms_Messages+0x1d8>)
 8005412:	4618      	mov	r0, r3
 8005414:	f000 f8ca 	bl	80055ac <decode_CAN_0x100>
 Bms_Frames.Id_0x100.rx_or_not=1;
 8005418:	4a57      	ldr	r2, [pc, #348]	@ (8005578 <Process_Jbd_Bms_Messages+0x1d8>)
 800541a:	7b93      	ldrb	r3, [r2, #14]
 800541c:	f043 0301 	orr.w	r3, r3, #1
 8005420:	7393      	strb	r3, [r2, #14]
	 	 	 break;
 8005422:	e0a5      	b.n	8005570 <Process_Jbd_Bms_Messages+0x1d0>
 case 0x101:decode_CAN_0x101(frame->data,&Bms_Frames.Id_0x101);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3307      	adds	r3, #7
 8005428:	4954      	ldr	r1, [pc, #336]	@ (800557c <Process_Jbd_Bms_Messages+0x1dc>)
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f91a 	bl	8005664 <decode_CAN_0x101>
 Bms_Frames.Id_0x101.rx_or_not=1;
 8005430:	4a51      	ldr	r2, [pc, #324]	@ (8005578 <Process_Jbd_Bms_Messages+0x1d8>)
 8005432:	7e93      	ldrb	r3, [r2, #26]
 8005434:	f043 0301 	orr.w	r3, r3, #1
 8005438:	7693      	strb	r3, [r2, #26]
	 	 	 break;
 800543a:	e099      	b.n	8005570 <Process_Jbd_Bms_Messages+0x1d0>
 case 0x102:decode_CAN_0x102(frame->data,&Bms_Frames.Id_0x102);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	3307      	adds	r3, #7
 8005440:	494f      	ldr	r1, [pc, #316]	@ (8005580 <Process_Jbd_Bms_Messages+0x1e0>)
 8005442:	4618      	mov	r0, r3
 8005444:	f000 f994 	bl	8005770 <decode_CAN_0x102>
 Bms_Frames.Id_0x102.rx_or_not=1;
 8005448:	4a4b      	ldr	r2, [pc, #300]	@ (8005578 <Process_Jbd_Bms_Messages+0x1d8>)
 800544a:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
	 	 	 break;
 8005456:	e08b      	b.n	8005570 <Process_Jbd_Bms_Messages+0x1d0>
 case 0x103:decode_CAN_0x103(frame->data,&Bms_Frames.Id_0x103);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3307      	adds	r3, #7
 800545c:	4949      	ldr	r1, [pc, #292]	@ (8005584 <Process_Jbd_Bms_Messages+0x1e4>)
 800545e:	4618      	mov	r0, r3
 8005460:	f000 f942 	bl	80056e8 <decode_CAN_0x103>
 Bms_Frames.Id_0x103.rx_or_not=1;
 8005464:	4a44      	ldr	r2, [pc, #272]	@ (8005578 <Process_Jbd_Bms_Messages+0x1d8>)
 8005466:	f892 304c 	ldrb.w	r3, [r2, #76]	@ 0x4c
 800546a:	f043 0301 	orr.w	r3, r3, #1
 800546e:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
	 	 	 break;
 8005472:	e07d      	b.n	8005570 <Process_Jbd_Bms_Messages+0x1d0>
 case 0x104:decode_CAN_0x104(frame->data,&Bms_Frames.Id_0x104);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3307      	adds	r3, #7
 8005478:	4943      	ldr	r1, [pc, #268]	@ (8005588 <Process_Jbd_Bms_Messages+0x1e8>)
 800547a:	4618      	mov	r0, r3
 800547c:	f000 f9ea 	bl	8005854 <decode_CAN_0x104>
 Bms_Frames.Id_0x104.rx_or_not=1;
 8005480:	4a3d      	ldr	r2, [pc, #244]	@ (8005578 <Process_Jbd_Bms_Messages+0x1d8>)
 8005482:	f892 3052 	ldrb.w	r3, [r2, #82]	@ 0x52
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
	 	 	 break;
 800548e:	e06f      	b.n	8005570 <Process_Jbd_Bms_Messages+0x1d0>
 case 0x105:decode_CAN_0x105(frame->data,&Bms_Frames.Id_0x105);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3307      	adds	r3, #7
 8005494:	493d      	ldr	r1, [pc, #244]	@ (800558c <Process_Jbd_Bms_Messages+0x1ec>)
 8005496:	4618      	mov	r0, r3
 8005498:	f000 f9fe 	bl	8005898 <decode_CAN_0x105>
 Bms_Frames.Id_0x105.rx_or_not=1;
 800549c:	4a36      	ldr	r2, [pc, #216]	@ (8005578 <Process_Jbd_Bms_Messages+0x1d8>)
 800549e:	f892 3062 	ldrb.w	r3, [r2, #98]	@ 0x62
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	f882 3062 	strb.w	r3, [r2, #98]	@ 0x62
	 	 	 break;
 80054aa:	e061      	b.n	8005570 <Process_Jbd_Bms_Messages+0x1d0>
 case 0x106:decode_CAN_0x106(frame->data,&Bms_Frames.Id_0x106);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3307      	adds	r3, #7
 80054b0:	4937      	ldr	r1, [pc, #220]	@ (8005590 <Process_Jbd_Bms_Messages+0x1f0>)
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fa68 	bl	8005988 <decode_CAN_0x106>
 Bms_Frames.Id_0x106.rx_or_not=1;
 80054b8:	4a2f      	ldr	r2, [pc, #188]	@ (8005578 <Process_Jbd_Bms_Messages+0x1d8>)
 80054ba:	f892 3072 	ldrb.w	r3, [r2, #114]	@ 0x72
 80054be:	f043 0301 	orr.w	r3, r3, #1
 80054c2:	f882 3072 	strb.w	r3, [r2, #114]	@ 0x72
	 	 	 break;
 80054c6:	e053      	b.n	8005570 <Process_Jbd_Bms_Messages+0x1d0>
 case 0x107:decode_CAN_0x107(frame->data,&Bms_Frames.Id_0x107);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3307      	adds	r3, #7
 80054cc:	4931      	ldr	r1, [pc, #196]	@ (8005594 <Process_Jbd_Bms_Messages+0x1f4>)
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fad2 	bl	8005a78 <decode_CAN_0x107>
 Bms_Frames.Id_0x107.rx_or_not=1;
 80054d4:	4a28      	ldr	r2, [pc, #160]	@ (8005578 <Process_Jbd_Bms_Messages+0x1d8>)
 80054d6:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 80054da:	f043 0301 	orr.w	r3, r3, #1
 80054de:	f882 3082 	strb.w	r3, [r2, #130]	@ 0x82
	 	 	 break;
 80054e2:	e045      	b.n	8005570 <Process_Jbd_Bms_Messages+0x1d0>
 case 0x108:decode_CAN_0x108(frame->data,&Bms_Frames.Id_0x108);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3307      	adds	r3, #7
 80054e8:	492b      	ldr	r1, [pc, #172]	@ (8005598 <Process_Jbd_Bms_Messages+0x1f8>)
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fb32 	bl	8005b54 <decode_CAN_0x108>
 Bms_Frames.Id_0x108.rx_or_not=1;
 80054f0:	4b21      	ldr	r3, [pc, #132]	@ (8005578 <Process_Jbd_Bms_Messages+0x1d8>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
	 	 	 break;
 80054f8:	e03a      	b.n	8005570 <Process_Jbd_Bms_Messages+0x1d0>
 case 0x109:decode_CAN_0x109(frame->data,&Bms_Frames.Id_0x109);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	3307      	adds	r3, #7
 80054fe:	4927      	ldr	r1, [pc, #156]	@ (800559c <Process_Jbd_Bms_Messages+0x1fc>)
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fb99 	bl	8005c38 <decode_CAN_0x109>
 Bms_Frames.Id_0x109.rx_or_not=1;
 8005506:	4a1c      	ldr	r2, [pc, #112]	@ (8005578 <Process_Jbd_Bms_Messages+0x1d8>)
 8005508:	f892 30a2 	ldrb.w	r3, [r2, #162]	@ 0xa2
 800550c:	f043 0301 	orr.w	r3, r3, #1
 8005510:	f882 30a2 	strb.w	r3, [r2, #162]	@ 0xa2
	 	 	 break;
 8005514:	e02c      	b.n	8005570 <Process_Jbd_Bms_Messages+0x1d0>
 case 0x10A:decode_CAN_0x10A(frame->data,&Bms_Frames.Id_0x10A);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	3307      	adds	r3, #7
 800551a:	4921      	ldr	r1, [pc, #132]	@ (80055a0 <Process_Jbd_Bms_Messages+0x200>)
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fbf9 	bl	8005d14 <decode_CAN_0x10A>
 Bms_Frames.Id_0x10A.rx_or_not=1;
 8005522:	4a15      	ldr	r2, [pc, #84]	@ (8005578 <Process_Jbd_Bms_Messages+0x1d8>)
 8005524:	f892 30b2 	ldrb.w	r3, [r2, #178]	@ 0xb2
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	f882 30b2 	strb.w	r3, [r2, #178]	@ 0xb2
	 	 	 break;
 8005530:	e01e      	b.n	8005570 <Process_Jbd_Bms_Messages+0x1d0>
 case 0X10B:decode_CAN_0x10B(frame->data,&Bms_Frames.Id_0x10B);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	3307      	adds	r3, #7
 8005536:	491b      	ldr	r1, [pc, #108]	@ (80055a4 <Process_Jbd_Bms_Messages+0x204>)
 8005538:	4618      	mov	r0, r3
 800553a:	f000 fc59 	bl	8005df0 <decode_CAN_0x10B>
 Bms_Frames.Id_0x10B.rx_or_not=1;
 800553e:	4a0e      	ldr	r2, [pc, #56]	@ (8005578 <Process_Jbd_Bms_Messages+0x1d8>)
 8005540:	f892 30c2 	ldrb.w	r3, [r2, #194]	@ 0xc2
 8005544:	f043 0301 	orr.w	r3, r3, #1
 8005548:	f882 30c2 	strb.w	r3, [r2, #194]	@ 0xc2
	 	 	 break;
 800554c:	e010      	b.n	8005570 <Process_Jbd_Bms_Messages+0x1d0>
 case 0X10C:decode_CAN_0x10C(frame->data,&Bms_Frames.Id_0x10C);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3307      	adds	r3, #7
 8005552:	4915      	ldr	r1, [pc, #84]	@ (80055a8 <Process_Jbd_Bms_Messages+0x208>)
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fcb9 	bl	8005ecc <decode_CAN_0x10C>
 Bms_Frames.Id_0x10C.rx_or_not=1;
 800555a:	4a07      	ldr	r2, [pc, #28]	@ (8005578 <Process_Jbd_Bms_Messages+0x1d8>)
 800555c:	f892 30d2 	ldrb.w	r3, [r2, #210]	@ 0xd2
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	f882 30d2 	strb.w	r3, [r2, #210]	@ 0xd2
	 	 	 break;
 8005568:	e002      	b.n	8005570 <Process_Jbd_Bms_Messages+0x1d0>
 case 0x1234:jump_to_bootloader();
 800556a:	f7ff fe9b 	bl	80052a4 <jump_to_bootloader>
 default :break;
 800556e:	bf00      	nop
 }
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	20000228 	.word	0x20000228
 800557c:	20000238 	.word	0x20000238
 8005580:	20000244 	.word	0x20000244
 8005584:	2000026c 	.word	0x2000026c
 8005588:	20000276 	.word	0x20000276
 800558c:	2000027c 	.word	0x2000027c
 8005590:	2000028c 	.word	0x2000028c
 8005594:	2000029c 	.word	0x2000029c
 8005598:	200002ac 	.word	0x200002ac
 800559c:	200002bc 	.word	0x200002bc
 80055a0:	200002cc 	.word	0x200002cc
 80055a4:	200002dc 	.word	0x200002dc
 80055a8:	200002ec 	.word	0x200002ec

080055ac <decode_CAN_0x100>:
#include"JBD_BMS_MESSAGES.h"
#include"uart.h"
#include<stdbool.h>
float cells_array[16];
bool ar[6]={true};
void decode_CAN_0x100(const uint8_t *data, CAN_BMS_0x100_t *msg) {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
    msg->Total_Voltage = ((data[0] << 8) | data[1]) * 0.01f;   // 10 mV → V
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	3201      	adds	r2, #1
 80055c0:	7812      	ldrb	r2, [r2, #0]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff fb19 	bl	8004bfc <__aeabi_i2f>
 80055ca:	4603      	mov	r3, r0
 80055cc:	4924      	ldr	r1, [pc, #144]	@ (8005660 <decode_CAN_0x100+0xb4>)
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff fb68 	bl	8004ca4 <__aeabi_fmul>
 80055d4:	4603      	mov	r3, r0
 80055d6:	461a      	mov	r2, r3
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	601a      	str	r2, [r3, #0]
    msg->Charge_and_Discharge_Current =(float)((int16_t)((data[2] << 8) | data[3])) * 0.01f;  // 10 mA → A
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3302      	adds	r3, #2
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	b21b      	sxth	r3, r3
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	b21a      	sxth	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3303      	adds	r3, #3
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	b21b      	sxth	r3, r3
 80055f0:	4313      	orrs	r3, r2
 80055f2:	b21b      	sxth	r3, r3
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7ff fb01 	bl	8004bfc <__aeabi_i2f>
 80055fa:	4603      	mov	r3, r0
 80055fc:	4918      	ldr	r1, [pc, #96]	@ (8005660 <decode_CAN_0x100+0xb4>)
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff fb50 	bl	8004ca4 <__aeabi_fmul>
 8005604:	4603      	mov	r3, r0
 8005606:	461a      	mov	r2, r3
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	605a      	str	r2, [r3, #4]
    msg->Remaining_Capacity= (float)(((int16_t)(data[4] << 8) | data[5])) * 0.01f; // 10 mAh → Ah
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3304      	adds	r3, #4
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	b21b      	sxth	r3, r3
 8005614:	021b      	lsls	r3, r3, #8
 8005616:	b21b      	sxth	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3305      	adds	r3, #5
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	4313      	orrs	r3, r2
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff faea 	bl	8004bfc <__aeabi_i2f>
 8005628:	4603      	mov	r3, r0
 800562a:	490d      	ldr	r1, [pc, #52]	@ (8005660 <decode_CAN_0x100+0xb4>)
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff fb39 	bl	8004ca4 <__aeabi_fmul>
 8005632:	4603      	mov	r3, r0
 8005634:	461a      	mov	r2, r3
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	609a      	str	r2, [r3, #8]
    msg->CRC_Check   = (data[6] << 8) | data[7];
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3306      	adds	r3, #6
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	b21b      	sxth	r3, r3
 8005642:	021b      	lsls	r3, r3, #8
 8005644:	b21a      	sxth	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3307      	adds	r3, #7
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	b21b      	sxth	r3, r3
 800564e:	4313      	orrs	r3, r2
 8005650:	b21b      	sxth	r3, r3
 8005652:	b29a      	uxth	r2, r3
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	819a      	strh	r2, [r3, #12]
}
 8005658:	bf00      	nop
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	3c23d70a 	.word	0x3c23d70a

08005664 <decode_CAN_0x101>:
void decode_CAN_0x101(const uint8_t *data, CAN_BMS_0x101_t *msg) {
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
    msg->Full_Capacity = ((data[0] << 8) | data[1]) * 0.01f;  // 10 mAh → Ah
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	021b      	lsls	r3, r3, #8
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	3201      	adds	r2, #1
 8005678:	7812      	ldrb	r2, [r2, #0]
 800567a:	4313      	orrs	r3, r2
 800567c:	4618      	mov	r0, r3
 800567e:	f7ff fabd 	bl	8004bfc <__aeabi_i2f>
 8005682:	4603      	mov	r3, r0
 8005684:	4917      	ldr	r1, [pc, #92]	@ (80056e4 <decode_CAN_0x101+0x80>)
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff fb0c 	bl	8004ca4 <__aeabi_fmul>
 800568c:	4603      	mov	r3, r0
 800568e:	461a      	mov	r2, r3
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	601a      	str	r2, [r3, #0]
    msg->No_Cycles        = (data[2] << 8) | data[3];
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	3302      	adds	r3, #2
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	b21b      	sxth	r3, r3
 800569c:	021b      	lsls	r3, r3, #8
 800569e:	b21a      	sxth	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3303      	adds	r3, #3
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	b21b      	sxth	r3, r3
 80056a8:	4313      	orrs	r3, r2
 80056aa:	b21b      	sxth	r3, r3
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	809a      	strh	r2, [r3, #4]
    msg->RSOC          = (uint8_t)(((data[4] << 8) | data[5]) & 0xFF); // RSOC in %
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3305      	adds	r3, #5
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	80da      	strh	r2, [r3, #6]
    msg->CRC_Check        = (data[6] << 8) | data[7];
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	3306      	adds	r3, #6
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	b21b      	sxth	r3, r3
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	b21a      	sxth	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3307      	adds	r3, #7
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	b21b      	sxth	r3, r3
 80056d2:	4313      	orrs	r3, r2
 80056d4:	b21b      	sxth	r3, r3
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	811a      	strh	r2, [r3, #8]
}
 80056dc:	bf00      	nop
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	3c23d70a 	.word	0x3c23d70a

080056e8 <decode_CAN_0x103>:
    msg->cell_voltage[start_cell - 1] = (data[0] << 8) | data[1];
    msg->cell_voltage[start_cell] = (data[2] << 8) | data[3];
    msg->cell_voltage[start_cell + 1] = (data[4] << 8) | data[5];
    msg->crc_check = (data[6] << 8) | data[7];
}
void decode_CAN_0x103(const uint8_t *data, CAN_BMS_0x103_t *msg) {
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
    // Decode MOS tube status (Bytes 0-1)
    msg->FET_Control_Status = (data[0] << 8) | data[1];
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	b21b      	sxth	r3, r3
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	b21a      	sxth	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3301      	adds	r3, #1
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	b21b      	sxth	r3, r3
 8005704:	4313      	orrs	r3, r2
 8005706:	b21b      	sxth	r3, r3
 8005708:	b29a      	uxth	r2, r3
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	801a      	strh	r2, [r3, #0]
    // Decode Production date (Bytes 2-3)
    msg->Production_Date = (data[2] << 8) | data[3];
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3302      	adds	r3, #2
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	b21b      	sxth	r3, r3
 8005716:	021b      	lsls	r3, r3, #8
 8005718:	b21a      	sxth	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	3303      	adds	r3, #3
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	b21b      	sxth	r3, r3
 8005722:	4313      	orrs	r3, r2
 8005724:	b21a      	sxth	r2, r3
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	805a      	strh	r2, [r3, #2]
    // Decode Software version (Bytes 4-5)
    msg->Software_Version = (data[4] << 8) | data[5];
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3304      	adds	r3, #4
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	b21b      	sxth	r3, r3
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	b21a      	sxth	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	3305      	adds	r3, #5
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	b21b      	sxth	r3, r3
 800573e:	4313      	orrs	r3, r2
 8005740:	b21b      	sxth	r3, r3
 8005742:	b29a      	uxth	r2, r3
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	809a      	strh	r2, [r3, #4]
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3306      	adds	r3, #6
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	b21b      	sxth	r3, r3
 8005750:	021b      	lsls	r3, r3, #8
 8005752:	b21a      	sxth	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	3307      	adds	r3, #7
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	b21b      	sxth	r3, r3
 800575c:	4313      	orrs	r3, r2
 800575e:	b21b      	sxth	r3, r3
 8005760:	b29a      	uxth	r2, r3
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	80da      	strh	r2, [r3, #6]
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr

08005770 <decode_CAN_0x102>:
void decode_CAN_0x102(const uint8_t *data, CAN_BMS_0x102_t *msg) {
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
    // Decode equalization status for cells 1-16 (BYTE0 - BYTE1)
    uint16_t status_low_byte = (data[0] << 8) | data[1];
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	b21b      	sxth	r3, r3
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	b21a      	sxth	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3301      	adds	r3, #1
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	b21b      	sxth	r3, r3
 800578c:	4313      	orrs	r3, r2
 800578e:	b21b      	sxth	r3, r3
 8005790:	81fb      	strh	r3, [r7, #14]
    for (int i = 0; i < 16; ++i) {
 8005792:	2300      	movs	r3, #0
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e012      	b.n	80057be <decode_CAN_0x102+0x4e>
        msg->Equlization_Low_byte[i] = (status_low_byte >> i) & 1;
 8005798:	89fa      	ldrh	r2, [r7, #14]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	fa42 f303 	asr.w	r3, r2, r3
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bf14      	ite	ne
 80057a8:	2301      	movne	r3, #1
 80057aa:	2300      	moveq	r3, #0
 80057ac:	b2d9      	uxtb	r1, r3
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	4413      	add	r3, r2
 80057b4:	460a      	mov	r2, r1
 80057b6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 16; ++i) {
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	3301      	adds	r3, #1
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b0f      	cmp	r3, #15
 80057c2:	dde9      	ble.n	8005798 <decode_CAN_0x102+0x28>
    }
    // Decode equalization status for cells 17-33 (BYTE2 - BYTE3)
    uint16_t status_high_byte = (data[2] << 8) | data[3];
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3302      	adds	r3, #2
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	b21b      	sxth	r3, r3
 80057cc:	021b      	lsls	r3, r3, #8
 80057ce:	b21a      	sxth	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3303      	adds	r3, #3
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	b21b      	sxth	r3, r3
 80057d8:	4313      	orrs	r3, r2
 80057da:	b21b      	sxth	r3, r3
 80057dc:	81bb      	strh	r3, [r7, #12]
    for (int i = 0; i < 17; ++i) {
 80057de:	2300      	movs	r3, #0
 80057e0:	613b      	str	r3, [r7, #16]
 80057e2:	e011      	b.n	8005808 <decode_CAN_0x102+0x98>
        msg->Equlization_Low_byte[16 + i] = (status_high_byte >> i) & 1;
 80057e4:	89ba      	ldrh	r2, [r7, #12]
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	fa42 f303 	asr.w	r3, r2, r3
 80057ec:	f003 0201 	and.w	r2, r3, #1
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	3310      	adds	r3, #16
 80057f4:	2a00      	cmp	r2, #0
 80057f6:	bf14      	ite	ne
 80057f8:	2201      	movne	r2, #1
 80057fa:	2200      	moveq	r2, #0
 80057fc:	b2d1      	uxtb	r1, r2
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < 17; ++i) {
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	3301      	adds	r3, #1
 8005806:	613b      	str	r3, [r7, #16]
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	2b10      	cmp	r3, #16
 800580c:	ddea      	ble.n	80057e4 <decode_CAN_0x102+0x74>
    }
    // Decode protection status (BYTE4 - BYTE5)
    msg->Protection_Status = (data[4] << 8) | data[5];
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3304      	adds	r3, #4
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	b21b      	sxth	r3, r3
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	b21a      	sxth	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3305      	adds	r3, #5
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	b21b      	sxth	r3, r3
 8005822:	4313      	orrs	r3, r2
 8005824:	b21b      	sxth	r3, r3
 8005826:	b29a      	uxth	r2, r3
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	845a      	strh	r2, [r3, #34]	@ 0x22
    // Decode CRC_16 check value (BYTE6 - BYTE7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3306      	adds	r3, #6
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	b21b      	sxth	r3, r3
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	b21a      	sxth	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3307      	adds	r3, #7
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	b21b      	sxth	r3, r3
 8005840:	4313      	orrs	r3, r2
 8005842:	b21b      	sxth	r3, r3
 8005844:	b29a      	uxth	r2, r3
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	bc80      	pop	{r7}
 8005852:	4770      	bx	lr

08005854 <decode_CAN_0x104>:
void decode_CAN_0x104(const uint8_t *data, CAN_BMS_0x104_t *msg) {
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
    // Decode Number of battery strings (BYTE0)
    msg->Number_Of_Battery_Strings = data[0];
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	781a      	ldrb	r2, [r3, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	701a      	strb	r2, [r3, #0]
    // Decode Number of NTC probes (BYTE1)
    msg->NTC_Number_Probes = data[1];
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3301      	adds	r3, #1
 800586a:	781a      	ldrb	r2, [r3, #0]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	705a      	strb	r2, [r3, #1]
    // Decode CRC_16 check value (Bytes 2-3)
    // Assuming a 16-bit CRC value from bytes 2 and 3
    msg->CRC_Check = (data[2] << 8) | data[3];
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3302      	adds	r3, #2
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	b21b      	sxth	r3, r3
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	b21a      	sxth	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3303      	adds	r3, #3
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	b21b      	sxth	r3, r3
 8005884:	4313      	orrs	r3, r2
 8005886:	b21b      	sxth	r3, r3
 8005888:	b29a      	uxth	r2, r3
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	805a      	strh	r2, [r3, #2]
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr

08005898 <decode_CAN_0x105>:
void decode_CAN_0x105(const uint8_t *data, CAN_BMS_0x105_t *msg) {
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
    // Decode temperature value of NTC1 (Bytes 0-1)
    // The raw value is in 0.1K.
    // Convert to Celsius: (Value * 0.1) - 273.15
    uint16_t raw_ntc1_temp = (data[0] << 8) | data[1];
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	b21b      	sxth	r3, r3
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	b21a      	sxth	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3301      	adds	r3, #1
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	b21b      	sxth	r3, r3
 80058b4:	4313      	orrs	r3, r2
 80058b6:	b21b      	sxth	r3, r3
 80058b8:	81fb      	strh	r3, [r7, #14]
    msg->NTC1 = (raw_ntc1_temp * 0.1f) - 273.15f;
 80058ba:	89fb      	ldrh	r3, [r7, #14]
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff f99d 	bl	8004bfc <__aeabi_i2f>
 80058c2:	4603      	mov	r3, r0
 80058c4:	492e      	ldr	r1, [pc, #184]	@ (8005980 <decode_CAN_0x105+0xe8>)
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff f9ec 	bl	8004ca4 <__aeabi_fmul>
 80058cc:	4603      	mov	r3, r0
 80058ce:	492d      	ldr	r1, [pc, #180]	@ (8005984 <decode_CAN_0x105+0xec>)
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff f8dd 	bl	8004a90 <__aeabi_fsub>
 80058d6:	4603      	mov	r3, r0
 80058d8:	461a      	mov	r2, r3
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	601a      	str	r2, [r3, #0]
    // Decode temperature value of NTC2 (Bytes 2-3)
    uint16_t raw_ntc2_temp = (data[2] << 8) | data[3];
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	3302      	adds	r3, #2
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	b21b      	sxth	r3, r3
 80058e6:	021b      	lsls	r3, r3, #8
 80058e8:	b21a      	sxth	r2, r3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3303      	adds	r3, #3
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	b21b      	sxth	r3, r3
 80058f2:	4313      	orrs	r3, r2
 80058f4:	b21b      	sxth	r3, r3
 80058f6:	81bb      	strh	r3, [r7, #12]
    msg->NTC2 = (raw_ntc2_temp * 0.1f) - 273.15f;
 80058f8:	89bb      	ldrh	r3, [r7, #12]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff f97e 	bl	8004bfc <__aeabi_i2f>
 8005900:	4603      	mov	r3, r0
 8005902:	491f      	ldr	r1, [pc, #124]	@ (8005980 <decode_CAN_0x105+0xe8>)
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff f9cd 	bl	8004ca4 <__aeabi_fmul>
 800590a:	4603      	mov	r3, r0
 800590c:	491d      	ldr	r1, [pc, #116]	@ (8005984 <decode_CAN_0x105+0xec>)
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff f8be 	bl	8004a90 <__aeabi_fsub>
 8005914:	4603      	mov	r3, r0
 8005916:	461a      	mov	r2, r3
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	605a      	str	r2, [r3, #4]
    // Decode temperature value of NTC3 (Bytes 4-5)
    uint16_t raw_ntc3_temp = (data[4] << 8) | data[5];
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	b21b      	sxth	r3, r3
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	b21a      	sxth	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3305      	adds	r3, #5
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	b21b      	sxth	r3, r3
 8005930:	4313      	orrs	r3, r2
 8005932:	b21b      	sxth	r3, r3
 8005934:	817b      	strh	r3, [r7, #10]
    msg->NTC3 = (raw_ntc3_temp * 0.1f) - 273.15f;
 8005936:	897b      	ldrh	r3, [r7, #10]
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff f95f 	bl	8004bfc <__aeabi_i2f>
 800593e:	4603      	mov	r3, r0
 8005940:	490f      	ldr	r1, [pc, #60]	@ (8005980 <decode_CAN_0x105+0xe8>)
 8005942:	4618      	mov	r0, r3
 8005944:	f7ff f9ae 	bl	8004ca4 <__aeabi_fmul>
 8005948:	4603      	mov	r3, r0
 800594a:	490e      	ldr	r1, [pc, #56]	@ (8005984 <decode_CAN_0x105+0xec>)
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff f89f 	bl	8004a90 <__aeabi_fsub>
 8005952:	4603      	mov	r3, r0
 8005954:	461a      	mov	r2, r3
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	609a      	str	r2, [r3, #8]
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3306      	adds	r3, #6
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	b21b      	sxth	r3, r3
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	b21a      	sxth	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3307      	adds	r3, #7
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	b21b      	sxth	r3, r3
 800596e:	4313      	orrs	r3, r2
 8005970:	b21b      	sxth	r3, r3
 8005972:	b29a      	uxth	r2, r3
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	819a      	strh	r2, [r3, #12]

}
 8005978:	bf00      	nop
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	3dcccccd 	.word	0x3dcccccd
 8005984:	43889333 	.word	0x43889333

08005988 <decode_CAN_0x106>:
void decode_CAN_0x106(const uint8_t *data, CAN_BMS_0x106_t *msg) {
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
    // Decode temperature value of NTC4 (Bytes 0-1)
    // The raw value is in 0.1K.
    // Convert to Celsius: (Value * 0.1) - 273.15
    uint16_t raw_ntc4_temp = (data[0] << 8) | data[1];
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	b21b      	sxth	r3, r3
 8005998:	021b      	lsls	r3, r3, #8
 800599a:	b21a      	sxth	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3301      	adds	r3, #1
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	b21b      	sxth	r3, r3
 80059a4:	4313      	orrs	r3, r2
 80059a6:	b21b      	sxth	r3, r3
 80059a8:	81fb      	strh	r3, [r7, #14]
    msg->NTC4 = (raw_ntc4_temp * 0.1f) - 273.15f;
 80059aa:	89fb      	ldrh	r3, [r7, #14]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7ff f925 	bl	8004bfc <__aeabi_i2f>
 80059b2:	4603      	mov	r3, r0
 80059b4:	492e      	ldr	r1, [pc, #184]	@ (8005a70 <decode_CAN_0x106+0xe8>)
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff f974 	bl	8004ca4 <__aeabi_fmul>
 80059bc:	4603      	mov	r3, r0
 80059be:	492d      	ldr	r1, [pc, #180]	@ (8005a74 <decode_CAN_0x106+0xec>)
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff f865 	bl	8004a90 <__aeabi_fsub>
 80059c6:	4603      	mov	r3, r0
 80059c8:	461a      	mov	r2, r3
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	601a      	str	r2, [r3, #0]
    // Decode temperature value of NTC5 (Bytes 2-3)
    uint16_t raw_ntc5_temp = (data[2] << 8) | data[3];
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3302      	adds	r3, #2
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	b21b      	sxth	r3, r3
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	b21a      	sxth	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3303      	adds	r3, #3
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	b21b      	sxth	r3, r3
 80059e2:	4313      	orrs	r3, r2
 80059e4:	b21b      	sxth	r3, r3
 80059e6:	81bb      	strh	r3, [r7, #12]
    msg->NTC5 = (raw_ntc5_temp * 0.1f) - 273.15f;
 80059e8:	89bb      	ldrh	r3, [r7, #12]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff f906 	bl	8004bfc <__aeabi_i2f>
 80059f0:	4603      	mov	r3, r0
 80059f2:	491f      	ldr	r1, [pc, #124]	@ (8005a70 <decode_CAN_0x106+0xe8>)
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff f955 	bl	8004ca4 <__aeabi_fmul>
 80059fa:	4603      	mov	r3, r0
 80059fc:	491d      	ldr	r1, [pc, #116]	@ (8005a74 <decode_CAN_0x106+0xec>)
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7ff f846 	bl	8004a90 <__aeabi_fsub>
 8005a04:	4603      	mov	r3, r0
 8005a06:	461a      	mov	r2, r3
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	605a      	str	r2, [r3, #4]
    // Decode temperature value of NTC6 (Bytes 4-5)
    uint16_t raw_ntc6_temp = (data[4] << 8) | data[5];
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	b21b      	sxth	r3, r3
 8005a14:	021b      	lsls	r3, r3, #8
 8005a16:	b21a      	sxth	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3305      	adds	r3, #5
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	b21b      	sxth	r3, r3
 8005a20:	4313      	orrs	r3, r2
 8005a22:	b21b      	sxth	r3, r3
 8005a24:	817b      	strh	r3, [r7, #10]
    msg->NTC6 = (raw_ntc6_temp * 0.1f) - 273.15f;
 8005a26:	897b      	ldrh	r3, [r7, #10]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff f8e7 	bl	8004bfc <__aeabi_i2f>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	490f      	ldr	r1, [pc, #60]	@ (8005a70 <decode_CAN_0x106+0xe8>)
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff f936 	bl	8004ca4 <__aeabi_fmul>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	490e      	ldr	r1, [pc, #56]	@ (8005a74 <decode_CAN_0x106+0xec>)
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff f827 	bl	8004a90 <__aeabi_fsub>
 8005a42:	4603      	mov	r3, r0
 8005a44:	461a      	mov	r2, r3
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	609a      	str	r2, [r3, #8]
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3306      	adds	r3, #6
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	b21b      	sxth	r3, r3
 8005a52:	021b      	lsls	r3, r3, #8
 8005a54:	b21a      	sxth	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3307      	adds	r3, #7
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	b21b      	sxth	r3, r3
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	b21b      	sxth	r3, r3
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	819a      	strh	r2, [r3, #12]
}
 8005a68:	bf00      	nop
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	3dcccccd 	.word	0x3dcccccd
 8005a74:	43889333 	.word	0x43889333

08005a78 <decode_CAN_0x107>:
void decode_CAN_0x107(const uint8_t *data, CAN_BMS_0x107_t *msg) {
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
    // Decode Cell1 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
	cells_array[0]= msg->CELL1 = (float)((uint16_t)(data[0] << 8) | data[1])/1000.f;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	021b      	lsls	r3, r3, #8
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff f8b1 	bl	8004bfc <__aeabi_i2f>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	492a      	ldr	r1, [pc, #168]	@ (8005b48 <decode_CAN_0x107+0xd0>)
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff f9b4 	bl	8004e0c <__aeabi_fdiv>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a26      	ldr	r2, [pc, #152]	@ (8005b4c <decode_CAN_0x107+0xd4>)
 8005ab2:	6013      	str	r3, [r2, #0]
    // Decode Cell2 voltage (Bytes 2-3)
	cells_array[1]=msg->CELL2 = (float)((uint16_t)(data[2] << 8) | data[3])/1000.0f;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3302      	adds	r3, #2
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	021b      	lsls	r3, r3, #8
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	461a      	mov	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3303      	adds	r3, #3
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff f897 	bl	8004bfc <__aeabi_i2f>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	491d      	ldr	r1, [pc, #116]	@ (8005b48 <decode_CAN_0x107+0xd0>)
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7ff f99a 	bl	8004e0c <__aeabi_fdiv>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	461a      	mov	r2, r3
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	605a      	str	r2, [r3, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	4a19      	ldr	r2, [pc, #100]	@ (8005b4c <decode_CAN_0x107+0xd4>)
 8005ae6:	6053      	str	r3, [r2, #4]
    // Decode Cell3 voltage (Bytes 4-5)
	cells_array[2]=msg->CELL3 = (float)((uint16_t)(data[4] << 8) | data[5])/1000.0f;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3304      	adds	r3, #4
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	461a      	mov	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3305      	adds	r3, #5
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff f87d 	bl	8004bfc <__aeabi_i2f>
 8005b02:	4603      	mov	r3, r0
 8005b04:	4910      	ldr	r1, [pc, #64]	@ (8005b48 <decode_CAN_0x107+0xd0>)
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7ff f980 	bl	8004e0c <__aeabi_fdiv>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	461a      	mov	r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	609a      	str	r2, [r3, #8]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	4a0c      	ldr	r2, [pc, #48]	@ (8005b4c <decode_CAN_0x107+0xd4>)
 8005b1a:	6093      	str	r3, [r2, #8]
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3306      	adds	r3, #6
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	b21b      	sxth	r3, r3
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	b21a      	sxth	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	3307      	adds	r3, #7
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	b21b      	sxth	r3, r3
 8005b30:	4313      	orrs	r3, r2
 8005b32:	b21b      	sxth	r3, r3
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	819a      	strh	r2, [r3, #12]
    ar[0]=true;
 8005b3a:	4b05      	ldr	r3, [pc, #20]	@ (8005b50 <decode_CAN_0x107+0xd8>)
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	701a      	strb	r2, [r3, #0]
}
 8005b40:	bf00      	nop
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	447a0000 	.word	0x447a0000
 8005b4c:	200002fc 	.word	0x200002fc
 8005b50:	20000004 	.word	0x20000004

08005b54 <decode_CAN_0x108>:

void decode_CAN_0x108(const uint8_t *data, CAN_BMS_0x108_t *msg) {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
    // Decode Cell4 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
	cells_array[3]=msg->CELL4 =  (float)((uint16_t)(data[0] << 8) | data[1])/1000.f;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	021b      	lsls	r3, r3, #8
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7ff f843 	bl	8004bfc <__aeabi_i2f>
 8005b76:	4603      	mov	r3, r0
 8005b78:	492c      	ldr	r1, [pc, #176]	@ (8005c2c <decode_CAN_0x108+0xd8>)
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff f946 	bl	8004e0c <__aeabi_fdiv>
 8005b80:	4603      	mov	r3, r0
 8005b82:	461a      	mov	r2, r3
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a28      	ldr	r2, [pc, #160]	@ (8005c30 <decode_CAN_0x108+0xdc>)
 8005b8e:	60d3      	str	r3, [r2, #12]

    // Decode Cell5 voltage (Bytes 2-3)
	cells_array[4]=msg->CELL5 =(float)(uint16_t)((data[2] << 8) | data[3])/1000.0f;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3302      	adds	r3, #2
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	b21b      	sxth	r3, r3
 8005b98:	021b      	lsls	r3, r3, #8
 8005b9a:	b21a      	sxth	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3303      	adds	r3, #3
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	b21b      	sxth	r3, r3
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	b21b      	sxth	r3, r3
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff f822 	bl	8004bf4 <__aeabi_ui2f>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	491e      	ldr	r1, [pc, #120]	@ (8005c2c <decode_CAN_0x108+0xd8>)
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7ff f929 	bl	8004e0c <__aeabi_fdiv>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	605a      	str	r2, [r3, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8005c30 <decode_CAN_0x108+0xdc>)
 8005bc8:	6113      	str	r3, [r2, #16]
    // Decode Cell6 voltage (Bytes 4-5)
	cells_array[5]=msg->CELL6 = (float)((uint16_t)(data[4] << 8) | data[5])/1000.0f;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3304      	adds	r3, #4
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	021b      	lsls	r3, r3, #8
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3305      	adds	r3, #5
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7ff f80c 	bl	8004bfc <__aeabi_i2f>
 8005be4:	4603      	mov	r3, r0
 8005be6:	4911      	ldr	r1, [pc, #68]	@ (8005c2c <decode_CAN_0x108+0xd8>)
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff f90f 	bl	8004e0c <__aeabi_fdiv>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	609a      	str	r2, [r3, #8]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	4a0d      	ldr	r2, [pc, #52]	@ (8005c30 <decode_CAN_0x108+0xdc>)
 8005bfc:	6153      	str	r3, [r2, #20]

    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	3306      	adds	r3, #6
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	b21b      	sxth	r3, r3
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	b21a      	sxth	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3307      	adds	r3, #7
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	b21b      	sxth	r3, r3
 8005c12:	4313      	orrs	r3, r2
 8005c14:	b21b      	sxth	r3, r3
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	819a      	strh	r2, [r3, #12]
    ar[1]=true;
 8005c1c:	4b05      	ldr	r3, [pc, #20]	@ (8005c34 <decode_CAN_0x108+0xe0>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	705a      	strb	r2, [r3, #1]
}
 8005c22:	bf00      	nop
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	447a0000 	.word	0x447a0000
 8005c30:	200002fc 	.word	0x200002fc
 8005c34:	20000004 	.word	0x20000004

08005c38 <decode_CAN_0x109>:
void decode_CAN_0x109(const uint8_t *data, CAN_BMS_0x109_t *msg) {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
    // Decode Cell6 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
	cells_array[6]=msg->CELL7 = (float)((uint16_t)(data[0] << 8) | data[1])/1000.f;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7fe ffd1 	bl	8004bfc <__aeabi_i2f>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	492a      	ldr	r1, [pc, #168]	@ (8005d08 <decode_CAN_0x109+0xd0>)
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff f8d4 	bl	8004e0c <__aeabi_fdiv>
 8005c64:	4603      	mov	r3, r0
 8005c66:	461a      	mov	r2, r3
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a26      	ldr	r2, [pc, #152]	@ (8005d0c <decode_CAN_0x109+0xd4>)
 8005c72:	6193      	str	r3, [r2, #24]
    // Decode Cell7 voltage (Bytes 2-3)
	cells_array[7]=msg->CELL8 = (float)((uint16_t)(data[2] << 8) | data[3])/1000.0f;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3302      	adds	r3, #2
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3303      	adds	r3, #3
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fe ffb7 	bl	8004bfc <__aeabi_i2f>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	491d      	ldr	r1, [pc, #116]	@ (8005d08 <decode_CAN_0x109+0xd0>)
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff f8ba 	bl	8004e0c <__aeabi_fdiv>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	605a      	str	r2, [r3, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	4a19      	ldr	r2, [pc, #100]	@ (8005d0c <decode_CAN_0x109+0xd4>)
 8005ca6:	61d3      	str	r3, [r2, #28]

    // Decode Cell8 voltage (Bytes 4-5)
	cells_array[8]=msg->CELL9 = (float)((uint16_t)(data[4] << 8) | data[5])/1000.0f;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3304      	adds	r3, #4
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	021b      	lsls	r3, r3, #8
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	3305      	adds	r3, #5
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fe ff9d 	bl	8004bfc <__aeabi_i2f>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	4910      	ldr	r1, [pc, #64]	@ (8005d08 <decode_CAN_0x109+0xd0>)
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7ff f8a0 	bl	8004e0c <__aeabi_fdiv>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	461a      	mov	r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	609a      	str	r2, [r3, #8]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8005d0c <decode_CAN_0x109+0xd4>)
 8005cda:	6213      	str	r3, [r2, #32]

    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	3306      	adds	r3, #6
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	b21b      	sxth	r3, r3
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	b21a      	sxth	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3307      	adds	r3, #7
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	b21b      	sxth	r3, r3
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	b21b      	sxth	r3, r3
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	819a      	strh	r2, [r3, #12]
    ar[2]=true;
 8005cfa:	4b05      	ldr	r3, [pc, #20]	@ (8005d10 <decode_CAN_0x109+0xd8>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	709a      	strb	r2, [r3, #2]
}
 8005d00:	bf00      	nop
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	447a0000 	.word	0x447a0000
 8005d0c:	200002fc 	.word	0x200002fc
 8005d10:	20000004 	.word	0x20000004

08005d14 <decode_CAN_0x10A>:
void decode_CAN_0x10A(const uint8_t *data, CAN_BMS_0x10A_t *msg) {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
    // Decode Cell10 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
	cells_array[9]= msg->CELL10 =  (float)((uint16_t)(data[0] << 8) | data[1])/1000.f;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	461a      	mov	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7fe ff63 	bl	8004bfc <__aeabi_i2f>
 8005d36:	4603      	mov	r3, r0
 8005d38:	492a      	ldr	r1, [pc, #168]	@ (8005de4 <decode_CAN_0x10A+0xd0>)
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff f866 	bl	8004e0c <__aeabi_fdiv>
 8005d40:	4603      	mov	r3, r0
 8005d42:	461a      	mov	r2, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a26      	ldr	r2, [pc, #152]	@ (8005de8 <decode_CAN_0x10A+0xd4>)
 8005d4e:	6253      	str	r3, [r2, #36]	@ 0x24
    // Decode Cell11 voltage (Bytes 2-3)
	cells_array[10]=msg->CELL11 = (float)((uint16_t)(data[2] << 8) | data[3])/1000.0f;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3302      	adds	r3, #2
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	3303      	adds	r3, #3
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fe ff49 	bl	8004bfc <__aeabi_i2f>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	491d      	ldr	r1, [pc, #116]	@ (8005de4 <decode_CAN_0x10A+0xd0>)
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff f84c 	bl	8004e0c <__aeabi_fdiv>
 8005d74:	4603      	mov	r3, r0
 8005d76:	461a      	mov	r2, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	605a      	str	r2, [r3, #4]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	4a19      	ldr	r2, [pc, #100]	@ (8005de8 <decode_CAN_0x10A+0xd4>)
 8005d82:	6293      	str	r3, [r2, #40]	@ 0x28
    // Decode Cell12 voltage (Bytes 4-5)
	cells_array[11]=msg->CELL12 = (float)((uint16_t)(data[4] << 8) | data[5])/1000.0f;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	3304      	adds	r3, #4
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	021b      	lsls	r3, r3, #8
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3305      	adds	r3, #5
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fe ff2f 	bl	8004bfc <__aeabi_i2f>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	4910      	ldr	r1, [pc, #64]	@ (8005de4 <decode_CAN_0x10A+0xd0>)
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff f832 	bl	8004e0c <__aeabi_fdiv>
 8005da8:	4603      	mov	r3, r0
 8005daa:	461a      	mov	r2, r3
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	609a      	str	r2, [r3, #8]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	4a0c      	ldr	r2, [pc, #48]	@ (8005de8 <decode_CAN_0x10A+0xd4>)
 8005db6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3306      	adds	r3, #6
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	b21b      	sxth	r3, r3
 8005dc0:	021b      	lsls	r3, r3, #8
 8005dc2:	b21a      	sxth	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3307      	adds	r3, #7
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	b21b      	sxth	r3, r3
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	b21b      	sxth	r3, r3
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	819a      	strh	r2, [r3, #12]
    ar[3]=true;
 8005dd6:	4b05      	ldr	r3, [pc, #20]	@ (8005dec <decode_CAN_0x10A+0xd8>)
 8005dd8:	2201      	movs	r2, #1
 8005dda:	70da      	strb	r2, [r3, #3]
}
 8005ddc:	bf00      	nop
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	447a0000 	.word	0x447a0000
 8005de8:	200002fc 	.word	0x200002fc
 8005dec:	20000004 	.word	0x20000004

08005df0 <decode_CAN_0x10B>:
void decode_CAN_0x10B(const uint8_t *data, CAN_BMS_0x10B_t *msg) {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
    // Decode Cell13 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
	cells_array[12]=msg->CELL13 =  (float)((uint16_t)(data[0] << 8) | data[1])/1000.f;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	021b      	lsls	r3, r3, #8
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3301      	adds	r3, #1
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fe fef5 	bl	8004bfc <__aeabi_i2f>
 8005e12:	4603      	mov	r3, r0
 8005e14:	492a      	ldr	r1, [pc, #168]	@ (8005ec0 <decode_CAN_0x10B+0xd0>)
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe fff8 	bl	8004e0c <__aeabi_fdiv>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	461a      	mov	r2, r3
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a26      	ldr	r2, [pc, #152]	@ (8005ec4 <decode_CAN_0x10B+0xd4>)
 8005e2a:	6313      	str	r3, [r2, #48]	@ 0x30
    // Decode Cell14 voltage (Bytes 2-3)
	cells_array[13]=msg->CELL14 = (float)((uint16_t)(data[2] << 8) | data[3])/1000.0f;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3302      	adds	r3, #2
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	021b      	lsls	r3, r3, #8
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	461a      	mov	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3303      	adds	r3, #3
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fe fedb 	bl	8004bfc <__aeabi_i2f>
 8005e46:	4603      	mov	r3, r0
 8005e48:	491d      	ldr	r1, [pc, #116]	@ (8005ec0 <decode_CAN_0x10B+0xd0>)
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe ffde 	bl	8004e0c <__aeabi_fdiv>
 8005e50:	4603      	mov	r3, r0
 8005e52:	461a      	mov	r2, r3
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	605a      	str	r2, [r3, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	4a19      	ldr	r2, [pc, #100]	@ (8005ec4 <decode_CAN_0x10B+0xd4>)
 8005e5e:	6353      	str	r3, [r2, #52]	@ 0x34
    // Decode Cell15 voltage (Bytes 4-5)
	cells_array[14]=msg->CELL15 = (float)((uint16_t)(data[4] << 8) | data[5])/1000.0f;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3304      	adds	r3, #4
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	021b      	lsls	r3, r3, #8
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3305      	adds	r3, #5
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fe fec1 	bl	8004bfc <__aeabi_i2f>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	4910      	ldr	r1, [pc, #64]	@ (8005ec0 <decode_CAN_0x10B+0xd0>)
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe ffc4 	bl	8004e0c <__aeabi_fdiv>
 8005e84:	4603      	mov	r3, r0
 8005e86:	461a      	mov	r2, r3
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	609a      	str	r2, [r3, #8]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	4a0c      	ldr	r2, [pc, #48]	@ (8005ec4 <decode_CAN_0x10B+0xd4>)
 8005e92:	6393      	str	r3, [r2, #56]	@ 0x38
    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3306      	adds	r3, #6
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	b21b      	sxth	r3, r3
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	b21a      	sxth	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3307      	adds	r3, #7
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	b21b      	sxth	r3, r3
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	b21b      	sxth	r3, r3
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	819a      	strh	r2, [r3, #12]
    ar[4]=true;
 8005eb2:	4b05      	ldr	r3, [pc, #20]	@ (8005ec8 <decode_CAN_0x10B+0xd8>)
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	711a      	strb	r2, [r3, #4]
}
 8005eb8:	bf00      	nop
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	447a0000 	.word	0x447a0000
 8005ec4:	200002fc 	.word	0x200002fc
 8005ec8:	20000004 	.word	0x20000004

08005ecc <decode_CAN_0x10C>:
void decode_CAN_0x10C(const uint8_t *data, CAN_BMS_0x10C_t *msg) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
    // Decode Cell16 voltage (Bytes 0-1)
    // The value is unsigned and in mV. "High byte first" means big-endian.
	cells_array[15]=msg->CELL16 =  (float)((uint16_t)(data[0] << 8) | data[1])/1000.f;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	021b      	lsls	r3, r3, #8
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	461a      	mov	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fe fe87 	bl	8004bfc <__aeabi_i2f>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	491f      	ldr	r1, [pc, #124]	@ (8005f70 <decode_CAN_0x10C+0xa4>)
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fe ff8a 	bl	8004e0c <__aeabi_fdiv>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	461a      	mov	r2, r3
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1b      	ldr	r2, [pc, #108]	@ (8005f74 <decode_CAN_0x10C+0xa8>)
 8005f06:	63d3      	str	r3, [r2, #60]	@ 0x3c

    // Decode Cell17 voltage (Bytes 2-3)
    msg->CELL17 = (float)((uint8_t)(data[2] << 8) | data[3])/1000.0f;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3303      	adds	r3, #3
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fe fe74 	bl	8004bfc <__aeabi_i2f>
 8005f14:	4603      	mov	r3, r0
 8005f16:	4916      	ldr	r1, [pc, #88]	@ (8005f70 <decode_CAN_0x10C+0xa4>)
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fe ff77 	bl	8004e0c <__aeabi_fdiv>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	461a      	mov	r2, r3
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	605a      	str	r2, [r3, #4]

    // Decode Cell3 voltage (Bytes 4-5)
    msg->CELL18 = (float)((uint8_t)(data[4] << 8) | data[5])/1000.0f;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3305      	adds	r3, #5
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fe fe65 	bl	8004bfc <__aeabi_i2f>
 8005f32:	4603      	mov	r3, r0
 8005f34:	490e      	ldr	r1, [pc, #56]	@ (8005f70 <decode_CAN_0x10C+0xa4>)
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fe ff68 	bl	8004e0c <__aeabi_fdiv>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	461a      	mov	r2, r3
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	609a      	str	r2, [r3, #8]

    // Decode CRC_16 check value (Bytes 6-7)
    msg->CRC_Check = (data[6] << 8) | data[7];
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3306      	adds	r3, #6
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	b21b      	sxth	r3, r3
 8005f4c:	021b      	lsls	r3, r3, #8
 8005f4e:	b21a      	sxth	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	3307      	adds	r3, #7
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	b21b      	sxth	r3, r3
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	b21b      	sxth	r3, r3
 8005f5c:	b29a      	uxth	r2, r3
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	819a      	strh	r2, [r3, #12]
    ar[5]=true;
 8005f62:	4b05      	ldr	r3, [pc, #20]	@ (8005f78 <decode_CAN_0x10C+0xac>)
 8005f64:	2201      	movs	r2, #1
 8005f66:	715a      	strb	r2, [r3, #5]
}
 8005f68:	bf00      	nop
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	447a0000 	.word	0x447a0000
 8005f74:	200002fc 	.word	0x200002fc
 8005f78:	20000004 	.word	0x20000004

08005f7c <matel_mcu_process_can_frame>:
#include"MCU_ELECTROCATLYST.h"
#include"can.h"
#include"uart.h"
extern void jump_to_bootloader();
DBC_AllMessages_t msg;
void matel_mcu_process_can_frame(can_frame_t *frame){
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
	switch(frame->id){
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a4f      	ldr	r2, [pc, #316]	@ (80060c8 <matel_mcu_process_can_frame+0x14c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	f000 8089 	beq.w	80060a2 <matel_mcu_process_can_frame+0x126>
 8005f90:	4a4d      	ldr	r2, [pc, #308]	@ (80060c8 <matel_mcu_process_can_frame+0x14c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	f200 8094 	bhi.w	80060c0 <matel_mcu_process_can_frame+0x144>
 8005f98:	4a4c      	ldr	r2, [pc, #304]	@ (80060cc <matel_mcu_process_can_frame+0x150>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d073      	beq.n	8006086 <matel_mcu_process_can_frame+0x10a>
 8005f9e:	4a4b      	ldr	r2, [pc, #300]	@ (80060cc <matel_mcu_process_can_frame+0x150>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	f200 808d 	bhi.w	80060c0 <matel_mcu_process_can_frame+0x144>
 8005fa6:	2bb3      	cmp	r3, #179	@ 0xb3
 8005fa8:	d830      	bhi.n	800600c <matel_mcu_process_can_frame+0x90>
 8005faa:	2ba1      	cmp	r3, #161	@ 0xa1
 8005fac:	f0c0 8088 	bcc.w	80060c0 <matel_mcu_process_can_frame+0x144>
 8005fb0:	3ba1      	subs	r3, #161	@ 0xa1
 8005fb2:	2b12      	cmp	r3, #18
 8005fb4:	f200 8084 	bhi.w	80060c0 <matel_mcu_process_can_frame+0x144>
 8005fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fc0 <matel_mcu_process_can_frame+0x44>)
 8005fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbe:	bf00      	nop
 8005fc0:	08006017 	.word	0x08006017
 8005fc4:	080060c1 	.word	0x080060c1
 8005fc8:	080060c1 	.word	0x080060c1
 8005fcc:	080060c1 	.word	0x080060c1
 8005fd0:	080060c1 	.word	0x080060c1
 8005fd4:	080060c1 	.word	0x080060c1
 8005fd8:	080060c1 	.word	0x080060c1
 8005fdc:	080060c1 	.word	0x080060c1
 8005fe0:	080060c1 	.word	0x080060c1
 8005fe4:	080060c1 	.word	0x080060c1
 8005fe8:	080060c1 	.word	0x080060c1
 8005fec:	080060c1 	.word	0x080060c1
 8005ff0:	080060c1 	.word	0x080060c1
 8005ff4:	08006033 	.word	0x08006033
 8005ff8:	0800604f 	.word	0x0800604f
 8005ffc:	080060c1 	.word	0x080060c1
 8006000:	080060c1 	.word	0x080060c1
 8006004:	080060c1 	.word	0x080060c1
 8006008:	0800606b 	.word	0x0800606b
 800600c:	f241 2234 	movw	r2, #4660	@ 0x1234
 8006010:	4293      	cmp	r3, r2
 8006012:	d052      	beq.n	80060ba <matel_mcu_process_can_frame+0x13e>
	 case 0x1234:jump_to_bootloader();
		 	 	 break;

	}

}
 8006014:	e054      	b.n	80060c0 <matel_mcu_process_can_frame+0x144>
	case Matel_MCU_POWER_CAN_STD_ID_A1:decode_MCU_POWER_One(frame->data,&msg.MCU_POWER_One);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3307      	adds	r3, #7
 800601a:	492d      	ldr	r1, [pc, #180]	@ (80060d0 <matel_mcu_process_can_frame+0x154>)
 800601c:	4618      	mov	r0, r3
 800601e:	f000 fc0f 	bl	8006840 <decode_MCU_POWER_One>
	                              msg.MCU_POWER_One.rx_or_not=1;
 8006022:	4a2c      	ldr	r2, [pc, #176]	@ (80060d4 <matel_mcu_process_can_frame+0x158>)
 8006024:	f892 31f8 	ldrb.w	r3, [r2, #504]	@ 0x1f8
 8006028:	f043 0301 	orr.w	r3, r3, #1
 800602c:	f882 31f8 	strb.w	r3, [r2, #504]	@ 0x1f8
		                                break;
 8006030:	e046      	b.n	80060c0 <matel_mcu_process_can_frame+0x144>
	case Matel_MCU_FAULT_one_CAN_STD_ID_AE:decode_MCU_FAULT_One(frame->data, &msg.MCU_FAULT_One);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3307      	adds	r3, #7
 8006036:	4928      	ldr	r1, [pc, #160]	@ (80060d8 <matel_mcu_process_can_frame+0x15c>)
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fa68 	bl	800650e <decode_MCU_FAULT_One>
                                  msg.MCU_FAULT_One.rx_or_not=1;
 800603e:	4a25      	ldr	r2, [pc, #148]	@ (80060d4 <matel_mcu_process_can_frame+0x158>)
 8006040:	f892 31c8 	ldrb.w	r3, [r2, #456]	@ 0x1c8
 8006044:	f043 0301 	orr.w	r3, r3, #1
 8006048:	f882 31c8 	strb.w	r3, [r2, #456]	@ 0x1c8
		                                  break;
 800604c:	e038      	b.n	80060c0 <matel_mcu_process_can_frame+0x144>
	case Matel_MCU_FAULT_two_CAN_STD_ID_AF:decode_MCU_FAULT_two(frame->data,&msg.MCU_FAULT_two);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	3307      	adds	r3, #7
 8006052:	4922      	ldr	r1, [pc, #136]	@ (80060dc <matel_mcu_process_can_frame+0x160>)
 8006054:	4618      	mov	r0, r3
 8006056:	f000 faf8 	bl	800664a <decode_MCU_FAULT_two>
                                   msg.MCU_FAULT_two.rx_or_not=1;
 800605a:	4a1e      	ldr	r2, [pc, #120]	@ (80060d4 <matel_mcu_process_can_frame+0x158>)
 800605c:	f892 3184 	ldrb.w	r3, [r2, #388]	@ 0x184
 8006060:	f043 0301 	orr.w	r3, r3, #1
 8006064:	f882 3184 	strb.w	r3, [r2, #388]	@ 0x184
		                                  break;
 8006068:	e02a      	b.n	80060c0 <matel_mcu_process_can_frame+0x144>
	case Matel_MCU_Fault_Code_CAN_STD_ID_B3:decode_MCU_Fault_Code(frame->data, &msg.MCU_Fault_Code);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3307      	adds	r3, #7
 800606e:	491c      	ldr	r1, [pc, #112]	@ (80060e0 <matel_mcu_process_can_frame+0x164>)
 8006070:	4618      	mov	r0, r3
 8006072:	f000 f96f 	bl	8006354 <decode_MCU_Fault_Code>
                                    msg.MCU_Fault_Code.rx_or_not=1;
 8006076:	4a17      	ldr	r2, [pc, #92]	@ (80060d4 <matel_mcu_process_can_frame+0x158>)
 8006078:	f892 3080 	ldrb.w	r3, [r2, #128]	@ 0x80
 800607c:	f043 0301 	orr.w	r3, r3, #1
 8006080:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
		                                   break;
 8006084:	e01c      	b.n	80060c0 <matel_mcu_process_can_frame+0x144>
	case Matel_MCU_Stat_One_CAN_EXTD_ID_18265040:decode_MCU_Stat_One(frame->data, &msg.MCU_Stat_One);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3307      	adds	r3, #7
 800608a:	4916      	ldr	r1, [pc, #88]	@ (80060e4 <matel_mcu_process_can_frame+0x168>)
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fb73 	bl	8006778 <decode_MCU_Stat_One>
                                     msg.MCU_Stat_One.rx_or_not=1;
 8006092:	4a10      	ldr	r2, [pc, #64]	@ (80060d4 <matel_mcu_process_can_frame+0x158>)
 8006094:	f892 3140 	ldrb.w	r3, [r2, #320]	@ 0x140
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	f882 3140 	strb.w	r3, [r2, #320]	@ 0x140
		                                  break;
 80060a0:	e00e      	b.n	80060c0 <matel_mcu_process_can_frame+0x144>
	case Matel_MCU_Stat_Two_CAN_EXTD_ID_18275040:decode_MCU_Stat_Two(frame->data, &msg.MCU_Stat_Two);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3307      	adds	r3, #7
 80060a6:	490b      	ldr	r1, [pc, #44]	@ (80060d4 <matel_mcu_process_can_frame+0x158>)
 80060a8:	4618      	mov	r0, r3
 80060aa:	f000 f8f9 	bl	80062a0 <decode_MCU_Stat_Two>
                                 msg.MCU_Stat_Two.rx_or_not=1;
 80060ae:	4a09      	ldr	r2, [pc, #36]	@ (80060d4 <matel_mcu_process_can_frame+0x158>)
 80060b0:	7e13      	ldrb	r3, [r2, #24]
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	7613      	strb	r3, [r2, #24]
		                                       break;
 80060b8:	e002      	b.n	80060c0 <matel_mcu_process_can_frame+0x144>
	 case 0x1234:jump_to_bootloader();
 80060ba:	f7ff f8f3 	bl	80052a4 <jump_to_bootloader>
		 	 	 break;
 80060be:	bf00      	nop
}
 80060c0:	bf00      	nop
 80060c2:	3708      	adds	r7, #8
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	18275040 	.word	0x18275040
 80060cc:	18265040 	.word	0x18265040
 80060d0:	20000510 	.word	0x20000510
 80060d4:	20000340 	.word	0x20000340
 80060d8:	200004c8 	.word	0x200004c8
 80060dc:	20000488 	.word	0x20000488
 80060e0:	20000360 	.word	0x20000360
 80060e4:	20000460 	.word	0x20000460

080060e8 <extract_motorola_u64>:
	uint64_t mask = (~0ULL) << len;
	return (int64_t)(v | mask);
	}
	return (int64_t)v;
}
static uint64_t extract_motorola_u64(const uint8_t *data, int start, int len) {
 80060e8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80060ec:	b08b      	sub	sp, #44	@ 0x2c
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	607a      	str	r2, [r7, #4]
	if (len <= 0 || len > 64) return 0;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	dd02      	ble.n	8006102 <extract_motorola_u64+0x1a>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b40      	cmp	r3, #64	@ 0x40
 8006100:	dd04      	ble.n	800610c <extract_motorola_u64+0x24>
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	e051      	b.n	80061b0 <extract_motorola_u64+0xc8>
	uint64_t value = 0;
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	e9c7 2308 	strd	r2, r3, [r7, #32]
	int cur_byte = start / 8;
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	da00      	bge.n	8006120 <extract_motorola_u64+0x38>
 800611e:	3307      	adds	r3, #7
 8006120:	10db      	asrs	r3, r3, #3
 8006122:	61fb      	str	r3, [r7, #28]
	int cur_bit = start % 8; // 7 = MSB of byte
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	425a      	negs	r2, r3
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	f002 0207 	and.w	r2, r2, #7
 8006130:	bf58      	it	pl
 8006132:	4253      	negpl	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < len; i++) {
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
 800613a:	e033      	b.n	80061a4 <extract_motorola_u64+0xbc>
	uint8_t bit = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	74fb      	strb	r3, [r7, #19]
	if (cur_byte >= 0 && cur_byte < 8) bit = (data[cur_byte] >> cur_bit) & 1U;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	2b00      	cmp	r3, #0
 8006144:	db0e      	blt.n	8006164 <extract_motorola_u64+0x7c>
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	2b07      	cmp	r3, #7
 800614a:	dc0b      	bgt.n	8006164 <extract_motorola_u64+0x7c>
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	4413      	add	r3, r2
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	fa42 f303 	asr.w	r3, r2, r3
 800615c:	b2db      	uxtb	r3, r3
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	74fb      	strb	r3, [r7, #19]
	value = (value << 1) | (uint64_t)bit;
 8006164:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006168:	eb12 0a02 	adds.w	sl, r2, r2
 800616c:	eb43 0b03 	adc.w	fp, r3, r3
 8006170:	4652      	mov	r2, sl
 8006172:	465b      	mov	r3, fp
 8006174:	7cf9      	ldrb	r1, [r7, #19]
 8006176:	2000      	movs	r0, #0
 8006178:	460c      	mov	r4, r1
 800617a:	4605      	mov	r5, r0
 800617c:	ea42 0804 	orr.w	r8, r2, r4
 8006180:	ea43 0905 	orr.w	r9, r3, r5
 8006184:	e9c7 8908 	strd	r8, r9, [r7, #32]
	cur_bit--;
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	3b01      	subs	r3, #1
 800618c:	61bb      	str	r3, [r7, #24]
	if (cur_bit < 0) { cur_byte++; cur_bit = 7; }
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	da04      	bge.n	800619e <extract_motorola_u64+0xb6>
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	3301      	adds	r3, #1
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	2307      	movs	r3, #7
 800619c:	61bb      	str	r3, [r7, #24]
	for (int i = 0; i < len; i++) {
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	3301      	adds	r3, #1
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	dbc7      	blt.n	800613c <extract_motorola_u64+0x54>
	}
	return value;
 80061ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 80061b0:	4610      	mov	r0, r2
 80061b2:	4619      	mov	r1, r3
 80061b4:	372c      	adds	r7, #44	@ 0x2c
 80061b6:	46bd      	mov	sp, r7
 80061b8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80061bc:	4770      	bx	lr

080061be <extract_little_endian_u64>:
static uint64_t extract_little_endian_u64(const uint8_t *data, int start, int len) {
 80061be:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80061c2:	b08d      	sub	sp, #52	@ 0x34
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
if (len <= 0 || len > 64) return 0;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	dd02      	ble.n	80061d8 <extract_little_endian_u64+0x1a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b40      	cmp	r3, #64	@ 0x40
 80061d6:	dd04      	ble.n	80061e2 <extract_little_endian_u64+0x24>
 80061d8:	f04f 0200 	mov.w	r2, #0
 80061dc:	f04f 0300 	mov.w	r3, #0
 80061e0:	e056      	b.n	8006290 <extract_little_endian_u64+0xd2>
uint64_t value = 0;
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	f04f 0300 	mov.w	r3, #0
 80061ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
for (int i = 0; i < len; i++) {
 80061ee:	2300      	movs	r3, #0
 80061f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80061f2:	e047      	b.n	8006284 <extract_little_endian_u64+0xc6>
int bit_index = start + i;
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f8:	4413      	add	r3, r2
 80061fa:	61fb      	str	r3, [r7, #28]
int byte_index = bit_index / 8;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	da00      	bge.n	8006204 <extract_little_endian_u64+0x46>
 8006202:	3307      	adds	r3, #7
 8006204:	10db      	asrs	r3, r3, #3
 8006206:	61bb      	str	r3, [r7, #24]
int bit_in_byte = bit_index % 8;
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	425a      	negs	r2, r3
 800620c:	f003 0307 	and.w	r3, r3, #7
 8006210:	f002 0207 	and.w	r2, r2, #7
 8006214:	bf58      	it	pl
 8006216:	4253      	negpl	r3, r2
 8006218:	617b      	str	r3, [r7, #20]
uint8_t bit = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
if (byte_index >= 0 && byte_index < 8) bit = (data[byte_index] >> bit_in_byte) & 1U;
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2b00      	cmp	r3, #0
 8006224:	db0f      	blt.n	8006246 <extract_little_endian_u64+0x88>
 8006226:	69bb      	ldr	r3, [r7, #24]
 8006228:	2b07      	cmp	r3, #7
 800622a:	dc0c      	bgt.n	8006246 <extract_little_endian_u64+0x88>
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4413      	add	r3, r2
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	fa42 f303 	asr.w	r3, r2, r3
 800623c:	b2db      	uxtb	r3, r3
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
value |= ((uint64_t)bit << i);
 8006246:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800624a:	2200      	movs	r2, #0
 800624c:	4698      	mov	r8, r3
 800624e:	4691      	mov	r9, r2
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	f1a3 0120 	sub.w	r1, r3, #32
 8006256:	f1c3 0220 	rsb	r2, r3, #32
 800625a:	fa09 f503 	lsl.w	r5, r9, r3
 800625e:	fa08 f101 	lsl.w	r1, r8, r1
 8006262:	430d      	orrs	r5, r1
 8006264:	fa28 f202 	lsr.w	r2, r8, r2
 8006268:	4315      	orrs	r5, r2
 800626a:	fa08 f403 	lsl.w	r4, r8, r3
 800626e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006272:	ea42 0a04 	orr.w	sl, r2, r4
 8006276:	ea43 0b05 	orr.w	fp, r3, r5
 800627a:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
for (int i = 0; i < len; i++) {
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	3301      	adds	r3, #1
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24
 8006284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	429a      	cmp	r2, r3
 800628a:	dbb3      	blt.n	80061f4 <extract_little_endian_u64+0x36>
}
return value;
 800628c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
}
 8006290:	4610      	mov	r0, r2
 8006292:	4619      	mov	r1, r3
 8006294:	3734      	adds	r7, #52	@ 0x34
 8006296:	46bd      	mov	sp, r7
 8006298:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800629c:	4770      	bx	lr
	...

080062a0 <decode_MCU_Stat_Two>:

// Implementations of decode functions follow (using extract helpers)


void decode_MCU_Stat_Two(const uint8_t *data, MCU_Stat_Two_t *out) {
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
	if (!out) return;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d044      	beq.n	800633a <decode_MCU_Stat_Two+0x9a>
	uint64_t raw0 = extract_little_endian_u64(data, 32, 32);
 80062b0:	2220      	movs	r2, #32
 80062b2:	2120      	movs	r1, #32
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f7ff ff82 	bl	80061be <extract_little_endian_u64>
 80062ba:	e9c7 0106 	strd	r0, r1, [r7, #24]
	out->MCU_Odometer_Val = (double)raw0 * 0.1 + 0.0;
 80062be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80062c2:	f7fe f8d3 	bl	800446c <__aeabi_ul2d>
 80062c6:	a320      	add	r3, pc, #128	@ (adr r3, 8006348 <decode_MCU_Stat_Two+0xa8>)
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f7fe f904 	bl	80044d8 <__aeabi_dmul>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4610      	mov	r0, r2
 80062d6:	4619      	mov	r1, r3
 80062d8:	f04f 0200 	mov.w	r2, #0
 80062dc:	f04f 0300 	mov.w	r3, #0
 80062e0:	f7fd ff44 	bl	800416c <__adddf3>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	6839      	ldr	r1, [r7, #0]
 80062ea:	e9c1 2300 	strd	r2, r3, [r1]
	uint64_t raw1 = extract_little_endian_u64(data, 16, 16);
 80062ee:	2210      	movs	r2, #16
 80062f0:	2110      	movs	r1, #16
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7ff ff63 	bl	80061be <extract_little_endian_u64>
 80062f8:	e9c7 0104 	strd	r0, r1, [r7, #16]
	out->MCU_VCU_State = (double)raw1;
 80062fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006300:	f7fe f8b4 	bl	800446c <__aeabi_ul2d>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	uint64_t raw2 = extract_little_endian_u64(data, 0, 16);
 800630e:	2210      	movs	r2, #16
 8006310:	2100      	movs	r1, #0
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7ff ff53 	bl	80061be <extract_little_endian_u64>
 8006318:	e9c7 0102 	strd	r0, r1, [r7, #8]
	out->MCU_Motor_RPM = (double)raw2  -16384.0;
 800631c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006320:	f7fe f8a4 	bl	800446c <__aeabi_ul2d>
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	4b09      	ldr	r3, [pc, #36]	@ (8006350 <decode_MCU_Stat_Two+0xb0>)
 800632a:	f7fd ff1d 	bl	8004168 <__aeabi_dsub>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	6839      	ldr	r1, [r7, #0]
 8006334:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8006338:	e000      	b.n	800633c <decode_MCU_Stat_Two+0x9c>
	if (!out) return;
 800633a:	bf00      	nop
}
 800633c:	3720      	adds	r7, #32
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	f3af 8000 	nop.w
 8006348:	9999999a 	.word	0x9999999a
 800634c:	3fb99999 	.word	0x3fb99999
 8006350:	40d00000 	.word	0x40d00000

08006354 <decode_MCU_Fault_Code>:


void decode_MCU_Fault_Code(const uint8_t *data, MCU_Fault_Code_t *out) {
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
	if (!out) return;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	f000 80d0 	beq.w	8006506 <decode_MCU_Fault_Code+0x1b2>
	// sequential 8-bit little-endian signals
	out->MCU_Fault_Code_0 = (int)extract_motorola_u64(data, 30, 1);
 8006366:	2201      	movs	r2, #1
 8006368:	211e      	movs	r1, #30
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7ff febc 	bl	80060e8 <extract_motorola_u64>
 8006370:	4602      	mov	r2, r0
 8006372:	460b      	mov	r3, r1
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	601a      	str	r2, [r3, #0]
	out->MCU_Fault_Code_1 = (int)extract_motorola_u64(data, 31, 1);
 8006378:	2201      	movs	r2, #1
 800637a:	211f      	movs	r1, #31
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff feb3 	bl	80060e8 <extract_motorola_u64>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	605a      	str	r2, [r3, #4]
	out->MCU_Fault_Code_2 = (int)extract_motorola_u64(data, 16,1);
 800638a:	2201      	movs	r2, #1
 800638c:	2110      	movs	r1, #16
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff feaa 	bl	80060e8 <extract_motorola_u64>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	609a      	str	r2, [r3, #8]
	out->MCU_Fault_Code_3 = (int)extract_motorola_u64(data, 17, 1);
 800639c:	2201      	movs	r2, #1
 800639e:	2111      	movs	r1, #17
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff fea1 	bl	80060e8 <extract_motorola_u64>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	60da      	str	r2, [r3, #12]
	out->MCU_Fault_Code_4 = (int)extract_motorola_u64(data, 18, 1);
 80063ae:	2201      	movs	r2, #1
 80063b0:	2112      	movs	r1, #18
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7ff fe98 	bl	80060e8 <extract_motorola_u64>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	611a      	str	r2, [r3, #16]
	out->MCU_Fault_Code_5 = (int)extract_motorola_u64(data, 19, 1);
 80063c0:	2201      	movs	r2, #1
 80063c2:	2113      	movs	r1, #19
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7ff fe8f 	bl	80060e8 <extract_motorola_u64>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	615a      	str	r2, [r3, #20]
	out->MCU_Fault_Code_6 = (int)extract_motorola_u64(data, 20, 1);
 80063d2:	2201      	movs	r2, #1
 80063d4:	2114      	movs	r1, #20
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7ff fe86 	bl	80060e8 <extract_motorola_u64>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	619a      	str	r2, [r3, #24]
	out->MCU_Fault_Code_7 = (int)extract_motorola_u64(data, 21, 1);
 80063e4:	2201      	movs	r2, #1
 80063e6:	2115      	movs	r1, #21
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7ff fe7d 	bl	80060e8 <extract_motorola_u64>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	61da      	str	r2, [r3, #28]
	out->MCU_Fault_Code_8 = (int)extract_motorola_u64(data, 22, 1);
 80063f6:	2201      	movs	r2, #1
 80063f8:	2116      	movs	r1, #22
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7ff fe74 	bl	80060e8 <extract_motorola_u64>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	621a      	str	r2, [r3, #32]
	out->MCU_Fault_Code_9 = (int)extract_motorola_u64(data,23, 1);
 8006408:	2201      	movs	r2, #1
 800640a:	2117      	movs	r1, #23
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff fe6b 	bl	80060e8 <extract_motorola_u64>
 8006412:	4602      	mov	r2, r0
 8006414:	460b      	mov	r3, r1
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	625a      	str	r2, [r3, #36]	@ 0x24
	out->MCU_Fault_Code_10 = (int)extract_motorola_u64(data, 8, 1);
 800641a:	2201      	movs	r2, #1
 800641c:	2108      	movs	r1, #8
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7ff fe62 	bl	80060e8 <extract_motorola_u64>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	629a      	str	r2, [r3, #40]	@ 0x28
	out->MCU_Fault_Code_11 = (int)extract_motorola_u64(data, 9, 1);
 800642c:	2201      	movs	r2, #1
 800642e:	2109      	movs	r1, #9
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff fe59 	bl	80060e8 <extract_motorola_u64>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	62da      	str	r2, [r3, #44]	@ 0x2c
	out->MCU_Fault_Code_12 = (int)extract_motorola_u64(data, 10, 1);
 800643e:	2201      	movs	r2, #1
 8006440:	210a      	movs	r1, #10
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7ff fe50 	bl	80060e8 <extract_motorola_u64>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	631a      	str	r2, [r3, #48]	@ 0x30
	out->MCU_Fault_Code_13 = (int)extract_motorola_u64(data, 11, 1);
 8006450:	2201      	movs	r2, #1
 8006452:	210b      	movs	r1, #11
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff fe47 	bl	80060e8 <extract_motorola_u64>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	635a      	str	r2, [r3, #52]	@ 0x34
	out->MCU_Fault_Code_14 = (int)extract_motorola_u64(data, 12, 1);
 8006462:	2201      	movs	r2, #1
 8006464:	210c      	movs	r1, #12
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7ff fe3e 	bl	80060e8 <extract_motorola_u64>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	639a      	str	r2, [r3, #56]	@ 0x38
	out->MCU_Fault_Code_15 = (int)extract_motorola_u64(data, 13, 1);
 8006474:	2201      	movs	r2, #1
 8006476:	210d      	movs	r1, #13
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7ff fe35 	bl	80060e8 <extract_motorola_u64>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	63da      	str	r2, [r3, #60]	@ 0x3c
	out->MCU_Fault_Code_16 = (int)extract_motorola_u64(data, 14, 1);
 8006486:	2201      	movs	r2, #1
 8006488:	210e      	movs	r1, #14
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff fe2c 	bl	80060e8 <extract_motorola_u64>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	641a      	str	r2, [r3, #64]	@ 0x40
	out->MCU_Fault_Code_17 = (int)extract_motorola_u64(data, 15, 1);
 8006498:	2201      	movs	r2, #1
 800649a:	210f      	movs	r1, #15
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff fe23 	bl	80060e8 <extract_motorola_u64>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	645a      	str	r2, [r3, #68]	@ 0x44
	out->MCU_Fault_Code_18 = (int)extract_motorola_u64(data, 0, 1);
 80064aa:	2201      	movs	r2, #1
 80064ac:	2100      	movs	r1, #0
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff fe1a 	bl	80060e8 <extract_motorola_u64>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	649a      	str	r2, [r3, #72]	@ 0x48
	out->MCU_Fault_Code_19 = (int)extract_motorola_u64(data, 7, 3);
 80064bc:	2203      	movs	r2, #3
 80064be:	2107      	movs	r1, #7
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff fe11 	bl	80060e8 <extract_motorola_u64>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	64da      	str	r2, [r3, #76]	@ 0x4c
	out->MCU_Fault_Code_20 = (int)extract_motorola_u64(data, 1, 1);
 80064ce:	2201      	movs	r2, #1
 80064d0:	2101      	movs	r1, #1
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7ff fe08 	bl	80060e8 <extract_motorola_u64>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	651a      	str	r2, [r3, #80]	@ 0x50
	out->MCU_Fault_Code_21 = (int)extract_motorola_u64(data, 2,1);
 80064e0:	2201      	movs	r2, #1
 80064e2:	2102      	movs	r1, #2
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff fdff 	bl	80060e8 <extract_motorola_u64>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	655a      	str	r2, [r3, #84]	@ 0x54
	out->MCU_Fault_Code_22 = (int)extract_motorola_u64(data, 4, 3);
 80064f2:	2203      	movs	r2, #3
 80064f4:	2104      	movs	r1, #4
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff fdf6 	bl	80060e8 <extract_motorola_u64>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	659a      	str	r2, [r3, #88]	@ 0x58
 8006504:	e000      	b.n	8006508 <decode_MCU_Fault_Code+0x1b4>
	if (!out) return;
 8006506:	bf00      	nop

}
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <decode_MCU_FAULT_One>:
void decode_MCU_FAULT_One(const uint8_t *data, MCU_FAULT_One_t *out) {
 800650e:	b580      	push	{r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]
if (!out) return;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8091 	beq.w	8006642 <decode_MCU_FAULT_One+0x134>
out->MCU_FAULT_One_sig0 = (int)extract_motorola_u64(data, 27, 1);
 8006520:	2201      	movs	r2, #1
 8006522:	211b      	movs	r1, #27
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff fddf 	bl	80060e8 <extract_motorola_u64>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	601a      	str	r2, [r3, #0]
out->MCU_FAULT_One_sig1 = (int)extract_motorola_u64(data, 28, 1);
 8006532:	2201      	movs	r2, #1
 8006534:	211c      	movs	r1, #28
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff fdd6 	bl	80060e8 <extract_motorola_u64>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	605a      	str	r2, [r3, #4]
out->MCU_FAULT_One_sig2 = (int)extract_motorola_u64(data, 39, 1);
 8006544:	2201      	movs	r2, #1
 8006546:	2127      	movs	r1, #39	@ 0x27
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff fdcd 	bl	80060e8 <extract_motorola_u64>
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	609a      	str	r2, [r3, #8]
out->MCU_FAULT_One_sig3 = (int)extract_motorola_u64(data, 4, 1);
 8006556:	2201      	movs	r2, #1
 8006558:	2104      	movs	r1, #4
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7ff fdc4 	bl	80060e8 <extract_motorola_u64>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	60da      	str	r2, [r3, #12]
out->MCU_FAULT_One_sig4 = (int)extract_motorola_u64(data, 2, 1);
 8006568:	2201      	movs	r2, #1
 800656a:	2102      	movs	r1, #2
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff fdbb 	bl	80060e8 <extract_motorola_u64>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	611a      	str	r2, [r3, #16]
out->MCU_FAULT_One_sig5 = (int)extract_motorola_u64(data, 18, 6);
 800657a:	2206      	movs	r2, #6
 800657c:	2112      	movs	r1, #18
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff fdb2 	bl	80060e8 <extract_motorola_u64>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	615a      	str	r2, [r3, #20]
out->MCU_FAULT_One_sig6 = (int)extract_motorola_u64(data, 6, 1);
 800658c:	2201      	movs	r2, #1
 800658e:	2106      	movs	r1, #6
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f7ff fda9 	bl	80060e8 <extract_motorola_u64>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	619a      	str	r2, [r3, #24]
out->MCU_FAULT_One_sig7 = (int)extract_motorola_u64(data, 9, 2);
 800659e:	2202      	movs	r2, #2
 80065a0:	2109      	movs	r1, #9
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7ff fda0 	bl	80060e8 <extract_motorola_u64>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	61da      	str	r2, [r3, #28]
out->MCU_FAULT_One_sig8 = (int)extract_motorola_u64(data, 11, 2);
 80065b0:	2202      	movs	r2, #2
 80065b2:	210b      	movs	r1, #11
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f7ff fd97 	bl	80060e8 <extract_motorola_u64>
 80065ba:	4602      	mov	r2, r0
 80065bc:	460b      	mov	r3, r1
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	621a      	str	r2, [r3, #32]
out->MCU_FAULT_One_sig9 = (int)extract_motorola_u64(data, 1, 1);
 80065c2:	2201      	movs	r2, #1
 80065c4:	2101      	movs	r1, #1
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff fd8e 	bl	80060e8 <extract_motorola_u64>
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	625a      	str	r2, [r3, #36]	@ 0x24
out->MCU_FAULT_One_sig10 = (int)extract_motorola_u64(data, 21, 1);
 80065d4:	2201      	movs	r2, #1
 80065d6:	2115      	movs	r1, #21
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f7ff fd85 	bl	80060e8 <extract_motorola_u64>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	629a      	str	r2, [r3, #40]	@ 0x28
out->MCU_FAULT_One_sig11 = (int)extract_motorola_u64(data, 7, 1);
 80065e6:	2201      	movs	r2, #1
 80065e8:	2107      	movs	r1, #7
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff fd7c 	bl	80060e8 <extract_motorola_u64>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	62da      	str	r2, [r3, #44]	@ 0x2c
out->MCU_FAULT_One_sig12 = (int)extract_motorola_u64(data, 15, 4);
 80065f8:	2204      	movs	r2, #4
 80065fa:	210f      	movs	r1, #15
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f7ff fd73 	bl	80060e8 <extract_motorola_u64>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	631a      	str	r2, [r3, #48]	@ 0x30
out->MCU_FAULT_One_sig13 = (int)extract_motorola_u64(data, 23, 2);
 800660a:	2202      	movs	r2, #2
 800660c:	2117      	movs	r1, #23
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7ff fd6a 	bl	80060e8 <extract_motorola_u64>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	635a      	str	r2, [r3, #52]	@ 0x34
out->MCU_FAULT_One_sig14 = (int)extract_motorola_u64(data, 3, 1);
 800661c:	2201      	movs	r2, #1
 800661e:	2103      	movs	r1, #3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff fd61 	bl	80060e8 <extract_motorola_u64>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	639a      	str	r2, [r3, #56]	@ 0x38
out->MCU_FAULT_One_sig15 = (int)extract_motorola_u64(data, 5, 1);
 800662e:	2201      	movs	r2, #1
 8006630:	2105      	movs	r1, #5
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7ff fd58 	bl	80060e8 <extract_motorola_u64>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006640:	e000      	b.n	8006644 <decode_MCU_FAULT_One+0x136>
if (!out) return;
 8006642:	bf00      	nop
}
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <decode_MCU_FAULT_two>:
void decode_MCU_FAULT_two(const uint8_t *data, MCU_FAULT_two_t *out) {
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]
if (!out) return;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 8088 	beq.w	800676c <decode_MCU_FAULT_two+0x122>
	out->MCU_FAULT_two_sig0 = (int)extract_motorola_u64(data, 9, 3);
 800665c:	2203      	movs	r2, #3
 800665e:	2109      	movs	r1, #9
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff fd41 	bl	80060e8 <extract_motorola_u64>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	601a      	str	r2, [r3, #0]
	out->MCU_FAULT_two_sig1 = (int)extract_motorola_u64(data, 10, 1);
 800666e:	2201      	movs	r2, #1
 8006670:	210a      	movs	r1, #10
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7ff fd38 	bl	80060e8 <extract_motorola_u64>
 8006678:	4602      	mov	r2, r0
 800667a:	460b      	mov	r3, r1
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	605a      	str	r2, [r3, #4]
	out->MCU_FAULT_two_sig2 = (int)extract_motorola_u64(data, 11, 1);
 8006680:	2201      	movs	r2, #1
 8006682:	210b      	movs	r1, #11
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff fd2f 	bl	80060e8 <extract_motorola_u64>
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	609a      	str	r2, [r3, #8]
	out->MCU_FAULT_two_sig3 = (int)extract_motorola_u64(data, 12, 1);
 8006692:	2201      	movs	r2, #1
 8006694:	210c      	movs	r1, #12
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff fd26 	bl	80060e8 <extract_motorola_u64>
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	60da      	str	r2, [r3, #12]
	out->MCU_FAULT_two_sig4 = (int)extract_motorola_u64(data, 13, 1);
 80066a4:	2201      	movs	r2, #1
 80066a6:	210d      	movs	r1, #13
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7ff fd1d 	bl	80060e8 <extract_motorola_u64>
 80066ae:	4602      	mov	r2, r0
 80066b0:	460b      	mov	r3, r1
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	611a      	str	r2, [r3, #16]
	out->MCU_FAULT_two_sig5 = (int)extract_motorola_u64(data, 14, 1);
 80066b6:	2201      	movs	r2, #1
 80066b8:	210e      	movs	r1, #14
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff fd14 	bl	80060e8 <extract_motorola_u64>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	615a      	str	r2, [r3, #20]
	out->MCU_FAULT_two_sig6 = (int)extract_motorola_u64(data, 15, 1);
 80066c8:	2201      	movs	r2, #1
 80066ca:	210f      	movs	r1, #15
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f7ff fd0b 	bl	80060e8 <extract_motorola_u64>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	619a      	str	r2, [r3, #24]
	out->MCU_FAULT_two_sig7 = (int)extract_motorola_u64(data, 0, 1);
 80066da:	2201      	movs	r2, #1
 80066dc:	2100      	movs	r1, #0
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff fd02 	bl	80060e8 <extract_motorola_u64>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	61da      	str	r2, [r3, #28]
	out->MCU_FAULT_two_sig8 = (int)extract_motorola_u64(data, 1, 1);
 80066ec:	2201      	movs	r2, #1
 80066ee:	2101      	movs	r1, #1
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff fcf9 	bl	80060e8 <extract_motorola_u64>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	621a      	str	r2, [r3, #32]
	out->MCU_FAULT_two_sig9 = (int)extract_motorola_u64(data, 2, 1);
 80066fe:	2201      	movs	r2, #1
 8006700:	2102      	movs	r1, #2
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff fcf0 	bl	80060e8 <extract_motorola_u64>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	625a      	str	r2, [r3, #36]	@ 0x24
	out->MCU_FAULT_two_sig10 = (int)extract_motorola_u64(data, 3, 1);
 8006710:	2201      	movs	r2, #1
 8006712:	2103      	movs	r1, #3
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff fce7 	bl	80060e8 <extract_motorola_u64>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	629a      	str	r2, [r3, #40]	@ 0x28
	out->MCU_FAULT_two_sig11 = (int)extract_motorola_u64(data, 4, 1);
 8006722:	2201      	movs	r2, #1
 8006724:	2104      	movs	r1, #4
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff fcde 	bl	80060e8 <extract_motorola_u64>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	62da      	str	r2, [r3, #44]	@ 0x2c
	out->MCU_FAULT_two_sig12 = (int)extract_motorola_u64(data, 5, 1);
 8006734:	2201      	movs	r2, #1
 8006736:	2105      	movs	r1, #5
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff fcd5 	bl	80060e8 <extract_motorola_u64>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	631a      	str	r2, [r3, #48]	@ 0x30
	out->MCU_FAULT_two_sig13 = (int)extract_motorola_u64(data, 6, 1);
 8006746:	2201      	movs	r2, #1
 8006748:	2106      	movs	r1, #6
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff fccc 	bl	80060e8 <extract_motorola_u64>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	635a      	str	r2, [r3, #52]	@ 0x34
	out->MCU_FAULT_two_sig14 = (int)extract_motorola_u64(data, 7, 1);
 8006758:	2201      	movs	r2, #1
 800675a:	2107      	movs	r1, #7
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7ff fcc3 	bl	80060e8 <extract_motorola_u64>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	639a      	str	r2, [r3, #56]	@ 0x38
 800676a:	e000      	b.n	800676e <decode_MCU_FAULT_two+0x124>
if (!out) return;
 800676c:	bf00      	nop

}
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	0000      	movs	r0, r0
	...

08006778 <decode_MCU_Stat_One>:
out->HeartBeat_Stat10 = (double)extract_little_endian_u64(data, 10, 1);
out->HeartBeat_Stat11 = (double)extract_little_endian_u64(data, 11, 1);
}


void decode_MCU_Stat_One(const uint8_t *data, MCU_Stat_One_t *out) {
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
	if (!out) return;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d051      	beq.n	800682c <decode_MCU_Stat_One+0xb4>
	out->MCU_Stat_One_sig0 = (int)extract_little_endian_u64(data, 8, 8)-40;
 8006788:	2208      	movs	r2, #8
 800678a:	2108      	movs	r1, #8
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7ff fd16 	bl	80061be <extract_little_endian_u64>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4613      	mov	r3, r2
 8006798:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	601a      	str	r2, [r3, #0]
	out->MCU_Stat_One_sig1 = (int)extract_little_endian_u64(data, 0, 8)-40;
 80067a0:	2208      	movs	r2, #8
 80067a2:	2100      	movs	r1, #0
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7ff fd0a 	bl	80061be <extract_little_endian_u64>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4613      	mov	r3, r2
 80067b0:	f1a3 0228 	sub.w	r2, r3, #40	@ 0x28
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	605a      	str	r2, [r3, #4]
	out->MCU_Stat_One_sig2 = (double)extract_little_endian_u64(data, 16, 16)*0.1;
 80067b8:	2210      	movs	r2, #16
 80067ba:	2110      	movs	r1, #16
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff fcfe 	bl	80061be <extract_little_endian_u64>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	4610      	mov	r0, r2
 80067c8:	4619      	mov	r1, r3
 80067ca:	f7fd fe4f 	bl	800446c <__aeabi_ul2d>
 80067ce:	a31a      	add	r3, pc, #104	@ (adr r3, 8006838 <decode_MCU_Stat_One+0xc0>)
 80067d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d4:	f7fd fe80 	bl	80044d8 <__aeabi_dmul>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	e9c1 2302 	strd	r2, r3, [r1, #8]
	out->MCU_Stat_One_sig3 = (int)extract_little_endian_u64(data, 56, 3);
 80067e2:	2203      	movs	r2, #3
 80067e4:	2138      	movs	r1, #56	@ 0x38
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff fce9 	bl	80061be <extract_little_endian_u64>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	611a      	str	r2, [r3, #16]
	out->MCU_Stat_One_sig4 = (int)extract_little_endian_u64(data, 48, 8);
 80067f4:	2208      	movs	r2, #8
 80067f6:	2130      	movs	r1, #48	@ 0x30
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff fce0 	bl	80061be <extract_little_endian_u64>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	615a      	str	r2, [r3, #20]
	out->MCU_Stat_One_sig5 = (int)extract_little_endian_u64(data, 40, 8);
 8006806:	2208      	movs	r2, #8
 8006808:	2128      	movs	r1, #40	@ 0x28
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff fcd7 	bl	80061be <extract_little_endian_u64>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	619a      	str	r2, [r3, #24]
	out->MCU_Stat_One_sig6 = (int)extract_little_endian_u64(data, 32, 8);
 8006818:	2208      	movs	r2, #8
 800681a:	2120      	movs	r1, #32
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff fcce 	bl	80061be <extract_little_endian_u64>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	61da      	str	r2, [r3, #28]
 800682a:	e000      	b.n	800682e <decode_MCU_Stat_One+0xb6>
	if (!out) return;
 800682c:	bf00      	nop
}
 800682e:	3708      	adds	r7, #8
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	f3af 8000 	nop.w
 8006838:	9999999a 	.word	0x9999999a
 800683c:	3fb99999 	.word	0x3fb99999

08006840 <decode_MCU_POWER_One>:


void decode_MCU_POWER_One(const uint8_t *data, MCU_POWER_One_t *out) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
//if (!out) return;

out->power_sig0 = (double)extract_motorola_u64(data, 38, 10)*0.1-37.3;
 800684a:	220a      	movs	r2, #10
 800684c:	2126      	movs	r1, #38	@ 0x26
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff fc4a 	bl	80060e8 <extract_motorola_u64>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4610      	mov	r0, r2
 800685a:	4619      	mov	r1, r3
 800685c:	f7fd fe06 	bl	800446c <__aeabi_ul2d>
 8006860:	a33b      	add	r3, pc, #236	@ (adr r3, 8006950 <decode_MCU_POWER_One+0x110>)
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	f7fd fe37 	bl	80044d8 <__aeabi_dmul>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	4610      	mov	r0, r2
 8006870:	4619      	mov	r1, r3
 8006872:	a339      	add	r3, pc, #228	@ (adr r3, 8006958 <decode_MCU_POWER_One+0x118>)
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f7fd fc76 	bl	8004168 <__aeabi_dsub>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	e9c1 2300 	strd	r2, r3, [r1]
out->power_sig1 = (double)extract_motorola_u64(data, 7, 10)*0.1;
 8006886:	220a      	movs	r2, #10
 8006888:	2107      	movs	r1, #7
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7ff fc2c 	bl	80060e8 <extract_motorola_u64>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	4610      	mov	r0, r2
 8006896:	4619      	mov	r1, r3
 8006898:	f7fd fde8 	bl	800446c <__aeabi_ul2d>
 800689c:	a32c      	add	r3, pc, #176	@ (adr r3, 8006950 <decode_MCU_POWER_One+0x110>)
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	f7fd fe19 	bl	80044d8 <__aeabi_dmul>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	6839      	ldr	r1, [r7, #0]
 80068ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
out->power_sig2 = (double)extract_motorola_u64(data, 16, 10)*0.1-65;
 80068b0:	220a      	movs	r2, #10
 80068b2:	2110      	movs	r1, #16
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f7ff fc17 	bl	80060e8 <extract_motorola_u64>
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	4610      	mov	r0, r2
 80068c0:	4619      	mov	r1, r3
 80068c2:	f7fd fdd3 	bl	800446c <__aeabi_ul2d>
 80068c6:	a322      	add	r3, pc, #136	@ (adr r3, 8006950 <decode_MCU_POWER_One+0x110>)
 80068c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068cc:	f7fd fe04 	bl	80044d8 <__aeabi_dmul>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	4610      	mov	r0, r2
 80068d6:	4619      	mov	r1, r3
 80068d8:	f04f 0200 	mov.w	r2, #0
 80068dc:	4b22      	ldr	r3, [pc, #136]	@ (8006968 <decode_MCU_POWER_One+0x128>)
 80068de:	f7fd fc43 	bl	8004168 <__aeabi_dsub>
 80068e2:	4602      	mov	r2, r0
 80068e4:	460b      	mov	r3, r1
 80068e6:	6839      	ldr	r1, [r7, #0]
 80068e8:	e9c1 2304 	strd	r2, r3, [r1, #16]
out->power_sig3 = (uint64_t)extract_motorola_u64(data, 44, 15)-16384;
 80068ec:	220f      	movs	r2, #15
 80068ee:	212c      	movs	r1, #44	@ 0x2c
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff fbf9 	bl	80060e8 <extract_motorola_u64>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	4613      	mov	r3, r2
 80068fc:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8006900:	461a      	mov	r2, r3
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	619a      	str	r2, [r3, #24]
out->power_sig4 = (double)extract_motorola_u64(data, 13, 13)*0.1-409.6;
 8006906:	220d      	movs	r2, #13
 8006908:	210d      	movs	r1, #13
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff fbec 	bl	80060e8 <extract_motorola_u64>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	4610      	mov	r0, r2
 8006916:	4619      	mov	r1, r3
 8006918:	f7fd fda8 	bl	800446c <__aeabi_ul2d>
 800691c:	a30c      	add	r3, pc, #48	@ (adr r3, 8006950 <decode_MCU_POWER_One+0x110>)
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	f7fd fdd9 	bl	80044d8 <__aeabi_dmul>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4610      	mov	r0, r2
 800692c:	4619      	mov	r1, r3
 800692e:	a30c      	add	r3, pc, #48	@ (adr r3, 8006960 <decode_MCU_POWER_One+0x120>)
 8006930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006934:	f7fd fc18 	bl	8004168 <__aeabi_dsub>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	e9c1 2308 	strd	r2, r3, [r1, #32]


}
 8006942:	bf00      	nop
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	f3af 8000 	nop.w
 8006950:	9999999a 	.word	0x9999999a
 8006954:	3fb99999 	.word	0x3fb99999
 8006958:	66666666 	.word	0x66666666
 800695c:	4042a666 	.word	0x4042a666
 8006960:	9999999a 	.word	0x9999999a
 8006964:	40799999 	.word	0x40799999
 8006968:	40504000 	.word	0x40504000

0800696c <Motor_control_pins_init>:
    GPIOB->CRL&=~((0xF<<0)|(0XF<<4)|(0XF<<12)|(0xf<<20));
    GPIOB->CRL|=((0x3<<0)|(0X3<<4)|(0X3<<12)|(0x3<<20));
    GPIOB->ODR&=~((1<<PB0_REVERSE)|(1<<PB1_NEUTRAL)|(1<<PB3_DRIVE)|(1<<PB5_SPORT));
    GPIOB->ODR|=((1<<PB1_NEUTRAL));
}
void Motor_control_pins_init(){
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8006970:	4b12      	ldr	r3, [pc, #72]	@ (80069bc <Motor_control_pins_init+0x50>)
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	4a11      	ldr	r2, [pc, #68]	@ (80069bc <Motor_control_pins_init+0x50>)
 8006976:	f043 0308 	orr.w	r3, r3, #8
 800697a:	6193      	str	r3, [r2, #24]
    GPIOB->CRL&=~((0x4<<0)|(0X4<<4)|(0X4<<12));
 800697c:	4b10      	ldr	r3, [pc, #64]	@ (80069c0 <Motor_control_pins_init+0x54>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a0f      	ldr	r2, [pc, #60]	@ (80069c0 <Motor_control_pins_init+0x54>)
 8006982:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006986:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800698a:	6013      	str	r3, [r2, #0]
    GPIOB->CRL|=((0x3<<0)|(0X3<<4)|(0X3<<12));
 800698c:	4b0c      	ldr	r3, [pc, #48]	@ (80069c0 <Motor_control_pins_init+0x54>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a0b      	ldr	r2, [pc, #44]	@ (80069c0 <Motor_control_pins_init+0x54>)
 8006992:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8006996:	f043 0333 	orr.w	r3, r3, #51	@ 0x33
 800699a:	6013      	str	r3, [r2, #0]
    GPIOB->ODR|=((1<<PB0_REVERSE)|(1<<PB1_NEUTRAL)|(1<<PB3_DRIVE));
 800699c:	4b08      	ldr	r3, [pc, #32]	@ (80069c0 <Motor_control_pins_init+0x54>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	4a07      	ldr	r2, [pc, #28]	@ (80069c0 <Motor_control_pins_init+0x54>)
 80069a2:	f043 030b 	orr.w	r3, r3, #11
 80069a6:	60d3      	str	r3, [r2, #12]
    GPIOB->ODR&=~((1<<PB1_NEUTRAL));
 80069a8:	4b05      	ldr	r3, [pc, #20]	@ (80069c0 <Motor_control_pins_init+0x54>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	4a04      	ldr	r2, [pc, #16]	@ (80069c0 <Motor_control_pins_init+0x54>)
 80069ae:	f023 0302 	bic.w	r3, r3, #2
 80069b2:	60d3      	str	r3, [r2, #12]
}
 80069b4:	bf00      	nop
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bc80      	pop	{r7}
 80069ba:	4770      	bx	lr
 80069bc:	40021000 	.word	0x40021000
 80069c0:	40010c00 	.word	0x40010c00

080069c4 <Charger_pin_init>:
 */


#include"TURN_ON_OFF_CHARGER_RELAY.h"
#include"main.h"
void Charger_pin_init(){
 80069c4:	b480      	push	{r7}
 80069c6:	af00      	add	r7, sp, #0
RCC->APB2ENR|=RCC_APB2ENR_IOPCEN;
 80069c8:	4b0a      	ldr	r3, [pc, #40]	@ (80069f4 <Charger_pin_init+0x30>)
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	4a09      	ldr	r2, [pc, #36]	@ (80069f4 <Charger_pin_init+0x30>)
 80069ce:	f043 0310 	orr.w	r3, r3, #16
 80069d2:	6193      	str	r3, [r2, #24]
GPIOC->CRH &= ~(0xF << 20);      // Clear CNF13[1:0] and MODE13[1:0] (bits 20–23)
 80069d4:	4b08      	ldr	r3, [pc, #32]	@ (80069f8 <Charger_pin_init+0x34>)
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	4a07      	ldr	r2, [pc, #28]	@ (80069f8 <Charger_pin_init+0x34>)
 80069da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80069de:	6053      	str	r3, [r2, #4]
GPIOC->CRH |=  (0x1 << 20);      // MODE13 = 01 (Output 10 MHz), CNF13 = 00
 80069e0:	4b05      	ldr	r3, [pc, #20]	@ (80069f8 <Charger_pin_init+0x34>)
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	4a04      	ldr	r2, [pc, #16]	@ (80069f8 <Charger_pin_init+0x34>)
 80069e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069ea:	6053      	str	r3, [r2, #4]

}
 80069ec:	bf00      	nop
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bc80      	pop	{r7}
 80069f2:	4770      	bx	lr
 80069f4:	40021000 	.word	0x40021000
 80069f8:	40011000 	.word	0x40011000

080069fc <charge_relay_on>:
void charge_relay_on(){
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
	GPIOC->ODR&=~(1<<13);
 8006a00:	4b04      	ldr	r3, [pc, #16]	@ (8006a14 <charge_relay_on+0x18>)
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	4a03      	ldr	r2, [pc, #12]	@ (8006a14 <charge_relay_on+0x18>)
 8006a06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a0a:	60d3      	str	r3, [r2, #12]
}
 8006a0c:	bf00      	nop
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bc80      	pop	{r7}
 8006a12:	4770      	bx	lr
 8006a14:	40011000 	.word	0x40011000

08006a18 <charge_relay_off>:
void charge_relay_off(){
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
	GPIOC->ODR|=(1<<13);
 8006a1c:	4b04      	ldr	r3, [pc, #16]	@ (8006a30 <charge_relay_off+0x18>)
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	4a03      	ldr	r2, [pc, #12]	@ (8006a30 <charge_relay_off+0x18>)
 8006a22:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006a26:	60d3      	str	r3, [r2, #12]
}
 8006a28:	bf00      	nop
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr
 8006a30:	40011000 	.word	0x40011000

08006a34 <set_baudrate>:
    uint32_t tseg2;
    uint32_t sjw;
    float sample_point;  // in percentage
} CAN_BitTiming;

STATUS set_baudrate(uint32_t Baud_Rate){
 8006a34:	b590      	push	{r4, r7, lr}
 8006a36:	f6ad 0d04 	subw	sp, sp, #2052	@ 0x804
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8006a40:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 8006a44:	6018      	str	r0, [r3, #0]
    CAN_BitTiming table[100]; // store results
    int count = 0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
    uint32_t clk = get_APB1_freq();      // 36 MHz
 8006a4c:	f001 ff7c 	bl	8008948 <get_APB1_freq>
 8006a50:	f8c7 07e8 	str.w	r0, [r7, #2024]	@ 0x7e8
    uint32_t baud = Baud_Rate;      // 500 kbps
 8006a54:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8006a58:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f8c7 37e4 	str.w	r3, [r7, #2020]	@ 0x7e4
    if (clk == 0 || Baud_Rate == 0) {
 8006a62:	f8d7 37e8 	ldr.w	r3, [r7, #2024]	@ 0x7e8
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d006      	beq.n	8006a78 <set_baudrate+0x44>
 8006a6a:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8006a6e:	f2a3 73fc 	subw	r3, r3, #2044	@ 0x7fc
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <set_baudrate+0x48>
        return RY_NOT_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e0f7      	b.n	8006c6c <set_baudrate+0x238>
    }
    uint32_t target = clk / baud; // should be 16
 8006a7c:	f8d7 27e8 	ldr.w	r2, [r7, #2024]	@ 0x7e8
 8006a80:	f8d7 37e4 	ldr.w	r3, [r7, #2020]	@ 0x7e4
 8006a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a88:	f8c7 37e0 	str.w	r3, [r7, #2016]	@ 0x7e0
    for (uint32_t prescaler = 1; prescaler <= 1024; prescaler++) {
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 8006a92:	e0c0      	b.n	8006c16 <set_baudrate+0x1e2>
        for (uint32_t tseg1 = 1; tseg1 <= 16; tseg1++) {
 8006a94:	2301      	movs	r3, #1
 8006a96:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 8006a9a:	e0b2      	b.n	8006c02 <set_baudrate+0x1ce>
            for (uint32_t tseg2 = 1; tseg2 <= 8; tseg2++) {
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 8006aa2:	e0a4      	b.n	8006bee <set_baudrate+0x1ba>
            	uint32_t tq = 1 + tseg1 + tseg2;
 8006aa4:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 8006aa8:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 8006aac:	4413      	add	r3, r2
 8006aae:	3301      	adds	r3, #1
 8006ab0:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
                if (prescaler * tq == target) {
 8006ab4:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 8006ab8:	f8d7 27dc 	ldr.w	r2, [r7, #2012]	@ 0x7dc
 8006abc:	fb02 f303 	mul.w	r3, r2, r3
 8006ac0:	f8d7 27e0 	ldr.w	r2, [r7, #2016]	@ 0x7e0
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	f040 808d 	bne.w	8006be4 <set_baudrate+0x1b0>
                    float sp = ((1.0f + tseg1) / tq) * 100.0f;
 8006aca:	f8d7 07f4 	ldr.w	r0, [r7, #2036]	@ 0x7f4
 8006ace:	f7fe f891 	bl	8004bf4 <__aeabi_ui2f>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fd ffdb 	bl	8004a94 <__addsf3>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	461c      	mov	r4, r3
 8006ae2:	f8d7 07dc 	ldr.w	r0, [r7, #2012]	@ 0x7dc
 8006ae6:	f7fe f885 	bl	8004bf4 <__aeabi_ui2f>
 8006aea:	4603      	mov	r3, r0
 8006aec:	4619      	mov	r1, r3
 8006aee:	4620      	mov	r0, r4
 8006af0:	f7fe f98c 	bl	8004e0c <__aeabi_fdiv>
 8006af4:	4603      	mov	r3, r0
 8006af6:	4960      	ldr	r1, [pc, #384]	@ (8006c78 <set_baudrate+0x244>)
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fe f8d3 	bl	8004ca4 <__aeabi_fmul>
 8006afe:	4603      	mov	r3, r0
 8006b00:	f8c7 37d8 	str.w	r3, [r7, #2008]	@ 0x7d8
                    if (sp >= 70.0f && sp <= 80.0f) {
 8006b04:	495d      	ldr	r1, [pc, #372]	@ (8006c7c <set_baudrate+0x248>)
 8006b06:	f8d7 07d8 	ldr.w	r0, [r7, #2008]	@ 0x7d8
 8006b0a:	f7fe fa7d 	bl	8005008 <__aeabi_fcmpge>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d067      	beq.n	8006be4 <set_baudrate+0x1b0>
 8006b14:	495a      	ldr	r1, [pc, #360]	@ (8006c80 <set_baudrate+0x24c>)
 8006b16:	f8d7 07d8 	ldr.w	r0, [r7, #2008]	@ 0x7d8
 8006b1a:	f7fe fa6b 	bl	8004ff4 <__aeabi_fcmple>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d05f      	beq.n	8006be4 <set_baudrate+0x1b0>
                        for (int sjw = 1; sjw <= tseg2; sjw++) {
 8006b24:	2301      	movs	r3, #1
 8006b26:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 8006b2a:	e055      	b.n	8006bd8 <set_baudrate+0x1a4>
                            table[count].prescaler = prescaler;
 8006b2c:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 8006b30:	b298      	uxth	r0, r3
 8006b32:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8006b36:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 8006b3a:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	440b      	add	r3, r1
 8006b48:	4602      	mov	r2, r0
 8006b4a:	801a      	strh	r2, [r3, #0]
                            table[count].tseg1 = tseg1;
 8006b4c:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8006b50:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 8006b54:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8006b58:	4613      	mov	r3, r2
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	440b      	add	r3, r1
 8006b62:	3304      	adds	r3, #4
 8006b64:	f8d7 27f4 	ldr.w	r2, [r7, #2036]	@ 0x7f4
 8006b68:	601a      	str	r2, [r3, #0]
                            table[count].tseg2 = tseg2;
 8006b6a:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8006b6e:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 8006b72:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8006b76:	4613      	mov	r3, r2
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	3308      	adds	r3, #8
 8006b82:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	@ 0x7f0
 8006b86:	601a      	str	r2, [r3, #0]
                            table[count].sjw = sjw;
 8006b88:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	@ 0x7ec
 8006b8c:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8006b90:	f5a3 60ff 	sub.w	r0, r3, #2040	@ 0x7f8
 8006b94:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4403      	add	r3, r0
 8006ba2:	330c      	adds	r3, #12
 8006ba4:	6019      	str	r1, [r3, #0]
                            table[count].sample_point = sp;
 8006ba6:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8006baa:	f5a3 61ff 	sub.w	r1, r3, #2040	@ 0x7f8
 8006bae:	f8d7 27fc 	ldr.w	r2, [r7, #2044]	@ 0x7fc
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	440b      	add	r3, r1
 8006bbc:	3310      	adds	r3, #16
 8006bbe:	f8d7 27d8 	ldr.w	r2, [r7, #2008]	@ 0x7d8
 8006bc2:	601a      	str	r2, [r3, #0]
                            count++;
 8006bc4:	f8d7 37fc 	ldr.w	r3, [r7, #2044]	@ 0x7fc
 8006bc8:	3301      	adds	r3, #1
 8006bca:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
                        for (int sjw = 1; sjw <= tseg2; sjw++) {
 8006bce:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 8006bd8:	f8d7 37ec 	ldr.w	r3, [r7, #2028]	@ 0x7ec
 8006bdc:	f8d7 27f0 	ldr.w	r2, [r7, #2032]	@ 0x7f0
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d2a3      	bcs.n	8006b2c <set_baudrate+0xf8>
            for (uint32_t tseg2 = 1; tseg2 <= 8; tseg2++) {
 8006be4:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 8006be8:	3301      	adds	r3, #1
 8006bea:	f8c7 37f0 	str.w	r3, [r7, #2032]	@ 0x7f0
 8006bee:	f8d7 37f0 	ldr.w	r3, [r7, #2032]	@ 0x7f0
 8006bf2:	2b08      	cmp	r3, #8
 8006bf4:	f67f af56 	bls.w	8006aa4 <set_baudrate+0x70>
        for (uint32_t tseg1 = 1; tseg1 <= 16; tseg1++) {
 8006bf8:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 8006c02:	f8d7 37f4 	ldr.w	r3, [r7, #2036]	@ 0x7f4
 8006c06:	2b10      	cmp	r3, #16
 8006c08:	f67f af48 	bls.w	8006a9c <set_baudrate+0x68>
    for (uint32_t prescaler = 1; prescaler <= 1024; prescaler++) {
 8006c0c:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 8006c10:	3301      	adds	r3, #1
 8006c12:	f8c7 37f8 	str.w	r3, [r7, #2040]	@ 0x7f8
 8006c16:	f8d7 37f8 	ldr.w	r3, [r7, #2040]	@ 0x7f8
 8006c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c1e:	f67f af39 	bls.w	8006a94 <set_baudrate+0x60>
                    }
                }
            }
        }
    }
    CAN1->BTR|=((table[0].prescaler-1)<<0)|((table[0].sjw-1)<<24)|((table[0].tseg1-1)<<16)|((table[0].tseg2-1)<<20);
 8006c22:	4b18      	ldr	r3, [pc, #96]	@ (8006c84 <set_baudrate+0x250>)
 8006c24:	69da      	ldr	r2, [r3, #28]
 8006c26:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8006c2a:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	4619      	mov	r1, r3
 8006c34:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8006c38:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	061b      	lsls	r3, r3, #24
 8006c42:	4319      	orrs	r1, r3
 8006c44:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8006c48:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	041b      	lsls	r3, r3, #16
 8006c52:	4319      	orrs	r1, r3
 8006c54:	f507 6300 	add.w	r3, r7, #2048	@ 0x800
 8006c58:	f5a3 63ff 	sub.w	r3, r3, #2040	@ 0x7f8
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	051b      	lsls	r3, r3, #20
 8006c62:	430b      	orrs	r3, r1
 8006c64:	4907      	ldr	r1, [pc, #28]	@ (8006c84 <set_baudrate+0x250>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	61cb      	str	r3, [r1, #28]
    return RY_OK;//0x001e0003
 8006c6a:	2301      	movs	r3, #1
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f607 0704 	addw	r7, r7, #2052	@ 0x804
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd90      	pop	{r4, r7, pc}
 8006c76:	bf00      	nop
 8006c78:	42c80000 	.word	0x42c80000
 8006c7c:	428c0000 	.word	0x428c0000
 8006c80:	42a00000 	.word	0x42a00000
 8006c84:	40006400 	.word	0x40006400

08006c88 <Gpio_init>:
void Gpio_init(){
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
    RCC->APB1ENR|=RCC_APB1ENR_CAN1EN;
 8006c8c:	4b19      	ldr	r3, [pc, #100]	@ (8006cf4 <Gpio_init+0x6c>)
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	4a18      	ldr	r2, [pc, #96]	@ (8006cf4 <Gpio_init+0x6c>)
 8006c92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006c96:	61d3      	str	r3, [r2, #28]
    RCC->APB2ENR|=RCC_APB2ENR_AFIOEN;
 8006c98:	4b16      	ldr	r3, [pc, #88]	@ (8006cf4 <Gpio_init+0x6c>)
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	4a15      	ldr	r2, [pc, #84]	@ (8006cf4 <Gpio_init+0x6c>)
 8006c9e:	f043 0301 	orr.w	r3, r3, #1
 8006ca2:	6193      	str	r3, [r2, #24]
    RCC->APB2ENR|=RCC_APB2ENR_IOPBEN;
 8006ca4:	4b13      	ldr	r3, [pc, #76]	@ (8006cf4 <Gpio_init+0x6c>)
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	4a12      	ldr	r2, [pc, #72]	@ (8006cf4 <Gpio_init+0x6c>)
 8006caa:	f043 0308 	orr.w	r3, r3, #8
 8006cae:	6193      	str	r3, [r2, #24]
    GPIOB->CRH &= ~(0xF << 4); // Clear bits for PB9
 8006cb0:	4b11      	ldr	r3, [pc, #68]	@ (8006cf8 <Gpio_init+0x70>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	4a10      	ldr	r2, [pc, #64]	@ (8006cf8 <Gpio_init+0x70>)
 8006cb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cba:	6053      	str	r3, [r2, #4]
    GPIOB->CRH &= ~(0xF << 0); // Clear bits for PB8
 8006cbc:	4b0e      	ldr	r3, [pc, #56]	@ (8006cf8 <Gpio_init+0x70>)
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8006cf8 <Gpio_init+0x70>)
 8006cc2:	f023 030f 	bic.w	r3, r3, #15
 8006cc6:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=(1<<2);
 8006cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf8 <Gpio_init+0x70>)
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8006cf8 <Gpio_init+0x70>)
 8006cce:	f043 0304 	orr.w	r3, r3, #4
 8006cd2:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=(0Xb0);
 8006cd4:	4b08      	ldr	r3, [pc, #32]	@ (8006cf8 <Gpio_init+0x70>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	4a07      	ldr	r2, [pc, #28]	@ (8006cf8 <Gpio_init+0x70>)
 8006cda:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006cde:	6053      	str	r3, [r2, #4]
    AFIO->MAPR|=AFIO_MAPR_CAN_REMAP_REMAP2;
 8006ce0:	4b06      	ldr	r3, [pc, #24]	@ (8006cfc <Gpio_init+0x74>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	4a05      	ldr	r2, [pc, #20]	@ (8006cfc <Gpio_init+0x74>)
 8006ce6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006cea:	6053      	str	r3, [r2, #4]
}
 8006cec:	bf00      	nop
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bc80      	pop	{r7}
 8006cf2:	4770      	bx	lr
 8006cf4:	40021000 	.word	0x40021000
 8006cf8:	40010c00 	.word	0x40010c00
 8006cfc:	40010000 	.word	0x40010000

08006d00 <can_init>:
STATUS can_init(uint32_t Baud_Rate){
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
	Gpio_init();
 8006d08:	f7ff ffbe 	bl	8006c88 <Gpio_init>
	CAN1->MCR &= ~CAN_MCR_AWUM_Msk;
 8006d0c:	4b37      	ldr	r3, [pc, #220]	@ (8006dec <can_init+0xec>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a36      	ldr	r2, [pc, #216]	@ (8006dec <can_init+0xec>)
 8006d12:	f023 0320 	bic.w	r3, r3, #32
 8006d16:	6013      	str	r3, [r2, #0]
	CAN1->MCR &= ~CAN_MCR_SLEEP_Msk;
 8006d18:	4b34      	ldr	r3, [pc, #208]	@ (8006dec <can_init+0xec>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a33      	ldr	r2, [pc, #204]	@ (8006dec <can_init+0xec>)
 8006d1e:	f023 0302 	bic.w	r3, r3, #2
 8006d22:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_MCR_INRQ_Msk;
 8006d24:	4b31      	ldr	r3, [pc, #196]	@ (8006dec <can_init+0xec>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a30      	ldr	r2, [pc, #192]	@ (8006dec <can_init+0xec>)
 8006d2a:	f043 0301 	orr.w	r3, r3, #1
 8006d2e:	6013      	str	r3, [r2, #0]
	while (!(CAN1->MSR & CAN_MSR_INAK_Msk));
 8006d30:	bf00      	nop
 8006d32:	4b2e      	ldr	r3, [pc, #184]	@ (8006dec <can_init+0xec>)
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d0f9      	beq.n	8006d32 <can_init+0x32>
	if(set_baudrate(Baud_Rate)==RY_NOT_OK)
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fe78 	bl	8006a34 <set_baudrate>
	{
		RY_NOT_OK;
	}
    CAN1->MCR |= CAN_MCR_ABOM;   // <-- This must be here
 8006d44:	4b29      	ldr	r3, [pc, #164]	@ (8006dec <can_init+0xec>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a28      	ldr	r2, [pc, #160]	@ (8006dec <can_init+0xec>)
 8006d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d4e:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_MCR_ABOM;   // auto bus-off recovery
 8006d50:	4b26      	ldr	r3, [pc, #152]	@ (8006dec <can_init+0xec>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a25      	ldr	r2, [pc, #148]	@ (8006dec <can_init+0xec>)
 8006d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d5a:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_MCR_TXFP;   // FIFO priority
 8006d5c:	4b23      	ldr	r3, [pc, #140]	@ (8006dec <can_init+0xec>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a22      	ldr	r2, [pc, #136]	@ (8006dec <can_init+0xec>)
 8006d62:	f043 0304 	orr.w	r3, r3, #4
 8006d66:	6013      	str	r3, [r2, #0]
	CAN1->MCR &= ~(1<<0);  // CLEAR INQR BIT TO LEAVE INTILAIZE MODE=
 8006d68:	4b20      	ldr	r3, [pc, #128]	@ (8006dec <can_init+0xec>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8006dec <can_init+0xec>)
 8006d6e:	f023 0301 	bic.w	r3, r3, #1
 8006d72:	6013      	str	r3, [r2, #0]
	while (CAN1->MSR & CAN_MSR_INAK_Msk);  // Wait for Normal Mode
 8006d74:	bf00      	nop
 8006d76:	4b1d      	ldr	r3, [pc, #116]	@ (8006dec <can_init+0xec>)
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	f003 0301 	and.w	r3, r3, #1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1f9      	bne.n	8006d76 <can_init+0x76>
	CAN1->FMR |= CAN_FMR_FINIT;       // Enter filter init mode
 8006d82:	4b1a      	ldr	r3, [pc, #104]	@ (8006dec <can_init+0xec>)
 8006d84:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006d88:	4a18      	ldr	r2, [pc, #96]	@ (8006dec <can_init+0xec>)
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

	CAN1->FA1R = 0;                   // Disable all filters
 8006d92:	4b16      	ldr	r3, [pc, #88]	@ (8006dec <can_init+0xec>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	CAN1->FM1R = 0;                   // Identifier Mask mode
 8006d9a:	4b14      	ldr	r3, [pc, #80]	@ (8006dec <can_init+0xec>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	CAN1->FS1R = 1;                   // 32-bit scale
 8006da2:	4b12      	ldr	r3, [pc, #72]	@ (8006dec <can_init+0xec>)
 8006da4:	2201      	movs	r2, #1
 8006da6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	CAN1->FFA1R = 0;                  // Assign to FIFO0
 8006daa:	4b10      	ldr	r3, [pc, #64]	@ (8006dec <can_init+0xec>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	CAN1->sFilterRegister[0].FR1 = 0x00000000;  // ID = 0
 8006db2:	4b0e      	ldr	r3, [pc, #56]	@ (8006dec <can_init+0xec>)
 8006db4:	2200      	movs	r2, #0
 8006db6:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
	CAN1->sFilterRegister[0].FR2 = 0x00000000;  // Mask = 0
 8006dba:	4b0c      	ldr	r3, [pc, #48]	@ (8006dec <can_init+0xec>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8c3 2244 	str.w	r2, [r3, #580]	@ 0x244

	CAN1->FA1R |= 1;                  // Enable filter 0
 8006dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dec <can_init+0xec>)
 8006dc4:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8006dc8:	4a08      	ldr	r2, [pc, #32]	@ (8006dec <can_init+0xec>)
 8006dca:	f043 0301 	orr.w	r3, r3, #1
 8006dce:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

	CAN1->FMR &= ~CAN_FMR_FINIT;
 8006dd2:	4b06      	ldr	r3, [pc, #24]	@ (8006dec <can_init+0xec>)
 8006dd4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006dd8:	4a04      	ldr	r2, [pc, #16]	@ (8006dec <can_init+0xec>)
 8006dda:	f023 0301 	bic.w	r3, r3, #1
 8006dde:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
	return RY_OK;
 8006de2:	2301      	movs	r3, #1
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	40006400 	.word	0x40006400

08006df0 <check_can_bus>:
void check_can_bus(void) {
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
	 uint32_t esr = CAN1->ESR;
 8006df6:	4b31      	ldr	r3, [pc, #196]	@ (8006ebc <check_can_bus+0xcc>)
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	607b      	str	r3, [r7, #4]
	uint8_t bus_off = (CAN1->ESR & CAN_ESR_BOFF) ? 1 : 0;
 8006dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8006ebc <check_can_bus+0xcc>)
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	bf14      	ite	ne
 8006e08:	2301      	movne	r3, #1
 8006e0a:	2300      	moveq	r3, #0
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	70fb      	strb	r3, [r7, #3]
	uint8_t error_passive = (CAN1->ESR & CAN_ESR_EPVF) ? 1 : 0;
 8006e10:	4b2a      	ldr	r3, [pc, #168]	@ (8006ebc <check_can_bus+0xcc>)
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	f003 0302 	and.w	r3, r3, #2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	bf14      	ite	ne
 8006e1c:	2301      	movne	r3, #1
 8006e1e:	2300      	moveq	r3, #0
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	70bb      	strb	r3, [r7, #2]
	uint8_t error_warning = (CAN1->ESR & CAN_ESR_EWGF) ? 1 : 0;
 8006e24:	4b25      	ldr	r3, [pc, #148]	@ (8006ebc <check_can_bus+0xcc>)
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	bf14      	ite	ne
 8006e30:	2301      	movne	r3, #1
 8006e32:	2300      	moveq	r3, #0
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	707b      	strb	r3, [r7, #1]

	// Determine bus_ok
	if (bus_off) bus_ok = 0;
 8006e38:	78fb      	ldrb	r3, [r7, #3]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <check_can_bus+0x56>
 8006e3e:	4b20      	ldr	r3, [pc, #128]	@ (8006ec0 <check_can_bus+0xd0>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
 8006e44:	e010      	b.n	8006e68 <check_can_bus+0x78>
	else if (error_passive) bus_ok = 0;
 8006e46:	78bb      	ldrb	r3, [r7, #2]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <check_can_bus+0x64>
 8006e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ec0 <check_can_bus+0xd0>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	701a      	strb	r2, [r3, #0]
 8006e52:	e009      	b.n	8006e68 <check_can_bus+0x78>
	else if (error_warning) bus_ok = 0;
 8006e54:	787b      	ldrb	r3, [r7, #1]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d003      	beq.n	8006e62 <check_can_bus+0x72>
 8006e5a:	4b19      	ldr	r3, [pc, #100]	@ (8006ec0 <check_can_bus+0xd0>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	701a      	strb	r2, [r3, #0]
 8006e60:	e002      	b.n	8006e68 <check_can_bus+0x78>
	else bus_ok = 1;
 8006e62:	4b17      	ldr	r3, [pc, #92]	@ (8006ec0 <check_can_bus+0xd0>)
 8006e64:	2201      	movs	r2, #1
 8006e66:	701a      	strb	r2, [r3, #0]
	   // Optional: force soft reset if bus-off persists and ABOM not enabled
	     if ((esr & CAN_ESR_BOFF) && !(CAN1->MCR & CAN_MCR_ABOM)) {
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f003 0304 	and.w	r3, r3, #4
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d01f      	beq.n	8006eb2 <check_can_bus+0xc2>
 8006e72:	4b12      	ldr	r3, [pc, #72]	@ (8006ebc <check_can_bus+0xcc>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d119      	bne.n	8006eb2 <check_can_bus+0xc2>
	         CAN1->MCR |= CAN_MCR_INRQ;
 8006e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8006ebc <check_can_bus+0xcc>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a0e      	ldr	r2, [pc, #56]	@ (8006ebc <check_can_bus+0xcc>)
 8006e84:	f043 0301 	orr.w	r3, r3, #1
 8006e88:	6013      	str	r3, [r2, #0]
	         while (!(CAN1->MSR & CAN_MSR_INAK));
 8006e8a:	bf00      	nop
 8006e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006ebc <check_can_bus+0xcc>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0f9      	beq.n	8006e8c <check_can_bus+0x9c>
	         CAN1->MCR &= ~CAN_MCR_INRQ;
 8006e98:	4b08      	ldr	r3, [pc, #32]	@ (8006ebc <check_can_bus+0xcc>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a07      	ldr	r2, [pc, #28]	@ (8006ebc <check_can_bus+0xcc>)
 8006e9e:	f023 0301 	bic.w	r3, r3, #1
 8006ea2:	6013      	str	r3, [r2, #0]
	         while (CAN1->MSR & CAN_MSR_INAK);
 8006ea4:	bf00      	nop
 8006ea6:	4b05      	ldr	r3, [pc, #20]	@ (8006ebc <check_can_bus+0xcc>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1f9      	bne.n	8006ea6 <check_can_bus+0xb6>
	     }
}
 8006eb2:	bf00      	nop
 8006eb4:	370c      	adds	r7, #12
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bc80      	pop	{r7}
 8006eba:	4770      	bx	lr
 8006ebc:	40006400 	.word	0x40006400
 8006ec0:	2000000a 	.word	0x2000000a

08006ec4 <send_can_remote_frame>:
			 CAN1->sTxMailBox[mail_box].TDHR|=(frame.data[i]<<((i-4)*8));
		 }
	 }
	CAN1->sTxMailBox[mail_box].TIR |= (1<<0);
	}
void send_can_remote_frame(can_frame_t frame){
 8006ec4:	b490      	push	{r4, r7}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	463c      	mov	r4, r7
 8006ecc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t tme_mask = CAN1->TSR & (CAN_TSR_TME0 | CAN_TSR_TME1 | CAN_TSR_TME2);
 8006ed0:	4b49      	ldr	r3, [pc, #292]	@ (8006ff8 <send_can_remote_frame+0x134>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f003 53e0 	and.w	r3, r3, #469762048	@ 0x1c000000
 8006ed8:	613b      	str	r3, [r7, #16]
		int mail_box = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	617b      	str	r3, [r7, #20]
	    if (tme_mask & CAN_TSR_TME0) {
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <send_can_remote_frame+0x2a>
	        mail_box = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	617b      	str	r3, [r7, #20]
 8006eec:	e00e      	b.n	8006f0c <send_can_remote_frame+0x48>
	    } else if (tme_mask & CAN_TSR_TME1) {
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d002      	beq.n	8006efe <send_can_remote_frame+0x3a>
	        mail_box = 1;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	617b      	str	r3, [r7, #20]
 8006efc:	e006      	b.n	8006f0c <send_can_remote_frame+0x48>
	    } else if (tme_mask & CAN_TSR_TME2) {
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <send_can_remote_frame+0x48>
	        mail_box = 2;
 8006f08:	2302      	movs	r3, #2
 8006f0a:	617b      	str	r3, [r7, #20]
	    }
		CAN1->sTxMailBox[mail_box].TIR = 0x00000000;
 8006f0c:	4a3a      	ldr	r2, [pc, #232]	@ (8006ff8 <send_can_remote_frame+0x134>)
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	3318      	adds	r3, #24
 8006f12:	011b      	lsls	r3, r3, #4
 8006f14:	4413      	add	r3, r2
 8006f16:	2200      	movs	r2, #0
 8006f18:	601a      	str	r2, [r3, #0]
		if(frame.ide==0){
 8006f1a:	793b      	ldrb	r3, [r7, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10f      	bne.n	8006f40 <send_can_remote_frame+0x7c>
			CAN1->sTxMailBox[mail_box].TIR |= (frame.id<<21);
 8006f20:	4a35      	ldr	r2, [pc, #212]	@ (8006ff8 <send_can_remote_frame+0x134>)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	3318      	adds	r3, #24
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	4413      	add	r3, r2
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	055b      	lsls	r3, r3, #21
 8006f30:	4931      	ldr	r1, [pc, #196]	@ (8006ff8 <send_can_remote_frame+0x134>)
 8006f32:	431a      	orrs	r2, r3
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	3318      	adds	r3, #24
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	440b      	add	r3, r1
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	e010      	b.n	8006f62 <send_can_remote_frame+0x9e>

		}else{
			CAN1->sTxMailBox[mail_box].TIR |= (frame.id<<3)|(1<<2);
 8006f40:	4a2d      	ldr	r2, [pc, #180]	@ (8006ff8 <send_can_remote_frame+0x134>)
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	3318      	adds	r3, #24
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	4413      	add	r3, r2
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	4313      	orrs	r3, r2
 8006f52:	4929      	ldr	r1, [pc, #164]	@ (8006ff8 <send_can_remote_frame+0x134>)
 8006f54:	f043 0204 	orr.w	r2, r3, #4
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	3318      	adds	r3, #24
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	440b      	add	r3, r1
 8006f60:	601a      	str	r2, [r3, #0]

		}
	    CAN1->sTxMailBox[mail_box].TDTR = (frame.dlc & 0x0F);
 8006f62:	79bb      	ldrb	r3, [r7, #6]
 8006f64:	4924      	ldr	r1, [pc, #144]	@ (8006ff8 <send_can_remote_frame+0x134>)
 8006f66:	f003 020f 	and.w	r2, r3, #15
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	3318      	adds	r3, #24
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	440b      	add	r3, r1
 8006f72:	3304      	adds	r3, #4
 8006f74:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mail_box].TIR |= 1<<1;
 8006f76:	4a20      	ldr	r2, [pc, #128]	@ (8006ff8 <send_can_remote_frame+0x134>)
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	3318      	adds	r3, #24
 8006f7c:	011b      	lsls	r3, r3, #4
 8006f7e:	4413      	add	r3, r2
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	491d      	ldr	r1, [pc, #116]	@ (8006ff8 <send_can_remote_frame+0x134>)
 8006f84:	f043 0202 	orr.w	r2, r3, #2
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	3318      	adds	r3, #24
 8006f8c:	011b      	lsls	r3, r3, #4
 8006f8e:	440b      	add	r3, r1
 8006f90:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mail_box].TDTR &= ~(0xF<<0);
 8006f92:	4a19      	ldr	r2, [pc, #100]	@ (8006ff8 <send_can_remote_frame+0x134>)
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	3318      	adds	r3, #24
 8006f98:	011b      	lsls	r3, r3, #4
 8006f9a:	4413      	add	r3, r2
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4915      	ldr	r1, [pc, #84]	@ (8006ff8 <send_can_remote_frame+0x134>)
 8006fa2:	f023 020f 	bic.w	r2, r3, #15
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	3318      	adds	r3, #24
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	440b      	add	r3, r1
 8006fae:	3304      	adds	r3, #4
 8006fb0:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mail_box].TDTR |= (frame.dlc<<0);
 8006fb2:	4a11      	ldr	r2, [pc, #68]	@ (8006ff8 <send_can_remote_frame+0x134>)
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	3318      	adds	r3, #24
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	4413      	add	r3, r2
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	79ba      	ldrb	r2, [r7, #6]
 8006fc2:	490d      	ldr	r1, [pc, #52]	@ (8006ff8 <send_can_remote_frame+0x134>)
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	3318      	adds	r3, #24
 8006fca:	011b      	lsls	r3, r3, #4
 8006fcc:	440b      	add	r3, r1
 8006fce:	3304      	adds	r3, #4
 8006fd0:	601a      	str	r2, [r3, #0]
		CAN1->sTxMailBox[mail_box].TIR |= (1<<0);
 8006fd2:	4a09      	ldr	r2, [pc, #36]	@ (8006ff8 <send_can_remote_frame+0x134>)
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	3318      	adds	r3, #24
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	4413      	add	r3, r2
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4906      	ldr	r1, [pc, #24]	@ (8006ff8 <send_can_remote_frame+0x134>)
 8006fe0:	f043 0201 	orr.w	r2, r3, #1
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	3318      	adds	r3, #24
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	440b      	add	r3, r1
 8006fec:	601a      	str	r2, [r3, #0]
}
 8006fee:	bf00      	nop
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bc90      	pop	{r4, r7}
 8006ff6:	4770      	bx	lr
 8006ff8:	40006400 	.word	0x40006400

08006ffc <CAN_MessagePending>:
 * @param fifo_number The FIFO to check (0 for FIFO0, 1 for FIFO1).
 * @param rx_message A pointer to the CanRxMsg structure to store the received data.
 * @return 1 if a message was successfully received, 0 otherwise.
 */
uint8_t CAN_MessagePending(uint8_t fifo)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	71fb      	strb	r3, [r7, #7]
    if (fifo == 0)
 8007006:	79fb      	ldrb	r3, [r7, #7]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d106      	bne.n	800701a <CAN_MessagePending+0x1e>
        return (CAN1->RF0R & CAN_RF0R_FMP0_Msk);
 800700c:	4b08      	ldr	r3, [pc, #32]	@ (8007030 <CAN_MessagePending+0x34>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	b2db      	uxtb	r3, r3
 8007018:	e005      	b.n	8007026 <CAN_MessagePending+0x2a>
    else
        return (CAN1->RF1R & CAN_RF1R_FMP1_Msk);
 800701a:	4b05      	ldr	r3, [pc, #20]	@ (8007030 <CAN_MessagePending+0x34>)
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	f003 0303 	and.w	r3, r3, #3
 8007024:	b2db      	uxtb	r3, r3
}
 8007026:	4618      	mov	r0, r3
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	bc80      	pop	{r7}
 800702e:	4770      	bx	lr
 8007030:	40006400 	.word	0x40006400

08007034 <can_rx>:

uint8_t can_rx(can_frame_t *RxMessage,uint8_t fifo_number){
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
	  RxMessage->ide = (uint8_t)0x04 & CAN1->sFIFOMailBox[fifo_number].RIR;
 8007040:	4a44      	ldr	r2, [pc, #272]	@ (8007154 <can_rx+0x120>)
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	331b      	adds	r3, #27
 8007046:	011b      	lsls	r3, r3, #4
 8007048:	4413      	add	r3, r2
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	b2da      	uxtb	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	711a      	strb	r2, [r3, #4]
	  if (RxMessage->ide == 0)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	791b      	ldrb	r3, [r3, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10b      	bne.n	8007078 <can_rx+0x44>
	  {
	    RxMessage->id = (uint32_t)0x000007FF & (CAN1->sFIFOMailBox[fifo_number].RIR >> 21);
 8007060:	4a3c      	ldr	r2, [pc, #240]	@ (8007154 <can_rx+0x120>)
 8007062:	78fb      	ldrb	r3, [r7, #3]
 8007064:	331b      	adds	r3, #27
 8007066:	011b      	lsls	r3, r3, #4
 8007068:	4413      	add	r3, r2
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	0d5b      	lsrs	r3, r3, #21
 800706e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	e00a      	b.n	800708e <can_rx+0x5a>
	  }
	  else
	  {
	    RxMessage->id = (uint32_t)0x1FFFFFFF & (CAN1->sFIFOMailBox[fifo_number].RIR >> 3);
 8007078:	4a36      	ldr	r2, [pc, #216]	@ (8007154 <can_rx+0x120>)
 800707a:	78fb      	ldrb	r3, [r7, #3]
 800707c:	331b      	adds	r3, #27
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	4413      	add	r3, r2
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	08db      	lsrs	r3, r3, #3
 8007086:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	601a      	str	r2, [r3, #0]
	  }

	  RxMessage->rtr = (uint8_t)0x02 & CAN1->sFIFOMailBox[fifo_number].RIR;
 800708e:	4a31      	ldr	r2, [pc, #196]	@ (8007154 <can_rx+0x120>)
 8007090:	78fb      	ldrb	r3, [r7, #3]
 8007092:	331b      	adds	r3, #27
 8007094:	011b      	lsls	r3, r3, #4
 8007096:	4413      	add	r3, r2
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	b2db      	uxtb	r3, r3
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	715a      	strb	r2, [r3, #5]
	  /* Get the DLC */
	  RxMessage->dlc = (uint8_t)0x0F & CAN1->sFIFOMailBox[fifo_number].RDTR;
 80070a6:	4a2b      	ldr	r2, [pc, #172]	@ (8007154 <can_rx+0x120>)
 80070a8:	78fb      	ldrb	r3, [r7, #3]
 80070aa:	331b      	adds	r3, #27
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	4413      	add	r3, r2
 80070b0:	3304      	adds	r3, #4
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	f003 030f 	and.w	r3, r3, #15
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	719a      	strb	r2, [r3, #6]
	  /* Get the data field */
	  for(uint8_t i=0;i< RxMessage->dlc;i++){
 80070c0:	2300      	movs	r3, #0
 80070c2:	73fb      	strb	r3, [r7, #15]
 80070c4:	e027      	b.n	8007116 <can_rx+0xe2>
		  if(i<4){
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	2b03      	cmp	r3, #3
 80070ca:	d810      	bhi.n	80070ee <can_rx+0xba>
			  RxMessage->data[i] = (CAN1->sFIFOMailBox[fifo_number].RDLR>>(i*8));
 80070cc:	4a21      	ldr	r2, [pc, #132]	@ (8007154 <can_rx+0x120>)
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	011b      	lsls	r3, r3, #4
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	40da      	lsrs	r2, r3
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	b2d1      	uxtb	r1, r2
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	4413      	add	r3, r2
 80070e8:	460a      	mov	r2, r1
 80070ea:	71da      	strb	r2, [r3, #7]
 80070ec:	e010      	b.n	8007110 <can_rx+0xdc>
		  }else{
			  RxMessage->data[i] = (CAN1->sFIFOMailBox[fifo_number].RDHR>>(((i-4)*8)));
 80070ee:	4a19      	ldr	r2, [pc, #100]	@ (8007154 <can_rx+0x120>)
 80070f0:	78fb      	ldrb	r3, [r7, #3]
 80070f2:	011b      	lsls	r3, r3, #4
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
 80070fe:	3b04      	subs	r3, #4
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	40da      	lsrs	r2, r3
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	b2d1      	uxtb	r1, r2
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	4413      	add	r3, r2
 800710c:	460a      	mov	r2, r1
 800710e:	71da      	strb	r2, [r3, #7]
	  for(uint8_t i=0;i< RxMessage->dlc;i++){
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	3301      	adds	r3, #1
 8007114:	73fb      	strb	r3, [r7, #15]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	799b      	ldrb	r3, [r3, #6]
 800711a:	7bfa      	ldrb	r2, [r7, #15]
 800711c:	429a      	cmp	r2, r3
 800711e:	d3d2      	bcc.n	80070c6 <can_rx+0x92>

		  }
	  }
	  if (fifo_number == 0)
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d106      	bne.n	8007134 <can_rx+0x100>
	  {
		  CAN1->RF0R |= CAN_RF0R_RFOM0;
 8007126:	4b0b      	ldr	r3, [pc, #44]	@ (8007154 <can_rx+0x120>)
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	4a0a      	ldr	r2, [pc, #40]	@ (8007154 <can_rx+0x120>)
 800712c:	f043 0320 	orr.w	r3, r3, #32
 8007130:	60d3      	str	r3, [r2, #12]
 8007132:	e008      	b.n	8007146 <can_rx+0x112>
	  }
	  else if (fifo_number == 1)
 8007134:	78fb      	ldrb	r3, [r7, #3]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d105      	bne.n	8007146 <can_rx+0x112>
	  {
		  CAN1->RF1R |= CAN_RF1R_RFOM1;
 800713a:	4b06      	ldr	r3, [pc, #24]	@ (8007154 <can_rx+0x120>)
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	4a05      	ldr	r2, [pc, #20]	@ (8007154 <can_rx+0x120>)
 8007140:	f043 0320 	orr.w	r3, r3, #32
 8007144:	6113      	str	r3, [r2, #16]
	  }
	  return 1;
 8007146:	2301      	movs	r3, #1
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	bc80      	pop	{r7}
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	40006400 	.word	0x40006400

08007158 <Condensor_Relay_Pins_Init>:

#include"extern_file_declarations.h"

#define PB15_CONDENSOR   15

void Condensor_Relay_Pins_Init(){
 8007158:	b480      	push	{r7}
 800715a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800715c:	4b0d      	ldr	r3, [pc, #52]	@ (8007194 <Condensor_Relay_Pins_Init+0x3c>)
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	4a0c      	ldr	r2, [pc, #48]	@ (8007194 <Condensor_Relay_Pins_Init+0x3c>)
 8007162:	f043 0308 	orr.w	r3, r3, #8
 8007166:	6193      	str	r3, [r2, #24]
    GPIOB->CRH&=~((0xF<<28));
 8007168:	4b0b      	ldr	r3, [pc, #44]	@ (8007198 <Condensor_Relay_Pins_Init+0x40>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	4a0a      	ldr	r2, [pc, #40]	@ (8007198 <Condensor_Relay_Pins_Init+0x40>)
 800716e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007172:	6053      	str	r3, [r2, #4]
    GPIOB->CRH|=((0x3<<28));
 8007174:	4b08      	ldr	r3, [pc, #32]	@ (8007198 <Condensor_Relay_Pins_Init+0x40>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	4a07      	ldr	r2, [pc, #28]	@ (8007198 <Condensor_Relay_Pins_Init+0x40>)
 800717a:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 800717e:	6053      	str	r3, [r2, #4]
    GPIOB->ODR|=((1<<PB15_CONDENSOR));
 8007180:	4b05      	ldr	r3, [pc, #20]	@ (8007198 <Condensor_Relay_Pins_Init+0x40>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	4a04      	ldr	r2, [pc, #16]	@ (8007198 <Condensor_Relay_Pins_Init+0x40>)
 8007186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800718a:	60d3      	str	r3, [r2, #12]
}
 800718c:	bf00      	nop
 800718e:	46bd      	mov	sp, r7
 8007190:	bc80      	pop	{r7}
 8007192:	4770      	bx	lr
 8007194:	40021000 	.word	0x40021000
 8007198:	40010c00 	.word	0x40010c00

0800719c <clock_print_status>:
#include"TURN_ON_OFF_CHARGER_RELAY.h"
extern volatile uint32_t ms_tick ;
extern volatile uint32_t us_tick ;
extern void matel_mcu_process_can_frame(can_frame_t *);
I2C_HandleTypeDef hi2c1;
void clock_print_status(){
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
    uart_printf("\r\n=====================================\r\n");
 80071a0:	4817      	ldr	r0, [pc, #92]	@ (8007200 <clock_print_status+0x64>)
 80071a2:	f001 fea1 	bl	8008ee8 <uart_printf>
    uart_printf("     APP                          \r\n");
 80071a6:	4817      	ldr	r0, [pc, #92]	@ (8007204 <clock_print_status+0x68>)
 80071a8:	f001 fe9e 	bl	8008ee8 <uart_printf>
    uart_printf("=====================================\r\n");
 80071ac:	4816      	ldr	r0, [pc, #88]	@ (8007208 <clock_print_status+0x6c>)
 80071ae:	f001 fe9b 	bl	8008ee8 <uart_printf>
    uart_printf("System Clock: %lu MHz\r\n", get_SYSCLK_freq() / 1000000);
 80071b2:	f001 fb4b 	bl	800884c <get_SYSCLK_freq>
 80071b6:	4603      	mov	r3, r0
 80071b8:	4a14      	ldr	r2, [pc, #80]	@ (800720c <clock_print_status+0x70>)
 80071ba:	fba2 2303 	umull	r2, r3, r2, r3
 80071be:	0c9b      	lsrs	r3, r3, #18
 80071c0:	4619      	mov	r1, r3
 80071c2:	4813      	ldr	r0, [pc, #76]	@ (8007210 <clock_print_status+0x74>)
 80071c4:	f001 fe90 	bl	8008ee8 <uart_printf>
    uart_printf("APB1 Clock: %lu MHz\r\n", get_APB1_freq() / 1000000);
 80071c8:	f001 fbbe 	bl	8008948 <get_APB1_freq>
 80071cc:	4603      	mov	r3, r0
 80071ce:	4a0f      	ldr	r2, [pc, #60]	@ (800720c <clock_print_status+0x70>)
 80071d0:	fba2 2303 	umull	r2, r3, r2, r3
 80071d4:	0c9b      	lsrs	r3, r3, #18
 80071d6:	4619      	mov	r1, r3
 80071d8:	480e      	ldr	r0, [pc, #56]	@ (8007214 <clock_print_status+0x78>)
 80071da:	f001 fe85 	bl	8008ee8 <uart_printf>
    uart_printf("APB2 Clock: %lu MHz\r\n", get_APB2_freq() / 1000000);
 80071de:	f001 fbd9 	bl	8008994 <get_APB2_freq>
 80071e2:	4603      	mov	r3, r0
 80071e4:	4a09      	ldr	r2, [pc, #36]	@ (800720c <clock_print_status+0x70>)
 80071e6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ea:	0c9b      	lsrs	r3, r3, #18
 80071ec:	4619      	mov	r1, r3
 80071ee:	480a      	ldr	r0, [pc, #40]	@ (8007218 <clock_print_status+0x7c>)
 80071f0:	f001 fe7a 	bl	8008ee8 <uart_printf>
    uart_printf("=====================================\r\n");
 80071f4:	4804      	ldr	r0, [pc, #16]	@ (8007208 <clock_print_status+0x6c>)
 80071f6:	f001 fe77 	bl	8008ee8 <uart_printf>
}
 80071fa:	bf00      	nop
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	0800e118 	.word	0x0800e118
 8007204:	0800e144 	.word	0x0800e144
 8007208:	0800e16c 	.word	0x0800e16c
 800720c:	431bde83 	.word	0x431bde83
 8007210:	0800e194 	.word	0x0800e194
 8007214:	0800e1ac 	.word	0x0800e1ac
 8007218:	0800e1c4 	.word	0x0800e1c4

0800721c <CAN_ConfigFilterBank>:
#define MAX_FILTERS 14
// Helper: configure one filter bank with up to 2 IDs
static void CAN_ConfigFilterBank(int bank, uint32_t id1, uint32_t id2, uint8_t fifo, uint8_t isExtended)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	70fb      	strb	r3, [r7, #3]
    CAN1->FA1R &= ~(1 << bank);     // deactivate
 800722a:	4b3f      	ldr	r3, [pc, #252]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 800722c:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8007230:	2101      	movs	r1, #1
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	fa01 f202 	lsl.w	r2, r1, r2
 8007238:	43d2      	mvns	r2, r2
 800723a:	4611      	mov	r1, r2
 800723c:	4a3a      	ldr	r2, [pc, #232]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 800723e:	400b      	ands	r3, r1
 8007240:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c

    CAN1->FM1R |= (1 << bank);      // list mode
 8007244:	4b38      	ldr	r3, [pc, #224]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 8007246:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800724a:	2101      	movs	r1, #1
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	fa01 f202 	lsl.w	r2, r1, r2
 8007252:	4611      	mov	r1, r2
 8007254:	4a34      	ldr	r2, [pc, #208]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 8007256:	430b      	orrs	r3, r1
 8007258:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    CAN1->FS1R |= (1 << bank);      // 32-bit scale
 800725c:	4b32      	ldr	r3, [pc, #200]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 800725e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8007262:	2101      	movs	r1, #1
 8007264:	68fa      	ldr	r2, [r7, #12]
 8007266:	fa01 f202 	lsl.w	r2, r1, r2
 800726a:	4611      	mov	r1, r2
 800726c:	4a2e      	ldr	r2, [pc, #184]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 800726e:	430b      	orrs	r3, r1
 8007270:	f8c2 320c 	str.w	r3, [r2, #524]	@ 0x20c

    if (isExtended) {
 8007274:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d017      	beq.n	80072ac <CAN_ConfigFilterBank+0x90>
        // Extended: shift << 3, set IDE bit
        uint32_t eid1 = (id1 << 3) | (1 << 2);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	f043 0304 	orr.w	r3, r3, #4
 8007284:	617b      	str	r3, [r7, #20]
        uint32_t eid2 = (id2 << 3) | (1 << 2);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	f043 0304 	orr.w	r3, r3, #4
 800728e:	613b      	str	r3, [r7, #16]
        CAN1->sFilterRegister[bank].FR1 = eid1;
 8007290:	4925      	ldr	r1, [pc, #148]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3348      	adds	r3, #72	@ 0x48
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        CAN1->sFilterRegister[bank].FR2 = eid2;
 800729c:	4a22      	ldr	r2, [pc, #136]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3348      	adds	r3, #72	@ 0x48
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	4413      	add	r3, r2
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	605a      	str	r2, [r3, #4]
 80072aa:	e00e      	b.n	80072ca <CAN_ConfigFilterBank+0xae>
    } else {
        // Standard: shift << 21
        CAN1->sFilterRegister[bank].FR1 = (id1 << 21);
 80072ac:	491e      	ldr	r1, [pc, #120]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	055a      	lsls	r2, r3, #21
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	3348      	adds	r3, #72	@ 0x48
 80072b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        CAN1->sFilterRegister[bank].FR2 = (id2 << 21);
 80072ba:	491b      	ldr	r1, [pc, #108]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	055a      	lsls	r2, r3, #21
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	3348      	adds	r3, #72	@ 0x48
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	440b      	add	r3, r1
 80072c8:	605a      	str	r2, [r3, #4]
    }

    if (fifo == 0)
 80072ca:	78fb      	ldrb	r3, [r7, #3]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10d      	bne.n	80072ec <CAN_ConfigFilterBank+0xd0>
        CAN1->FFA1R &= ~(1 << bank);   // FIFO0
 80072d0:	4b15      	ldr	r3, [pc, #84]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 80072d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80072d6:	2101      	movs	r1, #1
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	fa01 f202 	lsl.w	r2, r1, r2
 80072de:	43d2      	mvns	r2, r2
 80072e0:	4611      	mov	r1, r2
 80072e2:	4a11      	ldr	r2, [pc, #68]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 80072e4:	400b      	ands	r3, r1
 80072e6:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214
 80072ea:	e00b      	b.n	8007304 <CAN_ConfigFilterBank+0xe8>
    else
        CAN1->FFA1R |= (1 << bank);    // FIFO1
 80072ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 80072ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80072f2:	2101      	movs	r1, #1
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	fa01 f202 	lsl.w	r2, r1, r2
 80072fa:	4611      	mov	r1, r2
 80072fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 80072fe:	430b      	orrs	r3, r1
 8007300:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

    CAN1->FA1R |= (1 << bank);         // activate
 8007304:	4b08      	ldr	r3, [pc, #32]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 8007306:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800730a:	2101      	movs	r1, #1
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	fa01 f202 	lsl.w	r2, r1, r2
 8007312:	4611      	mov	r1, r2
 8007314:	4a04      	ldr	r2, [pc, #16]	@ (8007328 <CAN_ConfigFilterBank+0x10c>)
 8007316:	430b      	orrs	r3, r1
 8007318:	f8c2 321c 	str.w	r3, [r2, #540]	@ 0x21c
}
 800731c:	bf00      	nop
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	bc80      	pop	{r7}
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40006400 	.word	0x40006400

0800732c <CAN_LoadFilters>:

// Main filter loader
void CAN_LoadFilters(uint32_t *mcu_std, int mcu_std_count,
                     uint32_t *mcu_ext, int mcu_ext_count,
                     uint32_t *bms_std, int bms_std_count)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b090      	sub	sp, #64	@ 0x40
 8007330:	af02      	add	r7, sp, #8
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	603b      	str	r3, [r7, #0]
    int filter_bank = 0;
 800733a:	2300      	movs	r3, #0
 800733c:	637b      	str	r3, [r7, #52]	@ 0x34
    CAN1->FMR |= CAN_FMR_FINIT; // Enter filter init
 800733e:	4b4c      	ldr	r3, [pc, #304]	@ (8007470 <CAN_LoadFilters+0x144>)
 8007340:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007344:	4a4a      	ldr	r2, [pc, #296]	@ (8007470 <CAN_LoadFilters+0x144>)
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
    // --- MCU Std IDs → FIFO0 ---
    for (int i = 0; i < mcu_std_count; i += 2) {
 800734e:	2300      	movs	r3, #0
 8007350:	633b      	str	r3, [r7, #48]	@ 0x30
 8007352:	e024      	b.n	800739e <CAN_LoadFilters+0x72>
        uint32_t id1 = mcu_std[i];
 8007354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	617b      	str	r3, [r7, #20]
        uint32_t id2 = (i+1 < mcu_std_count) ? mcu_std[i+1] : mcu_std[i]; // duplicate if odd count
 8007360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007362:	3301      	adds	r3, #1
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	429a      	cmp	r2, r3
 8007368:	dd06      	ble.n	8007378 <CAN_LoadFilters+0x4c>
 800736a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736c:	3301      	adds	r3, #1
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	4413      	add	r3, r2
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	e004      	b.n	8007382 <CAN_LoadFilters+0x56>
 8007378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	613b      	str	r3, [r7, #16]
        CAN_ConfigFilterBank(filter_bank++, id1, id2, 0, 0);
 8007384:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007386:	1c43      	adds	r3, r0, #1
 8007388:	637b      	str	r3, [r7, #52]	@ 0x34
 800738a:	2300      	movs	r3, #0
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	2300      	movs	r3, #0
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	6979      	ldr	r1, [r7, #20]
 8007394:	f7ff ff42 	bl	800721c <CAN_ConfigFilterBank>
    for (int i = 0; i < mcu_std_count; i += 2) {
 8007398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739a:	3302      	adds	r3, #2
 800739c:	633b      	str	r3, [r7, #48]	@ 0x30
 800739e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	dbd6      	blt.n	8007354 <CAN_LoadFilters+0x28>
    }

    // --- MCU Ext IDs → FIFO0 ---
    for (int i = 0; i < mcu_ext_count; i += 2) {
 80073a6:	2300      	movs	r3, #0
 80073a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073aa:	e024      	b.n	80073f6 <CAN_LoadFilters+0xca>
        uint32_t id1 = mcu_ext[i];
 80073ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	687a      	ldr	r2, [r7, #4]
 80073b2:	4413      	add	r3, r2
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	61fb      	str	r3, [r7, #28]
        uint32_t id2 = (i+1 < mcu_ext_count) ? mcu_ext[i+1] : mcu_ext[i];
 80073b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ba:	3301      	adds	r3, #1
 80073bc:	683a      	ldr	r2, [r7, #0]
 80073be:	429a      	cmp	r2, r3
 80073c0:	dd06      	ble.n	80073d0 <CAN_LoadFilters+0xa4>
 80073c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073c4:	3301      	adds	r3, #1
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	4413      	add	r3, r2
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	e004      	b.n	80073da <CAN_LoadFilters+0xae>
 80073d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	4413      	add	r3, r2
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	61bb      	str	r3, [r7, #24]
        CAN_ConfigFilterBank(filter_bank++, id1, id2, 0, 1);
 80073dc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80073de:	1c43      	adds	r3, r0, #1
 80073e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e2:	2301      	movs	r3, #1
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	2300      	movs	r3, #0
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	69f9      	ldr	r1, [r7, #28]
 80073ec:	f7ff ff16 	bl	800721c <CAN_ConfigFilterBank>
    for (int i = 0; i < mcu_ext_count; i += 2) {
 80073f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073f2:	3302      	adds	r3, #2
 80073f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	dbd6      	blt.n	80073ac <CAN_LoadFilters+0x80>
    }

    // --- BMS Std IDs → FIFO1 ---
    for (int i = 0; i < bms_std_count; i += 2) {
 80073fe:	2300      	movs	r3, #0
 8007400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007402:	e024      	b.n	800744e <CAN_LoadFilters+0x122>
        uint32_t id1 = bms_std[i];
 8007404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800740a:	4413      	add	r3, r2
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	627b      	str	r3, [r7, #36]	@ 0x24
        uint32_t id2 = (i+1 < bms_std_count) ? bms_std[i+1] : bms_std[i];
 8007410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007412:	3301      	adds	r3, #1
 8007414:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007416:	429a      	cmp	r2, r3
 8007418:	dd06      	ble.n	8007428 <CAN_LoadFilters+0xfc>
 800741a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741c:	3301      	adds	r3, #1
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007422:	4413      	add	r3, r2
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	e004      	b.n	8007432 <CAN_LoadFilters+0x106>
 8007428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800742e:	4413      	add	r3, r2
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	623b      	str	r3, [r7, #32]
        CAN_ConfigFilterBank(filter_bank++, id1, id2, 1, 0);
 8007434:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007436:	1c43      	adds	r3, r0, #1
 8007438:	637b      	str	r3, [r7, #52]	@ 0x34
 800743a:	2300      	movs	r3, #0
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	2301      	movs	r3, #1
 8007440:	6a3a      	ldr	r2, [r7, #32]
 8007442:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007444:	f7ff feea 	bl	800721c <CAN_ConfigFilterBank>
    for (int i = 0; i < bms_std_count; i += 2) {
 8007448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744a:	3302      	adds	r3, #2
 800744c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800744e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007450:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007452:	429a      	cmp	r2, r3
 8007454:	dbd6      	blt.n	8007404 <CAN_LoadFilters+0xd8>
    }

    CAN1->FMR &= ~CAN_FMR_FINIT; // Exit filter init
 8007456:	4b06      	ldr	r3, [pc, #24]	@ (8007470 <CAN_LoadFilters+0x144>)
 8007458:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800745c:	4a04      	ldr	r2, [pc, #16]	@ (8007470 <CAN_LoadFilters+0x144>)
 800745e:	f023 0301 	bic.w	r3, r3, #1
 8007462:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
}
 8007466:	bf00      	nop
 8007468:	3738      	adds	r7, #56	@ 0x38
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	40006400 	.word	0x40006400

08007474 <can_ids_filter_configure>:

// --- User config wrapper ---
void can_ids_filter_configure(void)
{
 8007474:	b5b0      	push	{r4, r5, r7, lr}
 8007476:	b096      	sub	sp, #88	@ 0x58
 8007478:	af02      	add	r7, sp, #8

    uint32_t mcu_standard_rx_ids[] = {
 800747a:	4b13      	ldr	r3, [pc, #76]	@ (80074c8 <can_ids_filter_configure+0x54>)
 800747c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8007480:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007482:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        Matel_MCU_FAULT_one_CAN_STD_ID_AE,
        Matel_MCU_FAULT_two_CAN_STD_ID_AF,
        Matel_MCU_Fault_Code_CAN_STD_ID_B3,
//		0x1234
    };
    uint32_t bms_standard_ids[] = {
 8007486:	4b11      	ldr	r3, [pc, #68]	@ (80074cc <can_ids_filter_configure+0x58>)
 8007488:	f107 0410 	add.w	r4, r7, #16
 800748c:	461d      	mov	r5, r3
 800748e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007496:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800749a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        JBD_BMS_ID10,
        JBD_BMS_ID11,
        JBD_BMS_ID12,
    };

    uint32_t mcu_extended_rx_ids[] = {
 800749e:	4a0c      	ldr	r2, [pc, #48]	@ (80074d0 <can_ids_filter_configure+0x5c>)
 80074a0:	1d3b      	adds	r3, r7, #4
 80074a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80074a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        Matel_MCU_Stat_One_CAN_EXTD_ID_18265040,
        Matel_MCU_Stat_Two_CAN_EXTD_ID_18275040,
		0x1234
    };

    CAN_LoadFilters(mcu_standard_rx_ids,
 80074a8:	1d3a      	adds	r2, r7, #4
 80074aa:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80074ae:	230c      	movs	r3, #12
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	f107 0310 	add.w	r3, r7, #16
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	2303      	movs	r3, #3
 80074ba:	2104      	movs	r1, #4
 80074bc:	f7ff ff36 	bl	800732c <CAN_LoadFilters>
                    sizeof(mcu_standard_rx_ids)/sizeof(mcu_standard_rx_ids[0]),
                    mcu_extended_rx_ids,
                    sizeof(mcu_extended_rx_ids)/sizeof(mcu_extended_rx_ids[0]),
                    bms_standard_ids,
                    sizeof(bms_standard_ids)/sizeof(bms_standard_ids[0]));
}
 80074c0:	bf00      	nop
 80074c2:	3750      	adds	r7, #80	@ 0x50
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bdb0      	pop	{r4, r5, r7, pc}
 80074c8:	0800e1dc 	.word	0x0800e1dc
 80074cc:	0800e1ec 	.word	0x0800e1ec
 80074d0:	0800e21c 	.word	0x0800e21c

080074d4 <main>:
}
#define PB0_REVERSE 0
#define PB1_NEUTRAL 1
#define PB3_DRIVE 3

int main(){
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af02      	add	r7, sp, #8
	HAL_Init();
 80074da:	f001 fd63 	bl	8008fa4 <HAL_Init>
	system_clock_init_to_72MHZ();
 80074de:	f001 f95f 	bl	80087a0 <system_clock_init_to_72MHZ>
	 FLASH_WRITE_FLAG(BL_UPDATE_DONE);
 80074e2:	4b81      	ldr	r3, [pc, #516]	@ (80076e8 <main+0x214>)
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d005      	beq.n	80074fa <main+0x26>
 80074ee:	4b7e      	ldr	r3, [pc, #504]	@ (80076e8 <main+0x214>)
 80074f0:	4a7e      	ldr	r2, [pc, #504]	@ (80076ec <main+0x218>)
 80074f2:	605a      	str	r2, [r3, #4]
 80074f4:	4b7c      	ldr	r3, [pc, #496]	@ (80076e8 <main+0x214>)
 80074f6:	4a7e      	ldr	r2, [pc, #504]	@ (80076f0 <main+0x21c>)
 80074f8:	605a      	str	r2, [r3, #4]
 80074fa:	4b7b      	ldr	r3, [pc, #492]	@ (80076e8 <main+0x214>)
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1f9      	bne.n	80074fa <main+0x26>
 8007506:	4b78      	ldr	r3, [pc, #480]	@ (80076e8 <main+0x214>)
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	4a77      	ldr	r2, [pc, #476]	@ (80076e8 <main+0x214>)
 800750c:	f043 0302 	orr.w	r3, r3, #2
 8007510:	6113      	str	r3, [r2, #16]
 8007512:	4b75      	ldr	r3, [pc, #468]	@ (80076e8 <main+0x214>)
 8007514:	4a77      	ldr	r2, [pc, #476]	@ (80076f4 <main+0x220>)
 8007516:	615a      	str	r2, [r3, #20]
 8007518:	4b73      	ldr	r3, [pc, #460]	@ (80076e8 <main+0x214>)
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	4a72      	ldr	r2, [pc, #456]	@ (80076e8 <main+0x214>)
 800751e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007522:	6113      	str	r3, [r2, #16]
 8007524:	4b70      	ldr	r3, [pc, #448]	@ (80076e8 <main+0x214>)
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1f9      	bne.n	8007524 <main+0x50>
 8007530:	4b6d      	ldr	r3, [pc, #436]	@ (80076e8 <main+0x214>)
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	4a6c      	ldr	r2, [pc, #432]	@ (80076e8 <main+0x214>)
 8007536:	f023 0302 	bic.w	r3, r3, #2
 800753a:	6113      	str	r3, [r2, #16]
 800753c:	4b6a      	ldr	r3, [pc, #424]	@ (80076e8 <main+0x214>)
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	4a69      	ldr	r2, [pc, #420]	@ (80076e8 <main+0x214>)
 8007542:	f043 0301 	orr.w	r3, r3, #1
 8007546:	6113      	str	r3, [r2, #16]
 8007548:	4b6a      	ldr	r3, [pc, #424]	@ (80076f4 <main+0x220>)
 800754a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800754e:	801a      	strh	r2, [r3, #0]
 8007550:	4b65      	ldr	r3, [pc, #404]	@ (80076e8 <main+0x214>)
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1f9      	bne.n	8007550 <main+0x7c>
 800755c:	4b66      	ldr	r3, [pc, #408]	@ (80076f8 <main+0x224>)
 800755e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007562:	801a      	strh	r2, [r3, #0]
 8007564:	4b60      	ldr	r3, [pc, #384]	@ (80076e8 <main+0x214>)
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1f9      	bne.n	8007564 <main+0x90>
 8007570:	4b5d      	ldr	r3, [pc, #372]	@ (80076e8 <main+0x214>)
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	4a5c      	ldr	r2, [pc, #368]	@ (80076e8 <main+0x214>)
 8007576:	f023 0301 	bic.w	r3, r3, #1
 800757a:	6113      	str	r3, [r2, #16]
 800757c:	4b5a      	ldr	r3, [pc, #360]	@ (80076e8 <main+0x214>)
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	4a59      	ldr	r2, [pc, #356]	@ (80076e8 <main+0x214>)
 8007582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007586:	6113      	str	r3, [r2, #16]
	if(uart3_Init(115200)==RY_NOT_OK){
 8007588:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 800758c:	f001 fbbc 	bl	8008d08 <uart3_Init>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <main+0xc6>
	  Error_Handler();
 8007596:	f000 f8d7 	bl	8007748 <Error_Handler>
	}
    uart_printf("UART3 initialization is ok ,baud_baudrate in kbps %d:\r\n", 115200);
 800759a:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800759e:	4857      	ldr	r0, [pc, #348]	@ (80076fc <main+0x228>)
 80075a0:	f001 fca2 	bl	8008ee8 <uart_printf>
    uart_printf("=========================================================\r\n");
 80075a4:	4856      	ldr	r0, [pc, #344]	@ (8007700 <main+0x22c>)
 80075a6:	f001 fc9f 	bl	8008ee8 <uart_printf>
	if(uart_init(115200)==RY_NOT_OK){
 80075aa:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80075ae:	f001 fb41 	bl	8008c34 <uart_init>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <main+0xe8>
	  Error_Handler();
 80075b8:	f000 f8c6 	bl	8007748 <Error_Handler>
	}
	clock_print_status();
 80075bc:	f7ff fdee 	bl	800719c <clock_print_status>
    uart_printf("UART1 initialization is ok ,baud_baudrate in kbps %d:\r\n", 115200);
 80075c0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80075c4:	484f      	ldr	r0, [pc, #316]	@ (8007704 <main+0x230>)
 80075c6:	f001 fc8f 	bl	8008ee8 <uart_printf>
    uart_printf("=========================================================\r\n");
 80075ca:	484d      	ldr	r0, [pc, #308]	@ (8007700 <main+0x22c>)
 80075cc:	f001 fc8c 	bl	8008ee8 <uart_printf>
    systick_init(1000);
 80075d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80075d4:	f001 f808 	bl	80085e8 <systick_init>
    uart_printf("systick clock initialized for milli second ");
 80075d8:	484b      	ldr	r0, [pc, #300]	@ (8007708 <main+0x234>)
 80075da:	f001 fc85 	bl	8008ee8 <uart_printf>
    uart_printf("=========================================================\r\n");
 80075de:	4848      	ldr	r0, [pc, #288]	@ (8007700 <main+0x22c>)
 80075e0:	f001 fc82 	bl	8008ee8 <uart_printf>
	if(can_init(500000)==RY_NOT_OK){
 80075e4:	4849      	ldr	r0, [pc, #292]	@ (800770c <main+0x238>)
 80075e6:	f7ff fb8b 	bl	8006d00 <can_init>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d107      	bne.n	8007600 <main+0x12c>
      uart_printf("CAN initialization is NOT oK\r\n");
 80075f0:	4847      	ldr	r0, [pc, #284]	@ (8007710 <main+0x23c>)
 80075f2:	f001 fc79 	bl	8008ee8 <uart_printf>
	  uart_printf("======================================================\r\n");
 80075f6:	4847      	ldr	r0, [pc, #284]	@ (8007714 <main+0x240>)
 80075f8:	f001 fc76 	bl	8008ee8 <uart_printf>
	  Error_Handler();
 80075fc:	f000 f8a4 	bl	8007748 <Error_Handler>
	}
	can_ids_filter_configure();
 8007600:	f7ff ff38 	bl	8007474 <can_ids_filter_configure>
    uart_printf("CAN initialization is ok ,baud_baudrate in %d kbps:\r\n", 500);
 8007604:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8007608:	4843      	ldr	r0, [pc, #268]	@ (8007718 <main+0x244>)
 800760a:	f001 fc6d 	bl	8008ee8 <uart_printf>
    uart_printf("=========================================================\r\n");
 800760e:	483c      	ldr	r0, [pc, #240]	@ (8007700 <main+0x22c>)
 8007610:	f001 fc6a 	bl	8008ee8 <uart_printf>
    Init_tasks();
 8007614:	f001 f9ea 	bl	80089ec <Init_tasks>
    uart_printf("Task schedular is initialized\r\n");
 8007618:	4840      	ldr	r0, [pc, #256]	@ (800771c <main+0x248>)
 800761a:	f001 fc65 	bl	8008ee8 <uart_printf>
    uart_printf("=========================================================\r\n");
 800761e:	4838      	ldr	r0, [pc, #224]	@ (8007700 <main+0x22c>)
 8007620:	f001 fc62 	bl	8008ee8 <uart_printf>
    Blower_Relay_Pins_Init();
 8007624:	f7fd fd04 	bl	8005030 <Blower_Relay_Pins_Init>
    uart_printf("Blower pins are initialized PIN12=%d PIN13=%d PIN14=%d\r\n",(GPIOB->IDR>>12&1),(GPIOB->IDR>>13&1),(GPIOB->IDR>>14&1));
 8007628:	4b3d      	ldr	r3, [pc, #244]	@ (8007720 <main+0x24c>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	0b1b      	lsrs	r3, r3, #12
 800762e:	f003 0101 	and.w	r1, r3, #1
 8007632:	4b3b      	ldr	r3, [pc, #236]	@ (8007720 <main+0x24c>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	0b5b      	lsrs	r3, r3, #13
 8007638:	f003 0201 	and.w	r2, r3, #1
 800763c:	4b38      	ldr	r3, [pc, #224]	@ (8007720 <main+0x24c>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	0b9b      	lsrs	r3, r3, #14
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	4837      	ldr	r0, [pc, #220]	@ (8007724 <main+0x250>)
 8007648:	f001 fc4e 	bl	8008ee8 <uart_printf>
    uart_printf("=========================================================\r\n");
 800764c:	482c      	ldr	r0, [pc, #176]	@ (8007700 <main+0x22c>)
 800764e:	f001 fc4b 	bl	8008ee8 <uart_printf>
    Condensor_Relay_Pins_Init();
 8007652:	f7ff fd81 	bl	8007158 <Condensor_Relay_Pins_Init>
    uart_printf("Condensor pins are initialized PIN15=%d \r\n",(GPIOB->IDR>>15&1));
 8007656:	4b32      	ldr	r3, [pc, #200]	@ (8007720 <main+0x24c>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	0bdb      	lsrs	r3, r3, #15
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	4619      	mov	r1, r3
 8007662:	4831      	ldr	r0, [pc, #196]	@ (8007728 <main+0x254>)
 8007664:	f001 fc40 	bl	8008ee8 <uart_printf>
    uart_printf("=========================================================\r\n");
 8007668:	4825      	ldr	r0, [pc, #148]	@ (8007700 <main+0x22c>)
 800766a:	f001 fc3d 	bl	8008ee8 <uart_printf>
    Motor_control_pins_init();
 800766e:	f7ff f97d 	bl	800696c <Motor_control_pins_init>
    uart_printf("Motor_control pins are initialized PIN0=%d PIN1=%d  PIN3=%d PIN5=%d\r\n",(GPIOB->IDR>>0&1),(GPIOB->IDR>>1&1),(GPIOB->IDR>>3&1),(GPIOB->IDR>>5&1));
 8007672:	4b2b      	ldr	r3, [pc, #172]	@ (8007720 <main+0x24c>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 0101 	and.w	r1, r3, #1
 800767a:	4b29      	ldr	r3, [pc, #164]	@ (8007720 <main+0x24c>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	085b      	lsrs	r3, r3, #1
 8007680:	f003 0201 	and.w	r2, r3, #1
 8007684:	4b26      	ldr	r3, [pc, #152]	@ (8007720 <main+0x24c>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	08db      	lsrs	r3, r3, #3
 800768a:	f003 0001 	and.w	r0, r3, #1
 800768e:	4b24      	ldr	r3, [pc, #144]	@ (8007720 <main+0x24c>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	095b      	lsrs	r3, r3, #5
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	4603      	mov	r3, r0
 800769c:	4823      	ldr	r0, [pc, #140]	@ (800772c <main+0x258>)
 800769e:	f001 fc23 	bl	8008ee8 <uart_printf>
    uart_printf("=========================================================\r\n");
 80076a2:	4817      	ldr	r0, [pc, #92]	@ (8007700 <main+0x22c>)
 80076a4:	f001 fc20 	bl	8008ee8 <uart_printf>
    Switch_Pins_int();
 80076a8:	f7fd fce8 	bl	800507c <Switch_Pins_int>
    Charger_pin_init();
 80076ac:	f7ff f98a 	bl	80069c4 <Charger_pin_init>
//    Init_timer();
//    MX_I2C1_Init();
//    Register_task(50,Drive_mode_state); //dial
    Register_task(50,process_switch_status);
 80076b0:	491f      	ldr	r1, [pc, #124]	@ (8007730 <main+0x25c>)
 80076b2:	2032      	movs	r0, #50	@ 0x32
 80076b4:	f001 f9d0 	bl	8008a58 <Register_task>
    Register_task(2,Request_Msgs_to_BMS);
 80076b8:	491e      	ldr	r1, [pc, #120]	@ (8007734 <main+0x260>)
 80076ba:	2002      	movs	r0, #2
 80076bc:	f001 f9cc 	bl	8008a58 <Register_task>
    Register_task(0,process_can_messages);
 80076c0:	491d      	ldr	r1, [pc, #116]	@ (8007738 <main+0x264>)
 80076c2:	2000      	movs	r0, #0
 80076c4:	f001 f9c8 	bl	8008a58 <Register_task>
    Register_task(100,print_mcu_data);
 80076c8:	491c      	ldr	r1, [pc, #112]	@ (800773c <main+0x268>)
 80076ca:	2064      	movs	r0, #100	@ 0x64
 80076cc:	f001 f9c4 	bl	8008a58 <Register_task>
    Register_task(100,print_bms_data);
 80076d0:	491b      	ldr	r1, [pc, #108]	@ (8007740 <main+0x26c>)
 80076d2:	2064      	movs	r0, #100	@ 0x64
 80076d4:	f001 f9c0 	bl	8008a58 <Register_task>
    Register_task(50,charger_relay_on_off);
 80076d8:	491a      	ldr	r1, [pc, #104]	@ (8007744 <main+0x270>)
 80076da:	2032      	movs	r0, #50	@ 0x32
 80076dc:	f001 f9bc 	bl	8008a58 <Register_task>
//    DWT_Init();

    while(1){
//uint32_t start=HAL_GetTick();
//    uart_printf("time= %.3f\n\r",(float)HAL_GetTick());
    Run_all_tasks();
 80076e0:	f001 fa08 	bl	8008af4 <Run_all_tasks>
 80076e4:	e7fc      	b.n	80076e0 <main+0x20c>
 80076e6:	bf00      	nop
 80076e8:	40022000 	.word	0x40022000
 80076ec:	45670123 	.word	0x45670123
 80076f0:	cdef89ab 	.word	0xcdef89ab
 80076f4:	0800fc00 	.word	0x0800fc00
 80076f8:	0800fc02 	.word	0x0800fc02
 80076fc:	0800e228 	.word	0x0800e228
 8007700:	0800e260 	.word	0x0800e260
 8007704:	0800e29c 	.word	0x0800e29c
 8007708:	0800e2d4 	.word	0x0800e2d4
 800770c:	0007a120 	.word	0x0007a120
 8007710:	0800e300 	.word	0x0800e300
 8007714:	0800e320 	.word	0x0800e320
 8007718:	0800e35c 	.word	0x0800e35c
 800771c:	0800e394 	.word	0x0800e394
 8007720:	40010c00 	.word	0x40010c00
 8007724:	0800e3b4 	.word	0x0800e3b4
 8007728:	0800e3f0 	.word	0x0800e3f0
 800772c:	0800e41c 	.word	0x0800e41c
 8007730:	0800790d 	.word	0x0800790d
 8007734:	080079d1 	.word	0x080079d1
 8007738:	08007885 	.word	0x08007885
 800773c:	08007ae1 	.word	0x08007ae1
 8007740:	08007ee9 	.word	0x08007ee9
 8007744:	08007a29 	.word	0x08007a29

08007748 <Error_Handler>:
    }
}


void Error_Handler(void)
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
}
 800774c:	bf00      	nop
 800774e:	46bd      	mov	sp, r7
 8007750:	bc80      	pop	{r7}
 8007752:	4770      	bx	lr

08007754 <find_smallest_float_in_single_pass>:
            crc <<= 1;
        data <<= 1;
    }
    return crc;
}
float find_smallest_float_in_single_pass(float arr[], int size) {
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
	if(size==16){
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b10      	cmp	r3, #16
 8007762:	d137      	bne.n	80077d4 <find_smallest_float_in_single_pass+0x80>
		float smallest = arr[0];
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < size; i++) {
 800776a:	2301      	movs	r3, #1
 800776c:	60bb      	str	r3, [r7, #8]
 800776e:	e014      	b.n	800779a <find_smallest_float_in_single_pass+0x46>
			if (arr[i] < smallest) {
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	4413      	add	r3, r2
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4619      	mov	r1, r3
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f7fd fc4d 	bl	800501c <__aeabi_fcmpgt>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d005      	beq.n	8007794 <find_smallest_float_in_single_pass+0x40>
				smallest = arr[i];
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	4413      	add	r3, r2
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	60fb      	str	r3, [r7, #12]
		for (int i = 1; i < size; i++) {
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	3301      	adds	r3, #1
 8007798:	60bb      	str	r3, [r7, #8]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	429a      	cmp	r2, r3
 80077a0:	dbe6      	blt.n	8007770 <find_smallest_float_in_single_pass+0x1c>
			}
		}
		return (float)((int)(smallest*100.0))/100.0;
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f7fc fe40 	bl	8004428 <__aeabi_f2d>
 80077a8:	f04f 0200 	mov.w	r2, #0
 80077ac:	4b0c      	ldr	r3, [pc, #48]	@ (80077e0 <find_smallest_float_in_single_pass+0x8c>)
 80077ae:	f7fc fe93 	bl	80044d8 <__aeabi_dmul>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4610      	mov	r0, r2
 80077b8:	4619      	mov	r1, r3
 80077ba:	f7fd f93d 	bl	8004a38 <__aeabi_d2iz>
 80077be:	4603      	mov	r3, r0
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fd fa1b 	bl	8004bfc <__aeabi_i2f>
 80077c6:	4603      	mov	r3, r0
 80077c8:	4906      	ldr	r1, [pc, #24]	@ (80077e4 <find_smallest_float_in_single_pass+0x90>)
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fd fb1e 	bl	8004e0c <__aeabi_fdiv>
 80077d0:	4603      	mov	r3, r0
 80077d2:	e000      	b.n	80077d6 <find_smallest_float_in_single_pass+0x82>
	}
	return -1.0;
 80077d4:	4b04      	ldr	r3, [pc, #16]	@ (80077e8 <find_smallest_float_in_single_pass+0x94>)
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3710      	adds	r7, #16
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	40590000 	.word	0x40590000
 80077e4:	42c80000 	.word	0x42c80000
 80077e8:	bf800000 	.word	0xbf800000

080077ec <find_largest_element>:
float find_largest_element(float arr[], int size) {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
	if(size==16){
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b10      	cmp	r3, #16
 80077fa:	d137      	bne.n	800786c <find_largest_element+0x80>
		float largest = arr[0];
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60fb      	str	r3, [r7, #12]
	    for (int i = 1; i < size; i++) {
 8007802:	2301      	movs	r3, #1
 8007804:	60bb      	str	r3, [r7, #8]
 8007806:	e014      	b.n	8007832 <find_largest_element+0x46>
	         if (arr[i] > largest) {
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	4413      	add	r3, r2
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4619      	mov	r1, r3
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f7fd fbe3 	bl	8004fe0 <__aeabi_fcmplt>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d005      	beq.n	800782c <find_largest_element+0x40>
	            largest = arr[i];
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	4413      	add	r3, r2
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	60fb      	str	r3, [r7, #12]
	    for (int i = 1; i < size; i++) {
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	3301      	adds	r3, #1
 8007830:	60bb      	str	r3, [r7, #8]
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	dbe6      	blt.n	8007808 <find_largest_element+0x1c>
	        }
	    }
	    return (float)((int)(largest*100.0))/100.0;
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f7fc fdf4 	bl	8004428 <__aeabi_f2d>
 8007840:	f04f 0200 	mov.w	r2, #0
 8007844:	4b0c      	ldr	r3, [pc, #48]	@ (8007878 <find_largest_element+0x8c>)
 8007846:	f7fc fe47 	bl	80044d8 <__aeabi_dmul>
 800784a:	4602      	mov	r2, r0
 800784c:	460b      	mov	r3, r1
 800784e:	4610      	mov	r0, r2
 8007850:	4619      	mov	r1, r3
 8007852:	f7fd f8f1 	bl	8004a38 <__aeabi_d2iz>
 8007856:	4603      	mov	r3, r0
 8007858:	4618      	mov	r0, r3
 800785a:	f7fd f9cf 	bl	8004bfc <__aeabi_i2f>
 800785e:	4603      	mov	r3, r0
 8007860:	4906      	ldr	r1, [pc, #24]	@ (800787c <find_largest_element+0x90>)
 8007862:	4618      	mov	r0, r3
 8007864:	f7fd fad2 	bl	8004e0c <__aeabi_fdiv>
 8007868:	4603      	mov	r3, r0
 800786a:	e000      	b.n	800786e <find_largest_element+0x82>
	}
	return -1.0;
 800786c:	4b04      	ldr	r3, [pc, #16]	@ (8007880 <find_largest_element+0x94>)
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	40590000 	.word	0x40590000
 800787c:	42c80000 	.word	0x42c80000
 8007880:	bf800000 	.word	0xbf800000

08007884 <process_can_messages>:
	    }
		}
	}
}
void process_can_messages(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
   can_frame_t rx_frame;
   if(CAN_MessagePending(0)){
 800788a:	2000      	movs	r0, #0
 800788c:	f7ff fbb6 	bl	8006ffc <CAN_MessagePending>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d012      	beq.n	80078bc <process_can_messages+0x38>
	   mcu_timer = 0;
 8007896:	4b19      	ldr	r3, [pc, #100]	@ (80078fc <process_can_messages+0x78>)
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]
       mcu_connected = 1;
 800789c:	4b18      	ldr	r3, [pc, #96]	@ (8007900 <process_can_messages+0x7c>)
 800789e:	2201      	movs	r2, #1
 80078a0:	601a      	str	r2, [r3, #0]
	   can_rx(&rx_frame,0);
 80078a2:	463b      	mov	r3, r7
 80078a4:	2100      	movs	r1, #0
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff fbc4 	bl	8007034 <can_rx>
	   send_id_data_only_over_uart(&rx_frame);
 80078ac:	463b      	mov	r3, r7
 80078ae:	4618      	mov	r0, r3
 80078b0:	f001 fad6 	bl	8008e60 <send_id_data_only_over_uart>
//	   Process_Jbd_Bms_Messages(&rx_frame);
	   matel_mcu_process_can_frame(&rx_frame);
 80078b4:	463b      	mov	r3, r7
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe fb60 	bl	8005f7c <matel_mcu_process_can_frame>
   }
   if(CAN_MessagePending(1)){
 80078bc:	2001      	movs	r0, #1
 80078be:	f7ff fb9d 	bl	8006ffc <CAN_MessagePending>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d012      	beq.n	80078ee <process_can_messages+0x6a>
	   bms_timer = 0;
 80078c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007904 <process_can_messages+0x80>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	601a      	str	r2, [r3, #0]
       bms_connected = 1;
 80078ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007908 <process_can_messages+0x84>)
 80078d0:	2201      	movs	r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
	   can_rx(&rx_frame,1);
 80078d4:	463b      	mov	r3, r7
 80078d6:	2101      	movs	r1, #1
 80078d8:	4618      	mov	r0, r3
 80078da:	f7ff fbab 	bl	8007034 <can_rx>
	   send_id_data_only_over_uart(&rx_frame);
 80078de:	463b      	mov	r3, r7
 80078e0:	4618      	mov	r0, r3
 80078e2:	f001 fabd 	bl	8008e60 <send_id_data_only_over_uart>
	   Process_Jbd_Bms_Messages(&rx_frame);
 80078e6:	463b      	mov	r3, r7
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fd fd59 	bl	80053a0 <Process_Jbd_Bms_Messages>
//	   matel_mcu_process_can_frame(&rx_frame);
   }
   check_can_bus();
 80078ee:	f7ff fa7f 	bl	8006df0 <check_can_bus>
}
 80078f2:	bf00      	nop
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	200005a4 	.word	0x200005a4
 8007900:	2000059c 	.word	0x2000059c
 8007904:	200005a8 	.word	0x200005a8
 8007908:	200005a0 	.word	0x200005a0

0800790c <process_switch_status>:
void process_switch_status(){
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
		cur_state=Switch_update();
 8007912:	f7fd fc1f 	bl	8005154 <Switch_update>
 8007916:	4603      	mov	r3, r0
 8007918:	461a      	mov	r2, r3
 800791a:	4b27      	ldr	r3, [pc, #156]	@ (80079b8 <process_switch_status+0xac>)
 800791c:	701a      	strb	r2, [r3, #0]
		if(cur_state!=last_state){
 800791e:	4b26      	ldr	r3, [pc, #152]	@ (80079b8 <process_switch_status+0xac>)
 8007920:	781a      	ldrb	r2, [r3, #0]
 8007922:	4b26      	ldr	r3, [pc, #152]	@ (80079bc <process_switch_status+0xb0>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d029      	beq.n	800797e <process_switch_status+0x72>
			last_state=cur_state;
 800792a:	4b23      	ldr	r3, [pc, #140]	@ (80079b8 <process_switch_status+0xac>)
 800792c:	781a      	ldrb	r2, [r3, #0]
 800792e:	4b23      	ldr	r3, [pc, #140]	@ (80079bc <process_switch_status+0xb0>)
 8007930:	701a      	strb	r2, [r3, #0]
			GPIOB->ODR |= ((1<<PB0_REVERSE) | (1<<PB1_NEUTRAL) | (1<<PB3_DRIVE));
 8007932:	4b23      	ldr	r3, [pc, #140]	@ (80079c0 <process_switch_status+0xb4>)
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	4a22      	ldr	r2, [pc, #136]	@ (80079c0 <process_switch_status+0xb4>)
 8007938:	f043 030b 	orr.w	r3, r3, #11
 800793c:	60d3      	str	r3, [r2, #12]
			switch (cur_state) {
 800793e:	4b1e      	ldr	r3, [pc, #120]	@ (80079b8 <process_switch_status+0xac>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b02      	cmp	r3, #2
 8007944:	d006      	beq.n	8007954 <process_switch_status+0x48>
 8007946:	2b02      	cmp	r3, #2
 8007948:	dc19      	bgt.n	800797e <process_switch_status+0x72>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d009      	beq.n	8007962 <process_switch_status+0x56>
 800794e:	2b01      	cmp	r3, #1
 8007950:	d00e      	beq.n	8007970 <process_switch_status+0x64>
 8007952:	e014      	b.n	800797e <process_switch_status+0x72>
				case 2: GPIOB->ODR &=~ (1<<PB0_REVERSE); break;
 8007954:	4b1a      	ldr	r3, [pc, #104]	@ (80079c0 <process_switch_status+0xb4>)
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	4a19      	ldr	r2, [pc, #100]	@ (80079c0 <process_switch_status+0xb4>)
 800795a:	f023 0301 	bic.w	r3, r3, #1
 800795e:	60d3      	str	r3, [r2, #12]
 8007960:	e00d      	b.n	800797e <process_switch_status+0x72>
				case 0: GPIOB->ODR &=~ (1<<PB1_NEUTRAL); break;
 8007962:	4b17      	ldr	r3, [pc, #92]	@ (80079c0 <process_switch_status+0xb4>)
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	4a16      	ldr	r2, [pc, #88]	@ (80079c0 <process_switch_status+0xb4>)
 8007968:	f023 0302 	bic.w	r3, r3, #2
 800796c:	60d3      	str	r3, [r2, #12]
 800796e:	e006      	b.n	800797e <process_switch_status+0x72>
				case 1: GPIOB->ODR &=~ (1<<PB3_DRIVE);   break;
 8007970:	4b13      	ldr	r3, [pc, #76]	@ (80079c0 <process_switch_status+0xb4>)
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	4a12      	ldr	r2, [pc, #72]	@ (80079c0 <process_switch_status+0xb4>)
 8007976:	f023 0308 	bic.w	r3, r3, #8
 800797a:	60d3      	str	r3, [r2, #12]
 800797c:	bf00      	nop
			}
		}
		can_frame_t rx_frame;
		rx_frame.id=0x123;
 800797e:	f240 1323 	movw	r3, #291	@ 0x123
 8007982:	603b      	str	r3, [r7, #0]
		rx_frame.dlc=8;
 8007984:	2308      	movs	r3, #8
 8007986:	71bb      	strb	r3, [r7, #6]
		rx_frame.data[0]=cur_state;
 8007988:	4b0b      	ldr	r3, [pc, #44]	@ (80079b8 <process_switch_status+0xac>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	71fb      	strb	r3, [r7, #7]
		rx_frame.data[1]=bus_ok;
 800798e:	4b0d      	ldr	r3, [pc, #52]	@ (80079c4 <process_switch_status+0xb8>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	723b      	strb	r3, [r7, #8]
		rx_frame.data[2]=mcu_connected;
 8007996:	4b0c      	ldr	r3, [pc, #48]	@ (80079c8 <process_switch_status+0xbc>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	727b      	strb	r3, [r7, #9]
		rx_frame.data[3]=bms_connected;
 800799e:	4b0b      	ldr	r3, [pc, #44]	@ (80079cc <process_switch_status+0xc0>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	72bb      	strb	r3, [r7, #10]
		send_id_data_only_over_uart(&rx_frame);
 80079a6:	463b      	mov	r3, r7
 80079a8:	4618      	mov	r0, r3
 80079aa:	f001 fa59 	bl	8008e60 <send_id_data_only_over_uart>
}
 80079ae:	bf00      	nop
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20000595 	.word	0x20000595
 80079bc:	20000594 	.word	0x20000594
 80079c0:	40010c00 	.word	0x40010c00
 80079c4:	2000000a 	.word	0x2000000a
 80079c8:	2000059c 	.word	0x2000059c
 80079cc:	200005a0 	.word	0x200005a0

080079d0 <Request_Msgs_to_BMS>:
void Request_Msgs_to_BMS(){
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
	   can_frame_t rx_frame;
	   static uint8_t i=0;
	   rx_frame.id=id[i];
 80079d6:	4b11      	ldr	r3, [pc, #68]	@ (8007a1c <Request_Msgs_to_BMS+0x4c>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	4b10      	ldr	r3, [pc, #64]	@ (8007a20 <Request_Msgs_to_BMS+0x50>)
 80079de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80079e2:	603b      	str	r3, [r7, #0]
	   rx_frame.ide=0;
 80079e4:	2300      	movs	r3, #0
 80079e6:	713b      	strb	r3, [r7, #4]
	   rx_frame.dlc=8;
 80079e8:	2308      	movs	r3, #8
 80079ea:	71bb      	strb	r3, [r7, #6]
	   send_can_remote_frame(rx_frame);
 80079ec:	463b      	mov	r3, r7
 80079ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80079f0:	f7ff fa68 	bl	8006ec4 <send_can_remote_frame>
	   i++;
 80079f4:	4b09      	ldr	r3, [pc, #36]	@ (8007a1c <Request_Msgs_to_BMS+0x4c>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	3301      	adds	r3, #1
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	4b07      	ldr	r3, [pc, #28]	@ (8007a1c <Request_Msgs_to_BMS+0x4c>)
 80079fe:	701a      	strb	r2, [r3, #0]
	   if(i>=id_size){
 8007a00:	4b06      	ldr	r3, [pc, #24]	@ (8007a1c <Request_Msgs_to_BMS+0x4c>)
 8007a02:	781a      	ldrb	r2, [r3, #0]
 8007a04:	4b07      	ldr	r3, [pc, #28]	@ (8007a24 <Request_Msgs_to_BMS+0x54>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d302      	bcc.n	8007a12 <Request_Msgs_to_BMS+0x42>
		   i=0;
 8007a0c:	4b03      	ldr	r3, [pc, #12]	@ (8007a1c <Request_Msgs_to_BMS+0x4c>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	701a      	strb	r2, [r3, #0]
	   }
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000596 	.word	0x20000596
 8007a20:	2000000c 	.word	0x2000000c
 8007a24:	20000026 	.word	0x20000026

08007a28 <charger_relay_on_off>:
void charger_relay_on_off(){
 8007a28:	b5b0      	push	{r4, r5, r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af02      	add	r7, sp, #8
	if(ar[0]&&ar[1]&&ar[2]&&ar[3]&&ar[4]&&ar[5]){
 8007a2e:	4b26      	ldr	r3, [pc, #152]	@ (8007ac8 <charger_relay_on_off+0xa0>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d044      	beq.n	8007ac0 <charger_relay_on_off+0x98>
 8007a36:	4b24      	ldr	r3, [pc, #144]	@ (8007ac8 <charger_relay_on_off+0xa0>)
 8007a38:	785b      	ldrb	r3, [r3, #1]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d040      	beq.n	8007ac0 <charger_relay_on_off+0x98>
 8007a3e:	4b22      	ldr	r3, [pc, #136]	@ (8007ac8 <charger_relay_on_off+0xa0>)
 8007a40:	789b      	ldrb	r3, [r3, #2]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d03c      	beq.n	8007ac0 <charger_relay_on_off+0x98>
 8007a46:	4b20      	ldr	r3, [pc, #128]	@ (8007ac8 <charger_relay_on_off+0xa0>)
 8007a48:	78db      	ldrb	r3, [r3, #3]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d038      	beq.n	8007ac0 <charger_relay_on_off+0x98>
 8007a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ac8 <charger_relay_on_off+0xa0>)
 8007a50:	791b      	ldrb	r3, [r3, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d034      	beq.n	8007ac0 <charger_relay_on_off+0x98>
 8007a56:	4b1c      	ldr	r3, [pc, #112]	@ (8007ac8 <charger_relay_on_off+0xa0>)
 8007a58:	795b      	ldrb	r3, [r3, #5]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d030      	beq.n	8007ac0 <charger_relay_on_off+0x98>
		uart_printf("received all\n\r");
 8007a5e:	481b      	ldr	r0, [pc, #108]	@ (8007acc <charger_relay_on_off+0xa4>)
 8007a60:	f001 fa42 	bl	8008ee8 <uart_printf>
		float small=find_smallest_float_in_single_pass(cells_array,16);
 8007a64:	2110      	movs	r1, #16
 8007a66:	481a      	ldr	r0, [pc, #104]	@ (8007ad0 <charger_relay_on_off+0xa8>)
 8007a68:	f7ff fe74 	bl	8007754 <find_smallest_float_in_single_pass>
 8007a6c:	6078      	str	r0, [r7, #4]
		float large=find_largest_element(cells_array,16);
 8007a6e:	2110      	movs	r1, #16
 8007a70:	4817      	ldr	r0, [pc, #92]	@ (8007ad0 <charger_relay_on_off+0xa8>)
 8007a72:	f7ff febb 	bl	80077ec <find_largest_element>
 8007a76:	6038      	str	r0, [r7, #0]
		uart_printf("small =%f  large =%f \n\r",small,large);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7fc fcd5 	bl	8004428 <__aeabi_f2d>
 8007a7e:	4604      	mov	r4, r0
 8007a80:	460d      	mov	r5, r1
 8007a82:	6838      	ldr	r0, [r7, #0]
 8007a84:	f7fc fcd0 	bl	8004428 <__aeabi_f2d>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	e9cd 2300 	strd	r2, r3, [sp]
 8007a90:	4622      	mov	r2, r4
 8007a92:	462b      	mov	r3, r5
 8007a94:	480f      	ldr	r0, [pc, #60]	@ (8007ad4 <charger_relay_on_off+0xac>)
 8007a96:	f001 fa27 	bl	8008ee8 <uart_printf>
		if((small<2.5)||(large>3.5)){
 8007a9a:	490f      	ldr	r1, [pc, #60]	@ (8007ad8 <charger_relay_on_off+0xb0>)
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7fd fa9f 	bl	8004fe0 <__aeabi_fcmplt>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d106      	bne.n	8007ab6 <charger_relay_on_off+0x8e>
 8007aa8:	490c      	ldr	r1, [pc, #48]	@ (8007adc <charger_relay_on_off+0xb4>)
 8007aaa:	6838      	ldr	r0, [r7, #0]
 8007aac:	f7fd fab6 	bl	800501c <__aeabi_fcmpgt>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d002      	beq.n	8007abc <charger_relay_on_off+0x94>
			charge_relay_off();
 8007ab6:	f7fe ffaf 	bl	8006a18 <charge_relay_off>
		}
		else{
			charge_relay_on();
		}
	}
}
 8007aba:	e001      	b.n	8007ac0 <charger_relay_on_off+0x98>
			charge_relay_on();
 8007abc:	f7fe ff9e 	bl	80069fc <charge_relay_on>
}
 8007ac0:	bf00      	nop
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8007ac8:	20000004 	.word	0x20000004
 8007acc:	0800e464 	.word	0x0800e464
 8007ad0:	200002fc 	.word	0x200002fc
 8007ad4:	0800e474 	.word	0x0800e474
 8007ad8:	40200000 	.word	0x40200000
 8007adc:	40600000 	.word	0x40600000

08007ae0 <print_mcu_data>:
void print_mcu_data(){
 8007ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	b0a5      	sub	sp, #148	@ 0x94
 8007ae6:	af14      	add	r7, sp, #80	@ 0x50
	if(msg.MCU_POWER_One.rx_or_not){
 8007ae8:	4bb2      	ldr	r3, [pc, #712]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007aea:	f893 31f8 	ldrb.w	r3, [r3, #504]	@ 0x1f8
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d027      	beq.n	8007b48 <print_mcu_data+0x68>
		uart_printf(
 8007af8:	4bae      	ldr	r3, [pc, #696]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007afa:	e9d3 8974 	ldrd	r8, r9, [r3, #464]	@ 0x1d0
 8007afe:	4bad      	ldr	r3, [pc, #692]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b00:	e9d3 2376 	ldrd	r2, r3, [r3, #472]	@ 0x1d8
 8007b04:	49ab      	ldr	r1, [pc, #684]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b06:	e9d1 0178 	ldrd	r0, r1, [r1, #480]	@ 0x1e0
		    "MCU_POWER_One: Sig0=%.2f Sig1=%.2f Sig2=%.2f Sig3=%llu Sig4=%.2f\n\r",
			msg.MCU_POWER_One.power_sig0,
		    msg.MCU_POWER_One.power_sig1,
		    msg.MCU_POWER_One.power_sig2,
		    (unsigned long long)msg.MCU_POWER_One.power_sig3,
 8007b0a:	4caa      	ldr	r4, [pc, #680]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b0c:	f8d4 41e8 	ldr.w	r4, [r4, #488]	@ 0x1e8
		uart_printf(
 8007b10:	17e5      	asrs	r5, r4, #31
 8007b12:	46a2      	mov	sl, r4
 8007b14:	46ab      	mov	fp, r5
 8007b16:	4ca7      	ldr	r4, [pc, #668]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b18:	f504 75f8 	add.w	r5, r4, #496	@ 0x1f0
 8007b1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b20:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007b24:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8007b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b2c:	e9cd 2300 	strd	r2, r3, [sp]
 8007b30:	4642      	mov	r2, r8
 8007b32:	464b      	mov	r3, r9
 8007b34:	48a0      	ldr	r0, [pc, #640]	@ (8007db8 <print_mcu_data+0x2d8>)
 8007b36:	f001 f9d7 	bl	8008ee8 <uart_printf>
		    msg.MCU_POWER_One.power_sig4
		);
		msg.MCU_POWER_One.rx_or_not=0;
 8007b3a:	4a9e      	ldr	r2, [pc, #632]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b3c:	f892 31f8 	ldrb.w	r3, [r2, #504]	@ 0x1f8
 8007b40:	f023 0301 	bic.w	r3, r3, #1
 8007b44:	f882 31f8 	strb.w	r3, [r2, #504]	@ 0x1f8
	}
	if(msg.MCU_FAULT_One.rx_or_not){
 8007b48:	4b9a      	ldr	r3, [pc, #616]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b4a:	f893 31c8 	ldrb.w	r3, [r3, #456]	@ 0x1c8
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d06a      	beq.n	8007c2e <print_mcu_data+0x14e>
		uart_printf(
 8007b58:	4b96      	ldr	r3, [pc, #600]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b5a:	f8d3 3188 	ldr.w	r3, [r3, #392]	@ 0x188
 8007b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b60:	4b94      	ldr	r3, [pc, #592]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b62:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 8007b66:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007b68:	4b92      	ldr	r3, [pc, #584]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b6a:	f8d3 0190 	ldr.w	r0, [r3, #400]	@ 0x190
 8007b6e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007b70:	4b90      	ldr	r3, [pc, #576]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b72:	f8d3 0194 	ldr.w	r0, [r3, #404]	@ 0x194
 8007b76:	4b8f      	ldr	r3, [pc, #572]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b78:	f8d3 4198 	ldr.w	r4, [r3, #408]	@ 0x198
 8007b7c:	4b8d      	ldr	r3, [pc, #564]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b7e:	f8d3 519c 	ldr.w	r5, [r3, #412]	@ 0x19c
 8007b82:	4b8c      	ldr	r3, [pc, #560]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b84:	f8d3 61a0 	ldr.w	r6, [r3, #416]	@ 0x1a0
 8007b88:	4b8a      	ldr	r3, [pc, #552]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b8a:	f8d3 c1a4 	ldr.w	ip, [r3, #420]	@ 0x1a4
 8007b8e:	f8c7 c030 	str.w	ip, [r7, #48]	@ 0x30
 8007b92:	4b88      	ldr	r3, [pc, #544]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b94:	f8d3 e1a8 	ldr.w	lr, [r3, #424]	@ 0x1a8
 8007b98:	f8c7 e02c 	str.w	lr, [r7, #44]	@ 0x2c
 8007b9c:	4b85      	ldr	r3, [pc, #532]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007b9e:	f8d3 81ac 	ldr.w	r8, [r3, #428]	@ 0x1ac
 8007ba2:	f8c7 8028 	str.w	r8, [r7, #40]	@ 0x28
 8007ba6:	4b83      	ldr	r3, [pc, #524]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007ba8:	f8d3 91b0 	ldr.w	r9, [r3, #432]	@ 0x1b0
 8007bac:	f8c7 9024 	str.w	r9, [r7, #36]	@ 0x24
 8007bb0:	4b80      	ldr	r3, [pc, #512]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007bb2:	f8d3 a1b4 	ldr.w	sl, [r3, #436]	@ 0x1b4
 8007bb6:	f8c7 a020 	str.w	sl, [r7, #32]
 8007bba:	4b7e      	ldr	r3, [pc, #504]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007bbc:	f8d3 b1b8 	ldr.w	fp, [r3, #440]	@ 0x1b8
 8007bc0:	f8c7 b01c 	str.w	fp, [r7, #28]
 8007bc4:	4b7b      	ldr	r3, [pc, #492]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007bc6:	f8d3 11bc 	ldr.w	r1, [r3, #444]	@ 0x1bc
 8007bca:	4b7a      	ldr	r3, [pc, #488]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007bcc:	f8d3 21c0 	ldr.w	r2, [r3, #448]	@ 0x1c0
 8007bd0:	4b78      	ldr	r3, [pc, #480]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007bd2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8007bd6:	930c      	str	r3, [sp, #48]	@ 0x30
 8007bd8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007bda:	910a      	str	r1, [sp, #40]	@ 0x28
 8007bdc:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 8007be0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007be4:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8007be8:	f8cd a020 	str.w	sl, [sp, #32]
 8007bec:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 8007bf0:	f8cd 901c 	str.w	r9, [sp, #28]
 8007bf4:	f8d7 8028 	ldr.w	r8, [r7, #40]	@ 0x28
 8007bf8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007bfc:	f8d7 e02c 	ldr.w	lr, [r7, #44]	@ 0x2c
 8007c00:	f8cd e014 	str.w	lr, [sp, #20]
 8007c04:	f8d7 c030 	ldr.w	ip, [r7, #48]	@ 0x30
 8007c08:	f8cd c010 	str.w	ip, [sp, #16]
 8007c0c:	9603      	str	r6, [sp, #12]
 8007c0e:	9502      	str	r5, [sp, #8]
 8007c10:	9401      	str	r4, [sp, #4]
 8007c12:	9000      	str	r0, [sp, #0]
 8007c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007c18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c1a:	4868      	ldr	r0, [pc, #416]	@ (8007dbc <print_mcu_data+0x2dc>)
 8007c1c:	f001 f964 	bl	8008ee8 <uart_printf>
		    msg.MCU_FAULT_One.MCU_FAULT_One_sig12,
		    msg.MCU_FAULT_One.MCU_FAULT_One_sig13,
		    msg.MCU_FAULT_One.MCU_FAULT_One_sig14,
		    msg.MCU_FAULT_One.MCU_FAULT_One_sig15
		);
		msg.MCU_FAULT_One.rx_or_not=0;
 8007c20:	4a64      	ldr	r2, [pc, #400]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007c22:	f892 31c8 	ldrb.w	r3, [r2, #456]	@ 0x1c8
 8007c26:	f023 0301 	bic.w	r3, r3, #1
 8007c2a:	f882 31c8 	strb.w	r3, [r2, #456]	@ 0x1c8
	}
	if(msg.MCU_FAULT_two.rx_or_not){
 8007c2e:	4b61      	ldr	r3, [pc, #388]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007c30:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8007c34:	f003 0301 	and.w	r3, r3, #1
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d061      	beq.n	8007d02 <print_mcu_data+0x222>
		uart_printf(
 8007c3e:	4b5d      	ldr	r3, [pc, #372]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007c40:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8007c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c46:	4b5b      	ldr	r3, [pc, #364]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007c48:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8007c4c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007c4e:	4b59      	ldr	r3, [pc, #356]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007c50:	f8d3 0150 	ldr.w	r0, [r3, #336]	@ 0x150
 8007c54:	6378      	str	r0, [r7, #52]	@ 0x34
 8007c56:	4b57      	ldr	r3, [pc, #348]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007c58:	f8d3 1154 	ldr.w	r1, [r3, #340]	@ 0x154
 8007c5c:	4b55      	ldr	r3, [pc, #340]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007c5e:	f8d3 0158 	ldr.w	r0, [r3, #344]	@ 0x158
 8007c62:	4b54      	ldr	r3, [pc, #336]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007c64:	f8d3 415c 	ldr.w	r4, [r3, #348]	@ 0x15c
 8007c68:	4b52      	ldr	r3, [pc, #328]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007c6a:	f8d3 5160 	ldr.w	r5, [r3, #352]	@ 0x160
 8007c6e:	4b51      	ldr	r3, [pc, #324]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007c70:	f8d3 6164 	ldr.w	r6, [r3, #356]	@ 0x164
 8007c74:	4b4f      	ldr	r3, [pc, #316]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007c76:	f8d3 c168 	ldr.w	ip, [r3, #360]	@ 0x168
 8007c7a:	f8c7 c030 	str.w	ip, [r7, #48]	@ 0x30
 8007c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007c80:	f8d3 e16c 	ldr.w	lr, [r3, #364]	@ 0x16c
 8007c84:	f8c7 e02c 	str.w	lr, [r7, #44]	@ 0x2c
 8007c88:	4b4a      	ldr	r3, [pc, #296]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007c8a:	f8d3 8170 	ldr.w	r8, [r3, #368]	@ 0x170
 8007c8e:	f8c7 8028 	str.w	r8, [r7, #40]	@ 0x28
 8007c92:	4b48      	ldr	r3, [pc, #288]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007c94:	f8d3 9174 	ldr.w	r9, [r3, #372]	@ 0x174
 8007c98:	f8c7 9024 	str.w	r9, [r7, #36]	@ 0x24
 8007c9c:	4b45      	ldr	r3, [pc, #276]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007c9e:	f8d3 a178 	ldr.w	sl, [r3, #376]	@ 0x178
 8007ca2:	f8c7 a020 	str.w	sl, [r7, #32]
 8007ca6:	4b43      	ldr	r3, [pc, #268]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007ca8:	f8d3 217c 	ldr.w	r2, [r3, #380]	@ 0x17c
 8007cac:	4b41      	ldr	r3, [pc, #260]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007cae:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8007cb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cb4:	920a      	str	r2, [sp, #40]	@ 0x28
 8007cb6:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8007cba:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8007cbe:	f8d7 9024 	ldr.w	r9, [r7, #36]	@ 0x24
 8007cc2:	f8cd 9020 	str.w	r9, [sp, #32]
 8007cc6:	f8d7 8028 	ldr.w	r8, [r7, #40]	@ 0x28
 8007cca:	f8cd 801c 	str.w	r8, [sp, #28]
 8007cce:	f8d7 e02c 	ldr.w	lr, [r7, #44]	@ 0x2c
 8007cd2:	f8cd e018 	str.w	lr, [sp, #24]
 8007cd6:	f8d7 c030 	ldr.w	ip, [r7, #48]	@ 0x30
 8007cda:	f8cd c014 	str.w	ip, [sp, #20]
 8007cde:	9604      	str	r6, [sp, #16]
 8007ce0:	9503      	str	r5, [sp, #12]
 8007ce2:	9402      	str	r4, [sp, #8]
 8007ce4:	9001      	str	r0, [sp, #4]
 8007ce6:	9100      	str	r1, [sp, #0]
 8007ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cee:	4834      	ldr	r0, [pc, #208]	@ (8007dc0 <print_mcu_data+0x2e0>)
 8007cf0:	f001 f8fa 	bl	8008ee8 <uart_printf>
		    msg.MCU_FAULT_two.MCU_FAULT_two_sig12,
		    msg.MCU_FAULT_two.MCU_FAULT_two_sig13,
		    msg.MCU_FAULT_two.MCU_FAULT_two_sig14
		);

		msg.MCU_FAULT_two.rx_or_not=0;
 8007cf4:	4a2f      	ldr	r2, [pc, #188]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007cf6:	f892 3184 	ldrb.w	r3, [r2, #388]	@ 0x184
 8007cfa:	f023 0301 	bic.w	r3, r3, #1
 8007cfe:	f882 3184 	strb.w	r3, [r2, #388]	@ 0x184
	}
	if(msg.MCU_Fault_Code.rx_or_not){
 8007d02:	4b2c      	ldr	r3, [pc, #176]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d04:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 808e 	beq.w	8007e30 <print_mcu_data+0x350>
		uart_printf(
 8007d14:	4b27      	ldr	r3, [pc, #156]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d16:	6a1b      	ldr	r3, [r3, #32]
 8007d18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d1a:	4b26      	ldr	r3, [pc, #152]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d1e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007d20:	4b24      	ldr	r3, [pc, #144]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d22:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007d24:	6378      	str	r0, [r7, #52]	@ 0x34
 8007d26:	4b23      	ldr	r3, [pc, #140]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d28:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8007d2a:	633c      	str	r4, [r7, #48]	@ 0x30
 8007d2c:	4b21      	ldr	r3, [pc, #132]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d2e:	6b1d      	ldr	r5, [r3, #48]	@ 0x30
 8007d30:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8007d32:	4b20      	ldr	r3, [pc, #128]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d34:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8007d36:	62be      	str	r6, [r7, #40]	@ 0x28
 8007d38:	4b1e      	ldr	r3, [pc, #120]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d3a:	f8d3 c038 	ldr.w	ip, [r3, #56]	@ 0x38
 8007d3e:	f8c7 c024 	str.w	ip, [r7, #36]	@ 0x24
 8007d42:	4b1c      	ldr	r3, [pc, #112]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d44:	f8d3 e03c 	ldr.w	lr, [r3, #60]	@ 0x3c
 8007d48:	f8c7 e020 	str.w	lr, [r7, #32]
 8007d4c:	4b19      	ldr	r3, [pc, #100]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d4e:	f8d3 8040 	ldr.w	r8, [r3, #64]	@ 0x40
 8007d52:	f8c7 801c 	str.w	r8, [r7, #28]
 8007d56:	4b17      	ldr	r3, [pc, #92]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d58:	f8d3 9044 	ldr.w	r9, [r3, #68]	@ 0x44
 8007d5c:	f8c7 9018 	str.w	r9, [r7, #24]
 8007d60:	4b14      	ldr	r3, [pc, #80]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d62:	f8d3 a048 	ldr.w	sl, [r3, #72]	@ 0x48
 8007d66:	f8c7 a014 	str.w	sl, [r7, #20]
 8007d6a:	4b12      	ldr	r3, [pc, #72]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d6c:	f8d3 b04c 	ldr.w	fp, [r3, #76]	@ 0x4c
 8007d70:	f8c7 b010 	str.w	fp, [r7, #16]
 8007d74:	4b0f      	ldr	r3, [pc, #60]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d76:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007d78:	60f9      	str	r1, [r7, #12]
 8007d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d7c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007d7e:	60b8      	str	r0, [r7, #8]
 8007d80:	4b0c      	ldr	r3, [pc, #48]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d82:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 8007d84:	607c      	str	r4, [r7, #4]
 8007d86:	4b0b      	ldr	r3, [pc, #44]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d88:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 8007d8a:	603d      	str	r5, [r7, #0]
 8007d8c:	4b09      	ldr	r3, [pc, #36]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d8e:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
 8007d90:	4b08      	ldr	r3, [pc, #32]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d92:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8007d94:	4b07      	ldr	r3, [pc, #28]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d96:	6e9c      	ldr	r4, [r3, #104]	@ 0x68
 8007d98:	4b06      	ldr	r3, [pc, #24]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d9a:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8007d9c:	4b05      	ldr	r3, [pc, #20]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007d9e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007da0:	4b04      	ldr	r3, [pc, #16]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007da2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007da4:	4b03      	ldr	r3, [pc, #12]	@ (8007db4 <print_mcu_data+0x2d4>)
 8007da6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007da8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007daa:	9212      	str	r2, [sp, #72]	@ 0x48
 8007dac:	9111      	str	r1, [sp, #68]	@ 0x44
 8007dae:	9010      	str	r0, [sp, #64]	@ 0x40
 8007db0:	e008      	b.n	8007dc4 <print_mcu_data+0x2e4>
 8007db2:	bf00      	nop
 8007db4:	20000340 	.word	0x20000340
 8007db8:	0800e48c 	.word	0x0800e48c
 8007dbc:	0800e4d0 	.word	0x0800e4d0
 8007dc0:	0800e548 	.word	0x0800e548
 8007dc4:	940f      	str	r4, [sp, #60]	@ 0x3c
 8007dc6:	950e      	str	r5, [sp, #56]	@ 0x38
 8007dc8:	960d      	str	r6, [sp, #52]	@ 0x34
 8007dca:	683d      	ldr	r5, [r7, #0]
 8007dcc:	950c      	str	r5, [sp, #48]	@ 0x30
 8007dce:	687c      	ldr	r4, [r7, #4]
 8007dd0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007dd2:	68b8      	ldr	r0, [r7, #8]
 8007dd4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007dd6:	68f9      	ldr	r1, [r7, #12]
 8007dd8:	9109      	str	r1, [sp, #36]	@ 0x24
 8007dda:	f8d7 b010 	ldr.w	fp, [r7, #16]
 8007dde:	f8cd b020 	str.w	fp, [sp, #32]
 8007de2:	f8d7 a014 	ldr.w	sl, [r7, #20]
 8007de6:	f8cd a01c 	str.w	sl, [sp, #28]
 8007dea:	f8d7 9018 	ldr.w	r9, [r7, #24]
 8007dee:	f8cd 9018 	str.w	r9, [sp, #24]
 8007df2:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007df6:	f8cd 8014 	str.w	r8, [sp, #20]
 8007dfa:	f8d7 e020 	ldr.w	lr, [r7, #32]
 8007dfe:	f8cd e010 	str.w	lr, [sp, #16]
 8007e02:	f8d7 c024 	ldr.w	ip, [r7, #36]	@ 0x24
 8007e06:	f8cd c00c 	str.w	ip, [sp, #12]
 8007e0a:	6abe      	ldr	r6, [r7, #40]	@ 0x28
 8007e0c:	9602      	str	r6, [sp, #8]
 8007e0e:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8007e10:	9501      	str	r5, [sp, #4]
 8007e12:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8007e14:	9400      	str	r4, [sp, #0]
 8007e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e1c:	482e      	ldr	r0, [pc, #184]	@ (8007ed8 <print_mcu_data+0x3f8>)
 8007e1e:	f001 f863 	bl	8008ee8 <uart_printf>
		    msg.MCU_Fault_Code.MCU_Fault_Code_19,
		    msg.MCU_Fault_Code.MCU_Fault_Code_20,
		    msg.MCU_Fault_Code.MCU_Fault_Code_21,
		    msg.MCU_Fault_Code.MCU_Fault_Code_22
		);
		msg.MCU_Fault_Code.rx_or_not=0;
 8007e22:	4a2e      	ldr	r2, [pc, #184]	@ (8007edc <print_mcu_data+0x3fc>)
 8007e24:	f892 3080 	ldrb.w	r3, [r2, #128]	@ 0x80
 8007e28:	f023 0301 	bic.w	r3, r3, #1
 8007e2c:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
	}
	if(msg.MCU_Stat_One.rx_or_not){
 8007e30:	4b2a      	ldr	r3, [pc, #168]	@ (8007edc <print_mcu_data+0x3fc>)
 8007e32:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d027      	beq.n	8007e90 <print_mcu_data+0x3b0>
		msg.MCU_Stat_One.rx_or_not=0;
 8007e40:	4a26      	ldr	r2, [pc, #152]	@ (8007edc <print_mcu_data+0x3fc>)
 8007e42:	f892 3140 	ldrb.w	r3, [r2, #320]	@ 0x140
 8007e46:	f023 0301 	bic.w	r3, r3, #1
 8007e4a:	f882 3140 	strb.w	r3, [r2, #320]	@ 0x140
		uart_printf(
 8007e4e:	4b23      	ldr	r3, [pc, #140]	@ (8007edc <print_mcu_data+0x3fc>)
 8007e50:	f8d3 6120 	ldr.w	r6, [r3, #288]	@ 0x120
 8007e54:	4b21      	ldr	r3, [pc, #132]	@ (8007edc <print_mcu_data+0x3fc>)
 8007e56:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8007e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8007edc <print_mcu_data+0x3fc>)
 8007e5e:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	@ 0x128
 8007e62:	491e      	ldr	r1, [pc, #120]	@ (8007edc <print_mcu_data+0x3fc>)
 8007e64:	f8d1 1130 	ldr.w	r1, [r1, #304]	@ 0x130
 8007e68:	481c      	ldr	r0, [pc, #112]	@ (8007edc <print_mcu_data+0x3fc>)
 8007e6a:	f8d0 0134 	ldr.w	r0, [r0, #308]	@ 0x134
 8007e6e:	4c1b      	ldr	r4, [pc, #108]	@ (8007edc <print_mcu_data+0x3fc>)
 8007e70:	f8d4 4138 	ldr.w	r4, [r4, #312]	@ 0x138
 8007e74:	4d19      	ldr	r5, [pc, #100]	@ (8007edc <print_mcu_data+0x3fc>)
 8007e76:	f8d5 513c 	ldr.w	r5, [r5, #316]	@ 0x13c
 8007e7a:	9505      	str	r5, [sp, #20]
 8007e7c:	9404      	str	r4, [sp, #16]
 8007e7e:	9003      	str	r0, [sp, #12]
 8007e80:	9102      	str	r1, [sp, #8]
 8007e82:	e9cd 2300 	strd	r2, r3, [sp]
 8007e86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4815      	ldr	r0, [pc, #84]	@ (8007ee0 <print_mcu_data+0x400>)
 8007e8c:	f001 f82c 	bl	8008ee8 <uart_printf>
		    msg.MCU_Stat_One.MCU_Stat_One_sig5,
		    msg.MCU_Stat_One.MCU_Stat_One_sig6
		);

	}
	if(msg.MCU_Stat_Two.rx_or_not){
 8007e90:	4b12      	ldr	r3, [pc, #72]	@ (8007edc <print_mcu_data+0x3fc>)
 8007e92:	7e1b      	ldrb	r3, [r3, #24]
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d016      	beq.n	8007ecc <print_mcu_data+0x3ec>
	uart_printf("Odometer=%.1f km voltage=%.0f Motor_RPM=%.0f\n\r",msg.MCU_Stat_Two.MCU_Odometer_Val,msg.MCU_Stat_Two.MCU_VCU_State,msg.MCU_Stat_Two.MCU_Motor_RPM);
 8007e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007edc <print_mcu_data+0x3fc>)
 8007ea0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8007edc <print_mcu_data+0x3fc>)
 8007ea6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007eaa:	490c      	ldr	r1, [pc, #48]	@ (8007edc <print_mcu_data+0x3fc>)
 8007eac:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8007eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eb4:	e9cd 2300 	strd	r2, r3, [sp]
 8007eb8:	4622      	mov	r2, r4
 8007eba:	462b      	mov	r3, r5
 8007ebc:	4809      	ldr	r0, [pc, #36]	@ (8007ee4 <print_mcu_data+0x404>)
 8007ebe:	f001 f813 	bl	8008ee8 <uart_printf>
	msg.MCU_Stat_Two.rx_or_not=0;
 8007ec2:	4a06      	ldr	r2, [pc, #24]	@ (8007edc <print_mcu_data+0x3fc>)
 8007ec4:	7e13      	ldrb	r3, [r2, #24]
 8007ec6:	f023 0301 	bic.w	r3, r3, #1
 8007eca:	7613      	strb	r3, [r2, #24]
	}
}
 8007ecc:	bf00      	nop
 8007ece:	3744      	adds	r7, #68	@ 0x44
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed6:	bf00      	nop
 8007ed8:	0800e5b8 	.word	0x0800e5b8
 8007edc:	20000340 	.word	0x20000340
 8007ee0:	0800e660 	.word	0x0800e660
 8007ee4:	0800e6ac 	.word	0x0800e6ac

08007ee8 <print_bms_data>:
void print_bms_data(){
 8007ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007eec:	b099      	sub	sp, #100	@ 0x64
 8007eee:	af10      	add	r7, sp, #64	@ 0x40
	if(Bms_Frames.Id_0x100.rx_or_not){
 8007ef0:	4bad      	ldr	r3, [pc, #692]	@ (80081a8 <print_bms_data+0x2c0>)
 8007ef2:	7b9b      	ldrb	r3, [r3, #14]
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d025      	beq.n	8007f4a <print_bms_data+0x62>
		Bms_Frames.Id_0x100.rx_or_not=0;
 8007efe:	4aaa      	ldr	r2, [pc, #680]	@ (80081a8 <print_bms_data+0x2c0>)
 8007f00:	7b93      	ldrb	r3, [r2, #14]
 8007f02:	f023 0301 	bic.w	r3, r3, #1
 8007f06:	7393      	strb	r3, [r2, #14]
		uart_printf("0x100 -> Total_Voltage=%.2f V, Current=%.2f A, Remaining_Capacity=%.2f Ah, CRC=0x%d\n",
		Bms_Frames.Id_0x100.Total_Voltage, Bms_Frames.Id_0x100.Charge_and_Discharge_Current, Bms_Frames.Id_0x100.Remaining_Capacity, Bms_Frames.Id_0x100.CRC_Check);
 8007f08:	4ba7      	ldr	r3, [pc, #668]	@ (80081a8 <print_bms_data+0x2c0>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
		uart_printf("0x100 -> Total_Voltage=%.2f V, Current=%.2f A, Remaining_Capacity=%.2f Ah, CRC=0x%d\n",
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fc fa8b 	bl	8004428 <__aeabi_f2d>
 8007f12:	4680      	mov	r8, r0
 8007f14:	4689      	mov	r9, r1
		Bms_Frames.Id_0x100.Total_Voltage, Bms_Frames.Id_0x100.Charge_and_Discharge_Current, Bms_Frames.Id_0x100.Remaining_Capacity, Bms_Frames.Id_0x100.CRC_Check);
 8007f16:	4ba4      	ldr	r3, [pc, #656]	@ (80081a8 <print_bms_data+0x2c0>)
 8007f18:	685b      	ldr	r3, [r3, #4]
		uart_printf("0x100 -> Total_Voltage=%.2f V, Current=%.2f A, Remaining_Capacity=%.2f Ah, CRC=0x%d\n",
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fc fa84 	bl	8004428 <__aeabi_f2d>
 8007f20:	4604      	mov	r4, r0
 8007f22:	460d      	mov	r5, r1
		Bms_Frames.Id_0x100.Total_Voltage, Bms_Frames.Id_0x100.Charge_and_Discharge_Current, Bms_Frames.Id_0x100.Remaining_Capacity, Bms_Frames.Id_0x100.CRC_Check);
 8007f24:	4ba0      	ldr	r3, [pc, #640]	@ (80081a8 <print_bms_data+0x2c0>)
 8007f26:	689b      	ldr	r3, [r3, #8]
		uart_printf("0x100 -> Total_Voltage=%.2f V, Current=%.2f A, Remaining_Capacity=%.2f Ah, CRC=0x%d\n",
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f7fc fa7d 	bl	8004428 <__aeabi_f2d>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
		Bms_Frames.Id_0x100.Total_Voltage, Bms_Frames.Id_0x100.Charge_and_Discharge_Current, Bms_Frames.Id_0x100.Remaining_Capacity, Bms_Frames.Id_0x100.CRC_Check);
 8007f32:	499d      	ldr	r1, [pc, #628]	@ (80081a8 <print_bms_data+0x2c0>)
 8007f34:	8989      	ldrh	r1, [r1, #12]
		uart_printf("0x100 -> Total_Voltage=%.2f V, Current=%.2f A, Remaining_Capacity=%.2f Ah, CRC=0x%d\n",
 8007f36:	9104      	str	r1, [sp, #16]
 8007f38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f3c:	e9cd 4500 	strd	r4, r5, [sp]
 8007f40:	4642      	mov	r2, r8
 8007f42:	464b      	mov	r3, r9
 8007f44:	4899      	ldr	r0, [pc, #612]	@ (80081ac <print_bms_data+0x2c4>)
 8007f46:	f000 ffcf 	bl	8008ee8 <uart_printf>
	}
	if(Bms_Frames.Id_0x101.rx_or_not){
 8007f4a:	4b97      	ldr	r3, [pc, #604]	@ (80081a8 <print_bms_data+0x2c0>)
 8007f4c:	7e9b      	ldrb	r3, [r3, #26]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d019      	beq.n	8007f8c <print_bms_data+0xa4>
	   Bms_Frames.Id_0x101.rx_or_not=0;
 8007f58:	4a93      	ldr	r2, [pc, #588]	@ (80081a8 <print_bms_data+0x2c0>)
 8007f5a:	7e93      	ldrb	r3, [r2, #26]
 8007f5c:	f023 0301 	bic.w	r3, r3, #1
 8007f60:	7693      	strb	r3, [r2, #26]
	   uart_printf("0x101 -> Full_Capacity=%.2f Ah, No_Cycles=%d, RSOC=%d%%, CRC=0x%d\n",
			   Bms_Frames.Id_0x101.Full_Capacity, Bms_Frames.Id_0x101.No_Cycles, Bms_Frames.Id_0x101.RSOC, Bms_Frames.Id_0x101.CRC_Check);
 8007f62:	4b91      	ldr	r3, [pc, #580]	@ (80081a8 <print_bms_data+0x2c0>)
 8007f64:	691b      	ldr	r3, [r3, #16]
	   uart_printf("0x101 -> Full_Capacity=%.2f Ah, No_Cycles=%d, RSOC=%d%%, CRC=0x%d\n",
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fc fa5e 	bl	8004428 <__aeabi_f2d>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
			   Bms_Frames.Id_0x101.Full_Capacity, Bms_Frames.Id_0x101.No_Cycles, Bms_Frames.Id_0x101.RSOC, Bms_Frames.Id_0x101.CRC_Check);
 8007f70:	498d      	ldr	r1, [pc, #564]	@ (80081a8 <print_bms_data+0x2c0>)
 8007f72:	8a89      	ldrh	r1, [r1, #20]
	   uart_printf("0x101 -> Full_Capacity=%.2f Ah, No_Cycles=%d, RSOC=%d%%, CRC=0x%d\n",
 8007f74:	4608      	mov	r0, r1
			   Bms_Frames.Id_0x101.Full_Capacity, Bms_Frames.Id_0x101.No_Cycles, Bms_Frames.Id_0x101.RSOC, Bms_Frames.Id_0x101.CRC_Check);
 8007f76:	498c      	ldr	r1, [pc, #560]	@ (80081a8 <print_bms_data+0x2c0>)
 8007f78:	8ac9      	ldrh	r1, [r1, #22]
	   uart_printf("0x101 -> Full_Capacity=%.2f Ah, No_Cycles=%d, RSOC=%d%%, CRC=0x%d\n",
 8007f7a:	460c      	mov	r4, r1
			   Bms_Frames.Id_0x101.Full_Capacity, Bms_Frames.Id_0x101.No_Cycles, Bms_Frames.Id_0x101.RSOC, Bms_Frames.Id_0x101.CRC_Check);
 8007f7c:	498a      	ldr	r1, [pc, #552]	@ (80081a8 <print_bms_data+0x2c0>)
 8007f7e:	8b09      	ldrh	r1, [r1, #24]
	   uart_printf("0x101 -> Full_Capacity=%.2f Ah, No_Cycles=%d, RSOC=%d%%, CRC=0x%d\n",
 8007f80:	9102      	str	r1, [sp, #8]
 8007f82:	9401      	str	r4, [sp, #4]
 8007f84:	9000      	str	r0, [sp, #0]
 8007f86:	488a      	ldr	r0, [pc, #552]	@ (80081b0 <print_bms_data+0x2c8>)
 8007f88:	f000 ffae 	bl	8008ee8 <uart_printf>
	}
	if(Bms_Frames.Id_0x102.rx_or_not){
 8007f8c:	4b86      	ldr	r3, [pc, #536]	@ (80081a8 <print_bms_data+0x2c0>)
 8007f8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d065      	beq.n	8008068 <print_bms_data+0x180>
		Bms_Frames.Id_0x102.rx_or_not=0;
 8007f9c:	4a82      	ldr	r2, [pc, #520]	@ (80081a8 <print_bms_data+0x2c0>)
 8007f9e:	f892 3042 	ldrb.w	r3, [r2, #66]	@ 0x42
 8007fa2:	f023 0301 	bic.w	r3, r3, #1
 8007fa6:	f882 3042 	strb.w	r3, [r2, #66]	@ 0x42
		uart_printf(
		        "0x102 -> EQ1=%d EQ2=%d EQ3=%d EQ4=%d EQ5=%d EQ6=%d EQ7=%d EQ8=%d "
		        "EQ9=%d EQ10=%d EQ11=%d EQ12=%d EQ13=%d EQ14=%d EQ15=%d EQ16=%d | "
		        "Prot=0x%X, CRC=0x%X\n",
		        Bms_Frames.Id_0x102.Equlization_Low_byte[0], Bms_Frames.Id_0x102.Equlization_Low_byte[1],
 8007faa:	4b7f      	ldr	r3, [pc, #508]	@ (80081a8 <print_bms_data+0x2c0>)
 8007fac:	7f1b      	ldrb	r3, [r3, #28]
		uart_printf(
 8007fae:	469c      	mov	ip, r3
		        Bms_Frames.Id_0x102.Equlization_Low_byte[0], Bms_Frames.Id_0x102.Equlization_Low_byte[1],
 8007fb0:	4b7d      	ldr	r3, [pc, #500]	@ (80081a8 <print_bms_data+0x2c0>)
 8007fb2:	7f5b      	ldrb	r3, [r3, #29]
		uart_printf(
 8007fb4:	469e      	mov	lr, r3
		        Bms_Frames.Id_0x102.Equlization_Low_byte[2], Bms_Frames.Id_0x102.Equlization_Low_byte[3],
 8007fb6:	4b7c      	ldr	r3, [pc, #496]	@ (80081a8 <print_bms_data+0x2c0>)
 8007fb8:	7f9b      	ldrb	r3, [r3, #30]
		uart_printf(
 8007fba:	4698      	mov	r8, r3
		        Bms_Frames.Id_0x102.Equlization_Low_byte[2], Bms_Frames.Id_0x102.Equlization_Low_byte[3],
 8007fbc:	4b7a      	ldr	r3, [pc, #488]	@ (80081a8 <print_bms_data+0x2c0>)
 8007fbe:	7fdb      	ldrb	r3, [r3, #31]
		uart_printf(
 8007fc0:	461d      	mov	r5, r3
		        Bms_Frames.Id_0x102.Equlization_Low_byte[4], Bms_Frames.Id_0x102.Equlization_Low_byte[5],
 8007fc2:	4b79      	ldr	r3, [pc, #484]	@ (80081a8 <print_bms_data+0x2c0>)
 8007fc4:	f893 3020 	ldrb.w	r3, [r3, #32]
		uart_printf(
 8007fc8:	461e      	mov	r6, r3
		        Bms_Frames.Id_0x102.Equlization_Low_byte[4], Bms_Frames.Id_0x102.Equlization_Low_byte[5],
 8007fca:	4b77      	ldr	r3, [pc, #476]	@ (80081a8 <print_bms_data+0x2c0>)
 8007fcc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
		uart_printf(
 8007fd0:	61fb      	str	r3, [r7, #28]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[6], Bms_Frames.Id_0x102.Equlization_Low_byte[7],
 8007fd2:	4b75      	ldr	r3, [pc, #468]	@ (80081a8 <print_bms_data+0x2c0>)
 8007fd4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
		uart_printf(
 8007fd8:	61bb      	str	r3, [r7, #24]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[6], Bms_Frames.Id_0x102.Equlization_Low_byte[7],
 8007fda:	4b73      	ldr	r3, [pc, #460]	@ (80081a8 <print_bms_data+0x2c0>)
 8007fdc:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
		uart_printf(
 8007fe0:	617b      	str	r3, [r7, #20]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[8], Bms_Frames.Id_0x102.Equlization_Low_byte[9],
 8007fe2:	4b71      	ldr	r3, [pc, #452]	@ (80081a8 <print_bms_data+0x2c0>)
 8007fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
		uart_printf(
 8007fe8:	613b      	str	r3, [r7, #16]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[8], Bms_Frames.Id_0x102.Equlization_Low_byte[9],
 8007fea:	4b6f      	ldr	r3, [pc, #444]	@ (80081a8 <print_bms_data+0x2c0>)
 8007fec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
		uart_printf(
 8007ff0:	60fb      	str	r3, [r7, #12]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[10], Bms_Frames.Id_0x102.Equlization_Low_byte[11],
 8007ff2:	4b6d      	ldr	r3, [pc, #436]	@ (80081a8 <print_bms_data+0x2c0>)
 8007ff4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
		uart_printf(
 8007ff8:	60bb      	str	r3, [r7, #8]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[10], Bms_Frames.Id_0x102.Equlization_Low_byte[11],
 8007ffa:	4b6b      	ldr	r3, [pc, #428]	@ (80081a8 <print_bms_data+0x2c0>)
 8007ffc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
		uart_printf(
 8008000:	607b      	str	r3, [r7, #4]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[12], Bms_Frames.Id_0x102.Equlization_Low_byte[13],
 8008002:	4b69      	ldr	r3, [pc, #420]	@ (80081a8 <print_bms_data+0x2c0>)
 8008004:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
		uart_printf(
 8008008:	603b      	str	r3, [r7, #0]
		        Bms_Frames.Id_0x102.Equlization_Low_byte[12], Bms_Frames.Id_0x102.Equlization_Low_byte[13],
 800800a:	4b67      	ldr	r3, [pc, #412]	@ (80081a8 <print_bms_data+0x2c0>)
 800800c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
		uart_printf(
 8008010:	461c      	mov	r4, r3
		        Bms_Frames.Id_0x102.Equlization_Low_byte[14], Bms_Frames.Id_0x102.Equlization_Low_byte[15],
 8008012:	4b65      	ldr	r3, [pc, #404]	@ (80081a8 <print_bms_data+0x2c0>)
 8008014:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
		uart_printf(
 8008018:	4618      	mov	r0, r3
		        Bms_Frames.Id_0x102.Equlization_Low_byte[14], Bms_Frames.Id_0x102.Equlization_Low_byte[15],
 800801a:	4b63      	ldr	r3, [pc, #396]	@ (80081a8 <print_bms_data+0x2c0>)
 800801c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
		uart_printf(
 8008020:	4619      	mov	r1, r3
		        Bms_Frames.Id_0x102.Protection_Status,
 8008022:	4b61      	ldr	r3, [pc, #388]	@ (80081a8 <print_bms_data+0x2c0>)
 8008024:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
		uart_printf(
 8008026:	461a      	mov	r2, r3
		        Bms_Frames.Id_0x102.CRC_Check
 8008028:	4b5f      	ldr	r3, [pc, #380]	@ (80081a8 <print_bms_data+0x2c0>)
 800802a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
		uart_printf(
 800802e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008030:	920d      	str	r2, [sp, #52]	@ 0x34
 8008032:	910c      	str	r1, [sp, #48]	@ 0x30
 8008034:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008036:	940a      	str	r4, [sp, #40]	@ 0x28
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	9209      	str	r2, [sp, #36]	@ 0x24
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	9208      	str	r2, [sp, #32]
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	9207      	str	r2, [sp, #28]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	9206      	str	r2, [sp, #24]
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	9205      	str	r2, [sp, #20]
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	9204      	str	r2, [sp, #16]
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	9203      	str	r2, [sp, #12]
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	9302      	str	r3, [sp, #8]
 8008058:	9601      	str	r6, [sp, #4]
 800805a:	9500      	str	r5, [sp, #0]
 800805c:	4643      	mov	r3, r8
 800805e:	4672      	mov	r2, lr
 8008060:	4661      	mov	r1, ip
 8008062:	4854      	ldr	r0, [pc, #336]	@ (80081b4 <print_bms_data+0x2cc>)
 8008064:	f000 ff40 	bl	8008ee8 <uart_printf>
		    );
	}
	if(Bms_Frames.Id_0x103.rx_or_not){
 8008068:	4b4f      	ldr	r3, [pc, #316]	@ (80081a8 <print_bms_data+0x2c0>)
 800806a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800806e:	f003 0301 	and.w	r3, r3, #1
 8008072:	b2db      	uxtb	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01a      	beq.n	80080ae <print_bms_data+0x1c6>
		Bms_Frames.Id_0x103.rx_or_not=0;
 8008078:	4a4b      	ldr	r2, [pc, #300]	@ (80081a8 <print_bms_data+0x2c0>)
 800807a:	f892 304c 	ldrb.w	r3, [r2, #76]	@ 0x4c
 800807e:	f023 0301 	bic.w	r3, r3, #1
 8008082:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
		uart_printf("0x103 -> FET_Status=0x%d, Prod_Date=0x%d, SW_Version=0x%d, CRC=0x%d\n",
				Bms_Frames.Id_0x103.FET_Control_Status,Bms_Frames.Id_0x103.Production_Date, Bms_Frames.Id_0x103.Software_Version, Bms_Frames.Id_0x103.CRC_Check);
 8008086:	4b48      	ldr	r3, [pc, #288]	@ (80081a8 <print_bms_data+0x2c0>)
 8008088:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
		uart_printf("0x103 -> FET_Status=0x%d, Prod_Date=0x%d, SW_Version=0x%d, CRC=0x%d\n",
 800808c:	4619      	mov	r1, r3
				Bms_Frames.Id_0x103.FET_Control_Status,Bms_Frames.Id_0x103.Production_Date, Bms_Frames.Id_0x103.Software_Version, Bms_Frames.Id_0x103.CRC_Check);
 800808e:	4b46      	ldr	r3, [pc, #280]	@ (80081a8 <print_bms_data+0x2c0>)
 8008090:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	@ 0x46
		uart_printf("0x103 -> FET_Status=0x%d, Prod_Date=0x%d, SW_Version=0x%d, CRC=0x%d\n",
 8008094:	461a      	mov	r2, r3
				Bms_Frames.Id_0x103.FET_Control_Status,Bms_Frames.Id_0x103.Production_Date, Bms_Frames.Id_0x103.Software_Version, Bms_Frames.Id_0x103.CRC_Check);
 8008096:	4b44      	ldr	r3, [pc, #272]	@ (80081a8 <print_bms_data+0x2c0>)
 8008098:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
		uart_printf("0x103 -> FET_Status=0x%d, Prod_Date=0x%d, SW_Version=0x%d, CRC=0x%d\n",
 800809c:	4618      	mov	r0, r3
				Bms_Frames.Id_0x103.FET_Control_Status,Bms_Frames.Id_0x103.Production_Date, Bms_Frames.Id_0x103.Software_Version, Bms_Frames.Id_0x103.CRC_Check);
 800809e:	4b42      	ldr	r3, [pc, #264]	@ (80081a8 <print_bms_data+0x2c0>)
 80080a0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
		uart_printf("0x103 -> FET_Status=0x%d, Prod_Date=0x%d, SW_Version=0x%d, CRC=0x%d\n",
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	4603      	mov	r3, r0
 80080a8:	4843      	ldr	r0, [pc, #268]	@ (80081b8 <print_bms_data+0x2d0>)
 80080aa:	f000 ff1d 	bl	8008ee8 <uart_printf>
	}
	if(Bms_Frames.Id_0x104.rx_or_not){
 80080ae:	4b3e      	ldr	r3, [pc, #248]	@ (80081a8 <print_bms_data+0x2c0>)
 80080b0:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d014      	beq.n	80080e8 <print_bms_data+0x200>
		Bms_Frames.Id_0x104.rx_or_not=0;
 80080be:	4a3a      	ldr	r2, [pc, #232]	@ (80081a8 <print_bms_data+0x2c0>)
 80080c0:	f892 3052 	ldrb.w	r3, [r2, #82]	@ 0x52
 80080c4:	f023 0301 	bic.w	r3, r3, #1
 80080c8:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
		uart_printf("0x104 -> Battery_Strings=%d, NTC_Probes=%d, CRC=0x%X\n",
				Bms_Frames.Id_0x104.Number_Of_Battery_Strings, Bms_Frames.Id_0x104.NTC_Number_Probes,Bms_Frames.Id_0x104.CRC_Check);
 80080cc:	4b36      	ldr	r3, [pc, #216]	@ (80081a8 <print_bms_data+0x2c0>)
 80080ce:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
		uart_printf("0x104 -> Battery_Strings=%d, NTC_Probes=%d, CRC=0x%X\n",
 80080d2:	4619      	mov	r1, r3
				Bms_Frames.Id_0x104.Number_Of_Battery_Strings, Bms_Frames.Id_0x104.NTC_Number_Probes,Bms_Frames.Id_0x104.CRC_Check);
 80080d4:	4b34      	ldr	r3, [pc, #208]	@ (80081a8 <print_bms_data+0x2c0>)
 80080d6:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
		uart_printf("0x104 -> Battery_Strings=%d, NTC_Probes=%d, CRC=0x%X\n",
 80080da:	461a      	mov	r2, r3
				Bms_Frames.Id_0x104.Number_Of_Battery_Strings, Bms_Frames.Id_0x104.NTC_Number_Probes,Bms_Frames.Id_0x104.CRC_Check);
 80080dc:	4b32      	ldr	r3, [pc, #200]	@ (80081a8 <print_bms_data+0x2c0>)
 80080de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
		uart_printf("0x104 -> Battery_Strings=%d, NTC_Probes=%d, CRC=0x%X\n",
 80080e2:	4836      	ldr	r0, [pc, #216]	@ (80081bc <print_bms_data+0x2d4>)
 80080e4:	f000 ff00 	bl	8008ee8 <uart_printf>
	}
	if(Bms_Frames.Id_0x105.rx_or_not){
 80080e8:	4b2f      	ldr	r3, [pc, #188]	@ (80081a8 <print_bms_data+0x2c0>)
 80080ea:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d028      	beq.n	800814a <print_bms_data+0x262>
		Bms_Frames.Id_0x105.rx_or_not=0;
 80080f8:	4a2b      	ldr	r2, [pc, #172]	@ (80081a8 <print_bms_data+0x2c0>)
 80080fa:	f892 3062 	ldrb.w	r3, [r2, #98]	@ 0x62
 80080fe:	f023 0301 	bic.w	r3, r3, #1
 8008102:	f882 3062 	strb.w	r3, [r2, #98]	@ 0x62
		uart_printf("0x105 -> NTC1=%.2f°C, NTC2=%.2f°C, NTC3=%.2f°C, CRC=0x%X\n",
		Bms_Frames.Id_0x105.NTC1,Bms_Frames.Id_0x105.NTC2, Bms_Frames.Id_0x105.NTC3, Bms_Frames.Id_0x105.CRC_Check);
 8008106:	4b28      	ldr	r3, [pc, #160]	@ (80081a8 <print_bms_data+0x2c0>)
 8008108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
		uart_printf("0x105 -> NTC1=%.2f°C, NTC2=%.2f°C, NTC3=%.2f°C, CRC=0x%X\n",
 800810a:	4618      	mov	r0, r3
 800810c:	f7fc f98c 	bl	8004428 <__aeabi_f2d>
 8008110:	4680      	mov	r8, r0
 8008112:	4689      	mov	r9, r1
		Bms_Frames.Id_0x105.NTC1,Bms_Frames.Id_0x105.NTC2, Bms_Frames.Id_0x105.NTC3, Bms_Frames.Id_0x105.CRC_Check);
 8008114:	4b24      	ldr	r3, [pc, #144]	@ (80081a8 <print_bms_data+0x2c0>)
 8008116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
		uart_printf("0x105 -> NTC1=%.2f°C, NTC2=%.2f°C, NTC3=%.2f°C, CRC=0x%X\n",
 8008118:	4618      	mov	r0, r3
 800811a:	f7fc f985 	bl	8004428 <__aeabi_f2d>
 800811e:	4604      	mov	r4, r0
 8008120:	460d      	mov	r5, r1
		Bms_Frames.Id_0x105.NTC1,Bms_Frames.Id_0x105.NTC2, Bms_Frames.Id_0x105.NTC3, Bms_Frames.Id_0x105.CRC_Check);
 8008122:	4b21      	ldr	r3, [pc, #132]	@ (80081a8 <print_bms_data+0x2c0>)
 8008124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
		uart_printf("0x105 -> NTC1=%.2f°C, NTC2=%.2f°C, NTC3=%.2f°C, CRC=0x%X\n",
 8008126:	4618      	mov	r0, r3
 8008128:	f7fc f97e 	bl	8004428 <__aeabi_f2d>
 800812c:	4602      	mov	r2, r0
 800812e:	460b      	mov	r3, r1
		Bms_Frames.Id_0x105.NTC1,Bms_Frames.Id_0x105.NTC2, Bms_Frames.Id_0x105.NTC3, Bms_Frames.Id_0x105.CRC_Check);
 8008130:	491d      	ldr	r1, [pc, #116]	@ (80081a8 <print_bms_data+0x2c0>)
 8008132:	f8b1 1060 	ldrh.w	r1, [r1, #96]	@ 0x60
		uart_printf("0x105 -> NTC1=%.2f°C, NTC2=%.2f°C, NTC3=%.2f°C, CRC=0x%X\n",
 8008136:	9104      	str	r1, [sp, #16]
 8008138:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800813c:	e9cd 4500 	strd	r4, r5, [sp]
 8008140:	4642      	mov	r2, r8
 8008142:	464b      	mov	r3, r9
 8008144:	481e      	ldr	r0, [pc, #120]	@ (80081c0 <print_bms_data+0x2d8>)
 8008146:	f000 fecf 	bl	8008ee8 <uart_printf>
	}
	if(Bms_Frames.Id_0x106.rx_or_not){
 800814a:	4b17      	ldr	r3, [pc, #92]	@ (80081a8 <print_bms_data+0x2c0>)
 800814c:	f893 3072 	ldrb.w	r3, [r3, #114]	@ 0x72
 8008150:	f003 0301 	and.w	r3, r3, #1
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b00      	cmp	r3, #0
 8008158:	d01f      	beq.n	800819a <print_bms_data+0x2b2>
		Bms_Frames.Id_0x106.rx_or_not=0;
 800815a:	4a13      	ldr	r2, [pc, #76]	@ (80081a8 <print_bms_data+0x2c0>)
 800815c:	f892 3072 	ldrb.w	r3, [r2, #114]	@ 0x72
 8008160:	f023 0301 	bic.w	r3, r3, #1
 8008164:	f882 3072 	strb.w	r3, [r2, #114]	@ 0x72
		uart_printf("0x106 -> NTC4=%.2f°C, NTC5=%.2f°C,  CRC=0x%X\n",
				Bms_Frames.Id_0x106.NTC4, Bms_Frames.Id_0x106.NTC5,  Bms_Frames.Id_0x106.CRC_Check);
 8008168:	4b0f      	ldr	r3, [pc, #60]	@ (80081a8 <print_bms_data+0x2c0>)
 800816a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
		uart_printf("0x106 -> NTC4=%.2f°C, NTC5=%.2f°C,  CRC=0x%X\n",
 800816c:	4618      	mov	r0, r3
 800816e:	f7fc f95b 	bl	8004428 <__aeabi_f2d>
 8008172:	4604      	mov	r4, r0
 8008174:	460d      	mov	r5, r1
				Bms_Frames.Id_0x106.NTC4, Bms_Frames.Id_0x106.NTC5,  Bms_Frames.Id_0x106.CRC_Check);
 8008176:	4b0c      	ldr	r3, [pc, #48]	@ (80081a8 <print_bms_data+0x2c0>)
 8008178:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
		uart_printf("0x106 -> NTC4=%.2f°C, NTC5=%.2f°C,  CRC=0x%X\n",
 800817a:	4618      	mov	r0, r3
 800817c:	f7fc f954 	bl	8004428 <__aeabi_f2d>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
				Bms_Frames.Id_0x106.NTC4, Bms_Frames.Id_0x106.NTC5,  Bms_Frames.Id_0x106.CRC_Check);
 8008184:	4908      	ldr	r1, [pc, #32]	@ (80081a8 <print_bms_data+0x2c0>)
 8008186:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
		uart_printf("0x106 -> NTC4=%.2f°C, NTC5=%.2f°C,  CRC=0x%X\n",
 800818a:	9102      	str	r1, [sp, #8]
 800818c:	e9cd 2300 	strd	r2, r3, [sp]
 8008190:	4622      	mov	r2, r4
 8008192:	462b      	mov	r3, r5
 8008194:	480b      	ldr	r0, [pc, #44]	@ (80081c4 <print_bms_data+0x2dc>)
 8008196:	f000 fea7 	bl	8008ee8 <uart_printf>
	}
	if(Bms_Frames.Id_0x107.rx_or_not){
 800819a:	4b03      	ldr	r3, [pc, #12]	@ (80081a8 <print_bms_data+0x2c0>)
 800819c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 80081a0:	f003 0301 	and.w	r3, r3, #1
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	e00f      	b.n	80081c8 <print_bms_data+0x2e0>
 80081a8:	20000228 	.word	0x20000228
 80081ac:	0800e6dc 	.word	0x0800e6dc
 80081b0:	0800e734 	.word	0x0800e734
 80081b4:	0800e778 	.word	0x0800e778
 80081b8:	0800e810 	.word	0x0800e810
 80081bc:	0800e858 	.word	0x0800e858
 80081c0:	0800e890 	.word	0x0800e890
 80081c4:	0800e8d0 	.word	0x0800e8d0
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d028      	beq.n	800821e <print_bms_data+0x336>
		Bms_Frames.Id_0x107.rx_or_not=0;
 80081cc:	4a88      	ldr	r2, [pc, #544]	@ (80083f0 <print_bms_data+0x508>)
 80081ce:	f892 3082 	ldrb.w	r3, [r2, #130]	@ 0x82
 80081d2:	f023 0301 	bic.w	r3, r3, #1
 80081d6:	f882 3082 	strb.w	r3, [r2, #130]	@ 0x82
		uart_printf("0x107 -> CELL1=%.3fV, CELL2=%.3fV, CELL3=%.3fV, CRC=0x%X\n",
				Bms_Frames.Id_0x107.CELL1, Bms_Frames.Id_0x107.CELL2, Bms_Frames.Id_0x107.CELL3, Bms_Frames.Id_0x107.CRC_Check);
 80081da:	4b85      	ldr	r3, [pc, #532]	@ (80083f0 <print_bms_data+0x508>)
 80081dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
		uart_printf("0x107 -> CELL1=%.3fV, CELL2=%.3fV, CELL3=%.3fV, CRC=0x%X\n",
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fc f922 	bl	8004428 <__aeabi_f2d>
 80081e4:	4680      	mov	r8, r0
 80081e6:	4689      	mov	r9, r1
				Bms_Frames.Id_0x107.CELL1, Bms_Frames.Id_0x107.CELL2, Bms_Frames.Id_0x107.CELL3, Bms_Frames.Id_0x107.CRC_Check);
 80081e8:	4b81      	ldr	r3, [pc, #516]	@ (80083f0 <print_bms_data+0x508>)
 80081ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
		uart_printf("0x107 -> CELL1=%.3fV, CELL2=%.3fV, CELL3=%.3fV, CRC=0x%X\n",
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fc f91b 	bl	8004428 <__aeabi_f2d>
 80081f2:	4604      	mov	r4, r0
 80081f4:	460d      	mov	r5, r1
				Bms_Frames.Id_0x107.CELL1, Bms_Frames.Id_0x107.CELL2, Bms_Frames.Id_0x107.CELL3, Bms_Frames.Id_0x107.CRC_Check);
 80081f6:	4b7e      	ldr	r3, [pc, #504]	@ (80083f0 <print_bms_data+0x508>)
 80081f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
		uart_printf("0x107 -> CELL1=%.3fV, CELL2=%.3fV, CELL3=%.3fV, CRC=0x%X\n",
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7fc f914 	bl	8004428 <__aeabi_f2d>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
				Bms_Frames.Id_0x107.CELL1, Bms_Frames.Id_0x107.CELL2, Bms_Frames.Id_0x107.CELL3, Bms_Frames.Id_0x107.CRC_Check);
 8008204:	497a      	ldr	r1, [pc, #488]	@ (80083f0 <print_bms_data+0x508>)
 8008206:	f8b1 1080 	ldrh.w	r1, [r1, #128]	@ 0x80
		uart_printf("0x107 -> CELL1=%.3fV, CELL2=%.3fV, CELL3=%.3fV, CRC=0x%X\n",
 800820a:	9104      	str	r1, [sp, #16]
 800820c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008210:	e9cd 4500 	strd	r4, r5, [sp]
 8008214:	4642      	mov	r2, r8
 8008216:	464b      	mov	r3, r9
 8008218:	4876      	ldr	r0, [pc, #472]	@ (80083f4 <print_bms_data+0x50c>)
 800821a:	f000 fe65 	bl	8008ee8 <uart_printf>
	}
	if(Bms_Frames.Id_0x108.rx_or_not){
 800821e:	4b74      	ldr	r3, [pc, #464]	@ (80083f0 <print_bms_data+0x508>)
 8008220:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8008224:	2b00      	cmp	r3, #0
 8008226:	d028      	beq.n	800827a <print_bms_data+0x392>
		Bms_Frames.Id_0x108.rx_or_not=0;
 8008228:	4b71      	ldr	r3, [pc, #452]	@ (80083f0 <print_bms_data+0x508>)
 800822a:	2200      	movs	r2, #0
 800822c:	f883 2092 	strb.w	r2, [r3, #146]	@ 0x92
		 uart_printf("0x108 -> CELL4=%.3fV, CELL5=%.3fV, CELL6=%.3fV, CRC=0x%X\n",
				 Bms_Frames.Id_0x108.CELL4, Bms_Frames.Id_0x108.CELL5, Bms_Frames.Id_0x108.CELL6, Bms_Frames.Id_0x108.CRC_Check);
 8008230:	4b6f      	ldr	r3, [pc, #444]	@ (80083f0 <print_bms_data+0x508>)
 8008232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
		 uart_printf("0x108 -> CELL4=%.3fV, CELL5=%.3fV, CELL6=%.3fV, CRC=0x%X\n",
 8008236:	4618      	mov	r0, r3
 8008238:	f7fc f8f6 	bl	8004428 <__aeabi_f2d>
 800823c:	4680      	mov	r8, r0
 800823e:	4689      	mov	r9, r1
				 Bms_Frames.Id_0x108.CELL4, Bms_Frames.Id_0x108.CELL5, Bms_Frames.Id_0x108.CELL6, Bms_Frames.Id_0x108.CRC_Check);
 8008240:	4b6b      	ldr	r3, [pc, #428]	@ (80083f0 <print_bms_data+0x508>)
 8008242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
		 uart_printf("0x108 -> CELL4=%.3fV, CELL5=%.3fV, CELL6=%.3fV, CRC=0x%X\n",
 8008246:	4618      	mov	r0, r3
 8008248:	f7fc f8ee 	bl	8004428 <__aeabi_f2d>
 800824c:	4604      	mov	r4, r0
 800824e:	460d      	mov	r5, r1
				 Bms_Frames.Id_0x108.CELL4, Bms_Frames.Id_0x108.CELL5, Bms_Frames.Id_0x108.CELL6, Bms_Frames.Id_0x108.CRC_Check);
 8008250:	4b67      	ldr	r3, [pc, #412]	@ (80083f0 <print_bms_data+0x508>)
 8008252:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
		 uart_printf("0x108 -> CELL4=%.3fV, CELL5=%.3fV, CELL6=%.3fV, CRC=0x%X\n",
 8008256:	4618      	mov	r0, r3
 8008258:	f7fc f8e6 	bl	8004428 <__aeabi_f2d>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
				 Bms_Frames.Id_0x108.CELL4, Bms_Frames.Id_0x108.CELL5, Bms_Frames.Id_0x108.CELL6, Bms_Frames.Id_0x108.CRC_Check);
 8008260:	4963      	ldr	r1, [pc, #396]	@ (80083f0 <print_bms_data+0x508>)
 8008262:	f8b1 1090 	ldrh.w	r1, [r1, #144]	@ 0x90
		 uart_printf("0x108 -> CELL4=%.3fV, CELL5=%.3fV, CELL6=%.3fV, CRC=0x%X\n",
 8008266:	9104      	str	r1, [sp, #16]
 8008268:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800826c:	e9cd 4500 	strd	r4, r5, [sp]
 8008270:	4642      	mov	r2, r8
 8008272:	464b      	mov	r3, r9
 8008274:	4860      	ldr	r0, [pc, #384]	@ (80083f8 <print_bms_data+0x510>)
 8008276:	f000 fe37 	bl	8008ee8 <uart_printf>
	}
	if(Bms_Frames.Id_0x109.rx_or_not){
 800827a:	4b5d      	ldr	r3, [pc, #372]	@ (80083f0 <print_bms_data+0x508>)
 800827c:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d02b      	beq.n	80082e2 <print_bms_data+0x3fa>
		Bms_Frames.Id_0x109.rx_or_not=0;
 800828a:	4a59      	ldr	r2, [pc, #356]	@ (80083f0 <print_bms_data+0x508>)
 800828c:	f892 30a2 	ldrb.w	r3, [r2, #162]	@ 0xa2
 8008290:	f023 0301 	bic.w	r3, r3, #1
 8008294:	f882 30a2 	strb.w	r3, [r2, #162]	@ 0xa2
		uart_printf("0x109 -> CELL7=%.3fV, CELL8=%.3fV, CELL9=%.3fV, CRC=0x%X\n",
				Bms_Frames.Id_0x109.CELL7, Bms_Frames.Id_0x109.CELL8, Bms_Frames.Id_0x109.CELL9, Bms_Frames.Id_0x109.CRC_Check);
 8008298:	4b55      	ldr	r3, [pc, #340]	@ (80083f0 <print_bms_data+0x508>)
 800829a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
		uart_printf("0x109 -> CELL7=%.3fV, CELL8=%.3fV, CELL9=%.3fV, CRC=0x%X\n",
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fc f8c2 	bl	8004428 <__aeabi_f2d>
 80082a4:	4680      	mov	r8, r0
 80082a6:	4689      	mov	r9, r1
				Bms_Frames.Id_0x109.CELL7, Bms_Frames.Id_0x109.CELL8, Bms_Frames.Id_0x109.CELL9, Bms_Frames.Id_0x109.CRC_Check);
 80082a8:	4b51      	ldr	r3, [pc, #324]	@ (80083f0 <print_bms_data+0x508>)
 80082aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
		uart_printf("0x109 -> CELL7=%.3fV, CELL8=%.3fV, CELL9=%.3fV, CRC=0x%X\n",
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fc f8ba 	bl	8004428 <__aeabi_f2d>
 80082b4:	4604      	mov	r4, r0
 80082b6:	460d      	mov	r5, r1
				Bms_Frames.Id_0x109.CELL7, Bms_Frames.Id_0x109.CELL8, Bms_Frames.Id_0x109.CELL9, Bms_Frames.Id_0x109.CRC_Check);
 80082b8:	4b4d      	ldr	r3, [pc, #308]	@ (80083f0 <print_bms_data+0x508>)
 80082ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
		uart_printf("0x109 -> CELL7=%.3fV, CELL8=%.3fV, CELL9=%.3fV, CRC=0x%X\n",
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fc f8b2 	bl	8004428 <__aeabi_f2d>
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
				Bms_Frames.Id_0x109.CELL7, Bms_Frames.Id_0x109.CELL8, Bms_Frames.Id_0x109.CELL9, Bms_Frames.Id_0x109.CRC_Check);
 80082c8:	4949      	ldr	r1, [pc, #292]	@ (80083f0 <print_bms_data+0x508>)
 80082ca:	f8b1 10a0 	ldrh.w	r1, [r1, #160]	@ 0xa0
		uart_printf("0x109 -> CELL7=%.3fV, CELL8=%.3fV, CELL9=%.3fV, CRC=0x%X\n",
 80082ce:	9104      	str	r1, [sp, #16]
 80082d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082d4:	e9cd 4500 	strd	r4, r5, [sp]
 80082d8:	4642      	mov	r2, r8
 80082da:	464b      	mov	r3, r9
 80082dc:	4847      	ldr	r0, [pc, #284]	@ (80083fc <print_bms_data+0x514>)
 80082de:	f000 fe03 	bl	8008ee8 <uart_printf>
	}
	if(Bms_Frames.Id_0x10A.rx_or_not){
 80082e2:	4b43      	ldr	r3, [pc, #268]	@ (80083f0 <print_bms_data+0x508>)
 80082e4:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d02b      	beq.n	800834a <print_bms_data+0x462>
		Bms_Frames.Id_0x10A.rx_or_not=0;
 80082f2:	4a3f      	ldr	r2, [pc, #252]	@ (80083f0 <print_bms_data+0x508>)
 80082f4:	f892 30b2 	ldrb.w	r3, [r2, #178]	@ 0xb2
 80082f8:	f023 0301 	bic.w	r3, r3, #1
 80082fc:	f882 30b2 	strb.w	r3, [r2, #178]	@ 0xb2
		uart_printf("0x10A -> CELL10=%.3fV, CELL11=%.3fV, CELL12=%.3fV, CRC=0x%X\n",
				Bms_Frames.Id_0x10A.CELL10, Bms_Frames.Id_0x10A.CELL11, Bms_Frames.Id_0x10A.CELL12, Bms_Frames.Id_0x10A.CRC_Check);
 8008300:	4b3b      	ldr	r3, [pc, #236]	@ (80083f0 <print_bms_data+0x508>)
 8008302:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
		uart_printf("0x10A -> CELL10=%.3fV, CELL11=%.3fV, CELL12=%.3fV, CRC=0x%X\n",
 8008306:	4618      	mov	r0, r3
 8008308:	f7fc f88e 	bl	8004428 <__aeabi_f2d>
 800830c:	4680      	mov	r8, r0
 800830e:	4689      	mov	r9, r1
				Bms_Frames.Id_0x10A.CELL10, Bms_Frames.Id_0x10A.CELL11, Bms_Frames.Id_0x10A.CELL12, Bms_Frames.Id_0x10A.CRC_Check);
 8008310:	4b37      	ldr	r3, [pc, #220]	@ (80083f0 <print_bms_data+0x508>)
 8008312:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
		uart_printf("0x10A -> CELL10=%.3fV, CELL11=%.3fV, CELL12=%.3fV, CRC=0x%X\n",
 8008316:	4618      	mov	r0, r3
 8008318:	f7fc f886 	bl	8004428 <__aeabi_f2d>
 800831c:	4604      	mov	r4, r0
 800831e:	460d      	mov	r5, r1
				Bms_Frames.Id_0x10A.CELL10, Bms_Frames.Id_0x10A.CELL11, Bms_Frames.Id_0x10A.CELL12, Bms_Frames.Id_0x10A.CRC_Check);
 8008320:	4b33      	ldr	r3, [pc, #204]	@ (80083f0 <print_bms_data+0x508>)
 8008322:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
		uart_printf("0x10A -> CELL10=%.3fV, CELL11=%.3fV, CELL12=%.3fV, CRC=0x%X\n",
 8008326:	4618      	mov	r0, r3
 8008328:	f7fc f87e 	bl	8004428 <__aeabi_f2d>
 800832c:	4602      	mov	r2, r0
 800832e:	460b      	mov	r3, r1
				Bms_Frames.Id_0x10A.CELL10, Bms_Frames.Id_0x10A.CELL11, Bms_Frames.Id_0x10A.CELL12, Bms_Frames.Id_0x10A.CRC_Check);
 8008330:	492f      	ldr	r1, [pc, #188]	@ (80083f0 <print_bms_data+0x508>)
 8008332:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	@ 0xb0
		uart_printf("0x10A -> CELL10=%.3fV, CELL11=%.3fV, CELL12=%.3fV, CRC=0x%X\n",
 8008336:	9104      	str	r1, [sp, #16]
 8008338:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800833c:	e9cd 4500 	strd	r4, r5, [sp]
 8008340:	4642      	mov	r2, r8
 8008342:	464b      	mov	r3, r9
 8008344:	482e      	ldr	r0, [pc, #184]	@ (8008400 <print_bms_data+0x518>)
 8008346:	f000 fdcf 	bl	8008ee8 <uart_printf>
	}
	if(Bms_Frames.Id_0x10B.rx_or_not){
 800834a:	4b29      	ldr	r3, [pc, #164]	@ (80083f0 <print_bms_data+0x508>)
 800834c:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d02b      	beq.n	80083b2 <print_bms_data+0x4ca>
		Bms_Frames.Id_0x10B.rx_or_not=0;
 800835a:	4a25      	ldr	r2, [pc, #148]	@ (80083f0 <print_bms_data+0x508>)
 800835c:	f892 30c2 	ldrb.w	r3, [r2, #194]	@ 0xc2
 8008360:	f023 0301 	bic.w	r3, r3, #1
 8008364:	f882 30c2 	strb.w	r3, [r2, #194]	@ 0xc2
		uart_printf("0x10B -> CELL13=%.3fV, CELL14=%.3fV, CELL15=%.3fV, CRC=0x%X\n",
				Bms_Frames.Id_0x10B.CELL13, Bms_Frames.Id_0x10B.CELL14, Bms_Frames.Id_0x10B.CELL15, Bms_Frames.Id_0x10B.CRC_Check);
 8008368:	4b21      	ldr	r3, [pc, #132]	@ (80083f0 <print_bms_data+0x508>)
 800836a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
		uart_printf("0x10B -> CELL13=%.3fV, CELL14=%.3fV, CELL15=%.3fV, CRC=0x%X\n",
 800836e:	4618      	mov	r0, r3
 8008370:	f7fc f85a 	bl	8004428 <__aeabi_f2d>
 8008374:	4680      	mov	r8, r0
 8008376:	4689      	mov	r9, r1
				Bms_Frames.Id_0x10B.CELL13, Bms_Frames.Id_0x10B.CELL14, Bms_Frames.Id_0x10B.CELL15, Bms_Frames.Id_0x10B.CRC_Check);
 8008378:	4b1d      	ldr	r3, [pc, #116]	@ (80083f0 <print_bms_data+0x508>)
 800837a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
		uart_printf("0x10B -> CELL13=%.3fV, CELL14=%.3fV, CELL15=%.3fV, CRC=0x%X\n",
 800837e:	4618      	mov	r0, r3
 8008380:	f7fc f852 	bl	8004428 <__aeabi_f2d>
 8008384:	4604      	mov	r4, r0
 8008386:	460d      	mov	r5, r1
				Bms_Frames.Id_0x10B.CELL13, Bms_Frames.Id_0x10B.CELL14, Bms_Frames.Id_0x10B.CELL15, Bms_Frames.Id_0x10B.CRC_Check);
 8008388:	4b19      	ldr	r3, [pc, #100]	@ (80083f0 <print_bms_data+0x508>)
 800838a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
		uart_printf("0x10B -> CELL13=%.3fV, CELL14=%.3fV, CELL15=%.3fV, CRC=0x%X\n",
 800838e:	4618      	mov	r0, r3
 8008390:	f7fc f84a 	bl	8004428 <__aeabi_f2d>
 8008394:	4602      	mov	r2, r0
 8008396:	460b      	mov	r3, r1
				Bms_Frames.Id_0x10B.CELL13, Bms_Frames.Id_0x10B.CELL14, Bms_Frames.Id_0x10B.CELL15, Bms_Frames.Id_0x10B.CRC_Check);
 8008398:	4915      	ldr	r1, [pc, #84]	@ (80083f0 <print_bms_data+0x508>)
 800839a:	f8b1 10c0 	ldrh.w	r1, [r1, #192]	@ 0xc0
		uart_printf("0x10B -> CELL13=%.3fV, CELL14=%.3fV, CELL15=%.3fV, CRC=0x%X\n",
 800839e:	9104      	str	r1, [sp, #16]
 80083a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80083a4:	e9cd 4500 	strd	r4, r5, [sp]
 80083a8:	4642      	mov	r2, r8
 80083aa:	464b      	mov	r3, r9
 80083ac:	4815      	ldr	r0, [pc, #84]	@ (8008404 <print_bms_data+0x51c>)
 80083ae:	f000 fd9b 	bl	8008ee8 <uart_printf>
	}
	if(Bms_Frames.Id_0x10C.rx_or_not){
 80083b2:	4b0f      	ldr	r3, [pc, #60]	@ (80083f0 <print_bms_data+0x508>)
 80083b4:	f893 30d2 	ldrb.w	r3, [r3, #210]	@ 0xd2
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d011      	beq.n	80083e6 <print_bms_data+0x4fe>
		Bms_Frames.Id_0x10C.rx_or_not=0;
 80083c2:	4a0b      	ldr	r2, [pc, #44]	@ (80083f0 <print_bms_data+0x508>)
 80083c4:	f892 30d2 	ldrb.w	r3, [r2, #210]	@ 0xd2
 80083c8:	f023 0301 	bic.w	r3, r3, #1
 80083cc:	f882 30d2 	strb.w	r3, [r2, #210]	@ 0xd2
		uart_printf("0x10C -> CELL16=%.3fV,\n",
		Bms_Frames.Id_0x10C.CELL16);
 80083d0:	4b07      	ldr	r3, [pc, #28]	@ (80083f0 <print_bms_data+0x508>)
 80083d2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
		uart_printf("0x10C -> CELL16=%.3fV,\n",
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fc f826 	bl	8004428 <__aeabi_f2d>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4809      	ldr	r0, [pc, #36]	@ (8008408 <print_bms_data+0x520>)
 80083e2:	f000 fd81 	bl	8008ee8 <uart_printf>
	}
}
 80083e6:	bf00      	nop
 80083e8:	3724      	adds	r7, #36	@ 0x24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083f0:	20000228 	.word	0x20000228
 80083f4:	0800e900 	.word	0x0800e900
 80083f8:	0800e93c 	.word	0x0800e93c
 80083fc:	0800e978 	.word	0x0800e978
 8008400:	0800e9b4 	.word	0x0800e9b4
 8008404:	0800e9f4 	.word	0x0800e9f4
 8008408:	0800ea34 	.word	0x0800ea34

0800840c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008412:	4b15      	ldr	r3, [pc, #84]	@ (8008468 <HAL_MspInit+0x5c>)
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	4a14      	ldr	r2, [pc, #80]	@ (8008468 <HAL_MspInit+0x5c>)
 8008418:	f043 0301 	orr.w	r3, r3, #1
 800841c:	6193      	str	r3, [r2, #24]
 800841e:	4b12      	ldr	r3, [pc, #72]	@ (8008468 <HAL_MspInit+0x5c>)
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	f003 0301 	and.w	r3, r3, #1
 8008426:	60bb      	str	r3, [r7, #8]
 8008428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800842a:	4b0f      	ldr	r3, [pc, #60]	@ (8008468 <HAL_MspInit+0x5c>)
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	4a0e      	ldr	r2, [pc, #56]	@ (8008468 <HAL_MspInit+0x5c>)
 8008430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008434:	61d3      	str	r3, [r2, #28]
 8008436:	4b0c      	ldr	r3, [pc, #48]	@ (8008468 <HAL_MspInit+0x5c>)
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800843e:	607b      	str	r3, [r7, #4]
 8008440:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8008442:	4b0a      	ldr	r3, [pc, #40]	@ (800846c <HAL_MspInit+0x60>)
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008456:	60fb      	str	r3, [r7, #12]
 8008458:	4a04      	ldr	r2, [pc, #16]	@ (800846c <HAL_MspInit+0x60>)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800845e:	bf00      	nop
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	bc80      	pop	{r7}
 8008466:	4770      	bx	lr
 8008468:	40021000 	.word	0x40021000
 800846c:	40010000 	.word	0x40010000

08008470 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b088      	sub	sp, #32
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008478:	f107 0310 	add.w	r3, r7, #16
 800847c:	2200      	movs	r2, #0
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	605a      	str	r2, [r3, #4]
 8008482:	609a      	str	r2, [r3, #8]
 8008484:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a1d      	ldr	r2, [pc, #116]	@ (8008500 <HAL_I2C_MspInit+0x90>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d133      	bne.n	80084f8 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008490:	4b1c      	ldr	r3, [pc, #112]	@ (8008504 <HAL_I2C_MspInit+0x94>)
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	4a1b      	ldr	r2, [pc, #108]	@ (8008504 <HAL_I2C_MspInit+0x94>)
 8008496:	f043 0308 	orr.w	r3, r3, #8
 800849a:	6193      	str	r3, [r2, #24]
 800849c:	4b19      	ldr	r3, [pc, #100]	@ (8008504 <HAL_I2C_MspInit+0x94>)
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	f003 0308 	and.w	r3, r3, #8
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80084a8:	23c0      	movs	r3, #192	@ 0xc0
 80084aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80084ac:	2312      	movs	r3, #18
 80084ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80084b0:	2303      	movs	r3, #3
 80084b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80084b4:	f107 0310 	add.w	r3, r7, #16
 80084b8:	4619      	mov	r1, r3
 80084ba:	4813      	ldr	r0, [pc, #76]	@ (8008508 <HAL_I2C_MspInit+0x98>)
 80084bc:	f000 ff5e 	bl	800937c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80084c0:	4b10      	ldr	r3, [pc, #64]	@ (8008504 <HAL_I2C_MspInit+0x94>)
 80084c2:	69db      	ldr	r3, [r3, #28]
 80084c4:	4a0f      	ldr	r2, [pc, #60]	@ (8008504 <HAL_I2C_MspInit+0x94>)
 80084c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80084ca:	61d3      	str	r3, [r2, #28]
 80084cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008504 <HAL_I2C_MspInit+0x94>)
 80084ce:	69db      	ldr	r3, [r3, #28]
 80084d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80084d4:	60bb      	str	r3, [r7, #8]
 80084d6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80084d8:	2200      	movs	r2, #0
 80084da:	2100      	movs	r1, #0
 80084dc:	201f      	movs	r0, #31
 80084de:	f000 fe90 	bl	8009202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80084e2:	201f      	movs	r0, #31
 80084e4:	f000 fea9 	bl	800923a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80084e8:	2200      	movs	r2, #0
 80084ea:	2100      	movs	r1, #0
 80084ec:	2020      	movs	r0, #32
 80084ee:	f000 fe88 	bl	8009202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80084f2:	2020      	movs	r0, #32
 80084f4:	f000 fea1 	bl	800923a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80084f8:	bf00      	nop
 80084fa:	3720      	adds	r7, #32
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	40005400 	.word	0x40005400
 8008504:	40021000 	.word	0x40021000
 8008508:	40010c00 	.word	0x40010c00

0800850c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800850c:	b480      	push	{r7}
 800850e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008510:	bf00      	nop
 8008512:	e7fd      	b.n	8008510 <NMI_Handler+0x4>

08008514 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008514:	b480      	push	{r7}
 8008516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008518:	bf00      	nop
 800851a:	e7fd      	b.n	8008518 <HardFault_Handler+0x4>

0800851c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800851c:	b480      	push	{r7}
 800851e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008520:	bf00      	nop
 8008522:	e7fd      	b.n	8008520 <MemManage_Handler+0x4>

08008524 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008524:	b480      	push	{r7}
 8008526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008528:	bf00      	nop
 800852a:	e7fd      	b.n	8008528 <BusFault_Handler+0x4>

0800852c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008530:	bf00      	nop
 8008532:	e7fd      	b.n	8008530 <UsageFault_Handler+0x4>

08008534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008534:	b480      	push	{r7}
 8008536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008538:	bf00      	nop
 800853a:	46bd      	mov	sp, r7
 800853c:	bc80      	pop	{r7}
 800853e:	4770      	bx	lr

08008540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008540:	b480      	push	{r7}
 8008542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008544:	bf00      	nop
 8008546:	46bd      	mov	sp, r7
 8008548:	bc80      	pop	{r7}
 800854a:	4770      	bx	lr

0800854c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008550:	bf00      	nop
 8008552:	46bd      	mov	sp, r7
 8008554:	bc80      	pop	{r7}
 8008556:	4770      	bx	lr

08008558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800855c:	f000 fd68 	bl	8009030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  milli_sec_tick++;
 8008560:	4b12      	ldr	r3, [pc, #72]	@ (80085ac <SysTick_Handler+0x54>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3301      	adds	r3, #1
 8008566:	4a11      	ldr	r2, [pc, #68]	@ (80085ac <SysTick_Handler+0x54>)
 8008568:	6013      	str	r3, [r2, #0]

  if (mcu_timer < NODE_TIMEOUT)
 800856a:	4b11      	ldr	r3, [pc, #68]	@ (80085b0 <SysTick_Handler+0x58>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8008572:	4293      	cmp	r3, r2
 8008574:	d805      	bhi.n	8008582 <SysTick_Handler+0x2a>
  {
	  mcu_timer++;
 8008576:	4b0e      	ldr	r3, [pc, #56]	@ (80085b0 <SysTick_Handler+0x58>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3301      	adds	r3, #1
 800857c:	4a0c      	ldr	r2, [pc, #48]	@ (80085b0 <SysTick_Handler+0x58>)
 800857e:	6013      	str	r3, [r2, #0]
 8008580:	e002      	b.n	8008588 <SysTick_Handler+0x30>
  }
  else
  {
	  mcu_connected = 0;
 8008582:	4b0c      	ldr	r3, [pc, #48]	@ (80085b4 <SysTick_Handler+0x5c>)
 8008584:	2200      	movs	r2, #0
 8008586:	601a      	str	r2, [r3, #0]
  }

  if (bms_timer < NODE_TIMEOUT){
 8008588:	4b0b      	ldr	r3, [pc, #44]	@ (80085b8 <SysTick_Handler+0x60>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f240 52db 	movw	r2, #1499	@ 0x5db
 8008590:	4293      	cmp	r3, r2
 8008592:	d805      	bhi.n	80085a0 <SysTick_Handler+0x48>
	  bms_timer++;
 8008594:	4b08      	ldr	r3, [pc, #32]	@ (80085b8 <SysTick_Handler+0x60>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3301      	adds	r3, #1
 800859a:	4a07      	ldr	r2, [pc, #28]	@ (80085b8 <SysTick_Handler+0x60>)
 800859c:	6013      	str	r3, [r2, #0]
  }
  else {
	  bms_connected = 0;
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 800859e:	e002      	b.n	80085a6 <SysTick_Handler+0x4e>
	  bms_connected = 0;
 80085a0:	4b06      	ldr	r3, [pc, #24]	@ (80085bc <SysTick_Handler+0x64>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]
}
 80085a6:	bf00      	nop
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	20000598 	.word	0x20000598
 80085b0:	200005a4 	.word	0x200005a4
 80085b4:	2000059c 	.word	0x2000059c
 80085b8:	200005a8 	.word	0x200005a8
 80085bc:	200005a0 	.word	0x200005a0

080085c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80085c4:	4802      	ldr	r0, [pc, #8]	@ (80085d0 <I2C1_EV_IRQHandler+0x10>)
 80085c6:	f001 fa23 	bl	8009a10 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80085ca:	bf00      	nop
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	20000540 	.word	0x20000540

080085d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80085d8:	4802      	ldr	r0, [pc, #8]	@ (80085e4 <I2C1_ER_IRQHandler+0x10>)
 80085da:	f001 fb8a 	bl	8009cf2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80085de:	bf00      	nop
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000540 	.word	0x20000540

080085e8 <systick_init>:
 *      Author: MadaYaswanth
 */

#include"extern_file_declarations.h"

void systick_init(uint32_t ticks_per_sec){
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
    // Reload value = (SystemCoreClock / ticks_per_sec) - 1
    SysTick->LOAD = (get_SYSCLK_freq() / ticks_per_sec) - 1;
 80085f0:	f000 f92c 	bl	800884c <get_SYSCLK_freq>
 80085f4:	4602      	mov	r2, r0
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085fc:	4a06      	ldr	r2, [pc, #24]	@ (8008618 <systick_init+0x30>)
 80085fe:	3b01      	subs	r3, #1
 8008600:	6053      	str	r3, [r2, #4]

    SysTick->VAL = 0;             // Clear current value
 8008602:	4b05      	ldr	r3, [pc, #20]	@ (8008618 <systick_init+0x30>)
 8008604:	2200      	movs	r2, #0
 8008606:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = (1 << 2) |    // CLKSOURCE = processor clock (AHB)
 8008608:	4b03      	ldr	r3, [pc, #12]	@ (8008618 <systick_init+0x30>)
 800860a:	2207      	movs	r2, #7
 800860c:	601a      	str	r2, [r3, #0]
                    (1 << 1) |    // TICKINT = enable SysTick interrupt
                    (1 << 0);     // ENABLE counter
}
 800860e:	bf00      	nop
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	e000e010 	.word	0xe000e010

0800861c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800861c:	b480      	push	{r7}
 800861e:	af00      	add	r7, sp, #0
  return 1;
 8008620:	2301      	movs	r3, #1
}
 8008622:	4618      	mov	r0, r3
 8008624:	46bd      	mov	sp, r7
 8008626:	bc80      	pop	{r7}
 8008628:	4770      	bx	lr

0800862a <_kill>:

int _kill(int pid, int sig)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008634:	f003 fce0 	bl	800bff8 <__errno>
 8008638:	4603      	mov	r3, r0
 800863a:	2216      	movs	r2, #22
 800863c:	601a      	str	r2, [r3, #0]
  return -1;
 800863e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <_exit>:

void _exit (int status)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b082      	sub	sp, #8
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008652:	f04f 31ff 	mov.w	r1, #4294967295
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7ff ffe7 	bl	800862a <_kill>
  while (1) {}    /* Make sure we hang here */
 800865c:	bf00      	nop
 800865e:	e7fd      	b.n	800865c <_exit+0x12>

08008660 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800866c:	2300      	movs	r3, #0
 800866e:	617b      	str	r3, [r7, #20]
 8008670:	e00a      	b.n	8008688 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008672:	f3af 8000 	nop.w
 8008676:	4601      	mov	r1, r0
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	60ba      	str	r2, [r7, #8]
 800867e:	b2ca      	uxtb	r2, r1
 8008680:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	3301      	adds	r3, #1
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	429a      	cmp	r2, r3
 800868e:	dbf0      	blt.n	8008672 <_read+0x12>
  }

  return len;
 8008690:	687b      	ldr	r3, [r7, #4]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b086      	sub	sp, #24
 800869e:	af00      	add	r7, sp, #0
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80086a6:	2300      	movs	r3, #0
 80086a8:	617b      	str	r3, [r7, #20]
 80086aa:	e009      	b.n	80086c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	1c5a      	adds	r2, r3, #1
 80086b0:	60ba      	str	r2, [r7, #8]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	3301      	adds	r3, #1
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	dbf1      	blt.n	80086ac <_write+0x12>
  }
  return len;
 80086c8:	687b      	ldr	r3, [r7, #4]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <_close>:

int _close(int file)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80086da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80086de:	4618      	mov	r0, r3
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bc80      	pop	{r7}
 80086e6:	4770      	bx	lr

080086e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80086f8:	605a      	str	r2, [r3, #4]
  return 0;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	bc80      	pop	{r7}
 8008704:	4770      	bx	lr

08008706 <_isatty>:

int _isatty(int file)
{
 8008706:	b480      	push	{r7}
 8008708:	b083      	sub	sp, #12
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800870e:	2301      	movs	r3, #1
}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	bc80      	pop	{r7}
 8008718:	4770      	bx	lr

0800871a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800871a:	b480      	push	{r7}
 800871c:	b085      	sub	sp, #20
 800871e:	af00      	add	r7, sp, #0
 8008720:	60f8      	str	r0, [r7, #12]
 8008722:	60b9      	str	r1, [r7, #8]
 8008724:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	bc80      	pop	{r7}
 8008730:	4770      	bx	lr
	...

08008734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800873c:	4a14      	ldr	r2, [pc, #80]	@ (8008790 <_sbrk+0x5c>)
 800873e:	4b15      	ldr	r3, [pc, #84]	@ (8008794 <_sbrk+0x60>)
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008748:	4b13      	ldr	r3, [pc, #76]	@ (8008798 <_sbrk+0x64>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d102      	bne.n	8008756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008750:	4b11      	ldr	r3, [pc, #68]	@ (8008798 <_sbrk+0x64>)
 8008752:	4a12      	ldr	r2, [pc, #72]	@ (800879c <_sbrk+0x68>)
 8008754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008756:	4b10      	ldr	r3, [pc, #64]	@ (8008798 <_sbrk+0x64>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4413      	add	r3, r2
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	429a      	cmp	r2, r3
 8008762:	d207      	bcs.n	8008774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008764:	f003 fc48 	bl	800bff8 <__errno>
 8008768:	4603      	mov	r3, r0
 800876a:	220c      	movs	r2, #12
 800876c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800876e:	f04f 33ff 	mov.w	r3, #4294967295
 8008772:	e009      	b.n	8008788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008774:	4b08      	ldr	r3, [pc, #32]	@ (8008798 <_sbrk+0x64>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800877a:	4b07      	ldr	r3, [pc, #28]	@ (8008798 <_sbrk+0x64>)
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4413      	add	r3, r2
 8008782:	4a05      	ldr	r2, [pc, #20]	@ (8008798 <_sbrk+0x64>)
 8008784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008786:	68fb      	ldr	r3, [r7, #12]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3718      	adds	r7, #24
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20005000 	.word	0x20005000
 8008794:	00000400 	.word	0x00000400
 8008798:	200005ac 	.word	0x200005ac
 800879c:	200007a8 	.word	0x200007a8

080087a0 <system_clock_init_to_72MHZ>:
 *
 *  Created on: Sep 2, 2025
 *      Author: MadaYaswanth
 */
#include"main.h"
STATUS system_clock_init_to_72MHZ(){
 80087a0:	b480      	push	{r7}
 80087a2:	af00      	add	r7, sp, #0
	    // 1. Enable HSE (external crystal, e.g., 8MHz)
	    RCC->CR |= RCC_CR_HSEON;       // Turn on HSE
 80087a4:	4b27      	ldr	r3, [pc, #156]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a26      	ldr	r2, [pc, #152]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 80087aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087ae:	6013      	str	r3, [r2, #0]
	    while (!(RCC->CR & RCC_CR_HSERDY)); // Wait until HSE is ready
 80087b0:	bf00      	nop
 80087b2:	4b24      	ldr	r3, [pc, #144]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0f9      	beq.n	80087b2 <system_clock_init_to_72MHZ+0x12>
	    FLASH->ACR |= FLASH_ACR_LATENCY_2;  // 2 wait states
 80087be:	4b22      	ldr	r3, [pc, #136]	@ (8008848 <system_clock_init_to_72MHZ+0xa8>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a21      	ldr	r2, [pc, #132]	@ (8008848 <system_clock_init_to_72MHZ+0xa8>)
 80087c4:	f043 0304 	orr.w	r3, r3, #4
 80087c8:	6013      	str	r3, [r2, #0]
	    FLASH->ACR |= FLASH_ACR_PRFTBE;     // Enable prefetch
 80087ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008848 <system_clock_init_to_72MHZ+0xa8>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008848 <system_clock_init_to_72MHZ+0xa8>)
 80087d0:	f043 0310 	orr.w	r3, r3, #16
 80087d4:	6013      	str	r3, [r2, #0]
	    // 2. Configure PLL to multiply HSE to 72 MHz
	    //    PLLMUL = 9 (8MHz * 9 = 72MHz)
	    RCC->CFGR |= RCC_CFGR_PLLMULL9; // PLL multiplier = 9
 80087d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	4a1a      	ldr	r2, [pc, #104]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 80087dc:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 80087e0:	6053      	str	r3, [r2, #4]
	    // 3. Select HSE as PLL source
	    RCC->CFGR |= RCC_CFGR_PLLSRC;   // PLL source = HSE
 80087e2:	4b18      	ldr	r3, [pc, #96]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	4a17      	ldr	r2, [pc, #92]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 80087e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087ec:	6053      	str	r3, [r2, #4]
	    // 4. Set APB1 Prescaler to 2 (PCLK1 = 72MHz / 2 = 36MHz)
	    RCC->CFGR |= RCC_CFGR_PPRE1_2;  // APB1 prescaler = 2 (36MHz)
 80087ee:	4b15      	ldr	r3, [pc, #84]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	4a14      	ldr	r2, [pc, #80]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 80087f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80087f8:	6053      	str	r3, [r2, #4]
	    // 5. Set APB2 Prescaler to 1 (PCLK2 = 72MHz, no division)
	    RCC->CFGR &= ~RCC_CFGR_PPRE2;   // APB2 prescaler = 1 (72MHz)
 80087fa:	4b12      	ldr	r3, [pc, #72]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	4a11      	ldr	r2, [pc, #68]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 8008800:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8008804:	6053      	str	r3, [r2, #4]
	    // 6. Enable PLL and wait until ready
	    RCC->CR |= RCC_CR_PLLON;
 8008806:	4b0f      	ldr	r3, [pc, #60]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a0e      	ldr	r2, [pc, #56]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 800880c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008810:	6013      	str	r3, [r2, #0]
	    while (!(RCC->CR & RCC_CR_PLLRDY));
 8008812:	bf00      	nop
 8008814:	4b0b      	ldr	r3, [pc, #44]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d0f9      	beq.n	8008814 <system_clock_init_to_72MHZ+0x74>
	     // 7. Switch SYSCLK to PLL
	    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8008820:	4b08      	ldr	r3, [pc, #32]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	4a07      	ldr	r2, [pc, #28]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 8008826:	f043 0302 	orr.w	r3, r3, #2
 800882a:	6053      	str	r3, [r2, #4]
	    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800882c:	bf00      	nop
 800882e:	4b05      	ldr	r3, [pc, #20]	@ (8008844 <system_clock_init_to_72MHZ+0xa4>)
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f003 030c 	and.w	r3, r3, #12
 8008836:	2b08      	cmp	r3, #8
 8008838:	d1f9      	bne.n	800882e <system_clock_init_to_72MHZ+0x8e>
	    return RY_OK;
 800883a:	2301      	movs	r3, #1
}
 800883c:	4618      	mov	r0, r3
 800883e:	46bd      	mov	sp, r7
 8008840:	bc80      	pop	{r7}
 8008842:	4770      	bx	lr
 8008844:	40021000 	.word	0x40021000
 8008848:	40022000 	.word	0x40022000

0800884c <get_SYSCLK_freq>:
uint32_t get_SYSCLK_freq(void) {
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
    uint32_t sysclk_source, pllmul, prediv, pllclk;
    uint32_t HSE_Value = 8000000; // External crystal (adjust if different)
 8008852:	4b26      	ldr	r3, [pc, #152]	@ (80088ec <get_SYSCLK_freq+0xa0>)
 8008854:	60bb      	str	r3, [r7, #8]
    uint32_t HSI_Value = 8000000; // Internal RC
 8008856:	4b25      	ldr	r3, [pc, #148]	@ (80088ec <get_SYSCLK_freq+0xa0>)
 8008858:	607b      	str	r3, [r7, #4]
    sysclk_source = (RCC->CFGR >> 2) & 0x3;  // SWS bits
 800885a:	4b25      	ldr	r3, [pc, #148]	@ (80088f0 <get_SYSCLK_freq+0xa4>)
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	089b      	lsrs	r3, r3, #2
 8008860:	f003 0303 	and.w	r3, r3, #3
 8008864:	603b      	str	r3, [r7, #0]
    switch (sysclk_source) {
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	2b02      	cmp	r3, #2
 800886a:	d00d      	beq.n	8008888 <get_SYSCLK_freq+0x3c>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	2b02      	cmp	r3, #2
 8008870:	d835      	bhi.n	80088de <get_SYSCLK_freq+0x92>
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <get_SYSCLK_freq+0x34>
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d002      	beq.n	8008884 <get_SYSCLK_freq+0x38>
 800887e:	e02e      	b.n	80088de <get_SYSCLK_freq+0x92>
        case 0x00: // HSI
            return HSI_Value;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	e02d      	b.n	80088e0 <get_SYSCLK_freq+0x94>
        case 0x01: // HSE
            return HSE_Value;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	e02b      	b.n	80088e0 <get_SYSCLK_freq+0x94>
        case 0x02: // PLL
            // PLL source
            if (RCC->CFGR & (1 << 16)) {
 8008888:	4b19      	ldr	r3, [pc, #100]	@ (80088f0 <get_SYSCLK_freq+0xa4>)
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d010      	beq.n	80088b6 <get_SYSCLK_freq+0x6a>
                // HSE as PLL source
                if (RCC->CFGR & (1 << 17))
 8008894:	4b16      	ldr	r3, [pc, #88]	@ (80088f0 <get_SYSCLK_freq+0xa4>)
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <get_SYSCLK_freq+0x5a>
                    prediv = 2;   // HSE/2
 80088a0:	2302      	movs	r3, #2
 80088a2:	613b      	str	r3, [r7, #16]
 80088a4:	e001      	b.n	80088aa <get_SYSCLK_freq+0x5e>
                else
                    prediv = 1;   // HSE
 80088a6:	2301      	movs	r3, #1
 80088a8:	613b      	str	r3, [r7, #16]
                pllclk = HSE_Value / prediv;
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	e002      	b.n	80088bc <get_SYSCLK_freq+0x70>
            } else {
                // HSI/2 as PLL source
                pllclk = HSI_Value / 2; // 4 MHz
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	085b      	lsrs	r3, r3, #1
 80088ba:	60fb      	str	r3, [r7, #12]
            }

            // PLL multiplier
            pllmul = ((RCC->CFGR >> 18) & 0xF) + 2;
 80088bc:	4b0c      	ldr	r3, [pc, #48]	@ (80088f0 <get_SYSCLK_freq+0xa4>)
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	0c9b      	lsrs	r3, r3, #18
 80088c2:	f003 030f 	and.w	r3, r3, #15
 80088c6:	3302      	adds	r3, #2
 80088c8:	617b      	str	r3, [r7, #20]
            // Note: value 0b1101 = x13, 0b1110 = x14, 0b1111 = x16
            if (pllmul == 15) pllmul = 16; // adjust for 0b1111 special case
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	2b0f      	cmp	r3, #15
 80088ce:	d101      	bne.n	80088d4 <get_SYSCLK_freq+0x88>
 80088d0:	2310      	movs	r3, #16
 80088d2:	617b      	str	r3, [r7, #20]

            return pllclk * pllmul;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	697a      	ldr	r2, [r7, #20]
 80088d8:	fb02 f303 	mul.w	r3, r2, r3
 80088dc:	e000      	b.n	80088e0 <get_SYSCLK_freq+0x94>
        default:
            return HSI_Value; // fallback
 80088de:	687b      	ldr	r3, [r7, #4]
    }
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	371c      	adds	r7, #28
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bc80      	pop	{r7}
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	007a1200 	.word	0x007a1200
 80088f0:	40021000 	.word	0x40021000

080088f4 <get_AHB_freq>:
uint32_t get_AHB_freq(void) {
 80088f4:	b5b0      	push	{r4, r5, r7, lr}
 80088f6:	b092      	sub	sp, #72	@ 0x48
 80088f8:	af00      	add	r7, sp, #0
    uint32_t presc_table[16] = {1,1,1,1,1,1,1,1,2,4,8,16,64,128,256,512};
 80088fa:	4b11      	ldr	r3, [pc, #68]	@ (8008940 <get_AHB_freq+0x4c>)
 80088fc:	1d3c      	adds	r4, r7, #4
 80088fe:	461d      	mov	r5, r3
 8008900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800890a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800890c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008910:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t hpre = (RCC->CFGR >> 4) & 0xF;
 8008914:	4b0b      	ldr	r3, [pc, #44]	@ (8008944 <get_AHB_freq+0x50>)
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	091b      	lsrs	r3, r3, #4
 800891a:	f003 030f 	and.w	r3, r3, #15
 800891e:	647b      	str	r3, [r7, #68]	@ 0x44
    return get_SYSCLK_freq() / presc_table[hpre];
 8008920:	f7ff ff94 	bl	800884c <get_SYSCLK_freq>
 8008924:	4602      	mov	r2, r0
 8008926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	3348      	adds	r3, #72	@ 0x48
 800892c:	443b      	add	r3, r7
 800892e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008932:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008936:	4618      	mov	r0, r3
 8008938:	3748      	adds	r7, #72	@ 0x48
 800893a:	46bd      	mov	sp, r7
 800893c:	bdb0      	pop	{r4, r5, r7, pc}
 800893e:	bf00      	nop
 8008940:	0800ea4c 	.word	0x0800ea4c
 8008944:	40021000 	.word	0x40021000

08008948 <get_APB1_freq>:

uint32_t get_APB1_freq(void) {
 8008948:	b5b0      	push	{r4, r5, r7, lr}
 800894a:	b08a      	sub	sp, #40	@ 0x28
 800894c:	af00      	add	r7, sp, #0
    uint32_t presc_table[8] = {1,1,1,1,2,4,8,16};
 800894e:	4b0f      	ldr	r3, [pc, #60]	@ (800898c <get_APB1_freq+0x44>)
 8008950:	1d3c      	adds	r4, r7, #4
 8008952:	461d      	mov	r5, r3
 8008954:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008956:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008958:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800895c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t ppre1 = (RCC->CFGR >> 8) & 0x7;
 8008960:	4b0b      	ldr	r3, [pc, #44]	@ (8008990 <get_APB1_freq+0x48>)
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	0a1b      	lsrs	r3, r3, #8
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	627b      	str	r3, [r7, #36]	@ 0x24
    return get_AHB_freq() / presc_table[ppre1];
 800896c:	f7ff ffc2 	bl	80088f4 <get_AHB_freq>
 8008970:	4602      	mov	r2, r0
 8008972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	3328      	adds	r3, #40	@ 0x28
 8008978:	443b      	add	r3, r7
 800897a:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800897e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8008982:	4618      	mov	r0, r3
 8008984:	3728      	adds	r7, #40	@ 0x28
 8008986:	46bd      	mov	sp, r7
 8008988:	bdb0      	pop	{r4, r5, r7, pc}
 800898a:	bf00      	nop
 800898c:	0800ea8c 	.word	0x0800ea8c
 8008990:	40021000 	.word	0x40021000

08008994 <get_APB2_freq>:

uint32_t get_APB2_freq(void) {
 8008994:	b5b0      	push	{r4, r5, r7, lr}
 8008996:	b08a      	sub	sp, #40	@ 0x28
 8008998:	af00      	add	r7, sp, #0
    uint32_t presc_table[8] = {1,1,1,1,2,4,8,16};
 800899a:	4b0f      	ldr	r3, [pc, #60]	@ (80089d8 <get_APB2_freq+0x44>)
 800899c:	1d3c      	adds	r4, r7, #4
 800899e:	461d      	mov	r5, r3
 80089a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80089a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint32_t ppre2 = (RCC->CFGR >> 11) & 0x7;
 80089ac:	4b0b      	ldr	r3, [pc, #44]	@ (80089dc <get_APB2_freq+0x48>)
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	0adb      	lsrs	r3, r3, #11
 80089b2:	f003 0307 	and.w	r3, r3, #7
 80089b6:	627b      	str	r3, [r7, #36]	@ 0x24
    return get_AHB_freq() / presc_table[ppre2];
 80089b8:	f7ff ff9c 	bl	80088f4 <get_AHB_freq>
 80089bc:	4602      	mov	r2, r0
 80089be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	3328      	adds	r3, #40	@ 0x28
 80089c4:	443b      	add	r3, r7
 80089c6:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80089ca:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3728      	adds	r7, #40	@ 0x28
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bdb0      	pop	{r4, r5, r7, pc}
 80089d6:	bf00      	nop
 80089d8:	0800ea8c 	.word	0x0800ea8c
 80089dc:	40021000 	.word	0x40021000

080089e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80089e0:	b480      	push	{r7}
 80089e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80089e4:	bf00      	nop
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bc80      	pop	{r7}
 80089ea:	4770      	bx	lr

080089ec <Init_tasks>:

#include"extern_file_declarations.h"
#define max_tasks 10
task_timer timer[max_tasks];

void Init_tasks(void){
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
	for(int i=0; i<max_tasks; i++){
 80089f2:	2300      	movs	r3, #0
 80089f4:	607b      	str	r3, [r7, #4]
 80089f6:	e024      	b.n	8008a42 <Init_tasks+0x56>
		timer[i].period_ms = 0;
 80089f8:	4a16      	ldr	r2, [pc, #88]	@ (8008a54 <Init_tasks+0x68>)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	011b      	lsls	r3, r3, #4
 80089fe:	4413      	add	r3, r2
 8008a00:	2200      	movs	r2, #0
 8008a02:	601a      	str	r2, [r3, #0]
		timer[i].last_time_ms = 0;
 8008a04:	4a13      	ldr	r2, [pc, #76]	@ (8008a54 <Init_tasks+0x68>)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	011b      	lsls	r3, r3, #4
 8008a0a:	4413      	add	r3, r2
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	2200      	movs	r2, #0
 8008a10:	601a      	str	r2, [r3, #0]
		timer[i].enable = 0;
 8008a12:	4a10      	ldr	r2, [pc, #64]	@ (8008a54 <Init_tasks+0x68>)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	4413      	add	r3, r2
 8008a1a:	330c      	adds	r3, #12
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	701a      	strb	r2, [r3, #0]
		timer[i].task_fn = 0;
 8008a20:	4a0c      	ldr	r2, [pc, #48]	@ (8008a54 <Init_tasks+0x68>)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	011b      	lsls	r3, r3, #4
 8008a26:	4413      	add	r3, r2
 8008a28:	3308      	adds	r3, #8
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	601a      	str	r2, [r3, #0]
		timer[i].one_time_execute = 0;
 8008a2e:	4a09      	ldr	r2, [pc, #36]	@ (8008a54 <Init_tasks+0x68>)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	011b      	lsls	r3, r3, #4
 8008a34:	4413      	add	r3, r2
 8008a36:	330d      	adds	r3, #13
 8008a38:	2200      	movs	r2, #0
 8008a3a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<max_tasks; i++){
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	607b      	str	r3, [r7, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b09      	cmp	r3, #9
 8008a46:	ddd7      	ble.n	80089f8 <Init_tasks+0xc>
	}
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bc80      	pop	{r7}
 8008a52:	4770      	bx	lr
 8008a54:	200005b0 	.word	0x200005b0

08008a58 <Register_task>:

int Register_task(uint32_t period_ms, TaskFunction task_fn){
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
	for(int i=0; i<max_tasks; i++){
 8008a62:	2300      	movs	r3, #0
 8008a64:	60fb      	str	r3, [r7, #12]
 8008a66:	e037      	b.n	8008ad8 <Register_task+0x80>
		if(!timer[i].enable && timer[i].task_fn == 0){
 8008a68:	4a20      	ldr	r2, [pc, #128]	@ (8008aec <Register_task+0x94>)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	011b      	lsls	r3, r3, #4
 8008a6e:	4413      	add	r3, r2
 8008a70:	330c      	adds	r3, #12
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d12c      	bne.n	8008ad2 <Register_task+0x7a>
 8008a78:	4a1c      	ldr	r2, [pc, #112]	@ (8008aec <Register_task+0x94>)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	011b      	lsls	r3, r3, #4
 8008a7e:	4413      	add	r3, r2
 8008a80:	3308      	adds	r3, #8
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d124      	bne.n	8008ad2 <Register_task+0x7a>
			timer[i].enable =1;
 8008a88:	4a18      	ldr	r2, [pc, #96]	@ (8008aec <Register_task+0x94>)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	011b      	lsls	r3, r3, #4
 8008a8e:	4413      	add	r3, r2
 8008a90:	330c      	adds	r3, #12
 8008a92:	2201      	movs	r2, #1
 8008a94:	701a      	strb	r2, [r3, #0]
			timer[i].last_time_ms = milli_sec_tick;
 8008a96:	4b16      	ldr	r3, [pc, #88]	@ (8008af0 <Register_task+0x98>)
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	4914      	ldr	r1, [pc, #80]	@ (8008aec <Register_task+0x94>)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	011b      	lsls	r3, r3, #4
 8008aa0:	440b      	add	r3, r1
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	601a      	str	r2, [r3, #0]
			timer[i].one_time_execute = 0;
 8008aa6:	4a11      	ldr	r2, [pc, #68]	@ (8008aec <Register_task+0x94>)
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	011b      	lsls	r3, r3, #4
 8008aac:	4413      	add	r3, r2
 8008aae:	330d      	adds	r3, #13
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	701a      	strb	r2, [r3, #0]
			timer[i].period_ms = period_ms;
 8008ab4:	4a0d      	ldr	r2, [pc, #52]	@ (8008aec <Register_task+0x94>)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	011b      	lsls	r3, r3, #4
 8008aba:	4413      	add	r3, r2
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	601a      	str	r2, [r3, #0]
			timer[i].task_fn = task_fn;
 8008ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8008aec <Register_task+0x94>)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	011b      	lsls	r3, r3, #4
 8008ac6:	4413      	add	r3, r2
 8008ac8:	3308      	adds	r3, #8
 8008aca:	683a      	ldr	r2, [r7, #0]
 8008acc:	601a      	str	r2, [r3, #0]
			return i;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	e007      	b.n	8008ae2 <Register_task+0x8a>
	for(int i=0; i<max_tasks; i++){
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	60fb      	str	r3, [r7, #12]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2b09      	cmp	r3, #9
 8008adc:	ddc4      	ble.n	8008a68 <Register_task+0x10>
		}
	}
	return -1;
 8008ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bc80      	pop	{r7}
 8008aea:	4770      	bx	lr
 8008aec:	200005b0 	.word	0x200005b0
 8008af0:	20000598 	.word	0x20000598

08008af4 <Run_all_tasks>:
		}
	}
	return -1;
}

void Run_all_tasks(void){
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
	for(int i=0; i<max_tasks; i++){
 8008afa:	2300      	movs	r3, #0
 8008afc:	607b      	str	r3, [r7, #4]
 8008afe:	e03c      	b.n	8008b7a <Run_all_tasks+0x86>
		if(timer[i].enable && timer[i].task_fn != 0){
 8008b00:	4a22      	ldr	r2, [pc, #136]	@ (8008b8c <Run_all_tasks+0x98>)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	011b      	lsls	r3, r3, #4
 8008b06:	4413      	add	r3, r2
 8008b08:	330c      	adds	r3, #12
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d031      	beq.n	8008b74 <Run_all_tasks+0x80>
 8008b10:	4a1e      	ldr	r2, [pc, #120]	@ (8008b8c <Run_all_tasks+0x98>)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	011b      	lsls	r3, r3, #4
 8008b16:	4413      	add	r3, r2
 8008b18:	3308      	adds	r3, #8
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d029      	beq.n	8008b74 <Run_all_tasks+0x80>
			if(milli_sec_tick - timer[i].last_time_ms > timer[i].period_ms){
 8008b20:	4b1b      	ldr	r3, [pc, #108]	@ (8008b90 <Run_all_tasks+0x9c>)
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	4919      	ldr	r1, [pc, #100]	@ (8008b8c <Run_all_tasks+0x98>)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	011b      	lsls	r3, r3, #4
 8008b2a:	440b      	add	r3, r1
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	1ad2      	subs	r2, r2, r3
 8008b32:	4916      	ldr	r1, [pc, #88]	@ (8008b8c <Run_all_tasks+0x98>)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	011b      	lsls	r3, r3, #4
 8008b38:	440b      	add	r3, r1
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d919      	bls.n	8008b74 <Run_all_tasks+0x80>
				timer[i].last_time_ms = milli_sec_tick;
 8008b40:	4b13      	ldr	r3, [pc, #76]	@ (8008b90 <Run_all_tasks+0x9c>)
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	4911      	ldr	r1, [pc, #68]	@ (8008b8c <Run_all_tasks+0x98>)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	011b      	lsls	r3, r3, #4
 8008b4a:	440b      	add	r3, r1
 8008b4c:	3304      	adds	r3, #4
 8008b4e:	601a      	str	r2, [r3, #0]
				timer[i].task_fn();
 8008b50:	4a0e      	ldr	r2, [pc, #56]	@ (8008b8c <Run_all_tasks+0x98>)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	011b      	lsls	r3, r3, #4
 8008b56:	4413      	add	r3, r2
 8008b58:	3308      	adds	r3, #8
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4798      	blx	r3
				if(timer[i].one_time_execute==1){
 8008b5e:	4a0b      	ldr	r2, [pc, #44]	@ (8008b8c <Run_all_tasks+0x98>)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	011b      	lsls	r3, r3, #4
 8008b64:	4413      	add	r3, r2
 8008b66:	330d      	adds	r3, #13
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d102      	bne.n	8008b74 <Run_all_tasks+0x80>
					Remove_task(i);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f810 	bl	8008b94 <Remove_task>
	for(int i=0; i<max_tasks; i++){
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	3301      	adds	r3, #1
 8008b78:	607b      	str	r3, [r7, #4]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b09      	cmp	r3, #9
 8008b7e:	ddbf      	ble.n	8008b00 <Run_all_tasks+0xc>
				}
			}
		}
	}
}
 8008b80:	bf00      	nop
 8008b82:	bf00      	nop
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	200005b0 	.word	0x200005b0
 8008b90:	20000598 	.word	0x20000598

08008b94 <Remove_task>:

void Remove_task(int task_id){
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
	if(task_id>=0 && task_id<max_tasks){
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	db24      	blt.n	8008bec <Remove_task+0x58>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b09      	cmp	r3, #9
 8008ba6:	dc21      	bgt.n	8008bec <Remove_task+0x58>
		timer[task_id].enable = 0;
 8008ba8:	4a13      	ldr	r2, [pc, #76]	@ (8008bf8 <Remove_task+0x64>)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	011b      	lsls	r3, r3, #4
 8008bae:	4413      	add	r3, r2
 8008bb0:	330c      	adds	r3, #12
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	701a      	strb	r2, [r3, #0]
		timer[task_id].last_time_ms = 0;
 8008bb6:	4a10      	ldr	r2, [pc, #64]	@ (8008bf8 <Remove_task+0x64>)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	011b      	lsls	r3, r3, #4
 8008bbc:	4413      	add	r3, r2
 8008bbe:	3304      	adds	r3, #4
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	601a      	str	r2, [r3, #0]
		timer[task_id].one_time_execute = 0;
 8008bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8008bf8 <Remove_task+0x64>)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	011b      	lsls	r3, r3, #4
 8008bca:	4413      	add	r3, r2
 8008bcc:	330d      	adds	r3, #13
 8008bce:	2200      	movs	r2, #0
 8008bd0:	701a      	strb	r2, [r3, #0]
		timer[task_id].period_ms = 0;
 8008bd2:	4a09      	ldr	r2, [pc, #36]	@ (8008bf8 <Remove_task+0x64>)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	011b      	lsls	r3, r3, #4
 8008bd8:	4413      	add	r3, r2
 8008bda:	2200      	movs	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]
		timer[task_id].task_fn = 0;
 8008bde:	4a06      	ldr	r2, [pc, #24]	@ (8008bf8 <Remove_task+0x64>)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	011b      	lsls	r3, r3, #4
 8008be4:	4413      	add	r3, r2
 8008be6:	3308      	adds	r3, #8
 8008be8:	2200      	movs	r2, #0
 8008bea:	601a      	str	r2, [r3, #0]
	}
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bc80      	pop	{r7}
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	200005b0 	.word	0x200005b0

08008bfc <TIM2_IRQHandler>:

}

//void timer_handler(void)
void TIM2_IRQHandler(void)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)            // Check update interrupt flag
 8008c00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00c      	beq.n	8008c28 <TIM2_IRQHandler+0x2c>
    {
        TIM2->SR &= ~TIM_SR_UIF;          // Clear it
 8008c0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008c18:	f023 0301 	bic.w	r3, r3, #1
 8008c1c:	6113      	str	r3, [r2, #16]
        us_tick++;
 8008c1e:	4b04      	ldr	r3, [pc, #16]	@ (8008c30 <TIM2_IRQHandler+0x34>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3301      	adds	r3, #1
 8008c24:	4a02      	ldr	r2, [pc, #8]	@ (8008c30 <TIM2_IRQHandler+0x34>)
 8008c26:	6013      	str	r3, [r2, #0]
        // ---- Your microsecond code here ----
        // Example: toggle a pin or increment counter
    }
}
 8008c28:	bf00      	nop
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bc80      	pop	{r7}
 8008c2e:	4770      	bx	lr
 8008c30:	20000650 	.word	0x20000650

08008c34 <uart_init>:
#include <stdarg.h>
#include"extern_file_declarations.h"
#include"can.h"
#define UART_PRINTF_BUFFER_SIZE 100
extern uint32_t get_APB1_freq(void) ;
STATUS uart_init(uint32_t Baud_Rate){
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
	 // Enable clocks
	    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;   // GPIOA
 8008c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8008cf4 <uart_init+0xc0>)
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	4a2c      	ldr	r2, [pc, #176]	@ (8008cf4 <uart_init+0xc0>)
 8008c42:	f043 0304 	orr.w	r3, r3, #4
 8008c46:	6193      	str	r3, [r2, #24]
	    RCC->APB2ENR |= RCC_APB2ENR_USART1EN; // USART1
 8008c48:	4b2a      	ldr	r3, [pc, #168]	@ (8008cf4 <uart_init+0xc0>)
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	4a29      	ldr	r2, [pc, #164]	@ (8008cf4 <uart_init+0xc0>)
 8008c4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008c52:	6193      	str	r3, [r2, #24]
	    RCC->AHBENR |= RCC_AHBENR_DMA1EN; // DMA1
 8008c54:	4b27      	ldr	r3, [pc, #156]	@ (8008cf4 <uart_init+0xc0>)
 8008c56:	695b      	ldr	r3, [r3, #20]
 8008c58:	4a26      	ldr	r2, [pc, #152]	@ (8008cf4 <uart_init+0xc0>)
 8008c5a:	f043 0301 	orr.w	r3, r3, #1
 8008c5e:	6153      	str	r3, [r2, #20]

	    // PA9 = TX (AF push-pull), PA10 = RX (input floating)
	    GPIOA->CRH &= ~((0xF << (4 * 1)) | (0xF << (4 * 2))); // clear CNF/MODE for PA9, PA10
 8008c60:	4b25      	ldr	r3, [pc, #148]	@ (8008cf8 <uart_init+0xc4>)
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	4a24      	ldr	r2, [pc, #144]	@ (8008cf8 <uart_init+0xc4>)
 8008c66:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008c6a:	6053      	str	r3, [r2, #4]
	    GPIOA->CRH |=  (0xB << (4 * 1)); // PA9 = AF PP, 50 MHz
 8008c6c:	4b22      	ldr	r3, [pc, #136]	@ (8008cf8 <uart_init+0xc4>)
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	4a21      	ldr	r2, [pc, #132]	@ (8008cf8 <uart_init+0xc4>)
 8008c72:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008c76:	6053      	str	r3, [r2, #4]
	    GPIOA->CRH |=  (0x4 << (4 * 2)); // PA10 = input floating
 8008c78:	4b1f      	ldr	r3, [pc, #124]	@ (8008cf8 <uart_init+0xc4>)
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8008cf8 <uart_init+0xc4>)
 8008c7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008c82:	6053      	str	r3, [r2, #4]
	    // Reset USART1
	    USART1->CR1 = 0;
 8008c84:	4b1d      	ldr	r3, [pc, #116]	@ (8008cfc <uart_init+0xc8>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	60da      	str	r2, [r3, #12]
	    // Calculate baudrate divisor
	    uint32_t pclk2 = get_APB2_freq();
 8008c8a:	f7ff fe83 	bl	8008994 <get_APB2_freq>
 8008c8e:	60f8      	str	r0, [r7, #12]
	    if (pclk2 == 0 || Baud_Rate == 0) {
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <uart_init+0x68>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <uart_init+0x6c>
	        return RY_NOT_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	e024      	b.n	8008cea <uart_init+0xb6>
	    }
	    uint32_t usartdiv = (pclk2 + (Baud_Rate/2)) / Baud_Rate; // nearest
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	085a      	lsrs	r2, r3, #1
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	441a      	add	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cae:	60bb      	str	r3, [r7, #8]
	    USART1->BRR = usartdiv;
 8008cb0:	4a12      	ldr	r2, [pc, #72]	@ (8008cfc <uart_init+0xc8>)
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	6093      	str	r3, [r2, #8]
	    // Enable USART, TX, RX
	    USART1->CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8008cb6:	4b11      	ldr	r3, [pc, #68]	@ (8008cfc <uart_init+0xc8>)
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	4a10      	ldr	r2, [pc, #64]	@ (8008cfc <uart_init+0xc8>)
 8008cbc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008cc0:	f043 030c 	orr.w	r3, r3, #12
 8008cc4:	60d3      	str	r3, [r2, #12]
	    // 4. Configure DMA1 Channel4 for USART1_TX
	       DMA1_Channel4->CCR = 0;            // Disable channel
 8008cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8008d00 <uart_init+0xcc>)
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]
	       DMA1_Channel4->CPAR = (uint32_t)&USART1->DR; // Peripheral address
 8008ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8008d00 <uart_init+0xcc>)
 8008cce:	4a0d      	ldr	r2, [pc, #52]	@ (8008d04 <uart_init+0xd0>)
 8008cd0:	609a      	str	r2, [r3, #8]
	       DMA1_Channel4->CCR = DMA_CCR_DIR | DMA_CCR_MINC; // memory-to-periph, memory increment
 8008cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8008d00 <uart_init+0xcc>)
 8008cd4:	2290      	movs	r2, #144	@ 0x90
 8008cd6:	601a      	str	r2, [r3, #0]
	    // Verify configuration
	    if (!(USART1->CR1 & USART_CR1_UE)) {
 8008cd8:	4b08      	ldr	r3, [pc, #32]	@ (8008cfc <uart_init+0xc8>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <uart_init+0xb4>
	        return RY_NOT_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	e000      	b.n	8008cea <uart_init+0xb6>
	    }
	    return RY_OK;
 8008ce8:	2301      	movs	r3, #1
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3710      	adds	r7, #16
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	40021000 	.word	0x40021000
 8008cf8:	40010800 	.word	0x40010800
 8008cfc:	40013800 	.word	0x40013800
 8008d00:	40020044 	.word	0x40020044
 8008d04:	40013804 	.word	0x40013804

08008d08 <uart3_Init>:
STATUS uart3_Init(uint32_t baudrate) {
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
    // 1. Enable clocks for GPIOB and USART3
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;   // Enable GPIOB clock
 8008d10:	4b23      	ldr	r3, [pc, #140]	@ (8008da0 <uart3_Init+0x98>)
 8008d12:	699b      	ldr	r3, [r3, #24]
 8008d14:	4a22      	ldr	r2, [pc, #136]	@ (8008da0 <uart3_Init+0x98>)
 8008d16:	f043 0308 	orr.w	r3, r3, #8
 8008d1a:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_USART3EN; // Enable USART3 clock
 8008d1c:	4b20      	ldr	r3, [pc, #128]	@ (8008da0 <uart3_Init+0x98>)
 8008d1e:	69db      	ldr	r3, [r3, #28]
 8008d20:	4a1f      	ldr	r2, [pc, #124]	@ (8008da0 <uart3_Init+0x98>)
 8008d22:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008d26:	61d3      	str	r3, [r2, #28]

    // 2. Configure PB10 as Alternate Function Push-Pull (TX), 50 MHz
    GPIOB->CRH &= ~(GPIO_CRH_MODE10 | GPIO_CRH_CNF10);
 8008d28:	4b1e      	ldr	r3, [pc, #120]	@ (8008da4 <uart3_Init+0x9c>)
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8008da4 <uart3_Init+0x9c>)
 8008d2e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008d32:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x03 << GPIO_CRH_MODE10_Pos); // Output mode, max speed 50 MHz
 8008d34:	4b1b      	ldr	r3, [pc, #108]	@ (8008da4 <uart3_Init+0x9c>)
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	4a1a      	ldr	r2, [pc, #104]	@ (8008da4 <uart3_Init+0x9c>)
 8008d3a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008d3e:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x02 << GPIO_CRH_CNF10_Pos);  // AF push-pull
 8008d40:	4b18      	ldr	r3, [pc, #96]	@ (8008da4 <uart3_Init+0x9c>)
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	4a17      	ldr	r2, [pc, #92]	@ (8008da4 <uart3_Init+0x9c>)
 8008d46:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008d4a:	6053      	str	r3, [r2, #4]

    // 3. Configure PB11 as Input Floating (RX)
    GPIOB->CRH &= ~(GPIO_CRH_MODE11 | GPIO_CRH_CNF11);
 8008d4c:	4b15      	ldr	r3, [pc, #84]	@ (8008da4 <uart3_Init+0x9c>)
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	4a14      	ldr	r2, [pc, #80]	@ (8008da4 <uart3_Init+0x9c>)
 8008d52:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d56:	6053      	str	r3, [r2, #4]
    GPIOB->CRH |= (0x01 << GPIO_CRH_CNF11_Pos);  // Floating input
 8008d58:	4b12      	ldr	r3, [pc, #72]	@ (8008da4 <uart3_Init+0x9c>)
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	4a11      	ldr	r2, [pc, #68]	@ (8008da4 <uart3_Init+0x9c>)
 8008d5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008d62:	6053      	str	r3, [r2, #4]

    // 4. USART configuration
    USART3->CR1 = 0;  // Reset control register
 8008d64:	4b10      	ldr	r3, [pc, #64]	@ (8008da8 <uart3_Init+0xa0>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	60da      	str	r2, [r3, #12]

    // Baud rate = Fclk / (16 * USARTDIV)
    // Example: PCLK1 = 36 MHz, baud = 115200
    // USARTDIV = 36MHz / (16 * 115200) ≈ 19.53
    // DIV_Mantissa = 19, DIV_Fraction = 0.53*16 ≈ 8
    uint32_t pclk = 36000000; // APB1 clock is 36 MHz (default with 72 MHz SYSCLK)
 8008d6a:	4b10      	ldr	r3, [pc, #64]	@ (8008dac <uart3_Init+0xa4>)
 8008d6c:	60fb      	str	r3, [r7, #12]
    uint32_t usartdiv = (pclk + (baudrate/2)) / baudrate; // scaled
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	085a      	lsrs	r2, r3, #1
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	441a      	add	r2, r3
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d7c:	60bb      	str	r3, [r7, #8]
    USART3->BRR = usartdiv;
 8008d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8008da8 <uart3_Init+0xa0>)
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	6093      	str	r3, [r2, #8]

    // Enable USART, TX, RX
    USART3->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8008d84:	4b08      	ldr	r3, [pc, #32]	@ (8008da8 <uart3_Init+0xa0>)
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	4a07      	ldr	r2, [pc, #28]	@ (8008da8 <uart3_Init+0xa0>)
 8008d8a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008d8e:	f043 030c 	orr.w	r3, r3, #12
 8008d92:	60d3      	str	r3, [r2, #12]
    return RY_OK;
 8008d94:	2301      	movs	r3, #1
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bc80      	pop	{r7}
 8008d9e:	4770      	bx	lr
 8008da0:	40021000 	.word	0x40021000
 8008da4:	40010c00 	.word	0x40010c00
 8008da8:	40004800 	.word	0x40004800
 8008dac:	02255100 	.word	0x02255100

08008db0 <uart_send1>:
{
    while (*str) {
    	uart_print(*str++);
    }
}
void uart_send1(const uint8_t *buf, size_t len) {
 8008db0:	b480      	push	{r7}
 8008db2:	b085      	sub	sp, #20
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < len; ++i) {
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60fb      	str	r3, [r7, #12]
 8008dbe:	e00f      	b.n	8008de0 <uart_send1+0x30>
        while (!(USART1->SR & (1U << 7))) { /* busy wait */ } // TXE bit
 8008dc0:	bf00      	nop
 8008dc2:	4b10      	ldr	r3, [pc, #64]	@ (8008e04 <uart_send1+0x54>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d0f9      	beq.n	8008dc2 <uart_send1+0x12>
        USART1->DR = (uint8_t)buf[i];
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4413      	add	r3, r2
 8008dd4:	781a      	ldrb	r2, [r3, #0]
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8008e04 <uart_send1+0x54>)
 8008dd8:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < len; ++i) {
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	429a      	cmp	r2, r3
 8008de6:	d3eb      	bcc.n	8008dc0 <uart_send1+0x10>
    }
    while (!(USART1->SR & (1U << 6))) { /* wait TC */ } // TC bit
 8008de8:	bf00      	nop
 8008dea:	4b06      	ldr	r3, [pc, #24]	@ (8008e04 <uart_send1+0x54>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d0f9      	beq.n	8008dea <uart_send1+0x3a>
}
 8008df6:	bf00      	nop
 8008df8:	bf00      	nop
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bc80      	pop	{r7}
 8008e00:	4770      	bx	lr
 8008e02:	bf00      	nop
 8008e04:	40013800 	.word	0x40013800

08008e08 <uart_send>:
void uart_send(const uint8_t *buf, size_t len) {
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < len; ++i) {
 8008e12:	2300      	movs	r3, #0
 8008e14:	60fb      	str	r3, [r7, #12]
 8008e16:	e00f      	b.n	8008e38 <uart_send+0x30>
        // Wait until TXE (transmit data register empty)
        while (!(USART3->SR & (1U << 7))) { /* busy wait */ } // TXE bit
 8008e18:	bf00      	nop
 8008e1a:	4b10      	ldr	r3, [pc, #64]	@ (8008e5c <uart_send+0x54>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d0f9      	beq.n	8008e1a <uart_send+0x12>
        // Write data (DR is 8-bit)
        USART3->DR = (uint8_t)buf[i];
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	781a      	ldrb	r2, [r3, #0]
 8008e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e5c <uart_send+0x54>)
 8008e30:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < len; ++i) {
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3301      	adds	r3, #1
 8008e36:	60fb      	str	r3, [r7, #12]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d3eb      	bcc.n	8008e18 <uart_send+0x10>
    }
    // Optionally wait for TC (transmission complete) if you need to ensure fully shifted out:
    while (!(USART3->SR & (1U << 6))) { /* wait TC */ } // TC bit
 8008e40:	bf00      	nop
 8008e42:	4b06      	ldr	r3, [pc, #24]	@ (8008e5c <uart_send+0x54>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0f9      	beq.n	8008e42 <uart_send+0x3a>
}
 8008e4e:	bf00      	nop
 8008e50:	bf00      	nop
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bc80      	pop	{r7}
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	40004800 	.word	0x40004800

08008e60 <send_id_data_only_over_uart>:
void send_id_data_only_over_uart(const can_frame_t *f) {
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b088      	sub	sp, #32
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
    uint8_t buf[13];
    while (!(USART1->SR & (1U << 7))) { /* busy wait */ } // TXE bit
 8008e68:	bf00      	nop
 8008e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8008ee4 <send_id_data_only_over_uart+0x84>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d0f9      	beq.n	8008e6a <send_id_data_only_over_uart+0xa>
    USART1->DR = (uint8_t)0XAA;
 8008e76:	4b1b      	ldr	r3, [pc, #108]	@ (8008ee4 <send_id_data_only_over_uart+0x84>)
 8008e78:	22aa      	movs	r2, #170	@ 0xaa
 8008e7a:	605a      	str	r2, [r3, #4]
    buf[3] = (uint8_t)(f->id & 0xFF);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	73fb      	strb	r3, [r7, #15]
    buf[2] = (uint8_t)((f->id >> 8) & 0xFF);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	0a1b      	lsrs	r3, r3, #8
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	73bb      	strb	r3, [r7, #14]
    buf[1] = (uint8_t)((f->id >> 16) & 0xFF);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	0c1b      	lsrs	r3, r3, #16
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	737b      	strb	r3, [r7, #13]
    buf[0] = (uint8_t)((f->id >> 24) & 0xFF);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	0e1b      	lsrs	r3, r3, #24
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	733b      	strb	r3, [r7, #12]
    buf[4] = f->dlc;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	799b      	ldrb	r3, [r3, #6]
 8008ea6:	743b      	strb	r3, [r7, #16]
    /* copy 8 data bytes (if dlc<8 you still send 8 bytes - zeros ok) */
    for (int i = 0; i < 8; ++i) buf[5 + i] = f->data[i];
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61fb      	str	r3, [r7, #28]
 8008eac:	e00d      	b.n	8008eca <send_id_data_only_over_uart+0x6a>
 8008eae:	69fb      	ldr	r3, [r7, #28]
 8008eb0:	3305      	adds	r3, #5
 8008eb2:	6879      	ldr	r1, [r7, #4]
 8008eb4:	69fa      	ldr	r2, [r7, #28]
 8008eb6:	440a      	add	r2, r1
 8008eb8:	3207      	adds	r2, #7
 8008eba:	7812      	ldrb	r2, [r2, #0]
 8008ebc:	3320      	adds	r3, #32
 8008ebe:	443b      	add	r3, r7
 8008ec0:	f803 2c14 	strb.w	r2, [r3, #-20]
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	61fb      	str	r3, [r7, #28]
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	2b07      	cmp	r3, #7
 8008ece:	ddee      	ble.n	8008eae <send_id_data_only_over_uart+0x4e>
    uart_send1(buf, sizeof(buf)/sizeof(buf[0])); // 13 bytes
 8008ed0:	f107 030c 	add.w	r3, r7, #12
 8008ed4:	210d      	movs	r1, #13
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff ff6a 	bl	8008db0 <uart_send1>
}
 8008edc:	bf00      	nop
 8008ede:	3720      	adds	r7, #32
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	40013800 	.word	0x40013800

08008ee8 <uart_printf>:
void uart_printf(const char *format, ...)
{
 8008ee8:	b40f      	push	{r0, r1, r2, r3}
 8008eea:	b580      	push	{r7, lr}
 8008eec:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8008ef0:	af00      	add	r7, sp, #0
    uint8_t buf[500];
    va_list ap;
    va_start(ap, format);
 8008ef2:	f507 7203 	add.w	r2, r7, #524	@ 0x20c
 8008ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8008efa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8008efe:	601a      	str	r2, [r3, #0]
    int n = vsnprintf(buf, sizeof(buf), format, ap);
 8008f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8008f04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8008f08:	f107 0008 	add.w	r0, r7, #8
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8008f12:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8008f16:	f003 f80f 	bl	800bf38 <vsniprintf>
 8008f1a:	f8c7 01fc 	str.w	r0, [r7, #508]	@ 0x1fc
    va_end(ap);
    if (n > 0) {
 8008f1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	dd10      	ble.n	8008f48 <uart_printf+0x60>
        if ((size_t)n > sizeof(buf)) n = sizeof(buf);
 8008f26:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8008f2a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008f2e:	d903      	bls.n	8008f38 <uart_printf+0x50>
 8008f30:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8008f34:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
        uart_send(buf, (size_t)n);
 8008f38:	f8d7 21fc 	ldr.w	r2, [r7, #508]	@ 0x1fc
 8008f3c:	f107 0308 	add.w	r3, r7, #8
 8008f40:	4611      	mov	r1, r2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7ff ff60 	bl	8008e08 <uart_send>
    }
}
 8008f48:	bf00      	nop
 8008f4a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f54:	b004      	add	sp, #16
 8008f56:	4770      	bx	lr

08008f58 <Reset_Handler>:
 8008f58:	f7ff fd42 	bl	80089e0 <SystemInit>
 8008f5c:	480b      	ldr	r0, [pc, #44]	@ (8008f8c <LoopFillZerobss+0xe>)
 8008f5e:	490c      	ldr	r1, [pc, #48]	@ (8008f90 <LoopFillZerobss+0x12>)
 8008f60:	4a0c      	ldr	r2, [pc, #48]	@ (8008f94 <LoopFillZerobss+0x16>)
 8008f62:	2300      	movs	r3, #0
 8008f64:	e002      	b.n	8008f6c <LoopCopyDataInit>

08008f66 <CopyDataInit>:
 8008f66:	58d4      	ldr	r4, [r2, r3]
 8008f68:	50c4      	str	r4, [r0, r3]
 8008f6a:	3304      	adds	r3, #4

08008f6c <LoopCopyDataInit>:
 8008f6c:	18c4      	adds	r4, r0, r3
 8008f6e:	428c      	cmp	r4, r1
 8008f70:	d3f9      	bcc.n	8008f66 <CopyDataInit>
 8008f72:	4a09      	ldr	r2, [pc, #36]	@ (8008f98 <LoopFillZerobss+0x1a>)
 8008f74:	4c09      	ldr	r4, [pc, #36]	@ (8008f9c <LoopFillZerobss+0x1e>)
 8008f76:	2300      	movs	r3, #0
 8008f78:	e001      	b.n	8008f7e <LoopFillZerobss>

08008f7a <FillZerobss>:
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	3204      	adds	r2, #4

08008f7e <LoopFillZerobss>:
 8008f7e:	42a2      	cmp	r2, r4
 8008f80:	d3fb      	bcc.n	8008f7a <FillZerobss>
 8008f82:	f003 f83f 	bl	800c004 <__libc_init_array>
 8008f86:	f7fe faa5 	bl	80074d4 <main>
 8008f8a:	4770      	bx	lr
 8008f8c:	20000000 	.word	0x20000000
 8008f90:	200001fc 	.word	0x200001fc
 8008f94:	0800ee3c 	.word	0x0800ee3c
 8008f98:	20000200 	.word	0x20000200
 8008f9c:	200007a4 	.word	0x200007a4

08008fa0 <ADC1_2_IRQHandler>:
 8008fa0:	e7fe      	b.n	8008fa0 <ADC1_2_IRQHandler>
	...

08008fa4 <HAL_Init>:
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	4b08      	ldr	r3, [pc, #32]	@ (8008fcc <HAL_Init+0x28>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a07      	ldr	r2, [pc, #28]	@ (8008fcc <HAL_Init+0x28>)
 8008fae:	f043 0310 	orr.w	r3, r3, #16
 8008fb2:	6013      	str	r3, [r2, #0]
 8008fb4:	2003      	movs	r0, #3
 8008fb6:	f000 f919 	bl	80091ec <HAL_NVIC_SetPriorityGrouping>
 8008fba:	200f      	movs	r0, #15
 8008fbc:	f000 f808 	bl	8008fd0 <HAL_InitTick>
 8008fc0:	f7ff fa24 	bl	800840c <HAL_MspInit>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	40022000 	.word	0x40022000

08008fd0 <HAL_InitTick>:
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	4b12      	ldr	r3, [pc, #72]	@ (8009024 <HAL_InitTick+0x54>)
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	4b12      	ldr	r3, [pc, #72]	@ (8009028 <HAL_InitTick+0x58>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 f931 	bl	8009256 <HAL_SYSTICK_Config>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d001      	beq.n	8008ffe <HAL_InitTick+0x2e>
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e00e      	b.n	800901c <HAL_InitTick+0x4c>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2b0f      	cmp	r3, #15
 8009002:	d80a      	bhi.n	800901a <HAL_InitTick+0x4a>
 8009004:	2200      	movs	r2, #0
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	f04f 30ff 	mov.w	r0, #4294967295
 800900c:	f000 f8f9 	bl	8009202 <HAL_NVIC_SetPriority>
 8009010:	4a06      	ldr	r2, [pc, #24]	@ (800902c <HAL_InitTick+0x5c>)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6013      	str	r3, [r2, #0]
 8009016:	2300      	movs	r3, #0
 8009018:	e000      	b.n	800901c <HAL_InitTick+0x4c>
 800901a:	2301      	movs	r3, #1
 800901c:	4618      	mov	r0, r3
 800901e:	3708      	adds	r7, #8
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	20000028 	.word	0x20000028
 8009028:	20000030 	.word	0x20000030
 800902c:	2000002c 	.word	0x2000002c

08009030 <HAL_IncTick>:
 8009030:	b480      	push	{r7}
 8009032:	af00      	add	r7, sp, #0
 8009034:	4b05      	ldr	r3, [pc, #20]	@ (800904c <HAL_IncTick+0x1c>)
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	461a      	mov	r2, r3
 800903a:	4b05      	ldr	r3, [pc, #20]	@ (8009050 <HAL_IncTick+0x20>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4413      	add	r3, r2
 8009040:	4a03      	ldr	r2, [pc, #12]	@ (8009050 <HAL_IncTick+0x20>)
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	bf00      	nop
 8009046:	46bd      	mov	sp, r7
 8009048:	bc80      	pop	{r7}
 800904a:	4770      	bx	lr
 800904c:	20000030 	.word	0x20000030
 8009050:	20000654 	.word	0x20000654

08009054 <__NVIC_SetPriorityGrouping>:
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f003 0307 	and.w	r3, r3, #7
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	4b0c      	ldr	r3, [pc, #48]	@ (8009098 <__NVIC_SetPriorityGrouping+0x44>)
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	60bb      	str	r3, [r7, #8]
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009070:	4013      	ands	r3, r2
 8009072:	60bb      	str	r3, [r7, #8]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	021a      	lsls	r2, r3, #8
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	4313      	orrs	r3, r2
 800907c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009084:	60bb      	str	r3, [r7, #8]
 8009086:	4a04      	ldr	r2, [pc, #16]	@ (8009098 <__NVIC_SetPriorityGrouping+0x44>)
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	60d3      	str	r3, [r2, #12]
 800908c:	bf00      	nop
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	bc80      	pop	{r7}
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	e000ed00 	.word	0xe000ed00

0800909c <__NVIC_GetPriorityGrouping>:
 800909c:	b480      	push	{r7}
 800909e:	af00      	add	r7, sp, #0
 80090a0:	4b04      	ldr	r3, [pc, #16]	@ (80090b4 <__NVIC_GetPriorityGrouping+0x18>)
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	0a1b      	lsrs	r3, r3, #8
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	4618      	mov	r0, r3
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bc80      	pop	{r7}
 80090b0:	4770      	bx	lr
 80090b2:	bf00      	nop
 80090b4:	e000ed00 	.word	0xe000ed00

080090b8 <__NVIC_EnableIRQ>:
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	71fb      	strb	r3, [r7, #7]
 80090c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	db0b      	blt.n	80090e2 <__NVIC_EnableIRQ+0x2a>
 80090ca:	79fb      	ldrb	r3, [r7, #7]
 80090cc:	f003 021f 	and.w	r2, r3, #31
 80090d0:	4906      	ldr	r1, [pc, #24]	@ (80090ec <__NVIC_EnableIRQ+0x34>)
 80090d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090d6:	095b      	lsrs	r3, r3, #5
 80090d8:	2001      	movs	r0, #1
 80090da:	fa00 f202 	lsl.w	r2, r0, r2
 80090de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80090e2:	bf00      	nop
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bc80      	pop	{r7}
 80090ea:	4770      	bx	lr
 80090ec:	e000e100 	.word	0xe000e100

080090f0 <__NVIC_SetPriority>:
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	4603      	mov	r3, r0
 80090f8:	6039      	str	r1, [r7, #0]
 80090fa:	71fb      	strb	r3, [r7, #7]
 80090fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009100:	2b00      	cmp	r3, #0
 8009102:	db0a      	blt.n	800911a <__NVIC_SetPriority+0x2a>
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	b2da      	uxtb	r2, r3
 8009108:	490c      	ldr	r1, [pc, #48]	@ (800913c <__NVIC_SetPriority+0x4c>)
 800910a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800910e:	0112      	lsls	r2, r2, #4
 8009110:	b2d2      	uxtb	r2, r2
 8009112:	440b      	add	r3, r1
 8009114:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8009118:	e00a      	b.n	8009130 <__NVIC_SetPriority+0x40>
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	b2da      	uxtb	r2, r3
 800911e:	4908      	ldr	r1, [pc, #32]	@ (8009140 <__NVIC_SetPriority+0x50>)
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	f003 030f 	and.w	r3, r3, #15
 8009126:	3b04      	subs	r3, #4
 8009128:	0112      	lsls	r2, r2, #4
 800912a:	b2d2      	uxtb	r2, r2
 800912c:	440b      	add	r3, r1
 800912e:	761a      	strb	r2, [r3, #24]
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	bc80      	pop	{r7}
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	e000e100 	.word	0xe000e100
 8009140:	e000ed00 	.word	0xe000ed00

08009144 <NVIC_EncodePriority>:
 8009144:	b480      	push	{r7}
 8009146:	b089      	sub	sp, #36	@ 0x24
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f003 0307 	and.w	r3, r3, #7
 8009156:	61fb      	str	r3, [r7, #28]
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	f1c3 0307 	rsb	r3, r3, #7
 800915e:	2b04      	cmp	r3, #4
 8009160:	bf28      	it	cs
 8009162:	2304      	movcs	r3, #4
 8009164:	61bb      	str	r3, [r7, #24]
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	3304      	adds	r3, #4
 800916a:	2b06      	cmp	r3, #6
 800916c:	d902      	bls.n	8009174 <NVIC_EncodePriority+0x30>
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	3b03      	subs	r3, #3
 8009172:	e000      	b.n	8009176 <NVIC_EncodePriority+0x32>
 8009174:	2300      	movs	r3, #0
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	f04f 32ff 	mov.w	r2, #4294967295
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	fa02 f303 	lsl.w	r3, r2, r3
 8009182:	43da      	mvns	r2, r3
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	401a      	ands	r2, r3
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	409a      	lsls	r2, r3
 800918c:	f04f 31ff 	mov.w	r1, #4294967295
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	fa01 f303 	lsl.w	r3, r1, r3
 8009196:	43d9      	mvns	r1, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	400b      	ands	r3, r1
 800919c:	4313      	orrs	r3, r2
 800919e:	4618      	mov	r0, r3
 80091a0:	3724      	adds	r7, #36	@ 0x24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bc80      	pop	{r7}
 80091a6:	4770      	bx	lr

080091a8 <SysTick_Config>:
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091b8:	d301      	bcc.n	80091be <SysTick_Config+0x16>
 80091ba:	2301      	movs	r3, #1
 80091bc:	e00f      	b.n	80091de <SysTick_Config+0x36>
 80091be:	4a0a      	ldr	r2, [pc, #40]	@ (80091e8 <SysTick_Config+0x40>)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3b01      	subs	r3, #1
 80091c4:	6053      	str	r3, [r2, #4]
 80091c6:	210f      	movs	r1, #15
 80091c8:	f04f 30ff 	mov.w	r0, #4294967295
 80091cc:	f7ff ff90 	bl	80090f0 <__NVIC_SetPriority>
 80091d0:	4b05      	ldr	r3, [pc, #20]	@ (80091e8 <SysTick_Config+0x40>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	609a      	str	r2, [r3, #8]
 80091d6:	4b04      	ldr	r3, [pc, #16]	@ (80091e8 <SysTick_Config+0x40>)
 80091d8:	2207      	movs	r2, #7
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	2300      	movs	r3, #0
 80091de:	4618      	mov	r0, r3
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	e000e010 	.word	0xe000e010

080091ec <HAL_NVIC_SetPriorityGrouping>:
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7ff ff2d 	bl	8009054 <__NVIC_SetPriorityGrouping>
 80091fa:	bf00      	nop
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}

08009202 <HAL_NVIC_SetPriority>:
 8009202:	b580      	push	{r7, lr}
 8009204:	b086      	sub	sp, #24
 8009206:	af00      	add	r7, sp, #0
 8009208:	4603      	mov	r3, r0
 800920a:	60b9      	str	r1, [r7, #8]
 800920c:	607a      	str	r2, [r7, #4]
 800920e:	73fb      	strb	r3, [r7, #15]
 8009210:	2300      	movs	r3, #0
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	f7ff ff42 	bl	800909c <__NVIC_GetPriorityGrouping>
 8009218:	6178      	str	r0, [r7, #20]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	68b9      	ldr	r1, [r7, #8]
 800921e:	6978      	ldr	r0, [r7, #20]
 8009220:	f7ff ff90 	bl	8009144 <NVIC_EncodePriority>
 8009224:	4602      	mov	r2, r0
 8009226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800922a:	4611      	mov	r1, r2
 800922c:	4618      	mov	r0, r3
 800922e:	f7ff ff5f 	bl	80090f0 <__NVIC_SetPriority>
 8009232:	bf00      	nop
 8009234:	3718      	adds	r7, #24
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}

0800923a <HAL_NVIC_EnableIRQ>:
 800923a:	b580      	push	{r7, lr}
 800923c:	b082      	sub	sp, #8
 800923e:	af00      	add	r7, sp, #0
 8009240:	4603      	mov	r3, r0
 8009242:	71fb      	strb	r3, [r7, #7]
 8009244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009248:	4618      	mov	r0, r3
 800924a:	f7ff ff35 	bl	80090b8 <__NVIC_EnableIRQ>
 800924e:	bf00      	nop
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <HAL_SYSTICK_Config>:
 8009256:	b580      	push	{r7, lr}
 8009258:	b082      	sub	sp, #8
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f7ff ffa2 	bl	80091a8 <SysTick_Config>
 8009264:	4603      	mov	r3, r0
 8009266:	4618      	mov	r0, r3
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
	...

08009270 <HAL_DMA_Abort_IT>:
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	2300      	movs	r3, #0
 800927a:	73fb      	strb	r3, [r7, #15]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009282:	b2db      	uxtb	r3, r3
 8009284:	2b02      	cmp	r3, #2
 8009286:	d005      	beq.n	8009294 <HAL_DMA_Abort_IT+0x24>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2204      	movs	r2, #4
 800928c:	639a      	str	r2, [r3, #56]	@ 0x38
 800928e:	2301      	movs	r3, #1
 8009290:	73fb      	strb	r3, [r7, #15]
 8009292:	e051      	b.n	8009338 <HAL_DMA_Abort_IT+0xc8>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f022 020e 	bic.w	r2, r2, #14
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f022 0201 	bic.w	r2, r2, #1
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a22      	ldr	r2, [pc, #136]	@ (8009344 <HAL_DMA_Abort_IT+0xd4>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d029      	beq.n	8009312 <HAL_DMA_Abort_IT+0xa2>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4a21      	ldr	r2, [pc, #132]	@ (8009348 <HAL_DMA_Abort_IT+0xd8>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d022      	beq.n	800930e <HAL_DMA_Abort_IT+0x9e>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	4a1f      	ldr	r2, [pc, #124]	@ (800934c <HAL_DMA_Abort_IT+0xdc>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d01a      	beq.n	8009308 <HAL_DMA_Abort_IT+0x98>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	4a1e      	ldr	r2, [pc, #120]	@ (8009350 <HAL_DMA_Abort_IT+0xe0>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d012      	beq.n	8009302 <HAL_DMA_Abort_IT+0x92>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a1c      	ldr	r2, [pc, #112]	@ (8009354 <HAL_DMA_Abort_IT+0xe4>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d00a      	beq.n	80092fc <HAL_DMA_Abort_IT+0x8c>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009358 <HAL_DMA_Abort_IT+0xe8>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d102      	bne.n	80092f6 <HAL_DMA_Abort_IT+0x86>
 80092f0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80092f4:	e00e      	b.n	8009314 <HAL_DMA_Abort_IT+0xa4>
 80092f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80092fa:	e00b      	b.n	8009314 <HAL_DMA_Abort_IT+0xa4>
 80092fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009300:	e008      	b.n	8009314 <HAL_DMA_Abort_IT+0xa4>
 8009302:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009306:	e005      	b.n	8009314 <HAL_DMA_Abort_IT+0xa4>
 8009308:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800930c:	e002      	b.n	8009314 <HAL_DMA_Abort_IT+0xa4>
 800930e:	2310      	movs	r3, #16
 8009310:	e000      	b.n	8009314 <HAL_DMA_Abort_IT+0xa4>
 8009312:	2301      	movs	r3, #1
 8009314:	4a11      	ldr	r2, [pc, #68]	@ (800935c <HAL_DMA_Abort_IT+0xec>)
 8009316:	6053      	str	r3, [r2, #4]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f883 2020 	strb.w	r2, [r3, #32]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800932c:	2b00      	cmp	r3, #0
 800932e:	d003      	beq.n	8009338 <HAL_DMA_Abort_IT+0xc8>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	4798      	blx	r3
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	40020008 	.word	0x40020008
 8009348:	4002001c 	.word	0x4002001c
 800934c:	40020030 	.word	0x40020030
 8009350:	40020044 	.word	0x40020044
 8009354:	40020058 	.word	0x40020058
 8009358:	4002006c 	.word	0x4002006c
 800935c:	40020000 	.word	0x40020000

08009360 <HAL_DMA_GetState>:
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800936e:	b2db      	uxtb	r3, r3
 8009370:	4618      	mov	r0, r3
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	bc80      	pop	{r7}
 8009378:	4770      	bx	lr
	...

0800937c <HAL_GPIO_Init>:
 800937c:	b480      	push	{r7}
 800937e:	b08b      	sub	sp, #44	@ 0x2c
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
 8009386:	2300      	movs	r3, #0
 8009388:	627b      	str	r3, [r7, #36]	@ 0x24
 800938a:	2300      	movs	r3, #0
 800938c:	623b      	str	r3, [r7, #32]
 800938e:	e169      	b.n	8009664 <HAL_GPIO_Init+0x2e8>
 8009390:	2201      	movs	r2, #1
 8009392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009394:	fa02 f303 	lsl.w	r3, r2, r3
 8009398:	61fb      	str	r3, [r7, #28]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	4013      	ands	r3, r2
 80093a2:	61bb      	str	r3, [r7, #24]
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	f040 8158 	bne.w	800965e <HAL_GPIO_Init+0x2e2>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	4a9a      	ldr	r2, [pc, #616]	@ (800961c <HAL_GPIO_Init+0x2a0>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d05e      	beq.n	8009476 <HAL_GPIO_Init+0xfa>
 80093b8:	4a98      	ldr	r2, [pc, #608]	@ (800961c <HAL_GPIO_Init+0x2a0>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d875      	bhi.n	80094aa <HAL_GPIO_Init+0x12e>
 80093be:	4a98      	ldr	r2, [pc, #608]	@ (8009620 <HAL_GPIO_Init+0x2a4>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d058      	beq.n	8009476 <HAL_GPIO_Init+0xfa>
 80093c4:	4a96      	ldr	r2, [pc, #600]	@ (8009620 <HAL_GPIO_Init+0x2a4>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d86f      	bhi.n	80094aa <HAL_GPIO_Init+0x12e>
 80093ca:	4a96      	ldr	r2, [pc, #600]	@ (8009624 <HAL_GPIO_Init+0x2a8>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d052      	beq.n	8009476 <HAL_GPIO_Init+0xfa>
 80093d0:	4a94      	ldr	r2, [pc, #592]	@ (8009624 <HAL_GPIO_Init+0x2a8>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d869      	bhi.n	80094aa <HAL_GPIO_Init+0x12e>
 80093d6:	4a94      	ldr	r2, [pc, #592]	@ (8009628 <HAL_GPIO_Init+0x2ac>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d04c      	beq.n	8009476 <HAL_GPIO_Init+0xfa>
 80093dc:	4a92      	ldr	r2, [pc, #584]	@ (8009628 <HAL_GPIO_Init+0x2ac>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d863      	bhi.n	80094aa <HAL_GPIO_Init+0x12e>
 80093e2:	4a92      	ldr	r2, [pc, #584]	@ (800962c <HAL_GPIO_Init+0x2b0>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d046      	beq.n	8009476 <HAL_GPIO_Init+0xfa>
 80093e8:	4a90      	ldr	r2, [pc, #576]	@ (800962c <HAL_GPIO_Init+0x2b0>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d85d      	bhi.n	80094aa <HAL_GPIO_Init+0x12e>
 80093ee:	2b12      	cmp	r3, #18
 80093f0:	d82a      	bhi.n	8009448 <HAL_GPIO_Init+0xcc>
 80093f2:	2b12      	cmp	r3, #18
 80093f4:	d859      	bhi.n	80094aa <HAL_GPIO_Init+0x12e>
 80093f6:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <HAL_GPIO_Init+0x80>)
 80093f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fc:	08009477 	.word	0x08009477
 8009400:	08009451 	.word	0x08009451
 8009404:	08009463 	.word	0x08009463
 8009408:	080094a5 	.word	0x080094a5
 800940c:	080094ab 	.word	0x080094ab
 8009410:	080094ab 	.word	0x080094ab
 8009414:	080094ab 	.word	0x080094ab
 8009418:	080094ab 	.word	0x080094ab
 800941c:	080094ab 	.word	0x080094ab
 8009420:	080094ab 	.word	0x080094ab
 8009424:	080094ab 	.word	0x080094ab
 8009428:	080094ab 	.word	0x080094ab
 800942c:	080094ab 	.word	0x080094ab
 8009430:	080094ab 	.word	0x080094ab
 8009434:	080094ab 	.word	0x080094ab
 8009438:	080094ab 	.word	0x080094ab
 800943c:	080094ab 	.word	0x080094ab
 8009440:	08009459 	.word	0x08009459
 8009444:	0800946d 	.word	0x0800946d
 8009448:	4a79      	ldr	r2, [pc, #484]	@ (8009630 <HAL_GPIO_Init+0x2b4>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d013      	beq.n	8009476 <HAL_GPIO_Init+0xfa>
 800944e:	e02c      	b.n	80094aa <HAL_GPIO_Init+0x12e>
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	623b      	str	r3, [r7, #32]
 8009456:	e029      	b.n	80094ac <HAL_GPIO_Init+0x130>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	3304      	adds	r3, #4
 800945e:	623b      	str	r3, [r7, #32]
 8009460:	e024      	b.n	80094ac <HAL_GPIO_Init+0x130>
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	3308      	adds	r3, #8
 8009468:	623b      	str	r3, [r7, #32]
 800946a:	e01f      	b.n	80094ac <HAL_GPIO_Init+0x130>
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	330c      	adds	r3, #12
 8009472:	623b      	str	r3, [r7, #32]
 8009474:	e01a      	b.n	80094ac <HAL_GPIO_Init+0x130>
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d102      	bne.n	8009484 <HAL_GPIO_Init+0x108>
 800947e:	2304      	movs	r3, #4
 8009480:	623b      	str	r3, [r7, #32]
 8009482:	e013      	b.n	80094ac <HAL_GPIO_Init+0x130>
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d105      	bne.n	8009498 <HAL_GPIO_Init+0x11c>
 800948c:	2308      	movs	r3, #8
 800948e:	623b      	str	r3, [r7, #32]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	69fa      	ldr	r2, [r7, #28]
 8009494:	611a      	str	r2, [r3, #16]
 8009496:	e009      	b.n	80094ac <HAL_GPIO_Init+0x130>
 8009498:	2308      	movs	r3, #8
 800949a:	623b      	str	r3, [r7, #32]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	69fa      	ldr	r2, [r7, #28]
 80094a0:	615a      	str	r2, [r3, #20]
 80094a2:	e003      	b.n	80094ac <HAL_GPIO_Init+0x130>
 80094a4:	2300      	movs	r3, #0
 80094a6:	623b      	str	r3, [r7, #32]
 80094a8:	e000      	b.n	80094ac <HAL_GPIO_Init+0x130>
 80094aa:	bf00      	nop
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	2bff      	cmp	r3, #255	@ 0xff
 80094b0:	d801      	bhi.n	80094b6 <HAL_GPIO_Init+0x13a>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	e001      	b.n	80094ba <HAL_GPIO_Init+0x13e>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	3304      	adds	r3, #4
 80094ba:	617b      	str	r3, [r7, #20]
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	2bff      	cmp	r3, #255	@ 0xff
 80094c0:	d802      	bhi.n	80094c8 <HAL_GPIO_Init+0x14c>
 80094c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	e002      	b.n	80094ce <HAL_GPIO_Init+0x152>
 80094c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ca:	3b08      	subs	r3, #8
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	613b      	str	r3, [r7, #16]
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	210f      	movs	r1, #15
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	fa01 f303 	lsl.w	r3, r1, r3
 80094dc:	43db      	mvns	r3, r3
 80094de:	401a      	ands	r2, r3
 80094e0:	6a39      	ldr	r1, [r7, #32]
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	fa01 f303 	lsl.w	r3, r1, r3
 80094e8:	431a      	orrs	r2, r3
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	601a      	str	r2, [r3, #0]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 80b1 	beq.w	800965e <HAL_GPIO_Init+0x2e2>
 80094fc:	4b4d      	ldr	r3, [pc, #308]	@ (8009634 <HAL_GPIO_Init+0x2b8>)
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	4a4c      	ldr	r2, [pc, #304]	@ (8009634 <HAL_GPIO_Init+0x2b8>)
 8009502:	f043 0301 	orr.w	r3, r3, #1
 8009506:	6193      	str	r3, [r2, #24]
 8009508:	4b4a      	ldr	r3, [pc, #296]	@ (8009634 <HAL_GPIO_Init+0x2b8>)
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	60bb      	str	r3, [r7, #8]
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	4a48      	ldr	r2, [pc, #288]	@ (8009638 <HAL_GPIO_Init+0x2bc>)
 8009516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009518:	089b      	lsrs	r3, r3, #2
 800951a:	3302      	adds	r3, #2
 800951c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009520:	60fb      	str	r3, [r7, #12]
 8009522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009524:	f003 0303 	and.w	r3, r3, #3
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	220f      	movs	r2, #15
 800952c:	fa02 f303 	lsl.w	r3, r2, r3
 8009530:	43db      	mvns	r3, r3
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	4013      	ands	r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a40      	ldr	r2, [pc, #256]	@ (800963c <HAL_GPIO_Init+0x2c0>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d013      	beq.n	8009568 <HAL_GPIO_Init+0x1ec>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a3f      	ldr	r2, [pc, #252]	@ (8009640 <HAL_GPIO_Init+0x2c4>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d00d      	beq.n	8009564 <HAL_GPIO_Init+0x1e8>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a3e      	ldr	r2, [pc, #248]	@ (8009644 <HAL_GPIO_Init+0x2c8>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d007      	beq.n	8009560 <HAL_GPIO_Init+0x1e4>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a3d      	ldr	r2, [pc, #244]	@ (8009648 <HAL_GPIO_Init+0x2cc>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d101      	bne.n	800955c <HAL_GPIO_Init+0x1e0>
 8009558:	2303      	movs	r3, #3
 800955a:	e006      	b.n	800956a <HAL_GPIO_Init+0x1ee>
 800955c:	2304      	movs	r3, #4
 800955e:	e004      	b.n	800956a <HAL_GPIO_Init+0x1ee>
 8009560:	2302      	movs	r3, #2
 8009562:	e002      	b.n	800956a <HAL_GPIO_Init+0x1ee>
 8009564:	2301      	movs	r3, #1
 8009566:	e000      	b.n	800956a <HAL_GPIO_Init+0x1ee>
 8009568:	2300      	movs	r3, #0
 800956a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800956c:	f002 0203 	and.w	r2, r2, #3
 8009570:	0092      	lsls	r2, r2, #2
 8009572:	4093      	lsls	r3, r2
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	4313      	orrs	r3, r2
 8009578:	60fb      	str	r3, [r7, #12]
 800957a:	492f      	ldr	r1, [pc, #188]	@ (8009638 <HAL_GPIO_Init+0x2bc>)
 800957c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800957e:	089b      	lsrs	r3, r3, #2
 8009580:	3302      	adds	r3, #2
 8009582:	68fa      	ldr	r2, [r7, #12]
 8009584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d006      	beq.n	80095a2 <HAL_GPIO_Init+0x226>
 8009594:	4b2d      	ldr	r3, [pc, #180]	@ (800964c <HAL_GPIO_Init+0x2d0>)
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	492c      	ldr	r1, [pc, #176]	@ (800964c <HAL_GPIO_Init+0x2d0>)
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	4313      	orrs	r3, r2
 800959e:	608b      	str	r3, [r1, #8]
 80095a0:	e006      	b.n	80095b0 <HAL_GPIO_Init+0x234>
 80095a2:	4b2a      	ldr	r3, [pc, #168]	@ (800964c <HAL_GPIO_Init+0x2d0>)
 80095a4:	689a      	ldr	r2, [r3, #8]
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	43db      	mvns	r3, r3
 80095aa:	4928      	ldr	r1, [pc, #160]	@ (800964c <HAL_GPIO_Init+0x2d0>)
 80095ac:	4013      	ands	r3, r2
 80095ae:	608b      	str	r3, [r1, #8]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d006      	beq.n	80095ca <HAL_GPIO_Init+0x24e>
 80095bc:	4b23      	ldr	r3, [pc, #140]	@ (800964c <HAL_GPIO_Init+0x2d0>)
 80095be:	68da      	ldr	r2, [r3, #12]
 80095c0:	4922      	ldr	r1, [pc, #136]	@ (800964c <HAL_GPIO_Init+0x2d0>)
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	60cb      	str	r3, [r1, #12]
 80095c8:	e006      	b.n	80095d8 <HAL_GPIO_Init+0x25c>
 80095ca:	4b20      	ldr	r3, [pc, #128]	@ (800964c <HAL_GPIO_Init+0x2d0>)
 80095cc:	68da      	ldr	r2, [r3, #12]
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	43db      	mvns	r3, r3
 80095d2:	491e      	ldr	r1, [pc, #120]	@ (800964c <HAL_GPIO_Init+0x2d0>)
 80095d4:	4013      	ands	r3, r2
 80095d6:	60cb      	str	r3, [r1, #12]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d006      	beq.n	80095f2 <HAL_GPIO_Init+0x276>
 80095e4:	4b19      	ldr	r3, [pc, #100]	@ (800964c <HAL_GPIO_Init+0x2d0>)
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	4918      	ldr	r1, [pc, #96]	@ (800964c <HAL_GPIO_Init+0x2d0>)
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	604b      	str	r3, [r1, #4]
 80095f0:	e006      	b.n	8009600 <HAL_GPIO_Init+0x284>
 80095f2:	4b16      	ldr	r3, [pc, #88]	@ (800964c <HAL_GPIO_Init+0x2d0>)
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	43db      	mvns	r3, r3
 80095fa:	4914      	ldr	r1, [pc, #80]	@ (800964c <HAL_GPIO_Init+0x2d0>)
 80095fc:	4013      	ands	r3, r2
 80095fe:	604b      	str	r3, [r1, #4]
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d021      	beq.n	8009650 <HAL_GPIO_Init+0x2d4>
 800960c:	4b0f      	ldr	r3, [pc, #60]	@ (800964c <HAL_GPIO_Init+0x2d0>)
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	490e      	ldr	r1, [pc, #56]	@ (800964c <HAL_GPIO_Init+0x2d0>)
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	4313      	orrs	r3, r2
 8009616:	600b      	str	r3, [r1, #0]
 8009618:	e021      	b.n	800965e <HAL_GPIO_Init+0x2e2>
 800961a:	bf00      	nop
 800961c:	10320000 	.word	0x10320000
 8009620:	10310000 	.word	0x10310000
 8009624:	10220000 	.word	0x10220000
 8009628:	10210000 	.word	0x10210000
 800962c:	10120000 	.word	0x10120000
 8009630:	10110000 	.word	0x10110000
 8009634:	40021000 	.word	0x40021000
 8009638:	40010000 	.word	0x40010000
 800963c:	40010800 	.word	0x40010800
 8009640:	40010c00 	.word	0x40010c00
 8009644:	40011000 	.word	0x40011000
 8009648:	40011400 	.word	0x40011400
 800964c:	40010400 	.word	0x40010400
 8009650:	4b0b      	ldr	r3, [pc, #44]	@ (8009680 <HAL_GPIO_Init+0x304>)
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	43db      	mvns	r3, r3
 8009658:	4909      	ldr	r1, [pc, #36]	@ (8009680 <HAL_GPIO_Init+0x304>)
 800965a:	4013      	ands	r3, r2
 800965c:	600b      	str	r3, [r1, #0]
 800965e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009660:	3301      	adds	r3, #1
 8009662:	627b      	str	r3, [r7, #36]	@ 0x24
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800966a:	fa22 f303 	lsr.w	r3, r2, r3
 800966e:	2b00      	cmp	r3, #0
 8009670:	f47f ae8e 	bne.w	8009390 <HAL_GPIO_Init+0x14>
 8009674:	bf00      	nop
 8009676:	bf00      	nop
 8009678:	372c      	adds	r7, #44	@ 0x2c
 800967a:	46bd      	mov	sp, r7
 800967c:	bc80      	pop	{r7}
 800967e:	4770      	bx	lr
 8009680:	40010400 	.word	0x40010400

08009684 <HAL_I2C_Init>:
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <HAL_I2C_Init+0x12>
 8009692:	2301      	movs	r3, #1
 8009694:	e12b      	b.n	80098ee <HAL_I2C_Init+0x26a>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d106      	bne.n	80096b0 <HAL_I2C_Init+0x2c>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7fe fee0 	bl	8008470 <HAL_I2C_MspInit>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2224      	movs	r2, #36	@ 0x24
 80096b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f022 0201 	bic.w	r2, r2, #1
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80096d6:	601a      	str	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80096e6:	601a      	str	r2, [r3, #0]
 80096e8:	f001 fe84 	bl	800b3f4 <HAL_RCC_GetPCLK1Freq>
 80096ec:	60f8      	str	r0, [r7, #12]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	4a81      	ldr	r2, [pc, #516]	@ (80098f8 <HAL_I2C_Init+0x274>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d807      	bhi.n	8009708 <HAL_I2C_Init+0x84>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	4a80      	ldr	r2, [pc, #512]	@ (80098fc <HAL_I2C_Init+0x278>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	bf94      	ite	ls
 8009700:	2301      	movls	r3, #1
 8009702:	2300      	movhi	r3, #0
 8009704:	b2db      	uxtb	r3, r3
 8009706:	e006      	b.n	8009716 <HAL_I2C_Init+0x92>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4a7d      	ldr	r2, [pc, #500]	@ (8009900 <HAL_I2C_Init+0x27c>)
 800970c:	4293      	cmp	r3, r2
 800970e:	bf94      	ite	ls
 8009710:	2301      	movls	r3, #1
 8009712:	2300      	movhi	r3, #0
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <HAL_I2C_Init+0x9a>
 800971a:	2301      	movs	r3, #1
 800971c:	e0e7      	b.n	80098ee <HAL_I2C_Init+0x26a>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	4a78      	ldr	r2, [pc, #480]	@ (8009904 <HAL_I2C_Init+0x280>)
 8009722:	fba2 2303 	umull	r2, r3, r2, r3
 8009726:	0c9b      	lsrs	r3, r3, #18
 8009728:	60bb      	str	r3, [r7, #8]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68ba      	ldr	r2, [r7, #8]
 800973a:	430a      	orrs	r2, r1
 800973c:	605a      	str	r2, [r3, #4]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	6a1b      	ldr	r3, [r3, #32]
 8009744:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	4a6a      	ldr	r2, [pc, #424]	@ (80098f8 <HAL_I2C_Init+0x274>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d802      	bhi.n	8009758 <HAL_I2C_Init+0xd4>
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	3301      	adds	r3, #1
 8009756:	e009      	b.n	800976c <HAL_I2C_Init+0xe8>
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800975e:	fb02 f303 	mul.w	r3, r2, r3
 8009762:	4a69      	ldr	r2, [pc, #420]	@ (8009908 <HAL_I2C_Init+0x284>)
 8009764:	fba2 2303 	umull	r2, r3, r2, r3
 8009768:	099b      	lsrs	r3, r3, #6
 800976a:	3301      	adds	r3, #1
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	6812      	ldr	r2, [r2, #0]
 8009770:	430b      	orrs	r3, r1
 8009772:	6213      	str	r3, [r2, #32]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800977e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	495c      	ldr	r1, [pc, #368]	@ (80098f8 <HAL_I2C_Init+0x274>)
 8009788:	428b      	cmp	r3, r1
 800978a:	d819      	bhi.n	80097c0 <HAL_I2C_Init+0x13c>
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	1e59      	subs	r1, r3, #1
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	fbb1 f3f3 	udiv	r3, r1, r3
 800979a:	1c59      	adds	r1, r3, #1
 800979c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80097a0:	400b      	ands	r3, r1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00a      	beq.n	80097bc <HAL_I2C_Init+0x138>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	1e59      	subs	r1, r3, #1
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	005b      	lsls	r3, r3, #1
 80097b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80097b4:	3301      	adds	r3, #1
 80097b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097ba:	e051      	b.n	8009860 <HAL_I2C_Init+0x1dc>
 80097bc:	2304      	movs	r3, #4
 80097be:	e04f      	b.n	8009860 <HAL_I2C_Init+0x1dc>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d111      	bne.n	80097ec <HAL_I2C_Init+0x168>
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	1e58      	subs	r0, r3, #1
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6859      	ldr	r1, [r3, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	005b      	lsls	r3, r3, #1
 80097d4:	440b      	add	r3, r1
 80097d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80097da:	3301      	adds	r3, #1
 80097dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	bf0c      	ite	eq
 80097e4:	2301      	moveq	r3, #1
 80097e6:	2300      	movne	r3, #0
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	e012      	b.n	8009812 <HAL_I2C_Init+0x18e>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	1e58      	subs	r0, r3, #1
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6859      	ldr	r1, [r3, #4]
 80097f4:	460b      	mov	r3, r1
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	440b      	add	r3, r1
 80097fa:	0099      	lsls	r1, r3, #2
 80097fc:	440b      	add	r3, r1
 80097fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009802:	3301      	adds	r3, #1
 8009804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009808:	2b00      	cmp	r3, #0
 800980a:	bf0c      	ite	eq
 800980c:	2301      	moveq	r3, #1
 800980e:	2300      	movne	r3, #0
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <HAL_I2C_Init+0x196>
 8009816:	2301      	movs	r3, #1
 8009818:	e022      	b.n	8009860 <HAL_I2C_Init+0x1dc>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10e      	bne.n	8009840 <HAL_I2C_Init+0x1bc>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	1e58      	subs	r0, r3, #1
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6859      	ldr	r1, [r3, #4]
 800982a:	460b      	mov	r3, r1
 800982c:	005b      	lsls	r3, r3, #1
 800982e:	440b      	add	r3, r1
 8009830:	fbb0 f3f3 	udiv	r3, r0, r3
 8009834:	3301      	adds	r3, #1
 8009836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800983a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800983e:	e00f      	b.n	8009860 <HAL_I2C_Init+0x1dc>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	1e58      	subs	r0, r3, #1
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6859      	ldr	r1, [r3, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	440b      	add	r3, r1
 800984e:	0099      	lsls	r1, r3, #2
 8009850:	440b      	add	r3, r1
 8009852:	fbb0 f3f3 	udiv	r3, r0, r3
 8009856:	3301      	adds	r3, #1
 8009858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800985c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009860:	6879      	ldr	r1, [r7, #4]
 8009862:	6809      	ldr	r1, [r1, #0]
 8009864:	4313      	orrs	r3, r2
 8009866:	61cb      	str	r3, [r1, #28]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	69da      	ldr	r2, [r3, #28]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6a1b      	ldr	r3, [r3, #32]
 800987a:	431a      	orrs	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	430a      	orrs	r2, r1
 8009882:	601a      	str	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800988e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	6911      	ldr	r1, [r2, #16]
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	68d2      	ldr	r2, [r2, #12]
 800989a:	4311      	orrs	r1, r2
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	6812      	ldr	r2, [r2, #0]
 80098a0:	430b      	orrs	r3, r1
 80098a2:	6093      	str	r3, [r2, #8]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	695a      	ldr	r2, [r3, #20]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	699b      	ldr	r3, [r3, #24]
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	430a      	orrs	r2, r1
 80098be:	60da      	str	r2, [r3, #12]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f042 0201 	orr.w	r2, r2, #1
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2220      	movs	r2, #32
 80098da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098ec:	2300      	movs	r3, #0
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	000186a0 	.word	0x000186a0
 80098fc:	001e847f 	.word	0x001e847f
 8009900:	003d08ff 	.word	0x003d08ff
 8009904:	431bde83 	.word	0x431bde83
 8009908:	10624dd3 	.word	0x10624dd3

0800990c <I2C_Flush_DR>:
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800991e:	2b80      	cmp	r3, #128	@ 0x80
 8009920:	d103      	bne.n	800992a <I2C_Flush_DR+0x1e>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2200      	movs	r2, #0
 8009928:	611a      	str	r2, [r3, #16]
 800992a:	bf00      	nop
 800992c:	370c      	adds	r7, #12
 800992e:	46bd      	mov	sp, r7
 8009930:	bc80      	pop	{r7}
 8009932:	4770      	bx	lr

08009934 <HAL_I2C_Slave_Receive_IT>:
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	4613      	mov	r3, r2
 8009940:	80fb      	strh	r3, [r7, #6]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b20      	cmp	r3, #32
 800994c:	d158      	bne.n	8009a00 <HAL_I2C_Slave_Receive_IT+0xcc>
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <HAL_I2C_Slave_Receive_IT+0x26>
 8009954:	88fb      	ldrh	r3, [r7, #6]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d101      	bne.n	800995e <HAL_I2C_Slave_Receive_IT+0x2a>
 800995a:	2301      	movs	r3, #1
 800995c:	e051      	b.n	8009a02 <HAL_I2C_Slave_Receive_IT+0xce>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009964:	2b01      	cmp	r3, #1
 8009966:	d101      	bne.n	800996c <HAL_I2C_Slave_Receive_IT+0x38>
 8009968:	2302      	movs	r3, #2
 800996a:	e04a      	b.n	8009a02 <HAL_I2C_Slave_Receive_IT+0xce>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	2201      	movs	r2, #1
 8009970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	2b01      	cmp	r3, #1
 8009980:	d007      	beq.n	8009992 <HAL_I2C_Slave_Receive_IT+0x5e>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f042 0201 	orr.w	r2, r2, #1
 8009990:	601a      	str	r2, [r3, #0]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80099a0:	601a      	str	r2, [r3, #0]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2222      	movs	r2, #34	@ 0x22
 80099a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2220      	movs	r2, #32
 80099ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	641a      	str	r2, [r3, #64]	@ 0x40
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	625a      	str	r2, [r3, #36]	@ 0x24
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	88fa      	ldrh	r2, [r7, #6]
 80099c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	4a0e      	ldr	r2, [pc, #56]	@ (8009a0c <HAL_I2C_Slave_Receive_IT+0xd8>)
 80099d2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681a      	ldr	r2, [r3, #0]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	685a      	ldr	r2, [r3, #4]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80099fa:	605a      	str	r2, [r3, #4]
 80099fc:	2300      	movs	r3, #0
 80099fe:	e000      	b.n	8009a02 <HAL_I2C_Slave_Receive_IT+0xce>
 8009a00:	2302      	movs	r3, #2
 8009a02:	4618      	mov	r0, r3
 8009a04:	3714      	adds	r7, #20
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bc80      	pop	{r7}
 8009a0a:	4770      	bx	lr
 8009a0c:	ffff0000 	.word	0xffff0000

08009a10 <HAL_I2C_EV_IRQHandler>:
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b088      	sub	sp, #32
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	2300      	movs	r3, #0
 8009a1a:	61bb      	str	r3, [r7, #24]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	685b      	ldr	r3, [r3, #4]
 8009a22:	617b      	str	r3, [r7, #20]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a28:	613b      	str	r3, [r7, #16]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009a30:	73fb      	strb	r3, [r7, #15]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a38:	73bb      	strb	r3, [r7, #14]
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
 8009a3c:	2b10      	cmp	r3, #16
 8009a3e:	d003      	beq.n	8009a48 <HAL_I2C_EV_IRQHandler+0x38>
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	2b40      	cmp	r3, #64	@ 0x40
 8009a44:	f040 80c1 	bne.w	8009bca <HAL_I2C_EV_IRQHandler+0x1ba>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	61bb      	str	r3, [r7, #24]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	695b      	ldr	r3, [r3, #20]
 8009a56:	61fb      	str	r3, [r7, #28]
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	f003 0301 	and.w	r3, r3, #1
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10d      	bne.n	8009a7e <HAL_I2C_EV_IRQHandler+0x6e>
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8009a68:	d003      	beq.n	8009a72 <HAL_I2C_EV_IRQHandler+0x62>
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8009a70:	d101      	bne.n	8009a76 <HAL_I2C_EV_IRQHandler+0x66>
 8009a72:	2301      	movs	r3, #1
 8009a74:	e000      	b.n	8009a78 <HAL_I2C_EV_IRQHandler+0x68>
 8009a76:	2300      	movs	r3, #0
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	f000 8132 	beq.w	8009ce2 <HAL_I2C_EV_IRQHandler+0x2d2>
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	f003 0301 	and.w	r3, r3, #1
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00c      	beq.n	8009aa2 <HAL_I2C_EV_IRQHandler+0x92>
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	0a5b      	lsrs	r3, r3, #9
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d006      	beq.n	8009aa2 <HAL_I2C_EV_IRQHandler+0x92>
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f001 fc89 	bl	800b3ac <I2C_ConvertOtherXferOptions>
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fd87 	bl	800a5ae <I2C_Master_SB>
 8009aa0:	e092      	b.n	8009bc8 <HAL_I2C_EV_IRQHandler+0x1b8>
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	08db      	lsrs	r3, r3, #3
 8009aa6:	f003 0301 	and.w	r3, r3, #1
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d009      	beq.n	8009ac2 <HAL_I2C_EV_IRQHandler+0xb2>
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	0a5b      	lsrs	r3, r3, #9
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <HAL_I2C_EV_IRQHandler+0xb2>
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 fdfc 	bl	800a6b8 <I2C_Master_ADD10>
 8009ac0:	e082      	b.n	8009bc8 <HAL_I2C_EV_IRQHandler+0x1b8>
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	085b      	lsrs	r3, r3, #1
 8009ac6:	f003 0301 	and.w	r3, r3, #1
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d009      	beq.n	8009ae2 <HAL_I2C_EV_IRQHandler+0xd2>
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	0a5b      	lsrs	r3, r3, #9
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <HAL_I2C_EV_IRQHandler+0xd2>
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fe15 	bl	800a70a <I2C_Master_ADDR>
 8009ae0:	e072      	b.n	8009bc8 <HAL_I2C_EV_IRQHandler+0x1b8>
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	089b      	lsrs	r3, r3, #2
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d03b      	beq.n	8009b66 <HAL_I2C_EV_IRQHandler+0x156>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009afc:	f000 80f3 	beq.w	8009ce6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	09db      	lsrs	r3, r3, #7
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00f      	beq.n	8009b2c <HAL_I2C_EV_IRQHandler+0x11c>
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	0a9b      	lsrs	r3, r3, #10
 8009b10:	f003 0301 	and.w	r3, r3, #1
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d009      	beq.n	8009b2c <HAL_I2C_EV_IRQHandler+0x11c>
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	089b      	lsrs	r3, r3, #2
 8009b1c:	f003 0301 	and.w	r3, r3, #1
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d103      	bne.n	8009b2c <HAL_I2C_EV_IRQHandler+0x11c>
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f9df 	bl	8009ee8 <I2C_MasterTransmit_TXE>
 8009b2a:	e04d      	b.n	8009bc8 <HAL_I2C_EV_IRQHandler+0x1b8>
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	089b      	lsrs	r3, r3, #2
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 80d6 	beq.w	8009ce6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	0a5b      	lsrs	r3, r3, #9
 8009b3e:	f003 0301 	and.w	r3, r3, #1
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f000 80cf 	beq.w	8009ce6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
 8009b4a:	2b21      	cmp	r3, #33	@ 0x21
 8009b4c:	d103      	bne.n	8009b56 <HAL_I2C_EV_IRQHandler+0x146>
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fa66 	bl	800a020 <I2C_MasterTransmit_BTF>
 8009b54:	e0c7      	b.n	8009ce6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009b56:	7bfb      	ldrb	r3, [r7, #15]
 8009b58:	2b40      	cmp	r3, #64	@ 0x40
 8009b5a:	f040 80c4 	bne.w	8009ce6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 fad4 	bl	800a10c <I2C_MemoryTransmit_TXE_BTF>
 8009b64:	e0bf      	b.n	8009ce6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	685b      	ldr	r3, [r3, #4]
 8009b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b74:	f000 80b7 	beq.w	8009ce6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	099b      	lsrs	r3, r3, #6
 8009b7c:	f003 0301 	and.w	r3, r3, #1
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d00f      	beq.n	8009ba4 <HAL_I2C_EV_IRQHandler+0x194>
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	0a9b      	lsrs	r3, r3, #10
 8009b88:	f003 0301 	and.w	r3, r3, #1
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d009      	beq.n	8009ba4 <HAL_I2C_EV_IRQHandler+0x194>
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	089b      	lsrs	r3, r3, #2
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d103      	bne.n	8009ba4 <HAL_I2C_EV_IRQHandler+0x194>
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 fb4d 	bl	800a23c <I2C_MasterReceive_RXNE>
 8009ba2:	e011      	b.n	8009bc8 <HAL_I2C_EV_IRQHandler+0x1b8>
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	089b      	lsrs	r3, r3, #2
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 809a 	beq.w	8009ce6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	0a5b      	lsrs	r3, r3, #9
 8009bb6:	f003 0301 	and.w	r3, r3, #1
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f000 8093 	beq.w	8009ce6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fc03 	bl	800a3cc <I2C_MasterReceive_BTF>
 8009bc6:	e08e      	b.n	8009ce6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009bc8:	e08d      	b.n	8009ce6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d004      	beq.n	8009bdc <HAL_I2C_EV_IRQHandler+0x1cc>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	695b      	ldr	r3, [r3, #20]
 8009bd8:	61fb      	str	r3, [r7, #28]
 8009bda:	e007      	b.n	8009bec <HAL_I2C_EV_IRQHandler+0x1dc>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	61bb      	str	r3, [r7, #24]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	61fb      	str	r3, [r7, #28]
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	085b      	lsrs	r3, r3, #1
 8009bf0:	f003 0301 	and.w	r3, r3, #1
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d012      	beq.n	8009c1e <HAL_I2C_EV_IRQHandler+0x20e>
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	0a5b      	lsrs	r3, r3, #9
 8009bfc:	f003 0301 	and.w	r3, r3, #1
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00c      	beq.n	8009c1e <HAL_I2C_EV_IRQHandler+0x20e>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d003      	beq.n	8009c14 <HAL_I2C_EV_IRQHandler+0x204>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	699b      	ldr	r3, [r3, #24]
 8009c12:	61bb      	str	r3, [r7, #24]
 8009c14:	69b9      	ldr	r1, [r7, #24]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 ffce 	bl	800abb8 <I2C_Slave_ADDR>
 8009c1c:	e066      	b.n	8009cec <HAL_I2C_EV_IRQHandler+0x2dc>
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	091b      	lsrs	r3, r3, #4
 8009c22:	f003 0301 	and.w	r3, r3, #1
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d009      	beq.n	8009c3e <HAL_I2C_EV_IRQHandler+0x22e>
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	0a5b      	lsrs	r3, r3, #9
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d003      	beq.n	8009c3e <HAL_I2C_EV_IRQHandler+0x22e>
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f001 f808 	bl	800ac4c <I2C_Slave_STOPF>
 8009c3c:	e056      	b.n	8009cec <HAL_I2C_EV_IRQHandler+0x2dc>
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	2b21      	cmp	r3, #33	@ 0x21
 8009c42:	d002      	beq.n	8009c4a <HAL_I2C_EV_IRQHandler+0x23a>
 8009c44:	7bbb      	ldrb	r3, [r7, #14]
 8009c46:	2b29      	cmp	r3, #41	@ 0x29
 8009c48:	d125      	bne.n	8009c96 <HAL_I2C_EV_IRQHandler+0x286>
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	09db      	lsrs	r3, r3, #7
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00f      	beq.n	8009c76 <HAL_I2C_EV_IRQHandler+0x266>
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	0a9b      	lsrs	r3, r3, #10
 8009c5a:	f003 0301 	and.w	r3, r3, #1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d009      	beq.n	8009c76 <HAL_I2C_EV_IRQHandler+0x266>
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	089b      	lsrs	r3, r3, #2
 8009c66:	f003 0301 	and.w	r3, r3, #1
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d103      	bne.n	8009c76 <HAL_I2C_EV_IRQHandler+0x266>
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 fee6 	bl	800aa40 <I2C_SlaveTransmit_TXE>
 8009c74:	e039      	b.n	8009cea <HAL_I2C_EV_IRQHandler+0x2da>
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	089b      	lsrs	r3, r3, #2
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d033      	beq.n	8009cea <HAL_I2C_EV_IRQHandler+0x2da>
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	0a5b      	lsrs	r3, r3, #9
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d02d      	beq.n	8009cea <HAL_I2C_EV_IRQHandler+0x2da>
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 ff13 	bl	800aaba <I2C_SlaveTransmit_BTF>
 8009c94:	e029      	b.n	8009cea <HAL_I2C_EV_IRQHandler+0x2da>
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	099b      	lsrs	r3, r3, #6
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d00f      	beq.n	8009cc2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	0a9b      	lsrs	r3, r3, #10
 8009ca6:	f003 0301 	and.w	r3, r3, #1
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d009      	beq.n	8009cc2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8009cae:	69fb      	ldr	r3, [r7, #28]
 8009cb0:	089b      	lsrs	r3, r3, #2
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d103      	bne.n	8009cc2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 ff1d 	bl	800aafa <I2C_SlaveReceive_RXNE>
 8009cc0:	e014      	b.n	8009cec <HAL_I2C_EV_IRQHandler+0x2dc>
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	089b      	lsrs	r3, r3, #2
 8009cc6:	f003 0301 	and.w	r3, r3, #1
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d00e      	beq.n	8009cec <HAL_I2C_EV_IRQHandler+0x2dc>
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	0a5b      	lsrs	r3, r3, #9
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d008      	beq.n	8009cec <HAL_I2C_EV_IRQHandler+0x2dc>
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 ff4b 	bl	800ab76 <I2C_SlaveReceive_BTF>
 8009ce0:	e004      	b.n	8009cec <HAL_I2C_EV_IRQHandler+0x2dc>
 8009ce2:	bf00      	nop
 8009ce4:	e002      	b.n	8009cec <HAL_I2C_EV_IRQHandler+0x2dc>
 8009ce6:	bf00      	nop
 8009ce8:	e000      	b.n	8009cec <HAL_I2C_EV_IRQHandler+0x2dc>
 8009cea:	bf00      	nop
 8009cec:	3720      	adds	r7, #32
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <HAL_I2C_ER_IRQHandler>:
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b08a      	sub	sp, #40	@ 0x28
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	695b      	ldr	r3, [r3, #20]
 8009d00:	623b      	str	r3, [r7, #32]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	61fb      	str	r3, [r7, #28]
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009d14:	76fb      	strb	r3, [r7, #27]
 8009d16:	6a3b      	ldr	r3, [r7, #32]
 8009d18:	0a1b      	lsrs	r3, r3, #8
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d016      	beq.n	8009d50 <HAL_I2C_ER_IRQHandler+0x5e>
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	0a1b      	lsrs	r3, r3, #8
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d010      	beq.n	8009d50 <HAL_I2C_ER_IRQHandler+0x5e>
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d30:	f043 0301 	orr.w	r3, r3, #1
 8009d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009d3e:	615a      	str	r2, [r3, #20]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	681a      	ldr	r2, [r3, #0]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	6a3b      	ldr	r3, [r7, #32]
 8009d52:	0a5b      	lsrs	r3, r3, #9
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00e      	beq.n	8009d7a <HAL_I2C_ER_IRQHandler+0x88>
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	0a1b      	lsrs	r3, r3, #8
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d008      	beq.n	8009d7a <HAL_I2C_ER_IRQHandler+0x88>
 8009d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6a:	f043 0302 	orr.w	r3, r3, #2
 8009d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8009d78:	615a      	str	r2, [r3, #20]
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	0a9b      	lsrs	r3, r3, #10
 8009d7e:	f003 0301 	and.w	r3, r3, #1
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d03f      	beq.n	8009e06 <HAL_I2C_ER_IRQHandler+0x114>
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	0a1b      	lsrs	r3, r3, #8
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d039      	beq.n	8009e06 <HAL_I2C_ER_IRQHandler+0x114>
 8009d92:	7efb      	ldrb	r3, [r7, #27]
 8009d94:	76bb      	strb	r3, [r7, #26]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	617b      	str	r3, [r7, #20]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009da4:	74fb      	strb	r3, [r7, #19]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009daa:	60fb      	str	r3, [r7, #12]
 8009dac:	7ebb      	ldrb	r3, [r7, #26]
 8009dae:	2b20      	cmp	r3, #32
 8009db0:	d112      	bne.n	8009dd8 <HAL_I2C_ER_IRQHandler+0xe6>
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d10f      	bne.n	8009dd8 <HAL_I2C_ER_IRQHandler+0xe6>
 8009db8:	7cfb      	ldrb	r3, [r7, #19]
 8009dba:	2b21      	cmp	r3, #33	@ 0x21
 8009dbc:	d008      	beq.n	8009dd0 <HAL_I2C_ER_IRQHandler+0xde>
 8009dbe:	7cfb      	ldrb	r3, [r7, #19]
 8009dc0:	2b29      	cmp	r3, #41	@ 0x29
 8009dc2:	d005      	beq.n	8009dd0 <HAL_I2C_ER_IRQHandler+0xde>
 8009dc4:	7cfb      	ldrb	r3, [r7, #19]
 8009dc6:	2b28      	cmp	r3, #40	@ 0x28
 8009dc8:	d106      	bne.n	8009dd8 <HAL_I2C_ER_IRQHandler+0xe6>
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2b21      	cmp	r3, #33	@ 0x21
 8009dce:	d103      	bne.n	8009dd8 <HAL_I2C_ER_IRQHandler+0xe6>
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f001 f86b 	bl	800aeac <I2C_Slave_AF>
 8009dd6:	e016      	b.n	8009e06 <HAL_I2C_ER_IRQHandler+0x114>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009de0:	615a      	str	r2, [r3, #20]
 8009de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de4:	f043 0304 	orr.w	r3, r3, #4
 8009de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dea:	7efb      	ldrb	r3, [r7, #27]
 8009dec:	2b10      	cmp	r3, #16
 8009dee:	d002      	beq.n	8009df6 <HAL_I2C_ER_IRQHandler+0x104>
 8009df0:	7efb      	ldrb	r3, [r7, #27]
 8009df2:	2b40      	cmp	r3, #64	@ 0x40
 8009df4:	d107      	bne.n	8009e06 <HAL_I2C_ER_IRQHandler+0x114>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	0adb      	lsrs	r3, r3, #11
 8009e0a:	f003 0301 	and.w	r3, r3, #1
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00e      	beq.n	8009e30 <HAL_I2C_ER_IRQHandler+0x13e>
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	0a1b      	lsrs	r3, r3, #8
 8009e16:	f003 0301 	and.w	r3, r3, #1
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d008      	beq.n	8009e30 <HAL_I2C_ER_IRQHandler+0x13e>
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e20:	f043 0308 	orr.w	r3, r3, #8
 8009e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8009e2e:	615a      	str	r2, [r3, #20]
 8009e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d008      	beq.n	8009e48 <HAL_I2C_ER_IRQHandler+0x156>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3c:	431a      	orrs	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	641a      	str	r2, [r3, #64]	@ 0x40
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f001 f8a6 	bl	800af94 <I2C_ITError>
 8009e48:	bf00      	nop
 8009e4a:	3728      	adds	r7, #40	@ 0x28
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <HAL_I2C_MasterTxCpltCallback>:
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bc80      	pop	{r7}
 8009e60:	4770      	bx	lr

08009e62 <HAL_I2C_MasterRxCpltCallback>:
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	bf00      	nop
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bc80      	pop	{r7}
 8009e72:	4770      	bx	lr

08009e74 <HAL_I2C_SlaveTxCpltCallback>:
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bc80      	pop	{r7}
 8009e84:	4770      	bx	lr

08009e86 <HAL_I2C_AddrCallback>:
 8009e86:	b480      	push	{r7}
 8009e88:	b083      	sub	sp, #12
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	460b      	mov	r3, r1
 8009e90:	70fb      	strb	r3, [r7, #3]
 8009e92:	4613      	mov	r3, r2
 8009e94:	803b      	strh	r3, [r7, #0]
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bc80      	pop	{r7}
 8009e9e:	4770      	bx	lr

08009ea0 <HAL_I2C_ListenCpltCallback>:
 8009ea0:	b480      	push	{r7}
 8009ea2:	b083      	sub	sp, #12
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	bf00      	nop
 8009eaa:	370c      	adds	r7, #12
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bc80      	pop	{r7}
 8009eb0:	4770      	bx	lr

08009eb2 <HAL_I2C_MemTxCpltCallback>:
 8009eb2:	b480      	push	{r7}
 8009eb4:	b083      	sub	sp, #12
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]
 8009eba:	bf00      	nop
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bc80      	pop	{r7}
 8009ec2:	4770      	bx	lr

08009ec4 <HAL_I2C_MemRxCpltCallback>:
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bc80      	pop	{r7}
 8009ed4:	4770      	bx	lr

08009ed6 <HAL_I2C_AbortCpltCallback>:
 8009ed6:	b480      	push	{r7}
 8009ed8:	b083      	sub	sp, #12
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	bf00      	nop
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bc80      	pop	{r7}
 8009ee6:	4770      	bx	lr

08009ee8 <I2C_MasterTransmit_TXE>:
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b084      	sub	sp, #16
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ef6:	73fb      	strb	r3, [r7, #15]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009efe:	73bb      	strb	r3, [r7, #14]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f04:	60bb      	str	r3, [r7, #8]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d150      	bne.n	8009fb0 <I2C_MasterTransmit_TXE+0xc8>
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
 8009f10:	2b21      	cmp	r3, #33	@ 0x21
 8009f12:	d14d      	bne.n	8009fb0 <I2C_MasterTransmit_TXE+0xc8>
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2b08      	cmp	r3, #8
 8009f18:	d01d      	beq.n	8009f56 <I2C_MasterTransmit_TXE+0x6e>
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	2b20      	cmp	r3, #32
 8009f1e:	d01a      	beq.n	8009f56 <I2C_MasterTransmit_TXE+0x6e>
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8009f26:	d016      	beq.n	8009f56 <I2C_MasterTransmit_TXE+0x6e>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009f36:	605a      	str	r2, [r3, #4]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2211      	movs	r2, #17
 8009f3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2220      	movs	r2, #32
 8009f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f7ff ff7e 	bl	8009e50 <HAL_I2C_MasterTxCpltCallback>
 8009f54:	e060      	b.n	800a018 <I2C_MasterTransmit_TXE+0x130>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009f64:	605a      	str	r2, [r3, #4]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	681a      	ldr	r2, [r3, #0]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f74:	601a      	str	r2, [r3, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2220      	movs	r2, #32
 8009f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	2b40      	cmp	r3, #64	@ 0x40
 8009f8e:	d107      	bne.n	8009fa0 <I2C_MasterTransmit_TXE+0xb8>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f7ff ff8a 	bl	8009eb2 <HAL_I2C_MemTxCpltCallback>
 8009f9e:	e03b      	b.n	800a018 <I2C_MasterTransmit_TXE+0x130>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7ff ff51 	bl	8009e50 <HAL_I2C_MasterTxCpltCallback>
 8009fae:	e033      	b.n	800a018 <I2C_MasterTransmit_TXE+0x130>
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
 8009fb2:	2b21      	cmp	r3, #33	@ 0x21
 8009fb4:	d005      	beq.n	8009fc2 <I2C_MasterTransmit_TXE+0xda>
 8009fb6:	7bbb      	ldrb	r3, [r7, #14]
 8009fb8:	2b40      	cmp	r3, #64	@ 0x40
 8009fba:	d12d      	bne.n	800a018 <I2C_MasterTransmit_TXE+0x130>
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	2b22      	cmp	r3, #34	@ 0x22
 8009fc0:	d12a      	bne.n	800a018 <I2C_MasterTransmit_TXE+0x130>
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d108      	bne.n	8009fde <I2C_MasterTransmit_TXE+0xf6>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	685a      	ldr	r2, [r3, #4]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009fda:	605a      	str	r2, [r3, #4]
 8009fdc:	e01c      	b.n	800a018 <I2C_MasterTransmit_TXE+0x130>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b40      	cmp	r3, #64	@ 0x40
 8009fe8:	d103      	bne.n	8009ff2 <I2C_MasterTransmit_TXE+0x10a>
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f88e 	bl	800a10c <I2C_MemoryTransmit_TXE_BTF>
 8009ff0:	e012      	b.n	800a018 <I2C_MasterTransmit_TXE+0x130>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff6:	781a      	ldrb	r2, [r3, #0]
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	611a      	str	r2, [r3, #16]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a002:	1c5a      	adds	r2, r3, #1
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	625a      	str	r2, [r3, #36]	@ 0x24
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	3b01      	subs	r3, #1
 800a010:	b29a      	uxth	r2, r3
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a016:	e7ff      	b.n	800a018 <I2C_MasterTransmit_TXE+0x130>
 800a018:	bf00      	nop
 800a01a:	3710      	adds	r7, #16
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <I2C_MasterTransmit_BTF>:
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a02c:	60fb      	str	r3, [r7, #12]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a034:	b2db      	uxtb	r3, r3
 800a036:	2b21      	cmp	r3, #33	@ 0x21
 800a038:	d164      	bne.n	800a104 <I2C_MasterTransmit_BTF+0xe4>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a03e:	b29b      	uxth	r3, r3
 800a040:	2b00      	cmp	r3, #0
 800a042:	d012      	beq.n	800a06a <I2C_MasterTransmit_BTF+0x4a>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a048:	781a      	ldrb	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	611a      	str	r2, [r3, #16]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a054:	1c5a      	adds	r2, r3, #1
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	625a      	str	r2, [r3, #36]	@ 0x24
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a05e:	b29b      	uxth	r3, r3
 800a060:	3b01      	subs	r3, #1
 800a062:	b29a      	uxth	r2, r3
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a068:	e04c      	b.n	800a104 <I2C_MasterTransmit_BTF+0xe4>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b08      	cmp	r3, #8
 800a06e:	d01d      	beq.n	800a0ac <I2C_MasterTransmit_BTF+0x8c>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2b20      	cmp	r3, #32
 800a074:	d01a      	beq.n	800a0ac <I2C_MasterTransmit_BTF+0x8c>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a07c:	d016      	beq.n	800a0ac <I2C_MasterTransmit_BTF+0x8c>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a08c:	605a      	str	r2, [r3, #4]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2211      	movs	r2, #17
 800a092:	631a      	str	r2, [r3, #48]	@ 0x30
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2220      	movs	r2, #32
 800a0a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f7ff fed3 	bl	8009e50 <HAL_I2C_MasterTxCpltCallback>
 800a0aa:	e02b      	b.n	800a104 <I2C_MasterTransmit_BTF+0xe4>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	685a      	ldr	r2, [r3, #4]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a0ba:	605a      	str	r2, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a0ca:	601a      	str	r2, [r3, #0]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	631a      	str	r2, [r3, #48]	@ 0x30
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	2b40      	cmp	r3, #64	@ 0x40
 800a0e4:	d107      	bne.n	800a0f6 <I2C_MasterTransmit_BTF+0xd6>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7ff fedf 	bl	8009eb2 <HAL_I2C_MemTxCpltCallback>
 800a0f4:	e006      	b.n	800a104 <I2C_MasterTransmit_BTF+0xe4>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f7ff fea6 	bl	8009e50 <HAL_I2C_MasterTxCpltCallback>
 800a104:	bf00      	nop
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <I2C_MemoryTransmit_TXE_BTF>:
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a11a:	73fb      	strb	r3, [r7, #15]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a120:	2b00      	cmp	r3, #0
 800a122:	d11d      	bne.n	800a160 <I2C_MemoryTransmit_TXE_BTF+0x54>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d10b      	bne.n	800a144 <I2C_MemoryTransmit_TXE_BTF+0x38>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a130:	b2da      	uxtb	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	611a      	str	r2, [r3, #16]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a13c:	1c9a      	adds	r2, r3, #2
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	651a      	str	r2, [r3, #80]	@ 0x50
 800a142:	e077      	b.n	800a234 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a148:	b29b      	uxth	r3, r3
 800a14a:	121b      	asrs	r3, r3, #8
 800a14c:	b2da      	uxtb	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	611a      	str	r2, [r3, #16]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a158:	1c5a      	adds	r2, r3, #1
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	651a      	str	r2, [r3, #80]	@ 0x50
 800a15e:	e069      	b.n	800a234 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a164:	2b01      	cmp	r3, #1
 800a166:	d10b      	bne.n	800a180 <I2C_MemoryTransmit_TXE_BTF+0x74>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	611a      	str	r2, [r3, #16]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a178:	1c5a      	adds	r2, r3, #1
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	651a      	str	r2, [r3, #80]	@ 0x50
 800a17e:	e059      	b.n	800a234 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a184:	2b02      	cmp	r3, #2
 800a186:	d152      	bne.n	800a22e <I2C_MemoryTransmit_TXE_BTF+0x122>
 800a188:	7bfb      	ldrb	r3, [r7, #15]
 800a18a:	2b22      	cmp	r3, #34	@ 0x22
 800a18c:	d10d      	bne.n	800a1aa <I2C_MemoryTransmit_TXE_BTF+0x9e>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1a2:	1c5a      	adds	r2, r3, #1
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	651a      	str	r2, [r3, #80]	@ 0x50
 800a1a8:	e044      	b.n	800a234 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d015      	beq.n	800a1e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
 800a1b6:	2b21      	cmp	r3, #33	@ 0x21
 800a1b8:	d112      	bne.n	800a1e0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1be:	781a      	ldrb	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	611a      	str	r2, [r3, #16]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ca:	1c5a      	adds	r2, r3, #1
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	625a      	str	r2, [r3, #36]	@ 0x24
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a1de:	e029      	b.n	800a234 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d124      	bne.n	800a234 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
 800a1ec:	2b21      	cmp	r3, #33	@ 0x21
 800a1ee:	d121      	bne.n	800a234 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a1fe:	605a      	str	r2, [r3, #4]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a20e:	601a      	str	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	631a      	str	r2, [r3, #48]	@ 0x30
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2220      	movs	r2, #32
 800a21a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7ff fe43 	bl	8009eb2 <HAL_I2C_MemTxCpltCallback>
 800a22c:	e002      	b.n	800a234 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f7ff fb6c 	bl	800990c <I2C_Flush_DR>
 800a234:	bf00      	nop
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <I2C_MasterReceive_RXNE>:
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	2b22      	cmp	r3, #34	@ 0x22
 800a24e:	f040 80b9 	bne.w	800a3c4 <I2C_MasterReceive_RXNE+0x188>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a256:	60fb      	str	r3, [r7, #12]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	60bb      	str	r3, [r7, #8]
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b03      	cmp	r3, #3
 800a264:	d921      	bls.n	800a2aa <I2C_MasterReceive_RXNE+0x6e>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	691a      	ldr	r2, [r3, #16]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a270:	b2d2      	uxtb	r2, r2
 800a272:	701a      	strb	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a278:	1c5a      	adds	r2, r3, #1
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a282:	b29b      	uxth	r3, r3
 800a284:	3b01      	subs	r3, #1
 800a286:	b29a      	uxth	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a290:	b29b      	uxth	r3, r3
 800a292:	2b03      	cmp	r3, #3
 800a294:	f040 8096 	bne.w	800a3c4 <I2C_MasterReceive_RXNE+0x188>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685a      	ldr	r2, [r3, #4]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2a6:	605a      	str	r2, [r3, #4]
 800a2a8:	e08c      	b.n	800a3c4 <I2C_MasterReceive_RXNE+0x188>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d07f      	beq.n	800a3b2 <I2C_MasterReceive_RXNE+0x176>
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d002      	beq.n	800a2be <I2C_MasterReceive_RXNE+0x82>
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d179      	bne.n	800a3b2 <I2C_MasterReceive_RXNE+0x176>
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f001 f842 	bl	800b348 <I2C_WaitOnSTOPRequestThroughIT>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d14c      	bne.n	800a364 <I2C_MasterReceive_RXNE+0x128>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2d8:	601a      	str	r2, [r3, #0]
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a2e8:	605a      	str	r2, [r3, #4]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	691a      	ldr	r2, [r3, #16]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2f4:	b2d2      	uxtb	r2, r2
 800a2f6:	701a      	strb	r2, [r3, #0]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2fc:	1c5a      	adds	r2, r3, #1
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	625a      	str	r2, [r3, #36]	@ 0x24
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a306:	b29b      	uxth	r3, r3
 800a308:	3b01      	subs	r3, #1
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2220      	movs	r2, #32
 800a314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	2b40      	cmp	r3, #64	@ 0x40
 800a322:	d10a      	bne.n	800a33a <I2C_MasterReceive_RXNE+0xfe>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	631a      	str	r2, [r3, #48]	@ 0x30
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f7ff fdc6 	bl	8009ec4 <HAL_I2C_MemRxCpltCallback>
 800a338:	e044      	b.n	800a3c4 <I2C_MasterReceive_RXNE+0x188>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2b08      	cmp	r3, #8
 800a346:	d002      	beq.n	800a34e <I2C_MasterReceive_RXNE+0x112>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2b20      	cmp	r3, #32
 800a34c:	d103      	bne.n	800a356 <I2C_MasterReceive_RXNE+0x11a>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	631a      	str	r2, [r3, #48]	@ 0x30
 800a354:	e002      	b.n	800a35c <I2C_MasterReceive_RXNE+0x120>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2212      	movs	r2, #18
 800a35a:	631a      	str	r2, [r3, #48]	@ 0x30
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7ff fd80 	bl	8009e62 <HAL_I2C_MasterRxCpltCallback>
 800a362:	e02f      	b.n	800a3c4 <I2C_MasterReceive_RXNE+0x188>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a372:	605a      	str	r2, [r3, #4]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	691a      	ldr	r2, [r3, #16]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a37e:	b2d2      	uxtb	r2, r2
 800a380:	701a      	strb	r2, [r3, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a386:	1c5a      	adds	r2, r3, #1
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	625a      	str	r2, [r3, #36]	@ 0x24
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a390:	b29b      	uxth	r3, r3
 800a392:	3b01      	subs	r3, #1
 800a394:	b29a      	uxth	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2220      	movs	r2, #32
 800a39e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f7fa ff52 	bl	8005254 <HAL_I2C_ErrorCallback>
 800a3b0:	e008      	b.n	800a3c4 <I2C_MasterReceive_RXNE+0x188>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3c0:	605a      	str	r2, [r3, #4]
 800a3c2:	e7ff      	b.n	800a3c4 <I2C_MasterReceive_RXNE+0x188>
 800a3c4:	bf00      	nop
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <I2C_MasterReceive_BTF>:
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d8:	60fb      	str	r3, [r7, #12]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	2b04      	cmp	r3, #4
 800a3e2:	d11b      	bne.n	800a41c <I2C_MasterReceive_BTF+0x50>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	685a      	ldr	r2, [r3, #4]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3f2:	605a      	str	r2, [r3, #4]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	691a      	ldr	r2, [r3, #16]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fe:	b2d2      	uxtb	r2, r2
 800a400:	701a      	strb	r2, [r3, #0]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a406:	1c5a      	adds	r2, r3, #1
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	625a      	str	r2, [r3, #36]	@ 0x24
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a410:	b29b      	uxth	r3, r3
 800a412:	3b01      	subs	r3, #1
 800a414:	b29a      	uxth	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a41a:	e0c4      	b.n	800a5a6 <I2C_MasterReceive_BTF+0x1da>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a420:	b29b      	uxth	r3, r3
 800a422:	2b03      	cmp	r3, #3
 800a424:	d129      	bne.n	800a47a <I2C_MasterReceive_BTF+0xae>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a434:	605a      	str	r2, [r3, #4]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2b04      	cmp	r3, #4
 800a43a:	d00a      	beq.n	800a452 <I2C_MasterReceive_BTF+0x86>
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d007      	beq.n	800a452 <I2C_MasterReceive_BTF+0x86>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	691a      	ldr	r2, [r3, #16]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45c:	b2d2      	uxtb	r2, r2
 800a45e:	701a      	strb	r2, [r3, #0]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a464:	1c5a      	adds	r2, r3, #1
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	625a      	str	r2, [r3, #36]	@ 0x24
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a46e:	b29b      	uxth	r3, r3
 800a470:	3b01      	subs	r3, #1
 800a472:	b29a      	uxth	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a478:	e095      	b.n	800a5a6 <I2C_MasterReceive_BTF+0x1da>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a47e:	b29b      	uxth	r3, r3
 800a480:	2b02      	cmp	r3, #2
 800a482:	d17d      	bne.n	800a580 <I2C_MasterReceive_BTF+0x1b4>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2b01      	cmp	r3, #1
 800a488:	d002      	beq.n	800a490 <I2C_MasterReceive_BTF+0xc4>
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2b10      	cmp	r3, #16
 800a48e:	d108      	bne.n	800a4a2 <I2C_MasterReceive_BTF+0xd6>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	e016      	b.n	800a4d0 <I2C_MasterReceive_BTF+0x104>
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2b04      	cmp	r3, #4
 800a4a6:	d002      	beq.n	800a4ae <I2C_MasterReceive_BTF+0xe2>
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d108      	bne.n	800a4c0 <I2C_MasterReceive_BTF+0xf4>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	e007      	b.n	800a4d0 <I2C_MasterReceive_BTF+0x104>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4ce:	601a      	str	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	691a      	ldr	r2, [r3, #16]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4da:	b2d2      	uxtb	r2, r2
 800a4dc:	701a      	strb	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	625a      	str	r2, [r3, #36]	@ 0x24
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	691a      	ldr	r2, [r3, #16]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a500:	b2d2      	uxtb	r2, r2
 800a502:	701a      	strb	r2, [r3, #0]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a512:	b29b      	uxth	r3, r3
 800a514:	3b01      	subs	r3, #1
 800a516:	b29a      	uxth	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	685a      	ldr	r2, [r3, #4]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a52a:	605a      	str	r2, [r3, #4]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2220      	movs	r2, #32
 800a530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	2b40      	cmp	r3, #64	@ 0x40
 800a53e:	d10a      	bne.n	800a556 <I2C_MasterReceive_BTF+0x18a>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	631a      	str	r2, [r3, #48]	@ 0x30
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7ff fcb8 	bl	8009ec4 <HAL_I2C_MemRxCpltCallback>
 800a554:	e027      	b.n	800a5a6 <I2C_MasterReceive_BTF+0x1da>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2b08      	cmp	r3, #8
 800a562:	d002      	beq.n	800a56a <I2C_MasterReceive_BTF+0x19e>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2b20      	cmp	r3, #32
 800a568:	d103      	bne.n	800a572 <I2C_MasterReceive_BTF+0x1a6>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	631a      	str	r2, [r3, #48]	@ 0x30
 800a570:	e002      	b.n	800a578 <I2C_MasterReceive_BTF+0x1ac>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2212      	movs	r2, #18
 800a576:	631a      	str	r2, [r3, #48]	@ 0x30
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff fc72 	bl	8009e62 <HAL_I2C_MasterRxCpltCallback>
 800a57e:	e012      	b.n	800a5a6 <I2C_MasterReceive_BTF+0x1da>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	691a      	ldr	r2, [r3, #16]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a58a:	b2d2      	uxtb	r2, r2
 800a58c:	701a      	strb	r2, [r3, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	625a      	str	r2, [r3, #36]	@ 0x24
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a59c:	b29b      	uxth	r3, r3
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a5a6:	bf00      	nop
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <I2C_Master_SB>:
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b40      	cmp	r3, #64	@ 0x40
 800a5c0:	d117      	bne.n	800a5f2 <I2C_Master_SB+0x44>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d109      	bne.n	800a5de <I2C_Master_SB+0x30>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a5da:	611a      	str	r2, [r3, #16]
 800a5dc:	e067      	b.n	800a6ae <I2C_Master_SB+0x100>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	f043 0301 	orr.w	r3, r3, #1
 800a5e8:	b2da      	uxtb	r2, r3
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	611a      	str	r2, [r3, #16]
 800a5f0:	e05d      	b.n	800a6ae <I2C_Master_SB+0x100>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5fa:	d133      	bne.n	800a664 <I2C_Master_SB+0xb6>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a602:	b2db      	uxtb	r3, r3
 800a604:	2b21      	cmp	r3, #33	@ 0x21
 800a606:	d109      	bne.n	800a61c <I2C_Master_SB+0x6e>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	461a      	mov	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a618:	611a      	str	r2, [r3, #16]
 800a61a:	e008      	b.n	800a62e <I2C_Master_SB+0x80>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a620:	b2db      	uxtb	r3, r3
 800a622:	f043 0301 	orr.w	r3, r3, #1
 800a626:	b2da      	uxtb	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	611a      	str	r2, [r3, #16]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a632:	2b00      	cmp	r3, #0
 800a634:	d004      	beq.n	800a640 <I2C_Master_SB+0x92>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a63a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d108      	bne.n	800a652 <I2C_Master_SB+0xa4>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a644:	2b00      	cmp	r3, #0
 800a646:	d032      	beq.n	800a6ae <I2C_Master_SB+0x100>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a64c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d02d      	beq.n	800a6ae <I2C_Master_SB+0x100>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	685a      	ldr	r2, [r3, #4]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a660:	605a      	str	r2, [r3, #4]
 800a662:	e024      	b.n	800a6ae <I2C_Master_SB+0x100>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10e      	bne.n	800a68a <I2C_Master_SB+0xdc>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a670:	b29b      	uxth	r3, r3
 800a672:	11db      	asrs	r3, r3, #7
 800a674:	b2db      	uxtb	r3, r3
 800a676:	f003 0306 	and.w	r3, r3, #6
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	f063 030f 	orn	r3, r3, #15
 800a680:	b2da      	uxtb	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	611a      	str	r2, [r3, #16]
 800a688:	e011      	b.n	800a6ae <I2C_Master_SB+0x100>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d10d      	bne.n	800a6ae <I2C_Master_SB+0x100>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a696:	b29b      	uxth	r3, r3
 800a698:	11db      	asrs	r3, r3, #7
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	f003 0306 	and.w	r3, r3, #6
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	f063 030e 	orn	r3, r3, #14
 800a6a6:	b2da      	uxtb	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	611a      	str	r2, [r3, #16]
 800a6ae:	bf00      	nop
 800a6b0:	370c      	adds	r7, #12
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bc80      	pop	{r7}
 800a6b6:	4770      	bx	lr

0800a6b8 <I2C_Master_ADD10>:
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6c4:	b2da      	uxtb	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	611a      	str	r2, [r3, #16]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d004      	beq.n	800a6de <I2C_Master_ADD10+0x26>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a6d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d108      	bne.n	800a6f0 <I2C_Master_ADD10+0x38>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d00c      	beq.n	800a700 <I2C_Master_ADD10+0x48>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d007      	beq.n	800a700 <I2C_Master_ADD10+0x48>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	685a      	ldr	r2, [r3, #4]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6fe:	605a      	str	r2, [r3, #4]
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	bc80      	pop	{r7}
 800a708:	4770      	bx	lr

0800a70a <I2C_Master_ADDR>:
 800a70a:	b480      	push	{r7}
 800a70c:	b091      	sub	sp, #68	@ 0x44
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a718:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a720:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a726:	637b      	str	r3, [r7, #52]	@ 0x34
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	2b22      	cmp	r3, #34	@ 0x22
 800a732:	f040 8174 	bne.w	800aa1e <I2C_Master_ADDR+0x314>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10f      	bne.n	800a75e <I2C_Master_ADDR+0x54>
 800a73e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a742:	2b40      	cmp	r3, #64	@ 0x40
 800a744:	d10b      	bne.n	800a75e <I2C_Master_ADDR+0x54>
 800a746:	2300      	movs	r3, #0
 800a748:	633b      	str	r3, [r7, #48]	@ 0x30
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	695b      	ldr	r3, [r3, #20]
 800a750:	633b      	str	r3, [r7, #48]	@ 0x30
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	699b      	ldr	r3, [r3, #24]
 800a758:	633b      	str	r3, [r7, #48]	@ 0x30
 800a75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75c:	e16b      	b.n	800aa36 <I2C_Master_ADDR+0x32c>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a762:	2b00      	cmp	r3, #0
 800a764:	d11d      	bne.n	800a7a2 <I2C_Master_ADDR+0x98>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a76e:	d118      	bne.n	800a7a2 <I2C_Master_ADDR+0x98>
 800a770:	2300      	movs	r3, #0
 800a772:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a794:	601a      	str	r2, [r3, #0]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	651a      	str	r2, [r3, #80]	@ 0x50
 800a7a0:	e149      	b.n	800aa36 <I2C_Master_ADDR+0x32c>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d113      	bne.n	800a7d4 <I2C_Master_ADDR+0xca>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7d0:	601a      	str	r2, [r3, #0]
 800a7d2:	e120      	b.n	800aa16 <I2C_Master_ADDR+0x30c>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	f040 808a 	bne.w	800a8f4 <I2C_Master_ADDR+0x1ea>
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a7e6:	d137      	bne.n	800a858 <I2C_Master_ADDR+0x14e>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7f6:	601a      	str	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a802:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a806:	d113      	bne.n	800a830 <I2C_Master_ADDR+0x126>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	2300      	movs	r3, #0
 800a81a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	627b      	str	r3, [r7, #36]	@ 0x24
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82e:	e0f2      	b.n	800aa16 <I2C_Master_ADDR+0x30c>
 800a830:	2300      	movs	r3, #0
 800a832:	623b      	str	r3, [r7, #32]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	623b      	str	r3, [r7, #32]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	623b      	str	r3, [r7, #32]
 800a844:	6a3b      	ldr	r3, [r7, #32]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a854:	601a      	str	r2, [r3, #0]
 800a856:	e0de      	b.n	800aa16 <I2C_Master_ADDR+0x30c>
 800a858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a85a:	2b08      	cmp	r3, #8
 800a85c:	d02e      	beq.n	800a8bc <I2C_Master_ADDR+0x1b2>
 800a85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a860:	2b20      	cmp	r3, #32
 800a862:	d02b      	beq.n	800a8bc <I2C_Master_ADDR+0x1b2>
 800a864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a866:	2b12      	cmp	r3, #18
 800a868:	d102      	bne.n	800a870 <I2C_Master_ADDR+0x166>
 800a86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d125      	bne.n	800a8bc <I2C_Master_ADDR+0x1b2>
 800a870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a872:	2b04      	cmp	r3, #4
 800a874:	d00e      	beq.n	800a894 <I2C_Master_ADDR+0x18a>
 800a876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a878:	2b02      	cmp	r3, #2
 800a87a:	d00b      	beq.n	800a894 <I2C_Master_ADDR+0x18a>
 800a87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87e:	2b10      	cmp	r3, #16
 800a880:	d008      	beq.n	800a894 <I2C_Master_ADDR+0x18a>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	681a      	ldr	r2, [r3, #0]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a890:	601a      	str	r2, [r3, #0]
 800a892:	e007      	b.n	800a8a4 <I2C_Master_ADDR+0x19a>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	61fb      	str	r3, [r7, #28]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	695b      	ldr	r3, [r3, #20]
 800a8ae:	61fb      	str	r3, [r7, #28]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	699b      	ldr	r3, [r3, #24]
 800a8b6:	61fb      	str	r3, [r7, #28]
 800a8b8:	69fb      	ldr	r3, [r7, #28]
 800a8ba:	e0ac      	b.n	800aa16 <I2C_Master_ADDR+0x30c>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8ca:	601a      	str	r2, [r3, #0]
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	61bb      	str	r3, [r7, #24]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	61bb      	str	r3, [r7, #24]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	699b      	ldr	r3, [r3, #24]
 800a8de:	61bb      	str	r3, [r7, #24]
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8f0:	601a      	str	r2, [r3, #0]
 800a8f2:	e090      	b.n	800aa16 <I2C_Master_ADDR+0x30c>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d158      	bne.n	800a9b0 <I2C_Master_ADDR+0x2a6>
 800a8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a900:	2b04      	cmp	r3, #4
 800a902:	d021      	beq.n	800a948 <I2C_Master_ADDR+0x23e>
 800a904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a906:	2b02      	cmp	r3, #2
 800a908:	d01e      	beq.n	800a948 <I2C_Master_ADDR+0x23e>
 800a90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90c:	2b10      	cmp	r3, #16
 800a90e:	d01b      	beq.n	800a948 <I2C_Master_ADDR+0x23e>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	2300      	movs	r3, #0
 800a922:	617b      	str	r3, [r7, #20]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	617b      	str	r3, [r7, #20]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	699b      	ldr	r3, [r3, #24]
 800a932:	617b      	str	r3, [r7, #20]
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a944:	601a      	str	r2, [r3, #0]
 800a946:	e012      	b.n	800a96e <I2C_Master_ADDR+0x264>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	2300      	movs	r3, #0
 800a95a:	613b      	str	r3, [r7, #16]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	613b      	str	r3, [r7, #16]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	699b      	ldr	r3, [r3, #24]
 800a96a:	613b      	str	r3, [r7, #16]
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a97c:	d14b      	bne.n	800aa16 <I2C_Master_ADDR+0x30c>
 800a97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a980:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a984:	d00b      	beq.n	800a99e <I2C_Master_ADDR+0x294>
 800a986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d008      	beq.n	800a99e <I2C_Master_ADDR+0x294>
 800a98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a98e:	2b08      	cmp	r3, #8
 800a990:	d005      	beq.n	800a99e <I2C_Master_ADDR+0x294>
 800a992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a994:	2b10      	cmp	r3, #16
 800a996:	d002      	beq.n	800a99e <I2C_Master_ADDR+0x294>
 800a998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a99a:	2b20      	cmp	r3, #32
 800a99c:	d13b      	bne.n	800aa16 <I2C_Master_ADDR+0x30c>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	685a      	ldr	r2, [r3, #4]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a9ac:	605a      	str	r2, [r3, #4]
 800a9ae:	e032      	b.n	800aa16 <I2C_Master_ADDR+0x30c>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a9be:	601a      	str	r2, [r3, #0]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9ce:	d117      	bne.n	800aa00 <I2C_Master_ADDR+0x2f6>
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a9d6:	d00b      	beq.n	800a9f0 <I2C_Master_ADDR+0x2e6>
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d008      	beq.n	800a9f0 <I2C_Master_ADDR+0x2e6>
 800a9de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e0:	2b08      	cmp	r3, #8
 800a9e2:	d005      	beq.n	800a9f0 <I2C_Master_ADDR+0x2e6>
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e6:	2b10      	cmp	r3, #16
 800a9e8:	d002      	beq.n	800a9f0 <I2C_Master_ADDR+0x2e6>
 800a9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ec:	2b20      	cmp	r3, #32
 800a9ee:	d107      	bne.n	800aa00 <I2C_Master_ADDR+0x2f6>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	685a      	ldr	r2, [r3, #4]
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a9fe:	605a      	str	r2, [r3, #4]
 800aa00:	2300      	movs	r3, #0
 800aa02:	60fb      	str	r3, [r7, #12]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	695b      	ldr	r3, [r3, #20]
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	651a      	str	r2, [r3, #80]	@ 0x50
 800aa1c:	e00b      	b.n	800aa36 <I2C_Master_ADDR+0x32c>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	60bb      	str	r3, [r7, #8]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	695b      	ldr	r3, [r3, #20]
 800aa28:	60bb      	str	r3, [r7, #8]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	60bb      	str	r3, [r7, #8]
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	e7ff      	b.n	800aa36 <I2C_Master_ADDR+0x32c>
 800aa36:	bf00      	nop
 800aa38:	3744      	adds	r7, #68	@ 0x44
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bc80      	pop	{r7}
 800aa3e:	4770      	bx	lr

0800aa40 <I2C_SlaveTransmit_TXE>:
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa4e:	73fb      	strb	r3, [r7, #15]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d02b      	beq.n	800aab2 <I2C_SlaveTransmit_TXE+0x72>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa5e:	781a      	ldrb	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	611a      	str	r2, [r3, #16]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	625a      	str	r2, [r3, #36]	@ 0x24
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	3b01      	subs	r3, #1
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d114      	bne.n	800aab2 <I2C_SlaveTransmit_TXE+0x72>
 800aa88:	7bfb      	ldrb	r3, [r7, #15]
 800aa8a:	2b29      	cmp	r3, #41	@ 0x29
 800aa8c:	d111      	bne.n	800aab2 <I2C_SlaveTransmit_TXE+0x72>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	685a      	ldr	r2, [r3, #4]
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa9c:	605a      	str	r2, [r3, #4]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2221      	movs	r2, #33	@ 0x21
 800aaa2:	631a      	str	r2, [r3, #48]	@ 0x30
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2228      	movs	r2, #40	@ 0x28
 800aaa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f7ff f9e1 	bl	8009e74 <HAL_I2C_SlaveTxCpltCallback>
 800aab2:	bf00      	nop
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <I2C_SlaveTransmit_BTF>:
 800aaba:	b480      	push	{r7}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d011      	beq.n	800aaf0 <I2C_SlaveTransmit_BTF+0x36>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad0:	781a      	ldrb	r2, [r3, #0]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	611a      	str	r2, [r3, #16]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aadc:	1c5a      	adds	r2, r3, #1
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	625a      	str	r2, [r3, #36]	@ 0x24
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	3b01      	subs	r3, #1
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bc80      	pop	{r7}
 800aaf8:	4770      	bx	lr

0800aafa <I2C_SlaveReceive_RXNE>:
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b084      	sub	sp, #16
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab08:	73fb      	strb	r3, [r7, #15]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d02c      	beq.n	800ab6e <I2C_SlaveReceive_RXNE+0x74>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	691a      	ldr	r2, [r3, #16]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1e:	b2d2      	uxtb	r2, r2
 800ab20:	701a      	strb	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab26:	1c5a      	adds	r2, r3, #1
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	625a      	str	r2, [r3, #36]	@ 0x24
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	3b01      	subs	r3, #1
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d114      	bne.n	800ab6e <I2C_SlaveReceive_RXNE+0x74>
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
 800ab46:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab48:	d111      	bne.n	800ab6e <I2C_SlaveReceive_RXNE+0x74>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab58:	605a      	str	r2, [r3, #4]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2222      	movs	r2, #34	@ 0x22
 800ab5e:	631a      	str	r2, [r3, #48]	@ 0x30
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2228      	movs	r2, #40	@ 0x28
 800ab64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f7fa fb5d 	bl	8005228 <HAL_I2C_SlaveRxCpltCallback>
 800ab6e:	bf00      	nop
 800ab70:	3710      	adds	r7, #16
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <I2C_SlaveReceive_BTF>:
 800ab76:	b480      	push	{r7}
 800ab78:	b083      	sub	sp, #12
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d012      	beq.n	800abae <I2C_SlaveReceive_BTF+0x38>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	691a      	ldr	r2, [r3, #16]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab92:	b2d2      	uxtb	r2, r2
 800ab94:	701a      	strb	r2, [r3, #0]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab9a:	1c5a      	adds	r2, r3, #1
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	625a      	str	r2, [r3, #36]	@ 0x24
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	3b01      	subs	r3, #1
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800abae:	bf00      	nop
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bc80      	pop	{r7}
 800abb6:	4770      	bx	lr

0800abb8 <I2C_Slave_ADDR>:
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
 800abc2:	2300      	movs	r3, #0
 800abc4:	73fb      	strb	r3, [r7, #15]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800abd2:	2b28      	cmp	r3, #40	@ 0x28
 800abd4:	d127      	bne.n	800ac26 <I2C_Slave_ADDR+0x6e>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800abe4:	605a      	str	r2, [r3, #4]
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	089b      	lsrs	r3, r3, #2
 800abea:	f003 0301 	and.w	r3, r3, #1
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <I2C_Slave_ADDR+0x3e>
 800abf2:	2301      	movs	r3, #1
 800abf4:	73fb      	strb	r3, [r7, #15]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	09db      	lsrs	r3, r3, #7
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d103      	bne.n	800ac0a <I2C_Slave_ADDR+0x52>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	81bb      	strh	r3, [r7, #12]
 800ac08:	e002      	b.n	800ac10 <I2C_Slave_ADDR+0x58>
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	699b      	ldr	r3, [r3, #24]
 800ac0e:	81bb      	strh	r3, [r7, #12]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800ac18:	89ba      	ldrh	r2, [r7, #12]
 800ac1a:	7bfb      	ldrb	r3, [r7, #15]
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f7ff f931 	bl	8009e86 <HAL_I2C_AddrCallback>
 800ac24:	e00e      	b.n	800ac44 <I2C_Slave_ADDR+0x8c>
 800ac26:	2300      	movs	r3, #0
 800ac28:	60bb      	str	r3, [r7, #8]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	695b      	ldr	r3, [r3, #20]
 800ac30:	60bb      	str	r3, [r7, #8]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	699b      	ldr	r3, [r3, #24]
 800ac38:	60bb      	str	r3, [r7, #8]
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800ac44:	bf00      	nop
 800ac46:	3710      	adds	r7, #16
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <I2C_Slave_STOPF>:
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac5a:	73fb      	strb	r3, [r7, #15]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ac6a:	605a      	str	r2, [r3, #4]
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	60bb      	str	r3, [r7, #8]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	60bb      	str	r3, [r7, #8]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f042 0201 	orr.w	r2, r2, #1
 800ac86:	601a      	str	r2, [r3, #0]
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac98:	601a      	str	r2, [r3, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aca4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aca8:	d172      	bne.n	800ad90 <I2C_Slave_STOPF+0x144>
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
 800acac:	2b22      	cmp	r3, #34	@ 0x22
 800acae:	d002      	beq.n	800acb6 <I2C_Slave_STOPF+0x6a>
 800acb0:	7bfb      	ldrb	r3, [r7, #15]
 800acb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800acb4:	d135      	bne.n	800ad22 <I2C_Slave_STOPF+0xd6>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acc8:	b29b      	uxth	r3, r3
 800acca:	2b00      	cmp	r3, #0
 800accc:	d005      	beq.n	800acda <I2C_Slave_STOPF+0x8e>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acd2:	f043 0204 	orr.w	r2, r3, #4
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	641a      	str	r2, [r3, #64]	@ 0x40
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	685a      	ldr	r2, [r3, #4]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ace8:	605a      	str	r2, [r3, #4]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fe fb36 	bl	8009360 <HAL_DMA_GetState>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d049      	beq.n	800ad8e <I2C_Slave_STOPF+0x142>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acfe:	4a69      	ldr	r2, [pc, #420]	@ (800aea4 <I2C_Slave_STOPF+0x258>)
 800ad00:	635a      	str	r2, [r3, #52]	@ 0x34
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fe fab2 	bl	8009270 <HAL_DMA_Abort_IT>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d03d      	beq.n	800ad8e <I2C_Slave_STOPF+0x142>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4798      	blx	r3
 800ad20:	e035      	b.n	800ad8e <I2C_Slave_STOPF+0x142>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d005      	beq.n	800ad46 <I2C_Slave_STOPF+0xfa>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad3e:	f043 0204 	orr.w	r2, r3, #4
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	641a      	str	r2, [r3, #64]	@ 0x40
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ad54:	605a      	str	r2, [r3, #4]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7fe fb00 	bl	8009360 <HAL_DMA_GetState>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d014      	beq.n	800ad90 <I2C_Slave_STOPF+0x144>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad6a:	4a4e      	ldr	r2, [pc, #312]	@ (800aea4 <I2C_Slave_STOPF+0x258>)
 800ad6c:	635a      	str	r2, [r3, #52]	@ 0x34
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad72:	4618      	mov	r0, r3
 800ad74:	f7fe fa7c 	bl	8009270 <HAL_DMA_Abort_IT>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d008      	beq.n	800ad90 <I2C_Slave_STOPF+0x144>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ad88:	4610      	mov	r0, r2
 800ad8a:	4798      	blx	r3
 800ad8c:	e000      	b.n	800ad90 <I2C_Slave_STOPF+0x144>
 800ad8e:	bf00      	nop
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d03e      	beq.n	800ae18 <I2C_Slave_STOPF+0x1cc>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	695b      	ldr	r3, [r3, #20]
 800ada0:	f003 0304 	and.w	r3, r3, #4
 800ada4:	2b04      	cmp	r3, #4
 800ada6:	d112      	bne.n	800adce <I2C_Slave_STOPF+0x182>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	691a      	ldr	r2, [r3, #16]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb2:	b2d2      	uxtb	r2, r2
 800adb4:	701a      	strb	r2, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adba:	1c5a      	adds	r2, r3, #1
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	625a      	str	r2, [r3, #36]	@ 0x24
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	3b01      	subs	r3, #1
 800adc8:	b29a      	uxth	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	695b      	ldr	r3, [r3, #20]
 800add4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800add8:	2b40      	cmp	r3, #64	@ 0x40
 800adda:	d112      	bne.n	800ae02 <I2C_Slave_STOPF+0x1b6>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	691a      	ldr	r2, [r3, #16]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ade6:	b2d2      	uxtb	r2, r2
 800ade8:	701a      	strb	r2, [r3, #0]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adee:	1c5a      	adds	r2, r3, #1
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	625a      	str	r2, [r3, #36]	@ 0x24
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	3b01      	subs	r3, #1
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d005      	beq.n	800ae18 <I2C_Slave_STOPF+0x1cc>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae10:	f043 0204 	orr.w	r2, r3, #4
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	641a      	str	r2, [r3, #64]	@ 0x40
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d003      	beq.n	800ae28 <I2C_Slave_STOPF+0x1dc>
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 f8b7 	bl	800af94 <I2C_ITError>
 800ae26:	e039      	b.n	800ae9c <I2C_Slave_STOPF+0x250>
 800ae28:	7bfb      	ldrb	r3, [r7, #15]
 800ae2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae2c:	d109      	bne.n	800ae42 <I2C_Slave_STOPF+0x1f6>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2228      	movs	r2, #40	@ 0x28
 800ae38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7fa f9f3 	bl	8005228 <HAL_I2C_SlaveRxCpltCallback>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	2b28      	cmp	r3, #40	@ 0x28
 800ae4c:	d111      	bne.n	800ae72 <I2C_Slave_STOPF+0x226>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a15      	ldr	r2, [pc, #84]	@ (800aea8 <I2C_Slave_STOPF+0x25c>)
 800ae52:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2220      	movs	r2, #32
 800ae5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f7ff f818 	bl	8009ea0 <HAL_I2C_ListenCpltCallback>
 800ae70:	e014      	b.n	800ae9c <I2C_Slave_STOPF+0x250>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae76:	2b22      	cmp	r3, #34	@ 0x22
 800ae78:	d002      	beq.n	800ae80 <I2C_Slave_STOPF+0x234>
 800ae7a:	7bfb      	ldrb	r3, [r7, #15]
 800ae7c:	2b22      	cmp	r3, #34	@ 0x22
 800ae7e:	d10d      	bne.n	800ae9c <I2C_Slave_STOPF+0x250>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2220      	movs	r2, #32
 800ae8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f7fa f9c6 	bl	8005228 <HAL_I2C_SlaveRxCpltCallback>
 800ae9c:	bf00      	nop
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	0800b1f9 	.word	0x0800b1f9
 800aea8:	ffff0000 	.word	0xffff0000

0800aeac <I2C_Slave_AF>:
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aeba:	73fb      	strb	r3, [r7, #15]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec0:	60bb      	str	r3, [r7, #8]
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	2b08      	cmp	r3, #8
 800aec6:	d002      	beq.n	800aece <I2C_Slave_AF+0x22>
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2b20      	cmp	r3, #32
 800aecc:	d129      	bne.n	800af22 <I2C_Slave_AF+0x76>
 800aece:	7bfb      	ldrb	r3, [r7, #15]
 800aed0:	2b28      	cmp	r3, #40	@ 0x28
 800aed2:	d126      	bne.n	800af22 <I2C_Slave_AF+0x76>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a2e      	ldr	r2, [pc, #184]	@ (800af90 <I2C_Slave_AF+0xe4>)
 800aed8:	62da      	str	r2, [r3, #44]	@ 0x2c
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	685a      	ldr	r2, [r3, #4]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aee8:	605a      	str	r2, [r3, #4]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800aef2:	615a      	str	r2, [r3, #20]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af02:	601a      	str	r2, [r3, #0]
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	631a      	str	r2, [r3, #48]	@ 0x30
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2220      	movs	r2, #32
 800af0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7fe ffc0 	bl	8009ea0 <HAL_I2C_ListenCpltCallback>
 800af20:	e031      	b.n	800af86 <I2C_Slave_AF+0xda>
 800af22:	7bfb      	ldrb	r3, [r7, #15]
 800af24:	2b21      	cmp	r3, #33	@ 0x21
 800af26:	d129      	bne.n	800af7c <I2C_Slave_AF+0xd0>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4a19      	ldr	r2, [pc, #100]	@ (800af90 <I2C_Slave_AF+0xe4>)
 800af2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2221      	movs	r2, #33	@ 0x21
 800af32:	631a      	str	r2, [r3, #48]	@ 0x30
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2220      	movs	r2, #32
 800af38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	685a      	ldr	r2, [r3, #4]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800af52:	605a      	str	r2, [r3, #4]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800af5c:	615a      	str	r2, [r3, #20]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7fe fccc 	bl	800990c <I2C_Flush_DR>
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f7fe ff7d 	bl	8009e74 <HAL_I2C_SlaveTxCpltCallback>
 800af7a:	e004      	b.n	800af86 <I2C_Slave_AF+0xda>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800af84:	615a      	str	r2, [r3, #20]
 800af86:	bf00      	nop
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	ffff0000 	.word	0xffff0000

0800af94 <I2C_ITError>:
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afa2:	73fb      	strb	r3, [r7, #15]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800afaa:	73bb      	strb	r3, [r7, #14]
 800afac:	7bbb      	ldrb	r3, [r7, #14]
 800afae:	2b10      	cmp	r3, #16
 800afb0:	d002      	beq.n	800afb8 <I2C_ITError+0x24>
 800afb2:	7bbb      	ldrb	r3, [r7, #14]
 800afb4:	2b40      	cmp	r3, #64	@ 0x40
 800afb6:	d10a      	bne.n	800afce <I2C_ITError+0x3a>
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	2b22      	cmp	r3, #34	@ 0x22
 800afbc:	d107      	bne.n	800afce <I2C_ITError+0x3a>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800afcc:	601a      	str	r2, [r3, #0]
 800afce:	7bfb      	ldrb	r3, [r7, #15]
 800afd0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800afd4:	2b28      	cmp	r3, #40	@ 0x28
 800afd6:	d107      	bne.n	800afe8 <I2C_ITError+0x54>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	631a      	str	r2, [r3, #48]	@ 0x30
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2228      	movs	r2, #40	@ 0x28
 800afe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800afe6:	e015      	b.n	800b014 <I2C_ITError+0x80>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aff2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aff6:	d00a      	beq.n	800b00e <I2C_ITError+0x7a>
 800aff8:	7bfb      	ldrb	r3, [r7, #15]
 800affa:	2b60      	cmp	r3, #96	@ 0x60
 800affc:	d007      	beq.n	800b00e <I2C_ITError+0x7a>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2220      	movs	r2, #32
 800b002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	631a      	str	r2, [r3, #48]	@ 0x30
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b01e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b022:	d162      	bne.n	800b0ea <I2C_ITError+0x156>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	685a      	ldr	r2, [r3, #4]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b032:	605a      	str	r2, [r3, #4]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b038:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d020      	beq.n	800b084 <I2C_ITError+0xf0>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b046:	4a6a      	ldr	r2, [pc, #424]	@ (800b1f0 <I2C_ITError+0x25c>)
 800b048:	635a      	str	r2, [r3, #52]	@ 0x34
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b04e:	4618      	mov	r0, r3
 800b050:	f7fe f90e 	bl	8009270 <HAL_DMA_Abort_IT>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 8089 	beq.w	800b16e <I2C_ITError+0x1da>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 0201 	bic.w	r2, r2, #1
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2220      	movs	r2, #32
 800b070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b07e:	4610      	mov	r0, r2
 800b080:	4798      	blx	r3
 800b082:	e074      	b.n	800b16e <I2C_ITError+0x1da>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b088:	4a59      	ldr	r2, [pc, #356]	@ (800b1f0 <I2C_ITError+0x25c>)
 800b08a:	635a      	str	r2, [r3, #52]	@ 0x34
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b090:	4618      	mov	r0, r3
 800b092:	f7fe f8ed 	bl	8009270 <HAL_DMA_Abort_IT>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d068      	beq.n	800b16e <I2C_ITError+0x1da>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0a6:	2b40      	cmp	r3, #64	@ 0x40
 800b0a8:	d10b      	bne.n	800b0c2 <I2C_ITError+0x12e>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	691a      	ldr	r2, [r3, #16]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b4:	b2d2      	uxtb	r2, r2
 800b0b6:	701a      	strb	r2, [r3, #0]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0bc:	1c5a      	adds	r2, r3, #1
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	625a      	str	r2, [r3, #36]	@ 0x24
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f022 0201 	bic.w	r2, r2, #1
 800b0d0:	601a      	str	r2, [r3, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2220      	movs	r2, #32
 800b0d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	4798      	blx	r3
 800b0e8:	e041      	b.n	800b16e <I2C_ITError+0x1da>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	2b60      	cmp	r3, #96	@ 0x60
 800b0f4:	d125      	bne.n	800b142 <I2C_ITError+0x1ae>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2220      	movs	r2, #32
 800b0fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	641a      	str	r2, [r3, #64]	@ 0x40
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b10e:	2b40      	cmp	r3, #64	@ 0x40
 800b110:	d10b      	bne.n	800b12a <I2C_ITError+0x196>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	691a      	ldr	r2, [r3, #16]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b11c:	b2d2      	uxtb	r2, r2
 800b11e:	701a      	strb	r2, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b124:	1c5a      	adds	r2, r3, #1
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	625a      	str	r2, [r3, #36]	@ 0x24
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f022 0201 	bic.w	r2, r2, #1
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7fe fecb 	bl	8009ed6 <HAL_I2C_AbortCpltCallback>
 800b140:	e015      	b.n	800b16e <I2C_ITError+0x1da>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	695b      	ldr	r3, [r3, #20]
 800b148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b14c:	2b40      	cmp	r3, #64	@ 0x40
 800b14e:	d10b      	bne.n	800b168 <I2C_ITError+0x1d4>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	691a      	ldr	r2, [r3, #16]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15a:	b2d2      	uxtb	r2, r2
 800b15c:	701a      	strb	r2, [r3, #0]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	625a      	str	r2, [r3, #36]	@ 0x24
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f7fa f873 	bl	8005254 <HAL_I2C_ErrorCallback>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b172:	60bb      	str	r3, [r7, #8]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	f003 0301 	and.w	r3, r3, #1
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10e      	bne.n	800b19c <I2C_ITError+0x208>
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	f003 0302 	and.w	r3, r3, #2
 800b184:	2b00      	cmp	r3, #0
 800b186:	d109      	bne.n	800b19c <I2C_ITError+0x208>
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	f003 0304 	and.w	r3, r3, #4
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d104      	bne.n	800b19c <I2C_ITError+0x208>
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	f003 0308 	and.w	r3, r3, #8
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d007      	beq.n	800b1ac <I2C_ITError+0x218>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	685a      	ldr	r2, [r3, #4]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b1aa:	605a      	str	r2, [r3, #4]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1b2:	73fb      	strb	r3, [r7, #15]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1b8:	f003 0304 	and.w	r3, r3, #4
 800b1bc:	2b04      	cmp	r3, #4
 800b1be:	d113      	bne.n	800b1e8 <I2C_ITError+0x254>
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
 800b1c2:	2b28      	cmp	r3, #40	@ 0x28
 800b1c4:	d110      	bne.n	800b1e8 <I2C_ITError+0x254>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a0a      	ldr	r2, [pc, #40]	@ (800b1f4 <I2C_ITError+0x260>)
 800b1ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7fe fe5c 	bl	8009ea0 <HAL_I2C_ListenCpltCallback>
 800b1e8:	bf00      	nop
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	0800b1f9 	.word	0x0800b1f9
 800b1f4:	ffff0000 	.word	0xffff0000

0800b1f8 <I2C_DMAAbort>:
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b086      	sub	sp, #24
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	2300      	movs	r3, #0
 800b202:	60fb      	str	r3, [r7, #12]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b208:	617b      	str	r3, [r7, #20]
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b210:	74fb      	strb	r3, [r7, #19]
 800b212:	4b4b      	ldr	r3, [pc, #300]	@ (800b340 <I2C_DMAAbort+0x148>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	08db      	lsrs	r3, r3, #3
 800b218:	4a4a      	ldr	r2, [pc, #296]	@ (800b344 <I2C_DMAAbort+0x14c>)
 800b21a:	fba2 2303 	umull	r2, r3, r2, r3
 800b21e:	0a1a      	lsrs	r2, r3, #8
 800b220:	4613      	mov	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	4413      	add	r3, r2
 800b226:	00da      	lsls	r2, r3, #3
 800b228:	1ad3      	subs	r3, r2, r3
 800b22a:	60fb      	str	r3, [r7, #12]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d106      	bne.n	800b240 <I2C_DMAAbort+0x48>
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b236:	f043 0220 	orr.w	r2, r3, #32
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	641a      	str	r2, [r3, #64]	@ 0x40
 800b23e:	e00a      	b.n	800b256 <I2C_DMAAbort+0x5e>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	3b01      	subs	r3, #1
 800b244:	60fb      	str	r3, [r7, #12]
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b254:	d0ea      	beq.n	800b22c <I2C_DMAAbort+0x34>
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d003      	beq.n	800b266 <I2C_DMAAbort+0x6e>
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b262:	2200      	movs	r2, #0
 800b264:	629a      	str	r2, [r3, #40]	@ 0x28
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d003      	beq.n	800b276 <I2C_DMAAbort+0x7e>
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b272:	2200      	movs	r2, #0
 800b274:	629a      	str	r2, [r3, #40]	@ 0x28
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	697b      	ldr	r3, [r7, #20]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b284:	601a      	str	r2, [r3, #0]
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2200      	movs	r2, #0
 800b28a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b290:	2b00      	cmp	r3, #0
 800b292:	d003      	beq.n	800b29c <I2C_DMAAbort+0xa4>
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b298:	2200      	movs	r2, #0
 800b29a:	635a      	str	r2, [r3, #52]	@ 0x34
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d003      	beq.n	800b2ac <I2C_DMAAbort+0xb4>
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	635a      	str	r2, [r3, #52]	@ 0x34
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f022 0201 	bic.w	r2, r2, #1
 800b2ba:	601a      	str	r2, [r3, #0]
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	2b60      	cmp	r3, #96	@ 0x60
 800b2c6:	d10e      	bne.n	800b2e6 <I2C_DMAAbort+0xee>
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	2220      	movs	r2, #32
 800b2cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	641a      	str	r2, [r3, #64]	@ 0x40
 800b2de:	6978      	ldr	r0, [r7, #20]
 800b2e0:	f7fe fdf9 	bl	8009ed6 <HAL_I2C_AbortCpltCallback>
 800b2e4:	e027      	b.n	800b336 <I2C_DMAAbort+0x13e>
 800b2e6:	7cfb      	ldrb	r3, [r7, #19]
 800b2e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b2ec:	2b28      	cmp	r3, #40	@ 0x28
 800b2ee:	d117      	bne.n	800b320 <I2C_DMAAbort+0x128>
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f042 0201 	orr.w	r2, r2, #1
 800b2fe:	601a      	str	r2, [r3, #0]
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b30e:	601a      	str	r2, [r3, #0]
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2200      	movs	r2, #0
 800b314:	631a      	str	r2, [r3, #48]	@ 0x30
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	2228      	movs	r2, #40	@ 0x28
 800b31a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b31e:	e007      	b.n	800b330 <I2C_DMAAbort+0x138>
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	2220      	movs	r2, #32
 800b324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b330:	6978      	ldr	r0, [r7, #20]
 800b332:	f7f9 ff8f 	bl	8005254 <HAL_I2C_ErrorCallback>
 800b336:	bf00      	nop
 800b338:	3718      	adds	r7, #24
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	20000028 	.word	0x20000028
 800b344:	14f8b589 	.word	0x14f8b589

0800b348 <I2C_WaitOnSTOPRequestThroughIT>:
 800b348:	b480      	push	{r7}
 800b34a:	b085      	sub	sp, #20
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	2300      	movs	r3, #0
 800b352:	60fb      	str	r3, [r7, #12]
 800b354:	4b13      	ldr	r3, [pc, #76]	@ (800b3a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	08db      	lsrs	r3, r3, #3
 800b35a:	4a13      	ldr	r2, [pc, #76]	@ (800b3a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800b35c:	fba2 2303 	umull	r2, r3, r2, r3
 800b360:	0a1a      	lsrs	r2, r3, #8
 800b362:	4613      	mov	r3, r2
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	4413      	add	r3, r2
 800b368:	60fb      	str	r3, [r7, #12]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	60fb      	str	r3, [r7, #12]
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d107      	bne.n	800b386 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b37a:	f043 0220 	orr.w	r2, r3, #32
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	641a      	str	r2, [r3, #64]	@ 0x40
 800b382:	2301      	movs	r3, #1
 800b384:	e008      	b.n	800b398 <I2C_WaitOnSTOPRequestThroughIT+0x50>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b390:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b394:	d0e9      	beq.n	800b36a <I2C_WaitOnSTOPRequestThroughIT+0x22>
 800b396:	2300      	movs	r3, #0
 800b398:	4618      	mov	r0, r3
 800b39a:	3714      	adds	r7, #20
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr
 800b3a2:	bf00      	nop
 800b3a4:	20000028 	.word	0x20000028
 800b3a8:	14f8b589 	.word	0x14f8b589

0800b3ac <I2C_ConvertOtherXferOptions>:
 800b3ac:	b480      	push	{r7}
 800b3ae:	b083      	sub	sp, #12
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800b3bc:	d103      	bne.n	800b3c6 <I2C_ConvertOtherXferOptions+0x1a>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b3c4:	e007      	b.n	800b3d6 <I2C_ConvertOtherXferOptions+0x2a>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ca:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800b3ce:	d102      	bne.n	800b3d6 <I2C_ConvertOtherXferOptions+0x2a>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2208      	movs	r2, #8
 800b3d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b3d6:	bf00      	nop
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bc80      	pop	{r7}
 800b3de:	4770      	bx	lr

0800b3e0 <HAL_RCC_GetHCLKFreq>:
 800b3e0:	b480      	push	{r7}
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	4b02      	ldr	r3, [pc, #8]	@ (800b3f0 <HAL_RCC_GetHCLKFreq+0x10>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bc80      	pop	{r7}
 800b3ee:	4770      	bx	lr
 800b3f0:	20000028 	.word	0x20000028

0800b3f4 <HAL_RCC_GetPCLK1Freq>:
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	f7ff fff2 	bl	800b3e0 <HAL_RCC_GetHCLKFreq>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	4b05      	ldr	r3, [pc, #20]	@ (800b414 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	0a1b      	lsrs	r3, r3, #8
 800b404:	f003 0307 	and.w	r3, r3, #7
 800b408:	4903      	ldr	r1, [pc, #12]	@ (800b418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b40a:	5ccb      	ldrb	r3, [r1, r3]
 800b40c:	fa22 f303 	lsr.w	r3, r2, r3
 800b410:	4618      	mov	r0, r3
 800b412:	bd80      	pop	{r7, pc}
 800b414:	40021000 	.word	0x40021000
 800b418:	0800eaac 	.word	0x0800eaac

0800b41c <__cvt>:
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b422:	461d      	mov	r5, r3
 800b424:	bfbb      	ittet	lt
 800b426:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b42a:	461d      	movlt	r5, r3
 800b42c:	2300      	movge	r3, #0
 800b42e:	232d      	movlt	r3, #45	@ 0x2d
 800b430:	b088      	sub	sp, #32
 800b432:	4614      	mov	r4, r2
 800b434:	bfb8      	it	lt
 800b436:	4614      	movlt	r4, r2
 800b438:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b43a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b43c:	7013      	strb	r3, [r2, #0]
 800b43e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b440:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b444:	f023 0820 	bic.w	r8, r3, #32
 800b448:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b44c:	d005      	beq.n	800b45a <__cvt+0x3e>
 800b44e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b452:	d100      	bne.n	800b456 <__cvt+0x3a>
 800b454:	3601      	adds	r6, #1
 800b456:	2302      	movs	r3, #2
 800b458:	e000      	b.n	800b45c <__cvt+0x40>
 800b45a:	2303      	movs	r3, #3
 800b45c:	aa07      	add	r2, sp, #28
 800b45e:	9204      	str	r2, [sp, #16]
 800b460:	aa06      	add	r2, sp, #24
 800b462:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b466:	e9cd 3600 	strd	r3, r6, [sp]
 800b46a:	4622      	mov	r2, r4
 800b46c:	462b      	mov	r3, r5
 800b46e:	f000 fe87 	bl	800c180 <_dtoa_r>
 800b472:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b476:	4607      	mov	r7, r0
 800b478:	d119      	bne.n	800b4ae <__cvt+0x92>
 800b47a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b47c:	07db      	lsls	r3, r3, #31
 800b47e:	d50e      	bpl.n	800b49e <__cvt+0x82>
 800b480:	eb00 0906 	add.w	r9, r0, r6
 800b484:	2200      	movs	r2, #0
 800b486:	2300      	movs	r3, #0
 800b488:	4620      	mov	r0, r4
 800b48a:	4629      	mov	r1, r5
 800b48c:	f7f9 fa8c 	bl	80049a8 <__aeabi_dcmpeq>
 800b490:	b108      	cbz	r0, 800b496 <__cvt+0x7a>
 800b492:	f8cd 901c 	str.w	r9, [sp, #28]
 800b496:	2230      	movs	r2, #48	@ 0x30
 800b498:	9b07      	ldr	r3, [sp, #28]
 800b49a:	454b      	cmp	r3, r9
 800b49c:	d31e      	bcc.n	800b4dc <__cvt+0xc0>
 800b49e:	4638      	mov	r0, r7
 800b4a0:	9b07      	ldr	r3, [sp, #28]
 800b4a2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b4a4:	1bdb      	subs	r3, r3, r7
 800b4a6:	6013      	str	r3, [r2, #0]
 800b4a8:	b008      	add	sp, #32
 800b4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ae:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b4b2:	eb00 0906 	add.w	r9, r0, r6
 800b4b6:	d1e5      	bne.n	800b484 <__cvt+0x68>
 800b4b8:	7803      	ldrb	r3, [r0, #0]
 800b4ba:	2b30      	cmp	r3, #48	@ 0x30
 800b4bc:	d10a      	bne.n	800b4d4 <__cvt+0xb8>
 800b4be:	2200      	movs	r2, #0
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	4629      	mov	r1, r5
 800b4c6:	f7f9 fa6f 	bl	80049a8 <__aeabi_dcmpeq>
 800b4ca:	b918      	cbnz	r0, 800b4d4 <__cvt+0xb8>
 800b4cc:	f1c6 0601 	rsb	r6, r6, #1
 800b4d0:	f8ca 6000 	str.w	r6, [sl]
 800b4d4:	f8da 3000 	ldr.w	r3, [sl]
 800b4d8:	4499      	add	r9, r3
 800b4da:	e7d3      	b.n	800b484 <__cvt+0x68>
 800b4dc:	1c59      	adds	r1, r3, #1
 800b4de:	9107      	str	r1, [sp, #28]
 800b4e0:	701a      	strb	r2, [r3, #0]
 800b4e2:	e7d9      	b.n	800b498 <__cvt+0x7c>

0800b4e4 <__exponent>:
 800b4e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4e6:	2900      	cmp	r1, #0
 800b4e8:	bfb6      	itet	lt
 800b4ea:	232d      	movlt	r3, #45	@ 0x2d
 800b4ec:	232b      	movge	r3, #43	@ 0x2b
 800b4ee:	4249      	neglt	r1, r1
 800b4f0:	2909      	cmp	r1, #9
 800b4f2:	7002      	strb	r2, [r0, #0]
 800b4f4:	7043      	strb	r3, [r0, #1]
 800b4f6:	dd29      	ble.n	800b54c <__exponent+0x68>
 800b4f8:	f10d 0307 	add.w	r3, sp, #7
 800b4fc:	461d      	mov	r5, r3
 800b4fe:	270a      	movs	r7, #10
 800b500:	fbb1 f6f7 	udiv	r6, r1, r7
 800b504:	461a      	mov	r2, r3
 800b506:	fb07 1416 	mls	r4, r7, r6, r1
 800b50a:	3430      	adds	r4, #48	@ 0x30
 800b50c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b510:	460c      	mov	r4, r1
 800b512:	2c63      	cmp	r4, #99	@ 0x63
 800b514:	4631      	mov	r1, r6
 800b516:	f103 33ff 	add.w	r3, r3, #4294967295
 800b51a:	dcf1      	bgt.n	800b500 <__exponent+0x1c>
 800b51c:	3130      	adds	r1, #48	@ 0x30
 800b51e:	1e94      	subs	r4, r2, #2
 800b520:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b524:	4623      	mov	r3, r4
 800b526:	1c41      	adds	r1, r0, #1
 800b528:	42ab      	cmp	r3, r5
 800b52a:	d30a      	bcc.n	800b542 <__exponent+0x5e>
 800b52c:	f10d 0309 	add.w	r3, sp, #9
 800b530:	1a9b      	subs	r3, r3, r2
 800b532:	42ac      	cmp	r4, r5
 800b534:	bf88      	it	hi
 800b536:	2300      	movhi	r3, #0
 800b538:	3302      	adds	r3, #2
 800b53a:	4403      	add	r3, r0
 800b53c:	1a18      	subs	r0, r3, r0
 800b53e:	b003      	add	sp, #12
 800b540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b542:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b546:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b54a:	e7ed      	b.n	800b528 <__exponent+0x44>
 800b54c:	2330      	movs	r3, #48	@ 0x30
 800b54e:	3130      	adds	r1, #48	@ 0x30
 800b550:	7083      	strb	r3, [r0, #2]
 800b552:	70c1      	strb	r1, [r0, #3]
 800b554:	1d03      	adds	r3, r0, #4
 800b556:	e7f1      	b.n	800b53c <__exponent+0x58>

0800b558 <_printf_float>:
 800b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55c:	b091      	sub	sp, #68	@ 0x44
 800b55e:	460c      	mov	r4, r1
 800b560:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b564:	4616      	mov	r6, r2
 800b566:	461f      	mov	r7, r3
 800b568:	4605      	mov	r5, r0
 800b56a:	f000 fcfb 	bl	800bf64 <_localeconv_r>
 800b56e:	6803      	ldr	r3, [r0, #0]
 800b570:	4618      	mov	r0, r3
 800b572:	9308      	str	r3, [sp, #32]
 800b574:	f7f8 fdec 	bl	8004150 <strlen>
 800b578:	2300      	movs	r3, #0
 800b57a:	930e      	str	r3, [sp, #56]	@ 0x38
 800b57c:	f8d8 3000 	ldr.w	r3, [r8]
 800b580:	9009      	str	r0, [sp, #36]	@ 0x24
 800b582:	3307      	adds	r3, #7
 800b584:	f023 0307 	bic.w	r3, r3, #7
 800b588:	f103 0208 	add.w	r2, r3, #8
 800b58c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b590:	f8d4 b000 	ldr.w	fp, [r4]
 800b594:	f8c8 2000 	str.w	r2, [r8]
 800b598:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b59c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b5a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b5a2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b5ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b5b2:	4b9c      	ldr	r3, [pc, #624]	@ (800b824 <_printf_float+0x2cc>)
 800b5b4:	f7f9 fa2a 	bl	8004a0c <__aeabi_dcmpun>
 800b5b8:	bb70      	cbnz	r0, 800b618 <_printf_float+0xc0>
 800b5ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b5be:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c2:	4b98      	ldr	r3, [pc, #608]	@ (800b824 <_printf_float+0x2cc>)
 800b5c4:	f7f9 fa04 	bl	80049d0 <__aeabi_dcmple>
 800b5c8:	bb30      	cbnz	r0, 800b618 <_printf_float+0xc0>
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	4640      	mov	r0, r8
 800b5d0:	4649      	mov	r1, r9
 800b5d2:	f7f9 f9f3 	bl	80049bc <__aeabi_dcmplt>
 800b5d6:	b110      	cbz	r0, 800b5de <_printf_float+0x86>
 800b5d8:	232d      	movs	r3, #45	@ 0x2d
 800b5da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5de:	4a92      	ldr	r2, [pc, #584]	@ (800b828 <_printf_float+0x2d0>)
 800b5e0:	4b92      	ldr	r3, [pc, #584]	@ (800b82c <_printf_float+0x2d4>)
 800b5e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b5e6:	bf8c      	ite	hi
 800b5e8:	4690      	movhi	r8, r2
 800b5ea:	4698      	movls	r8, r3
 800b5ec:	2303      	movs	r3, #3
 800b5ee:	f04f 0900 	mov.w	r9, #0
 800b5f2:	6123      	str	r3, [r4, #16]
 800b5f4:	f02b 0304 	bic.w	r3, fp, #4
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	4633      	mov	r3, r6
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	4628      	mov	r0, r5
 800b600:	9700      	str	r7, [sp, #0]
 800b602:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b604:	f000 f9d4 	bl	800b9b0 <_printf_common>
 800b608:	3001      	adds	r0, #1
 800b60a:	f040 8090 	bne.w	800b72e <_printf_float+0x1d6>
 800b60e:	f04f 30ff 	mov.w	r0, #4294967295
 800b612:	b011      	add	sp, #68	@ 0x44
 800b614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b618:	4642      	mov	r2, r8
 800b61a:	464b      	mov	r3, r9
 800b61c:	4640      	mov	r0, r8
 800b61e:	4649      	mov	r1, r9
 800b620:	f7f9 f9f4 	bl	8004a0c <__aeabi_dcmpun>
 800b624:	b148      	cbz	r0, 800b63a <_printf_float+0xe2>
 800b626:	464b      	mov	r3, r9
 800b628:	2b00      	cmp	r3, #0
 800b62a:	bfb8      	it	lt
 800b62c:	232d      	movlt	r3, #45	@ 0x2d
 800b62e:	4a80      	ldr	r2, [pc, #512]	@ (800b830 <_printf_float+0x2d8>)
 800b630:	bfb8      	it	lt
 800b632:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b636:	4b7f      	ldr	r3, [pc, #508]	@ (800b834 <_printf_float+0x2dc>)
 800b638:	e7d3      	b.n	800b5e2 <_printf_float+0x8a>
 800b63a:	6863      	ldr	r3, [r4, #4]
 800b63c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b640:	1c5a      	adds	r2, r3, #1
 800b642:	d13f      	bne.n	800b6c4 <_printf_float+0x16c>
 800b644:	2306      	movs	r3, #6
 800b646:	6063      	str	r3, [r4, #4]
 800b648:	2200      	movs	r2, #0
 800b64a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b64e:	6023      	str	r3, [r4, #0]
 800b650:	9206      	str	r2, [sp, #24]
 800b652:	aa0e      	add	r2, sp, #56	@ 0x38
 800b654:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b658:	aa0d      	add	r2, sp, #52	@ 0x34
 800b65a:	9203      	str	r2, [sp, #12]
 800b65c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b660:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b664:	6863      	ldr	r3, [r4, #4]
 800b666:	4642      	mov	r2, r8
 800b668:	9300      	str	r3, [sp, #0]
 800b66a:	4628      	mov	r0, r5
 800b66c:	464b      	mov	r3, r9
 800b66e:	910a      	str	r1, [sp, #40]	@ 0x28
 800b670:	f7ff fed4 	bl	800b41c <__cvt>
 800b674:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b676:	4680      	mov	r8, r0
 800b678:	2947      	cmp	r1, #71	@ 0x47
 800b67a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b67c:	d128      	bne.n	800b6d0 <_printf_float+0x178>
 800b67e:	1cc8      	adds	r0, r1, #3
 800b680:	db02      	blt.n	800b688 <_printf_float+0x130>
 800b682:	6863      	ldr	r3, [r4, #4]
 800b684:	4299      	cmp	r1, r3
 800b686:	dd40      	ble.n	800b70a <_printf_float+0x1b2>
 800b688:	f1aa 0a02 	sub.w	sl, sl, #2
 800b68c:	fa5f fa8a 	uxtb.w	sl, sl
 800b690:	4652      	mov	r2, sl
 800b692:	3901      	subs	r1, #1
 800b694:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b698:	910d      	str	r1, [sp, #52]	@ 0x34
 800b69a:	f7ff ff23 	bl	800b4e4 <__exponent>
 800b69e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6a0:	4681      	mov	r9, r0
 800b6a2:	1813      	adds	r3, r2, r0
 800b6a4:	2a01      	cmp	r2, #1
 800b6a6:	6123      	str	r3, [r4, #16]
 800b6a8:	dc02      	bgt.n	800b6b0 <_printf_float+0x158>
 800b6aa:	6822      	ldr	r2, [r4, #0]
 800b6ac:	07d2      	lsls	r2, r2, #31
 800b6ae:	d501      	bpl.n	800b6b4 <_printf_float+0x15c>
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	6123      	str	r3, [r4, #16]
 800b6b4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d09e      	beq.n	800b5fa <_printf_float+0xa2>
 800b6bc:	232d      	movs	r3, #45	@ 0x2d
 800b6be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6c2:	e79a      	b.n	800b5fa <_printf_float+0xa2>
 800b6c4:	2947      	cmp	r1, #71	@ 0x47
 800b6c6:	d1bf      	bne.n	800b648 <_printf_float+0xf0>
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1bd      	bne.n	800b648 <_printf_float+0xf0>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e7ba      	b.n	800b646 <_printf_float+0xee>
 800b6d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b6d4:	d9dc      	bls.n	800b690 <_printf_float+0x138>
 800b6d6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b6da:	d118      	bne.n	800b70e <_printf_float+0x1b6>
 800b6dc:	2900      	cmp	r1, #0
 800b6de:	6863      	ldr	r3, [r4, #4]
 800b6e0:	dd0b      	ble.n	800b6fa <_printf_float+0x1a2>
 800b6e2:	6121      	str	r1, [r4, #16]
 800b6e4:	b913      	cbnz	r3, 800b6ec <_printf_float+0x194>
 800b6e6:	6822      	ldr	r2, [r4, #0]
 800b6e8:	07d0      	lsls	r0, r2, #31
 800b6ea:	d502      	bpl.n	800b6f2 <_printf_float+0x19a>
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	440b      	add	r3, r1
 800b6f0:	6123      	str	r3, [r4, #16]
 800b6f2:	f04f 0900 	mov.w	r9, #0
 800b6f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b6f8:	e7dc      	b.n	800b6b4 <_printf_float+0x15c>
 800b6fa:	b913      	cbnz	r3, 800b702 <_printf_float+0x1aa>
 800b6fc:	6822      	ldr	r2, [r4, #0]
 800b6fe:	07d2      	lsls	r2, r2, #31
 800b700:	d501      	bpl.n	800b706 <_printf_float+0x1ae>
 800b702:	3302      	adds	r3, #2
 800b704:	e7f4      	b.n	800b6f0 <_printf_float+0x198>
 800b706:	2301      	movs	r3, #1
 800b708:	e7f2      	b.n	800b6f0 <_printf_float+0x198>
 800b70a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b70e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b710:	4299      	cmp	r1, r3
 800b712:	db05      	blt.n	800b720 <_printf_float+0x1c8>
 800b714:	6823      	ldr	r3, [r4, #0]
 800b716:	6121      	str	r1, [r4, #16]
 800b718:	07d8      	lsls	r0, r3, #31
 800b71a:	d5ea      	bpl.n	800b6f2 <_printf_float+0x19a>
 800b71c:	1c4b      	adds	r3, r1, #1
 800b71e:	e7e7      	b.n	800b6f0 <_printf_float+0x198>
 800b720:	2900      	cmp	r1, #0
 800b722:	bfcc      	ite	gt
 800b724:	2201      	movgt	r2, #1
 800b726:	f1c1 0202 	rsble	r2, r1, #2
 800b72a:	4413      	add	r3, r2
 800b72c:	e7e0      	b.n	800b6f0 <_printf_float+0x198>
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	055a      	lsls	r2, r3, #21
 800b732:	d407      	bmi.n	800b744 <_printf_float+0x1ec>
 800b734:	6923      	ldr	r3, [r4, #16]
 800b736:	4642      	mov	r2, r8
 800b738:	4631      	mov	r1, r6
 800b73a:	4628      	mov	r0, r5
 800b73c:	47b8      	blx	r7
 800b73e:	3001      	adds	r0, #1
 800b740:	d12b      	bne.n	800b79a <_printf_float+0x242>
 800b742:	e764      	b.n	800b60e <_printf_float+0xb6>
 800b744:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b748:	f240 80dc 	bls.w	800b904 <_printf_float+0x3ac>
 800b74c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b750:	2200      	movs	r2, #0
 800b752:	2300      	movs	r3, #0
 800b754:	f7f9 f928 	bl	80049a8 <__aeabi_dcmpeq>
 800b758:	2800      	cmp	r0, #0
 800b75a:	d033      	beq.n	800b7c4 <_printf_float+0x26c>
 800b75c:	2301      	movs	r3, #1
 800b75e:	4631      	mov	r1, r6
 800b760:	4628      	mov	r0, r5
 800b762:	4a35      	ldr	r2, [pc, #212]	@ (800b838 <_printf_float+0x2e0>)
 800b764:	47b8      	blx	r7
 800b766:	3001      	adds	r0, #1
 800b768:	f43f af51 	beq.w	800b60e <_printf_float+0xb6>
 800b76c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b770:	4543      	cmp	r3, r8
 800b772:	db02      	blt.n	800b77a <_printf_float+0x222>
 800b774:	6823      	ldr	r3, [r4, #0]
 800b776:	07d8      	lsls	r0, r3, #31
 800b778:	d50f      	bpl.n	800b79a <_printf_float+0x242>
 800b77a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b77e:	4631      	mov	r1, r6
 800b780:	4628      	mov	r0, r5
 800b782:	47b8      	blx	r7
 800b784:	3001      	adds	r0, #1
 800b786:	f43f af42 	beq.w	800b60e <_printf_float+0xb6>
 800b78a:	f04f 0900 	mov.w	r9, #0
 800b78e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b792:	f104 0a1a 	add.w	sl, r4, #26
 800b796:	45c8      	cmp	r8, r9
 800b798:	dc09      	bgt.n	800b7ae <_printf_float+0x256>
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	079b      	lsls	r3, r3, #30
 800b79e:	f100 8102 	bmi.w	800b9a6 <_printf_float+0x44e>
 800b7a2:	68e0      	ldr	r0, [r4, #12]
 800b7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7a6:	4298      	cmp	r0, r3
 800b7a8:	bfb8      	it	lt
 800b7aa:	4618      	movlt	r0, r3
 800b7ac:	e731      	b.n	800b612 <_printf_float+0xba>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	4652      	mov	r2, sl
 800b7b2:	4631      	mov	r1, r6
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	47b8      	blx	r7
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	f43f af28 	beq.w	800b60e <_printf_float+0xb6>
 800b7be:	f109 0901 	add.w	r9, r9, #1
 800b7c2:	e7e8      	b.n	800b796 <_printf_float+0x23e>
 800b7c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	dc38      	bgt.n	800b83c <_printf_float+0x2e4>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	4631      	mov	r1, r6
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	4a19      	ldr	r2, [pc, #100]	@ (800b838 <_printf_float+0x2e0>)
 800b7d2:	47b8      	blx	r7
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	f43f af1a 	beq.w	800b60e <_printf_float+0xb6>
 800b7da:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b7de:	ea59 0303 	orrs.w	r3, r9, r3
 800b7e2:	d102      	bne.n	800b7ea <_printf_float+0x292>
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	07d9      	lsls	r1, r3, #31
 800b7e8:	d5d7      	bpl.n	800b79a <_printf_float+0x242>
 800b7ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b7ee:	4631      	mov	r1, r6
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	47b8      	blx	r7
 800b7f4:	3001      	adds	r0, #1
 800b7f6:	f43f af0a 	beq.w	800b60e <_printf_float+0xb6>
 800b7fa:	f04f 0a00 	mov.w	sl, #0
 800b7fe:	f104 0b1a 	add.w	fp, r4, #26
 800b802:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b804:	425b      	negs	r3, r3
 800b806:	4553      	cmp	r3, sl
 800b808:	dc01      	bgt.n	800b80e <_printf_float+0x2b6>
 800b80a:	464b      	mov	r3, r9
 800b80c:	e793      	b.n	800b736 <_printf_float+0x1de>
 800b80e:	2301      	movs	r3, #1
 800b810:	465a      	mov	r2, fp
 800b812:	4631      	mov	r1, r6
 800b814:	4628      	mov	r0, r5
 800b816:	47b8      	blx	r7
 800b818:	3001      	adds	r0, #1
 800b81a:	f43f aef8 	beq.w	800b60e <_printf_float+0xb6>
 800b81e:	f10a 0a01 	add.w	sl, sl, #1
 800b822:	e7ee      	b.n	800b802 <_printf_float+0x2aa>
 800b824:	7fefffff 	.word	0x7fefffff
 800b828:	0800eab8 	.word	0x0800eab8
 800b82c:	0800eab4 	.word	0x0800eab4
 800b830:	0800eac0 	.word	0x0800eac0
 800b834:	0800eabc 	.word	0x0800eabc
 800b838:	0800eac4 	.word	0x0800eac4
 800b83c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b83e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b842:	4553      	cmp	r3, sl
 800b844:	bfa8      	it	ge
 800b846:	4653      	movge	r3, sl
 800b848:	2b00      	cmp	r3, #0
 800b84a:	4699      	mov	r9, r3
 800b84c:	dc36      	bgt.n	800b8bc <_printf_float+0x364>
 800b84e:	f04f 0b00 	mov.w	fp, #0
 800b852:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b856:	f104 021a 	add.w	r2, r4, #26
 800b85a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b85c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b85e:	eba3 0309 	sub.w	r3, r3, r9
 800b862:	455b      	cmp	r3, fp
 800b864:	dc31      	bgt.n	800b8ca <_printf_float+0x372>
 800b866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b868:	459a      	cmp	sl, r3
 800b86a:	dc3a      	bgt.n	800b8e2 <_printf_float+0x38a>
 800b86c:	6823      	ldr	r3, [r4, #0]
 800b86e:	07da      	lsls	r2, r3, #31
 800b870:	d437      	bmi.n	800b8e2 <_printf_float+0x38a>
 800b872:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b874:	ebaa 0903 	sub.w	r9, sl, r3
 800b878:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b87a:	ebaa 0303 	sub.w	r3, sl, r3
 800b87e:	4599      	cmp	r9, r3
 800b880:	bfa8      	it	ge
 800b882:	4699      	movge	r9, r3
 800b884:	f1b9 0f00 	cmp.w	r9, #0
 800b888:	dc33      	bgt.n	800b8f2 <_printf_float+0x39a>
 800b88a:	f04f 0800 	mov.w	r8, #0
 800b88e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b892:	f104 0b1a 	add.w	fp, r4, #26
 800b896:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b898:	ebaa 0303 	sub.w	r3, sl, r3
 800b89c:	eba3 0309 	sub.w	r3, r3, r9
 800b8a0:	4543      	cmp	r3, r8
 800b8a2:	f77f af7a 	ble.w	800b79a <_printf_float+0x242>
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	465a      	mov	r2, fp
 800b8aa:	4631      	mov	r1, r6
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	47b8      	blx	r7
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	f43f aeac 	beq.w	800b60e <_printf_float+0xb6>
 800b8b6:	f108 0801 	add.w	r8, r8, #1
 800b8ba:	e7ec      	b.n	800b896 <_printf_float+0x33e>
 800b8bc:	4642      	mov	r2, r8
 800b8be:	4631      	mov	r1, r6
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	47b8      	blx	r7
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	d1c2      	bne.n	800b84e <_printf_float+0x2f6>
 800b8c8:	e6a1      	b.n	800b60e <_printf_float+0xb6>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	4631      	mov	r1, r6
 800b8ce:	4628      	mov	r0, r5
 800b8d0:	920a      	str	r2, [sp, #40]	@ 0x28
 800b8d2:	47b8      	blx	r7
 800b8d4:	3001      	adds	r0, #1
 800b8d6:	f43f ae9a 	beq.w	800b60e <_printf_float+0xb6>
 800b8da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b8dc:	f10b 0b01 	add.w	fp, fp, #1
 800b8e0:	e7bb      	b.n	800b85a <_printf_float+0x302>
 800b8e2:	4631      	mov	r1, r6
 800b8e4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	47b8      	blx	r7
 800b8ec:	3001      	adds	r0, #1
 800b8ee:	d1c0      	bne.n	800b872 <_printf_float+0x31a>
 800b8f0:	e68d      	b.n	800b60e <_printf_float+0xb6>
 800b8f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b8f4:	464b      	mov	r3, r9
 800b8f6:	4631      	mov	r1, r6
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	4442      	add	r2, r8
 800b8fc:	47b8      	blx	r7
 800b8fe:	3001      	adds	r0, #1
 800b900:	d1c3      	bne.n	800b88a <_printf_float+0x332>
 800b902:	e684      	b.n	800b60e <_printf_float+0xb6>
 800b904:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b908:	f1ba 0f01 	cmp.w	sl, #1
 800b90c:	dc01      	bgt.n	800b912 <_printf_float+0x3ba>
 800b90e:	07db      	lsls	r3, r3, #31
 800b910:	d536      	bpl.n	800b980 <_printf_float+0x428>
 800b912:	2301      	movs	r3, #1
 800b914:	4642      	mov	r2, r8
 800b916:	4631      	mov	r1, r6
 800b918:	4628      	mov	r0, r5
 800b91a:	47b8      	blx	r7
 800b91c:	3001      	adds	r0, #1
 800b91e:	f43f ae76 	beq.w	800b60e <_printf_float+0xb6>
 800b922:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b926:	4631      	mov	r1, r6
 800b928:	4628      	mov	r0, r5
 800b92a:	47b8      	blx	r7
 800b92c:	3001      	adds	r0, #1
 800b92e:	f43f ae6e 	beq.w	800b60e <_printf_float+0xb6>
 800b932:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b936:	2200      	movs	r2, #0
 800b938:	2300      	movs	r3, #0
 800b93a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b93e:	f7f9 f833 	bl	80049a8 <__aeabi_dcmpeq>
 800b942:	b9c0      	cbnz	r0, 800b976 <_printf_float+0x41e>
 800b944:	4653      	mov	r3, sl
 800b946:	f108 0201 	add.w	r2, r8, #1
 800b94a:	4631      	mov	r1, r6
 800b94c:	4628      	mov	r0, r5
 800b94e:	47b8      	blx	r7
 800b950:	3001      	adds	r0, #1
 800b952:	d10c      	bne.n	800b96e <_printf_float+0x416>
 800b954:	e65b      	b.n	800b60e <_printf_float+0xb6>
 800b956:	2301      	movs	r3, #1
 800b958:	465a      	mov	r2, fp
 800b95a:	4631      	mov	r1, r6
 800b95c:	4628      	mov	r0, r5
 800b95e:	47b8      	blx	r7
 800b960:	3001      	adds	r0, #1
 800b962:	f43f ae54 	beq.w	800b60e <_printf_float+0xb6>
 800b966:	f108 0801 	add.w	r8, r8, #1
 800b96a:	45d0      	cmp	r8, sl
 800b96c:	dbf3      	blt.n	800b956 <_printf_float+0x3fe>
 800b96e:	464b      	mov	r3, r9
 800b970:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b974:	e6e0      	b.n	800b738 <_printf_float+0x1e0>
 800b976:	f04f 0800 	mov.w	r8, #0
 800b97a:	f104 0b1a 	add.w	fp, r4, #26
 800b97e:	e7f4      	b.n	800b96a <_printf_float+0x412>
 800b980:	2301      	movs	r3, #1
 800b982:	4642      	mov	r2, r8
 800b984:	e7e1      	b.n	800b94a <_printf_float+0x3f2>
 800b986:	2301      	movs	r3, #1
 800b988:	464a      	mov	r2, r9
 800b98a:	4631      	mov	r1, r6
 800b98c:	4628      	mov	r0, r5
 800b98e:	47b8      	blx	r7
 800b990:	3001      	adds	r0, #1
 800b992:	f43f ae3c 	beq.w	800b60e <_printf_float+0xb6>
 800b996:	f108 0801 	add.w	r8, r8, #1
 800b99a:	68e3      	ldr	r3, [r4, #12]
 800b99c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b99e:	1a5b      	subs	r3, r3, r1
 800b9a0:	4543      	cmp	r3, r8
 800b9a2:	dcf0      	bgt.n	800b986 <_printf_float+0x42e>
 800b9a4:	e6fd      	b.n	800b7a2 <_printf_float+0x24a>
 800b9a6:	f04f 0800 	mov.w	r8, #0
 800b9aa:	f104 0919 	add.w	r9, r4, #25
 800b9ae:	e7f4      	b.n	800b99a <_printf_float+0x442>

0800b9b0 <_printf_common>:
 800b9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9b4:	4616      	mov	r6, r2
 800b9b6:	4698      	mov	r8, r3
 800b9b8:	688a      	ldr	r2, [r1, #8]
 800b9ba:	690b      	ldr	r3, [r1, #16]
 800b9bc:	4607      	mov	r7, r0
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	bfb8      	it	lt
 800b9c2:	4613      	movlt	r3, r2
 800b9c4:	6033      	str	r3, [r6, #0]
 800b9c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9d0:	b10a      	cbz	r2, 800b9d6 <_printf_common+0x26>
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	6033      	str	r3, [r6, #0]
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	0699      	lsls	r1, r3, #26
 800b9da:	bf42      	ittt	mi
 800b9dc:	6833      	ldrmi	r3, [r6, #0]
 800b9de:	3302      	addmi	r3, #2
 800b9e0:	6033      	strmi	r3, [r6, #0]
 800b9e2:	6825      	ldr	r5, [r4, #0]
 800b9e4:	f015 0506 	ands.w	r5, r5, #6
 800b9e8:	d106      	bne.n	800b9f8 <_printf_common+0x48>
 800b9ea:	f104 0a19 	add.w	sl, r4, #25
 800b9ee:	68e3      	ldr	r3, [r4, #12]
 800b9f0:	6832      	ldr	r2, [r6, #0]
 800b9f2:	1a9b      	subs	r3, r3, r2
 800b9f4:	42ab      	cmp	r3, r5
 800b9f6:	dc2b      	bgt.n	800ba50 <_printf_common+0xa0>
 800b9f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b9fc:	6822      	ldr	r2, [r4, #0]
 800b9fe:	3b00      	subs	r3, #0
 800ba00:	bf18      	it	ne
 800ba02:	2301      	movne	r3, #1
 800ba04:	0692      	lsls	r2, r2, #26
 800ba06:	d430      	bmi.n	800ba6a <_printf_common+0xba>
 800ba08:	4641      	mov	r1, r8
 800ba0a:	4638      	mov	r0, r7
 800ba0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba10:	47c8      	blx	r9
 800ba12:	3001      	adds	r0, #1
 800ba14:	d023      	beq.n	800ba5e <_printf_common+0xae>
 800ba16:	6823      	ldr	r3, [r4, #0]
 800ba18:	6922      	ldr	r2, [r4, #16]
 800ba1a:	f003 0306 	and.w	r3, r3, #6
 800ba1e:	2b04      	cmp	r3, #4
 800ba20:	bf14      	ite	ne
 800ba22:	2500      	movne	r5, #0
 800ba24:	6833      	ldreq	r3, [r6, #0]
 800ba26:	f04f 0600 	mov.w	r6, #0
 800ba2a:	bf08      	it	eq
 800ba2c:	68e5      	ldreq	r5, [r4, #12]
 800ba2e:	f104 041a 	add.w	r4, r4, #26
 800ba32:	bf08      	it	eq
 800ba34:	1aed      	subeq	r5, r5, r3
 800ba36:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ba3a:	bf08      	it	eq
 800ba3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba40:	4293      	cmp	r3, r2
 800ba42:	bfc4      	itt	gt
 800ba44:	1a9b      	subgt	r3, r3, r2
 800ba46:	18ed      	addgt	r5, r5, r3
 800ba48:	42b5      	cmp	r5, r6
 800ba4a:	d11a      	bne.n	800ba82 <_printf_common+0xd2>
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	e008      	b.n	800ba62 <_printf_common+0xb2>
 800ba50:	2301      	movs	r3, #1
 800ba52:	4652      	mov	r2, sl
 800ba54:	4641      	mov	r1, r8
 800ba56:	4638      	mov	r0, r7
 800ba58:	47c8      	blx	r9
 800ba5a:	3001      	adds	r0, #1
 800ba5c:	d103      	bne.n	800ba66 <_printf_common+0xb6>
 800ba5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba66:	3501      	adds	r5, #1
 800ba68:	e7c1      	b.n	800b9ee <_printf_common+0x3e>
 800ba6a:	2030      	movs	r0, #48	@ 0x30
 800ba6c:	18e1      	adds	r1, r4, r3
 800ba6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba72:	1c5a      	adds	r2, r3, #1
 800ba74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba78:	4422      	add	r2, r4
 800ba7a:	3302      	adds	r3, #2
 800ba7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba80:	e7c2      	b.n	800ba08 <_printf_common+0x58>
 800ba82:	2301      	movs	r3, #1
 800ba84:	4622      	mov	r2, r4
 800ba86:	4641      	mov	r1, r8
 800ba88:	4638      	mov	r0, r7
 800ba8a:	47c8      	blx	r9
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	d0e6      	beq.n	800ba5e <_printf_common+0xae>
 800ba90:	3601      	adds	r6, #1
 800ba92:	e7d9      	b.n	800ba48 <_printf_common+0x98>

0800ba94 <_printf_i>:
 800ba94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba98:	7e0f      	ldrb	r7, [r1, #24]
 800ba9a:	4691      	mov	r9, r2
 800ba9c:	2f78      	cmp	r7, #120	@ 0x78
 800ba9e:	4680      	mov	r8, r0
 800baa0:	460c      	mov	r4, r1
 800baa2:	469a      	mov	sl, r3
 800baa4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800baa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800baaa:	d807      	bhi.n	800babc <_printf_i+0x28>
 800baac:	2f62      	cmp	r7, #98	@ 0x62
 800baae:	d80a      	bhi.n	800bac6 <_printf_i+0x32>
 800bab0:	2f00      	cmp	r7, #0
 800bab2:	f000 80d1 	beq.w	800bc58 <_printf_i+0x1c4>
 800bab6:	2f58      	cmp	r7, #88	@ 0x58
 800bab8:	f000 80b8 	beq.w	800bc2c <_printf_i+0x198>
 800babc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bac0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bac4:	e03a      	b.n	800bb3c <_printf_i+0xa8>
 800bac6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800baca:	2b15      	cmp	r3, #21
 800bacc:	d8f6      	bhi.n	800babc <_printf_i+0x28>
 800bace:	a101      	add	r1, pc, #4	@ (adr r1, 800bad4 <_printf_i+0x40>)
 800bad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bad4:	0800bb2d 	.word	0x0800bb2d
 800bad8:	0800bb41 	.word	0x0800bb41
 800badc:	0800babd 	.word	0x0800babd
 800bae0:	0800babd 	.word	0x0800babd
 800bae4:	0800babd 	.word	0x0800babd
 800bae8:	0800babd 	.word	0x0800babd
 800baec:	0800bb41 	.word	0x0800bb41
 800baf0:	0800babd 	.word	0x0800babd
 800baf4:	0800babd 	.word	0x0800babd
 800baf8:	0800babd 	.word	0x0800babd
 800bafc:	0800babd 	.word	0x0800babd
 800bb00:	0800bc3f 	.word	0x0800bc3f
 800bb04:	0800bb6b 	.word	0x0800bb6b
 800bb08:	0800bbf9 	.word	0x0800bbf9
 800bb0c:	0800babd 	.word	0x0800babd
 800bb10:	0800babd 	.word	0x0800babd
 800bb14:	0800bc61 	.word	0x0800bc61
 800bb18:	0800babd 	.word	0x0800babd
 800bb1c:	0800bb6b 	.word	0x0800bb6b
 800bb20:	0800babd 	.word	0x0800babd
 800bb24:	0800babd 	.word	0x0800babd
 800bb28:	0800bc01 	.word	0x0800bc01
 800bb2c:	6833      	ldr	r3, [r6, #0]
 800bb2e:	1d1a      	adds	r2, r3, #4
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	6032      	str	r2, [r6, #0]
 800bb34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e09c      	b.n	800bc7a <_printf_i+0x1e6>
 800bb40:	6833      	ldr	r3, [r6, #0]
 800bb42:	6820      	ldr	r0, [r4, #0]
 800bb44:	1d19      	adds	r1, r3, #4
 800bb46:	6031      	str	r1, [r6, #0]
 800bb48:	0606      	lsls	r6, r0, #24
 800bb4a:	d501      	bpl.n	800bb50 <_printf_i+0xbc>
 800bb4c:	681d      	ldr	r5, [r3, #0]
 800bb4e:	e003      	b.n	800bb58 <_printf_i+0xc4>
 800bb50:	0645      	lsls	r5, r0, #25
 800bb52:	d5fb      	bpl.n	800bb4c <_printf_i+0xb8>
 800bb54:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb58:	2d00      	cmp	r5, #0
 800bb5a:	da03      	bge.n	800bb64 <_printf_i+0xd0>
 800bb5c:	232d      	movs	r3, #45	@ 0x2d
 800bb5e:	426d      	negs	r5, r5
 800bb60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb64:	230a      	movs	r3, #10
 800bb66:	4858      	ldr	r0, [pc, #352]	@ (800bcc8 <_printf_i+0x234>)
 800bb68:	e011      	b.n	800bb8e <_printf_i+0xfa>
 800bb6a:	6821      	ldr	r1, [r4, #0]
 800bb6c:	6833      	ldr	r3, [r6, #0]
 800bb6e:	0608      	lsls	r0, r1, #24
 800bb70:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb74:	d402      	bmi.n	800bb7c <_printf_i+0xe8>
 800bb76:	0649      	lsls	r1, r1, #25
 800bb78:	bf48      	it	mi
 800bb7a:	b2ad      	uxthmi	r5, r5
 800bb7c:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb7e:	6033      	str	r3, [r6, #0]
 800bb80:	bf14      	ite	ne
 800bb82:	230a      	movne	r3, #10
 800bb84:	2308      	moveq	r3, #8
 800bb86:	4850      	ldr	r0, [pc, #320]	@ (800bcc8 <_printf_i+0x234>)
 800bb88:	2100      	movs	r1, #0
 800bb8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb8e:	6866      	ldr	r6, [r4, #4]
 800bb90:	2e00      	cmp	r6, #0
 800bb92:	60a6      	str	r6, [r4, #8]
 800bb94:	db05      	blt.n	800bba2 <_printf_i+0x10e>
 800bb96:	6821      	ldr	r1, [r4, #0]
 800bb98:	432e      	orrs	r6, r5
 800bb9a:	f021 0104 	bic.w	r1, r1, #4
 800bb9e:	6021      	str	r1, [r4, #0]
 800bba0:	d04b      	beq.n	800bc3a <_printf_i+0x1a6>
 800bba2:	4616      	mov	r6, r2
 800bba4:	fbb5 f1f3 	udiv	r1, r5, r3
 800bba8:	fb03 5711 	mls	r7, r3, r1, r5
 800bbac:	5dc7      	ldrb	r7, [r0, r7]
 800bbae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbb2:	462f      	mov	r7, r5
 800bbb4:	42bb      	cmp	r3, r7
 800bbb6:	460d      	mov	r5, r1
 800bbb8:	d9f4      	bls.n	800bba4 <_printf_i+0x110>
 800bbba:	2b08      	cmp	r3, #8
 800bbbc:	d10b      	bne.n	800bbd6 <_printf_i+0x142>
 800bbbe:	6823      	ldr	r3, [r4, #0]
 800bbc0:	07df      	lsls	r7, r3, #31
 800bbc2:	d508      	bpl.n	800bbd6 <_printf_i+0x142>
 800bbc4:	6923      	ldr	r3, [r4, #16]
 800bbc6:	6861      	ldr	r1, [r4, #4]
 800bbc8:	4299      	cmp	r1, r3
 800bbca:	bfde      	ittt	le
 800bbcc:	2330      	movle	r3, #48	@ 0x30
 800bbce:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bbd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bbd6:	1b92      	subs	r2, r2, r6
 800bbd8:	6122      	str	r2, [r4, #16]
 800bbda:	464b      	mov	r3, r9
 800bbdc:	4621      	mov	r1, r4
 800bbde:	4640      	mov	r0, r8
 800bbe0:	f8cd a000 	str.w	sl, [sp]
 800bbe4:	aa03      	add	r2, sp, #12
 800bbe6:	f7ff fee3 	bl	800b9b0 <_printf_common>
 800bbea:	3001      	adds	r0, #1
 800bbec:	d14a      	bne.n	800bc84 <_printf_i+0x1f0>
 800bbee:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf2:	b004      	add	sp, #16
 800bbf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbf8:	6823      	ldr	r3, [r4, #0]
 800bbfa:	f043 0320 	orr.w	r3, r3, #32
 800bbfe:	6023      	str	r3, [r4, #0]
 800bc00:	2778      	movs	r7, #120	@ 0x78
 800bc02:	4832      	ldr	r0, [pc, #200]	@ (800bccc <_printf_i+0x238>)
 800bc04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc08:	6823      	ldr	r3, [r4, #0]
 800bc0a:	6831      	ldr	r1, [r6, #0]
 800bc0c:	061f      	lsls	r7, r3, #24
 800bc0e:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc12:	d402      	bmi.n	800bc1a <_printf_i+0x186>
 800bc14:	065f      	lsls	r7, r3, #25
 800bc16:	bf48      	it	mi
 800bc18:	b2ad      	uxthmi	r5, r5
 800bc1a:	6031      	str	r1, [r6, #0]
 800bc1c:	07d9      	lsls	r1, r3, #31
 800bc1e:	bf44      	itt	mi
 800bc20:	f043 0320 	orrmi.w	r3, r3, #32
 800bc24:	6023      	strmi	r3, [r4, #0]
 800bc26:	b11d      	cbz	r5, 800bc30 <_printf_i+0x19c>
 800bc28:	2310      	movs	r3, #16
 800bc2a:	e7ad      	b.n	800bb88 <_printf_i+0xf4>
 800bc2c:	4826      	ldr	r0, [pc, #152]	@ (800bcc8 <_printf_i+0x234>)
 800bc2e:	e7e9      	b.n	800bc04 <_printf_i+0x170>
 800bc30:	6823      	ldr	r3, [r4, #0]
 800bc32:	f023 0320 	bic.w	r3, r3, #32
 800bc36:	6023      	str	r3, [r4, #0]
 800bc38:	e7f6      	b.n	800bc28 <_printf_i+0x194>
 800bc3a:	4616      	mov	r6, r2
 800bc3c:	e7bd      	b.n	800bbba <_printf_i+0x126>
 800bc3e:	6833      	ldr	r3, [r6, #0]
 800bc40:	6825      	ldr	r5, [r4, #0]
 800bc42:	1d18      	adds	r0, r3, #4
 800bc44:	6961      	ldr	r1, [r4, #20]
 800bc46:	6030      	str	r0, [r6, #0]
 800bc48:	062e      	lsls	r6, r5, #24
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	d501      	bpl.n	800bc52 <_printf_i+0x1be>
 800bc4e:	6019      	str	r1, [r3, #0]
 800bc50:	e002      	b.n	800bc58 <_printf_i+0x1c4>
 800bc52:	0668      	lsls	r0, r5, #25
 800bc54:	d5fb      	bpl.n	800bc4e <_printf_i+0x1ba>
 800bc56:	8019      	strh	r1, [r3, #0]
 800bc58:	2300      	movs	r3, #0
 800bc5a:	4616      	mov	r6, r2
 800bc5c:	6123      	str	r3, [r4, #16]
 800bc5e:	e7bc      	b.n	800bbda <_printf_i+0x146>
 800bc60:	6833      	ldr	r3, [r6, #0]
 800bc62:	2100      	movs	r1, #0
 800bc64:	1d1a      	adds	r2, r3, #4
 800bc66:	6032      	str	r2, [r6, #0]
 800bc68:	681e      	ldr	r6, [r3, #0]
 800bc6a:	6862      	ldr	r2, [r4, #4]
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f000 f9f0 	bl	800c052 <memchr>
 800bc72:	b108      	cbz	r0, 800bc78 <_printf_i+0x1e4>
 800bc74:	1b80      	subs	r0, r0, r6
 800bc76:	6060      	str	r0, [r4, #4]
 800bc78:	6863      	ldr	r3, [r4, #4]
 800bc7a:	6123      	str	r3, [r4, #16]
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc82:	e7aa      	b.n	800bbda <_printf_i+0x146>
 800bc84:	4632      	mov	r2, r6
 800bc86:	4649      	mov	r1, r9
 800bc88:	4640      	mov	r0, r8
 800bc8a:	6923      	ldr	r3, [r4, #16]
 800bc8c:	47d0      	blx	sl
 800bc8e:	3001      	adds	r0, #1
 800bc90:	d0ad      	beq.n	800bbee <_printf_i+0x15a>
 800bc92:	6823      	ldr	r3, [r4, #0]
 800bc94:	079b      	lsls	r3, r3, #30
 800bc96:	d413      	bmi.n	800bcc0 <_printf_i+0x22c>
 800bc98:	68e0      	ldr	r0, [r4, #12]
 800bc9a:	9b03      	ldr	r3, [sp, #12]
 800bc9c:	4298      	cmp	r0, r3
 800bc9e:	bfb8      	it	lt
 800bca0:	4618      	movlt	r0, r3
 800bca2:	e7a6      	b.n	800bbf2 <_printf_i+0x15e>
 800bca4:	2301      	movs	r3, #1
 800bca6:	4632      	mov	r2, r6
 800bca8:	4649      	mov	r1, r9
 800bcaa:	4640      	mov	r0, r8
 800bcac:	47d0      	blx	sl
 800bcae:	3001      	adds	r0, #1
 800bcb0:	d09d      	beq.n	800bbee <_printf_i+0x15a>
 800bcb2:	3501      	adds	r5, #1
 800bcb4:	68e3      	ldr	r3, [r4, #12]
 800bcb6:	9903      	ldr	r1, [sp, #12]
 800bcb8:	1a5b      	subs	r3, r3, r1
 800bcba:	42ab      	cmp	r3, r5
 800bcbc:	dcf2      	bgt.n	800bca4 <_printf_i+0x210>
 800bcbe:	e7eb      	b.n	800bc98 <_printf_i+0x204>
 800bcc0:	2500      	movs	r5, #0
 800bcc2:	f104 0619 	add.w	r6, r4, #25
 800bcc6:	e7f5      	b.n	800bcb4 <_printf_i+0x220>
 800bcc8:	0800eac6 	.word	0x0800eac6
 800bccc:	0800ead7 	.word	0x0800ead7

0800bcd0 <std>:
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	b510      	push	{r4, lr}
 800bcd4:	4604      	mov	r4, r0
 800bcd6:	e9c0 3300 	strd	r3, r3, [r0]
 800bcda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcde:	6083      	str	r3, [r0, #8]
 800bce0:	8181      	strh	r1, [r0, #12]
 800bce2:	6643      	str	r3, [r0, #100]	@ 0x64
 800bce4:	81c2      	strh	r2, [r0, #14]
 800bce6:	6183      	str	r3, [r0, #24]
 800bce8:	4619      	mov	r1, r3
 800bcea:	2208      	movs	r2, #8
 800bcec:	305c      	adds	r0, #92	@ 0x5c
 800bcee:	f000 f931 	bl	800bf54 <memset>
 800bcf2:	4b0d      	ldr	r3, [pc, #52]	@ (800bd28 <std+0x58>)
 800bcf4:	6224      	str	r4, [r4, #32]
 800bcf6:	6263      	str	r3, [r4, #36]	@ 0x24
 800bcf8:	4b0c      	ldr	r3, [pc, #48]	@ (800bd2c <std+0x5c>)
 800bcfa:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bcfc:	4b0c      	ldr	r3, [pc, #48]	@ (800bd30 <std+0x60>)
 800bcfe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bd00:	4b0c      	ldr	r3, [pc, #48]	@ (800bd34 <std+0x64>)
 800bd02:	6323      	str	r3, [r4, #48]	@ 0x30
 800bd04:	4b0c      	ldr	r3, [pc, #48]	@ (800bd38 <std+0x68>)
 800bd06:	429c      	cmp	r4, r3
 800bd08:	d006      	beq.n	800bd18 <std+0x48>
 800bd0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bd0e:	4294      	cmp	r4, r2
 800bd10:	d002      	beq.n	800bd18 <std+0x48>
 800bd12:	33d0      	adds	r3, #208	@ 0xd0
 800bd14:	429c      	cmp	r4, r3
 800bd16:	d105      	bne.n	800bd24 <std+0x54>
 800bd18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd20:	f000 b994 	b.w	800c04c <__retarget_lock_init_recursive>
 800bd24:	bd10      	pop	{r4, pc}
 800bd26:	bf00      	nop
 800bd28:	0800be55 	.word	0x0800be55
 800bd2c:	0800be77 	.word	0x0800be77
 800bd30:	0800beaf 	.word	0x0800beaf
 800bd34:	0800bed3 	.word	0x0800bed3
 800bd38:	20000658 	.word	0x20000658

0800bd3c <stdio_exit_handler>:
 800bd3c:	4a02      	ldr	r2, [pc, #8]	@ (800bd48 <stdio_exit_handler+0xc>)
 800bd3e:	4903      	ldr	r1, [pc, #12]	@ (800bd4c <stdio_exit_handler+0x10>)
 800bd40:	4803      	ldr	r0, [pc, #12]	@ (800bd50 <stdio_exit_handler+0x14>)
 800bd42:	f000 b869 	b.w	800be18 <_fwalk_sglue>
 800bd46:	bf00      	nop
 800bd48:	20000034 	.word	0x20000034
 800bd4c:	0800d9c9 	.word	0x0800d9c9
 800bd50:	20000044 	.word	0x20000044

0800bd54 <cleanup_stdio>:
 800bd54:	6841      	ldr	r1, [r0, #4]
 800bd56:	4b0c      	ldr	r3, [pc, #48]	@ (800bd88 <cleanup_stdio+0x34>)
 800bd58:	b510      	push	{r4, lr}
 800bd5a:	4299      	cmp	r1, r3
 800bd5c:	4604      	mov	r4, r0
 800bd5e:	d001      	beq.n	800bd64 <cleanup_stdio+0x10>
 800bd60:	f001 fe32 	bl	800d9c8 <_fflush_r>
 800bd64:	68a1      	ldr	r1, [r4, #8]
 800bd66:	4b09      	ldr	r3, [pc, #36]	@ (800bd8c <cleanup_stdio+0x38>)
 800bd68:	4299      	cmp	r1, r3
 800bd6a:	d002      	beq.n	800bd72 <cleanup_stdio+0x1e>
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f001 fe2b 	bl	800d9c8 <_fflush_r>
 800bd72:	68e1      	ldr	r1, [r4, #12]
 800bd74:	4b06      	ldr	r3, [pc, #24]	@ (800bd90 <cleanup_stdio+0x3c>)
 800bd76:	4299      	cmp	r1, r3
 800bd78:	d004      	beq.n	800bd84 <cleanup_stdio+0x30>
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd80:	f001 be22 	b.w	800d9c8 <_fflush_r>
 800bd84:	bd10      	pop	{r4, pc}
 800bd86:	bf00      	nop
 800bd88:	20000658 	.word	0x20000658
 800bd8c:	200006c0 	.word	0x200006c0
 800bd90:	20000728 	.word	0x20000728

0800bd94 <global_stdio_init.part.0>:
 800bd94:	b510      	push	{r4, lr}
 800bd96:	4b0b      	ldr	r3, [pc, #44]	@ (800bdc4 <global_stdio_init.part.0+0x30>)
 800bd98:	4c0b      	ldr	r4, [pc, #44]	@ (800bdc8 <global_stdio_init.part.0+0x34>)
 800bd9a:	4a0c      	ldr	r2, [pc, #48]	@ (800bdcc <global_stdio_init.part.0+0x38>)
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	601a      	str	r2, [r3, #0]
 800bda0:	2104      	movs	r1, #4
 800bda2:	2200      	movs	r2, #0
 800bda4:	f7ff ff94 	bl	800bcd0 <std>
 800bda8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bdac:	2201      	movs	r2, #1
 800bdae:	2109      	movs	r1, #9
 800bdb0:	f7ff ff8e 	bl	800bcd0 <std>
 800bdb4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bdb8:	2202      	movs	r2, #2
 800bdba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdbe:	2112      	movs	r1, #18
 800bdc0:	f7ff bf86 	b.w	800bcd0 <std>
 800bdc4:	20000790 	.word	0x20000790
 800bdc8:	20000658 	.word	0x20000658
 800bdcc:	0800bd3d 	.word	0x0800bd3d

0800bdd0 <__sfp_lock_acquire>:
 800bdd0:	4801      	ldr	r0, [pc, #4]	@ (800bdd8 <__sfp_lock_acquire+0x8>)
 800bdd2:	f000 b93c 	b.w	800c04e <__retarget_lock_acquire_recursive>
 800bdd6:	bf00      	nop
 800bdd8:	20000799 	.word	0x20000799

0800bddc <__sfp_lock_release>:
 800bddc:	4801      	ldr	r0, [pc, #4]	@ (800bde4 <__sfp_lock_release+0x8>)
 800bdde:	f000 b937 	b.w	800c050 <__retarget_lock_release_recursive>
 800bde2:	bf00      	nop
 800bde4:	20000799 	.word	0x20000799

0800bde8 <__sinit>:
 800bde8:	b510      	push	{r4, lr}
 800bdea:	4604      	mov	r4, r0
 800bdec:	f7ff fff0 	bl	800bdd0 <__sfp_lock_acquire>
 800bdf0:	6a23      	ldr	r3, [r4, #32]
 800bdf2:	b11b      	cbz	r3, 800bdfc <__sinit+0x14>
 800bdf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdf8:	f7ff bff0 	b.w	800bddc <__sfp_lock_release>
 800bdfc:	4b04      	ldr	r3, [pc, #16]	@ (800be10 <__sinit+0x28>)
 800bdfe:	6223      	str	r3, [r4, #32]
 800be00:	4b04      	ldr	r3, [pc, #16]	@ (800be14 <__sinit+0x2c>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d1f5      	bne.n	800bdf4 <__sinit+0xc>
 800be08:	f7ff ffc4 	bl	800bd94 <global_stdio_init.part.0>
 800be0c:	e7f2      	b.n	800bdf4 <__sinit+0xc>
 800be0e:	bf00      	nop
 800be10:	0800bd55 	.word	0x0800bd55
 800be14:	20000790 	.word	0x20000790

0800be18 <_fwalk_sglue>:
 800be18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be1c:	4607      	mov	r7, r0
 800be1e:	4688      	mov	r8, r1
 800be20:	4614      	mov	r4, r2
 800be22:	2600      	movs	r6, #0
 800be24:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be28:	f1b9 0901 	subs.w	r9, r9, #1
 800be2c:	d505      	bpl.n	800be3a <_fwalk_sglue+0x22>
 800be2e:	6824      	ldr	r4, [r4, #0]
 800be30:	2c00      	cmp	r4, #0
 800be32:	d1f7      	bne.n	800be24 <_fwalk_sglue+0xc>
 800be34:	4630      	mov	r0, r6
 800be36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be3a:	89ab      	ldrh	r3, [r5, #12]
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	d907      	bls.n	800be50 <_fwalk_sglue+0x38>
 800be40:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be44:	3301      	adds	r3, #1
 800be46:	d003      	beq.n	800be50 <_fwalk_sglue+0x38>
 800be48:	4629      	mov	r1, r5
 800be4a:	4638      	mov	r0, r7
 800be4c:	47c0      	blx	r8
 800be4e:	4306      	orrs	r6, r0
 800be50:	3568      	adds	r5, #104	@ 0x68
 800be52:	e7e9      	b.n	800be28 <_fwalk_sglue+0x10>

0800be54 <__sread>:
 800be54:	b510      	push	{r4, lr}
 800be56:	460c      	mov	r4, r1
 800be58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be5c:	f000 f8a8 	bl	800bfb0 <_read_r>
 800be60:	2800      	cmp	r0, #0
 800be62:	bfab      	itete	ge
 800be64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800be66:	89a3      	ldrhlt	r3, [r4, #12]
 800be68:	181b      	addge	r3, r3, r0
 800be6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800be6e:	bfac      	ite	ge
 800be70:	6563      	strge	r3, [r4, #84]	@ 0x54
 800be72:	81a3      	strhlt	r3, [r4, #12]
 800be74:	bd10      	pop	{r4, pc}

0800be76 <__swrite>:
 800be76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be7a:	461f      	mov	r7, r3
 800be7c:	898b      	ldrh	r3, [r1, #12]
 800be7e:	4605      	mov	r5, r0
 800be80:	05db      	lsls	r3, r3, #23
 800be82:	460c      	mov	r4, r1
 800be84:	4616      	mov	r6, r2
 800be86:	d505      	bpl.n	800be94 <__swrite+0x1e>
 800be88:	2302      	movs	r3, #2
 800be8a:	2200      	movs	r2, #0
 800be8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be90:	f000 f87c 	bl	800bf8c <_lseek_r>
 800be94:	89a3      	ldrh	r3, [r4, #12]
 800be96:	4632      	mov	r2, r6
 800be98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be9c:	81a3      	strh	r3, [r4, #12]
 800be9e:	4628      	mov	r0, r5
 800bea0:	463b      	mov	r3, r7
 800bea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800beaa:	f000 b893 	b.w	800bfd4 <_write_r>

0800beae <__sseek>:
 800beae:	b510      	push	{r4, lr}
 800beb0:	460c      	mov	r4, r1
 800beb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb6:	f000 f869 	bl	800bf8c <_lseek_r>
 800beba:	1c43      	adds	r3, r0, #1
 800bebc:	89a3      	ldrh	r3, [r4, #12]
 800bebe:	bf15      	itete	ne
 800bec0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bec2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bec6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800beca:	81a3      	strheq	r3, [r4, #12]
 800becc:	bf18      	it	ne
 800bece:	81a3      	strhne	r3, [r4, #12]
 800bed0:	bd10      	pop	{r4, pc}

0800bed2 <__sclose>:
 800bed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed6:	f000 b849 	b.w	800bf6c <_close_r>

0800beda <_vsniprintf_r>:
 800beda:	b530      	push	{r4, r5, lr}
 800bedc:	4614      	mov	r4, r2
 800bede:	2c00      	cmp	r4, #0
 800bee0:	4605      	mov	r5, r0
 800bee2:	461a      	mov	r2, r3
 800bee4:	b09b      	sub	sp, #108	@ 0x6c
 800bee6:	da05      	bge.n	800bef4 <_vsniprintf_r+0x1a>
 800bee8:	238b      	movs	r3, #139	@ 0x8b
 800beea:	6003      	str	r3, [r0, #0]
 800beec:	f04f 30ff 	mov.w	r0, #4294967295
 800bef0:	b01b      	add	sp, #108	@ 0x6c
 800bef2:	bd30      	pop	{r4, r5, pc}
 800bef4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bef8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800befc:	f04f 0300 	mov.w	r3, #0
 800bf00:	9319      	str	r3, [sp, #100]	@ 0x64
 800bf02:	bf0c      	ite	eq
 800bf04:	4623      	moveq	r3, r4
 800bf06:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bf0a:	9302      	str	r3, [sp, #8]
 800bf0c:	9305      	str	r3, [sp, #20]
 800bf0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bf12:	9100      	str	r1, [sp, #0]
 800bf14:	9104      	str	r1, [sp, #16]
 800bf16:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bf1a:	4669      	mov	r1, sp
 800bf1c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800bf1e:	f001 fbd7 	bl	800d6d0 <_svfiprintf_r>
 800bf22:	1c43      	adds	r3, r0, #1
 800bf24:	bfbc      	itt	lt
 800bf26:	238b      	movlt	r3, #139	@ 0x8b
 800bf28:	602b      	strlt	r3, [r5, #0]
 800bf2a:	2c00      	cmp	r4, #0
 800bf2c:	d0e0      	beq.n	800bef0 <_vsniprintf_r+0x16>
 800bf2e:	2200      	movs	r2, #0
 800bf30:	9b00      	ldr	r3, [sp, #0]
 800bf32:	701a      	strb	r2, [r3, #0]
 800bf34:	e7dc      	b.n	800bef0 <_vsniprintf_r+0x16>
	...

0800bf38 <vsniprintf>:
 800bf38:	b507      	push	{r0, r1, r2, lr}
 800bf3a:	9300      	str	r3, [sp, #0]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	460a      	mov	r2, r1
 800bf40:	4601      	mov	r1, r0
 800bf42:	4803      	ldr	r0, [pc, #12]	@ (800bf50 <vsniprintf+0x18>)
 800bf44:	6800      	ldr	r0, [r0, #0]
 800bf46:	f7ff ffc8 	bl	800beda <_vsniprintf_r>
 800bf4a:	b003      	add	sp, #12
 800bf4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf50:	20000040 	.word	0x20000040

0800bf54 <memset>:
 800bf54:	4603      	mov	r3, r0
 800bf56:	4402      	add	r2, r0
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d100      	bne.n	800bf5e <memset+0xa>
 800bf5c:	4770      	bx	lr
 800bf5e:	f803 1b01 	strb.w	r1, [r3], #1
 800bf62:	e7f9      	b.n	800bf58 <memset+0x4>

0800bf64 <_localeconv_r>:
 800bf64:	4800      	ldr	r0, [pc, #0]	@ (800bf68 <_localeconv_r+0x4>)
 800bf66:	4770      	bx	lr
 800bf68:	20000180 	.word	0x20000180

0800bf6c <_close_r>:
 800bf6c:	b538      	push	{r3, r4, r5, lr}
 800bf6e:	2300      	movs	r3, #0
 800bf70:	4d05      	ldr	r5, [pc, #20]	@ (800bf88 <_close_r+0x1c>)
 800bf72:	4604      	mov	r4, r0
 800bf74:	4608      	mov	r0, r1
 800bf76:	602b      	str	r3, [r5, #0]
 800bf78:	f7fc fbab 	bl	80086d2 <_close>
 800bf7c:	1c43      	adds	r3, r0, #1
 800bf7e:	d102      	bne.n	800bf86 <_close_r+0x1a>
 800bf80:	682b      	ldr	r3, [r5, #0]
 800bf82:	b103      	cbz	r3, 800bf86 <_close_r+0x1a>
 800bf84:	6023      	str	r3, [r4, #0]
 800bf86:	bd38      	pop	{r3, r4, r5, pc}
 800bf88:	20000794 	.word	0x20000794

0800bf8c <_lseek_r>:
 800bf8c:	b538      	push	{r3, r4, r5, lr}
 800bf8e:	4604      	mov	r4, r0
 800bf90:	4608      	mov	r0, r1
 800bf92:	4611      	mov	r1, r2
 800bf94:	2200      	movs	r2, #0
 800bf96:	4d05      	ldr	r5, [pc, #20]	@ (800bfac <_lseek_r+0x20>)
 800bf98:	602a      	str	r2, [r5, #0]
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	f7fc fbbd 	bl	800871a <_lseek>
 800bfa0:	1c43      	adds	r3, r0, #1
 800bfa2:	d102      	bne.n	800bfaa <_lseek_r+0x1e>
 800bfa4:	682b      	ldr	r3, [r5, #0]
 800bfa6:	b103      	cbz	r3, 800bfaa <_lseek_r+0x1e>
 800bfa8:	6023      	str	r3, [r4, #0]
 800bfaa:	bd38      	pop	{r3, r4, r5, pc}
 800bfac:	20000794 	.word	0x20000794

0800bfb0 <_read_r>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	4608      	mov	r0, r1
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	2200      	movs	r2, #0
 800bfba:	4d05      	ldr	r5, [pc, #20]	@ (800bfd0 <_read_r+0x20>)
 800bfbc:	602a      	str	r2, [r5, #0]
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	f7fc fb4e 	bl	8008660 <_read>
 800bfc4:	1c43      	adds	r3, r0, #1
 800bfc6:	d102      	bne.n	800bfce <_read_r+0x1e>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	b103      	cbz	r3, 800bfce <_read_r+0x1e>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	bd38      	pop	{r3, r4, r5, pc}
 800bfd0:	20000794 	.word	0x20000794

0800bfd4 <_write_r>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	4608      	mov	r0, r1
 800bfda:	4611      	mov	r1, r2
 800bfdc:	2200      	movs	r2, #0
 800bfde:	4d05      	ldr	r5, [pc, #20]	@ (800bff4 <_write_r+0x20>)
 800bfe0:	602a      	str	r2, [r5, #0]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	f7fc fb59 	bl	800869a <_write>
 800bfe8:	1c43      	adds	r3, r0, #1
 800bfea:	d102      	bne.n	800bff2 <_write_r+0x1e>
 800bfec:	682b      	ldr	r3, [r5, #0]
 800bfee:	b103      	cbz	r3, 800bff2 <_write_r+0x1e>
 800bff0:	6023      	str	r3, [r4, #0]
 800bff2:	bd38      	pop	{r3, r4, r5, pc}
 800bff4:	20000794 	.word	0x20000794

0800bff8 <__errno>:
 800bff8:	4b01      	ldr	r3, [pc, #4]	@ (800c000 <__errno+0x8>)
 800bffa:	6818      	ldr	r0, [r3, #0]
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	20000040 	.word	0x20000040

0800c004 <__libc_init_array>:
 800c004:	b570      	push	{r4, r5, r6, lr}
 800c006:	2600      	movs	r6, #0
 800c008:	4d0c      	ldr	r5, [pc, #48]	@ (800c03c <__libc_init_array+0x38>)
 800c00a:	4c0d      	ldr	r4, [pc, #52]	@ (800c040 <__libc_init_array+0x3c>)
 800c00c:	1b64      	subs	r4, r4, r5
 800c00e:	10a4      	asrs	r4, r4, #2
 800c010:	42a6      	cmp	r6, r4
 800c012:	d109      	bne.n	800c028 <__libc_init_array+0x24>
 800c014:	f002 f874 	bl	800e100 <_init>
 800c018:	2600      	movs	r6, #0
 800c01a:	4d0a      	ldr	r5, [pc, #40]	@ (800c044 <__libc_init_array+0x40>)
 800c01c:	4c0a      	ldr	r4, [pc, #40]	@ (800c048 <__libc_init_array+0x44>)
 800c01e:	1b64      	subs	r4, r4, r5
 800c020:	10a4      	asrs	r4, r4, #2
 800c022:	42a6      	cmp	r6, r4
 800c024:	d105      	bne.n	800c032 <__libc_init_array+0x2e>
 800c026:	bd70      	pop	{r4, r5, r6, pc}
 800c028:	f855 3b04 	ldr.w	r3, [r5], #4
 800c02c:	4798      	blx	r3
 800c02e:	3601      	adds	r6, #1
 800c030:	e7ee      	b.n	800c010 <__libc_init_array+0xc>
 800c032:	f855 3b04 	ldr.w	r3, [r5], #4
 800c036:	4798      	blx	r3
 800c038:	3601      	adds	r6, #1
 800c03a:	e7f2      	b.n	800c022 <__libc_init_array+0x1e>
 800c03c:	0800ee34 	.word	0x0800ee34
 800c040:	0800ee34 	.word	0x0800ee34
 800c044:	0800ee34 	.word	0x0800ee34
 800c048:	0800ee38 	.word	0x0800ee38

0800c04c <__retarget_lock_init_recursive>:
 800c04c:	4770      	bx	lr

0800c04e <__retarget_lock_acquire_recursive>:
 800c04e:	4770      	bx	lr

0800c050 <__retarget_lock_release_recursive>:
 800c050:	4770      	bx	lr

0800c052 <memchr>:
 800c052:	4603      	mov	r3, r0
 800c054:	b510      	push	{r4, lr}
 800c056:	b2c9      	uxtb	r1, r1
 800c058:	4402      	add	r2, r0
 800c05a:	4293      	cmp	r3, r2
 800c05c:	4618      	mov	r0, r3
 800c05e:	d101      	bne.n	800c064 <memchr+0x12>
 800c060:	2000      	movs	r0, #0
 800c062:	e003      	b.n	800c06c <memchr+0x1a>
 800c064:	7804      	ldrb	r4, [r0, #0]
 800c066:	3301      	adds	r3, #1
 800c068:	428c      	cmp	r4, r1
 800c06a:	d1f6      	bne.n	800c05a <memchr+0x8>
 800c06c:	bd10      	pop	{r4, pc}

0800c06e <quorem>:
 800c06e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c072:	6903      	ldr	r3, [r0, #16]
 800c074:	690c      	ldr	r4, [r1, #16]
 800c076:	4607      	mov	r7, r0
 800c078:	42a3      	cmp	r3, r4
 800c07a:	db7e      	blt.n	800c17a <quorem+0x10c>
 800c07c:	3c01      	subs	r4, #1
 800c07e:	00a3      	lsls	r3, r4, #2
 800c080:	f100 0514 	add.w	r5, r0, #20
 800c084:	f101 0814 	add.w	r8, r1, #20
 800c088:	9300      	str	r3, [sp, #0]
 800c08a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c08e:	9301      	str	r3, [sp, #4]
 800c090:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c094:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c098:	3301      	adds	r3, #1
 800c09a:	429a      	cmp	r2, r3
 800c09c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c0a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c0a4:	d32e      	bcc.n	800c104 <quorem+0x96>
 800c0a6:	f04f 0a00 	mov.w	sl, #0
 800c0aa:	46c4      	mov	ip, r8
 800c0ac:	46ae      	mov	lr, r5
 800c0ae:	46d3      	mov	fp, sl
 800c0b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c0b4:	b298      	uxth	r0, r3
 800c0b6:	fb06 a000 	mla	r0, r6, r0, sl
 800c0ba:	0c1b      	lsrs	r3, r3, #16
 800c0bc:	0c02      	lsrs	r2, r0, #16
 800c0be:	fb06 2303 	mla	r3, r6, r3, r2
 800c0c2:	f8de 2000 	ldr.w	r2, [lr]
 800c0c6:	b280      	uxth	r0, r0
 800c0c8:	b292      	uxth	r2, r2
 800c0ca:	1a12      	subs	r2, r2, r0
 800c0cc:	445a      	add	r2, fp
 800c0ce:	f8de 0000 	ldr.w	r0, [lr]
 800c0d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c0dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c0e0:	b292      	uxth	r2, r2
 800c0e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c0e6:	45e1      	cmp	r9, ip
 800c0e8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c0ec:	f84e 2b04 	str.w	r2, [lr], #4
 800c0f0:	d2de      	bcs.n	800c0b0 <quorem+0x42>
 800c0f2:	9b00      	ldr	r3, [sp, #0]
 800c0f4:	58eb      	ldr	r3, [r5, r3]
 800c0f6:	b92b      	cbnz	r3, 800c104 <quorem+0x96>
 800c0f8:	9b01      	ldr	r3, [sp, #4]
 800c0fa:	3b04      	subs	r3, #4
 800c0fc:	429d      	cmp	r5, r3
 800c0fe:	461a      	mov	r2, r3
 800c100:	d32f      	bcc.n	800c162 <quorem+0xf4>
 800c102:	613c      	str	r4, [r7, #16]
 800c104:	4638      	mov	r0, r7
 800c106:	f001 f97f 	bl	800d408 <__mcmp>
 800c10a:	2800      	cmp	r0, #0
 800c10c:	db25      	blt.n	800c15a <quorem+0xec>
 800c10e:	4629      	mov	r1, r5
 800c110:	2000      	movs	r0, #0
 800c112:	f858 2b04 	ldr.w	r2, [r8], #4
 800c116:	f8d1 c000 	ldr.w	ip, [r1]
 800c11a:	fa1f fe82 	uxth.w	lr, r2
 800c11e:	fa1f f38c 	uxth.w	r3, ip
 800c122:	eba3 030e 	sub.w	r3, r3, lr
 800c126:	4403      	add	r3, r0
 800c128:	0c12      	lsrs	r2, r2, #16
 800c12a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c12e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c132:	b29b      	uxth	r3, r3
 800c134:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c138:	45c1      	cmp	r9, r8
 800c13a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c13e:	f841 3b04 	str.w	r3, [r1], #4
 800c142:	d2e6      	bcs.n	800c112 <quorem+0xa4>
 800c144:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c148:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c14c:	b922      	cbnz	r2, 800c158 <quorem+0xea>
 800c14e:	3b04      	subs	r3, #4
 800c150:	429d      	cmp	r5, r3
 800c152:	461a      	mov	r2, r3
 800c154:	d30b      	bcc.n	800c16e <quorem+0x100>
 800c156:	613c      	str	r4, [r7, #16]
 800c158:	3601      	adds	r6, #1
 800c15a:	4630      	mov	r0, r6
 800c15c:	b003      	add	sp, #12
 800c15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c162:	6812      	ldr	r2, [r2, #0]
 800c164:	3b04      	subs	r3, #4
 800c166:	2a00      	cmp	r2, #0
 800c168:	d1cb      	bne.n	800c102 <quorem+0x94>
 800c16a:	3c01      	subs	r4, #1
 800c16c:	e7c6      	b.n	800c0fc <quorem+0x8e>
 800c16e:	6812      	ldr	r2, [r2, #0]
 800c170:	3b04      	subs	r3, #4
 800c172:	2a00      	cmp	r2, #0
 800c174:	d1ef      	bne.n	800c156 <quorem+0xe8>
 800c176:	3c01      	subs	r4, #1
 800c178:	e7ea      	b.n	800c150 <quorem+0xe2>
 800c17a:	2000      	movs	r0, #0
 800c17c:	e7ee      	b.n	800c15c <quorem+0xee>
	...

0800c180 <_dtoa_r>:
 800c180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c184:	4614      	mov	r4, r2
 800c186:	461d      	mov	r5, r3
 800c188:	69c7      	ldr	r7, [r0, #28]
 800c18a:	b097      	sub	sp, #92	@ 0x5c
 800c18c:	4681      	mov	r9, r0
 800c18e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800c192:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c194:	b97f      	cbnz	r7, 800c1b6 <_dtoa_r+0x36>
 800c196:	2010      	movs	r0, #16
 800c198:	f000 fe0e 	bl	800cdb8 <malloc>
 800c19c:	4602      	mov	r2, r0
 800c19e:	f8c9 001c 	str.w	r0, [r9, #28]
 800c1a2:	b920      	cbnz	r0, 800c1ae <_dtoa_r+0x2e>
 800c1a4:	21ef      	movs	r1, #239	@ 0xef
 800c1a6:	4bac      	ldr	r3, [pc, #688]	@ (800c458 <_dtoa_r+0x2d8>)
 800c1a8:	48ac      	ldr	r0, [pc, #688]	@ (800c45c <_dtoa_r+0x2dc>)
 800c1aa:	f001 fc6d 	bl	800da88 <__assert_func>
 800c1ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c1b2:	6007      	str	r7, [r0, #0]
 800c1b4:	60c7      	str	r7, [r0, #12]
 800c1b6:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c1ba:	6819      	ldr	r1, [r3, #0]
 800c1bc:	b159      	cbz	r1, 800c1d6 <_dtoa_r+0x56>
 800c1be:	685a      	ldr	r2, [r3, #4]
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	4093      	lsls	r3, r2
 800c1c4:	604a      	str	r2, [r1, #4]
 800c1c6:	608b      	str	r3, [r1, #8]
 800c1c8:	4648      	mov	r0, r9
 800c1ca:	f000 feeb 	bl	800cfa4 <_Bfree>
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c1d4:	601a      	str	r2, [r3, #0]
 800c1d6:	1e2b      	subs	r3, r5, #0
 800c1d8:	bfaf      	iteee	ge
 800c1da:	2300      	movge	r3, #0
 800c1dc:	2201      	movlt	r2, #1
 800c1de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c1e2:	9307      	strlt	r3, [sp, #28]
 800c1e4:	bfa8      	it	ge
 800c1e6:	6033      	strge	r3, [r6, #0]
 800c1e8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800c1ec:	4b9c      	ldr	r3, [pc, #624]	@ (800c460 <_dtoa_r+0x2e0>)
 800c1ee:	bfb8      	it	lt
 800c1f0:	6032      	strlt	r2, [r6, #0]
 800c1f2:	ea33 0308 	bics.w	r3, r3, r8
 800c1f6:	d112      	bne.n	800c21e <_dtoa_r+0x9e>
 800c1f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c1fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c1fe:	6013      	str	r3, [r2, #0]
 800c200:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c204:	4323      	orrs	r3, r4
 800c206:	f000 855e 	beq.w	800ccc6 <_dtoa_r+0xb46>
 800c20a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c20c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c464 <_dtoa_r+0x2e4>
 800c210:	2b00      	cmp	r3, #0
 800c212:	f000 8560 	beq.w	800ccd6 <_dtoa_r+0xb56>
 800c216:	f10a 0303 	add.w	r3, sl, #3
 800c21a:	f000 bd5a 	b.w	800ccd2 <_dtoa_r+0xb52>
 800c21e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c222:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c226:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c22a:	2200      	movs	r2, #0
 800c22c:	2300      	movs	r3, #0
 800c22e:	f7f8 fbbb 	bl	80049a8 <__aeabi_dcmpeq>
 800c232:	4607      	mov	r7, r0
 800c234:	b158      	cbz	r0, 800c24e <_dtoa_r+0xce>
 800c236:	2301      	movs	r3, #1
 800c238:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c23a:	6013      	str	r3, [r2, #0]
 800c23c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c23e:	b113      	cbz	r3, 800c246 <_dtoa_r+0xc6>
 800c240:	4b89      	ldr	r3, [pc, #548]	@ (800c468 <_dtoa_r+0x2e8>)
 800c242:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c244:	6013      	str	r3, [r2, #0]
 800c246:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800c46c <_dtoa_r+0x2ec>
 800c24a:	f000 bd44 	b.w	800ccd6 <_dtoa_r+0xb56>
 800c24e:	ab14      	add	r3, sp, #80	@ 0x50
 800c250:	9301      	str	r3, [sp, #4]
 800c252:	ab15      	add	r3, sp, #84	@ 0x54
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	4648      	mov	r0, r9
 800c258:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c25c:	f001 f984 	bl	800d568 <__d2b>
 800c260:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c264:	9003      	str	r0, [sp, #12]
 800c266:	2e00      	cmp	r6, #0
 800c268:	d078      	beq.n	800c35c <_dtoa_r+0x1dc>
 800c26a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c26e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c270:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c278:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c27c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c280:	9712      	str	r7, [sp, #72]	@ 0x48
 800c282:	4619      	mov	r1, r3
 800c284:	2200      	movs	r2, #0
 800c286:	4b7a      	ldr	r3, [pc, #488]	@ (800c470 <_dtoa_r+0x2f0>)
 800c288:	f7f7 ff6e 	bl	8004168 <__aeabi_dsub>
 800c28c:	a36c      	add	r3, pc, #432	@ (adr r3, 800c440 <_dtoa_r+0x2c0>)
 800c28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c292:	f7f8 f921 	bl	80044d8 <__aeabi_dmul>
 800c296:	a36c      	add	r3, pc, #432	@ (adr r3, 800c448 <_dtoa_r+0x2c8>)
 800c298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29c:	f7f7 ff66 	bl	800416c <__adddf3>
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	4630      	mov	r0, r6
 800c2a4:	460d      	mov	r5, r1
 800c2a6:	f7f8 f8ad 	bl	8004404 <__aeabi_i2d>
 800c2aa:	a369      	add	r3, pc, #420	@ (adr r3, 800c450 <_dtoa_r+0x2d0>)
 800c2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b0:	f7f8 f912 	bl	80044d8 <__aeabi_dmul>
 800c2b4:	4602      	mov	r2, r0
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	4629      	mov	r1, r5
 800c2bc:	f7f7 ff56 	bl	800416c <__adddf3>
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	460d      	mov	r5, r1
 800c2c4:	f7f8 fbb8 	bl	8004a38 <__aeabi_d2iz>
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	4607      	mov	r7, r0
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	f7f8 fb73 	bl	80049bc <__aeabi_dcmplt>
 800c2d6:	b140      	cbz	r0, 800c2ea <_dtoa_r+0x16a>
 800c2d8:	4638      	mov	r0, r7
 800c2da:	f7f8 f893 	bl	8004404 <__aeabi_i2d>
 800c2de:	4622      	mov	r2, r4
 800c2e0:	462b      	mov	r3, r5
 800c2e2:	f7f8 fb61 	bl	80049a8 <__aeabi_dcmpeq>
 800c2e6:	b900      	cbnz	r0, 800c2ea <_dtoa_r+0x16a>
 800c2e8:	3f01      	subs	r7, #1
 800c2ea:	2f16      	cmp	r7, #22
 800c2ec:	d854      	bhi.n	800c398 <_dtoa_r+0x218>
 800c2ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2f2:	4b60      	ldr	r3, [pc, #384]	@ (800c474 <_dtoa_r+0x2f4>)
 800c2f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c2f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2fc:	f7f8 fb5e 	bl	80049bc <__aeabi_dcmplt>
 800c300:	2800      	cmp	r0, #0
 800c302:	d04b      	beq.n	800c39c <_dtoa_r+0x21c>
 800c304:	2300      	movs	r3, #0
 800c306:	3f01      	subs	r7, #1
 800c308:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c30a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c30c:	1b9b      	subs	r3, r3, r6
 800c30e:	1e5a      	subs	r2, r3, #1
 800c310:	bf49      	itett	mi
 800c312:	f1c3 0301 	rsbmi	r3, r3, #1
 800c316:	2300      	movpl	r3, #0
 800c318:	9304      	strmi	r3, [sp, #16]
 800c31a:	2300      	movmi	r3, #0
 800c31c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c31e:	bf54      	ite	pl
 800c320:	9304      	strpl	r3, [sp, #16]
 800c322:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c324:	2f00      	cmp	r7, #0
 800c326:	db3b      	blt.n	800c3a0 <_dtoa_r+0x220>
 800c328:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c32a:	970e      	str	r7, [sp, #56]	@ 0x38
 800c32c:	443b      	add	r3, r7
 800c32e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c330:	2300      	movs	r3, #0
 800c332:	930a      	str	r3, [sp, #40]	@ 0x28
 800c334:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c336:	2b09      	cmp	r3, #9
 800c338:	d865      	bhi.n	800c406 <_dtoa_r+0x286>
 800c33a:	2b05      	cmp	r3, #5
 800c33c:	bfc4      	itt	gt
 800c33e:	3b04      	subgt	r3, #4
 800c340:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c342:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c344:	bfc8      	it	gt
 800c346:	2400      	movgt	r4, #0
 800c348:	f1a3 0302 	sub.w	r3, r3, #2
 800c34c:	bfd8      	it	le
 800c34e:	2401      	movle	r4, #1
 800c350:	2b03      	cmp	r3, #3
 800c352:	d864      	bhi.n	800c41e <_dtoa_r+0x29e>
 800c354:	e8df f003 	tbb	[pc, r3]
 800c358:	2c385553 	.word	0x2c385553
 800c35c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c360:	441e      	add	r6, r3
 800c362:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c366:	2b20      	cmp	r3, #32
 800c368:	bfc1      	itttt	gt
 800c36a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c36e:	fa08 f803 	lslgt.w	r8, r8, r3
 800c372:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c376:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c37a:	bfd6      	itet	le
 800c37c:	f1c3 0320 	rsble	r3, r3, #32
 800c380:	ea48 0003 	orrgt.w	r0, r8, r3
 800c384:	fa04 f003 	lslle.w	r0, r4, r3
 800c388:	f7f8 f82c 	bl	80043e4 <__aeabi_ui2d>
 800c38c:	2201      	movs	r2, #1
 800c38e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c392:	3e01      	subs	r6, #1
 800c394:	9212      	str	r2, [sp, #72]	@ 0x48
 800c396:	e774      	b.n	800c282 <_dtoa_r+0x102>
 800c398:	2301      	movs	r3, #1
 800c39a:	e7b5      	b.n	800c308 <_dtoa_r+0x188>
 800c39c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c39e:	e7b4      	b.n	800c30a <_dtoa_r+0x18a>
 800c3a0:	9b04      	ldr	r3, [sp, #16]
 800c3a2:	1bdb      	subs	r3, r3, r7
 800c3a4:	9304      	str	r3, [sp, #16]
 800c3a6:	427b      	negs	r3, r7
 800c3a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	930e      	str	r3, [sp, #56]	@ 0x38
 800c3ae:	e7c1      	b.n	800c334 <_dtoa_r+0x1b4>
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c3b6:	eb07 0b03 	add.w	fp, r7, r3
 800c3ba:	f10b 0301 	add.w	r3, fp, #1
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	9308      	str	r3, [sp, #32]
 800c3c2:	bfb8      	it	lt
 800c3c4:	2301      	movlt	r3, #1
 800c3c6:	e006      	b.n	800c3d6 <_dtoa_r+0x256>
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	dd28      	ble.n	800c424 <_dtoa_r+0x2a4>
 800c3d2:	469b      	mov	fp, r3
 800c3d4:	9308      	str	r3, [sp, #32]
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	2204      	movs	r2, #4
 800c3da:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c3de:	f102 0514 	add.w	r5, r2, #20
 800c3e2:	429d      	cmp	r5, r3
 800c3e4:	d926      	bls.n	800c434 <_dtoa_r+0x2b4>
 800c3e6:	6041      	str	r1, [r0, #4]
 800c3e8:	4648      	mov	r0, r9
 800c3ea:	f000 fd9b 	bl	800cf24 <_Balloc>
 800c3ee:	4682      	mov	sl, r0
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	d143      	bne.n	800c47c <_dtoa_r+0x2fc>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800c3fa:	4b1f      	ldr	r3, [pc, #124]	@ (800c478 <_dtoa_r+0x2f8>)
 800c3fc:	e6d4      	b.n	800c1a8 <_dtoa_r+0x28>
 800c3fe:	2300      	movs	r3, #0
 800c400:	e7e3      	b.n	800c3ca <_dtoa_r+0x24a>
 800c402:	2300      	movs	r3, #0
 800c404:	e7d5      	b.n	800c3b2 <_dtoa_r+0x232>
 800c406:	2401      	movs	r4, #1
 800c408:	2300      	movs	r3, #0
 800c40a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c40c:	9320      	str	r3, [sp, #128]	@ 0x80
 800c40e:	f04f 3bff 	mov.w	fp, #4294967295
 800c412:	2200      	movs	r2, #0
 800c414:	2312      	movs	r3, #18
 800c416:	f8cd b020 	str.w	fp, [sp, #32]
 800c41a:	9221      	str	r2, [sp, #132]	@ 0x84
 800c41c:	e7db      	b.n	800c3d6 <_dtoa_r+0x256>
 800c41e:	2301      	movs	r3, #1
 800c420:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c422:	e7f4      	b.n	800c40e <_dtoa_r+0x28e>
 800c424:	f04f 0b01 	mov.w	fp, #1
 800c428:	465b      	mov	r3, fp
 800c42a:	f8cd b020 	str.w	fp, [sp, #32]
 800c42e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800c432:	e7d0      	b.n	800c3d6 <_dtoa_r+0x256>
 800c434:	3101      	adds	r1, #1
 800c436:	0052      	lsls	r2, r2, #1
 800c438:	e7d1      	b.n	800c3de <_dtoa_r+0x25e>
 800c43a:	bf00      	nop
 800c43c:	f3af 8000 	nop.w
 800c440:	636f4361 	.word	0x636f4361
 800c444:	3fd287a7 	.word	0x3fd287a7
 800c448:	8b60c8b3 	.word	0x8b60c8b3
 800c44c:	3fc68a28 	.word	0x3fc68a28
 800c450:	509f79fb 	.word	0x509f79fb
 800c454:	3fd34413 	.word	0x3fd34413
 800c458:	0800eaf5 	.word	0x0800eaf5
 800c45c:	0800eb0c 	.word	0x0800eb0c
 800c460:	7ff00000 	.word	0x7ff00000
 800c464:	0800eaf1 	.word	0x0800eaf1
 800c468:	0800eac5 	.word	0x0800eac5
 800c46c:	0800eac4 	.word	0x0800eac4
 800c470:	3ff80000 	.word	0x3ff80000
 800c474:	0800ec60 	.word	0x0800ec60
 800c478:	0800eb64 	.word	0x0800eb64
 800c47c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c480:	6018      	str	r0, [r3, #0]
 800c482:	9b08      	ldr	r3, [sp, #32]
 800c484:	2b0e      	cmp	r3, #14
 800c486:	f200 80a1 	bhi.w	800c5cc <_dtoa_r+0x44c>
 800c48a:	2c00      	cmp	r4, #0
 800c48c:	f000 809e 	beq.w	800c5cc <_dtoa_r+0x44c>
 800c490:	2f00      	cmp	r7, #0
 800c492:	dd33      	ble.n	800c4fc <_dtoa_r+0x37c>
 800c494:	4b9c      	ldr	r3, [pc, #624]	@ (800c708 <_dtoa_r+0x588>)
 800c496:	f007 020f 	and.w	r2, r7, #15
 800c49a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c49e:	05f8      	lsls	r0, r7, #23
 800c4a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c4a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800c4a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c4ac:	d516      	bpl.n	800c4dc <_dtoa_r+0x35c>
 800c4ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c4b2:	4b96      	ldr	r3, [pc, #600]	@ (800c70c <_dtoa_r+0x58c>)
 800c4b4:	2603      	movs	r6, #3
 800c4b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c4ba:	f7f8 f937 	bl	800472c <__aeabi_ddiv>
 800c4be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c4c2:	f004 040f 	and.w	r4, r4, #15
 800c4c6:	4d91      	ldr	r5, [pc, #580]	@ (800c70c <_dtoa_r+0x58c>)
 800c4c8:	b954      	cbnz	r4, 800c4e0 <_dtoa_r+0x360>
 800c4ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c4ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c4d2:	f7f8 f92b 	bl	800472c <__aeabi_ddiv>
 800c4d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c4da:	e028      	b.n	800c52e <_dtoa_r+0x3ae>
 800c4dc:	2602      	movs	r6, #2
 800c4de:	e7f2      	b.n	800c4c6 <_dtoa_r+0x346>
 800c4e0:	07e1      	lsls	r1, r4, #31
 800c4e2:	d508      	bpl.n	800c4f6 <_dtoa_r+0x376>
 800c4e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c4e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c4ec:	f7f7 fff4 	bl	80044d8 <__aeabi_dmul>
 800c4f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c4f4:	3601      	adds	r6, #1
 800c4f6:	1064      	asrs	r4, r4, #1
 800c4f8:	3508      	adds	r5, #8
 800c4fa:	e7e5      	b.n	800c4c8 <_dtoa_r+0x348>
 800c4fc:	f000 80af 	beq.w	800c65e <_dtoa_r+0x4de>
 800c500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c504:	427c      	negs	r4, r7
 800c506:	4b80      	ldr	r3, [pc, #512]	@ (800c708 <_dtoa_r+0x588>)
 800c508:	f004 020f 	and.w	r2, r4, #15
 800c50c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c514:	f7f7 ffe0 	bl	80044d8 <__aeabi_dmul>
 800c518:	2602      	movs	r6, #2
 800c51a:	2300      	movs	r3, #0
 800c51c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c520:	4d7a      	ldr	r5, [pc, #488]	@ (800c70c <_dtoa_r+0x58c>)
 800c522:	1124      	asrs	r4, r4, #4
 800c524:	2c00      	cmp	r4, #0
 800c526:	f040 808f 	bne.w	800c648 <_dtoa_r+0x4c8>
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d1d3      	bne.n	800c4d6 <_dtoa_r+0x356>
 800c52e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800c532:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c534:	2b00      	cmp	r3, #0
 800c536:	f000 8094 	beq.w	800c662 <_dtoa_r+0x4e2>
 800c53a:	2200      	movs	r2, #0
 800c53c:	4620      	mov	r0, r4
 800c53e:	4629      	mov	r1, r5
 800c540:	4b73      	ldr	r3, [pc, #460]	@ (800c710 <_dtoa_r+0x590>)
 800c542:	f7f8 fa3b 	bl	80049bc <__aeabi_dcmplt>
 800c546:	2800      	cmp	r0, #0
 800c548:	f000 808b 	beq.w	800c662 <_dtoa_r+0x4e2>
 800c54c:	9b08      	ldr	r3, [sp, #32]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f000 8087 	beq.w	800c662 <_dtoa_r+0x4e2>
 800c554:	f1bb 0f00 	cmp.w	fp, #0
 800c558:	dd34      	ble.n	800c5c4 <_dtoa_r+0x444>
 800c55a:	4620      	mov	r0, r4
 800c55c:	2200      	movs	r2, #0
 800c55e:	4629      	mov	r1, r5
 800c560:	4b6c      	ldr	r3, [pc, #432]	@ (800c714 <_dtoa_r+0x594>)
 800c562:	f7f7 ffb9 	bl	80044d8 <__aeabi_dmul>
 800c566:	465c      	mov	r4, fp
 800c568:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c56c:	f107 38ff 	add.w	r8, r7, #4294967295
 800c570:	3601      	adds	r6, #1
 800c572:	4630      	mov	r0, r6
 800c574:	f7f7 ff46 	bl	8004404 <__aeabi_i2d>
 800c578:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c57c:	f7f7 ffac 	bl	80044d8 <__aeabi_dmul>
 800c580:	2200      	movs	r2, #0
 800c582:	4b65      	ldr	r3, [pc, #404]	@ (800c718 <_dtoa_r+0x598>)
 800c584:	f7f7 fdf2 	bl	800416c <__adddf3>
 800c588:	4605      	mov	r5, r0
 800c58a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c58e:	2c00      	cmp	r4, #0
 800c590:	d16a      	bne.n	800c668 <_dtoa_r+0x4e8>
 800c592:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c596:	2200      	movs	r2, #0
 800c598:	4b60      	ldr	r3, [pc, #384]	@ (800c71c <_dtoa_r+0x59c>)
 800c59a:	f7f7 fde5 	bl	8004168 <__aeabi_dsub>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c5a6:	462a      	mov	r2, r5
 800c5a8:	4633      	mov	r3, r6
 800c5aa:	f7f8 fa25 	bl	80049f8 <__aeabi_dcmpgt>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	f040 8298 	bne.w	800cae4 <_dtoa_r+0x964>
 800c5b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c5b8:	462a      	mov	r2, r5
 800c5ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c5be:	f7f8 f9fd 	bl	80049bc <__aeabi_dcmplt>
 800c5c2:	bb38      	cbnz	r0, 800c614 <_dtoa_r+0x494>
 800c5c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c5c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c5cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	f2c0 8157 	blt.w	800c882 <_dtoa_r+0x702>
 800c5d4:	2f0e      	cmp	r7, #14
 800c5d6:	f300 8154 	bgt.w	800c882 <_dtoa_r+0x702>
 800c5da:	4b4b      	ldr	r3, [pc, #300]	@ (800c708 <_dtoa_r+0x588>)
 800c5dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c5e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c5e4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c5e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f280 80e5 	bge.w	800c7ba <_dtoa_r+0x63a>
 800c5f0:	9b08      	ldr	r3, [sp, #32]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f300 80e1 	bgt.w	800c7ba <_dtoa_r+0x63a>
 800c5f8:	d10c      	bne.n	800c614 <_dtoa_r+0x494>
 800c5fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5fe:	2200      	movs	r2, #0
 800c600:	4b46      	ldr	r3, [pc, #280]	@ (800c71c <_dtoa_r+0x59c>)
 800c602:	f7f7 ff69 	bl	80044d8 <__aeabi_dmul>
 800c606:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c60a:	f7f8 f9eb 	bl	80049e4 <__aeabi_dcmpge>
 800c60e:	2800      	cmp	r0, #0
 800c610:	f000 8266 	beq.w	800cae0 <_dtoa_r+0x960>
 800c614:	2400      	movs	r4, #0
 800c616:	4625      	mov	r5, r4
 800c618:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c61a:	4656      	mov	r6, sl
 800c61c:	ea6f 0803 	mvn.w	r8, r3
 800c620:	2700      	movs	r7, #0
 800c622:	4621      	mov	r1, r4
 800c624:	4648      	mov	r0, r9
 800c626:	f000 fcbd 	bl	800cfa4 <_Bfree>
 800c62a:	2d00      	cmp	r5, #0
 800c62c:	f000 80bd 	beq.w	800c7aa <_dtoa_r+0x62a>
 800c630:	b12f      	cbz	r7, 800c63e <_dtoa_r+0x4be>
 800c632:	42af      	cmp	r7, r5
 800c634:	d003      	beq.n	800c63e <_dtoa_r+0x4be>
 800c636:	4639      	mov	r1, r7
 800c638:	4648      	mov	r0, r9
 800c63a:	f000 fcb3 	bl	800cfa4 <_Bfree>
 800c63e:	4629      	mov	r1, r5
 800c640:	4648      	mov	r0, r9
 800c642:	f000 fcaf 	bl	800cfa4 <_Bfree>
 800c646:	e0b0      	b.n	800c7aa <_dtoa_r+0x62a>
 800c648:	07e2      	lsls	r2, r4, #31
 800c64a:	d505      	bpl.n	800c658 <_dtoa_r+0x4d8>
 800c64c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c650:	f7f7 ff42 	bl	80044d8 <__aeabi_dmul>
 800c654:	2301      	movs	r3, #1
 800c656:	3601      	adds	r6, #1
 800c658:	1064      	asrs	r4, r4, #1
 800c65a:	3508      	adds	r5, #8
 800c65c:	e762      	b.n	800c524 <_dtoa_r+0x3a4>
 800c65e:	2602      	movs	r6, #2
 800c660:	e765      	b.n	800c52e <_dtoa_r+0x3ae>
 800c662:	46b8      	mov	r8, r7
 800c664:	9c08      	ldr	r4, [sp, #32]
 800c666:	e784      	b.n	800c572 <_dtoa_r+0x3f2>
 800c668:	4b27      	ldr	r3, [pc, #156]	@ (800c708 <_dtoa_r+0x588>)
 800c66a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c66c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c670:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c674:	4454      	add	r4, sl
 800c676:	2900      	cmp	r1, #0
 800c678:	d054      	beq.n	800c724 <_dtoa_r+0x5a4>
 800c67a:	2000      	movs	r0, #0
 800c67c:	4928      	ldr	r1, [pc, #160]	@ (800c720 <_dtoa_r+0x5a0>)
 800c67e:	f7f8 f855 	bl	800472c <__aeabi_ddiv>
 800c682:	4633      	mov	r3, r6
 800c684:	462a      	mov	r2, r5
 800c686:	f7f7 fd6f 	bl	8004168 <__aeabi_dsub>
 800c68a:	4656      	mov	r6, sl
 800c68c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c690:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c694:	f7f8 f9d0 	bl	8004a38 <__aeabi_d2iz>
 800c698:	4605      	mov	r5, r0
 800c69a:	f7f7 feb3 	bl	8004404 <__aeabi_i2d>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6a6:	f7f7 fd5f 	bl	8004168 <__aeabi_dsub>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	3530      	adds	r5, #48	@ 0x30
 800c6b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c6b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c6b8:	f806 5b01 	strb.w	r5, [r6], #1
 800c6bc:	f7f8 f97e 	bl	80049bc <__aeabi_dcmplt>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	d172      	bne.n	800c7aa <_dtoa_r+0x62a>
 800c6c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c6c8:	2000      	movs	r0, #0
 800c6ca:	4911      	ldr	r1, [pc, #68]	@ (800c710 <_dtoa_r+0x590>)
 800c6cc:	f7f7 fd4c 	bl	8004168 <__aeabi_dsub>
 800c6d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c6d4:	f7f8 f972 	bl	80049bc <__aeabi_dcmplt>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	f040 80b4 	bne.w	800c846 <_dtoa_r+0x6c6>
 800c6de:	42a6      	cmp	r6, r4
 800c6e0:	f43f af70 	beq.w	800c5c4 <_dtoa_r+0x444>
 800c6e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	4b0a      	ldr	r3, [pc, #40]	@ (800c714 <_dtoa_r+0x594>)
 800c6ec:	f7f7 fef4 	bl	80044d8 <__aeabi_dmul>
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c6f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6fa:	4b06      	ldr	r3, [pc, #24]	@ (800c714 <_dtoa_r+0x594>)
 800c6fc:	f7f7 feec 	bl	80044d8 <__aeabi_dmul>
 800c700:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c704:	e7c4      	b.n	800c690 <_dtoa_r+0x510>
 800c706:	bf00      	nop
 800c708:	0800ec60 	.word	0x0800ec60
 800c70c:	0800ec38 	.word	0x0800ec38
 800c710:	3ff00000 	.word	0x3ff00000
 800c714:	40240000 	.word	0x40240000
 800c718:	401c0000 	.word	0x401c0000
 800c71c:	40140000 	.word	0x40140000
 800c720:	3fe00000 	.word	0x3fe00000
 800c724:	4631      	mov	r1, r6
 800c726:	4628      	mov	r0, r5
 800c728:	f7f7 fed6 	bl	80044d8 <__aeabi_dmul>
 800c72c:	4656      	mov	r6, sl
 800c72e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c732:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c734:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c738:	f7f8 f97e 	bl	8004a38 <__aeabi_d2iz>
 800c73c:	4605      	mov	r5, r0
 800c73e:	f7f7 fe61 	bl	8004404 <__aeabi_i2d>
 800c742:	4602      	mov	r2, r0
 800c744:	460b      	mov	r3, r1
 800c746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c74a:	f7f7 fd0d 	bl	8004168 <__aeabi_dsub>
 800c74e:	4602      	mov	r2, r0
 800c750:	460b      	mov	r3, r1
 800c752:	3530      	adds	r5, #48	@ 0x30
 800c754:	f806 5b01 	strb.w	r5, [r6], #1
 800c758:	42a6      	cmp	r6, r4
 800c75a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c75e:	f04f 0200 	mov.w	r2, #0
 800c762:	d124      	bne.n	800c7ae <_dtoa_r+0x62e>
 800c764:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c768:	4bae      	ldr	r3, [pc, #696]	@ (800ca24 <_dtoa_r+0x8a4>)
 800c76a:	f7f7 fcff 	bl	800416c <__adddf3>
 800c76e:	4602      	mov	r2, r0
 800c770:	460b      	mov	r3, r1
 800c772:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c776:	f7f8 f93f 	bl	80049f8 <__aeabi_dcmpgt>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d163      	bne.n	800c846 <_dtoa_r+0x6c6>
 800c77e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c782:	2000      	movs	r0, #0
 800c784:	49a7      	ldr	r1, [pc, #668]	@ (800ca24 <_dtoa_r+0x8a4>)
 800c786:	f7f7 fcef 	bl	8004168 <__aeabi_dsub>
 800c78a:	4602      	mov	r2, r0
 800c78c:	460b      	mov	r3, r1
 800c78e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c792:	f7f8 f913 	bl	80049bc <__aeabi_dcmplt>
 800c796:	2800      	cmp	r0, #0
 800c798:	f43f af14 	beq.w	800c5c4 <_dtoa_r+0x444>
 800c79c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c79e:	1e73      	subs	r3, r6, #1
 800c7a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c7a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c7a6:	2b30      	cmp	r3, #48	@ 0x30
 800c7a8:	d0f8      	beq.n	800c79c <_dtoa_r+0x61c>
 800c7aa:	4647      	mov	r7, r8
 800c7ac:	e03b      	b.n	800c826 <_dtoa_r+0x6a6>
 800c7ae:	4b9e      	ldr	r3, [pc, #632]	@ (800ca28 <_dtoa_r+0x8a8>)
 800c7b0:	f7f7 fe92 	bl	80044d8 <__aeabi_dmul>
 800c7b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c7b8:	e7bc      	b.n	800c734 <_dtoa_r+0x5b4>
 800c7ba:	4656      	mov	r6, sl
 800c7bc:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800c7c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	f7f7 ffb0 	bl	800472c <__aeabi_ddiv>
 800c7cc:	f7f8 f934 	bl	8004a38 <__aeabi_d2iz>
 800c7d0:	4680      	mov	r8, r0
 800c7d2:	f7f7 fe17 	bl	8004404 <__aeabi_i2d>
 800c7d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7da:	f7f7 fe7d 	bl	80044d8 <__aeabi_dmul>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	f7f7 fcbf 	bl	8004168 <__aeabi_dsub>
 800c7ea:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c7ee:	9d08      	ldr	r5, [sp, #32]
 800c7f0:	f806 4b01 	strb.w	r4, [r6], #1
 800c7f4:	eba6 040a 	sub.w	r4, r6, sl
 800c7f8:	42a5      	cmp	r5, r4
 800c7fa:	4602      	mov	r2, r0
 800c7fc:	460b      	mov	r3, r1
 800c7fe:	d133      	bne.n	800c868 <_dtoa_r+0x6e8>
 800c800:	f7f7 fcb4 	bl	800416c <__adddf3>
 800c804:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c808:	4604      	mov	r4, r0
 800c80a:	460d      	mov	r5, r1
 800c80c:	f7f8 f8f4 	bl	80049f8 <__aeabi_dcmpgt>
 800c810:	b9c0      	cbnz	r0, 800c844 <_dtoa_r+0x6c4>
 800c812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c816:	4620      	mov	r0, r4
 800c818:	4629      	mov	r1, r5
 800c81a:	f7f8 f8c5 	bl	80049a8 <__aeabi_dcmpeq>
 800c81e:	b110      	cbz	r0, 800c826 <_dtoa_r+0x6a6>
 800c820:	f018 0f01 	tst.w	r8, #1
 800c824:	d10e      	bne.n	800c844 <_dtoa_r+0x6c4>
 800c826:	4648      	mov	r0, r9
 800c828:	9903      	ldr	r1, [sp, #12]
 800c82a:	f000 fbbb 	bl	800cfa4 <_Bfree>
 800c82e:	2300      	movs	r3, #0
 800c830:	7033      	strb	r3, [r6, #0]
 800c832:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c834:	3701      	adds	r7, #1
 800c836:	601f      	str	r7, [r3, #0]
 800c838:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f000 824b 	beq.w	800ccd6 <_dtoa_r+0xb56>
 800c840:	601e      	str	r6, [r3, #0]
 800c842:	e248      	b.n	800ccd6 <_dtoa_r+0xb56>
 800c844:	46b8      	mov	r8, r7
 800c846:	4633      	mov	r3, r6
 800c848:	461e      	mov	r6, r3
 800c84a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c84e:	2a39      	cmp	r2, #57	@ 0x39
 800c850:	d106      	bne.n	800c860 <_dtoa_r+0x6e0>
 800c852:	459a      	cmp	sl, r3
 800c854:	d1f8      	bne.n	800c848 <_dtoa_r+0x6c8>
 800c856:	2230      	movs	r2, #48	@ 0x30
 800c858:	f108 0801 	add.w	r8, r8, #1
 800c85c:	f88a 2000 	strb.w	r2, [sl]
 800c860:	781a      	ldrb	r2, [r3, #0]
 800c862:	3201      	adds	r2, #1
 800c864:	701a      	strb	r2, [r3, #0]
 800c866:	e7a0      	b.n	800c7aa <_dtoa_r+0x62a>
 800c868:	2200      	movs	r2, #0
 800c86a:	4b6f      	ldr	r3, [pc, #444]	@ (800ca28 <_dtoa_r+0x8a8>)
 800c86c:	f7f7 fe34 	bl	80044d8 <__aeabi_dmul>
 800c870:	2200      	movs	r2, #0
 800c872:	2300      	movs	r3, #0
 800c874:	4604      	mov	r4, r0
 800c876:	460d      	mov	r5, r1
 800c878:	f7f8 f896 	bl	80049a8 <__aeabi_dcmpeq>
 800c87c:	2800      	cmp	r0, #0
 800c87e:	d09f      	beq.n	800c7c0 <_dtoa_r+0x640>
 800c880:	e7d1      	b.n	800c826 <_dtoa_r+0x6a6>
 800c882:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c884:	2a00      	cmp	r2, #0
 800c886:	f000 80ea 	beq.w	800ca5e <_dtoa_r+0x8de>
 800c88a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c88c:	2a01      	cmp	r2, #1
 800c88e:	f300 80cd 	bgt.w	800ca2c <_dtoa_r+0x8ac>
 800c892:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c894:	2a00      	cmp	r2, #0
 800c896:	f000 80c1 	beq.w	800ca1c <_dtoa_r+0x89c>
 800c89a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c89e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c8a0:	9e04      	ldr	r6, [sp, #16]
 800c8a2:	9a04      	ldr	r2, [sp, #16]
 800c8a4:	2101      	movs	r1, #1
 800c8a6:	441a      	add	r2, r3
 800c8a8:	9204      	str	r2, [sp, #16]
 800c8aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8ac:	4648      	mov	r0, r9
 800c8ae:	441a      	add	r2, r3
 800c8b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8b2:	f000 fc2b 	bl	800d10c <__i2b>
 800c8b6:	4605      	mov	r5, r0
 800c8b8:	b166      	cbz	r6, 800c8d4 <_dtoa_r+0x754>
 800c8ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	dd09      	ble.n	800c8d4 <_dtoa_r+0x754>
 800c8c0:	42b3      	cmp	r3, r6
 800c8c2:	bfa8      	it	ge
 800c8c4:	4633      	movge	r3, r6
 800c8c6:	9a04      	ldr	r2, [sp, #16]
 800c8c8:	1af6      	subs	r6, r6, r3
 800c8ca:	1ad2      	subs	r2, r2, r3
 800c8cc:	9204      	str	r2, [sp, #16]
 800c8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8d0:	1ad3      	subs	r3, r2, r3
 800c8d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8d6:	b30b      	cbz	r3, 800c91c <_dtoa_r+0x79c>
 800c8d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f000 80c6 	beq.w	800ca6c <_dtoa_r+0x8ec>
 800c8e0:	2c00      	cmp	r4, #0
 800c8e2:	f000 80c0 	beq.w	800ca66 <_dtoa_r+0x8e6>
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	4622      	mov	r2, r4
 800c8ea:	4648      	mov	r0, r9
 800c8ec:	f000 fcc6 	bl	800d27c <__pow5mult>
 800c8f0:	9a03      	ldr	r2, [sp, #12]
 800c8f2:	4601      	mov	r1, r0
 800c8f4:	4605      	mov	r5, r0
 800c8f6:	4648      	mov	r0, r9
 800c8f8:	f000 fc1e 	bl	800d138 <__multiply>
 800c8fc:	9903      	ldr	r1, [sp, #12]
 800c8fe:	4680      	mov	r8, r0
 800c900:	4648      	mov	r0, r9
 800c902:	f000 fb4f 	bl	800cfa4 <_Bfree>
 800c906:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c908:	1b1b      	subs	r3, r3, r4
 800c90a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c90c:	f000 80b1 	beq.w	800ca72 <_dtoa_r+0x8f2>
 800c910:	4641      	mov	r1, r8
 800c912:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c914:	4648      	mov	r0, r9
 800c916:	f000 fcb1 	bl	800d27c <__pow5mult>
 800c91a:	9003      	str	r0, [sp, #12]
 800c91c:	2101      	movs	r1, #1
 800c91e:	4648      	mov	r0, r9
 800c920:	f000 fbf4 	bl	800d10c <__i2b>
 800c924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c926:	4604      	mov	r4, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	f000 81d8 	beq.w	800ccde <_dtoa_r+0xb5e>
 800c92e:	461a      	mov	r2, r3
 800c930:	4601      	mov	r1, r0
 800c932:	4648      	mov	r0, r9
 800c934:	f000 fca2 	bl	800d27c <__pow5mult>
 800c938:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c93a:	4604      	mov	r4, r0
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	f300 809f 	bgt.w	800ca80 <_dtoa_r+0x900>
 800c942:	9b06      	ldr	r3, [sp, #24]
 800c944:	2b00      	cmp	r3, #0
 800c946:	f040 8097 	bne.w	800ca78 <_dtoa_r+0x8f8>
 800c94a:	9b07      	ldr	r3, [sp, #28]
 800c94c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c950:	2b00      	cmp	r3, #0
 800c952:	f040 8093 	bne.w	800ca7c <_dtoa_r+0x8fc>
 800c956:	9b07      	ldr	r3, [sp, #28]
 800c958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c95c:	0d1b      	lsrs	r3, r3, #20
 800c95e:	051b      	lsls	r3, r3, #20
 800c960:	b133      	cbz	r3, 800c970 <_dtoa_r+0x7f0>
 800c962:	9b04      	ldr	r3, [sp, #16]
 800c964:	3301      	adds	r3, #1
 800c966:	9304      	str	r3, [sp, #16]
 800c968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c96a:	3301      	adds	r3, #1
 800c96c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c96e:	2301      	movs	r3, #1
 800c970:	930a      	str	r3, [sp, #40]	@ 0x28
 800c972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c974:	2b00      	cmp	r3, #0
 800c976:	f000 81b8 	beq.w	800ccea <_dtoa_r+0xb6a>
 800c97a:	6923      	ldr	r3, [r4, #16]
 800c97c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c980:	6918      	ldr	r0, [r3, #16]
 800c982:	f000 fb77 	bl	800d074 <__hi0bits>
 800c986:	f1c0 0020 	rsb	r0, r0, #32
 800c98a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c98c:	4418      	add	r0, r3
 800c98e:	f010 001f 	ands.w	r0, r0, #31
 800c992:	f000 8082 	beq.w	800ca9a <_dtoa_r+0x91a>
 800c996:	f1c0 0320 	rsb	r3, r0, #32
 800c99a:	2b04      	cmp	r3, #4
 800c99c:	dd73      	ble.n	800ca86 <_dtoa_r+0x906>
 800c99e:	9b04      	ldr	r3, [sp, #16]
 800c9a0:	f1c0 001c 	rsb	r0, r0, #28
 800c9a4:	4403      	add	r3, r0
 800c9a6:	9304      	str	r3, [sp, #16]
 800c9a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9aa:	4406      	add	r6, r0
 800c9ac:	4403      	add	r3, r0
 800c9ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9b0:	9b04      	ldr	r3, [sp, #16]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	dd05      	ble.n	800c9c2 <_dtoa_r+0x842>
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	4648      	mov	r0, r9
 800c9ba:	9903      	ldr	r1, [sp, #12]
 800c9bc:	f000 fcb8 	bl	800d330 <__lshift>
 800c9c0:	9003      	str	r0, [sp, #12]
 800c9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	dd05      	ble.n	800c9d4 <_dtoa_r+0x854>
 800c9c8:	4621      	mov	r1, r4
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	4648      	mov	r0, r9
 800c9ce:	f000 fcaf 	bl	800d330 <__lshift>
 800c9d2:	4604      	mov	r4, r0
 800c9d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d061      	beq.n	800ca9e <_dtoa_r+0x91e>
 800c9da:	4621      	mov	r1, r4
 800c9dc:	9803      	ldr	r0, [sp, #12]
 800c9de:	f000 fd13 	bl	800d408 <__mcmp>
 800c9e2:	2800      	cmp	r0, #0
 800c9e4:	da5b      	bge.n	800ca9e <_dtoa_r+0x91e>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	220a      	movs	r2, #10
 800c9ea:	4648      	mov	r0, r9
 800c9ec:	9903      	ldr	r1, [sp, #12]
 800c9ee:	f000 fafb 	bl	800cfe8 <__multadd>
 800c9f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9f4:	f107 38ff 	add.w	r8, r7, #4294967295
 800c9f8:	9003      	str	r0, [sp, #12]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	f000 8177 	beq.w	800ccee <_dtoa_r+0xb6e>
 800ca00:	4629      	mov	r1, r5
 800ca02:	2300      	movs	r3, #0
 800ca04:	220a      	movs	r2, #10
 800ca06:	4648      	mov	r0, r9
 800ca08:	f000 faee 	bl	800cfe8 <__multadd>
 800ca0c:	f1bb 0f00 	cmp.w	fp, #0
 800ca10:	4605      	mov	r5, r0
 800ca12:	dc6f      	bgt.n	800caf4 <_dtoa_r+0x974>
 800ca14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ca16:	2b02      	cmp	r3, #2
 800ca18:	dc49      	bgt.n	800caae <_dtoa_r+0x92e>
 800ca1a:	e06b      	b.n	800caf4 <_dtoa_r+0x974>
 800ca1c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ca1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ca22:	e73c      	b.n	800c89e <_dtoa_r+0x71e>
 800ca24:	3fe00000 	.word	0x3fe00000
 800ca28:	40240000 	.word	0x40240000
 800ca2c:	9b08      	ldr	r3, [sp, #32]
 800ca2e:	1e5c      	subs	r4, r3, #1
 800ca30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca32:	42a3      	cmp	r3, r4
 800ca34:	db09      	blt.n	800ca4a <_dtoa_r+0x8ca>
 800ca36:	1b1c      	subs	r4, r3, r4
 800ca38:	9b08      	ldr	r3, [sp, #32]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	f6bf af30 	bge.w	800c8a0 <_dtoa_r+0x720>
 800ca40:	9b04      	ldr	r3, [sp, #16]
 800ca42:	9a08      	ldr	r2, [sp, #32]
 800ca44:	1a9e      	subs	r6, r3, r2
 800ca46:	2300      	movs	r3, #0
 800ca48:	e72b      	b.n	800c8a2 <_dtoa_r+0x722>
 800ca4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca4e:	1ae3      	subs	r3, r4, r3
 800ca50:	441a      	add	r2, r3
 800ca52:	940a      	str	r4, [sp, #40]	@ 0x28
 800ca54:	9e04      	ldr	r6, [sp, #16]
 800ca56:	2400      	movs	r4, #0
 800ca58:	9b08      	ldr	r3, [sp, #32]
 800ca5a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca5c:	e721      	b.n	800c8a2 <_dtoa_r+0x722>
 800ca5e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ca60:	9e04      	ldr	r6, [sp, #16]
 800ca62:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ca64:	e728      	b.n	800c8b8 <_dtoa_r+0x738>
 800ca66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ca6a:	e751      	b.n	800c910 <_dtoa_r+0x790>
 800ca6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca6e:	9903      	ldr	r1, [sp, #12]
 800ca70:	e750      	b.n	800c914 <_dtoa_r+0x794>
 800ca72:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca76:	e751      	b.n	800c91c <_dtoa_r+0x79c>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	e779      	b.n	800c970 <_dtoa_r+0x7f0>
 800ca7c:	9b06      	ldr	r3, [sp, #24]
 800ca7e:	e777      	b.n	800c970 <_dtoa_r+0x7f0>
 800ca80:	2300      	movs	r3, #0
 800ca82:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca84:	e779      	b.n	800c97a <_dtoa_r+0x7fa>
 800ca86:	d093      	beq.n	800c9b0 <_dtoa_r+0x830>
 800ca88:	9a04      	ldr	r2, [sp, #16]
 800ca8a:	331c      	adds	r3, #28
 800ca8c:	441a      	add	r2, r3
 800ca8e:	9204      	str	r2, [sp, #16]
 800ca90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca92:	441e      	add	r6, r3
 800ca94:	441a      	add	r2, r3
 800ca96:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca98:	e78a      	b.n	800c9b0 <_dtoa_r+0x830>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	e7f4      	b.n	800ca88 <_dtoa_r+0x908>
 800ca9e:	9b08      	ldr	r3, [sp, #32]
 800caa0:	46b8      	mov	r8, r7
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	dc20      	bgt.n	800cae8 <_dtoa_r+0x968>
 800caa6:	469b      	mov	fp, r3
 800caa8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800caaa:	2b02      	cmp	r3, #2
 800caac:	dd1e      	ble.n	800caec <_dtoa_r+0x96c>
 800caae:	f1bb 0f00 	cmp.w	fp, #0
 800cab2:	f47f adb1 	bne.w	800c618 <_dtoa_r+0x498>
 800cab6:	4621      	mov	r1, r4
 800cab8:	465b      	mov	r3, fp
 800caba:	2205      	movs	r2, #5
 800cabc:	4648      	mov	r0, r9
 800cabe:	f000 fa93 	bl	800cfe8 <__multadd>
 800cac2:	4601      	mov	r1, r0
 800cac4:	4604      	mov	r4, r0
 800cac6:	9803      	ldr	r0, [sp, #12]
 800cac8:	f000 fc9e 	bl	800d408 <__mcmp>
 800cacc:	2800      	cmp	r0, #0
 800cace:	f77f ada3 	ble.w	800c618 <_dtoa_r+0x498>
 800cad2:	4656      	mov	r6, sl
 800cad4:	2331      	movs	r3, #49	@ 0x31
 800cad6:	f108 0801 	add.w	r8, r8, #1
 800cada:	f806 3b01 	strb.w	r3, [r6], #1
 800cade:	e59f      	b.n	800c620 <_dtoa_r+0x4a0>
 800cae0:	46b8      	mov	r8, r7
 800cae2:	9c08      	ldr	r4, [sp, #32]
 800cae4:	4625      	mov	r5, r4
 800cae6:	e7f4      	b.n	800cad2 <_dtoa_r+0x952>
 800cae8:	f8dd b020 	ldr.w	fp, [sp, #32]
 800caec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caee:	2b00      	cmp	r3, #0
 800caf0:	f000 8101 	beq.w	800ccf6 <_dtoa_r+0xb76>
 800caf4:	2e00      	cmp	r6, #0
 800caf6:	dd05      	ble.n	800cb04 <_dtoa_r+0x984>
 800caf8:	4629      	mov	r1, r5
 800cafa:	4632      	mov	r2, r6
 800cafc:	4648      	mov	r0, r9
 800cafe:	f000 fc17 	bl	800d330 <__lshift>
 800cb02:	4605      	mov	r5, r0
 800cb04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d05c      	beq.n	800cbc4 <_dtoa_r+0xa44>
 800cb0a:	4648      	mov	r0, r9
 800cb0c:	6869      	ldr	r1, [r5, #4]
 800cb0e:	f000 fa09 	bl	800cf24 <_Balloc>
 800cb12:	4606      	mov	r6, r0
 800cb14:	b928      	cbnz	r0, 800cb22 <_dtoa_r+0x9a2>
 800cb16:	4602      	mov	r2, r0
 800cb18:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cb1c:	4b80      	ldr	r3, [pc, #512]	@ (800cd20 <_dtoa_r+0xba0>)
 800cb1e:	f7ff bb43 	b.w	800c1a8 <_dtoa_r+0x28>
 800cb22:	692a      	ldr	r2, [r5, #16]
 800cb24:	f105 010c 	add.w	r1, r5, #12
 800cb28:	3202      	adds	r2, #2
 800cb2a:	0092      	lsls	r2, r2, #2
 800cb2c:	300c      	adds	r0, #12
 800cb2e:	f000 ff9d 	bl	800da6c <memcpy>
 800cb32:	2201      	movs	r2, #1
 800cb34:	4631      	mov	r1, r6
 800cb36:	4648      	mov	r0, r9
 800cb38:	f000 fbfa 	bl	800d330 <__lshift>
 800cb3c:	462f      	mov	r7, r5
 800cb3e:	4605      	mov	r5, r0
 800cb40:	f10a 0301 	add.w	r3, sl, #1
 800cb44:	9304      	str	r3, [sp, #16]
 800cb46:	eb0a 030b 	add.w	r3, sl, fp
 800cb4a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb4c:	9b06      	ldr	r3, [sp, #24]
 800cb4e:	f003 0301 	and.w	r3, r3, #1
 800cb52:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb54:	9b04      	ldr	r3, [sp, #16]
 800cb56:	4621      	mov	r1, r4
 800cb58:	9803      	ldr	r0, [sp, #12]
 800cb5a:	f103 3bff 	add.w	fp, r3, #4294967295
 800cb5e:	f7ff fa86 	bl	800c06e <quorem>
 800cb62:	4603      	mov	r3, r0
 800cb64:	4639      	mov	r1, r7
 800cb66:	3330      	adds	r3, #48	@ 0x30
 800cb68:	9006      	str	r0, [sp, #24]
 800cb6a:	9803      	ldr	r0, [sp, #12]
 800cb6c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb6e:	f000 fc4b 	bl	800d408 <__mcmp>
 800cb72:	462a      	mov	r2, r5
 800cb74:	9008      	str	r0, [sp, #32]
 800cb76:	4621      	mov	r1, r4
 800cb78:	4648      	mov	r0, r9
 800cb7a:	f000 fc61 	bl	800d440 <__mdiff>
 800cb7e:	68c2      	ldr	r2, [r0, #12]
 800cb80:	4606      	mov	r6, r0
 800cb82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb84:	bb02      	cbnz	r2, 800cbc8 <_dtoa_r+0xa48>
 800cb86:	4601      	mov	r1, r0
 800cb88:	9803      	ldr	r0, [sp, #12]
 800cb8a:	f000 fc3d 	bl	800d408 <__mcmp>
 800cb8e:	4602      	mov	r2, r0
 800cb90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb92:	4631      	mov	r1, r6
 800cb94:	4648      	mov	r0, r9
 800cb96:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800cb9a:	f000 fa03 	bl	800cfa4 <_Bfree>
 800cb9e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cba0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cba2:	9e04      	ldr	r6, [sp, #16]
 800cba4:	ea42 0103 	orr.w	r1, r2, r3
 800cba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbaa:	4319      	orrs	r1, r3
 800cbac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cbae:	d10d      	bne.n	800cbcc <_dtoa_r+0xa4c>
 800cbb0:	2b39      	cmp	r3, #57	@ 0x39
 800cbb2:	d027      	beq.n	800cc04 <_dtoa_r+0xa84>
 800cbb4:	9a08      	ldr	r2, [sp, #32]
 800cbb6:	2a00      	cmp	r2, #0
 800cbb8:	dd01      	ble.n	800cbbe <_dtoa_r+0xa3e>
 800cbba:	9b06      	ldr	r3, [sp, #24]
 800cbbc:	3331      	adds	r3, #49	@ 0x31
 800cbbe:	f88b 3000 	strb.w	r3, [fp]
 800cbc2:	e52e      	b.n	800c622 <_dtoa_r+0x4a2>
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	e7b9      	b.n	800cb3c <_dtoa_r+0x9bc>
 800cbc8:	2201      	movs	r2, #1
 800cbca:	e7e2      	b.n	800cb92 <_dtoa_r+0xa12>
 800cbcc:	9908      	ldr	r1, [sp, #32]
 800cbce:	2900      	cmp	r1, #0
 800cbd0:	db04      	blt.n	800cbdc <_dtoa_r+0xa5c>
 800cbd2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800cbd4:	4301      	orrs	r1, r0
 800cbd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cbd8:	4301      	orrs	r1, r0
 800cbda:	d120      	bne.n	800cc1e <_dtoa_r+0xa9e>
 800cbdc:	2a00      	cmp	r2, #0
 800cbde:	ddee      	ble.n	800cbbe <_dtoa_r+0xa3e>
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	9903      	ldr	r1, [sp, #12]
 800cbe4:	4648      	mov	r0, r9
 800cbe6:	9304      	str	r3, [sp, #16]
 800cbe8:	f000 fba2 	bl	800d330 <__lshift>
 800cbec:	4621      	mov	r1, r4
 800cbee:	9003      	str	r0, [sp, #12]
 800cbf0:	f000 fc0a 	bl	800d408 <__mcmp>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	9b04      	ldr	r3, [sp, #16]
 800cbf8:	dc02      	bgt.n	800cc00 <_dtoa_r+0xa80>
 800cbfa:	d1e0      	bne.n	800cbbe <_dtoa_r+0xa3e>
 800cbfc:	07da      	lsls	r2, r3, #31
 800cbfe:	d5de      	bpl.n	800cbbe <_dtoa_r+0xa3e>
 800cc00:	2b39      	cmp	r3, #57	@ 0x39
 800cc02:	d1da      	bne.n	800cbba <_dtoa_r+0xa3a>
 800cc04:	2339      	movs	r3, #57	@ 0x39
 800cc06:	f88b 3000 	strb.w	r3, [fp]
 800cc0a:	4633      	mov	r3, r6
 800cc0c:	461e      	mov	r6, r3
 800cc0e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cc12:	3b01      	subs	r3, #1
 800cc14:	2a39      	cmp	r2, #57	@ 0x39
 800cc16:	d04e      	beq.n	800ccb6 <_dtoa_r+0xb36>
 800cc18:	3201      	adds	r2, #1
 800cc1a:	701a      	strb	r2, [r3, #0]
 800cc1c:	e501      	b.n	800c622 <_dtoa_r+0x4a2>
 800cc1e:	2a00      	cmp	r2, #0
 800cc20:	dd03      	ble.n	800cc2a <_dtoa_r+0xaaa>
 800cc22:	2b39      	cmp	r3, #57	@ 0x39
 800cc24:	d0ee      	beq.n	800cc04 <_dtoa_r+0xa84>
 800cc26:	3301      	adds	r3, #1
 800cc28:	e7c9      	b.n	800cbbe <_dtoa_r+0xa3e>
 800cc2a:	9a04      	ldr	r2, [sp, #16]
 800cc2c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cc32:	428a      	cmp	r2, r1
 800cc34:	d028      	beq.n	800cc88 <_dtoa_r+0xb08>
 800cc36:	2300      	movs	r3, #0
 800cc38:	220a      	movs	r2, #10
 800cc3a:	9903      	ldr	r1, [sp, #12]
 800cc3c:	4648      	mov	r0, r9
 800cc3e:	f000 f9d3 	bl	800cfe8 <__multadd>
 800cc42:	42af      	cmp	r7, r5
 800cc44:	9003      	str	r0, [sp, #12]
 800cc46:	f04f 0300 	mov.w	r3, #0
 800cc4a:	f04f 020a 	mov.w	r2, #10
 800cc4e:	4639      	mov	r1, r7
 800cc50:	4648      	mov	r0, r9
 800cc52:	d107      	bne.n	800cc64 <_dtoa_r+0xae4>
 800cc54:	f000 f9c8 	bl	800cfe8 <__multadd>
 800cc58:	4607      	mov	r7, r0
 800cc5a:	4605      	mov	r5, r0
 800cc5c:	9b04      	ldr	r3, [sp, #16]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	9304      	str	r3, [sp, #16]
 800cc62:	e777      	b.n	800cb54 <_dtoa_r+0x9d4>
 800cc64:	f000 f9c0 	bl	800cfe8 <__multadd>
 800cc68:	4629      	mov	r1, r5
 800cc6a:	4607      	mov	r7, r0
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	220a      	movs	r2, #10
 800cc70:	4648      	mov	r0, r9
 800cc72:	f000 f9b9 	bl	800cfe8 <__multadd>
 800cc76:	4605      	mov	r5, r0
 800cc78:	e7f0      	b.n	800cc5c <_dtoa_r+0xadc>
 800cc7a:	f1bb 0f00 	cmp.w	fp, #0
 800cc7e:	bfcc      	ite	gt
 800cc80:	465e      	movgt	r6, fp
 800cc82:	2601      	movle	r6, #1
 800cc84:	2700      	movs	r7, #0
 800cc86:	4456      	add	r6, sl
 800cc88:	2201      	movs	r2, #1
 800cc8a:	9903      	ldr	r1, [sp, #12]
 800cc8c:	4648      	mov	r0, r9
 800cc8e:	9304      	str	r3, [sp, #16]
 800cc90:	f000 fb4e 	bl	800d330 <__lshift>
 800cc94:	4621      	mov	r1, r4
 800cc96:	9003      	str	r0, [sp, #12]
 800cc98:	f000 fbb6 	bl	800d408 <__mcmp>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	dcb4      	bgt.n	800cc0a <_dtoa_r+0xa8a>
 800cca0:	d102      	bne.n	800cca8 <_dtoa_r+0xb28>
 800cca2:	9b04      	ldr	r3, [sp, #16]
 800cca4:	07db      	lsls	r3, r3, #31
 800cca6:	d4b0      	bmi.n	800cc0a <_dtoa_r+0xa8a>
 800cca8:	4633      	mov	r3, r6
 800ccaa:	461e      	mov	r6, r3
 800ccac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccb0:	2a30      	cmp	r2, #48	@ 0x30
 800ccb2:	d0fa      	beq.n	800ccaa <_dtoa_r+0xb2a>
 800ccb4:	e4b5      	b.n	800c622 <_dtoa_r+0x4a2>
 800ccb6:	459a      	cmp	sl, r3
 800ccb8:	d1a8      	bne.n	800cc0c <_dtoa_r+0xa8c>
 800ccba:	2331      	movs	r3, #49	@ 0x31
 800ccbc:	f108 0801 	add.w	r8, r8, #1
 800ccc0:	f88a 3000 	strb.w	r3, [sl]
 800ccc4:	e4ad      	b.n	800c622 <_dtoa_r+0x4a2>
 800ccc6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ccc8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800cd24 <_dtoa_r+0xba4>
 800cccc:	b11b      	cbz	r3, 800ccd6 <_dtoa_r+0xb56>
 800ccce:	f10a 0308 	add.w	r3, sl, #8
 800ccd2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ccd4:	6013      	str	r3, [r2, #0]
 800ccd6:	4650      	mov	r0, sl
 800ccd8:	b017      	add	sp, #92	@ 0x5c
 800ccda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccde:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	f77f ae2e 	ble.w	800c942 <_dtoa_r+0x7c2>
 800cce6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cce8:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccea:	2001      	movs	r0, #1
 800ccec:	e64d      	b.n	800c98a <_dtoa_r+0x80a>
 800ccee:	f1bb 0f00 	cmp.w	fp, #0
 800ccf2:	f77f aed9 	ble.w	800caa8 <_dtoa_r+0x928>
 800ccf6:	4656      	mov	r6, sl
 800ccf8:	4621      	mov	r1, r4
 800ccfa:	9803      	ldr	r0, [sp, #12]
 800ccfc:	f7ff f9b7 	bl	800c06e <quorem>
 800cd00:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800cd04:	f806 3b01 	strb.w	r3, [r6], #1
 800cd08:	eba6 020a 	sub.w	r2, r6, sl
 800cd0c:	4593      	cmp	fp, r2
 800cd0e:	ddb4      	ble.n	800cc7a <_dtoa_r+0xafa>
 800cd10:	2300      	movs	r3, #0
 800cd12:	220a      	movs	r2, #10
 800cd14:	4648      	mov	r0, r9
 800cd16:	9903      	ldr	r1, [sp, #12]
 800cd18:	f000 f966 	bl	800cfe8 <__multadd>
 800cd1c:	9003      	str	r0, [sp, #12]
 800cd1e:	e7eb      	b.n	800ccf8 <_dtoa_r+0xb78>
 800cd20:	0800eb64 	.word	0x0800eb64
 800cd24:	0800eae8 	.word	0x0800eae8

0800cd28 <_free_r>:
 800cd28:	b538      	push	{r3, r4, r5, lr}
 800cd2a:	4605      	mov	r5, r0
 800cd2c:	2900      	cmp	r1, #0
 800cd2e:	d040      	beq.n	800cdb2 <_free_r+0x8a>
 800cd30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd34:	1f0c      	subs	r4, r1, #4
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	bfb8      	it	lt
 800cd3a:	18e4      	addlt	r4, r4, r3
 800cd3c:	f000 f8e6 	bl	800cf0c <__malloc_lock>
 800cd40:	4a1c      	ldr	r2, [pc, #112]	@ (800cdb4 <_free_r+0x8c>)
 800cd42:	6813      	ldr	r3, [r2, #0]
 800cd44:	b933      	cbnz	r3, 800cd54 <_free_r+0x2c>
 800cd46:	6063      	str	r3, [r4, #4]
 800cd48:	6014      	str	r4, [r2, #0]
 800cd4a:	4628      	mov	r0, r5
 800cd4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd50:	f000 b8e2 	b.w	800cf18 <__malloc_unlock>
 800cd54:	42a3      	cmp	r3, r4
 800cd56:	d908      	bls.n	800cd6a <_free_r+0x42>
 800cd58:	6820      	ldr	r0, [r4, #0]
 800cd5a:	1821      	adds	r1, r4, r0
 800cd5c:	428b      	cmp	r3, r1
 800cd5e:	bf01      	itttt	eq
 800cd60:	6819      	ldreq	r1, [r3, #0]
 800cd62:	685b      	ldreq	r3, [r3, #4]
 800cd64:	1809      	addeq	r1, r1, r0
 800cd66:	6021      	streq	r1, [r4, #0]
 800cd68:	e7ed      	b.n	800cd46 <_free_r+0x1e>
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	b10b      	cbz	r3, 800cd74 <_free_r+0x4c>
 800cd70:	42a3      	cmp	r3, r4
 800cd72:	d9fa      	bls.n	800cd6a <_free_r+0x42>
 800cd74:	6811      	ldr	r1, [r2, #0]
 800cd76:	1850      	adds	r0, r2, r1
 800cd78:	42a0      	cmp	r0, r4
 800cd7a:	d10b      	bne.n	800cd94 <_free_r+0x6c>
 800cd7c:	6820      	ldr	r0, [r4, #0]
 800cd7e:	4401      	add	r1, r0
 800cd80:	1850      	adds	r0, r2, r1
 800cd82:	4283      	cmp	r3, r0
 800cd84:	6011      	str	r1, [r2, #0]
 800cd86:	d1e0      	bne.n	800cd4a <_free_r+0x22>
 800cd88:	6818      	ldr	r0, [r3, #0]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	4408      	add	r0, r1
 800cd8e:	6010      	str	r0, [r2, #0]
 800cd90:	6053      	str	r3, [r2, #4]
 800cd92:	e7da      	b.n	800cd4a <_free_r+0x22>
 800cd94:	d902      	bls.n	800cd9c <_free_r+0x74>
 800cd96:	230c      	movs	r3, #12
 800cd98:	602b      	str	r3, [r5, #0]
 800cd9a:	e7d6      	b.n	800cd4a <_free_r+0x22>
 800cd9c:	6820      	ldr	r0, [r4, #0]
 800cd9e:	1821      	adds	r1, r4, r0
 800cda0:	428b      	cmp	r3, r1
 800cda2:	bf01      	itttt	eq
 800cda4:	6819      	ldreq	r1, [r3, #0]
 800cda6:	685b      	ldreq	r3, [r3, #4]
 800cda8:	1809      	addeq	r1, r1, r0
 800cdaa:	6021      	streq	r1, [r4, #0]
 800cdac:	6063      	str	r3, [r4, #4]
 800cdae:	6054      	str	r4, [r2, #4]
 800cdb0:	e7cb      	b.n	800cd4a <_free_r+0x22>
 800cdb2:	bd38      	pop	{r3, r4, r5, pc}
 800cdb4:	200007a0 	.word	0x200007a0

0800cdb8 <malloc>:
 800cdb8:	4b02      	ldr	r3, [pc, #8]	@ (800cdc4 <malloc+0xc>)
 800cdba:	4601      	mov	r1, r0
 800cdbc:	6818      	ldr	r0, [r3, #0]
 800cdbe:	f000 b825 	b.w	800ce0c <_malloc_r>
 800cdc2:	bf00      	nop
 800cdc4:	20000040 	.word	0x20000040

0800cdc8 <sbrk_aligned>:
 800cdc8:	b570      	push	{r4, r5, r6, lr}
 800cdca:	4e0f      	ldr	r6, [pc, #60]	@ (800ce08 <sbrk_aligned+0x40>)
 800cdcc:	460c      	mov	r4, r1
 800cdce:	6831      	ldr	r1, [r6, #0]
 800cdd0:	4605      	mov	r5, r0
 800cdd2:	b911      	cbnz	r1, 800cdda <sbrk_aligned+0x12>
 800cdd4:	f000 fe3a 	bl	800da4c <_sbrk_r>
 800cdd8:	6030      	str	r0, [r6, #0]
 800cdda:	4621      	mov	r1, r4
 800cddc:	4628      	mov	r0, r5
 800cdde:	f000 fe35 	bl	800da4c <_sbrk_r>
 800cde2:	1c43      	adds	r3, r0, #1
 800cde4:	d103      	bne.n	800cdee <sbrk_aligned+0x26>
 800cde6:	f04f 34ff 	mov.w	r4, #4294967295
 800cdea:	4620      	mov	r0, r4
 800cdec:	bd70      	pop	{r4, r5, r6, pc}
 800cdee:	1cc4      	adds	r4, r0, #3
 800cdf0:	f024 0403 	bic.w	r4, r4, #3
 800cdf4:	42a0      	cmp	r0, r4
 800cdf6:	d0f8      	beq.n	800cdea <sbrk_aligned+0x22>
 800cdf8:	1a21      	subs	r1, r4, r0
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	f000 fe26 	bl	800da4c <_sbrk_r>
 800ce00:	3001      	adds	r0, #1
 800ce02:	d1f2      	bne.n	800cdea <sbrk_aligned+0x22>
 800ce04:	e7ef      	b.n	800cde6 <sbrk_aligned+0x1e>
 800ce06:	bf00      	nop
 800ce08:	2000079c 	.word	0x2000079c

0800ce0c <_malloc_r>:
 800ce0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce10:	1ccd      	adds	r5, r1, #3
 800ce12:	f025 0503 	bic.w	r5, r5, #3
 800ce16:	3508      	adds	r5, #8
 800ce18:	2d0c      	cmp	r5, #12
 800ce1a:	bf38      	it	cc
 800ce1c:	250c      	movcc	r5, #12
 800ce1e:	2d00      	cmp	r5, #0
 800ce20:	4606      	mov	r6, r0
 800ce22:	db01      	blt.n	800ce28 <_malloc_r+0x1c>
 800ce24:	42a9      	cmp	r1, r5
 800ce26:	d904      	bls.n	800ce32 <_malloc_r+0x26>
 800ce28:	230c      	movs	r3, #12
 800ce2a:	6033      	str	r3, [r6, #0]
 800ce2c:	2000      	movs	r0, #0
 800ce2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf08 <_malloc_r+0xfc>
 800ce36:	f000 f869 	bl	800cf0c <__malloc_lock>
 800ce3a:	f8d8 3000 	ldr.w	r3, [r8]
 800ce3e:	461c      	mov	r4, r3
 800ce40:	bb44      	cbnz	r4, 800ce94 <_malloc_r+0x88>
 800ce42:	4629      	mov	r1, r5
 800ce44:	4630      	mov	r0, r6
 800ce46:	f7ff ffbf 	bl	800cdc8 <sbrk_aligned>
 800ce4a:	1c43      	adds	r3, r0, #1
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	d158      	bne.n	800cf02 <_malloc_r+0xf6>
 800ce50:	f8d8 4000 	ldr.w	r4, [r8]
 800ce54:	4627      	mov	r7, r4
 800ce56:	2f00      	cmp	r7, #0
 800ce58:	d143      	bne.n	800cee2 <_malloc_r+0xd6>
 800ce5a:	2c00      	cmp	r4, #0
 800ce5c:	d04b      	beq.n	800cef6 <_malloc_r+0xea>
 800ce5e:	6823      	ldr	r3, [r4, #0]
 800ce60:	4639      	mov	r1, r7
 800ce62:	4630      	mov	r0, r6
 800ce64:	eb04 0903 	add.w	r9, r4, r3
 800ce68:	f000 fdf0 	bl	800da4c <_sbrk_r>
 800ce6c:	4581      	cmp	r9, r0
 800ce6e:	d142      	bne.n	800cef6 <_malloc_r+0xea>
 800ce70:	6821      	ldr	r1, [r4, #0]
 800ce72:	4630      	mov	r0, r6
 800ce74:	1a6d      	subs	r5, r5, r1
 800ce76:	4629      	mov	r1, r5
 800ce78:	f7ff ffa6 	bl	800cdc8 <sbrk_aligned>
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	d03a      	beq.n	800cef6 <_malloc_r+0xea>
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	442b      	add	r3, r5
 800ce84:	6023      	str	r3, [r4, #0]
 800ce86:	f8d8 3000 	ldr.w	r3, [r8]
 800ce8a:	685a      	ldr	r2, [r3, #4]
 800ce8c:	bb62      	cbnz	r2, 800cee8 <_malloc_r+0xdc>
 800ce8e:	f8c8 7000 	str.w	r7, [r8]
 800ce92:	e00f      	b.n	800ceb4 <_malloc_r+0xa8>
 800ce94:	6822      	ldr	r2, [r4, #0]
 800ce96:	1b52      	subs	r2, r2, r5
 800ce98:	d420      	bmi.n	800cedc <_malloc_r+0xd0>
 800ce9a:	2a0b      	cmp	r2, #11
 800ce9c:	d917      	bls.n	800cece <_malloc_r+0xc2>
 800ce9e:	1961      	adds	r1, r4, r5
 800cea0:	42a3      	cmp	r3, r4
 800cea2:	6025      	str	r5, [r4, #0]
 800cea4:	bf18      	it	ne
 800cea6:	6059      	strne	r1, [r3, #4]
 800cea8:	6863      	ldr	r3, [r4, #4]
 800ceaa:	bf08      	it	eq
 800ceac:	f8c8 1000 	streq.w	r1, [r8]
 800ceb0:	5162      	str	r2, [r4, r5]
 800ceb2:	604b      	str	r3, [r1, #4]
 800ceb4:	4630      	mov	r0, r6
 800ceb6:	f000 f82f 	bl	800cf18 <__malloc_unlock>
 800ceba:	f104 000b 	add.w	r0, r4, #11
 800cebe:	1d23      	adds	r3, r4, #4
 800cec0:	f020 0007 	bic.w	r0, r0, #7
 800cec4:	1ac2      	subs	r2, r0, r3
 800cec6:	bf1c      	itt	ne
 800cec8:	1a1b      	subne	r3, r3, r0
 800ceca:	50a3      	strne	r3, [r4, r2]
 800cecc:	e7af      	b.n	800ce2e <_malloc_r+0x22>
 800cece:	6862      	ldr	r2, [r4, #4]
 800ced0:	42a3      	cmp	r3, r4
 800ced2:	bf0c      	ite	eq
 800ced4:	f8c8 2000 	streq.w	r2, [r8]
 800ced8:	605a      	strne	r2, [r3, #4]
 800ceda:	e7eb      	b.n	800ceb4 <_malloc_r+0xa8>
 800cedc:	4623      	mov	r3, r4
 800cede:	6864      	ldr	r4, [r4, #4]
 800cee0:	e7ae      	b.n	800ce40 <_malloc_r+0x34>
 800cee2:	463c      	mov	r4, r7
 800cee4:	687f      	ldr	r7, [r7, #4]
 800cee6:	e7b6      	b.n	800ce56 <_malloc_r+0x4a>
 800cee8:	461a      	mov	r2, r3
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	42a3      	cmp	r3, r4
 800ceee:	d1fb      	bne.n	800cee8 <_malloc_r+0xdc>
 800cef0:	2300      	movs	r3, #0
 800cef2:	6053      	str	r3, [r2, #4]
 800cef4:	e7de      	b.n	800ceb4 <_malloc_r+0xa8>
 800cef6:	230c      	movs	r3, #12
 800cef8:	4630      	mov	r0, r6
 800cefa:	6033      	str	r3, [r6, #0]
 800cefc:	f000 f80c 	bl	800cf18 <__malloc_unlock>
 800cf00:	e794      	b.n	800ce2c <_malloc_r+0x20>
 800cf02:	6005      	str	r5, [r0, #0]
 800cf04:	e7d6      	b.n	800ceb4 <_malloc_r+0xa8>
 800cf06:	bf00      	nop
 800cf08:	200007a0 	.word	0x200007a0

0800cf0c <__malloc_lock>:
 800cf0c:	4801      	ldr	r0, [pc, #4]	@ (800cf14 <__malloc_lock+0x8>)
 800cf0e:	f7ff b89e 	b.w	800c04e <__retarget_lock_acquire_recursive>
 800cf12:	bf00      	nop
 800cf14:	20000798 	.word	0x20000798

0800cf18 <__malloc_unlock>:
 800cf18:	4801      	ldr	r0, [pc, #4]	@ (800cf20 <__malloc_unlock+0x8>)
 800cf1a:	f7ff b899 	b.w	800c050 <__retarget_lock_release_recursive>
 800cf1e:	bf00      	nop
 800cf20:	20000798 	.word	0x20000798

0800cf24 <_Balloc>:
 800cf24:	b570      	push	{r4, r5, r6, lr}
 800cf26:	69c6      	ldr	r6, [r0, #28]
 800cf28:	4604      	mov	r4, r0
 800cf2a:	460d      	mov	r5, r1
 800cf2c:	b976      	cbnz	r6, 800cf4c <_Balloc+0x28>
 800cf2e:	2010      	movs	r0, #16
 800cf30:	f7ff ff42 	bl	800cdb8 <malloc>
 800cf34:	4602      	mov	r2, r0
 800cf36:	61e0      	str	r0, [r4, #28]
 800cf38:	b920      	cbnz	r0, 800cf44 <_Balloc+0x20>
 800cf3a:	216b      	movs	r1, #107	@ 0x6b
 800cf3c:	4b17      	ldr	r3, [pc, #92]	@ (800cf9c <_Balloc+0x78>)
 800cf3e:	4818      	ldr	r0, [pc, #96]	@ (800cfa0 <_Balloc+0x7c>)
 800cf40:	f000 fda2 	bl	800da88 <__assert_func>
 800cf44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf48:	6006      	str	r6, [r0, #0]
 800cf4a:	60c6      	str	r6, [r0, #12]
 800cf4c:	69e6      	ldr	r6, [r4, #28]
 800cf4e:	68f3      	ldr	r3, [r6, #12]
 800cf50:	b183      	cbz	r3, 800cf74 <_Balloc+0x50>
 800cf52:	69e3      	ldr	r3, [r4, #28]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf5a:	b9b8      	cbnz	r0, 800cf8c <_Balloc+0x68>
 800cf5c:	2101      	movs	r1, #1
 800cf5e:	fa01 f605 	lsl.w	r6, r1, r5
 800cf62:	1d72      	adds	r2, r6, #5
 800cf64:	4620      	mov	r0, r4
 800cf66:	0092      	lsls	r2, r2, #2
 800cf68:	f000 fdac 	bl	800dac4 <_calloc_r>
 800cf6c:	b160      	cbz	r0, 800cf88 <_Balloc+0x64>
 800cf6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf72:	e00e      	b.n	800cf92 <_Balloc+0x6e>
 800cf74:	2221      	movs	r2, #33	@ 0x21
 800cf76:	2104      	movs	r1, #4
 800cf78:	4620      	mov	r0, r4
 800cf7a:	f000 fda3 	bl	800dac4 <_calloc_r>
 800cf7e:	69e3      	ldr	r3, [r4, #28]
 800cf80:	60f0      	str	r0, [r6, #12]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d1e4      	bne.n	800cf52 <_Balloc+0x2e>
 800cf88:	2000      	movs	r0, #0
 800cf8a:	bd70      	pop	{r4, r5, r6, pc}
 800cf8c:	6802      	ldr	r2, [r0, #0]
 800cf8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf92:	2300      	movs	r3, #0
 800cf94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf98:	e7f7      	b.n	800cf8a <_Balloc+0x66>
 800cf9a:	bf00      	nop
 800cf9c:	0800eaf5 	.word	0x0800eaf5
 800cfa0:	0800eb75 	.word	0x0800eb75

0800cfa4 <_Bfree>:
 800cfa4:	b570      	push	{r4, r5, r6, lr}
 800cfa6:	69c6      	ldr	r6, [r0, #28]
 800cfa8:	4605      	mov	r5, r0
 800cfaa:	460c      	mov	r4, r1
 800cfac:	b976      	cbnz	r6, 800cfcc <_Bfree+0x28>
 800cfae:	2010      	movs	r0, #16
 800cfb0:	f7ff ff02 	bl	800cdb8 <malloc>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	61e8      	str	r0, [r5, #28]
 800cfb8:	b920      	cbnz	r0, 800cfc4 <_Bfree+0x20>
 800cfba:	218f      	movs	r1, #143	@ 0x8f
 800cfbc:	4b08      	ldr	r3, [pc, #32]	@ (800cfe0 <_Bfree+0x3c>)
 800cfbe:	4809      	ldr	r0, [pc, #36]	@ (800cfe4 <_Bfree+0x40>)
 800cfc0:	f000 fd62 	bl	800da88 <__assert_func>
 800cfc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfc8:	6006      	str	r6, [r0, #0]
 800cfca:	60c6      	str	r6, [r0, #12]
 800cfcc:	b13c      	cbz	r4, 800cfde <_Bfree+0x3a>
 800cfce:	69eb      	ldr	r3, [r5, #28]
 800cfd0:	6862      	ldr	r2, [r4, #4]
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cfd8:	6021      	str	r1, [r4, #0]
 800cfda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfde:	bd70      	pop	{r4, r5, r6, pc}
 800cfe0:	0800eaf5 	.word	0x0800eaf5
 800cfe4:	0800eb75 	.word	0x0800eb75

0800cfe8 <__multadd>:
 800cfe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfec:	4607      	mov	r7, r0
 800cfee:	460c      	mov	r4, r1
 800cff0:	461e      	mov	r6, r3
 800cff2:	2000      	movs	r0, #0
 800cff4:	690d      	ldr	r5, [r1, #16]
 800cff6:	f101 0c14 	add.w	ip, r1, #20
 800cffa:	f8dc 3000 	ldr.w	r3, [ip]
 800cffe:	3001      	adds	r0, #1
 800d000:	b299      	uxth	r1, r3
 800d002:	fb02 6101 	mla	r1, r2, r1, r6
 800d006:	0c1e      	lsrs	r6, r3, #16
 800d008:	0c0b      	lsrs	r3, r1, #16
 800d00a:	fb02 3306 	mla	r3, r2, r6, r3
 800d00e:	b289      	uxth	r1, r1
 800d010:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d014:	4285      	cmp	r5, r0
 800d016:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d01a:	f84c 1b04 	str.w	r1, [ip], #4
 800d01e:	dcec      	bgt.n	800cffa <__multadd+0x12>
 800d020:	b30e      	cbz	r6, 800d066 <__multadd+0x7e>
 800d022:	68a3      	ldr	r3, [r4, #8]
 800d024:	42ab      	cmp	r3, r5
 800d026:	dc19      	bgt.n	800d05c <__multadd+0x74>
 800d028:	6861      	ldr	r1, [r4, #4]
 800d02a:	4638      	mov	r0, r7
 800d02c:	3101      	adds	r1, #1
 800d02e:	f7ff ff79 	bl	800cf24 <_Balloc>
 800d032:	4680      	mov	r8, r0
 800d034:	b928      	cbnz	r0, 800d042 <__multadd+0x5a>
 800d036:	4602      	mov	r2, r0
 800d038:	21ba      	movs	r1, #186	@ 0xba
 800d03a:	4b0c      	ldr	r3, [pc, #48]	@ (800d06c <__multadd+0x84>)
 800d03c:	480c      	ldr	r0, [pc, #48]	@ (800d070 <__multadd+0x88>)
 800d03e:	f000 fd23 	bl	800da88 <__assert_func>
 800d042:	6922      	ldr	r2, [r4, #16]
 800d044:	f104 010c 	add.w	r1, r4, #12
 800d048:	3202      	adds	r2, #2
 800d04a:	0092      	lsls	r2, r2, #2
 800d04c:	300c      	adds	r0, #12
 800d04e:	f000 fd0d 	bl	800da6c <memcpy>
 800d052:	4621      	mov	r1, r4
 800d054:	4638      	mov	r0, r7
 800d056:	f7ff ffa5 	bl	800cfa4 <_Bfree>
 800d05a:	4644      	mov	r4, r8
 800d05c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d060:	3501      	adds	r5, #1
 800d062:	615e      	str	r6, [r3, #20]
 800d064:	6125      	str	r5, [r4, #16]
 800d066:	4620      	mov	r0, r4
 800d068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d06c:	0800eb64 	.word	0x0800eb64
 800d070:	0800eb75 	.word	0x0800eb75

0800d074 <__hi0bits>:
 800d074:	4603      	mov	r3, r0
 800d076:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d07a:	bf3a      	itte	cc
 800d07c:	0403      	lslcc	r3, r0, #16
 800d07e:	2010      	movcc	r0, #16
 800d080:	2000      	movcs	r0, #0
 800d082:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d086:	bf3c      	itt	cc
 800d088:	021b      	lslcc	r3, r3, #8
 800d08a:	3008      	addcc	r0, #8
 800d08c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d090:	bf3c      	itt	cc
 800d092:	011b      	lslcc	r3, r3, #4
 800d094:	3004      	addcc	r0, #4
 800d096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d09a:	bf3c      	itt	cc
 800d09c:	009b      	lslcc	r3, r3, #2
 800d09e:	3002      	addcc	r0, #2
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	db05      	blt.n	800d0b0 <__hi0bits+0x3c>
 800d0a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d0a8:	f100 0001 	add.w	r0, r0, #1
 800d0ac:	bf08      	it	eq
 800d0ae:	2020      	moveq	r0, #32
 800d0b0:	4770      	bx	lr

0800d0b2 <__lo0bits>:
 800d0b2:	6803      	ldr	r3, [r0, #0]
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	f013 0007 	ands.w	r0, r3, #7
 800d0ba:	d00b      	beq.n	800d0d4 <__lo0bits+0x22>
 800d0bc:	07d9      	lsls	r1, r3, #31
 800d0be:	d421      	bmi.n	800d104 <__lo0bits+0x52>
 800d0c0:	0798      	lsls	r0, r3, #30
 800d0c2:	bf49      	itett	mi
 800d0c4:	085b      	lsrmi	r3, r3, #1
 800d0c6:	089b      	lsrpl	r3, r3, #2
 800d0c8:	2001      	movmi	r0, #1
 800d0ca:	6013      	strmi	r3, [r2, #0]
 800d0cc:	bf5c      	itt	pl
 800d0ce:	2002      	movpl	r0, #2
 800d0d0:	6013      	strpl	r3, [r2, #0]
 800d0d2:	4770      	bx	lr
 800d0d4:	b299      	uxth	r1, r3
 800d0d6:	b909      	cbnz	r1, 800d0dc <__lo0bits+0x2a>
 800d0d8:	2010      	movs	r0, #16
 800d0da:	0c1b      	lsrs	r3, r3, #16
 800d0dc:	b2d9      	uxtb	r1, r3
 800d0de:	b909      	cbnz	r1, 800d0e4 <__lo0bits+0x32>
 800d0e0:	3008      	adds	r0, #8
 800d0e2:	0a1b      	lsrs	r3, r3, #8
 800d0e4:	0719      	lsls	r1, r3, #28
 800d0e6:	bf04      	itt	eq
 800d0e8:	091b      	lsreq	r3, r3, #4
 800d0ea:	3004      	addeq	r0, #4
 800d0ec:	0799      	lsls	r1, r3, #30
 800d0ee:	bf04      	itt	eq
 800d0f0:	089b      	lsreq	r3, r3, #2
 800d0f2:	3002      	addeq	r0, #2
 800d0f4:	07d9      	lsls	r1, r3, #31
 800d0f6:	d403      	bmi.n	800d100 <__lo0bits+0x4e>
 800d0f8:	085b      	lsrs	r3, r3, #1
 800d0fa:	f100 0001 	add.w	r0, r0, #1
 800d0fe:	d003      	beq.n	800d108 <__lo0bits+0x56>
 800d100:	6013      	str	r3, [r2, #0]
 800d102:	4770      	bx	lr
 800d104:	2000      	movs	r0, #0
 800d106:	4770      	bx	lr
 800d108:	2020      	movs	r0, #32
 800d10a:	4770      	bx	lr

0800d10c <__i2b>:
 800d10c:	b510      	push	{r4, lr}
 800d10e:	460c      	mov	r4, r1
 800d110:	2101      	movs	r1, #1
 800d112:	f7ff ff07 	bl	800cf24 <_Balloc>
 800d116:	4602      	mov	r2, r0
 800d118:	b928      	cbnz	r0, 800d126 <__i2b+0x1a>
 800d11a:	f240 1145 	movw	r1, #325	@ 0x145
 800d11e:	4b04      	ldr	r3, [pc, #16]	@ (800d130 <__i2b+0x24>)
 800d120:	4804      	ldr	r0, [pc, #16]	@ (800d134 <__i2b+0x28>)
 800d122:	f000 fcb1 	bl	800da88 <__assert_func>
 800d126:	2301      	movs	r3, #1
 800d128:	6144      	str	r4, [r0, #20]
 800d12a:	6103      	str	r3, [r0, #16]
 800d12c:	bd10      	pop	{r4, pc}
 800d12e:	bf00      	nop
 800d130:	0800eb64 	.word	0x0800eb64
 800d134:	0800eb75 	.word	0x0800eb75

0800d138 <__multiply>:
 800d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13c:	4617      	mov	r7, r2
 800d13e:	690a      	ldr	r2, [r1, #16]
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	4689      	mov	r9, r1
 800d144:	429a      	cmp	r2, r3
 800d146:	bfa2      	ittt	ge
 800d148:	463b      	movge	r3, r7
 800d14a:	460f      	movge	r7, r1
 800d14c:	4699      	movge	r9, r3
 800d14e:	693d      	ldr	r5, [r7, #16]
 800d150:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	6879      	ldr	r1, [r7, #4]
 800d158:	eb05 060a 	add.w	r6, r5, sl
 800d15c:	42b3      	cmp	r3, r6
 800d15e:	b085      	sub	sp, #20
 800d160:	bfb8      	it	lt
 800d162:	3101      	addlt	r1, #1
 800d164:	f7ff fede 	bl	800cf24 <_Balloc>
 800d168:	b930      	cbnz	r0, 800d178 <__multiply+0x40>
 800d16a:	4602      	mov	r2, r0
 800d16c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d170:	4b40      	ldr	r3, [pc, #256]	@ (800d274 <__multiply+0x13c>)
 800d172:	4841      	ldr	r0, [pc, #260]	@ (800d278 <__multiply+0x140>)
 800d174:	f000 fc88 	bl	800da88 <__assert_func>
 800d178:	f100 0414 	add.w	r4, r0, #20
 800d17c:	4623      	mov	r3, r4
 800d17e:	2200      	movs	r2, #0
 800d180:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d184:	4573      	cmp	r3, lr
 800d186:	d320      	bcc.n	800d1ca <__multiply+0x92>
 800d188:	f107 0814 	add.w	r8, r7, #20
 800d18c:	f109 0114 	add.w	r1, r9, #20
 800d190:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d194:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d198:	9302      	str	r3, [sp, #8]
 800d19a:	1beb      	subs	r3, r5, r7
 800d19c:	3b15      	subs	r3, #21
 800d19e:	f023 0303 	bic.w	r3, r3, #3
 800d1a2:	3304      	adds	r3, #4
 800d1a4:	3715      	adds	r7, #21
 800d1a6:	42bd      	cmp	r5, r7
 800d1a8:	bf38      	it	cc
 800d1aa:	2304      	movcc	r3, #4
 800d1ac:	9301      	str	r3, [sp, #4]
 800d1ae:	9b02      	ldr	r3, [sp, #8]
 800d1b0:	9103      	str	r1, [sp, #12]
 800d1b2:	428b      	cmp	r3, r1
 800d1b4:	d80c      	bhi.n	800d1d0 <__multiply+0x98>
 800d1b6:	2e00      	cmp	r6, #0
 800d1b8:	dd03      	ble.n	800d1c2 <__multiply+0x8a>
 800d1ba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d055      	beq.n	800d26e <__multiply+0x136>
 800d1c2:	6106      	str	r6, [r0, #16]
 800d1c4:	b005      	add	sp, #20
 800d1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ca:	f843 2b04 	str.w	r2, [r3], #4
 800d1ce:	e7d9      	b.n	800d184 <__multiply+0x4c>
 800d1d0:	f8b1 a000 	ldrh.w	sl, [r1]
 800d1d4:	f1ba 0f00 	cmp.w	sl, #0
 800d1d8:	d01f      	beq.n	800d21a <__multiply+0xe2>
 800d1da:	46c4      	mov	ip, r8
 800d1dc:	46a1      	mov	r9, r4
 800d1de:	2700      	movs	r7, #0
 800d1e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d1e4:	f8d9 3000 	ldr.w	r3, [r9]
 800d1e8:	fa1f fb82 	uxth.w	fp, r2
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	fb0a 330b 	mla	r3, sl, fp, r3
 800d1f2:	443b      	add	r3, r7
 800d1f4:	f8d9 7000 	ldr.w	r7, [r9]
 800d1f8:	0c12      	lsrs	r2, r2, #16
 800d1fa:	0c3f      	lsrs	r7, r7, #16
 800d1fc:	fb0a 7202 	mla	r2, sl, r2, r7
 800d200:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d204:	b29b      	uxth	r3, r3
 800d206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d20a:	4565      	cmp	r5, ip
 800d20c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d210:	f849 3b04 	str.w	r3, [r9], #4
 800d214:	d8e4      	bhi.n	800d1e0 <__multiply+0xa8>
 800d216:	9b01      	ldr	r3, [sp, #4]
 800d218:	50e7      	str	r7, [r4, r3]
 800d21a:	9b03      	ldr	r3, [sp, #12]
 800d21c:	3104      	adds	r1, #4
 800d21e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d222:	f1b9 0f00 	cmp.w	r9, #0
 800d226:	d020      	beq.n	800d26a <__multiply+0x132>
 800d228:	4647      	mov	r7, r8
 800d22a:	46a4      	mov	ip, r4
 800d22c:	f04f 0a00 	mov.w	sl, #0
 800d230:	6823      	ldr	r3, [r4, #0]
 800d232:	f8b7 b000 	ldrh.w	fp, [r7]
 800d236:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	fb09 220b 	mla	r2, r9, fp, r2
 800d240:	4452      	add	r2, sl
 800d242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d246:	f84c 3b04 	str.w	r3, [ip], #4
 800d24a:	f857 3b04 	ldr.w	r3, [r7], #4
 800d24e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d252:	f8bc 3000 	ldrh.w	r3, [ip]
 800d256:	42bd      	cmp	r5, r7
 800d258:	fb09 330a 	mla	r3, r9, sl, r3
 800d25c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d260:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d264:	d8e5      	bhi.n	800d232 <__multiply+0xfa>
 800d266:	9a01      	ldr	r2, [sp, #4]
 800d268:	50a3      	str	r3, [r4, r2]
 800d26a:	3404      	adds	r4, #4
 800d26c:	e79f      	b.n	800d1ae <__multiply+0x76>
 800d26e:	3e01      	subs	r6, #1
 800d270:	e7a1      	b.n	800d1b6 <__multiply+0x7e>
 800d272:	bf00      	nop
 800d274:	0800eb64 	.word	0x0800eb64
 800d278:	0800eb75 	.word	0x0800eb75

0800d27c <__pow5mult>:
 800d27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d280:	4615      	mov	r5, r2
 800d282:	f012 0203 	ands.w	r2, r2, #3
 800d286:	4607      	mov	r7, r0
 800d288:	460e      	mov	r6, r1
 800d28a:	d007      	beq.n	800d29c <__pow5mult+0x20>
 800d28c:	4c25      	ldr	r4, [pc, #148]	@ (800d324 <__pow5mult+0xa8>)
 800d28e:	3a01      	subs	r2, #1
 800d290:	2300      	movs	r3, #0
 800d292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d296:	f7ff fea7 	bl	800cfe8 <__multadd>
 800d29a:	4606      	mov	r6, r0
 800d29c:	10ad      	asrs	r5, r5, #2
 800d29e:	d03d      	beq.n	800d31c <__pow5mult+0xa0>
 800d2a0:	69fc      	ldr	r4, [r7, #28]
 800d2a2:	b97c      	cbnz	r4, 800d2c4 <__pow5mult+0x48>
 800d2a4:	2010      	movs	r0, #16
 800d2a6:	f7ff fd87 	bl	800cdb8 <malloc>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	61f8      	str	r0, [r7, #28]
 800d2ae:	b928      	cbnz	r0, 800d2bc <__pow5mult+0x40>
 800d2b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d2b4:	4b1c      	ldr	r3, [pc, #112]	@ (800d328 <__pow5mult+0xac>)
 800d2b6:	481d      	ldr	r0, [pc, #116]	@ (800d32c <__pow5mult+0xb0>)
 800d2b8:	f000 fbe6 	bl	800da88 <__assert_func>
 800d2bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d2c0:	6004      	str	r4, [r0, #0]
 800d2c2:	60c4      	str	r4, [r0, #12]
 800d2c4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d2c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d2cc:	b94c      	cbnz	r4, 800d2e2 <__pow5mult+0x66>
 800d2ce:	f240 2171 	movw	r1, #625	@ 0x271
 800d2d2:	4638      	mov	r0, r7
 800d2d4:	f7ff ff1a 	bl	800d10c <__i2b>
 800d2d8:	2300      	movs	r3, #0
 800d2da:	4604      	mov	r4, r0
 800d2dc:	f8c8 0008 	str.w	r0, [r8, #8]
 800d2e0:	6003      	str	r3, [r0, #0]
 800d2e2:	f04f 0900 	mov.w	r9, #0
 800d2e6:	07eb      	lsls	r3, r5, #31
 800d2e8:	d50a      	bpl.n	800d300 <__pow5mult+0x84>
 800d2ea:	4631      	mov	r1, r6
 800d2ec:	4622      	mov	r2, r4
 800d2ee:	4638      	mov	r0, r7
 800d2f0:	f7ff ff22 	bl	800d138 <__multiply>
 800d2f4:	4680      	mov	r8, r0
 800d2f6:	4631      	mov	r1, r6
 800d2f8:	4638      	mov	r0, r7
 800d2fa:	f7ff fe53 	bl	800cfa4 <_Bfree>
 800d2fe:	4646      	mov	r6, r8
 800d300:	106d      	asrs	r5, r5, #1
 800d302:	d00b      	beq.n	800d31c <__pow5mult+0xa0>
 800d304:	6820      	ldr	r0, [r4, #0]
 800d306:	b938      	cbnz	r0, 800d318 <__pow5mult+0x9c>
 800d308:	4622      	mov	r2, r4
 800d30a:	4621      	mov	r1, r4
 800d30c:	4638      	mov	r0, r7
 800d30e:	f7ff ff13 	bl	800d138 <__multiply>
 800d312:	6020      	str	r0, [r4, #0]
 800d314:	f8c0 9000 	str.w	r9, [r0]
 800d318:	4604      	mov	r4, r0
 800d31a:	e7e4      	b.n	800d2e6 <__pow5mult+0x6a>
 800d31c:	4630      	mov	r0, r6
 800d31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d322:	bf00      	nop
 800d324:	0800ec28 	.word	0x0800ec28
 800d328:	0800eaf5 	.word	0x0800eaf5
 800d32c:	0800eb75 	.word	0x0800eb75

0800d330 <__lshift>:
 800d330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d334:	460c      	mov	r4, r1
 800d336:	4607      	mov	r7, r0
 800d338:	4691      	mov	r9, r2
 800d33a:	6923      	ldr	r3, [r4, #16]
 800d33c:	6849      	ldr	r1, [r1, #4]
 800d33e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d342:	68a3      	ldr	r3, [r4, #8]
 800d344:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d348:	f108 0601 	add.w	r6, r8, #1
 800d34c:	42b3      	cmp	r3, r6
 800d34e:	db0b      	blt.n	800d368 <__lshift+0x38>
 800d350:	4638      	mov	r0, r7
 800d352:	f7ff fde7 	bl	800cf24 <_Balloc>
 800d356:	4605      	mov	r5, r0
 800d358:	b948      	cbnz	r0, 800d36e <__lshift+0x3e>
 800d35a:	4602      	mov	r2, r0
 800d35c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d360:	4b27      	ldr	r3, [pc, #156]	@ (800d400 <__lshift+0xd0>)
 800d362:	4828      	ldr	r0, [pc, #160]	@ (800d404 <__lshift+0xd4>)
 800d364:	f000 fb90 	bl	800da88 <__assert_func>
 800d368:	3101      	adds	r1, #1
 800d36a:	005b      	lsls	r3, r3, #1
 800d36c:	e7ee      	b.n	800d34c <__lshift+0x1c>
 800d36e:	2300      	movs	r3, #0
 800d370:	f100 0114 	add.w	r1, r0, #20
 800d374:	f100 0210 	add.w	r2, r0, #16
 800d378:	4618      	mov	r0, r3
 800d37a:	4553      	cmp	r3, sl
 800d37c:	db33      	blt.n	800d3e6 <__lshift+0xb6>
 800d37e:	6920      	ldr	r0, [r4, #16]
 800d380:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d384:	f104 0314 	add.w	r3, r4, #20
 800d388:	f019 091f 	ands.w	r9, r9, #31
 800d38c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d390:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d394:	d02b      	beq.n	800d3ee <__lshift+0xbe>
 800d396:	468a      	mov	sl, r1
 800d398:	2200      	movs	r2, #0
 800d39a:	f1c9 0e20 	rsb	lr, r9, #32
 800d39e:	6818      	ldr	r0, [r3, #0]
 800d3a0:	fa00 f009 	lsl.w	r0, r0, r9
 800d3a4:	4310      	orrs	r0, r2
 800d3a6:	f84a 0b04 	str.w	r0, [sl], #4
 800d3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3ae:	459c      	cmp	ip, r3
 800d3b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d3b4:	d8f3      	bhi.n	800d39e <__lshift+0x6e>
 800d3b6:	ebac 0304 	sub.w	r3, ip, r4
 800d3ba:	3b15      	subs	r3, #21
 800d3bc:	f023 0303 	bic.w	r3, r3, #3
 800d3c0:	3304      	adds	r3, #4
 800d3c2:	f104 0015 	add.w	r0, r4, #21
 800d3c6:	4560      	cmp	r0, ip
 800d3c8:	bf88      	it	hi
 800d3ca:	2304      	movhi	r3, #4
 800d3cc:	50ca      	str	r2, [r1, r3]
 800d3ce:	b10a      	cbz	r2, 800d3d4 <__lshift+0xa4>
 800d3d0:	f108 0602 	add.w	r6, r8, #2
 800d3d4:	3e01      	subs	r6, #1
 800d3d6:	4638      	mov	r0, r7
 800d3d8:	4621      	mov	r1, r4
 800d3da:	612e      	str	r6, [r5, #16]
 800d3dc:	f7ff fde2 	bl	800cfa4 <_Bfree>
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	e7c5      	b.n	800d37a <__lshift+0x4a>
 800d3ee:	3904      	subs	r1, #4
 800d3f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3f4:	459c      	cmp	ip, r3
 800d3f6:	f841 2f04 	str.w	r2, [r1, #4]!
 800d3fa:	d8f9      	bhi.n	800d3f0 <__lshift+0xc0>
 800d3fc:	e7ea      	b.n	800d3d4 <__lshift+0xa4>
 800d3fe:	bf00      	nop
 800d400:	0800eb64 	.word	0x0800eb64
 800d404:	0800eb75 	.word	0x0800eb75

0800d408 <__mcmp>:
 800d408:	4603      	mov	r3, r0
 800d40a:	690a      	ldr	r2, [r1, #16]
 800d40c:	6900      	ldr	r0, [r0, #16]
 800d40e:	b530      	push	{r4, r5, lr}
 800d410:	1a80      	subs	r0, r0, r2
 800d412:	d10e      	bne.n	800d432 <__mcmp+0x2a>
 800d414:	3314      	adds	r3, #20
 800d416:	3114      	adds	r1, #20
 800d418:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d41c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d420:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d424:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d428:	4295      	cmp	r5, r2
 800d42a:	d003      	beq.n	800d434 <__mcmp+0x2c>
 800d42c:	d205      	bcs.n	800d43a <__mcmp+0x32>
 800d42e:	f04f 30ff 	mov.w	r0, #4294967295
 800d432:	bd30      	pop	{r4, r5, pc}
 800d434:	42a3      	cmp	r3, r4
 800d436:	d3f3      	bcc.n	800d420 <__mcmp+0x18>
 800d438:	e7fb      	b.n	800d432 <__mcmp+0x2a>
 800d43a:	2001      	movs	r0, #1
 800d43c:	e7f9      	b.n	800d432 <__mcmp+0x2a>
	...

0800d440 <__mdiff>:
 800d440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d444:	4689      	mov	r9, r1
 800d446:	4606      	mov	r6, r0
 800d448:	4611      	mov	r1, r2
 800d44a:	4648      	mov	r0, r9
 800d44c:	4614      	mov	r4, r2
 800d44e:	f7ff ffdb 	bl	800d408 <__mcmp>
 800d452:	1e05      	subs	r5, r0, #0
 800d454:	d112      	bne.n	800d47c <__mdiff+0x3c>
 800d456:	4629      	mov	r1, r5
 800d458:	4630      	mov	r0, r6
 800d45a:	f7ff fd63 	bl	800cf24 <_Balloc>
 800d45e:	4602      	mov	r2, r0
 800d460:	b928      	cbnz	r0, 800d46e <__mdiff+0x2e>
 800d462:	f240 2137 	movw	r1, #567	@ 0x237
 800d466:	4b3e      	ldr	r3, [pc, #248]	@ (800d560 <__mdiff+0x120>)
 800d468:	483e      	ldr	r0, [pc, #248]	@ (800d564 <__mdiff+0x124>)
 800d46a:	f000 fb0d 	bl	800da88 <__assert_func>
 800d46e:	2301      	movs	r3, #1
 800d470:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d474:	4610      	mov	r0, r2
 800d476:	b003      	add	sp, #12
 800d478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d47c:	bfbc      	itt	lt
 800d47e:	464b      	movlt	r3, r9
 800d480:	46a1      	movlt	r9, r4
 800d482:	4630      	mov	r0, r6
 800d484:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d488:	bfba      	itte	lt
 800d48a:	461c      	movlt	r4, r3
 800d48c:	2501      	movlt	r5, #1
 800d48e:	2500      	movge	r5, #0
 800d490:	f7ff fd48 	bl	800cf24 <_Balloc>
 800d494:	4602      	mov	r2, r0
 800d496:	b918      	cbnz	r0, 800d4a0 <__mdiff+0x60>
 800d498:	f240 2145 	movw	r1, #581	@ 0x245
 800d49c:	4b30      	ldr	r3, [pc, #192]	@ (800d560 <__mdiff+0x120>)
 800d49e:	e7e3      	b.n	800d468 <__mdiff+0x28>
 800d4a0:	f100 0b14 	add.w	fp, r0, #20
 800d4a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d4a8:	f109 0310 	add.w	r3, r9, #16
 800d4ac:	60c5      	str	r5, [r0, #12]
 800d4ae:	f04f 0c00 	mov.w	ip, #0
 800d4b2:	f109 0514 	add.w	r5, r9, #20
 800d4b6:	46d9      	mov	r9, fp
 800d4b8:	6926      	ldr	r6, [r4, #16]
 800d4ba:	f104 0e14 	add.w	lr, r4, #20
 800d4be:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d4c2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d4c6:	9301      	str	r3, [sp, #4]
 800d4c8:	9b01      	ldr	r3, [sp, #4]
 800d4ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d4ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d4d2:	b281      	uxth	r1, r0
 800d4d4:	9301      	str	r3, [sp, #4]
 800d4d6:	fa1f f38a 	uxth.w	r3, sl
 800d4da:	1a5b      	subs	r3, r3, r1
 800d4dc:	0c00      	lsrs	r0, r0, #16
 800d4de:	4463      	add	r3, ip
 800d4e0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d4e4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d4ee:	4576      	cmp	r6, lr
 800d4f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d4f4:	f849 3b04 	str.w	r3, [r9], #4
 800d4f8:	d8e6      	bhi.n	800d4c8 <__mdiff+0x88>
 800d4fa:	1b33      	subs	r3, r6, r4
 800d4fc:	3b15      	subs	r3, #21
 800d4fe:	f023 0303 	bic.w	r3, r3, #3
 800d502:	3415      	adds	r4, #21
 800d504:	3304      	adds	r3, #4
 800d506:	42a6      	cmp	r6, r4
 800d508:	bf38      	it	cc
 800d50a:	2304      	movcc	r3, #4
 800d50c:	441d      	add	r5, r3
 800d50e:	445b      	add	r3, fp
 800d510:	461e      	mov	r6, r3
 800d512:	462c      	mov	r4, r5
 800d514:	4544      	cmp	r4, r8
 800d516:	d30e      	bcc.n	800d536 <__mdiff+0xf6>
 800d518:	f108 0103 	add.w	r1, r8, #3
 800d51c:	1b49      	subs	r1, r1, r5
 800d51e:	f021 0103 	bic.w	r1, r1, #3
 800d522:	3d03      	subs	r5, #3
 800d524:	45a8      	cmp	r8, r5
 800d526:	bf38      	it	cc
 800d528:	2100      	movcc	r1, #0
 800d52a:	440b      	add	r3, r1
 800d52c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d530:	b199      	cbz	r1, 800d55a <__mdiff+0x11a>
 800d532:	6117      	str	r7, [r2, #16]
 800d534:	e79e      	b.n	800d474 <__mdiff+0x34>
 800d536:	46e6      	mov	lr, ip
 800d538:	f854 1b04 	ldr.w	r1, [r4], #4
 800d53c:	fa1f fc81 	uxth.w	ip, r1
 800d540:	44f4      	add	ip, lr
 800d542:	0c08      	lsrs	r0, r1, #16
 800d544:	4471      	add	r1, lr
 800d546:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d54a:	b289      	uxth	r1, r1
 800d54c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d550:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d554:	f846 1b04 	str.w	r1, [r6], #4
 800d558:	e7dc      	b.n	800d514 <__mdiff+0xd4>
 800d55a:	3f01      	subs	r7, #1
 800d55c:	e7e6      	b.n	800d52c <__mdiff+0xec>
 800d55e:	bf00      	nop
 800d560:	0800eb64 	.word	0x0800eb64
 800d564:	0800eb75 	.word	0x0800eb75

0800d568 <__d2b>:
 800d568:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d56c:	2101      	movs	r1, #1
 800d56e:	4690      	mov	r8, r2
 800d570:	4699      	mov	r9, r3
 800d572:	9e08      	ldr	r6, [sp, #32]
 800d574:	f7ff fcd6 	bl	800cf24 <_Balloc>
 800d578:	4604      	mov	r4, r0
 800d57a:	b930      	cbnz	r0, 800d58a <__d2b+0x22>
 800d57c:	4602      	mov	r2, r0
 800d57e:	f240 310f 	movw	r1, #783	@ 0x30f
 800d582:	4b23      	ldr	r3, [pc, #140]	@ (800d610 <__d2b+0xa8>)
 800d584:	4823      	ldr	r0, [pc, #140]	@ (800d614 <__d2b+0xac>)
 800d586:	f000 fa7f 	bl	800da88 <__assert_func>
 800d58a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d58e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d592:	b10d      	cbz	r5, 800d598 <__d2b+0x30>
 800d594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d598:	9301      	str	r3, [sp, #4]
 800d59a:	f1b8 0300 	subs.w	r3, r8, #0
 800d59e:	d024      	beq.n	800d5ea <__d2b+0x82>
 800d5a0:	4668      	mov	r0, sp
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	f7ff fd85 	bl	800d0b2 <__lo0bits>
 800d5a8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d5ac:	b1d8      	cbz	r0, 800d5e6 <__d2b+0x7e>
 800d5ae:	f1c0 0320 	rsb	r3, r0, #32
 800d5b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d5b6:	430b      	orrs	r3, r1
 800d5b8:	40c2      	lsrs	r2, r0
 800d5ba:	6163      	str	r3, [r4, #20]
 800d5bc:	9201      	str	r2, [sp, #4]
 800d5be:	9b01      	ldr	r3, [sp, #4]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	bf0c      	ite	eq
 800d5c4:	2201      	moveq	r2, #1
 800d5c6:	2202      	movne	r2, #2
 800d5c8:	61a3      	str	r3, [r4, #24]
 800d5ca:	6122      	str	r2, [r4, #16]
 800d5cc:	b1ad      	cbz	r5, 800d5fa <__d2b+0x92>
 800d5ce:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d5d2:	4405      	add	r5, r0
 800d5d4:	6035      	str	r5, [r6, #0]
 800d5d6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5dc:	6018      	str	r0, [r3, #0]
 800d5de:	4620      	mov	r0, r4
 800d5e0:	b002      	add	sp, #8
 800d5e2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d5e6:	6161      	str	r1, [r4, #20]
 800d5e8:	e7e9      	b.n	800d5be <__d2b+0x56>
 800d5ea:	a801      	add	r0, sp, #4
 800d5ec:	f7ff fd61 	bl	800d0b2 <__lo0bits>
 800d5f0:	9b01      	ldr	r3, [sp, #4]
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	6163      	str	r3, [r4, #20]
 800d5f6:	3020      	adds	r0, #32
 800d5f8:	e7e7      	b.n	800d5ca <__d2b+0x62>
 800d5fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d5fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d602:	6030      	str	r0, [r6, #0]
 800d604:	6918      	ldr	r0, [r3, #16]
 800d606:	f7ff fd35 	bl	800d074 <__hi0bits>
 800d60a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d60e:	e7e4      	b.n	800d5da <__d2b+0x72>
 800d610:	0800eb64 	.word	0x0800eb64
 800d614:	0800eb75 	.word	0x0800eb75

0800d618 <__ssputs_r>:
 800d618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d61c:	461f      	mov	r7, r3
 800d61e:	688e      	ldr	r6, [r1, #8]
 800d620:	4682      	mov	sl, r0
 800d622:	42be      	cmp	r6, r7
 800d624:	460c      	mov	r4, r1
 800d626:	4690      	mov	r8, r2
 800d628:	680b      	ldr	r3, [r1, #0]
 800d62a:	d82d      	bhi.n	800d688 <__ssputs_r+0x70>
 800d62c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d630:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d634:	d026      	beq.n	800d684 <__ssputs_r+0x6c>
 800d636:	6965      	ldr	r5, [r4, #20]
 800d638:	6909      	ldr	r1, [r1, #16]
 800d63a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d63e:	eba3 0901 	sub.w	r9, r3, r1
 800d642:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d646:	1c7b      	adds	r3, r7, #1
 800d648:	444b      	add	r3, r9
 800d64a:	106d      	asrs	r5, r5, #1
 800d64c:	429d      	cmp	r5, r3
 800d64e:	bf38      	it	cc
 800d650:	461d      	movcc	r5, r3
 800d652:	0553      	lsls	r3, r2, #21
 800d654:	d527      	bpl.n	800d6a6 <__ssputs_r+0x8e>
 800d656:	4629      	mov	r1, r5
 800d658:	f7ff fbd8 	bl	800ce0c <_malloc_r>
 800d65c:	4606      	mov	r6, r0
 800d65e:	b360      	cbz	r0, 800d6ba <__ssputs_r+0xa2>
 800d660:	464a      	mov	r2, r9
 800d662:	6921      	ldr	r1, [r4, #16]
 800d664:	f000 fa02 	bl	800da6c <memcpy>
 800d668:	89a3      	ldrh	r3, [r4, #12]
 800d66a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d66e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d672:	81a3      	strh	r3, [r4, #12]
 800d674:	6126      	str	r6, [r4, #16]
 800d676:	444e      	add	r6, r9
 800d678:	6026      	str	r6, [r4, #0]
 800d67a:	463e      	mov	r6, r7
 800d67c:	6165      	str	r5, [r4, #20]
 800d67e:	eba5 0509 	sub.w	r5, r5, r9
 800d682:	60a5      	str	r5, [r4, #8]
 800d684:	42be      	cmp	r6, r7
 800d686:	d900      	bls.n	800d68a <__ssputs_r+0x72>
 800d688:	463e      	mov	r6, r7
 800d68a:	4632      	mov	r2, r6
 800d68c:	4641      	mov	r1, r8
 800d68e:	6820      	ldr	r0, [r4, #0]
 800d690:	f000 f9c2 	bl	800da18 <memmove>
 800d694:	2000      	movs	r0, #0
 800d696:	68a3      	ldr	r3, [r4, #8]
 800d698:	1b9b      	subs	r3, r3, r6
 800d69a:	60a3      	str	r3, [r4, #8]
 800d69c:	6823      	ldr	r3, [r4, #0]
 800d69e:	4433      	add	r3, r6
 800d6a0:	6023      	str	r3, [r4, #0]
 800d6a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6a6:	462a      	mov	r2, r5
 800d6a8:	f000 fa32 	bl	800db10 <_realloc_r>
 800d6ac:	4606      	mov	r6, r0
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d1e0      	bne.n	800d674 <__ssputs_r+0x5c>
 800d6b2:	4650      	mov	r0, sl
 800d6b4:	6921      	ldr	r1, [r4, #16]
 800d6b6:	f7ff fb37 	bl	800cd28 <_free_r>
 800d6ba:	230c      	movs	r3, #12
 800d6bc:	f8ca 3000 	str.w	r3, [sl]
 800d6c0:	89a3      	ldrh	r3, [r4, #12]
 800d6c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6ca:	81a3      	strh	r3, [r4, #12]
 800d6cc:	e7e9      	b.n	800d6a2 <__ssputs_r+0x8a>
	...

0800d6d0 <_svfiprintf_r>:
 800d6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d4:	4698      	mov	r8, r3
 800d6d6:	898b      	ldrh	r3, [r1, #12]
 800d6d8:	4607      	mov	r7, r0
 800d6da:	061b      	lsls	r3, r3, #24
 800d6dc:	460d      	mov	r5, r1
 800d6de:	4614      	mov	r4, r2
 800d6e0:	b09d      	sub	sp, #116	@ 0x74
 800d6e2:	d510      	bpl.n	800d706 <_svfiprintf_r+0x36>
 800d6e4:	690b      	ldr	r3, [r1, #16]
 800d6e6:	b973      	cbnz	r3, 800d706 <_svfiprintf_r+0x36>
 800d6e8:	2140      	movs	r1, #64	@ 0x40
 800d6ea:	f7ff fb8f 	bl	800ce0c <_malloc_r>
 800d6ee:	6028      	str	r0, [r5, #0]
 800d6f0:	6128      	str	r0, [r5, #16]
 800d6f2:	b930      	cbnz	r0, 800d702 <_svfiprintf_r+0x32>
 800d6f4:	230c      	movs	r3, #12
 800d6f6:	603b      	str	r3, [r7, #0]
 800d6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6fc:	b01d      	add	sp, #116	@ 0x74
 800d6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d702:	2340      	movs	r3, #64	@ 0x40
 800d704:	616b      	str	r3, [r5, #20]
 800d706:	2300      	movs	r3, #0
 800d708:	9309      	str	r3, [sp, #36]	@ 0x24
 800d70a:	2320      	movs	r3, #32
 800d70c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d710:	2330      	movs	r3, #48	@ 0x30
 800d712:	f04f 0901 	mov.w	r9, #1
 800d716:	f8cd 800c 	str.w	r8, [sp, #12]
 800d71a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d8b4 <_svfiprintf_r+0x1e4>
 800d71e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d722:	4623      	mov	r3, r4
 800d724:	469a      	mov	sl, r3
 800d726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d72a:	b10a      	cbz	r2, 800d730 <_svfiprintf_r+0x60>
 800d72c:	2a25      	cmp	r2, #37	@ 0x25
 800d72e:	d1f9      	bne.n	800d724 <_svfiprintf_r+0x54>
 800d730:	ebba 0b04 	subs.w	fp, sl, r4
 800d734:	d00b      	beq.n	800d74e <_svfiprintf_r+0x7e>
 800d736:	465b      	mov	r3, fp
 800d738:	4622      	mov	r2, r4
 800d73a:	4629      	mov	r1, r5
 800d73c:	4638      	mov	r0, r7
 800d73e:	f7ff ff6b 	bl	800d618 <__ssputs_r>
 800d742:	3001      	adds	r0, #1
 800d744:	f000 80a7 	beq.w	800d896 <_svfiprintf_r+0x1c6>
 800d748:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d74a:	445a      	add	r2, fp
 800d74c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d74e:	f89a 3000 	ldrb.w	r3, [sl]
 800d752:	2b00      	cmp	r3, #0
 800d754:	f000 809f 	beq.w	800d896 <_svfiprintf_r+0x1c6>
 800d758:	2300      	movs	r3, #0
 800d75a:	f04f 32ff 	mov.w	r2, #4294967295
 800d75e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d762:	f10a 0a01 	add.w	sl, sl, #1
 800d766:	9304      	str	r3, [sp, #16]
 800d768:	9307      	str	r3, [sp, #28]
 800d76a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d76e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d770:	4654      	mov	r4, sl
 800d772:	2205      	movs	r2, #5
 800d774:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d778:	484e      	ldr	r0, [pc, #312]	@ (800d8b4 <_svfiprintf_r+0x1e4>)
 800d77a:	f7fe fc6a 	bl	800c052 <memchr>
 800d77e:	9a04      	ldr	r2, [sp, #16]
 800d780:	b9d8      	cbnz	r0, 800d7ba <_svfiprintf_r+0xea>
 800d782:	06d0      	lsls	r0, r2, #27
 800d784:	bf44      	itt	mi
 800d786:	2320      	movmi	r3, #32
 800d788:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d78c:	0711      	lsls	r1, r2, #28
 800d78e:	bf44      	itt	mi
 800d790:	232b      	movmi	r3, #43	@ 0x2b
 800d792:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d796:	f89a 3000 	ldrb.w	r3, [sl]
 800d79a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d79c:	d015      	beq.n	800d7ca <_svfiprintf_r+0xfa>
 800d79e:	4654      	mov	r4, sl
 800d7a0:	2000      	movs	r0, #0
 800d7a2:	f04f 0c0a 	mov.w	ip, #10
 800d7a6:	9a07      	ldr	r2, [sp, #28]
 800d7a8:	4621      	mov	r1, r4
 800d7aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7ae:	3b30      	subs	r3, #48	@ 0x30
 800d7b0:	2b09      	cmp	r3, #9
 800d7b2:	d94b      	bls.n	800d84c <_svfiprintf_r+0x17c>
 800d7b4:	b1b0      	cbz	r0, 800d7e4 <_svfiprintf_r+0x114>
 800d7b6:	9207      	str	r2, [sp, #28]
 800d7b8:	e014      	b.n	800d7e4 <_svfiprintf_r+0x114>
 800d7ba:	eba0 0308 	sub.w	r3, r0, r8
 800d7be:	fa09 f303 	lsl.w	r3, r9, r3
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	46a2      	mov	sl, r4
 800d7c6:	9304      	str	r3, [sp, #16]
 800d7c8:	e7d2      	b.n	800d770 <_svfiprintf_r+0xa0>
 800d7ca:	9b03      	ldr	r3, [sp, #12]
 800d7cc:	1d19      	adds	r1, r3, #4
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	9103      	str	r1, [sp, #12]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	bfbb      	ittet	lt
 800d7d6:	425b      	neglt	r3, r3
 800d7d8:	f042 0202 	orrlt.w	r2, r2, #2
 800d7dc:	9307      	strge	r3, [sp, #28]
 800d7de:	9307      	strlt	r3, [sp, #28]
 800d7e0:	bfb8      	it	lt
 800d7e2:	9204      	strlt	r2, [sp, #16]
 800d7e4:	7823      	ldrb	r3, [r4, #0]
 800d7e6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7e8:	d10a      	bne.n	800d800 <_svfiprintf_r+0x130>
 800d7ea:	7863      	ldrb	r3, [r4, #1]
 800d7ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7ee:	d132      	bne.n	800d856 <_svfiprintf_r+0x186>
 800d7f0:	9b03      	ldr	r3, [sp, #12]
 800d7f2:	3402      	adds	r4, #2
 800d7f4:	1d1a      	adds	r2, r3, #4
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	9203      	str	r2, [sp, #12]
 800d7fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7fe:	9305      	str	r3, [sp, #20]
 800d800:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d8b8 <_svfiprintf_r+0x1e8>
 800d804:	2203      	movs	r2, #3
 800d806:	4650      	mov	r0, sl
 800d808:	7821      	ldrb	r1, [r4, #0]
 800d80a:	f7fe fc22 	bl	800c052 <memchr>
 800d80e:	b138      	cbz	r0, 800d820 <_svfiprintf_r+0x150>
 800d810:	2240      	movs	r2, #64	@ 0x40
 800d812:	9b04      	ldr	r3, [sp, #16]
 800d814:	eba0 000a 	sub.w	r0, r0, sl
 800d818:	4082      	lsls	r2, r0
 800d81a:	4313      	orrs	r3, r2
 800d81c:	3401      	adds	r4, #1
 800d81e:	9304      	str	r3, [sp, #16]
 800d820:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d824:	2206      	movs	r2, #6
 800d826:	4825      	ldr	r0, [pc, #148]	@ (800d8bc <_svfiprintf_r+0x1ec>)
 800d828:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d82c:	f7fe fc11 	bl	800c052 <memchr>
 800d830:	2800      	cmp	r0, #0
 800d832:	d036      	beq.n	800d8a2 <_svfiprintf_r+0x1d2>
 800d834:	4b22      	ldr	r3, [pc, #136]	@ (800d8c0 <_svfiprintf_r+0x1f0>)
 800d836:	bb1b      	cbnz	r3, 800d880 <_svfiprintf_r+0x1b0>
 800d838:	9b03      	ldr	r3, [sp, #12]
 800d83a:	3307      	adds	r3, #7
 800d83c:	f023 0307 	bic.w	r3, r3, #7
 800d840:	3308      	adds	r3, #8
 800d842:	9303      	str	r3, [sp, #12]
 800d844:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d846:	4433      	add	r3, r6
 800d848:	9309      	str	r3, [sp, #36]	@ 0x24
 800d84a:	e76a      	b.n	800d722 <_svfiprintf_r+0x52>
 800d84c:	460c      	mov	r4, r1
 800d84e:	2001      	movs	r0, #1
 800d850:	fb0c 3202 	mla	r2, ip, r2, r3
 800d854:	e7a8      	b.n	800d7a8 <_svfiprintf_r+0xd8>
 800d856:	2300      	movs	r3, #0
 800d858:	f04f 0c0a 	mov.w	ip, #10
 800d85c:	4619      	mov	r1, r3
 800d85e:	3401      	adds	r4, #1
 800d860:	9305      	str	r3, [sp, #20]
 800d862:	4620      	mov	r0, r4
 800d864:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d868:	3a30      	subs	r2, #48	@ 0x30
 800d86a:	2a09      	cmp	r2, #9
 800d86c:	d903      	bls.n	800d876 <_svfiprintf_r+0x1a6>
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d0c6      	beq.n	800d800 <_svfiprintf_r+0x130>
 800d872:	9105      	str	r1, [sp, #20]
 800d874:	e7c4      	b.n	800d800 <_svfiprintf_r+0x130>
 800d876:	4604      	mov	r4, r0
 800d878:	2301      	movs	r3, #1
 800d87a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d87e:	e7f0      	b.n	800d862 <_svfiprintf_r+0x192>
 800d880:	ab03      	add	r3, sp, #12
 800d882:	9300      	str	r3, [sp, #0]
 800d884:	462a      	mov	r2, r5
 800d886:	4638      	mov	r0, r7
 800d888:	4b0e      	ldr	r3, [pc, #56]	@ (800d8c4 <_svfiprintf_r+0x1f4>)
 800d88a:	a904      	add	r1, sp, #16
 800d88c:	f7fd fe64 	bl	800b558 <_printf_float>
 800d890:	1c42      	adds	r2, r0, #1
 800d892:	4606      	mov	r6, r0
 800d894:	d1d6      	bne.n	800d844 <_svfiprintf_r+0x174>
 800d896:	89ab      	ldrh	r3, [r5, #12]
 800d898:	065b      	lsls	r3, r3, #25
 800d89a:	f53f af2d 	bmi.w	800d6f8 <_svfiprintf_r+0x28>
 800d89e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d8a0:	e72c      	b.n	800d6fc <_svfiprintf_r+0x2c>
 800d8a2:	ab03      	add	r3, sp, #12
 800d8a4:	9300      	str	r3, [sp, #0]
 800d8a6:	462a      	mov	r2, r5
 800d8a8:	4638      	mov	r0, r7
 800d8aa:	4b06      	ldr	r3, [pc, #24]	@ (800d8c4 <_svfiprintf_r+0x1f4>)
 800d8ac:	a904      	add	r1, sp, #16
 800d8ae:	f7fe f8f1 	bl	800ba94 <_printf_i>
 800d8b2:	e7ed      	b.n	800d890 <_svfiprintf_r+0x1c0>
 800d8b4:	0800ebce 	.word	0x0800ebce
 800d8b8:	0800ebd4 	.word	0x0800ebd4
 800d8bc:	0800ebd8 	.word	0x0800ebd8
 800d8c0:	0800b559 	.word	0x0800b559
 800d8c4:	0800d619 	.word	0x0800d619

0800d8c8 <__sflush_r>:
 800d8c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ce:	0716      	lsls	r6, r2, #28
 800d8d0:	4605      	mov	r5, r0
 800d8d2:	460c      	mov	r4, r1
 800d8d4:	d454      	bmi.n	800d980 <__sflush_r+0xb8>
 800d8d6:	684b      	ldr	r3, [r1, #4]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	dc02      	bgt.n	800d8e2 <__sflush_r+0x1a>
 800d8dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	dd48      	ble.n	800d974 <__sflush_r+0xac>
 800d8e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d8e4:	2e00      	cmp	r6, #0
 800d8e6:	d045      	beq.n	800d974 <__sflush_r+0xac>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d8ee:	682f      	ldr	r7, [r5, #0]
 800d8f0:	6a21      	ldr	r1, [r4, #32]
 800d8f2:	602b      	str	r3, [r5, #0]
 800d8f4:	d030      	beq.n	800d958 <__sflush_r+0x90>
 800d8f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d8f8:	89a3      	ldrh	r3, [r4, #12]
 800d8fa:	0759      	lsls	r1, r3, #29
 800d8fc:	d505      	bpl.n	800d90a <__sflush_r+0x42>
 800d8fe:	6863      	ldr	r3, [r4, #4]
 800d900:	1ad2      	subs	r2, r2, r3
 800d902:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d904:	b10b      	cbz	r3, 800d90a <__sflush_r+0x42>
 800d906:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d908:	1ad2      	subs	r2, r2, r3
 800d90a:	2300      	movs	r3, #0
 800d90c:	4628      	mov	r0, r5
 800d90e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d910:	6a21      	ldr	r1, [r4, #32]
 800d912:	47b0      	blx	r6
 800d914:	1c43      	adds	r3, r0, #1
 800d916:	89a3      	ldrh	r3, [r4, #12]
 800d918:	d106      	bne.n	800d928 <__sflush_r+0x60>
 800d91a:	6829      	ldr	r1, [r5, #0]
 800d91c:	291d      	cmp	r1, #29
 800d91e:	d82b      	bhi.n	800d978 <__sflush_r+0xb0>
 800d920:	4a28      	ldr	r2, [pc, #160]	@ (800d9c4 <__sflush_r+0xfc>)
 800d922:	40ca      	lsrs	r2, r1
 800d924:	07d6      	lsls	r6, r2, #31
 800d926:	d527      	bpl.n	800d978 <__sflush_r+0xb0>
 800d928:	2200      	movs	r2, #0
 800d92a:	6062      	str	r2, [r4, #4]
 800d92c:	6922      	ldr	r2, [r4, #16]
 800d92e:	04d9      	lsls	r1, r3, #19
 800d930:	6022      	str	r2, [r4, #0]
 800d932:	d504      	bpl.n	800d93e <__sflush_r+0x76>
 800d934:	1c42      	adds	r2, r0, #1
 800d936:	d101      	bne.n	800d93c <__sflush_r+0x74>
 800d938:	682b      	ldr	r3, [r5, #0]
 800d93a:	b903      	cbnz	r3, 800d93e <__sflush_r+0x76>
 800d93c:	6560      	str	r0, [r4, #84]	@ 0x54
 800d93e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d940:	602f      	str	r7, [r5, #0]
 800d942:	b1b9      	cbz	r1, 800d974 <__sflush_r+0xac>
 800d944:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d948:	4299      	cmp	r1, r3
 800d94a:	d002      	beq.n	800d952 <__sflush_r+0x8a>
 800d94c:	4628      	mov	r0, r5
 800d94e:	f7ff f9eb 	bl	800cd28 <_free_r>
 800d952:	2300      	movs	r3, #0
 800d954:	6363      	str	r3, [r4, #52]	@ 0x34
 800d956:	e00d      	b.n	800d974 <__sflush_r+0xac>
 800d958:	2301      	movs	r3, #1
 800d95a:	4628      	mov	r0, r5
 800d95c:	47b0      	blx	r6
 800d95e:	4602      	mov	r2, r0
 800d960:	1c50      	adds	r0, r2, #1
 800d962:	d1c9      	bne.n	800d8f8 <__sflush_r+0x30>
 800d964:	682b      	ldr	r3, [r5, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d0c6      	beq.n	800d8f8 <__sflush_r+0x30>
 800d96a:	2b1d      	cmp	r3, #29
 800d96c:	d001      	beq.n	800d972 <__sflush_r+0xaa>
 800d96e:	2b16      	cmp	r3, #22
 800d970:	d11d      	bne.n	800d9ae <__sflush_r+0xe6>
 800d972:	602f      	str	r7, [r5, #0]
 800d974:	2000      	movs	r0, #0
 800d976:	e021      	b.n	800d9bc <__sflush_r+0xf4>
 800d978:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d97c:	b21b      	sxth	r3, r3
 800d97e:	e01a      	b.n	800d9b6 <__sflush_r+0xee>
 800d980:	690f      	ldr	r7, [r1, #16]
 800d982:	2f00      	cmp	r7, #0
 800d984:	d0f6      	beq.n	800d974 <__sflush_r+0xac>
 800d986:	0793      	lsls	r3, r2, #30
 800d988:	bf18      	it	ne
 800d98a:	2300      	movne	r3, #0
 800d98c:	680e      	ldr	r6, [r1, #0]
 800d98e:	bf08      	it	eq
 800d990:	694b      	ldreq	r3, [r1, #20]
 800d992:	1bf6      	subs	r6, r6, r7
 800d994:	600f      	str	r7, [r1, #0]
 800d996:	608b      	str	r3, [r1, #8]
 800d998:	2e00      	cmp	r6, #0
 800d99a:	ddeb      	ble.n	800d974 <__sflush_r+0xac>
 800d99c:	4633      	mov	r3, r6
 800d99e:	463a      	mov	r2, r7
 800d9a0:	4628      	mov	r0, r5
 800d9a2:	6a21      	ldr	r1, [r4, #32]
 800d9a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d9a8:	47e0      	blx	ip
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	dc07      	bgt.n	800d9be <__sflush_r+0xf6>
 800d9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9b6:	f04f 30ff 	mov.w	r0, #4294967295
 800d9ba:	81a3      	strh	r3, [r4, #12]
 800d9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9be:	4407      	add	r7, r0
 800d9c0:	1a36      	subs	r6, r6, r0
 800d9c2:	e7e9      	b.n	800d998 <__sflush_r+0xd0>
 800d9c4:	20400001 	.word	0x20400001

0800d9c8 <_fflush_r>:
 800d9c8:	b538      	push	{r3, r4, r5, lr}
 800d9ca:	690b      	ldr	r3, [r1, #16]
 800d9cc:	4605      	mov	r5, r0
 800d9ce:	460c      	mov	r4, r1
 800d9d0:	b913      	cbnz	r3, 800d9d8 <_fflush_r+0x10>
 800d9d2:	2500      	movs	r5, #0
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	bd38      	pop	{r3, r4, r5, pc}
 800d9d8:	b118      	cbz	r0, 800d9e2 <_fflush_r+0x1a>
 800d9da:	6a03      	ldr	r3, [r0, #32]
 800d9dc:	b90b      	cbnz	r3, 800d9e2 <_fflush_r+0x1a>
 800d9de:	f7fe fa03 	bl	800bde8 <__sinit>
 800d9e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d0f3      	beq.n	800d9d2 <_fflush_r+0xa>
 800d9ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d9ec:	07d0      	lsls	r0, r2, #31
 800d9ee:	d404      	bmi.n	800d9fa <_fflush_r+0x32>
 800d9f0:	0599      	lsls	r1, r3, #22
 800d9f2:	d402      	bmi.n	800d9fa <_fflush_r+0x32>
 800d9f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d9f6:	f7fe fb2a 	bl	800c04e <__retarget_lock_acquire_recursive>
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	4621      	mov	r1, r4
 800d9fe:	f7ff ff63 	bl	800d8c8 <__sflush_r>
 800da02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800da04:	4605      	mov	r5, r0
 800da06:	07da      	lsls	r2, r3, #31
 800da08:	d4e4      	bmi.n	800d9d4 <_fflush_r+0xc>
 800da0a:	89a3      	ldrh	r3, [r4, #12]
 800da0c:	059b      	lsls	r3, r3, #22
 800da0e:	d4e1      	bmi.n	800d9d4 <_fflush_r+0xc>
 800da10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800da12:	f7fe fb1d 	bl	800c050 <__retarget_lock_release_recursive>
 800da16:	e7dd      	b.n	800d9d4 <_fflush_r+0xc>

0800da18 <memmove>:
 800da18:	4288      	cmp	r0, r1
 800da1a:	b510      	push	{r4, lr}
 800da1c:	eb01 0402 	add.w	r4, r1, r2
 800da20:	d902      	bls.n	800da28 <memmove+0x10>
 800da22:	4284      	cmp	r4, r0
 800da24:	4623      	mov	r3, r4
 800da26:	d807      	bhi.n	800da38 <memmove+0x20>
 800da28:	1e43      	subs	r3, r0, #1
 800da2a:	42a1      	cmp	r1, r4
 800da2c:	d008      	beq.n	800da40 <memmove+0x28>
 800da2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da36:	e7f8      	b.n	800da2a <memmove+0x12>
 800da38:	4601      	mov	r1, r0
 800da3a:	4402      	add	r2, r0
 800da3c:	428a      	cmp	r2, r1
 800da3e:	d100      	bne.n	800da42 <memmove+0x2a>
 800da40:	bd10      	pop	{r4, pc}
 800da42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da4a:	e7f7      	b.n	800da3c <memmove+0x24>

0800da4c <_sbrk_r>:
 800da4c:	b538      	push	{r3, r4, r5, lr}
 800da4e:	2300      	movs	r3, #0
 800da50:	4d05      	ldr	r5, [pc, #20]	@ (800da68 <_sbrk_r+0x1c>)
 800da52:	4604      	mov	r4, r0
 800da54:	4608      	mov	r0, r1
 800da56:	602b      	str	r3, [r5, #0]
 800da58:	f7fa fe6c 	bl	8008734 <_sbrk>
 800da5c:	1c43      	adds	r3, r0, #1
 800da5e:	d102      	bne.n	800da66 <_sbrk_r+0x1a>
 800da60:	682b      	ldr	r3, [r5, #0]
 800da62:	b103      	cbz	r3, 800da66 <_sbrk_r+0x1a>
 800da64:	6023      	str	r3, [r4, #0]
 800da66:	bd38      	pop	{r3, r4, r5, pc}
 800da68:	20000794 	.word	0x20000794

0800da6c <memcpy>:
 800da6c:	440a      	add	r2, r1
 800da6e:	4291      	cmp	r1, r2
 800da70:	f100 33ff 	add.w	r3, r0, #4294967295
 800da74:	d100      	bne.n	800da78 <memcpy+0xc>
 800da76:	4770      	bx	lr
 800da78:	b510      	push	{r4, lr}
 800da7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da7e:	4291      	cmp	r1, r2
 800da80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da84:	d1f9      	bne.n	800da7a <memcpy+0xe>
 800da86:	bd10      	pop	{r4, pc}

0800da88 <__assert_func>:
 800da88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da8a:	4614      	mov	r4, r2
 800da8c:	461a      	mov	r2, r3
 800da8e:	4b09      	ldr	r3, [pc, #36]	@ (800dab4 <__assert_func+0x2c>)
 800da90:	4605      	mov	r5, r0
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	68d8      	ldr	r0, [r3, #12]
 800da96:	b14c      	cbz	r4, 800daac <__assert_func+0x24>
 800da98:	4b07      	ldr	r3, [pc, #28]	@ (800dab8 <__assert_func+0x30>)
 800da9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da9e:	9100      	str	r1, [sp, #0]
 800daa0:	462b      	mov	r3, r5
 800daa2:	4906      	ldr	r1, [pc, #24]	@ (800dabc <__assert_func+0x34>)
 800daa4:	f000 f870 	bl	800db88 <fiprintf>
 800daa8:	f000 f880 	bl	800dbac <abort>
 800daac:	4b04      	ldr	r3, [pc, #16]	@ (800dac0 <__assert_func+0x38>)
 800daae:	461c      	mov	r4, r3
 800dab0:	e7f3      	b.n	800da9a <__assert_func+0x12>
 800dab2:	bf00      	nop
 800dab4:	20000040 	.word	0x20000040
 800dab8:	0800ebe9 	.word	0x0800ebe9
 800dabc:	0800ebf6 	.word	0x0800ebf6
 800dac0:	0800ec24 	.word	0x0800ec24

0800dac4 <_calloc_r>:
 800dac4:	b570      	push	{r4, r5, r6, lr}
 800dac6:	fba1 5402 	umull	r5, r4, r1, r2
 800daca:	b934      	cbnz	r4, 800dada <_calloc_r+0x16>
 800dacc:	4629      	mov	r1, r5
 800dace:	f7ff f99d 	bl	800ce0c <_malloc_r>
 800dad2:	4606      	mov	r6, r0
 800dad4:	b928      	cbnz	r0, 800dae2 <_calloc_r+0x1e>
 800dad6:	4630      	mov	r0, r6
 800dad8:	bd70      	pop	{r4, r5, r6, pc}
 800dada:	220c      	movs	r2, #12
 800dadc:	2600      	movs	r6, #0
 800dade:	6002      	str	r2, [r0, #0]
 800dae0:	e7f9      	b.n	800dad6 <_calloc_r+0x12>
 800dae2:	462a      	mov	r2, r5
 800dae4:	4621      	mov	r1, r4
 800dae6:	f7fe fa35 	bl	800bf54 <memset>
 800daea:	e7f4      	b.n	800dad6 <_calloc_r+0x12>

0800daec <__ascii_mbtowc>:
 800daec:	b082      	sub	sp, #8
 800daee:	b901      	cbnz	r1, 800daf2 <__ascii_mbtowc+0x6>
 800daf0:	a901      	add	r1, sp, #4
 800daf2:	b142      	cbz	r2, 800db06 <__ascii_mbtowc+0x1a>
 800daf4:	b14b      	cbz	r3, 800db0a <__ascii_mbtowc+0x1e>
 800daf6:	7813      	ldrb	r3, [r2, #0]
 800daf8:	600b      	str	r3, [r1, #0]
 800dafa:	7812      	ldrb	r2, [r2, #0]
 800dafc:	1e10      	subs	r0, r2, #0
 800dafe:	bf18      	it	ne
 800db00:	2001      	movne	r0, #1
 800db02:	b002      	add	sp, #8
 800db04:	4770      	bx	lr
 800db06:	4610      	mov	r0, r2
 800db08:	e7fb      	b.n	800db02 <__ascii_mbtowc+0x16>
 800db0a:	f06f 0001 	mvn.w	r0, #1
 800db0e:	e7f8      	b.n	800db02 <__ascii_mbtowc+0x16>

0800db10 <_realloc_r>:
 800db10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db14:	4607      	mov	r7, r0
 800db16:	4614      	mov	r4, r2
 800db18:	460d      	mov	r5, r1
 800db1a:	b921      	cbnz	r1, 800db26 <_realloc_r+0x16>
 800db1c:	4611      	mov	r1, r2
 800db1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db22:	f7ff b973 	b.w	800ce0c <_malloc_r>
 800db26:	b92a      	cbnz	r2, 800db34 <_realloc_r+0x24>
 800db28:	f7ff f8fe 	bl	800cd28 <_free_r>
 800db2c:	4625      	mov	r5, r4
 800db2e:	4628      	mov	r0, r5
 800db30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db34:	f000 f841 	bl	800dbba <_malloc_usable_size_r>
 800db38:	4284      	cmp	r4, r0
 800db3a:	4606      	mov	r6, r0
 800db3c:	d802      	bhi.n	800db44 <_realloc_r+0x34>
 800db3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800db42:	d8f4      	bhi.n	800db2e <_realloc_r+0x1e>
 800db44:	4621      	mov	r1, r4
 800db46:	4638      	mov	r0, r7
 800db48:	f7ff f960 	bl	800ce0c <_malloc_r>
 800db4c:	4680      	mov	r8, r0
 800db4e:	b908      	cbnz	r0, 800db54 <_realloc_r+0x44>
 800db50:	4645      	mov	r5, r8
 800db52:	e7ec      	b.n	800db2e <_realloc_r+0x1e>
 800db54:	42b4      	cmp	r4, r6
 800db56:	4622      	mov	r2, r4
 800db58:	4629      	mov	r1, r5
 800db5a:	bf28      	it	cs
 800db5c:	4632      	movcs	r2, r6
 800db5e:	f7ff ff85 	bl	800da6c <memcpy>
 800db62:	4629      	mov	r1, r5
 800db64:	4638      	mov	r0, r7
 800db66:	f7ff f8df 	bl	800cd28 <_free_r>
 800db6a:	e7f1      	b.n	800db50 <_realloc_r+0x40>

0800db6c <__ascii_wctomb>:
 800db6c:	4603      	mov	r3, r0
 800db6e:	4608      	mov	r0, r1
 800db70:	b141      	cbz	r1, 800db84 <__ascii_wctomb+0x18>
 800db72:	2aff      	cmp	r2, #255	@ 0xff
 800db74:	d904      	bls.n	800db80 <__ascii_wctomb+0x14>
 800db76:	228a      	movs	r2, #138	@ 0x8a
 800db78:	f04f 30ff 	mov.w	r0, #4294967295
 800db7c:	601a      	str	r2, [r3, #0]
 800db7e:	4770      	bx	lr
 800db80:	2001      	movs	r0, #1
 800db82:	700a      	strb	r2, [r1, #0]
 800db84:	4770      	bx	lr
	...

0800db88 <fiprintf>:
 800db88:	b40e      	push	{r1, r2, r3}
 800db8a:	b503      	push	{r0, r1, lr}
 800db8c:	4601      	mov	r1, r0
 800db8e:	ab03      	add	r3, sp, #12
 800db90:	4805      	ldr	r0, [pc, #20]	@ (800dba8 <fiprintf+0x20>)
 800db92:	f853 2b04 	ldr.w	r2, [r3], #4
 800db96:	6800      	ldr	r0, [r0, #0]
 800db98:	9301      	str	r3, [sp, #4]
 800db9a:	f000 f83d 	bl	800dc18 <_vfiprintf_r>
 800db9e:	b002      	add	sp, #8
 800dba0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dba4:	b003      	add	sp, #12
 800dba6:	4770      	bx	lr
 800dba8:	20000040 	.word	0x20000040

0800dbac <abort>:
 800dbac:	2006      	movs	r0, #6
 800dbae:	b508      	push	{r3, lr}
 800dbb0:	f000 fa06 	bl	800dfc0 <raise>
 800dbb4:	2001      	movs	r0, #1
 800dbb6:	f7fa fd48 	bl	800864a <_exit>

0800dbba <_malloc_usable_size_r>:
 800dbba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbbe:	1f18      	subs	r0, r3, #4
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	bfbc      	itt	lt
 800dbc4:	580b      	ldrlt	r3, [r1, r0]
 800dbc6:	18c0      	addlt	r0, r0, r3
 800dbc8:	4770      	bx	lr

0800dbca <__sfputc_r>:
 800dbca:	6893      	ldr	r3, [r2, #8]
 800dbcc:	b410      	push	{r4}
 800dbce:	3b01      	subs	r3, #1
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	6093      	str	r3, [r2, #8]
 800dbd4:	da07      	bge.n	800dbe6 <__sfputc_r+0x1c>
 800dbd6:	6994      	ldr	r4, [r2, #24]
 800dbd8:	42a3      	cmp	r3, r4
 800dbda:	db01      	blt.n	800dbe0 <__sfputc_r+0x16>
 800dbdc:	290a      	cmp	r1, #10
 800dbde:	d102      	bne.n	800dbe6 <__sfputc_r+0x1c>
 800dbe0:	bc10      	pop	{r4}
 800dbe2:	f000 b931 	b.w	800de48 <__swbuf_r>
 800dbe6:	6813      	ldr	r3, [r2, #0]
 800dbe8:	1c58      	adds	r0, r3, #1
 800dbea:	6010      	str	r0, [r2, #0]
 800dbec:	7019      	strb	r1, [r3, #0]
 800dbee:	4608      	mov	r0, r1
 800dbf0:	bc10      	pop	{r4}
 800dbf2:	4770      	bx	lr

0800dbf4 <__sfputs_r>:
 800dbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbf6:	4606      	mov	r6, r0
 800dbf8:	460f      	mov	r7, r1
 800dbfa:	4614      	mov	r4, r2
 800dbfc:	18d5      	adds	r5, r2, r3
 800dbfe:	42ac      	cmp	r4, r5
 800dc00:	d101      	bne.n	800dc06 <__sfputs_r+0x12>
 800dc02:	2000      	movs	r0, #0
 800dc04:	e007      	b.n	800dc16 <__sfputs_r+0x22>
 800dc06:	463a      	mov	r2, r7
 800dc08:	4630      	mov	r0, r6
 800dc0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc0e:	f7ff ffdc 	bl	800dbca <__sfputc_r>
 800dc12:	1c43      	adds	r3, r0, #1
 800dc14:	d1f3      	bne.n	800dbfe <__sfputs_r+0xa>
 800dc16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dc18 <_vfiprintf_r>:
 800dc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc1c:	460d      	mov	r5, r1
 800dc1e:	4614      	mov	r4, r2
 800dc20:	4698      	mov	r8, r3
 800dc22:	4606      	mov	r6, r0
 800dc24:	b09d      	sub	sp, #116	@ 0x74
 800dc26:	b118      	cbz	r0, 800dc30 <_vfiprintf_r+0x18>
 800dc28:	6a03      	ldr	r3, [r0, #32]
 800dc2a:	b90b      	cbnz	r3, 800dc30 <_vfiprintf_r+0x18>
 800dc2c:	f7fe f8dc 	bl	800bde8 <__sinit>
 800dc30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc32:	07d9      	lsls	r1, r3, #31
 800dc34:	d405      	bmi.n	800dc42 <_vfiprintf_r+0x2a>
 800dc36:	89ab      	ldrh	r3, [r5, #12]
 800dc38:	059a      	lsls	r2, r3, #22
 800dc3a:	d402      	bmi.n	800dc42 <_vfiprintf_r+0x2a>
 800dc3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc3e:	f7fe fa06 	bl	800c04e <__retarget_lock_acquire_recursive>
 800dc42:	89ab      	ldrh	r3, [r5, #12]
 800dc44:	071b      	lsls	r3, r3, #28
 800dc46:	d501      	bpl.n	800dc4c <_vfiprintf_r+0x34>
 800dc48:	692b      	ldr	r3, [r5, #16]
 800dc4a:	b99b      	cbnz	r3, 800dc74 <_vfiprintf_r+0x5c>
 800dc4c:	4629      	mov	r1, r5
 800dc4e:	4630      	mov	r0, r6
 800dc50:	f000 f938 	bl	800dec4 <__swsetup_r>
 800dc54:	b170      	cbz	r0, 800dc74 <_vfiprintf_r+0x5c>
 800dc56:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dc58:	07dc      	lsls	r4, r3, #31
 800dc5a:	d504      	bpl.n	800dc66 <_vfiprintf_r+0x4e>
 800dc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc60:	b01d      	add	sp, #116	@ 0x74
 800dc62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc66:	89ab      	ldrh	r3, [r5, #12]
 800dc68:	0598      	lsls	r0, r3, #22
 800dc6a:	d4f7      	bmi.n	800dc5c <_vfiprintf_r+0x44>
 800dc6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dc6e:	f7fe f9ef 	bl	800c050 <__retarget_lock_release_recursive>
 800dc72:	e7f3      	b.n	800dc5c <_vfiprintf_r+0x44>
 800dc74:	2300      	movs	r3, #0
 800dc76:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc78:	2320      	movs	r3, #32
 800dc7a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dc7e:	2330      	movs	r3, #48	@ 0x30
 800dc80:	f04f 0901 	mov.w	r9, #1
 800dc84:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc88:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800de34 <_vfiprintf_r+0x21c>
 800dc8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dc90:	4623      	mov	r3, r4
 800dc92:	469a      	mov	sl, r3
 800dc94:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc98:	b10a      	cbz	r2, 800dc9e <_vfiprintf_r+0x86>
 800dc9a:	2a25      	cmp	r2, #37	@ 0x25
 800dc9c:	d1f9      	bne.n	800dc92 <_vfiprintf_r+0x7a>
 800dc9e:	ebba 0b04 	subs.w	fp, sl, r4
 800dca2:	d00b      	beq.n	800dcbc <_vfiprintf_r+0xa4>
 800dca4:	465b      	mov	r3, fp
 800dca6:	4622      	mov	r2, r4
 800dca8:	4629      	mov	r1, r5
 800dcaa:	4630      	mov	r0, r6
 800dcac:	f7ff ffa2 	bl	800dbf4 <__sfputs_r>
 800dcb0:	3001      	adds	r0, #1
 800dcb2:	f000 80a7 	beq.w	800de04 <_vfiprintf_r+0x1ec>
 800dcb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcb8:	445a      	add	r2, fp
 800dcba:	9209      	str	r2, [sp, #36]	@ 0x24
 800dcbc:	f89a 3000 	ldrb.w	r3, [sl]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	f000 809f 	beq.w	800de04 <_vfiprintf_r+0x1ec>
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	f04f 32ff 	mov.w	r2, #4294967295
 800dccc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dcd0:	f10a 0a01 	add.w	sl, sl, #1
 800dcd4:	9304      	str	r3, [sp, #16]
 800dcd6:	9307      	str	r3, [sp, #28]
 800dcd8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dcdc:	931a      	str	r3, [sp, #104]	@ 0x68
 800dcde:	4654      	mov	r4, sl
 800dce0:	2205      	movs	r2, #5
 800dce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dce6:	4853      	ldr	r0, [pc, #332]	@ (800de34 <_vfiprintf_r+0x21c>)
 800dce8:	f7fe f9b3 	bl	800c052 <memchr>
 800dcec:	9a04      	ldr	r2, [sp, #16]
 800dcee:	b9d8      	cbnz	r0, 800dd28 <_vfiprintf_r+0x110>
 800dcf0:	06d1      	lsls	r1, r2, #27
 800dcf2:	bf44      	itt	mi
 800dcf4:	2320      	movmi	r3, #32
 800dcf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dcfa:	0713      	lsls	r3, r2, #28
 800dcfc:	bf44      	itt	mi
 800dcfe:	232b      	movmi	r3, #43	@ 0x2b
 800dd00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dd04:	f89a 3000 	ldrb.w	r3, [sl]
 800dd08:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd0a:	d015      	beq.n	800dd38 <_vfiprintf_r+0x120>
 800dd0c:	4654      	mov	r4, sl
 800dd0e:	2000      	movs	r0, #0
 800dd10:	f04f 0c0a 	mov.w	ip, #10
 800dd14:	9a07      	ldr	r2, [sp, #28]
 800dd16:	4621      	mov	r1, r4
 800dd18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd1c:	3b30      	subs	r3, #48	@ 0x30
 800dd1e:	2b09      	cmp	r3, #9
 800dd20:	d94b      	bls.n	800ddba <_vfiprintf_r+0x1a2>
 800dd22:	b1b0      	cbz	r0, 800dd52 <_vfiprintf_r+0x13a>
 800dd24:	9207      	str	r2, [sp, #28]
 800dd26:	e014      	b.n	800dd52 <_vfiprintf_r+0x13a>
 800dd28:	eba0 0308 	sub.w	r3, r0, r8
 800dd2c:	fa09 f303 	lsl.w	r3, r9, r3
 800dd30:	4313      	orrs	r3, r2
 800dd32:	46a2      	mov	sl, r4
 800dd34:	9304      	str	r3, [sp, #16]
 800dd36:	e7d2      	b.n	800dcde <_vfiprintf_r+0xc6>
 800dd38:	9b03      	ldr	r3, [sp, #12]
 800dd3a:	1d19      	adds	r1, r3, #4
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	9103      	str	r1, [sp, #12]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	bfbb      	ittet	lt
 800dd44:	425b      	neglt	r3, r3
 800dd46:	f042 0202 	orrlt.w	r2, r2, #2
 800dd4a:	9307      	strge	r3, [sp, #28]
 800dd4c:	9307      	strlt	r3, [sp, #28]
 800dd4e:	bfb8      	it	lt
 800dd50:	9204      	strlt	r2, [sp, #16]
 800dd52:	7823      	ldrb	r3, [r4, #0]
 800dd54:	2b2e      	cmp	r3, #46	@ 0x2e
 800dd56:	d10a      	bne.n	800dd6e <_vfiprintf_r+0x156>
 800dd58:	7863      	ldrb	r3, [r4, #1]
 800dd5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd5c:	d132      	bne.n	800ddc4 <_vfiprintf_r+0x1ac>
 800dd5e:	9b03      	ldr	r3, [sp, #12]
 800dd60:	3402      	adds	r4, #2
 800dd62:	1d1a      	adds	r2, r3, #4
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	9203      	str	r2, [sp, #12]
 800dd68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dd6c:	9305      	str	r3, [sp, #20]
 800dd6e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800de38 <_vfiprintf_r+0x220>
 800dd72:	2203      	movs	r2, #3
 800dd74:	4650      	mov	r0, sl
 800dd76:	7821      	ldrb	r1, [r4, #0]
 800dd78:	f7fe f96b 	bl	800c052 <memchr>
 800dd7c:	b138      	cbz	r0, 800dd8e <_vfiprintf_r+0x176>
 800dd7e:	2240      	movs	r2, #64	@ 0x40
 800dd80:	9b04      	ldr	r3, [sp, #16]
 800dd82:	eba0 000a 	sub.w	r0, r0, sl
 800dd86:	4082      	lsls	r2, r0
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	3401      	adds	r4, #1
 800dd8c:	9304      	str	r3, [sp, #16]
 800dd8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd92:	2206      	movs	r2, #6
 800dd94:	4829      	ldr	r0, [pc, #164]	@ (800de3c <_vfiprintf_r+0x224>)
 800dd96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dd9a:	f7fe f95a 	bl	800c052 <memchr>
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	d03f      	beq.n	800de22 <_vfiprintf_r+0x20a>
 800dda2:	4b27      	ldr	r3, [pc, #156]	@ (800de40 <_vfiprintf_r+0x228>)
 800dda4:	bb1b      	cbnz	r3, 800ddee <_vfiprintf_r+0x1d6>
 800dda6:	9b03      	ldr	r3, [sp, #12]
 800dda8:	3307      	adds	r3, #7
 800ddaa:	f023 0307 	bic.w	r3, r3, #7
 800ddae:	3308      	adds	r3, #8
 800ddb0:	9303      	str	r3, [sp, #12]
 800ddb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddb4:	443b      	add	r3, r7
 800ddb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddb8:	e76a      	b.n	800dc90 <_vfiprintf_r+0x78>
 800ddba:	460c      	mov	r4, r1
 800ddbc:	2001      	movs	r0, #1
 800ddbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ddc2:	e7a8      	b.n	800dd16 <_vfiprintf_r+0xfe>
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	f04f 0c0a 	mov.w	ip, #10
 800ddca:	4619      	mov	r1, r3
 800ddcc:	3401      	adds	r4, #1
 800ddce:	9305      	str	r3, [sp, #20]
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ddd6:	3a30      	subs	r2, #48	@ 0x30
 800ddd8:	2a09      	cmp	r2, #9
 800ddda:	d903      	bls.n	800dde4 <_vfiprintf_r+0x1cc>
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d0c6      	beq.n	800dd6e <_vfiprintf_r+0x156>
 800dde0:	9105      	str	r1, [sp, #20]
 800dde2:	e7c4      	b.n	800dd6e <_vfiprintf_r+0x156>
 800dde4:	4604      	mov	r4, r0
 800dde6:	2301      	movs	r3, #1
 800dde8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddec:	e7f0      	b.n	800ddd0 <_vfiprintf_r+0x1b8>
 800ddee:	ab03      	add	r3, sp, #12
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	462a      	mov	r2, r5
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	4b13      	ldr	r3, [pc, #76]	@ (800de44 <_vfiprintf_r+0x22c>)
 800ddf8:	a904      	add	r1, sp, #16
 800ddfa:	f7fd fbad 	bl	800b558 <_printf_float>
 800ddfe:	4607      	mov	r7, r0
 800de00:	1c78      	adds	r0, r7, #1
 800de02:	d1d6      	bne.n	800ddb2 <_vfiprintf_r+0x19a>
 800de04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800de06:	07d9      	lsls	r1, r3, #31
 800de08:	d405      	bmi.n	800de16 <_vfiprintf_r+0x1fe>
 800de0a:	89ab      	ldrh	r3, [r5, #12]
 800de0c:	059a      	lsls	r2, r3, #22
 800de0e:	d402      	bmi.n	800de16 <_vfiprintf_r+0x1fe>
 800de10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800de12:	f7fe f91d 	bl	800c050 <__retarget_lock_release_recursive>
 800de16:	89ab      	ldrh	r3, [r5, #12]
 800de18:	065b      	lsls	r3, r3, #25
 800de1a:	f53f af1f 	bmi.w	800dc5c <_vfiprintf_r+0x44>
 800de1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800de20:	e71e      	b.n	800dc60 <_vfiprintf_r+0x48>
 800de22:	ab03      	add	r3, sp, #12
 800de24:	9300      	str	r3, [sp, #0]
 800de26:	462a      	mov	r2, r5
 800de28:	4630      	mov	r0, r6
 800de2a:	4b06      	ldr	r3, [pc, #24]	@ (800de44 <_vfiprintf_r+0x22c>)
 800de2c:	a904      	add	r1, sp, #16
 800de2e:	f7fd fe31 	bl	800ba94 <_printf_i>
 800de32:	e7e4      	b.n	800ddfe <_vfiprintf_r+0x1e6>
 800de34:	0800ebce 	.word	0x0800ebce
 800de38:	0800ebd4 	.word	0x0800ebd4
 800de3c:	0800ebd8 	.word	0x0800ebd8
 800de40:	0800b559 	.word	0x0800b559
 800de44:	0800dbf5 	.word	0x0800dbf5

0800de48 <__swbuf_r>:
 800de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4a:	460e      	mov	r6, r1
 800de4c:	4614      	mov	r4, r2
 800de4e:	4605      	mov	r5, r0
 800de50:	b118      	cbz	r0, 800de5a <__swbuf_r+0x12>
 800de52:	6a03      	ldr	r3, [r0, #32]
 800de54:	b90b      	cbnz	r3, 800de5a <__swbuf_r+0x12>
 800de56:	f7fd ffc7 	bl	800bde8 <__sinit>
 800de5a:	69a3      	ldr	r3, [r4, #24]
 800de5c:	60a3      	str	r3, [r4, #8]
 800de5e:	89a3      	ldrh	r3, [r4, #12]
 800de60:	071a      	lsls	r2, r3, #28
 800de62:	d501      	bpl.n	800de68 <__swbuf_r+0x20>
 800de64:	6923      	ldr	r3, [r4, #16]
 800de66:	b943      	cbnz	r3, 800de7a <__swbuf_r+0x32>
 800de68:	4621      	mov	r1, r4
 800de6a:	4628      	mov	r0, r5
 800de6c:	f000 f82a 	bl	800dec4 <__swsetup_r>
 800de70:	b118      	cbz	r0, 800de7a <__swbuf_r+0x32>
 800de72:	f04f 37ff 	mov.w	r7, #4294967295
 800de76:	4638      	mov	r0, r7
 800de78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de7a:	6823      	ldr	r3, [r4, #0]
 800de7c:	6922      	ldr	r2, [r4, #16]
 800de7e:	b2f6      	uxtb	r6, r6
 800de80:	1a98      	subs	r0, r3, r2
 800de82:	6963      	ldr	r3, [r4, #20]
 800de84:	4637      	mov	r7, r6
 800de86:	4283      	cmp	r3, r0
 800de88:	dc05      	bgt.n	800de96 <__swbuf_r+0x4e>
 800de8a:	4621      	mov	r1, r4
 800de8c:	4628      	mov	r0, r5
 800de8e:	f7ff fd9b 	bl	800d9c8 <_fflush_r>
 800de92:	2800      	cmp	r0, #0
 800de94:	d1ed      	bne.n	800de72 <__swbuf_r+0x2a>
 800de96:	68a3      	ldr	r3, [r4, #8]
 800de98:	3b01      	subs	r3, #1
 800de9a:	60a3      	str	r3, [r4, #8]
 800de9c:	6823      	ldr	r3, [r4, #0]
 800de9e:	1c5a      	adds	r2, r3, #1
 800dea0:	6022      	str	r2, [r4, #0]
 800dea2:	701e      	strb	r6, [r3, #0]
 800dea4:	6962      	ldr	r2, [r4, #20]
 800dea6:	1c43      	adds	r3, r0, #1
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d004      	beq.n	800deb6 <__swbuf_r+0x6e>
 800deac:	89a3      	ldrh	r3, [r4, #12]
 800deae:	07db      	lsls	r3, r3, #31
 800deb0:	d5e1      	bpl.n	800de76 <__swbuf_r+0x2e>
 800deb2:	2e0a      	cmp	r6, #10
 800deb4:	d1df      	bne.n	800de76 <__swbuf_r+0x2e>
 800deb6:	4621      	mov	r1, r4
 800deb8:	4628      	mov	r0, r5
 800deba:	f7ff fd85 	bl	800d9c8 <_fflush_r>
 800debe:	2800      	cmp	r0, #0
 800dec0:	d0d9      	beq.n	800de76 <__swbuf_r+0x2e>
 800dec2:	e7d6      	b.n	800de72 <__swbuf_r+0x2a>

0800dec4 <__swsetup_r>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4b29      	ldr	r3, [pc, #164]	@ (800df6c <__swsetup_r+0xa8>)
 800dec8:	4605      	mov	r5, r0
 800deca:	6818      	ldr	r0, [r3, #0]
 800decc:	460c      	mov	r4, r1
 800dece:	b118      	cbz	r0, 800ded8 <__swsetup_r+0x14>
 800ded0:	6a03      	ldr	r3, [r0, #32]
 800ded2:	b90b      	cbnz	r3, 800ded8 <__swsetup_r+0x14>
 800ded4:	f7fd ff88 	bl	800bde8 <__sinit>
 800ded8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dedc:	0719      	lsls	r1, r3, #28
 800dede:	d422      	bmi.n	800df26 <__swsetup_r+0x62>
 800dee0:	06da      	lsls	r2, r3, #27
 800dee2:	d407      	bmi.n	800def4 <__swsetup_r+0x30>
 800dee4:	2209      	movs	r2, #9
 800dee6:	602a      	str	r2, [r5, #0]
 800dee8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800deec:	f04f 30ff 	mov.w	r0, #4294967295
 800def0:	81a3      	strh	r3, [r4, #12]
 800def2:	e033      	b.n	800df5c <__swsetup_r+0x98>
 800def4:	0758      	lsls	r0, r3, #29
 800def6:	d512      	bpl.n	800df1e <__swsetup_r+0x5a>
 800def8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800defa:	b141      	cbz	r1, 800df0e <__swsetup_r+0x4a>
 800defc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df00:	4299      	cmp	r1, r3
 800df02:	d002      	beq.n	800df0a <__swsetup_r+0x46>
 800df04:	4628      	mov	r0, r5
 800df06:	f7fe ff0f 	bl	800cd28 <_free_r>
 800df0a:	2300      	movs	r3, #0
 800df0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800df0e:	89a3      	ldrh	r3, [r4, #12]
 800df10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800df14:	81a3      	strh	r3, [r4, #12]
 800df16:	2300      	movs	r3, #0
 800df18:	6063      	str	r3, [r4, #4]
 800df1a:	6923      	ldr	r3, [r4, #16]
 800df1c:	6023      	str	r3, [r4, #0]
 800df1e:	89a3      	ldrh	r3, [r4, #12]
 800df20:	f043 0308 	orr.w	r3, r3, #8
 800df24:	81a3      	strh	r3, [r4, #12]
 800df26:	6923      	ldr	r3, [r4, #16]
 800df28:	b94b      	cbnz	r3, 800df3e <__swsetup_r+0x7a>
 800df2a:	89a3      	ldrh	r3, [r4, #12]
 800df2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800df30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800df34:	d003      	beq.n	800df3e <__swsetup_r+0x7a>
 800df36:	4621      	mov	r1, r4
 800df38:	4628      	mov	r0, r5
 800df3a:	f000 f882 	bl	800e042 <__smakebuf_r>
 800df3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df42:	f013 0201 	ands.w	r2, r3, #1
 800df46:	d00a      	beq.n	800df5e <__swsetup_r+0x9a>
 800df48:	2200      	movs	r2, #0
 800df4a:	60a2      	str	r2, [r4, #8]
 800df4c:	6962      	ldr	r2, [r4, #20]
 800df4e:	4252      	negs	r2, r2
 800df50:	61a2      	str	r2, [r4, #24]
 800df52:	6922      	ldr	r2, [r4, #16]
 800df54:	b942      	cbnz	r2, 800df68 <__swsetup_r+0xa4>
 800df56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800df5a:	d1c5      	bne.n	800dee8 <__swsetup_r+0x24>
 800df5c:	bd38      	pop	{r3, r4, r5, pc}
 800df5e:	0799      	lsls	r1, r3, #30
 800df60:	bf58      	it	pl
 800df62:	6962      	ldrpl	r2, [r4, #20]
 800df64:	60a2      	str	r2, [r4, #8]
 800df66:	e7f4      	b.n	800df52 <__swsetup_r+0x8e>
 800df68:	2000      	movs	r0, #0
 800df6a:	e7f7      	b.n	800df5c <__swsetup_r+0x98>
 800df6c:	20000040 	.word	0x20000040

0800df70 <_raise_r>:
 800df70:	291f      	cmp	r1, #31
 800df72:	b538      	push	{r3, r4, r5, lr}
 800df74:	4605      	mov	r5, r0
 800df76:	460c      	mov	r4, r1
 800df78:	d904      	bls.n	800df84 <_raise_r+0x14>
 800df7a:	2316      	movs	r3, #22
 800df7c:	6003      	str	r3, [r0, #0]
 800df7e:	f04f 30ff 	mov.w	r0, #4294967295
 800df82:	bd38      	pop	{r3, r4, r5, pc}
 800df84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800df86:	b112      	cbz	r2, 800df8e <_raise_r+0x1e>
 800df88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800df8c:	b94b      	cbnz	r3, 800dfa2 <_raise_r+0x32>
 800df8e:	4628      	mov	r0, r5
 800df90:	f000 f830 	bl	800dff4 <_getpid_r>
 800df94:	4622      	mov	r2, r4
 800df96:	4601      	mov	r1, r0
 800df98:	4628      	mov	r0, r5
 800df9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df9e:	f000 b817 	b.w	800dfd0 <_kill_r>
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d00a      	beq.n	800dfbc <_raise_r+0x4c>
 800dfa6:	1c59      	adds	r1, r3, #1
 800dfa8:	d103      	bne.n	800dfb2 <_raise_r+0x42>
 800dfaa:	2316      	movs	r3, #22
 800dfac:	6003      	str	r3, [r0, #0]
 800dfae:	2001      	movs	r0, #1
 800dfb0:	e7e7      	b.n	800df82 <_raise_r+0x12>
 800dfb2:	2100      	movs	r1, #0
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dfba:	4798      	blx	r3
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	e7e0      	b.n	800df82 <_raise_r+0x12>

0800dfc0 <raise>:
 800dfc0:	4b02      	ldr	r3, [pc, #8]	@ (800dfcc <raise+0xc>)
 800dfc2:	4601      	mov	r1, r0
 800dfc4:	6818      	ldr	r0, [r3, #0]
 800dfc6:	f7ff bfd3 	b.w	800df70 <_raise_r>
 800dfca:	bf00      	nop
 800dfcc:	20000040 	.word	0x20000040

0800dfd0 <_kill_r>:
 800dfd0:	b538      	push	{r3, r4, r5, lr}
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	4d06      	ldr	r5, [pc, #24]	@ (800dff0 <_kill_r+0x20>)
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	4608      	mov	r0, r1
 800dfda:	4611      	mov	r1, r2
 800dfdc:	602b      	str	r3, [r5, #0]
 800dfde:	f7fa fb24 	bl	800862a <_kill>
 800dfe2:	1c43      	adds	r3, r0, #1
 800dfe4:	d102      	bne.n	800dfec <_kill_r+0x1c>
 800dfe6:	682b      	ldr	r3, [r5, #0]
 800dfe8:	b103      	cbz	r3, 800dfec <_kill_r+0x1c>
 800dfea:	6023      	str	r3, [r4, #0]
 800dfec:	bd38      	pop	{r3, r4, r5, pc}
 800dfee:	bf00      	nop
 800dff0:	20000794 	.word	0x20000794

0800dff4 <_getpid_r>:
 800dff4:	f7fa bb12 	b.w	800861c <_getpid>

0800dff8 <__swhatbuf_r>:
 800dff8:	b570      	push	{r4, r5, r6, lr}
 800dffa:	460c      	mov	r4, r1
 800dffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e000:	4615      	mov	r5, r2
 800e002:	2900      	cmp	r1, #0
 800e004:	461e      	mov	r6, r3
 800e006:	b096      	sub	sp, #88	@ 0x58
 800e008:	da0c      	bge.n	800e024 <__swhatbuf_r+0x2c>
 800e00a:	89a3      	ldrh	r3, [r4, #12]
 800e00c:	2100      	movs	r1, #0
 800e00e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e012:	bf14      	ite	ne
 800e014:	2340      	movne	r3, #64	@ 0x40
 800e016:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e01a:	2000      	movs	r0, #0
 800e01c:	6031      	str	r1, [r6, #0]
 800e01e:	602b      	str	r3, [r5, #0]
 800e020:	b016      	add	sp, #88	@ 0x58
 800e022:	bd70      	pop	{r4, r5, r6, pc}
 800e024:	466a      	mov	r2, sp
 800e026:	f000 f849 	bl	800e0bc <_fstat_r>
 800e02a:	2800      	cmp	r0, #0
 800e02c:	dbed      	blt.n	800e00a <__swhatbuf_r+0x12>
 800e02e:	9901      	ldr	r1, [sp, #4]
 800e030:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e034:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e038:	4259      	negs	r1, r3
 800e03a:	4159      	adcs	r1, r3
 800e03c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e040:	e7eb      	b.n	800e01a <__swhatbuf_r+0x22>

0800e042 <__smakebuf_r>:
 800e042:	898b      	ldrh	r3, [r1, #12]
 800e044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e046:	079d      	lsls	r5, r3, #30
 800e048:	4606      	mov	r6, r0
 800e04a:	460c      	mov	r4, r1
 800e04c:	d507      	bpl.n	800e05e <__smakebuf_r+0x1c>
 800e04e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e052:	6023      	str	r3, [r4, #0]
 800e054:	6123      	str	r3, [r4, #16]
 800e056:	2301      	movs	r3, #1
 800e058:	6163      	str	r3, [r4, #20]
 800e05a:	b003      	add	sp, #12
 800e05c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e05e:	466a      	mov	r2, sp
 800e060:	ab01      	add	r3, sp, #4
 800e062:	f7ff ffc9 	bl	800dff8 <__swhatbuf_r>
 800e066:	9f00      	ldr	r7, [sp, #0]
 800e068:	4605      	mov	r5, r0
 800e06a:	4639      	mov	r1, r7
 800e06c:	4630      	mov	r0, r6
 800e06e:	f7fe fecd 	bl	800ce0c <_malloc_r>
 800e072:	b948      	cbnz	r0, 800e088 <__smakebuf_r+0x46>
 800e074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e078:	059a      	lsls	r2, r3, #22
 800e07a:	d4ee      	bmi.n	800e05a <__smakebuf_r+0x18>
 800e07c:	f023 0303 	bic.w	r3, r3, #3
 800e080:	f043 0302 	orr.w	r3, r3, #2
 800e084:	81a3      	strh	r3, [r4, #12]
 800e086:	e7e2      	b.n	800e04e <__smakebuf_r+0xc>
 800e088:	89a3      	ldrh	r3, [r4, #12]
 800e08a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e08e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e092:	81a3      	strh	r3, [r4, #12]
 800e094:	9b01      	ldr	r3, [sp, #4]
 800e096:	6020      	str	r0, [r4, #0]
 800e098:	b15b      	cbz	r3, 800e0b2 <__smakebuf_r+0x70>
 800e09a:	4630      	mov	r0, r6
 800e09c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0a0:	f000 f81e 	bl	800e0e0 <_isatty_r>
 800e0a4:	b128      	cbz	r0, 800e0b2 <__smakebuf_r+0x70>
 800e0a6:	89a3      	ldrh	r3, [r4, #12]
 800e0a8:	f023 0303 	bic.w	r3, r3, #3
 800e0ac:	f043 0301 	orr.w	r3, r3, #1
 800e0b0:	81a3      	strh	r3, [r4, #12]
 800e0b2:	89a3      	ldrh	r3, [r4, #12]
 800e0b4:	431d      	orrs	r5, r3
 800e0b6:	81a5      	strh	r5, [r4, #12]
 800e0b8:	e7cf      	b.n	800e05a <__smakebuf_r+0x18>
	...

0800e0bc <_fstat_r>:
 800e0bc:	b538      	push	{r3, r4, r5, lr}
 800e0be:	2300      	movs	r3, #0
 800e0c0:	4d06      	ldr	r5, [pc, #24]	@ (800e0dc <_fstat_r+0x20>)
 800e0c2:	4604      	mov	r4, r0
 800e0c4:	4608      	mov	r0, r1
 800e0c6:	4611      	mov	r1, r2
 800e0c8:	602b      	str	r3, [r5, #0]
 800e0ca:	f7fa fb0d 	bl	80086e8 <_fstat>
 800e0ce:	1c43      	adds	r3, r0, #1
 800e0d0:	d102      	bne.n	800e0d8 <_fstat_r+0x1c>
 800e0d2:	682b      	ldr	r3, [r5, #0]
 800e0d4:	b103      	cbz	r3, 800e0d8 <_fstat_r+0x1c>
 800e0d6:	6023      	str	r3, [r4, #0]
 800e0d8:	bd38      	pop	{r3, r4, r5, pc}
 800e0da:	bf00      	nop
 800e0dc:	20000794 	.word	0x20000794

0800e0e0 <_isatty_r>:
 800e0e0:	b538      	push	{r3, r4, r5, lr}
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	4d05      	ldr	r5, [pc, #20]	@ (800e0fc <_isatty_r+0x1c>)
 800e0e6:	4604      	mov	r4, r0
 800e0e8:	4608      	mov	r0, r1
 800e0ea:	602b      	str	r3, [r5, #0]
 800e0ec:	f7fa fb0b 	bl	8008706 <_isatty>
 800e0f0:	1c43      	adds	r3, r0, #1
 800e0f2:	d102      	bne.n	800e0fa <_isatty_r+0x1a>
 800e0f4:	682b      	ldr	r3, [r5, #0]
 800e0f6:	b103      	cbz	r3, 800e0fa <_isatty_r+0x1a>
 800e0f8:	6023      	str	r3, [r4, #0]
 800e0fa:	bd38      	pop	{r3, r4, r5, pc}
 800e0fc:	20000794 	.word	0x20000794

0800e100 <_init>:
 800e100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e102:	bf00      	nop
 800e104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e106:	bc08      	pop	{r3}
 800e108:	469e      	mov	lr, r3
 800e10a:	4770      	bx	lr

0800e10c <_fini>:
 800e10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10e:	bf00      	nop
 800e110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e112:	bc08      	pop	{r3}
 800e114:	469e      	mov	lr, r3
 800e116:	4770      	bx	lr
